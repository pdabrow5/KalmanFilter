
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020644  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  080208e8  080208e8  000308e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021454  08021454  00031454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0802145c  0802145c  0003145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802146c  0802146c  0003146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08021470  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  0802164c  000401dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  080216ac  0004023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a630  2400029c  0802170c  0004029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400a8cc  0802170c  0004a8cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000402ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006ad94  00000000  00000000  0004030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009260  00000000  00000000  000ab0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000039c0  00000000  00000000  000b4308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c5f  00000000  00000000  000b7cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000459b3  00000000  00000000  000ba927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043040  00000000  00000000  001002da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018c2e3  00000000  00000000  0014331a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000112f8  00000000  00000000  002cf600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002e08f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080208cc 	.word	0x080208cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	080208cc 	.word	0x080208cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f001 fd23 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f001 fd3a 	bl	80024ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f001 fd1b 	bl	8002478 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a42:	200c      	movs	r0, #12
 8000a44:	f001 fd32 	bl	80024ac <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <MX_ETH_Init+0x84>)
 8000a5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ETH_Init+0x88>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ETH_Init+0x88>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ETH_Init+0x88>)
 8000a6c:	22e1      	movs	r2, #225	; 0xe1
 8000a6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_ETH_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ETH_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ETH_Init+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a84:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_ETH_Init+0x88>)
 8000a86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_ETH_Init+0x8c>)
 8000a92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x90>)
 8000a98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000aa4:	f004 fb4c 	bl	8005140 <HAL_ETH_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 fee5 	bl	800187c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ab8:	f01e f83b 	bl	801eb32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240002f0 	.word	0x240002f0
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	240003a0 	.word	0x240003a0
 8000ae0:	2400023c 	.word	0x2400023c
 8000ae4:	240001dc 	.word	0x240001dc
 8000ae8:	240002b8 	.word	0x240002b8

08000aec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80ab 	bne.w	8000c66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a39      	ldr	r2, [pc, #228]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be2:	2332      	movs	r3, #50	; 0x32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_ETH_MspInit+0x18c>)
 8000bfe:	f004 fec3 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c02:	2386      	movs	r3, #134	; 0x86
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_ETH_MspInit+0x190>)
 8000c1e:	f004 feb3 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_ETH_MspInit+0x194>)
 8000c40:	f004 fea2 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_ETH_MspInit+0x198>)
 8000c62:	f004 fe91 	bl	8005988 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40028000 	.word	0x40028000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021800 	.word	0x58021800

08000c88 <DelayFunction>:
//	GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
//	GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
//}

void DelayFunction(uint16_t ms)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	osDelay(ms);
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f019 f8e7 	bl	8019e68 <osDelay>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	inter_flag = 0;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_UART_RxCpltCallback+0x2c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	++INTERRUPTS;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cba:	6013      	str	r3, [r2, #0]
	//HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x34>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <HAL_UART_RxCpltCallback+0x38>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f019 fd77 	bl	801a7b6 <xQueueGiveFromISR>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000400 	.word	0x24000400
 8000cd4:	24000404 	.word	0x24000404
 8000cd8:	240044d4 	.word	0x240044d4
 8000cdc:	24000408 	.word	0x24000408

08000ce0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_UARTEx_RxEventCallback+0x32>
	{
		inter_flag = Size;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cfa:	6013      	str	r3, [r2, #0]
		++INTERRUPTS;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000d04:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_UARTEx_RxEventCallback+0x48>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f019 fd52 	bl	801a7b6 <xQueueGiveFromISR>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	24000400 	.word	0x24000400
 8000d24:	24000404 	.word	0x24000404
 8000d28:	240044d4 	.word	0x240044d4
 8000d2c:	24000408 	.word	0x24000408

08000d30 <Receive_IT>:

void Receive_IT()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 421);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <Receive_IT+0x4c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f240 12a5 	movw	r2, #421	; 0x1a5
 8000d3c:	4910      	ldr	r1, [pc, #64]	; (8000d80 <Receive_IT+0x50>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f009 f96a 	bl	800a018 <HAL_UART_Receive_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <Receive_IT+0x54>)
 8000d4a:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT Status: %d", uart_result);
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Receive_IT+0x54>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d010      	beq.n	8000d76 <Receive_IT+0x46>
 8000d54:	f001 fa88 	bl	8002268 <HAL_GetTick>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	23a5      	movs	r3, #165	; 0xa5
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <Receive_IT+0x58>)
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <Receive_IT+0x5c>)
 8000d60:	f01d fe92 	bl	801ea88 <iprintf>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <Receive_IT+0x54>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <Receive_IT+0x60>)
 8000d6c:	f01d fe8c 	bl	801ea88 <iprintf>
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <Receive_IT+0x64>)
 8000d72:	f01d fe89 	bl	801ea88 <iprintf>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400a338 	.word	0x2400a338
 8000d80:	2400a344 	.word	0x2400a344
 8000d84:	2400040c 	.word	0x2400040c
 8000d88:	08020df0 	.word	0x08020df0
 8000d8c:	08020924 	.word	0x08020924
 8000d90:	08020934 	.word	0x08020934
 8000d94:	0802094c 	.word	0x0802094c

08000d98 <Receive_IT_IDLE>:

void Receive_IT_IDLE()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, sizeof(GNSS_Handle.uartWorkingBuffer));
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <Receive_IT_IDLE+0x4c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da4:	4910      	ldr	r1, [pc, #64]	; (8000de8 <Receive_IT_IDLE+0x50>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b ff39 	bl	800cc1e <HAL_UARTEx_ReceiveToIdle_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000db2:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d010      	beq.n	8000dde <Receive_IT_IDLE+0x46>
 8000dbc:	f001 fa54 	bl	8002268 <HAL_GetTick>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	23ab      	movs	r3, #171	; 0xab
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <Receive_IT_IDLE+0x58>)
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <Receive_IT_IDLE+0x5c>)
 8000dc8:	f01d fe5e 	bl	801ea88 <iprintf>
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Receive_IT_IDLE+0x60>)
 8000dd4:	f01d fe58 	bl	801ea88 <iprintf>
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <Receive_IT_IDLE+0x64>)
 8000dda:	f01d fe55 	bl	801ea88 <iprintf>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400a338 	.word	0x2400a338
 8000de8:	2400a344 	.word	0x2400a344
 8000dec:	2400040c 	.word	0x2400040c
 8000df0:	08020dfc 	.word	0x08020dfc
 8000df4:	08020924 	.word	0x08020924
 8000df8:	08020950 	.word	0x08020950
 8000dfc:	0802094c 	.word	0x0802094c

08000e00 <Receive_DMA>:
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 100);
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
}

void Receive_DMA()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 10);
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <Receive_DMA+0x48>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	220a      	movs	r2, #10
 8000e0a:	4910      	ldr	r1, [pc, #64]	; (8000e4c <Receive_DMA+0x4c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f009 f9cf 	bl	800a1b0 <HAL_UART_Receive_DMA>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <Receive_DMA+0x50>)
 8000e18:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_DMA Status: %d", uart_result);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <Receive_DMA+0x50>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d010      	beq.n	8000e44 <Receive_DMA+0x44>
 8000e22:	f001 fa21 	bl	8002268 <HAL_GetTick>
 8000e26:	4601      	mov	r1, r0
 8000e28:	23bb      	movs	r3, #187	; 0xbb
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <Receive_DMA+0x54>)
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <Receive_DMA+0x58>)
 8000e2e:	f01d fe2b 	bl	801ea88 <iprintf>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <Receive_DMA+0x50>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <Receive_DMA+0x5c>)
 8000e3a:	f01d fe25 	bl	801ea88 <iprintf>
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <Receive_DMA+0x60>)
 8000e40:	f01d fe22 	bl	801ea88 <iprintf>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2400a338 	.word	0x2400a338
 8000e4c:	2400a344 	.word	0x2400a344
 8000e50:	2400040c 	.word	0x2400040c
 8000e54:	08020e0c 	.word	0x08020e0c
 8000e58:	08020924 	.word	0x08020924
 8000e5c:	080209b4 	.word	0x080209b4
 8000e60:	0802094c 	.word	0x0802094c

08000e64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//		Bmx160_init();
	LOG("BMX INIT");
 8000e68:	f001 f9fe 	bl	8002268 <HAL_GetTick>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	23d9      	movs	r3, #217	; 0xd9
 8000e70:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_FREERTOS_Init+0x64>)
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_FREERTOS_Init+0x68>)
 8000e74:	f01d fe08 	bl	801ea88 <iprintf>
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <MX_FREERTOS_Init+0x6c>)
 8000e7a:	f01d fe05 	bl	801ea88 <iprintf>
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_FREERTOS_Init+0x70>)
 8000e80:	f01d fe02 	bl	801ea88 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GNNS_UART_INTERRUPT */
  GNNS_UART_INTERRUPTHandle = osSemaphoreNew(1, 1, &GNNS_UART_INTERRUPT_attributes);
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <MX_FREERTOS_Init+0x74>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f019 f808 	bl	8019e9e <osSemaphoreNew>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_FREERTOS_Init+0x78>)
 8000e92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_FREERTOS_Init+0x7c>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <MX_FREERTOS_Init+0x80>)
 8000e9a:	f018 ff53 	bl	8019d44 <osThreadNew>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <MX_FREERTOS_Init+0x84>)
 8000ea2:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <MX_FREERTOS_Init+0x88>)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_FREERTOS_Init+0x8c>)
 8000eaa:	f018 ff4b 	bl	8019d44 <osThreadNew>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <MX_FREERTOS_Init+0x90>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveGNSSData */
  ReceiveGNSSDataHandle = osThreadNew(StartReceiveGNSSDataTask, NULL, &ReceiveGNSSData_attributes);
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <MX_FREERTOS_Init+0x94>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_FREERTOS_Init+0x98>)
 8000eba:	f018 ff43 	bl	8019d44 <osThreadNew>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_FREERTOS_Init+0x9c>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	08020e18 	.word	0x08020e18
 8000ecc:	08020924 	.word	0x08020924
 8000ed0:	080209e8 	.word	0x080209e8
 8000ed4:	0802094c 	.word	0x0802094c
 8000ed8:	08020de0 	.word	0x08020de0
 8000edc:	240044d4 	.word	0x240044d4
 8000ee0:	08020d74 	.word	0x08020d74
 8000ee4:	08000f05 	.word	0x08000f05
 8000ee8:	24000410 	.word	0x24000410
 8000eec:	08020d98 	.word	0x08020d98
 8000ef0:	08000fb9 	.word	0x08000fb9
 8000ef4:	24000414 	.word	0x24000414
 8000ef8:	08020dbc 	.word	0x08020dbc
 8000efc:	080010d1 	.word	0x080010d1
 8000f00:	24002474 	.word	0x24002474

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Vec3 Pos, Acc, Vel;
	int flag = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4821      	ldr	r0, [pc, #132]	; (8000f9c <StartDefaultTask+0x98>)
 8000f16:	f004 fee7 	bl	8005ce8 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d038      	beq.n	8000f92 <StartDefaultTask+0x8e>
	{
		LOG("PUSHED BUTTON");
 8000f20:	f001 f9a2 	bl	8002268 <HAL_GetTick>
 8000f24:	4601      	mov	r1, r0
 8000f26:	f240 1315 	movw	r3, #277	; 0x115
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f2c:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f2e:	f01d fdab 	bl	801ea88 <iprintf>
 8000f32:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <StartDefaultTask+0xa4>)
 8000f34:	f01d fda8 	bl	801ea88 <iprintf>
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <StartDefaultTask+0xa8>)
 8000f3a:	f01d fda5 	bl	801ea88 <iprintf>
		//GNSS_GetUniqID(&GNSS_Handle);
		if(flag == 0)
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d113      	bne.n	8000f6c <StartDefaultTask+0x68>
		{
			LOG("Receive DMA");
 8000f44:	f001 f990 	bl	8002268 <HAL_GetTick>
 8000f48:	4601      	mov	r1, r0
 8000f4a:	f240 1319 	movw	r3, #281	; 0x119
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f52:	f01d fd99 	bl	801ea88 <iprintf>
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <StartDefaultTask+0xac>)
 8000f58:	f01d fd96 	bl	801ea88 <iprintf>
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <StartDefaultTask+0xa8>)
 8000f5e:	f01d fd93 	bl	801ea88 <iprintf>
			Receive_DMA();
 8000f62:	f7ff ff4d 	bl	8000e00 <Receive_DMA>
			flag = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6a:	e012      	b.n	8000f92 <StartDefaultTask+0x8e>
		}
		else
		{
			LOG("Receive IT");
 8000f6c:	f001 f97c 	bl	8002268 <HAL_GetTick>
 8000f70:	4601      	mov	r1, r0
 8000f72:	f240 131f 	movw	r3, #287	; 0x11f
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f7a:	f01d fd85 	bl	801ea88 <iprintf>
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <StartDefaultTask+0xb0>)
 8000f80:	f01d fd82 	bl	801ea88 <iprintf>
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <StartDefaultTask+0xa8>)
 8000f86:	f01d fd7f 	bl	801ea88 <iprintf>
			Receive_IT();
 8000f8a:	f7ff fed1 	bl	8000d30 <Receive_IT>
			flag = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
//	Vel = GetVelocity();
	//LOG("Vel: %f, \t%f, \t%f\tPos: %f, \t%f, \t%f", Vel.x, Vel.y, Vel.z, Pos.x, Pos.y, Pos.z);
	//LOG("INTERRUPTS: %d, inter_flag: %d, UART state: %d", INTERRUPTS, inter_flag, GNSS_Handle.huart->RxState);
	//GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetPVTData(&GNSS_Handle);
    osDelay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f018 ff67 	bl	8019e68 <osDelay>
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000f9a:	e7b9      	b.n	8000f10 <StartDefaultTask+0xc>
 8000f9c:	58020800 	.word	0x58020800
 8000fa0:	08020e2c 	.word	0x08020e2c
 8000fa4:	08020924 	.word	0x08020924
 8000fa8:	080209f4 	.word	0x080209f4
 8000fac:	0802094c 	.word	0x0802094c
 8000fb0:	08020a04 	.word	0x08020a04
 8000fb4:	08020a10 	.word	0x08020a10

08000fb8 <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	Bmx160_init();
 8000fc0:	f01b ff6c 	bl	801ce9c <Bmx160_init>
	LOG("After INIT");
 8000fc4:	f001 f950 	bl	8002268 <HAL_GetTick>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <StartAccMeassureTask+0xf4>)
 8000fd0:	4837      	ldr	r0, [pc, #220]	; (80010b0 <StartAccMeassureTask+0xf8>)
 8000fd2:	f01d fd59 	bl	801ea88 <iprintf>
 8000fd6:	4837      	ldr	r0, [pc, #220]	; (80010b4 <StartAccMeassureTask+0xfc>)
 8000fd8:	f01d fd56 	bl	801ea88 <iprintf>
 8000fdc:	4836      	ldr	r0, [pc, #216]	; (80010b8 <StartAccMeassureTask+0x100>)
 8000fde:	f01d fd53 	bl	801ea88 <iprintf>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000fe2:	4a36      	ldr	r2, [pc, #216]	; (80010bc <StartAccMeassureTask+0x104>)
 8000fe4:	4936      	ldr	r1, [pc, #216]	; (80010c0 <StartAccMeassureTask+0x108>)
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8000fe8:	f01c f83c 	bl	801d064 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <StartAccMeassureTask+0x104>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <StartAccMeassureTask+0x110>)
 8000ff2:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <StartAccMeassureTask+0x104>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <StartAccMeassureTask+0x110>)
 8000ffa:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <StartAccMeassureTask+0x104>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001002:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <StartAccMeassureTask+0x110>)
 800100a:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <StartAccMeassureTask+0x108>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001012:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <StartAccMeassureTask+0x110>)
 800101a:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001022:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <StartAccMeassureTask+0x110>)
 800102a:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001032:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <StartAccMeassureTask+0x110>)
 800103a:	6253      	str	r3, [r2, #36]	; 0x24
	InitAlgorithms(&SensorData);
 800103c:	4822      	ldr	r0, [pc, #136]	; (80010c8 <StartAccMeassureTask+0x110>)
 800103e:	f00c fabb 	bl	800d5b8 <InitAlgorithms>
//			osDelay(5);
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <StartAccMeassureTask+0x104>)
 8001044:	491e      	ldr	r1, [pc, #120]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001048:	f01c f80c 	bl	801d064 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <StartAccMeassureTask+0x104>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001052:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <StartAccMeassureTask+0x104>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <StartAccMeassureTask+0x110>)
 800105a:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <StartAccMeassureTask+0x104>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001062:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <StartAccMeassureTask+0x110>)
 800106a:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <StartAccMeassureTask+0x108>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001072:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <StartAccMeassureTask+0x110>)
 800107a:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001082:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <StartAccMeassureTask+0x110>)
 800108a:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001092:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <StartAccMeassureTask+0x110>)
 800109a:	6253      	str	r3, [r2, #36]	; 0x24
	MadgwickUpdate(&SensorData);
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <StartAccMeassureTask+0x110>)
 800109e:	f00c fb1f 	bl	800d6e0 <MadgwickUpdate>
//	//LOG("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", mx, my, mz);
//	//LOG("Raw:%f,%f,%f,%f,%f,%f,%f,%f,%f\n\r",
//			SensorData.Acc.x, SensorData.Acc.y, SensorData.Acc.z,
//			SensorData.Gyro.x, SensorData.Gyro.y, SensorData.Gyro.z,
//			SensorData.Mag.x, SensorData.Mag.y, SensorData.Mag.z);
	osDelay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f018 fee0 	bl	8019e68 <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 80010a8:	e7cb      	b.n	8001042 <StartAccMeassureTask+0x8a>
 80010aa:	bf00      	nop
 80010ac:	08020e40 	.word	0x08020e40
 80010b0:	08020924 	.word	0x08020924
 80010b4:	08020a1c 	.word	0x08020a1c
 80010b8:	0802094c 	.word	0x0802094c
 80010bc:	240003b8 	.word	0x240003b8
 80010c0:	240003c8 	.word	0x240003c8
 80010c4:	240003a8 	.word	0x240003a8
 80010c8:	240003d8 	.word	0x240003d8
 80010cc:	00000000 	.word	0x00000000

080010d0 <StartReceiveGNSSDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveGNSSDataTask */
void StartReceiveGNSSDataTask(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveGNSSDataTask */
  /* Infinite loop */
	LOG("GNSS INIT");
 80010d8:	f001 f8c6 	bl	8002268 <HAL_GetTick>
 80010dc:	4601      	mov	r1, r0
 80010de:	f240 139b 	movw	r3, #411	; 0x19b
 80010e2:	4ab9      	ldr	r2, [pc, #740]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80010e4:	48b9      	ldr	r0, [pc, #740]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80010e6:	f01d fccf 	bl	801ea88 <iprintf>
 80010ea:	48b9      	ldr	r0, [pc, #740]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80010ec:	f01d fccc 	bl	801ea88 <iprintf>
 80010f0:	48b8      	ldr	r0, [pc, #736]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80010f2:	f01d fcc9 	bl	801ea88 <iprintf>
	GNSS_Init(&GNSS_Handle, &huart1, DelayFunction);
 80010f6:	4ab8      	ldr	r2, [pc, #736]	; (80013d8 <StartReceiveGNSSDataTask+0x308>)
 80010f8:	49b8      	ldr	r1, [pc, #736]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80010fa:	48b9      	ldr	r0, [pc, #740]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 80010fc:	f01c f96c 	bl	801d3d8 <GNSS_Init>
	osDelay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f018 feb0 	bl	8019e68 <osDelay>
	LOG("GNSS LOAD CONFIG");
 8001108:	f001 f8ae 	bl	8002268 <HAL_GetTick>
 800110c:	4601      	mov	r1, r0
 800110e:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8001112:	4aad      	ldr	r2, [pc, #692]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001114:	48ad      	ldr	r0, [pc, #692]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001116:	f01d fcb7 	bl	801ea88 <iprintf>
 800111a:	48b2      	ldr	r0, [pc, #712]	; (80013e4 <StartReceiveGNSSDataTask+0x314>)
 800111c:	f01d fcb4 	bl	801ea88 <iprintf>
 8001120:	48ac      	ldr	r0, [pc, #688]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001122:	f01d fcb1 	bl	801ea88 <iprintf>
	//GNSS_LoadConfig(&GNSS_Handle);
	LOG("GNSS CONFIG LOADED!!!");
 8001126:	f001 f89f 	bl	8002268 <HAL_GetTick>
 800112a:	4601      	mov	r1, r0
 800112c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001130:	4aa5      	ldr	r2, [pc, #660]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001132:	48a6      	ldr	r0, [pc, #664]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001134:	f01d fca8 	bl	801ea88 <iprintf>
 8001138:	48ab      	ldr	r0, [pc, #684]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800113a:	f01d fca5 	bl	801ea88 <iprintf>
 800113e:	48a5      	ldr	r0, [pc, #660]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001140:	f01d fca2 	bl	801ea88 <iprintf>
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 8001144:	4ba9      	ldr	r3, [pc, #676]	; (80013ec <StartReceiveGNSSDataTask+0x31c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	4618      	mov	r0, r3
 800114e:	f019 fc93 	bl	801aa78 <xQueueSemaphoreTake>
  for(;;)
  {
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 8001152:	4ba3      	ldr	r3, [pc, #652]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2208      	movs	r2, #8
 8001158:	49a5      	ldr	r1, [pc, #660]	; (80013f0 <StartReceiveGNSSDataTask+0x320>)
 800115a:	4618      	mov	r0, r3
 800115c:	f008 ffa8 	bl	800a0b0 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
    Receive_IT_IDLE();
 8001160:	f7ff fe1a 	bl	8000d98 <Receive_IT_IDLE>
	//AskPvtReceive_IT_IDLE();
	LOG("Waiting for semaphore...");
 8001164:	f001 f880 	bl	8002268 <HAL_GetTick>
 8001168:	4601      	mov	r1, r0
 800116a:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800116e:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001170:	4896      	ldr	r0, [pc, #600]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001172:	f01d fc89 	bl	801ea88 <iprintf>
 8001176:	489f      	ldr	r0, [pc, #636]	; (80013f4 <StartReceiveGNSSDataTask+0x324>)
 8001178:	f01d fc86 	bl	801ea88 <iprintf>
 800117c:	4895      	ldr	r0, [pc, #596]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800117e:	f01d fc83 	bl	801ea88 <iprintf>
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 8001182:	4b9a      	ldr	r3, [pc, #616]	; (80013ec <StartReceiveGNSSDataTask+0x31c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 31ff 	mov.w	r1, #4294967295
 800118a:	4618      	mov	r0, r3
 800118c:	f019 fc74 	bl	801aa78 <xQueueSemaphoreTake>
	LOG("Got into loop, no.%d", INTERRUPTS);
 8001190:	f001 f86a 	bl	8002268 <HAL_GetTick>
 8001194:	4601      	mov	r1, r0
 8001196:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800119a:	4a8b      	ldr	r2, [pc, #556]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 800119c:	488b      	ldr	r0, [pc, #556]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 800119e:	f01d fc73 	bl	801ea88 <iprintf>
 80011a2:	4b95      	ldr	r3, [pc, #596]	; (80013f8 <StartReceiveGNSSDataTask+0x328>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4894      	ldr	r0, [pc, #592]	; (80013fc <StartReceiveGNSSDataTask+0x32c>)
 80011aa:	f01d fc6d 	bl	801ea88 <iprintf>
 80011ae:	4889      	ldr	r0, [pc, #548]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80011b0:	f01d fc6a 	bl	801ea88 <iprintf>
	if(inter_flag == 0)
 80011b4:	4b92      	ldr	r3, [pc, #584]	; (8001400 <StartReceiveGNSSDataTask+0x330>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d112      	bne.n	80011e2 <StartReceiveGNSSDataTask+0x112>
	{
		LOG("NORMAL GNSS INTERRUPT[%d]!!!", INTERRUPTS);
 80011bc:	f001 f854 	bl	8002268 <HAL_GetTick>
 80011c0:	4601      	mov	r1, r0
 80011c2:	f240 13ad 	movw	r3, #429	; 0x1ad
 80011c6:	4a80      	ldr	r2, [pc, #512]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80011c8:	4880      	ldr	r0, [pc, #512]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80011ca:	f01d fc5d 	bl	801ea88 <iprintf>
 80011ce:	4b8a      	ldr	r3, [pc, #552]	; (80013f8 <StartReceiveGNSSDataTask+0x328>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	488b      	ldr	r0, [pc, #556]	; (8001404 <StartReceiveGNSSDataTask+0x334>)
 80011d6:	f01d fc57 	bl	801ea88 <iprintf>
 80011da:	487e      	ldr	r0, [pc, #504]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80011dc:	f01d fc54 	bl	801ea88 <iprintf>
 80011e0:	e013      	b.n	800120a <StartReceiveGNSSDataTask+0x13a>
	}
	else
	{
		LOG("IDLE GNSS INTERRUPT[%d], SIZE: %d", INTERRUPTS, inter_flag);
 80011e2:	f001 f841 	bl	8002268 <HAL_GetTick>
 80011e6:	4601      	mov	r1, r0
 80011e8:	f240 13b1 	movw	r3, #433	; 0x1b1
 80011ec:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80011ee:	4877      	ldr	r0, [pc, #476]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80011f0:	f01d fc4a 	bl	801ea88 <iprintf>
 80011f4:	4b80      	ldr	r3, [pc, #512]	; (80013f8 <StartReceiveGNSSDataTask+0x328>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a81      	ldr	r2, [pc, #516]	; (8001400 <StartReceiveGNSSDataTask+0x330>)
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	4882      	ldr	r0, [pc, #520]	; (8001408 <StartReceiveGNSSDataTask+0x338>)
 8001200:	f01d fc42 	bl	801ea88 <iprintf>
 8001204:	4873      	ldr	r0, [pc, #460]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001206:	f01d fc3f 	bl	801ea88 <iprintf>
//	for(uint16_t size = 0; size < sizeofTable; ++size)
//		printf("%x ", GNSS_Handle.uartWorkingBuffer[size]);
//	printf("\n\n\r");
    //printf("%s \n\r", GNSS_Handle.uartWorkingBuffer);
	//GNSS_ParsePVTData(&GNSS_Handle);
	GNSS_ParsePVTDataPTR(&GNSS_Handle);
 800120a:	4875      	ldr	r0, [pc, #468]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 800120c:	f01c f934 	bl	801d478 <GNSS_ParsePVTDataPTR>
	LOG("Buffer: %d", GNSS_Handle.uartWorkingBuffer[0]);
 8001210:	f001 f82a 	bl	8002268 <HAL_GetTick>
 8001214:	4601      	mov	r1, r0
 8001216:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800121a:	4a6b      	ldr	r2, [pc, #428]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 800121c:	486b      	ldr	r0, [pc, #428]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 800121e:	f01d fc33 	bl	801ea88 <iprintf>
 8001222:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001224:	7b1b      	ldrb	r3, [r3, #12]
 8001226:	4619      	mov	r1, r3
 8001228:	4878      	ldr	r0, [pc, #480]	; (800140c <StartReceiveGNSSDataTask+0x33c>)
 800122a:	f01d fc2d 	bl	801ea88 <iprintf>
 800122e:	4869      	ldr	r0, [pc, #420]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001230:	f01d fc2a 	bl	801ea88 <iprintf>
	LOG("Day: %d-%d-%d \r\n", GNSS_Handle.day, GNSS_Handle.month,GNSS_Handle.year);
 8001234:	f001 f818 	bl	8002268 <HAL_GetTick>
 8001238:	4601      	mov	r1, r0
 800123a:	f240 13bd 	movw	r3, #445	; 0x1bd
 800123e:	4a62      	ldr	r2, [pc, #392]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001240:	4862      	ldr	r0, [pc, #392]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001242:	f01d fc21 	bl	801ea88 <iprintf>
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001248:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 800124c:	4619      	mov	r1, r3
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001250:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 8001254:	461a      	mov	r2, r3
 8001256:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001258:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800125c:	486c      	ldr	r0, [pc, #432]	; (8001410 <StartReceiveGNSSDataTask+0x340>)
 800125e:	f01d fc13 	bl	801ea88 <iprintf>
 8001262:	485c      	ldr	r0, [pc, #368]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001264:	f01d fc10 	bl	801ea88 <iprintf>
	LOG("Time: %d:%d:%d \r\n", GNSS_Handle.hour, GNSS_Handle.min,GNSS_Handle.sec);
 8001268:	f000 fffe 	bl	8002268 <HAL_GetTick>
 800126c:	4601      	mov	r1, r0
 800126e:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8001272:	4a55      	ldr	r2, [pc, #340]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001274:	4855      	ldr	r0, [pc, #340]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001276:	f01d fc07 	bl	801ea88 <iprintf>
 800127a:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 800127c:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8001280:	4619      	mov	r1, r3
 8001282:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001284:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 8001288:	461a      	mov	r2, r3
 800128a:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 800128c:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8001290:	4860      	ldr	r0, [pc, #384]	; (8001414 <StartReceiveGNSSDataTask+0x344>)
 8001292:	f01d fbf9 	bl	801ea88 <iprintf>
 8001296:	484f      	ldr	r0, [pc, #316]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001298:	f01d fbf6 	bl	801ea88 <iprintf>
	LOG("Status of fix: %d \r\n", GNSS_Handle.fixType);
 800129c:	f000 ffe4 	bl	8002268 <HAL_GetTick>
 80012a0:	4601      	mov	r1, r0
 80012a2:	f240 13bf 	movw	r3, #447	; 0x1bf
 80012a6:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80012a8:	4848      	ldr	r0, [pc, #288]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80012aa:	f01d fbed 	bl	801ea88 <iprintf>
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 80012b0:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 80012b4:	4619      	mov	r1, r3
 80012b6:	4858      	ldr	r0, [pc, #352]	; (8001418 <StartReceiveGNSSDataTask+0x348>)
 80012b8:	f01d fbe6 	bl	801ea88 <iprintf>
 80012bc:	4845      	ldr	r0, [pc, #276]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80012be:	f01d fbe3 	bl	801ea88 <iprintf>
	LOG("Latitude: %f \r\n", GNSS_Handle.fLat);
 80012c2:	f000 ffd1 	bl	8002268 <HAL_GetTick>
 80012c6:	4601      	mov	r1, r0
 80012c8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012cc:	4a3e      	ldr	r2, [pc, #248]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80012ce:	483f      	ldr	r0, [pc, #252]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80012d0:	f01d fbda 	bl	801ea88 <iprintf>
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 80012d6:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e2:	ec53 2b17 	vmov	r2, r3, d7
 80012e6:	484d      	ldr	r0, [pc, #308]	; (800141c <StartReceiveGNSSDataTask+0x34c>)
 80012e8:	f01d fbce 	bl	801ea88 <iprintf>
 80012ec:	4839      	ldr	r0, [pc, #228]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80012ee:	f01d fbcb 	bl	801ea88 <iprintf>
	LOG("Longitude: %f \r\n",(float) GNSS_Handle.lon / 10000000.0);
 80012f2:	f000 ffb9 	bl	8002268 <HAL_GetTick>
 80012f6:	4601      	mov	r1, r0
 80012f8:	f240 13c1 	movw	r3, #449	; 0x1c1
 80012fc:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80012fe:	4833      	ldr	r0, [pc, #204]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001300:	f01d fbc2 	bl	801ea88 <iprintf>
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001306:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001316:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80013c0 <StartReceiveGNSSDataTask+0x2f0>
 800131a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800131e:	ec53 2b15 	vmov	r2, r3, d5
 8001322:	483f      	ldr	r0, [pc, #252]	; (8001420 <StartReceiveGNSSDataTask+0x350>)
 8001324:	f01d fbb0 	bl	801ea88 <iprintf>
 8001328:	482a      	ldr	r0, [pc, #168]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800132a:	f01d fbad 	bl	801ea88 <iprintf>
	LOG("Height above ellipsoid: %d \r\n", GNSS_Handle.height);
 800132e:	f000 ff9b 	bl	8002268 <HAL_GetTick>
 8001332:	4601      	mov	r1, r0
 8001334:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 800133a:	4824      	ldr	r0, [pc, #144]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 800133c:	f01d fba4 	bl	801ea88 <iprintf>
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001342:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001346:	4619      	mov	r1, r3
 8001348:	4836      	ldr	r0, [pc, #216]	; (8001424 <StartReceiveGNSSDataTask+0x354>)
 800134a:	f01d fb9d 	bl	801ea88 <iprintf>
 800134e:	4821      	ldr	r0, [pc, #132]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001350:	f01d fb9a 	bl	801ea88 <iprintf>
	LOG("Height above mean sea level: %d \r\n", GNSS_Handle.hMSL);
 8001354:	f000 ff88 	bl	8002268 <HAL_GetTick>
 8001358:	4601      	mov	r1, r0
 800135a:	f240 13c3 	movw	r3, #451	; 0x1c3
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001360:	481a      	ldr	r0, [pc, #104]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001362:	f01d fb91 	bl	801ea88 <iprintf>
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001368:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800136c:	4619      	mov	r1, r3
 800136e:	482e      	ldr	r0, [pc, #184]	; (8001428 <StartReceiveGNSSDataTask+0x358>)
 8001370:	f01d fb8a 	bl	801ea88 <iprintf>
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001376:	f01d fb87 	bl	801ea88 <iprintf>
	LOG("Ground Speed (2-D): %d \r\n", GNSS_Handle.gSpeed);
 800137a:	f000 ff75 	bl	8002268 <HAL_GetTick>
 800137e:	4601      	mov	r1, r0
 8001380:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 8001388:	f01d fb7e 	bl	801ea88 <iprintf>
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 800138e:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8001392:	4619      	mov	r1, r3
 8001394:	4825      	ldr	r0, [pc, #148]	; (800142c <StartReceiveGNSSDataTask+0x35c>)
 8001396:	f01d fb77 	bl	801ea88 <iprintf>
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800139c:	f01d fb74 	bl	801ea88 <iprintf>
	LOG("");
 80013a0:	f000 ff62 	bl	8002268 <HAL_GetTick>
 80013a4:	4601      	mov	r1, r0
 80013a6:	f240 13c5 	movw	r3, #453	; 0x1c5
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <StartReceiveGNSSDataTask+0x2f8>)
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <StartReceiveGNSSDataTask+0x2fc>)
 80013ae:	f01d fb6b 	bl	801ea88 <iprintf>
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80013b4:	f01d fb68 	bl	801ea88 <iprintf>
	OnGNSSData(&GNSS_Handle);
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 80013ba:	f00c fc0f 	bl	800dbdc <OnGNSSData>
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 80013be:	e6c8      	b.n	8001152 <StartReceiveGNSSDataTask+0x82>
 80013c0:	00000000 	.word	0x00000000
 80013c4:	416312d0 	.word	0x416312d0
 80013c8:	08020e58 	.word	0x08020e58
 80013cc:	08020924 	.word	0x08020924
 80013d0:	08020a28 	.word	0x08020a28
 80013d4:	0802094c 	.word	0x0802094c
 80013d8:	08000c89 	.word	0x08000c89
 80013dc:	240045cc 	.word	0x240045cc
 80013e0:	2400a338 	.word	0x2400a338
 80013e4:	08020a34 	.word	0x08020a34
 80013e8:	08020a48 	.word	0x08020a48
 80013ec:	240044d4 	.word	0x240044d4
 80013f0:	08020d6c 	.word	0x08020d6c
 80013f4:	08020a60 	.word	0x08020a60
 80013f8:	24000404 	.word	0x24000404
 80013fc:	08020a7c 	.word	0x08020a7c
 8001400:	24000400 	.word	0x24000400
 8001404:	08020a94 	.word	0x08020a94
 8001408:	08020ab4 	.word	0x08020ab4
 800140c:	08020ad8 	.word	0x08020ad8
 8001410:	08020ae4 	.word	0x08020ae4
 8001414:	08020af8 	.word	0x08020af8
 8001418:	08020b0c 	.word	0x08020b0c
 800141c:	08020b24 	.word	0x08020b24
 8001420:	08020b34 	.word	0x08020b34
 8001424:	08020b48 	.word	0x08020b48
 8001428:	08020b68 	.word	0x08020b68
 800142c:	08020b8c 	.word	0x08020b8c

08001430 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <MX_GPIO_Init+0x174>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001464:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <MX_GPIO_Init+0x174>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a46      	ldr	r2, [pc, #280]	; (80015a4 <MX_GPIO_Init+0x174>)
 800148a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c4:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e2:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a28      	ldr	r2, [pc, #160]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_GPIO_Init+0x174>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED3_GPIO_Port, USR_LED3_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <MX_GPIO_Init+0x178>)
 8001520:	f004 fbfa 	bl	8005d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <MX_GPIO_Init+0x17c>)
 800152a:	f004 fbf5 	bl	8005d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481b      	ldr	r0, [pc, #108]	; (80015b0 <MX_GPIO_Init+0x180>)
 8001544:	f004 fa20 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin;
 8001548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED3_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_GPIO_Init+0x178>)
 8001562:	f004 fa11 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001566:	2340      	movs	r3, #64	; 0x40
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <MX_GPIO_Init+0x17c>)
 800157e:	f004 fa03 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_GPIO_Init+0x17c>)
 8001596:	f004 f9f7 	bl	8005988 <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020400 	.word	0x58020400
 80015ac:	58021800 	.word	0x58021800
 80015b0:	58020800 	.word	0x58020800

080015b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_I2C2_Init+0x78>)
 80015ba:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <MX_I2C2_Init+0x7c>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_I2C2_Init+0x78>)
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_I2C2_Init+0x80>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_I2C2_Init+0x78>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_I2C2_Init+0x78>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_I2C2_Init+0x78>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_I2C2_Init+0x78>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_I2C2_Init+0x78>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C2_Init+0x78>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_I2C2_Init+0x78>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ee:	480f      	ldr	r0, [pc, #60]	; (800162c <MX_I2C2_Init+0x78>)
 80015f0:	f004 fbac 	bl	8005d4c <HAL_I2C_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015fa:	f000 f93f 	bl	800187c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fe:	2100      	movs	r1, #0
 8001600:	480a      	ldr	r0, [pc, #40]	; (800162c <MX_I2C2_Init+0x78>)
 8001602:	f005 f8af 	bl	8006764 <HAL_I2CEx_ConfigAnalogFilter>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800160c:	f000 f936 	bl	800187c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001610:	2100      	movs	r1, #0
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_I2C2_Init+0x78>)
 8001614:	f005 f8f1 	bl	80067fa <HAL_I2CEx_ConfigDigitalFilter>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 f92d 	bl	800187c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001622:	2002      	movs	r0, #2
 8001624:	f005 f936 	bl	8006894 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	24004528 	.word	0x24004528
 8001630:	40005800 	.word	0x40005800
 8001634:	0040163a 	.word	0x0040163a

08001638 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0ba      	sub	sp, #232	; 0xe8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	22c0      	movs	r2, #192	; 0xc0
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f01d fa6a 	bl	801eb32 <memset>
  if(i2cHandle->Instance==I2C2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_I2C_MspInit+0xc4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d145      	bne.n	80016f4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001668:	f04f 0208 	mov.w	r2, #8
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fae6 	bl	8007c50 <HAL_RCCEx_PeriphCLKConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800168a:	f000 f8f7 	bl	800187c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <HAL_I2C_MspInit+0xcc>)
 80016d2:	f004 f959 	bl	8005988 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 80016de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_I2C_MspInit+0xc8>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016f4:	bf00      	nop
 80016f6:	37e8      	adds	r7, #232	; 0xe8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40005800 	.word	0x40005800
 8001700:	58024400 	.word	0x58024400
 8001704:	58021400 	.word	0x58021400

08001708 <__io_putchar>:
 */
#include "logger.h"

#ifdef DEBUG
PUTCHAR_PROTOTYPE
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001710:	1d39      	adds	r1, r7, #4
 8001712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001716:	2201      	movs	r2, #1
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <__io_putchar+0x20>)
 800171a:	f008 fbef 	bl	8009efc <HAL_UART_Transmit>

  return ch;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	24004660 	.word	0x24004660

0800172c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001730:	f000 fd4a 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001734:	f000 f816 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f7ff fe7a 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 800173c:	f7ff f962 	bl	8000a04 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001740:	f000 fc6a 	bl	8002018 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001744:	f7ff ff36 	bl	80015b4 <MX_I2C2_Init>
  MX_ETH_Init();
 8001748:	f7ff f984 	bl	8000a54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800174c:	f000 faf2 	bl	8001d34 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001750:	f000 faa4 	bl	8001c9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001754:	f018 faac 	bl	8019cb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001758:	f7ff fb84 	bl	8000e64 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800175c:	f018 facc 	bl	8019cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001760:	e7fe      	b.n	8001760 <main+0x34>
	...

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b09c      	sub	sp, #112	; 0x70
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	224c      	movs	r2, #76	; 0x4c
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f01d f9dd 	bl	801eb32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2220      	movs	r2, #32
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f01d f9d7 	bl	801eb32 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001784:	2002      	movs	r0, #2
 8001786:	f005 f9f1 	bl	8006b6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <SystemClock_Config+0xec>)
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <SystemClock_Config+0xec>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	62d3      	str	r3, [r2, #44]	; 0x2c
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <SystemClock_Config+0xec>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <SystemClock_Config+0xf0>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <SystemClock_Config+0xf0>)
 80017aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <SystemClock_Config+0xf0>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017bc:	bf00      	nop
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <SystemClock_Config+0xf0>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ca:	d1f8      	bne.n	80017be <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	2302      	movs	r3, #2
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017e2:	2318      	movs	r3, #24
 80017e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ea:	2304      	movs	r3, #4
 80017ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017f2:	230c      	movs	r3, #12
 80017f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4618      	mov	r0, r3
 8001804:	f005 f9fc 	bl	8006c00 <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800180e:	f000 f835 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	233f      	movs	r3, #63	; 0x3f
 8001814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2101      	movs	r1, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f005 fe3c 	bl	80074b4 <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001842:	f000 f81b 	bl	800187c <Error_Handler>
  }
}
 8001846:	bf00      	nop
 8001848:	3770      	adds	r7, #112	; 0x70
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58000400 	.word	0x58000400
 8001854:	58024800 	.word	0x58024800

08001858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186a:	f000 fce9 	bl	8002240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40014800 	.word	0x40014800

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x38>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_MspInit+0x38>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x38>)
 80018a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	210f      	movs	r1, #15
 80018b0:	f06f 0001 	mvn.w	r0, #1
 80018b4:	f000 fde0 	bl	8002478 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400

080018c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	d842      	bhi.n	8001958 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80018d2:	2200      	movs	r2, #0
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	2076      	movs	r0, #118	; 0x76
 80018d8:	f000 fdce 	bl	8002478 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80018dc:	2076      	movs	r0, #118	; 0x76
 80018de:	f000 fde5 	bl	80024ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_InitTick+0xac>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_InitTick+0xb0>)
 80018ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ee:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_InitTick+0xb0>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_InitTick+0xb0>)
 80018fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001906:	f107 020c 	add.w	r2, r7, #12
 800190a:	f107 0310 	add.w	r3, r7, #16
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f006 f95b 	bl	8007bcc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001916:	f006 f943 	bl	8007ba0 <HAL_RCC_GetPCLK2Freq>
 800191a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800191c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_InitTick+0xb4>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	3b01      	subs	r3, #1
 8001928:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_InitTick+0xb8>)
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_InitTick+0xbc>)
 800192e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0xb8>)
 8001932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001936:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001938:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_InitTick+0xb8>)
 800193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_InitTick+0xb8>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_InitTick+0xb8>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <HAL_InitTick+0xb8>)
 800194c:	f007 ffac 	bl	80098a8 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_InitTick+0xa2>
 8001956:	e001      	b.n	800195c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e005      	b.n	8001968 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800195c:	4807      	ldr	r0, [pc, #28]	; (800197c <HAL_InitTick+0xb8>)
 800195e:	f008 f805 	bl	800996c <HAL_TIM_Base_Start_IT>
 8001962:	4603      	mov	r3, r0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3738      	adds	r7, #56	; 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	24000008 	.word	0x24000008
 8001974:	58024400 	.word	0x58024400
 8001978:	431bde83 	.word	0x431bde83
 800197c:	2400457c 	.word	0x2400457c
 8001980:	40014800 	.word	0x40014800

08001984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <NMI_Handler+0x4>

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Stream0_IRQHandler+0x10>)
 80019b6:	f002 f8b1 	bl	8003b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	240046f4 	.word	0x240046f4

080019c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DMA1_Stream1_IRQHandler+0x10>)
 80019ca:	f002 f8a7 	bl	8003b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2400476c 	.word	0x2400476c

080019d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <USART1_IRQHandler+0x10>)
 80019de:	f008 fc33 	bl	800a248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	240045cc 	.word	0x240045cc

080019ec <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM17_IRQHandler+0x10>)
 80019f2:	f008 f833 	bl	8009a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2400457c 	.word	0x2400457c

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1a:	f01d f8dd 	bl	801ebd8 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_exit>:

void _exit (int status)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe7 	bl	8001a10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a42:	e7fe      	b.n	8001a42 <_exit+0x12>

08001a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e00a      	b.n	8001a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a56:	f3af 8000 	nop.w
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf0      	blt.n	8001a56 <_read+0x12>
  }

  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e009      	b.n	8001aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fe35 	bl	8001708 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf1      	blt.n	8001a90 <_write+0x12>
  }
  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_close>:

int _close(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ade:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_isatty>:

int _isatty(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f01d f842 	bl	801ebd8 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	24080000 	.word	0x24080000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	240045c8 	.word	0x240045c8
 8001b88:	2400a8d0 	.word	0x2400a8d0

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <SystemInit+0xe4>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a36      	ldr	r2, [pc, #216]	; (8001c70 <SystemInit+0xe4>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <SystemInit+0xe8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d807      	bhi.n	8001bbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <SystemInit+0xe8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 030f 	bic.w	r3, r3, #15
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <SystemInit+0xe8>)
 8001bb6:	f043 0307 	orr.w	r3, r3, #7
 8001bba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <SystemInit+0xec>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <SystemInit+0xec>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <SystemInit+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <SystemInit+0xec>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4929      	ldr	r1, [pc, #164]	; (8001c78 <SystemInit+0xec>)
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <SystemInit+0xf0>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <SystemInit+0xe8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <SystemInit+0xe8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 030f 	bic.w	r3, r3, #15
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <SystemInit+0xe8>)
 8001bf0:	f043 0307 	orr.w	r3, r3, #7
 8001bf4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <SystemInit+0xec>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <SystemInit+0xec>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <SystemInit+0xec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <SystemInit+0xec>)
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <SystemInit+0xf4>)
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <SystemInit+0xec>)
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <SystemInit+0xf8>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <SystemInit+0xec>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <SystemInit+0xfc>)
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <SystemInit+0xec>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SystemInit+0xec>)
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <SystemInit+0xfc>)
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <SystemInit+0xec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <SystemInit+0xec>)
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <SystemInit+0xfc>)
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <SystemInit+0xec>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SystemInit+0xec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <SystemInit+0xec>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <SystemInit+0xec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <SystemInit+0x100>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <SystemInit+0x104>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c56:	d202      	bcs.n	8001c5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <SystemInit+0x108>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <SystemInit+0x10c>)
 8001c60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	52002000 	.word	0x52002000
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c80:	02020200 	.word	0x02020200
 8001c84:	01ff0000 	.word	0x01ff0000
 8001c88:	01010280 	.word	0x01010280
 8001c8c:	5c001000 	.word	0x5c001000
 8001c90:	ffff0000 	.word	0xffff0000
 8001c94:	51008108 	.word	0x51008108
 8001c98:	52004000 	.word	0x52004000

08001c9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <MX_USART1_UART_Init+0x94>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ca8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001ce6:	f008 f8b9 	bl	8009e5c <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f7ff fdc4 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001cf8:	f00a ff15 	bl	800cb26 <HAL_UARTEx_SetTxFifoThreshold>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d02:	f7ff fdbb 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d0a:	f00a ff4a 	bl	800cba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d14:	f7ff fdb2 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_USART1_UART_Init+0x90>)
 8001d1a:	f00a fecb 	bl	800cab4 <HAL_UARTEx_DisableFifoMode>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d24:	f7ff fdaa 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	240045cc 	.word	0x240045cc
 8001d30:	40011000 	.word	0x40011000

08001d34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <MX_USART3_UART_Init+0x94>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7c:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d7e:	f008 f86d 	bl	8009e5c <HAL_UART_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d88:	f7ff fd78 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d90:	f00a fec9 	bl	800cb26 <HAL_UARTEx_SetTxFifoThreshold>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d9a:	f7ff fd6f 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001da2:	f00a fefe 	bl	800cba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001dac:	f7ff fd66 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001db2:	f00a fe7f 	bl	800cab4 <HAL_UARTEx_DisableFifoMode>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dbc:	f7ff fd5e 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24004660 	.word	0x24004660
 8001dc8:	40004800 	.word	0x40004800

08001dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0bc      	sub	sp, #240	; 0xf0
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	22c0      	movs	r2, #192	; 0xc0
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f01c fea0 	bl	801eb32 <memset>
  if(uartHandle->Instance==USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7f      	ldr	r2, [pc, #508]	; (8001ff4 <HAL_UART_MspInit+0x228>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 80aa 	bne.w	8001f52 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dfe:	f04f 0201 	mov.w	r2, #1
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	4618      	mov	r0, r3
 8001e16:	f005 ff1b 	bl	8007c50 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001e20:	f7ff fd2c 	bl	800187c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e24:	4b74      	ldr	r3, [pc, #464]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e2a:	4a73      	ldr	r2, [pc, #460]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e48:	4a6b      	ldr	r2, [pc, #428]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e52:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e78:	2307      	movs	r3, #7
 8001e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e82:	4619      	mov	r1, r3
 8001e84:	485d      	ldr	r0, [pc, #372]	; (8001ffc <HAL_UART_MspInit+0x230>)
 8001e86:	f003 fd7f 	bl	8005988 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001e8a:	4b5d      	ldr	r3, [pc, #372]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_UART_MspInit+0x238>)
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e90:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001e92:	2229      	movs	r2, #41	; 0x29
 8001e94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e96:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9c:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eaa:	4b55      	ldr	r3, [pc, #340]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ec8:	484d      	ldr	r0, [pc, #308]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001eca:	f000 fafd 	bl	80024c8 <HAL_DMA_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001ed4:	f7ff fcd2 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ee0:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_UART_MspInit+0x234>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001ee8:	4a48      	ldr	r2, [pc, #288]	; (800200c <HAL_UART_MspInit+0x240>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001eee:	222a      	movs	r2, #42	; 0x2a
 8001ef0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f24:	4838      	ldr	r0, [pc, #224]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f26:	f000 facf 	bl	80024c8 <HAL_DMA_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001f30:	f7ff fca4 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f38:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_UART_MspInit+0x23c>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2105      	movs	r1, #5
 8001f44:	2025      	movs	r0, #37	; 0x25
 8001f46:	f000 fa97 	bl	8002478 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f4a:	2025      	movs	r0, #37	; 0x25
 8001f4c:	f000 faae 	bl	80024ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f50:	e04b      	b.n	8001fea <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <HAL_UART_MspInit+0x244>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d146      	bne.n	8001fea <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f5c:	f04f 0202 	mov.w	r2, #2
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 fe6c 	bl	8007c50 <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001f7e:	f7ff fc7d 	bl	800187c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_UART_MspInit+0x22c>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fde:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_UART_MspInit+0x248>)
 8001fe6:	f003 fccf 	bl	8005988 <HAL_GPIO_Init>
}
 8001fea:	bf00      	nop
 8001fec:	37f0      	adds	r7, #240	; 0xf0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40011000 	.word	0x40011000
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	58020400 	.word	0x58020400
 8002000:	240046f4 	.word	0x240046f4
 8002004:	40020010 	.word	0x40020010
 8002008:	2400476c 	.word	0x2400476c
 800200c:	40020028 	.word	0x40020028
 8002010:	40004800 	.word	0x40004800
 8002014:	58020c00 	.word	0x58020c00

08002018 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002020:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002024:	2209      	movs	r2, #9
 8002026:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800202a:	2202      	movs	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002036:	2202      	movs	r2, #2
 8002038:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800203c:	2201      	movs	r2, #1
 800203e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800204e:	2201      	movs	r2, #1
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002054:	2201      	movs	r2, #1
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800205a:	2200      	movs	r2, #0
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002060:	f004 fc3c 	bl	80068dc <HAL_PCD_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800206a:	f7ff fc07 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	240047e4 	.word	0x240047e4
 8002078:	40080000 	.word	0x40080000

0800207c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0ba      	sub	sp, #232	; 0xe8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	22c0      	movs	r2, #192	; 0xc0
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f01c fd48 	bl	801eb32 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a30      	ldr	r2, [pc, #192]	; (8002168 <HAL_PCD_MspInit+0xec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d159      	bne.n	8002160 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80020b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fdc3 	bl	8007c50 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80020d0:	f7ff fbd4 	bl	800187c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80020d4:	f004 fd84 	bl	8006be0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_PCD_MspInit+0xf0>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020de:	4a23      	ldr	r2, [pc, #140]	; (800216c <HAL_PCD_MspInit+0xf0>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_PCD_MspInit+0xf0>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80020fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002110:	230a      	movs	r3, #10
 8002112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800211a:	4619      	mov	r1, r3
 800211c:	4814      	ldr	r0, [pc, #80]	; (8002170 <HAL_PCD_MspInit+0xf4>)
 800211e:	f003 fc33 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <HAL_PCD_MspInit+0xf4>)
 800213e:	f003 fc23 	bl	8005988 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_PCD_MspInit+0xf0>)
 8002144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002148:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_PCD_MspInit+0xf0>)
 800214a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800214e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_PCD_MspInit+0xf0>)
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002160:	bf00      	nop
 8002162:	37e8      	adds	r7, #232	; 0xe8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40080000 	.word	0x40080000
 800216c:	58024400 	.word	0x58024400
 8002170:	58020000 	.word	0x58020000

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002178:	f7ff fd08 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	; (80021c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a2:	f01c fd1f 	bl	801ebe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fac1 	bl	800172c <main>
  bx  lr
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021b4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80021b8:	08021470 	.word	0x08021470
  ldr r2, =_sbss
 80021bc:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 80021c0:	2400a8cc 	.word	0x2400a8cc

080021c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC3_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f947 	bl	8002462 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021d4:	f005 fb24 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_Init+0x68>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	4913      	ldr	r1, [pc, #76]	; (8002234 <HAL_Init+0x6c>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_Init+0x68>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_Init+0x6c>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <HAL_Init+0x70>)
 800220a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_Init+0x74>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002212:	200f      	movs	r0, #15
 8002214:	f7ff fb56 	bl	80018c4 <HAL_InitTick>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e002      	b.n	8002228 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002222:	f7ff fb31 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58024400 	.word	0x58024400
 8002234:	08020e74 	.word	0x08020e74
 8002238:	24000004 	.word	0x24000004
 800223c:	24000000 	.word	0x24000000

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2400000c 	.word	0x2400000c
 8002264:	24004cf0 	.word	0x24004cf0

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	24004cf0 	.word	0x24004cf0

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2400000c 	.word	0x2400000c

080022c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetREVID+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0c1b      	lsrs	r3, r3, #16
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	5c001000 	.word	0x5c001000

080022e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022f0:	4904      	ldr	r1, [pc, #16]	; (8002304 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58000400 	.word	0x58000400

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <__NVIC_SetPriorityGrouping+0x40>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	4313      	orrs	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x40>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	05fa0000 	.word	0x05fa0000

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff4c 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002486:	f7ff ff63 	bl	8002350 <__NVIC_GetPriorityGrouping>
 800248a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f7ff ffb3 	bl	80023fc <NVIC_EncodePriority>
 8002496:	4602      	mov	r2, r0
 8002498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff82 	bl	80023a8 <__NVIC_SetPriority>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff56 	bl	800236c <__NVIC_EnableIRQ>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff feca 	bl	8002268 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e316      	b.n	8002b0e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_DMA_Init+0x1b8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_DMA_Init+0x1bc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a63      	ldr	r2, [pc, #396]	; (8002688 <HAL_DMA_Init+0x1c0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a62      	ldr	r2, [pc, #392]	; (800268c <HAL_DMA_Init+0x1c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a60      	ldr	r2, [pc, #384]	; (8002690 <HAL_DMA_Init+0x1c8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a5f      	ldr	r2, [pc, #380]	; (8002694 <HAL_DMA_Init+0x1cc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a5d      	ldr	r2, [pc, #372]	; (8002698 <HAL_DMA_Init+0x1d0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5c      	ldr	r2, [pc, #368]	; (800269c <HAL_DMA_Init+0x1d4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5a      	ldr	r2, [pc, #360]	; (80026a0 <HAL_DMA_Init+0x1d8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a59      	ldr	r2, [pc, #356]	; (80026a4 <HAL_DMA_Init+0x1dc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <HAL_DMA_Init+0x1e0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_DMA_Init+0x1e4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a54      	ldr	r2, [pc, #336]	; (80026b0 <HAL_DMA_Init+0x1e8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a53      	ldr	r2, [pc, #332]	; (80026b4 <HAL_DMA_Init+0x1ec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a51      	ldr	r2, [pc, #324]	; (80026b8 <HAL_DMA_Init+0x1f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Init+0xb8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a50      	ldr	r2, [pc, #320]	; (80026bc <HAL_DMA_Init+0x1f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Init+0xbc>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_DMA_Init+0xbe>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 813b 	beq.w	8002802 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a37      	ldr	r2, [pc, #220]	; (8002680 <HAL_DMA_Init+0x1b8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d04a      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a36      	ldr	r2, [pc, #216]	; (8002684 <HAL_DMA_Init+0x1bc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d045      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_DMA_Init+0x1c0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a33      	ldr	r2, [pc, #204]	; (800268c <HAL_DMA_Init+0x1c4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d03b      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_DMA_Init+0x1c8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d036      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a30      	ldr	r2, [pc, #192]	; (8002694 <HAL_DMA_Init+0x1cc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d031      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <HAL_DMA_Init+0x1d0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02c      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2d      	ldr	r2, [pc, #180]	; (800269c <HAL_DMA_Init+0x1d4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d027      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_DMA_Init+0x1d8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_Init+0x174>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_DMA_Init+0x1dc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01d      	beq.n	800263c <HAL_DMA_Init+0x174>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <HAL_DMA_Init+0x1e0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_Init+0x174>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_DMA_Init+0x1e4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_DMA_Init+0x174>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_DMA_Init+0x1e8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_DMA_Init+0x174>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a24      	ldr	r2, [pc, #144]	; (80026b4 <HAL_DMA_Init+0x1ec>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_DMA_Init+0x174>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_DMA_Init+0x1f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_DMA_Init+0x174>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_DMA_Init+0x1f4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <HAL_DMA_Init+0x186>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_DMA_Init+0x196>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800265e:	e02f      	b.n	80026c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002660:	f7ff fe02 	bl	8002268 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b05      	cmp	r3, #5
 800266c:	d928      	bls.n	80026c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e246      	b.n	8002b0e <HAL_DMA_Init+0x646>
 8002680:	40020010 	.word	0x40020010
 8002684:	40020028 	.word	0x40020028
 8002688:	40020040 	.word	0x40020040
 800268c:	40020058 	.word	0x40020058
 8002690:	40020070 	.word	0x40020070
 8002694:	40020088 	.word	0x40020088
 8002698:	400200a0 	.word	0x400200a0
 800269c:	400200b8 	.word	0x400200b8
 80026a0:	40020410 	.word	0x40020410
 80026a4:	40020428 	.word	0x40020428
 80026a8:	40020440 	.word	0x40020440
 80026ac:	40020458 	.word	0x40020458
 80026b0:	40020470 	.word	0x40020470
 80026b4:	40020488 	.word	0x40020488
 80026b8:	400204a0 	.word	0x400204a0
 80026bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1c8      	bne.n	8002660 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <HAL_DMA_Init+0x420>)
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4313      	orrs	r3, r2
 800270a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4313      	orrs	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002724:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_DMA_Init+0x424>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_DMA_Init+0x428>)
 800272a:	4013      	ands	r3, r2
 800272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002730:	d328      	bcc.n	8002784 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b28      	cmp	r3, #40	; 0x28
 8002738:	d903      	bls.n	8002742 <HAL_DMA_Init+0x27a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b2e      	cmp	r3, #46	; 0x2e
 8002740:	d917      	bls.n	8002772 <HAL_DMA_Init+0x2aa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b3e      	cmp	r3, #62	; 0x3e
 8002748:	d903      	bls.n	8002752 <HAL_DMA_Init+0x28a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b42      	cmp	r3, #66	; 0x42
 8002750:	d90f      	bls.n	8002772 <HAL_DMA_Init+0x2aa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b46      	cmp	r3, #70	; 0x46
 8002758:	d903      	bls.n	8002762 <HAL_DMA_Init+0x29a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b48      	cmp	r3, #72	; 0x48
 8002760:	d907      	bls.n	8002772 <HAL_DMA_Init+0x2aa>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b4e      	cmp	r3, #78	; 0x4e
 8002768:	d905      	bls.n	8002776 <HAL_DMA_Init+0x2ae>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b52      	cmp	r3, #82	; 0x52
 8002770:	d801      	bhi.n	8002776 <HAL_DMA_Init+0x2ae>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_DMA_Init+0x2b0>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002782:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f023 0307 	bic.w	r3, r3, #7
 800279a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d117      	bne.n	80027de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f002 fb33 	bl	8004e2c <DMA_CheckFifoParam>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e197      	b.n	8002b0e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f002 fa6e 	bl	8004cc8 <DMA_CalcBaseAndBitshift>
 80027ec:	4603      	mov	r3, r0
 80027ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	e0cd      	b.n	800299e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_DMA_Init+0x42c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <HAL_DMA_Init+0x430>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a38      	ldr	r2, [pc, #224]	; (80028fc <HAL_DMA_Init+0x434>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_DMA_Init+0x438>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a35      	ldr	r2, [pc, #212]	; (8002904 <HAL_DMA_Init+0x43c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a33      	ldr	r2, [pc, #204]	; (8002908 <HAL_DMA_Init+0x440>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a32      	ldr	r2, [pc, #200]	; (800290c <HAL_DMA_Init+0x444>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Init+0x38a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <HAL_DMA_Init+0x448>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Init+0x38e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_DMA_Init+0x390>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <HAL_DMA_Init+0x42c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d021      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <HAL_DMA_Init+0x430>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01c      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <HAL_DMA_Init+0x434>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d017      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <HAL_DMA_Init+0x438>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d012      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <HAL_DMA_Init+0x43c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_DMA_Init+0x440>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d008      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_DMA_Init+0x444>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_Init+0x3e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <HAL_DMA_Init+0x448>)
 80028aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_DMA_Init+0x44c>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d021      	beq.n	8002918 <HAL_DMA_Init+0x450>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d102      	bne.n	80028e2 <HAL_DMA_Init+0x41a>
 80028dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e0:	e01b      	b.n	800291a <HAL_DMA_Init+0x452>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e019      	b.n	800291a <HAL_DMA_Init+0x452>
 80028e6:	bf00      	nop
 80028e8:	fe10803f 	.word	0xfe10803f
 80028ec:	5c001000 	.word	0x5c001000
 80028f0:	ffff0000 	.word	0xffff0000
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494
 8002914:	fffe000f 	.word	0xfffe000f
 8002918:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002920:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002948:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b6e      	ldr	r3, [pc, #440]	; (8002b18 <HAL_DMA_Init+0x650>)
 8002960:	4413      	add	r3, r2
 8002962:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_DMA_Init+0x654>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f002 f9a9 	bl	8004cc8 <DMA_CalcBaseAndBitshift>
 8002976:	4603      	mov	r3, r0
 8002978:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e008      	b.n	800299e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0b7      	b.n	8002b0e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5f      	ldr	r2, [pc, #380]	; (8002b20 <HAL_DMA_Init+0x658>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d072      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	; (8002b24 <HAL_DMA_Init+0x65c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d06d      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5c      	ldr	r2, [pc, #368]	; (8002b28 <HAL_DMA_Init+0x660>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d068      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <HAL_DMA_Init+0x664>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d063      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	; (8002b30 <HAL_DMA_Init+0x668>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d05e      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a57      	ldr	r2, [pc, #348]	; (8002b34 <HAL_DMA_Init+0x66c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d059      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a56      	ldr	r2, [pc, #344]	; (8002b38 <HAL_DMA_Init+0x670>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d054      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_DMA_Init+0x674>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d04f      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_DMA_Init+0x678>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04a      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a51      	ldr	r2, [pc, #324]	; (8002b44 <HAL_DMA_Init+0x67c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a50      	ldr	r2, [pc, #320]	; (8002b48 <HAL_DMA_Init+0x680>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d040      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_DMA_Init+0x684>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d03b      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_DMA_Init+0x688>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d036      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_DMA_Init+0x68c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_DMA_Init+0x690>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <HAL_DMA_Init+0x694>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a47      	ldr	r2, [pc, #284]	; (8002b60 <HAL_DMA_Init+0x698>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a45      	ldr	r2, [pc, #276]	; (8002b64 <HAL_DMA_Init+0x69c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a44      	ldr	r2, [pc, #272]	; (8002b68 <HAL_DMA_Init+0x6a0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_DMA_Init+0x6a4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_DMA_Init+0x6a8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <HAL_DMA_Init+0x6ac>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3e      	ldr	r2, [pc, #248]	; (8002b78 <HAL_DMA_Init+0x6b0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Init+0x5c6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3c      	ldr	r2, [pc, #240]	; (8002b7c <HAL_DMA_Init+0x6b4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Init+0x5ca>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_Init+0x5cc>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d032      	beq.n	8002afe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f002 fa43 	bl	8004f24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d102      	bne.n	8002aac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ac0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_DMA_Init+0x624>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d80c      	bhi.n	8002aec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f002 fac0 	bl	8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e008      	b.n	8002afe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	a7fdabf8 	.word	0xa7fdabf8
 8002b1c:	cccccccd 	.word	0xcccccccd
 8002b20:	40020010 	.word	0x40020010
 8002b24:	40020028 	.word	0x40020028
 8002b28:	40020040 	.word	0x40020040
 8002b2c:	40020058 	.word	0x40020058
 8002b30:	40020070 	.word	0x40020070
 8002b34:	40020088 	.word	0x40020088
 8002b38:	400200a0 	.word	0x400200a0
 8002b3c:	400200b8 	.word	0x400200b8
 8002b40:	40020410 	.word	0x40020410
 8002b44:	40020428 	.word	0x40020428
 8002b48:	40020440 	.word	0x40020440
 8002b4c:	40020458 	.word	0x40020458
 8002b50:	40020470 	.word	0x40020470
 8002b54:	40020488 	.word	0x40020488
 8002b58:	400204a0 	.word	0x400204a0
 8002b5c:	400204b8 	.word	0x400204b8
 8002b60:	58025408 	.word	0x58025408
 8002b64:	5802541c 	.word	0x5802541c
 8002b68:	58025430 	.word	0x58025430
 8002b6c:	58025444 	.word	0x58025444
 8002b70:	58025458 	.word	0x58025458
 8002b74:	5802546c 	.word	0x5802546c
 8002b78:	58025480 	.word	0x58025480
 8002b7c:	58025494 	.word	0x58025494

08002b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e226      	b.n	8002fea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_DMA_Start_IT+0x2a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e21f      	b.n	8002fea <HAL_DMA_Start_IT+0x46a>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f040 820a 	bne.w	8002fd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a68      	ldr	r2, [pc, #416]	; (8002d74 <HAL_DMA_Start_IT+0x1f4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <HAL_DMA_Start_IT+0x1f8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d045      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a65      	ldr	r2, [pc, #404]	; (8002d7c <HAL_DMA_Start_IT+0x1fc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d040      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_DMA_Start_IT+0x200>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d03b      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a62      	ldr	r2, [pc, #392]	; (8002d84 <HAL_DMA_Start_IT+0x204>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a60      	ldr	r2, [pc, #384]	; (8002d88 <HAL_DMA_Start_IT+0x208>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5f      	ldr	r2, [pc, #380]	; (8002d8c <HAL_DMA_Start_IT+0x20c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d02c      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <HAL_DMA_Start_IT+0x210>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5c      	ldr	r2, [pc, #368]	; (8002d94 <HAL_DMA_Start_IT+0x214>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5a      	ldr	r2, [pc, #360]	; (8002d98 <HAL_DMA_Start_IT+0x218>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a59      	ldr	r2, [pc, #356]	; (8002d9c <HAL_DMA_Start_IT+0x21c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <HAL_DMA_Start_IT+0x220>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a56      	ldr	r2, [pc, #344]	; (8002da4 <HAL_DMA_Start_IT+0x224>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a54      	ldr	r2, [pc, #336]	; (8002da8 <HAL_DMA_Start_IT+0x228>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a53      	ldr	r2, [pc, #332]	; (8002dac <HAL_DMA_Start_IT+0x22c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_Start_IT+0xee>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a51      	ldr	r2, [pc, #324]	; (8002db0 <HAL_DMA_Start_IT+0x230>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <HAL_DMA_Start_IT+0x100>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_DMA_Start_IT+0x110>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f001 fe6a 	bl	8004970 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_DMA_Start_IT+0x1f4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d04a      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a33      	ldr	r2, [pc, #204]	; (8002d78 <HAL_DMA_Start_IT+0x1f8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d045      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_DMA_Start_IT+0x1fc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d040      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a30      	ldr	r2, [pc, #192]	; (8002d80 <HAL_DMA_Start_IT+0x200>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d03b      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <HAL_DMA_Start_IT+0x204>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d036      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2d      	ldr	r2, [pc, #180]	; (8002d88 <HAL_DMA_Start_IT+0x208>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d031      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_DMA_Start_IT+0x20c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <HAL_DMA_Start_IT+0x210>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d027      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <HAL_DMA_Start_IT+0x214>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_DMA_Start_IT+0x218>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_DMA_Start_IT+0x21c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <HAL_DMA_Start_IT+0x220>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <HAL_DMA_Start_IT+0x224>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_DMA_Start_IT+0x228>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_DMA_Start_IT+0x22c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_DMA_Start_IT+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <HAL_DMA_Start_IT+0x230>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_DMA_Start_IT+0x1c0>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_DMA_Start_IT+0x1c2>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 021e 	bic.w	r2, r3, #30
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0216 	orr.w	r2, r2, #22
 8002d58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03e      	beq.n	8002de0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e035      	b.n	8002de0 <HAL_DMA_Start_IT+0x260>
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020e 	bic.w	r2, r3, #14
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 020a 	orr.w	r2, r2, #10
 8002dc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0204 	orr.w	r2, r2, #4
 8002dde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a83      	ldr	r2, [pc, #524]	; (8002ff4 <HAL_DMA_Start_IT+0x474>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d072      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a82      	ldr	r2, [pc, #520]	; (8002ff8 <HAL_DMA_Start_IT+0x478>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d06d      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a80      	ldr	r2, [pc, #512]	; (8002ffc <HAL_DMA_Start_IT+0x47c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d068      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a7f      	ldr	r2, [pc, #508]	; (8003000 <HAL_DMA_Start_IT+0x480>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d063      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7d      	ldr	r2, [pc, #500]	; (8003004 <HAL_DMA_Start_IT+0x484>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d05e      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_DMA_Start_IT+0x488>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d059      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_DMA_Start_IT+0x48c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d054      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a79      	ldr	r2, [pc, #484]	; (8003010 <HAL_DMA_Start_IT+0x490>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d04f      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a77      	ldr	r2, [pc, #476]	; (8003014 <HAL_DMA_Start_IT+0x494>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04a      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a76      	ldr	r2, [pc, #472]	; (8003018 <HAL_DMA_Start_IT+0x498>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d045      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a74      	ldr	r2, [pc, #464]	; (800301c <HAL_DMA_Start_IT+0x49c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a73      	ldr	r2, [pc, #460]	; (8003020 <HAL_DMA_Start_IT+0x4a0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d03b      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_DMA_Start_IT+0x4a4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d036      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a70      	ldr	r2, [pc, #448]	; (8003028 <HAL_DMA_Start_IT+0x4a8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d031      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6e      	ldr	r2, [pc, #440]	; (800302c <HAL_DMA_Start_IT+0x4ac>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d02c      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6d      	ldr	r2, [pc, #436]	; (8003030 <HAL_DMA_Start_IT+0x4b0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d027      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6b      	ldr	r2, [pc, #428]	; (8003034 <HAL_DMA_Start_IT+0x4b4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d022      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_DMA_Start_IT+0x4b8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d01d      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a68      	ldr	r2, [pc, #416]	; (800303c <HAL_DMA_Start_IT+0x4bc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d018      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a67      	ldr	r2, [pc, #412]	; (8003040 <HAL_DMA_Start_IT+0x4c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a65      	ldr	r2, [pc, #404]	; (8003044 <HAL_DMA_Start_IT+0x4c4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00e      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a64      	ldr	r2, [pc, #400]	; (8003048 <HAL_DMA_Start_IT+0x4c8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d009      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a62      	ldr	r2, [pc, #392]	; (800304c <HAL_DMA_Start_IT+0x4cc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_DMA_Start_IT+0x350>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a61      	ldr	r2, [pc, #388]	; (8003050 <HAL_DMA_Start_IT+0x4d0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_DMA_Start_IT+0x354>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_DMA_Start_IT+0x356>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <HAL_DMA_Start_IT+0x474>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d04a      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a36      	ldr	r2, [pc, #216]	; (8002ff8 <HAL_DMA_Start_IT+0x478>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d045      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <HAL_DMA_Start_IT+0x47c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a33      	ldr	r2, [pc, #204]	; (8003000 <HAL_DMA_Start_IT+0x480>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d03b      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_DMA_Start_IT+0x484>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d036      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_DMA_Start_IT+0x488>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d031      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2e      	ldr	r2, [pc, #184]	; (800300c <HAL_DMA_Start_IT+0x48c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02c      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_DMA_Start_IT+0x490>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	; (8003014 <HAL_DMA_Start_IT+0x494>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <HAL_DMA_Start_IT+0x498>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <HAL_DMA_Start_IT+0x49c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_DMA_Start_IT+0x4a0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a25      	ldr	r2, [pc, #148]	; (8003024 <HAL_DMA_Start_IT+0x4a4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_DMA_Start_IT+0x4a8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_DMA_Start_IT+0x4ac>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_DMA_Start_IT+0x430>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_DMA_Start_IT+0x4b0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <HAL_DMA_Start_IT+0x442>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e012      	b.n	8002fe8 <HAL_DMA_Start_IT+0x468>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e009      	b.n	8002fe8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40020010 	.word	0x40020010
 8002ff8:	40020028 	.word	0x40020028
 8002ffc:	40020040 	.word	0x40020040
 8003000:	40020058 	.word	0x40020058
 8003004:	40020070 	.word	0x40020070
 8003008:	40020088 	.word	0x40020088
 800300c:	400200a0 	.word	0x400200a0
 8003010:	400200b8 	.word	0x400200b8
 8003014:	40020410 	.word	0x40020410
 8003018:	40020428 	.word	0x40020428
 800301c:	40020440 	.word	0x40020440
 8003020:	40020458 	.word	0x40020458
 8003024:	40020470 	.word	0x40020470
 8003028:	40020488 	.word	0x40020488
 800302c:	400204a0 	.word	0x400204a0
 8003030:	400204b8 	.word	0x400204b8
 8003034:	58025408 	.word	0x58025408
 8003038:	5802541c 	.word	0x5802541c
 800303c:	58025430 	.word	0x58025430
 8003040:	58025444 	.word	0x58025444
 8003044:	58025458 	.word	0x58025458
 8003048:	5802546c 	.word	0x5802546c
 800304c:	58025480 	.word	0x58025480
 8003050:	58025494 	.word	0x58025494

08003054 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff f904 	bl	8002268 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e2dc      	b.n	8003626 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d008      	beq.n	800308a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e2cd      	b.n	8003626 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a76      	ldr	r2, [pc, #472]	; (8003268 <HAL_DMA_Abort+0x214>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d04a      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a74      	ldr	r2, [pc, #464]	; (800326c <HAL_DMA_Abort+0x218>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d045      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a73      	ldr	r2, [pc, #460]	; (8003270 <HAL_DMA_Abort+0x21c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d040      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a71      	ldr	r2, [pc, #452]	; (8003274 <HAL_DMA_Abort+0x220>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d03b      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a70      	ldr	r2, [pc, #448]	; (8003278 <HAL_DMA_Abort+0x224>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d036      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6e      	ldr	r2, [pc, #440]	; (800327c <HAL_DMA_Abort+0x228>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d031      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6d      	ldr	r2, [pc, #436]	; (8003280 <HAL_DMA_Abort+0x22c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d02c      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_DMA_Abort+0x230>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d027      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <HAL_DMA_Abort+0x234>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_DMA_Abort+0x238>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_DMA_Abort+0x23c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d018      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_DMA_Abort+0x240>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_DMA_Abort+0x244>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00e      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMA_Abort+0x248>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_DMA_Abort+0x24c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_DMA_Abort+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_Abort+0x250>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_DMA_Abort+0xda>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_DMA_Abort+0xdc>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 021e 	bic.w	r2, r2, #30
 8003142:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003152:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e00a      	b.n	8003172 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 020e 	bic.w	r2, r2, #14
 800316a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3c      	ldr	r2, [pc, #240]	; (8003268 <HAL_DMA_Abort+0x214>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d072      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_DMA_Abort+0x218>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d06d      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a39      	ldr	r2, [pc, #228]	; (8003270 <HAL_DMA_Abort+0x21c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d068      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a37      	ldr	r2, [pc, #220]	; (8003274 <HAL_DMA_Abort+0x220>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d063      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a36      	ldr	r2, [pc, #216]	; (8003278 <HAL_DMA_Abort+0x224>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d05e      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a34      	ldr	r2, [pc, #208]	; (800327c <HAL_DMA_Abort+0x228>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d059      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a33      	ldr	r2, [pc, #204]	; (8003280 <HAL_DMA_Abort+0x22c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d054      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a31      	ldr	r2, [pc, #196]	; (8003284 <HAL_DMA_Abort+0x230>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d04f      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a30      	ldr	r2, [pc, #192]	; (8003288 <HAL_DMA_Abort+0x234>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d04a      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2e      	ldr	r2, [pc, #184]	; (800328c <HAL_DMA_Abort+0x238>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d045      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_DMA_Abort+0x23c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d040      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <HAL_DMA_Abort+0x240>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d03b      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_DMA_Abort+0x244>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d036      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_DMA_Abort+0x248>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d031      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_DMA_Abort+0x24c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d02c      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <HAL_DMA_Abort+0x250>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d027      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_DMA_Abort+0x254>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_DMA_Abort+0x258>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01d      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_DMA_Abort+0x25c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d018      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_DMA_Abort+0x260>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_DMA_Abort+0x264>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00e      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_DMA_Abort+0x268>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <HAL_DMA_Abort+0x26c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_DMA_Abort+0x270>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d132      	bne.n	80032c8 <HAL_DMA_Abort+0x274>
 8003262:	2301      	movs	r3, #1
 8003264:	e031      	b.n	80032ca <HAL_DMA_Abort+0x276>
 8003266:	bf00      	nop
 8003268:	40020010 	.word	0x40020010
 800326c:	40020028 	.word	0x40020028
 8003270:	40020040 	.word	0x40020040
 8003274:	40020058 	.word	0x40020058
 8003278:	40020070 	.word	0x40020070
 800327c:	40020088 	.word	0x40020088
 8003280:	400200a0 	.word	0x400200a0
 8003284:	400200b8 	.word	0x400200b8
 8003288:	40020410 	.word	0x40020410
 800328c:	40020428 	.word	0x40020428
 8003290:	40020440 	.word	0x40020440
 8003294:	40020458 	.word	0x40020458
 8003298:	40020470 	.word	0x40020470
 800329c:	40020488 	.word	0x40020488
 80032a0:	400204a0 	.word	0x400204a0
 80032a4:	400204b8 	.word	0x400204b8
 80032a8:	58025408 	.word	0x58025408
 80032ac:	5802541c 	.word	0x5802541c
 80032b0:	58025430 	.word	0x58025430
 80032b4:	58025444 	.word	0x58025444
 80032b8:	58025458 	.word	0x58025458
 80032bc:	5802546c 	.word	0x5802546c
 80032c0:	58025480 	.word	0x58025480
 80032c4:	58025494 	.word	0x58025494
 80032c8:	2300      	movs	r3, #0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6d      	ldr	r2, [pc, #436]	; (8003498 <HAL_DMA_Abort+0x444>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04a      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6b      	ldr	r2, [pc, #428]	; (800349c <HAL_DMA_Abort+0x448>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_DMA_Abort+0x44c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d040      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a68      	ldr	r2, [pc, #416]	; (80034a4 <HAL_DMA_Abort+0x450>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a67      	ldr	r2, [pc, #412]	; (80034a8 <HAL_DMA_Abort+0x454>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_DMA_Abort+0x458>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a64      	ldr	r2, [pc, #400]	; (80034b0 <HAL_DMA_Abort+0x45c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_DMA_Abort+0x460>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a61      	ldr	r2, [pc, #388]	; (80034b8 <HAL_DMA_Abort+0x464>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_DMA_Abort+0x468>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5e      	ldr	r2, [pc, #376]	; (80034c0 <HAL_DMA_Abort+0x46c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_DMA_Abort+0x470>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_DMA_Abort+0x474>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_DMA_Abort+0x478>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_DMA_Abort+0x47c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_DMA_Abort+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_DMA_Abort+0x480>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <HAL_DMA_Abort+0x33c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e007      	b.n	80033a0 <HAL_DMA_Abort+0x34c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033a0:	e013      	b.n	80033ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a2:	f7fe ff61 	bl	8002268 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d90c      	bls.n	80033ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2203      	movs	r2, #3
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e12d      	b.n	8003626 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e5      	bne.n	80033a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <HAL_DMA_Abort+0x444>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04a      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_DMA_Abort+0x448>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d045      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <HAL_DMA_Abort+0x44c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d040      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_DMA_Abort+0x450>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d03b      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <HAL_DMA_Abort+0x454>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d036      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a27      	ldr	r2, [pc, #156]	; (80034ac <HAL_DMA_Abort+0x458>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <HAL_DMA_Abort+0x45c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d02c      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_DMA_Abort+0x460>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d027      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_DMA_Abort+0x464>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_DMA_Abort+0x468>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a20      	ldr	r2, [pc, #128]	; (80034c0 <HAL_DMA_Abort+0x46c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_DMA_Abort+0x470>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_DMA_Abort+0x474>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_DMA_Abort+0x478>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_DMA_Abort+0x47c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_DMA_Abort+0x422>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_DMA_Abort+0x480>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_DMA_Abort+0x426>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_DMA_Abort+0x428>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02b      	beq.n	80034d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	223f      	movs	r2, #63	; 0x3f
 8003490:	409a      	lsls	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	e02a      	b.n	80034ee <HAL_DMA_Abort+0x49a>
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2201      	movs	r2, #1
 80034e8:	409a      	lsls	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4f      	ldr	r2, [pc, #316]	; (8003630 <HAL_DMA_Abort+0x5dc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d072      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4d      	ldr	r2, [pc, #308]	; (8003634 <HAL_DMA_Abort+0x5e0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d06d      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_DMA_Abort+0x5e4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d068      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4a      	ldr	r2, [pc, #296]	; (800363c <HAL_DMA_Abort+0x5e8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d063      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a49      	ldr	r2, [pc, #292]	; (8003640 <HAL_DMA_Abort+0x5ec>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d05e      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <HAL_DMA_Abort+0x5f0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d059      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a46      	ldr	r2, [pc, #280]	; (8003648 <HAL_DMA_Abort+0x5f4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d054      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a44      	ldr	r2, [pc, #272]	; (800364c <HAL_DMA_Abort+0x5f8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04f      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a43      	ldr	r2, [pc, #268]	; (8003650 <HAL_DMA_Abort+0x5fc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a41      	ldr	r2, [pc, #260]	; (8003654 <HAL_DMA_Abort+0x600>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a40      	ldr	r2, [pc, #256]	; (8003658 <HAL_DMA_Abort+0x604>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3e      	ldr	r2, [pc, #248]	; (800365c <HAL_DMA_Abort+0x608>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <HAL_DMA_Abort+0x60c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3b      	ldr	r2, [pc, #236]	; (8003664 <HAL_DMA_Abort+0x610>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <HAL_DMA_Abort+0x614>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_DMA_Abort+0x618>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_DMA_Abort+0x61c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_DMA_Abort+0x620>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_DMA_Abort+0x624>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <HAL_DMA_Abort+0x628>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a31      	ldr	r2, [pc, #196]	; (8003680 <HAL_DMA_Abort+0x62c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <HAL_DMA_Abort+0x630>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <HAL_DMA_Abort+0x634>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_DMA_Abort+0x638>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_DMA_Abort+0x58e>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_DMA_Abort+0x590>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003608:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003612:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
 8003670:	58025408 	.word	0x58025408
 8003674:	5802541c 	.word	0x5802541c
 8003678:	58025430 	.word	0x58025430
 800367c:	58025444 	.word	0x58025444
 8003680:	58025458 	.word	0x58025458
 8003684:	5802546c 	.word	0x5802546c
 8003688:	58025480 	.word	0x58025480
 800368c:	58025494 	.word	0x58025494

08003690 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e237      	b.n	8003b12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e22c      	b.n	8003b12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5c      	ldr	r2, [pc, #368]	; (8003830 <HAL_DMA_Abort_IT+0x1a0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_DMA_Abort_IT+0x1a4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a59      	ldr	r2, [pc, #356]	; (8003838 <HAL_DMA_Abort_IT+0x1a8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d040      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_DMA_Abort_IT+0x1ac>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d03b      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a56      	ldr	r2, [pc, #344]	; (8003840 <HAL_DMA_Abort_IT+0x1b0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d036      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a55      	ldr	r2, [pc, #340]	; (8003844 <HAL_DMA_Abort_IT+0x1b4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a53      	ldr	r2, [pc, #332]	; (8003848 <HAL_DMA_Abort_IT+0x1b8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_DMA_Abort_IT+0x1bc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d027      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_DMA_Abort_IT+0x1c0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_DMA_Abort_IT+0x1c4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a4d      	ldr	r2, [pc, #308]	; (8003858 <HAL_DMA_Abort_IT+0x1c8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4c      	ldr	r2, [pc, #304]	; (800385c <HAL_DMA_Abort_IT+0x1cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_DMA_Abort_IT+0x1d0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a49      	ldr	r2, [pc, #292]	; (8003864 <HAL_DMA_Abort_IT+0x1d4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a47      	ldr	r2, [pc, #284]	; (8003868 <HAL_DMA_Abort_IT+0x1d8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_Abort_IT+0xc8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_DMA_Abort_IT+0x1dc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_DMA_Abort_IT+0xcc>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_DMA_Abort_IT+0xce>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8086 	beq.w	8003870 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <HAL_DMA_Abort_IT+0x1a0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04a      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_DMA_Abort_IT+0x1a4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d045      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <HAL_DMA_Abort_IT+0x1a8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d040      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_DMA_Abort_IT+0x1ac>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d03b      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_DMA_Abort_IT+0x1b0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d036      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a28      	ldr	r2, [pc, #160]	; (8003844 <HAL_DMA_Abort_IT+0x1b4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d031      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_DMA_Abort_IT+0x1b8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a25      	ldr	r2, [pc, #148]	; (800384c <HAL_DMA_Abort_IT+0x1bc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d027      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_DMA_Abort_IT+0x1c0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_DMA_Abort_IT+0x1c4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_DMA_Abort_IT+0x1c8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_DMA_Abort_IT+0x1cc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_DMA_Abort_IT+0x1d0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_DMA_Abort_IT+0x1d4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_DMA_Abort_IT+0x1d8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_DMA_Abort_IT+0x17c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_DMA_Abort_IT+0x1dc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <HAL_DMA_Abort_IT+0x18e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e178      	b.n	8003b10 <HAL_DMA_Abort_IT+0x480>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e16f      	b.n	8003b10 <HAL_DMA_Abort_IT+0x480>
 8003830:	40020010 	.word	0x40020010
 8003834:	40020028 	.word	0x40020028
 8003838:	40020040 	.word	0x40020040
 800383c:	40020058 	.word	0x40020058
 8003840:	40020070 	.word	0x40020070
 8003844:	40020088 	.word	0x40020088
 8003848:	400200a0 	.word	0x400200a0
 800384c:	400200b8 	.word	0x400200b8
 8003850:	40020410 	.word	0x40020410
 8003854:	40020428 	.word	0x40020428
 8003858:	40020440 	.word	0x40020440
 800385c:	40020458 	.word	0x40020458
 8003860:	40020470 	.word	0x40020470
 8003864:	40020488 	.word	0x40020488
 8003868:	400204a0 	.word	0x400204a0
 800386c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 020e 	bic.w	r2, r2, #14
 800387e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <HAL_DMA_Abort_IT+0x3a8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6b      	ldr	r2, [pc, #428]	; (8003a3c <HAL_DMA_Abort_IT+0x3ac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a69      	ldr	r2, [pc, #420]	; (8003a40 <HAL_DMA_Abort_IT+0x3b0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_DMA_Abort_IT+0x3b4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a66      	ldr	r2, [pc, #408]	; (8003a48 <HAL_DMA_Abort_IT+0x3b8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a65      	ldr	r2, [pc, #404]	; (8003a4c <HAL_DMA_Abort_IT+0x3bc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a63      	ldr	r2, [pc, #396]	; (8003a50 <HAL_DMA_Abort_IT+0x3c0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a62      	ldr	r2, [pc, #392]	; (8003a54 <HAL_DMA_Abort_IT+0x3c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_DMA_Abort_IT+0x3c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5f      	ldr	r2, [pc, #380]	; (8003a5c <HAL_DMA_Abort_IT+0x3cc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_DMA_Abort_IT+0x3d0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5c      	ldr	r2, [pc, #368]	; (8003a64 <HAL_DMA_Abort_IT+0x3d4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <HAL_DMA_Abort_IT+0x3d8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a59      	ldr	r2, [pc, #356]	; (8003a6c <HAL_DMA_Abort_IT+0x3dc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_DMA_Abort_IT+0x3e0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_Abort_IT+0x290>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_DMA_Abort_IT+0x3e4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <HAL_DMA_Abort_IT+0x2a2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e007      	b.n	8003942 <HAL_DMA_Abort_IT+0x2b2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <HAL_DMA_Abort_IT+0x3a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d072      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <HAL_DMA_Abort_IT+0x3ac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d06d      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a39      	ldr	r2, [pc, #228]	; (8003a40 <HAL_DMA_Abort_IT+0x3b0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d068      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <HAL_DMA_Abort_IT+0x3b4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d063      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a36      	ldr	r2, [pc, #216]	; (8003a48 <HAL_DMA_Abort_IT+0x3b8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d05e      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <HAL_DMA_Abort_IT+0x3bc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d059      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a33      	ldr	r2, [pc, #204]	; (8003a50 <HAL_DMA_Abort_IT+0x3c0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d054      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_DMA_Abort_IT+0x3c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d04f      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <HAL_DMA_Abort_IT+0x3c8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <HAL_DMA_Abort_IT+0x3cc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <HAL_DMA_Abort_IT+0x3d0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <HAL_DMA_Abort_IT+0x3d4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <HAL_DMA_Abort_IT+0x3d8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <HAL_DMA_Abort_IT+0x3dc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <HAL_DMA_Abort_IT+0x3e0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <HAL_DMA_Abort_IT+0x3e4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <HAL_DMA_Abort_IT+0x3e8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_DMA_Abort_IT+0x3ec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <HAL_DMA_Abort_IT+0x3f0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_DMA_Abort_IT+0x3f4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_DMA_Abort_IT+0x3f8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_DMA_Abort_IT+0x3fc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_DMA_Abort_IT+0x400>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x3a2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_DMA_Abort_IT+0x404>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d132      	bne.n	8003a98 <HAL_DMA_Abort_IT+0x408>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e031      	b.n	8003a9a <HAL_DMA_Abort_IT+0x40a>
 8003a36:	bf00      	nop
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	40020040 	.word	0x40020040
 8003a44:	40020058 	.word	0x40020058
 8003a48:	40020070 	.word	0x40020070
 8003a4c:	40020088 	.word	0x40020088
 8003a50:	400200a0 	.word	0x400200a0
 8003a54:	400200b8 	.word	0x400200b8
 8003a58:	40020410 	.word	0x40020410
 8003a5c:	40020428 	.word	0x40020428
 8003a60:	40020440 	.word	0x40020440
 8003a64:	40020458 	.word	0x40020458
 8003a68:	40020470 	.word	0x40020470
 8003a6c:	40020488 	.word	0x40020488
 8003a70:	400204a0 	.word	0x400204a0
 8003a74:	400204b8 	.word	0x400204b8
 8003a78:	58025408 	.word	0x58025408
 8003a7c:	5802541c 	.word	0x5802541c
 8003a80:	58025430 	.word	0x58025430
 8003a84:	58025444 	.word	0x58025444
 8003a88:	58025458 	.word	0x58025458
 8003a8c:	5802546c 	.word	0x5802546c
 8003a90:	58025480 	.word	0x58025480
 8003a94:	58025494 	.word	0x58025494
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d028      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2201      	movs	r2, #1
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003acc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop

08003b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b28:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <HAL_DMA_IRQHandler+0x1ac>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a67      	ldr	r2, [pc, #412]	; (8003ccc <HAL_DMA_IRQHandler+0x1b0>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0a9b      	lsrs	r3, r3, #10
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5f      	ldr	r2, [pc, #380]	; (8003cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d04a      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d045      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5c      	ldr	r2, [pc, #368]	; (8003cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d040      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a5a      	ldr	r2, [pc, #360]	; (8003cdc <HAL_DMA_IRQHandler+0x1c0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a59      	ldr	r2, [pc, #356]	; (8003ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d036      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a57      	ldr	r2, [pc, #348]	; (8003ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d02c      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a54      	ldr	r2, [pc, #336]	; (8003cec <HAL_DMA_IRQHandler+0x1d0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d027      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a53      	ldr	r2, [pc, #332]	; (8003cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a51      	ldr	r2, [pc, #324]	; (8003cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01d      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a50      	ldr	r2, [pc, #320]	; (8003cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <HAL_DMA_IRQHandler+0x1e0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_DMA_IRQHandler+0x1e4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4b      	ldr	r2, [pc, #300]	; (8003d04 <HAL_DMA_IRQHandler+0x1e8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <HAL_DMA_IRQHandler+0x1ec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_IRQHandler+0xd2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a48      	ldr	r2, [pc, #288]	; (8003d0c <HAL_DMA_IRQHandler+0x1f0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_IRQHandler+0xd6>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_IRQHandler+0xd8>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 842b 	beq.w	8004450 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2208      	movs	r2, #8
 8003c04:	409a      	lsls	r2, r3
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a2 	beq.w	8003d54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d04a      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d045      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d040      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <HAL_DMA_IRQHandler+0x1c0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d03b      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d036      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d031      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02c      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <HAL_DMA_IRQHandler+0x1d0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d027      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d022      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d01d      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_DMA_IRQHandler+0x1e0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_DMA_IRQHandler+0x1e4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <HAL_DMA_IRQHandler+0x1e8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_DMA_IRQHandler+0x1ec>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x194>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_DMA_IRQHandler+0x1f0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d12f      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x1f4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e02e      	b.n	8003d24 <HAL_DMA_IRQHandler+0x208>
 8003cc6:	bf00      	nop
 8003cc8:	24000000 	.word	0x24000000
 8003ccc:	1b4e81b5 	.word	0x1b4e81b5
 8003cd0:	40020010 	.word	0x40020010
 8003cd4:	40020028 	.word	0x40020028
 8003cd8:	40020040 	.word	0x40020040
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	40020070 	.word	0x40020070
 8003ce4:	40020088 	.word	0x40020088
 8003ce8:	400200a0 	.word	0x400200a0
 8003cec:	400200b8 	.word	0x400200b8
 8003cf0:	40020410 	.word	0x40020410
 8003cf4:	40020428 	.word	0x40020428
 8003cf8:	40020440 	.word	0x40020440
 8003cfc:	40020458 	.word	0x40020458
 8003d00:	40020470 	.word	0x40020470
 8003d04:	40020488 	.word	0x40020488
 8003d08:	400204a0 	.word	0x400204a0
 8003d0c:	400204b8 	.word	0x400204b8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf14      	ite	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	2300      	moveq	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0204 	bic.w	r2, r2, #4
 8003d36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	2208      	movs	r2, #8
 8003d42:	409a      	lsls	r2, r3
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06e      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a69      	ldr	r2, [pc, #420]	; (8003f14 <HAL_DMA_IRQHandler+0x3f8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04a      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a67      	ldr	r2, [pc, #412]	; (8003f18 <HAL_DMA_IRQHandler+0x3fc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d045      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a66      	ldr	r2, [pc, #408]	; (8003f1c <HAL_DMA_IRQHandler+0x400>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d040      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a64      	ldr	r2, [pc, #400]	; (8003f20 <HAL_DMA_IRQHandler+0x404>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d03b      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a63      	ldr	r2, [pc, #396]	; (8003f24 <HAL_DMA_IRQHandler+0x408>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d036      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a61      	ldr	r2, [pc, #388]	; (8003f28 <HAL_DMA_IRQHandler+0x40c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d031      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a60      	ldr	r2, [pc, #384]	; (8003f2c <HAL_DMA_IRQHandler+0x410>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d02c      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <HAL_DMA_IRQHandler+0x414>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d027      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <HAL_DMA_IRQHandler+0x418>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5b      	ldr	r2, [pc, #364]	; (8003f38 <HAL_DMA_IRQHandler+0x41c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01d      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5a      	ldr	r2, [pc, #360]	; (8003f3c <HAL_DMA_IRQHandler+0x420>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	; (8003f40 <HAL_DMA_IRQHandler+0x424>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a57      	ldr	r2, [pc, #348]	; (8003f44 <HAL_DMA_IRQHandler+0x428>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a55      	ldr	r2, [pc, #340]	; (8003f48 <HAL_DMA_IRQHandler+0x42c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a54      	ldr	r2, [pc, #336]	; (8003f4c <HAL_DMA_IRQHandler+0x430>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2ee>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_DMA_IRQHandler+0x434>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10a      	bne.n	8003e20 <HAL_DMA_IRQHandler+0x304>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e003      	b.n	8003e28 <HAL_DMA_IRQHandler+0x30c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	f043 0202 	orr.w	r2, r3, #2
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2204      	movs	r2, #4
 8003e52:	409a      	lsls	r2, r3
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 808f 	beq.w	8003f7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <HAL_DMA_IRQHandler+0x3f8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d04a      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <HAL_DMA_IRQHandler+0x3fc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d045      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <HAL_DMA_IRQHandler+0x400>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d040      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_DMA_IRQHandler+0x404>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d03b      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_DMA_IRQHandler+0x408>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d036      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <HAL_DMA_IRQHandler+0x40c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <HAL_DMA_IRQHandler+0x410>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d02c      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <HAL_DMA_IRQHandler+0x414>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d027      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <HAL_DMA_IRQHandler+0x418>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_DMA_IRQHandler+0x41c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_DMA_IRQHandler+0x420>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d018      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <HAL_DMA_IRQHandler+0x424>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_DMA_IRQHandler+0x428>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_DMA_IRQHandler+0x42c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <HAL_DMA_IRQHandler+0x430>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_DMA_IRQHandler+0x3e2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <HAL_DMA_IRQHandler+0x434>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d12a      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x438>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e023      	b.n	8003f5c <HAL_DMA_IRQHandler+0x440>
 8003f14:	40020010 	.word	0x40020010
 8003f18:	40020028 	.word	0x40020028
 8003f1c:	40020040 	.word	0x40020040
 8003f20:	40020058 	.word	0x40020058
 8003f24:	40020070 	.word	0x40020070
 8003f28:	40020088 	.word	0x40020088
 8003f2c:	400200a0 	.word	0x400200a0
 8003f30:	400200b8 	.word	0x400200b8
 8003f34:	40020410 	.word	0x40020410
 8003f38:	40020428 	.word	0x40020428
 8003f3c:	40020440 	.word	0x40020440
 8003f40:	40020458 	.word	0x40020458
 8003f44:	40020470 	.word	0x40020470
 8003f48:	40020488 	.word	0x40020488
 8003f4c:	400204a0 	.word	0x400204a0
 8003f50:	400204b8 	.word	0x400204b8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2204      	movs	r2, #4
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2210      	movs	r2, #16
 8003f86:	409a      	lsls	r2, r3
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80a6 	beq.w	80040de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a85      	ldr	r2, [pc, #532]	; (80041ac <HAL_DMA_IRQHandler+0x690>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04a      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a83      	ldr	r2, [pc, #524]	; (80041b0 <HAL_DMA_IRQHandler+0x694>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d045      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a82      	ldr	r2, [pc, #520]	; (80041b4 <HAL_DMA_IRQHandler+0x698>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d040      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a80      	ldr	r2, [pc, #512]	; (80041b8 <HAL_DMA_IRQHandler+0x69c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7f      	ldr	r2, [pc, #508]	; (80041bc <HAL_DMA_IRQHandler+0x6a0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d036      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a7d      	ldr	r2, [pc, #500]	; (80041c0 <HAL_DMA_IRQHandler+0x6a4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a7c      	ldr	r2, [pc, #496]	; (80041c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02c      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a7a      	ldr	r2, [pc, #488]	; (80041c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d027      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a79      	ldr	r2, [pc, #484]	; (80041cc <HAL_DMA_IRQHandler+0x6b0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a77      	ldr	r2, [pc, #476]	; (80041d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a76      	ldr	r2, [pc, #472]	; (80041d4 <HAL_DMA_IRQHandler+0x6b8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a74      	ldr	r2, [pc, #464]	; (80041d8 <HAL_DMA_IRQHandler+0x6bc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a73      	ldr	r2, [pc, #460]	; (80041dc <HAL_DMA_IRQHandler+0x6c0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a71      	ldr	r2, [pc, #452]	; (80041e0 <HAL_DMA_IRQHandler+0x6c4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a70      	ldr	r2, [pc, #448]	; (80041e4 <HAL_DMA_IRQHandler+0x6c8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_IRQHandler+0x516>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a6e      	ldr	r2, [pc, #440]	; (80041e8 <HAL_DMA_IRQHandler+0x6cc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10a      	bne.n	8004048 <HAL_DMA_IRQHandler+0x52c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e009      	b.n	800405c <HAL_DMA_IRQHandler+0x540>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03e      	beq.n	80040de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2210      	movs	r2, #16
 800406a:	409a      	lsls	r2, r3
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d018      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d108      	bne.n	800409e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d024      	beq.n	80040de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e01f      	b.n	80040de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
 80040ae:	e016      	b.n	80040de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0208 	bic.w	r2, r2, #8
 80040cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2220      	movs	r2, #32
 80040e8:	409a      	lsls	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8110 	beq.w	8004314 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <HAL_DMA_IRQHandler+0x690>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d04a      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2b      	ldr	r2, [pc, #172]	; (80041b0 <HAL_DMA_IRQHandler+0x694>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d045      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <HAL_DMA_IRQHandler+0x698>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d040      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <HAL_DMA_IRQHandler+0x69c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d03b      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <HAL_DMA_IRQHandler+0x6a0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d036      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <HAL_DMA_IRQHandler+0x6a4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d031      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_DMA_IRQHandler+0x6a8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02c      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <HAL_DMA_IRQHandler+0x6ac>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d027      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a20      	ldr	r2, [pc, #128]	; (80041cc <HAL_DMA_IRQHandler+0x6b0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d022      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1f      	ldr	r2, [pc, #124]	; (80041d0 <HAL_DMA_IRQHandler+0x6b4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d01d      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <HAL_DMA_IRQHandler+0x6b8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d018      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1c      	ldr	r2, [pc, #112]	; (80041d8 <HAL_DMA_IRQHandler+0x6bc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d013      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_DMA_IRQHandler+0x6c0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00e      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_DMA_IRQHandler+0x6c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <HAL_DMA_IRQHandler+0x6c8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_DMA_IRQHandler+0x678>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <HAL_DMA_IRQHandler+0x6cc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d12b      	bne.n	80041ec <HAL_DMA_IRQHandler+0x6d0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	e02a      	b.n	8004200 <HAL_DMA_IRQHandler+0x6e4>
 80041aa:	bf00      	nop
 80041ac:	40020010 	.word	0x40020010
 80041b0:	40020028 	.word	0x40020028
 80041b4:	40020040 	.word	0x40020040
 80041b8:	40020058 	.word	0x40020058
 80041bc:	40020070 	.word	0x40020070
 80041c0:	40020088 	.word	0x40020088
 80041c4:	400200a0 	.word	0x400200a0
 80041c8:	400200b8 	.word	0x400200b8
 80041cc:	40020410 	.word	0x40020410
 80041d0:	40020428 	.word	0x40020428
 80041d4:	40020440 	.word	0x40020440
 80041d8:	40020458 	.word	0x40020458
 80041dc:	40020470 	.word	0x40020470
 80041e0:	40020488 	.word	0x40020488
 80041e4:	400204a0 	.word	0x400204a0
 80041e8:	400204b8 	.word	0x400204b8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8087 	beq.w	8004314 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2220      	movs	r2, #32
 8004210:	409a      	lsls	r2, r3
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b04      	cmp	r3, #4
 8004220:	d139      	bne.n	8004296 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0216 	bic.w	r2, r2, #22
 8004230:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004240:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <HAL_DMA_IRQHandler+0x736>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0208 	bic.w	r2, r2, #8
 8004260:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	223f      	movs	r2, #63	; 0x3f
 800426c:	409a      	lsls	r2, r3
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 834a 	beq.w	8004920 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
          }
          return;
 8004294:	e344      	b.n	8004920 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d02c      	beq.n	8004314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
 80042c2:	e027      	b.n	8004314 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
 80042d4:	e01e      	b.n	8004314 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10f      	bne.n	8004304 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0210 	bic.w	r2, r2, #16
 80042f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8306 	beq.w	800492a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8088 	beq.w	800443c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2204      	movs	r2, #4
 8004330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a7a      	ldr	r2, [pc, #488]	; (8004524 <HAL_DMA_IRQHandler+0xa08>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a79      	ldr	r2, [pc, #484]	; (8004528 <HAL_DMA_IRQHandler+0xa0c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a77      	ldr	r2, [pc, #476]	; (800452c <HAL_DMA_IRQHandler+0xa10>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a76      	ldr	r2, [pc, #472]	; (8004530 <HAL_DMA_IRQHandler+0xa14>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a74      	ldr	r2, [pc, #464]	; (8004534 <HAL_DMA_IRQHandler+0xa18>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a73      	ldr	r2, [pc, #460]	; (8004538 <HAL_DMA_IRQHandler+0xa1c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a71      	ldr	r2, [pc, #452]	; (800453c <HAL_DMA_IRQHandler+0xa20>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a70      	ldr	r2, [pc, #448]	; (8004540 <HAL_DMA_IRQHandler+0xa24>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_DMA_IRQHandler+0xa28>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6d      	ldr	r2, [pc, #436]	; (8004548 <HAL_DMA_IRQHandler+0xa2c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6b      	ldr	r2, [pc, #428]	; (800454c <HAL_DMA_IRQHandler+0xa30>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6a      	ldr	r2, [pc, #424]	; (8004550 <HAL_DMA_IRQHandler+0xa34>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a68      	ldr	r2, [pc, #416]	; (8004554 <HAL_DMA_IRQHandler+0xa38>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a67      	ldr	r2, [pc, #412]	; (8004558 <HAL_DMA_IRQHandler+0xa3c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a65      	ldr	r2, [pc, #404]	; (800455c <HAL_DMA_IRQHandler+0xa40>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x8b8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a64      	ldr	r2, [pc, #400]	; (8004560 <HAL_DMA_IRQHandler+0xa44>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_IRQHandler+0x8ca>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_DMA_IRQHandler+0x8da>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	429a      	cmp	r2, r3
 8004400:	d307      	bcc.n	8004412 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x8da>
 8004410:	e000      	b.n	8004414 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004412:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800442a:	e003      	b.n	8004434 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8272 	beq.w	800492a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	e26c      	b.n	800492a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a43      	ldr	r2, [pc, #268]	; (8004564 <HAL_DMA_IRQHandler+0xa48>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d022      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a42      	ldr	r2, [pc, #264]	; (8004568 <HAL_DMA_IRQHandler+0xa4c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d01d      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a40      	ldr	r2, [pc, #256]	; (800456c <HAL_DMA_IRQHandler+0xa50>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d018      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <HAL_DMA_IRQHandler+0xa54>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d013      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3d      	ldr	r2, [pc, #244]	; (8004574 <HAL_DMA_IRQHandler+0xa58>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <HAL_DMA_IRQHandler+0xa5c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3a      	ldr	r2, [pc, #232]	; (800457c <HAL_DMA_IRQHandler+0xa60>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x984>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a39      	ldr	r2, [pc, #228]	; (8004580 <HAL_DMA_IRQHandler+0xa64>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x988>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_DMA_IRQHandler+0x98a>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 823f 	beq.w	800492a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80cd 	beq.w	8004664 <HAL_DMA_IRQHandler+0xb48>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80c7 	beq.w	8004664 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2204      	movs	r2, #4
 80044e0:	409a      	lsls	r2, r3
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d049      	beq.n	8004584 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8210 	beq.w	8004924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800450c:	e20a      	b.n	8004924 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8206 	beq.w	8004924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004520:	e200      	b.n	8004924 <HAL_DMA_IRQHandler+0xe08>
 8004522:	bf00      	nop
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	58025408 	.word	0x58025408
 8004568:	5802541c 	.word	0x5802541c
 800456c:	58025430 	.word	0x58025430
 8004570:	58025444 	.word	0x58025444
 8004574:	58025458 	.word	0x58025458
 8004578:	5802546c 	.word	0x5802546c
 800457c:	58025480 	.word	0x58025480
 8004580:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d160      	bne.n	8004650 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7f      	ldr	r2, [pc, #508]	; (8004790 <HAL_DMA_IRQHandler+0xc74>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d04a      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7d      	ldr	r2, [pc, #500]	; (8004794 <HAL_DMA_IRQHandler+0xc78>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d045      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7c      	ldr	r2, [pc, #496]	; (8004798 <HAL_DMA_IRQHandler+0xc7c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d040      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a7a      	ldr	r2, [pc, #488]	; (800479c <HAL_DMA_IRQHandler+0xc80>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d03b      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a79      	ldr	r2, [pc, #484]	; (80047a0 <HAL_DMA_IRQHandler+0xc84>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d036      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a77      	ldr	r2, [pc, #476]	; (80047a4 <HAL_DMA_IRQHandler+0xc88>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a76      	ldr	r2, [pc, #472]	; (80047a8 <HAL_DMA_IRQHandler+0xc8c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d02c      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a74      	ldr	r2, [pc, #464]	; (80047ac <HAL_DMA_IRQHandler+0xc90>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d027      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a73      	ldr	r2, [pc, #460]	; (80047b0 <HAL_DMA_IRQHandler+0xc94>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a71      	ldr	r2, [pc, #452]	; (80047b4 <HAL_DMA_IRQHandler+0xc98>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a70      	ldr	r2, [pc, #448]	; (80047b8 <HAL_DMA_IRQHandler+0xc9c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d018      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_DMA_IRQHandler+0xca0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6d      	ldr	r2, [pc, #436]	; (80047c0 <HAL_DMA_IRQHandler+0xca4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6b      	ldr	r2, [pc, #428]	; (80047c4 <HAL_DMA_IRQHandler+0xca8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6a      	ldr	r2, [pc, #424]	; (80047c8 <HAL_DMA_IRQHandler+0xcac>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_DMA_IRQHandler+0xb12>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a68      	ldr	r2, [pc, #416]	; (80047cc <HAL_DMA_IRQHandler+0xcb0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d108      	bne.n	8004640 <HAL_DMA_IRQHandler+0xb24>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0208 	bic.w	r2, r2, #8
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e007      	b.n	8004650 <HAL_DMA_IRQHandler+0xb34>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8165 	beq.w	8004924 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004662:	e15f      	b.n	8004924 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2202      	movs	r2, #2
 800466e:	409a      	lsls	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80c5 	beq.w	8004804 <HAL_DMA_IRQHandler+0xce8>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80bf 	beq.w	8004804 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2202      	movs	r2, #2
 8004690:	409a      	lsls	r2, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 813a 	beq.w	8004928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046bc:	e134      	b.n	8004928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8130 	beq.w	8004928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d0:	e12a      	b.n	8004928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 8089 	bne.w	80047f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <HAL_DMA_IRQHandler+0xc74>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <HAL_DMA_IRQHandler+0xc78>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a28      	ldr	r2, [pc, #160]	; (8004798 <HAL_DMA_IRQHandler+0xc7c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a26      	ldr	r2, [pc, #152]	; (800479c <HAL_DMA_IRQHandler+0xc80>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <HAL_DMA_IRQHandler+0xc84>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <HAL_DMA_IRQHandler+0xc88>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_DMA_IRQHandler+0xc8c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a20      	ldr	r2, [pc, #128]	; (80047ac <HAL_DMA_IRQHandler+0xc90>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_DMA_IRQHandler+0xc94>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_DMA_IRQHandler+0xc98>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_DMA_IRQHandler+0xc9c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_DMA_IRQHandler+0xca0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <HAL_DMA_IRQHandler+0xca4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_DMA_IRQHandler+0xca8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <HAL_DMA_IRQHandler+0xcac>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_IRQHandler+0xc62>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_DMA_IRQHandler+0xcb0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d128      	bne.n	80047d0 <HAL_DMA_IRQHandler+0xcb4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0214 	bic.w	r2, r2, #20
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e027      	b.n	80047e0 <HAL_DMA_IRQHandler+0xcc4>
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 020a 	bic.w	r2, r2, #10
 80047de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8097 	beq.w	8004928 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004802:	e091      	b.n	8004928 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2208      	movs	r2, #8
 800480e:	409a      	lsls	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8088 	beq.w	800492a <HAL_DMA_IRQHandler+0xe0e>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8082 	beq.w	800492a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a41      	ldr	r2, [pc, #260]	; (8004930 <HAL_DMA_IRQHandler+0xe14>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3f      	ldr	r2, [pc, #252]	; (8004934 <HAL_DMA_IRQHandler+0xe18>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a3e      	ldr	r2, [pc, #248]	; (8004938 <HAL_DMA_IRQHandler+0xe1c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3c      	ldr	r2, [pc, #240]	; (800493c <HAL_DMA_IRQHandler+0xe20>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3b      	ldr	r2, [pc, #236]	; (8004940 <HAL_DMA_IRQHandler+0xe24>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a39      	ldr	r2, [pc, #228]	; (8004944 <HAL_DMA_IRQHandler+0xe28>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a38      	ldr	r2, [pc, #224]	; (8004948 <HAL_DMA_IRQHandler+0xe2c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a36      	ldr	r2, [pc, #216]	; (800494c <HAL_DMA_IRQHandler+0xe30>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a35      	ldr	r2, [pc, #212]	; (8004950 <HAL_DMA_IRQHandler+0xe34>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_DMA_IRQHandler+0xe38>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_DMA_IRQHandler+0xe3c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_DMA_IRQHandler+0xe40>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <HAL_DMA_IRQHandler+0xe44>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_DMA_IRQHandler+0xe48>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <HAL_DMA_IRQHandler+0xe4c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xdaa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_DMA_IRQHandler+0xe50>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <HAL_DMA_IRQHandler+0xdbc>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 021c 	bic.w	r2, r2, #28
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e007      	b.n	80048e8 <HAL_DMA_IRQHandler+0xdcc>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020e 	bic.w	r2, r2, #14
 80048e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4798      	blx	r3
 800491e:	e004      	b.n	800492a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004920:	bf00      	nop
 8004922:	e002      	b.n	800492a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004924:	bf00      	nop
 8004926:	e000      	b.n	800492a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004928:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40020010 	.word	0x40020010
 8004934:	40020028 	.word	0x40020028
 8004938:	40020040 	.word	0x40020040
 800493c:	40020058 	.word	0x40020058
 8004940:	40020070 	.word	0x40020070
 8004944:	40020088 	.word	0x40020088
 8004948:	400200a0 	.word	0x400200a0
 800494c:	400200b8 	.word	0x400200b8
 8004950:	40020410 	.word	0x40020410
 8004954:	40020428 	.word	0x40020428
 8004958:	40020440 	.word	0x40020440
 800495c:	40020458 	.word	0x40020458
 8004960:	40020470 	.word	0x40020470
 8004964:	40020488 	.word	0x40020488
 8004968:	400204a0 	.word	0x400204a0
 800496c:	400204b8 	.word	0x400204b8

08004970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7f      	ldr	r2, [pc, #508]	; (8004b8c <DMA_SetConfig+0x21c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d072      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7d      	ldr	r2, [pc, #500]	; (8004b90 <DMA_SetConfig+0x220>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d06d      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7c      	ldr	r2, [pc, #496]	; (8004b94 <DMA_SetConfig+0x224>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d068      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7a      	ldr	r2, [pc, #488]	; (8004b98 <DMA_SetConfig+0x228>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d063      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a79      	ldr	r2, [pc, #484]	; (8004b9c <DMA_SetConfig+0x22c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d05e      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a77      	ldr	r2, [pc, #476]	; (8004ba0 <DMA_SetConfig+0x230>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d059      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a76      	ldr	r2, [pc, #472]	; (8004ba4 <DMA_SetConfig+0x234>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d054      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a74      	ldr	r2, [pc, #464]	; (8004ba8 <DMA_SetConfig+0x238>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04f      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a73      	ldr	r2, [pc, #460]	; (8004bac <DMA_SetConfig+0x23c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d04a      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a71      	ldr	r2, [pc, #452]	; (8004bb0 <DMA_SetConfig+0x240>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d045      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a70      	ldr	r2, [pc, #448]	; (8004bb4 <DMA_SetConfig+0x244>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d040      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <DMA_SetConfig+0x248>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d03b      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6d      	ldr	r2, [pc, #436]	; (8004bbc <DMA_SetConfig+0x24c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d036      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6b      	ldr	r2, [pc, #428]	; (8004bc0 <DMA_SetConfig+0x250>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a6a      	ldr	r2, [pc, #424]	; (8004bc4 <DMA_SetConfig+0x254>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d02c      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a68      	ldr	r2, [pc, #416]	; (8004bc8 <DMA_SetConfig+0x258>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d027      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a67      	ldr	r2, [pc, #412]	; (8004bcc <DMA_SetConfig+0x25c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <DMA_SetConfig+0x260>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a64      	ldr	r2, [pc, #400]	; (8004bd4 <DMA_SetConfig+0x264>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a62      	ldr	r2, [pc, #392]	; (8004bd8 <DMA_SetConfig+0x268>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <DMA_SetConfig+0x26c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5f      	ldr	r2, [pc, #380]	; (8004be0 <DMA_SetConfig+0x270>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5e      	ldr	r2, [pc, #376]	; (8004be4 <DMA_SetConfig+0x274>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <DMA_SetConfig+0x10a>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <DMA_SetConfig+0x278>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <DMA_SetConfig+0x10e>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <DMA_SetConfig+0x110>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00d      	beq.n	8004aa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a39      	ldr	r2, [pc, #228]	; (8004b8c <DMA_SetConfig+0x21c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d04a      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a38      	ldr	r2, [pc, #224]	; (8004b90 <DMA_SetConfig+0x220>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d045      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a36      	ldr	r2, [pc, #216]	; (8004b94 <DMA_SetConfig+0x224>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d040      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <DMA_SetConfig+0x228>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d03b      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <DMA_SetConfig+0x22c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d036      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a32      	ldr	r2, [pc, #200]	; (8004ba0 <DMA_SetConfig+0x230>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d031      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a30      	ldr	r2, [pc, #192]	; (8004ba4 <DMA_SetConfig+0x234>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02c      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <DMA_SetConfig+0x238>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d027      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <DMA_SetConfig+0x23c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d022      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <DMA_SetConfig+0x240>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d01d      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <DMA_SetConfig+0x244>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d018      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <DMA_SetConfig+0x248>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d013      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <DMA_SetConfig+0x24c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a26      	ldr	r2, [pc, #152]	; (8004bc0 <DMA_SetConfig+0x250>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d009      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <DMA_SetConfig+0x254>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <DMA_SetConfig+0x1d0>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <DMA_SetConfig+0x258>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d101      	bne.n	8004b44 <DMA_SetConfig+0x1d4>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <DMA_SetConfig+0x1d6>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d059      	beq.n	8004bfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	223f      	movs	r2, #63	; 0x3f
 8004b54:	409a      	lsls	r2, r3
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d138      	bne.n	8004bec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b8a:	e086      	b.n	8004c9a <DMA_SetConfig+0x32a>
 8004b8c:	40020010 	.word	0x40020010
 8004b90:	40020028 	.word	0x40020028
 8004b94:	40020040 	.word	0x40020040
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	40020070 	.word	0x40020070
 8004ba0:	40020088 	.word	0x40020088
 8004ba4:	400200a0 	.word	0x400200a0
 8004ba8:	400200b8 	.word	0x400200b8
 8004bac:	40020410 	.word	0x40020410
 8004bb0:	40020428 	.word	0x40020428
 8004bb4:	40020440 	.word	0x40020440
 8004bb8:	40020458 	.word	0x40020458
 8004bbc:	40020470 	.word	0x40020470
 8004bc0:	40020488 	.word	0x40020488
 8004bc4:	400204a0 	.word	0x400204a0
 8004bc8:	400204b8 	.word	0x400204b8
 8004bcc:	58025408 	.word	0x58025408
 8004bd0:	5802541c 	.word	0x5802541c
 8004bd4:	58025430 	.word	0x58025430
 8004bd8:	58025444 	.word	0x58025444
 8004bdc:	58025458 	.word	0x58025458
 8004be0:	5802546c 	.word	0x5802546c
 8004be4:	58025480 	.word	0x58025480
 8004be8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
}
 8004bfc:	e04d      	b.n	8004c9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <DMA_SetConfig+0x338>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <DMA_SetConfig+0x33c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <DMA_SetConfig+0x340>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <DMA_SetConfig+0x344>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <DMA_SetConfig+0x348>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <DMA_SetConfig+0x34c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <DMA_SetConfig+0x350>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <DMA_SetConfig+0x2de>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <DMA_SetConfig+0x354>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <DMA_SetConfig+0x2e2>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <DMA_SetConfig+0x2e4>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d108      	bne.n	8004c8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	60da      	str	r2, [r3, #12]
}
 8004c88:	e007      	b.n	8004c9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	58025408 	.word	0x58025408
 8004cac:	5802541c 	.word	0x5802541c
 8004cb0:	58025430 	.word	0x58025430
 8004cb4:	58025444 	.word	0x58025444
 8004cb8:	58025458 	.word	0x58025458
 8004cbc:	5802546c 	.word	0x5802546c
 8004cc0:	58025480 	.word	0x58025480
 8004cc4:	58025494 	.word	0x58025494

08004cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a42      	ldr	r2, [pc, #264]	; (8004de0 <DMA_CalcBaseAndBitshift+0x118>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d04a      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d045      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <DMA_CalcBaseAndBitshift+0x120>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d040      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3e      	ldr	r2, [pc, #248]	; (8004dec <DMA_CalcBaseAndBitshift+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d03b      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3c      	ldr	r2, [pc, #240]	; (8004df0 <DMA_CalcBaseAndBitshift+0x128>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d036      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3b      	ldr	r2, [pc, #236]	; (8004df4 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d031      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a39      	ldr	r2, [pc, #228]	; (8004df8 <DMA_CalcBaseAndBitshift+0x130>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02c      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a38      	ldr	r2, [pc, #224]	; (8004dfc <DMA_CalcBaseAndBitshift+0x134>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d027      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a36      	ldr	r2, [pc, #216]	; (8004e00 <DMA_CalcBaseAndBitshift+0x138>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a35      	ldr	r2, [pc, #212]	; (8004e04 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d01d      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <DMA_CalcBaseAndBitshift+0x140>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <DMA_CalcBaseAndBitshift+0x144>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <DMA_CalcBaseAndBitshift+0x148>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <DMA_CalcBaseAndBitshift+0x150>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xa8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2c      	ldr	r2, [pc, #176]	; (8004e1c <DMA_CalcBaseAndBitshift+0x154>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <DMA_CalcBaseAndBitshift+0xac>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <DMA_CalcBaseAndBitshift+0xae>
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d024      	beq.n	8004dc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	3b10      	subs	r3, #16
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <DMA_CalcBaseAndBitshift+0x158>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d908      	bls.n	8004db4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <DMA_CalcBaseAndBitshift+0x160>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	1d1a      	adds	r2, r3, #4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	659a      	str	r2, [r3, #88]	; 0x58
 8004db2:	e00d      	b.n	8004dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <DMA_CalcBaseAndBitshift+0x160>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc2:	e005      	b.n	8004dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8
 8004e20:	aaaaaaab 	.word	0xaaaaaaab
 8004e24:	08020e84 	.word	0x08020e84
 8004e28:	fffffc00 	.word	0xfffffc00

08004e2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d120      	bne.n	8004e82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d858      	bhi.n	8004efa <DMA_CheckFifoParam+0xce>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <DMA_CheckFifoParam+0x24>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e73 	.word	0x08004e73
 8004e58:	08004e61 	.word	0x08004e61
 8004e5c:	08004efb 	.word	0x08004efb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d048      	beq.n	8004efe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e70:	e045      	b.n	8004efe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e7a:	d142      	bne.n	8004f02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e80:	e03f      	b.n	8004f02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e8a:	d123      	bne.n	8004ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d838      	bhi.n	8004f06 <DMA_CheckFifoParam+0xda>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <DMA_CheckFifoParam+0x70>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004eb3 	.word	0x08004eb3
 8004ea4:	08004ead 	.word	0x08004ead
 8004ea8:	08004ec5 	.word	0x08004ec5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb0:	e030      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d025      	beq.n	8004f0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec2:	e022      	b.n	8004f0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ecc:	d11f      	bne.n	8004f0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed2:	e01c      	b.n	8004f0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d902      	bls.n	8004ee2 <DMA_CheckFifoParam+0xb6>
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d003      	beq.n	8004ee8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ee0:	e018      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ee6:	e015      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00e      	beq.n	8004f12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ef8:	e00b      	b.n	8004f12 <DMA_CheckFifoParam+0xe6>
        break;
 8004efa:	bf00      	nop
 8004efc:	e00a      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e008      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e006      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e004      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <DMA_CheckFifoParam+0xe8>
    break;
 8004f12:	bf00      	nop
    }
  }

  return status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop

08004f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a38      	ldr	r2, [pc, #224]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a36      	ldr	r2, [pc, #216]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a35      	ldr	r2, [pc, #212]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a33      	ldr	r2, [pc, #204]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a32      	ldr	r2, [pc, #200]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a30      	ldr	r2, [pc, #192]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01a      	beq.n	8004fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	3b08      	subs	r3, #8
 8004f94:	4a28      	ldr	r2, [pc, #160]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4b26      	ldr	r3, [pc, #152]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a24      	ldr	r2, [pc, #144]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2201      	movs	r2, #1
 8004fba:	409a      	lsls	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fc0:	e024      	b.n	800500c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3b10      	subs	r3, #16
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d806      	bhi.n	8004fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d902      	bls.n	8004fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4b18      	ldr	r3, [pc, #96]	; (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a16      	ldr	r2, [pc, #88]	; (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	2201      	movs	r2, #1
 8005006:	409a      	lsls	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	58025408 	.word	0x58025408
 800501c:	5802541c 	.word	0x5802541c
 8005020:	58025430 	.word	0x58025430
 8005024:	58025444 	.word	0x58025444
 8005028:	58025458 	.word	0x58025458
 800502c:	5802546c 	.word	0x5802546c
 8005030:	58025480 	.word	0x58025480
 8005034:	58025494 	.word	0x58025494
 8005038:	cccccccd 	.word	0xcccccccd
 800503c:	16009600 	.word	0x16009600
 8005040:	58025880 	.word	0x58025880
 8005044:	aaaaaaab 	.word	0xaaaaaaab
 8005048:	400204b8 	.word	0x400204b8
 800504c:	4002040f 	.word	0x4002040f
 8005050:	10008200 	.word	0x10008200
 8005054:	40020880 	.word	0x40020880

08005058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d04a      	beq.n	8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d847      	bhi.n	8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d022      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01d      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a22      	ldr	r2, [pc, #136]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a21      	ldr	r2, [pc, #132]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00e      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d009      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a1b      	ldr	r2, [pc, #108]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d101      	bne.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	461a      	mov	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050e0:	671a      	str	r2, [r3, #112]	; 0x70
 80050e2:	e009      	b.n	80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	2201      	movs	r2, #1
 80050fe:	409a      	lsls	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	58025408 	.word	0x58025408
 8005114:	5802541c 	.word	0x5802541c
 8005118:	58025430 	.word	0x58025430
 800511c:	58025444 	.word	0x58025444
 8005120:	58025458 	.word	0x58025458
 8005124:	5802546c 	.word	0x5802546c
 8005128:	58025480 	.word	0x58025480
 800512c:	58025494 	.word	0x58025494
 8005130:	1600963f 	.word	0x1600963f
 8005134:	58025940 	.word	0x58025940
 8005138:	1000823f 	.word	0x1000823f
 800513c:	40020940 	.word	0x40020940

08005140 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0cf      	b.n	80052f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2223      	movs	r2, #35	; 0x23
 8005160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fb fcc1 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800516a:	4b64      	ldr	r3, [pc, #400]	; (80052fc <HAL_ETH_Init+0x1bc>)
 800516c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005170:	4a62      	ldr	r2, [pc, #392]	; (80052fc <HAL_ETH_Init+0x1bc>)
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800517a:	4b60      	ldr	r3, [pc, #384]	; (80052fc <HAL_ETH_Init+0x1bc>)
 800517c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7a1b      	ldrb	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005190:	2000      	movs	r0, #0
 8005192:	f7fd f8a5 	bl	80022e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8005196:	e003      	b.n	80051a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005198:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800519c:	f7fd f8a0 	bl	80022e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80051a0:	4b57      	ldr	r3, [pc, #348]	; (8005300 <HAL_ETH_Init+0x1c0>)
 80051a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051bc:	f7fd f854 	bl	8002268 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051c2:	e011      	b.n	80051e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051c4:	f7fd f850 	bl	8002268 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051d2:	d909      	bls.n	80051e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2204      	movs	r2, #4
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	22e0      	movs	r2, #224	; 0xe0
 80051e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e084      	b.n	80052f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e4      	bne.n	80051c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f886 	bl	800530c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005200:	f002 fc88 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8005204:	4603      	mov	r3, r0
 8005206:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <HAL_ETH_Init+0x1c4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0c9a      	lsrs	r2, r3, #18
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3a01      	subs	r2, #1
 8005214:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa71 	bl	8005700 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005226:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800522a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800523a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	22e0      	movs	r2, #224	; 0xe0
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e049      	b.n	80052f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005266:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <HAL_ETH_Init+0x1c8>)
 800526c:	4013      	ands	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6952      	ldr	r2, [r2, #20]
 8005272:	0051      	lsls	r1, r2, #1
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	430b      	orrs	r3, r1
 800527a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800527e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fad9 	bl	800583a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fb1f 	bl	80058cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	3305      	adds	r3, #5
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	3303      	adds	r3, #3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	061a      	lsls	r2, r3, #24
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	3302      	adds	r3, #2
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	3301      	adds	r3, #1
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2210      	movs	r2, #16
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
 8005300:	58000400 	.word	0x58000400
 8005304:	431bde83 	.word	0x431bde83
 8005308:	ffff8001 	.word	0xffff8001

0800530c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800531c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005324:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005326:	f002 fbf5 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 800532a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d908      	bls.n	8005346 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d804      	bhi.n	8005346 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e027      	b.n	8005396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d908      	bls.n	8005360 <HAL_ETH_SetMDIOClockRange+0x54>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d204      	bcs.n	8005360 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e01a      	b.n	8005396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d303      	bcc.n	8005370 <HAL_ETH_SetMDIOClockRange+0x64>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d911      	bls.n	8005394 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d908      	bls.n	800538a <HAL_ETH_SetMDIOClockRange+0x7e>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d804      	bhi.n	800538a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e005      	b.n	8005396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	e000      	b.n	8005396 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005394:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	01312cff 	.word	0x01312cff
 80053ac:	02160ebf 	.word	0x02160ebf
 80053b0:	03938700 	.word	0x03938700
 80053b4:	05f5e0ff 	.word	0x05f5e0ff
 80053b8:	08f0d17f 	.word	0x08f0d17f

080053bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	7b1b      	ldrb	r3, [r3, #12]
 80053dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	7b5b      	ldrb	r3, [r3, #13]
 80053e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b9b      	ldrb	r3, [r3, #14]
 80053ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	7bdb      	ldrb	r3, [r3, #15]
 80053f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	7c12      	ldrb	r2, [r2, #16]
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	d102      	bne.n	8005406 <ETH_SetMACConfig+0x4a>
 8005400:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005404:	e000      	b.n	8005408 <ETH_SetMACConfig+0x4c>
 8005406:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005408:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	7c52      	ldrb	r2, [r2, #17]
 800540e:	2a00      	cmp	r2, #0
 8005410:	d102      	bne.n	8005418 <ETH_SetMACConfig+0x5c>
 8005412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005416:	e000      	b.n	800541a <ETH_SetMACConfig+0x5e>
 8005418:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800541a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	7c9b      	ldrb	r3, [r3, #18]
 8005420:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005422:	431a      	orrs	r2, r3
               macconf->Speed |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005428:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800542e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	7f1b      	ldrb	r3, [r3, #28]
 8005434:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	7f5b      	ldrb	r3, [r3, #29]
 800543c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800543e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	7f92      	ldrb	r2, [r2, #30]
 8005444:	2a00      	cmp	r2, #0
 8005446:	d102      	bne.n	800544e <ETH_SetMACConfig+0x92>
 8005448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800544c:	e000      	b.n	8005450 <ETH_SetMACConfig+0x94>
 800544e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005450:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	7fdb      	ldrb	r3, [r3, #31]
 8005456:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005458:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005460:	2a00      	cmp	r2, #0
 8005462:	d102      	bne.n	800546a <ETH_SetMACConfig+0xae>
 8005464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005468:	e000      	b.n	800546c <ETH_SetMACConfig+0xb0>
 800546a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800546c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005472:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800547c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <ETH_SetMACConfig+0x22c>)
 800548e:	4013      	ands	r3, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	430b      	orrs	r3, r1
 8005498:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	d102      	bne.n	80054ce <ETH_SetMACConfig+0x112>
 80054c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054cc:	e000      	b.n	80054d0 <ETH_SetMACConfig+0x114>
 80054ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b42      	ldr	r3, [pc, #264]	; (80055ec <ETH_SetMACConfig+0x230>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <ETH_SetMACConfig+0x234>)
 8005506:	4013      	ands	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	430b      	orrs	r3, r1
 8005510:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005518:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800551e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005526:	2a00      	cmp	r2, #0
 8005528:	d101      	bne.n	800552e <ETH_SetMACConfig+0x172>
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	e000      	b.n	8005530 <ETH_SetMACConfig+0x174>
 800552e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005530:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005542:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005546:	4013      	ands	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	430b      	orrs	r3, r1
 8005550:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005558:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005560:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f023 0103 	bic.w	r1, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	430a      	orrs	r2, r1
 800557a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005586:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d101      	bne.n	80055aa <ETH_SetMACConfig+0x1ee>
 80055a6:	2240      	movs	r2, #64	; 0x40
 80055a8:	e000      	b.n	80055ac <ETH_SetMACConfig+0x1f0>
 80055aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	00048083 	.word	0x00048083
 80055ec:	c0f88000 	.word	0xc0f88000
 80055f0:	fffffef0 	.word	0xfffffef0

080055f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b38      	ldr	r3, [pc, #224]	; (80056ec <ETH_SetDMAConfig+0xf8>)
 800560a:	4013      	ands	r3, r2
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	6811      	ldr	r1, [r2, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	791b      	ldrb	r3, [r3, #4]
 8005620:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005626:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	7b1b      	ldrb	r3, [r3, #12]
 800562c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <ETH_SetDMAConfig+0xfc>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	430b      	orrs	r3, r1
 8005648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800564c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	7b5b      	ldrb	r3, [r3, #13]
 8005652:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005664:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005668:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <ETH_SetDMAConfig+0x100>)
 800566a:	4013      	ands	r3, r2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	68f9      	ldr	r1, [r7, #12]
 8005672:	430b      	orrs	r3, r1
 8005674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005678:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	7d1b      	ldrb	r3, [r3, #20]
 8005684:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005686:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	7f5b      	ldrb	r3, [r3, #29]
 800568c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800569e:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <ETH_SetDMAConfig+0x104>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	7f1b      	ldrb	r3, [r3, #28]
 80056b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <ETH_SetDMAConfig+0x108>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	ffff87fd 	.word	0xffff87fd
 80056f0:	ffff2ffe 	.word	0xffff2ffe
 80056f4:	fffec000 	.word	0xfffec000
 80056f8:	ffc0efef 	.word	0xffc0efef
 80056fc:	7fc0ffff 	.word	0x7fc0ffff

08005700 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b0a4      	sub	sp, #144	; 0x90
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800570e:	2300      	movs	r3, #0
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800573c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005742:	2300      	movs	r3, #0
 8005744:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005748:	2300      	movs	r3, #0
 800574a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005752:	2300      	movs	r3, #0
 8005754:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005758:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800575c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005764:	2300      	movs	r3, #0
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005774:	2300      	movs	r3, #0
 8005776:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800577a:	2300      	movs	r3, #0
 800577c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800577e:	2300      	movs	r3, #0
 8005780:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005782:	2300      	movs	r3, #0
 8005784:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005786:	2300      	movs	r3, #0
 8005788:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005798:	2320      	movs	r3, #32
 800579a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057bc:	2302      	movs	r3, #2
 80057be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057da:	2300      	movs	r3, #0
 80057dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fde6 	bl	80053bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057f4:	2301      	movs	r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005802:	2300      	movs	r3, #0
 8005804:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005806:	2300      	movs	r3, #0
 8005808:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800580a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800580e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005818:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005820:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fee1 	bl	80055f4 <ETH_SetDMAConfig>
}
 8005832:	bf00      	nop
 8005834:	3790      	adds	r7, #144	; 0x90
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e01d      	b.n	8005884 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68d9      	ldr	r1, [r3, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4613      	mov	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4413      	add	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	440b      	add	r3, r1
 8005858:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	3206      	adds	r2, #6
 800587a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3301      	adds	r3, #1
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d9de      	bls.n	8005848 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	2303      	movs	r3, #3
 800589c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e023      	b.n	8005922 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6919      	ldr	r1, [r3, #16]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	3212      	adds	r2, #18
 8005918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d9d8      	bls.n	80058da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594e:	461a      	mov	r2, r3
 8005950:	2303      	movs	r3, #3
 8005952:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005962:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005976:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005996:	4b89      	ldr	r3, [pc, #548]	; (8005bbc <HAL_GPIO_Init+0x234>)
 8005998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800599a:	e194      	b.n	8005cc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2101      	movs	r1, #1
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8186 	beq.w	8005cc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d005      	beq.n	80059cc <HAL_GPIO_Init+0x44>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d130      	bne.n	8005a2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	2203      	movs	r2, #3
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a02:	2201      	movs	r2, #1
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	43db      	mvns	r3, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0201 	and.w	r2, r3, #1
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d017      	beq.n	8005a6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d123      	bne.n	8005abe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	220f      	movs	r2, #15
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	08da      	lsrs	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3208      	adds	r2, #8
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	2203      	movs	r2, #3
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0203 	and.w	r2, r3, #3
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80e0 	beq.w	8005cc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b00:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <HAL_GPIO_Init+0x238>)
 8005b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b06:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <HAL_GPIO_Init+0x238>)
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b10:	4b2b      	ldr	r3, [pc, #172]	; (8005bc0 <HAL_GPIO_Init+0x238>)
 8005b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b1e:	4a29      	ldr	r2, [pc, #164]	; (8005bc4 <HAL_GPIO_Init+0x23c>)
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	3302      	adds	r3, #2
 8005b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	220f      	movs	r2, #15
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_GPIO_Init+0x240>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d052      	beq.n	8005bf0 <HAL_GPIO_Init+0x268>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_GPIO_Init+0x244>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_GPIO_Init+0x22e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_GPIO_Init+0x248>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <HAL_GPIO_Init+0x22a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <HAL_GPIO_Init+0x24c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d025      	beq.n	8005bae <HAL_GPIO_Init+0x226>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1c      	ldr	r2, [pc, #112]	; (8005bd8 <HAL_GPIO_Init+0x250>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <HAL_GPIO_Init+0x222>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <HAL_GPIO_Init+0x254>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d019      	beq.n	8005ba6 <HAL_GPIO_Init+0x21e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1a      	ldr	r2, [pc, #104]	; (8005be0 <HAL_GPIO_Init+0x258>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_GPIO_Init+0x21a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <HAL_GPIO_Init+0x25c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00d      	beq.n	8005b9e <HAL_GPIO_Init+0x216>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_GPIO_Init+0x260>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <HAL_GPIO_Init+0x212>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a17      	ldr	r2, [pc, #92]	; (8005bec <HAL_GPIO_Init+0x264>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_GPIO_Init+0x20e>
 8005b92:	2309      	movs	r3, #9
 8005b94:	e02d      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005b96:	230a      	movs	r3, #10
 8005b98:	e02b      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e029      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005b9e:	2307      	movs	r3, #7
 8005ba0:	e027      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005ba2:	2306      	movs	r3, #6
 8005ba4:	e025      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005ba6:	2305      	movs	r3, #5
 8005ba8:	e023      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005baa:	2304      	movs	r3, #4
 8005bac:	e021      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e01f      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e01d      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e01b      	b.n	8005bf2 <HAL_GPIO_Init+0x26a>
 8005bba:	bf00      	nop
 8005bbc:	58000080 	.word	0x58000080
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	58000400 	.word	0x58000400
 8005bc8:	58020000 	.word	0x58020000
 8005bcc:	58020400 	.word	0x58020400
 8005bd0:	58020800 	.word	0x58020800
 8005bd4:	58020c00 	.word	0x58020c00
 8005bd8:	58021000 	.word	0x58021000
 8005bdc:	58021400 	.word	0x58021400
 8005be0:	58021800 	.word	0x58021800
 8005be4:	58021c00 	.word	0x58021c00
 8005be8:	58022000 	.word	0x58022000
 8005bec:	58022400 	.word	0x58022400
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	f002 0203 	and.w	r2, r2, #3
 8005bf8:	0092      	lsls	r2, r2, #2
 8005bfa:	4093      	lsls	r3, r2
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c02:	4938      	ldr	r1, [pc, #224]	; (8005ce4 <HAL_GPIO_Init+0x35c>)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	3302      	adds	r3, #2
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f ae63 	bne.w	800599c <HAL_GPIO_Init+0x14>
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	3724      	adds	r7, #36	; 0x24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	58000400 	.word	0x58000400

08005ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	e001      	b.n	8005d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	807b      	strh	r3, [r7, #2]
 8005d24:	4613      	mov	r3, r2
 8005d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d28:	787b      	ldrb	r3, [r7, #1]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d2e:	887a      	ldrh	r2, [r7, #2]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d34:	e003      	b.n	8005d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d36:	887b      	ldrh	r3, [r7, #2]
 8005d38:	041a      	lsls	r2, r3, #16
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	619a      	str	r2, [r3, #24]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e07f      	b.n	8005e5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb fc60 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2224      	movs	r2, #36	; 0x24
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e006      	b.n	8005dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d104      	bne.n	8005de6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_I2C_Init+0x11c>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	02008000 	.word	0x02008000

08005e6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	461a      	mov	r2, r3
 8005e78:	460b      	mov	r3, r1
 8005e7a:	817b      	strh	r3, [r7, #10]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	f040 80da 	bne.w	8006042 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_I2C_Master_Transmit+0x30>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e0d3      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fc f9e0 	bl	8002268 <HAL_GetTick>
 8005ea8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	2319      	movs	r3, #25
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9e6 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0be      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2221      	movs	r2, #33	; 0x21
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	893a      	ldrh	r2, [r7, #8]
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2bff      	cmp	r3, #255	; 0xff
 8005ef6:	d90e      	bls.n	8005f16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	22ff      	movs	r2, #255	; 0xff
 8005efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	8979      	ldrh	r1, [r7, #10]
 8005f06:	4b51      	ldr	r3, [pc, #324]	; (800604c <HAL_I2C_Master_Transmit+0x1e0>)
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fbf6 	bl	8006700 <I2C_TransferConfig>
 8005f14:	e06c      	b.n	8005ff0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	8979      	ldrh	r1, [r7, #10]
 8005f28:	4b48      	ldr	r3, [pc, #288]	; (800604c <HAL_I2C_Master_Transmit+0x1e0>)
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fbe5 	bl	8006700 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f36:	e05b      	b.n	8005ff0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	6a39      	ldr	r1, [r7, #32]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f9f2 	bl	8006326 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e07b      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d034      	beq.n	8005ff0 <HAL_I2C_Master_Transmit+0x184>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d130      	bne.n	8005ff0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f975 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e04d      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d90e      	bls.n	8005fd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	8979      	ldrh	r1, [r7, #10]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fb99 	bl	8006700 <I2C_TransferConfig>
 8005fce:	e00f      	b.n	8005ff0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fb88 	bl	8006700 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d19e      	bne.n	8005f38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f9d8 	bl	80063b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e01a      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2220      	movs	r2, #32
 8006014:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_I2C_Master_Transmit+0x1e4>)
 8006022:	400b      	ands	r3, r1
 8006024:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e000      	b.n	8006044 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
  }
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	80002000 	.word	0x80002000
 8006050:	fe00e800 	.word	0xfe00e800

08006054 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	461a      	mov	r2, r3
 8006060:	460b      	mov	r3, r1
 8006062:	817b      	strh	r3, [r7, #10]
 8006064:	4613      	mov	r3, r2
 8006066:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b20      	cmp	r3, #32
 8006072:	f040 80db 	bne.w	800622c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_I2C_Master_Receive+0x30>
 8006080:	2302      	movs	r3, #2
 8006082:	e0d4      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800608c:	f7fc f8ec 	bl	8002268 <HAL_GetTick>
 8006090:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2319      	movs	r3, #25
 8006098:	2201      	movs	r2, #1
 800609a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f8f2 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0bf      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2222      	movs	r2, #34	; 0x22
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2210      	movs	r2, #16
 80060ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	893a      	ldrh	r2, [r7, #8]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2bff      	cmp	r3, #255	; 0xff
 80060de:	d90e      	bls.n	80060fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	22ff      	movs	r2, #255	; 0xff
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	8979      	ldrh	r1, [r7, #10]
 80060ee:	4b52      	ldr	r3, [pc, #328]	; (8006238 <HAL_I2C_Master_Receive+0x1e4>)
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 fb02 	bl	8006700 <I2C_TransferConfig>
 80060fc:	e06d      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	4b49      	ldr	r3, [pc, #292]	; (8006238 <HAL_I2C_Master_Receive+0x1e4>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 faf1 	bl	8006700 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800611e:	e05c      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	6a39      	ldr	r1, [r7, #32]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f989 	bl	800643c <I2C_WaitOnRXNEFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e07c      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d034      	beq.n	80061da <HAL_I2C_Master_Receive+0x186>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d130      	bne.n	80061da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f880 	bl	8006288 <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e04d      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	2bff      	cmp	r3, #255	; 0xff
 800619a:	d90e      	bls.n	80061ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	8979      	ldrh	r1, [r7, #10]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 faa4 	bl	8006700 <I2C_TransferConfig>
 80061b8:	e00f      	b.n	80061da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	8979      	ldrh	r1, [r7, #10]
 80061cc:	2300      	movs	r3, #0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fa93 	bl	8006700 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d19d      	bne.n	8006120 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	6a39      	ldr	r1, [r7, #32]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f8e3 	bl	80063b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01a      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2220      	movs	r2, #32
 80061fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b0c      	ldr	r3, [pc, #48]	; (800623c <HAL_I2C_Master_Receive+0x1e8>)
 800620c:	400b      	ands	r3, r1
 800620e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	80002400 	.word	0x80002400
 800623c:	fe00e800 	.word	0xfe00e800

08006240 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d103      	bne.n	800625e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d007      	beq.n	800627c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	619a      	str	r2, [r3, #24]
  }
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006298:	e031      	b.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d02d      	beq.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fb ffe1 	bl	8002268 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d122      	bne.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4013      	ands	r3, r2
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	bf0c      	ite	eq
 80062c8:	2301      	moveq	r3, #1
 80062ca:	2300      	movne	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d113      	bne.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e00f      	b.n	800631e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	429a      	cmp	r2, r3
 800631a:	d0be      	beq.n	800629a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006332:	e033      	b.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f901 	bl	8006540 <I2C_IsErrorOccurred>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e031      	b.n	80063ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d025      	beq.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006350:	f7fb ff8a 	bl	8002268 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11a      	bne.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b02      	cmp	r3, #2
 8006372:	d013      	beq.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e007      	b.n	80063ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d1c4      	bne.n	8006334 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063c0:	e02f      	b.n	8006422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f8ba 	bl	8006540 <I2C_IsErrorOccurred>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e02d      	b.n	8006432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fb ff47 	bl	8002268 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11a      	bne.n	8006422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d013      	beq.n	8006422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e007      	b.n	8006432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d1c8      	bne.n	80063c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006448:	e06b      	b.n	8006522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f876 	bl	8006540 <I2C_IsErrorOccurred>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e069      	b.n	8006532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d138      	bne.n	80064de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b04      	cmp	r3, #4
 8006478:	d105      	bne.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e055      	b.n	8006532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b10      	cmp	r3, #16
 8006492:	d107      	bne.n	80064a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2210      	movs	r2, #16
 800649a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2204      	movs	r2, #4
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
 80064a2:	e002      	b.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2220      	movs	r2, #32
 80064b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b1f      	ldr	r3, [pc, #124]	; (800653c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80064be:	400b      	ands	r3, r1
 80064c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e029      	b.n	8006532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fb fec3 	bl	8002268 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d116      	bne.n	8006522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d00f      	beq.n	8006522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e007      	b.n	8006532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d18c      	bne.n	800644a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	fe00e800 	.word	0xfe00e800

08006540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d068      	beq.n	800663e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006574:	e049      	b.n	800660a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d045      	beq.n	800660a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fb fe73 	bl	8002268 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_IsErrorOccurred+0x54>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d13a      	bne.n	800660a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b6:	d121      	bne.n	80065fc <I2C_IsErrorOccurred+0xbc>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065be:	d01d      	beq.n	80065fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065c0:	7cfb      	ldrb	r3, [r7, #19]
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d01a      	beq.n	80065fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065d6:	f7fb fe47 	bl	8002268 <HAL_GetTick>
 80065da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065dc:	e00e      	b.n	80065fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065de:	f7fb fe43 	bl	8002268 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b19      	cmp	r3, #25
 80065ea:	d907      	bls.n	80065fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f043 0320 	orr.w	r3, r3, #32
 80065f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80065fa:	e006      	b.n	800660a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d1e9      	bne.n	80065de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b20      	cmp	r3, #32
 8006616:	d003      	beq.n	8006620 <I2C_IsErrorOccurred+0xe0>
 8006618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0aa      	beq.n	8006576 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2220      	movs	r2, #32
 800662e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f043 0308 	orr.w	r3, r3, #8
 8006678:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	f043 0302 	orr.w	r3, r3, #2
 800669a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01c      	beq.n	80066ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fdc3 	bl	8006240 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6859      	ldr	r1, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <I2C_IsErrorOccurred+0x1bc>)
 80066c6:	400b      	ands	r3, r1
 80066c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	fe00e800 	.word	0xfe00e800

08006700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	817b      	strh	r3, [r7, #10]
 800670e:	4613      	mov	r3, r2
 8006710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006718:	7a7b      	ldrb	r3, [r7, #9]
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006720:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	4313      	orrs	r3, r2
 800672a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800672e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	0d5b      	lsrs	r3, r3, #21
 800673a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800673e:	4b08      	ldr	r3, [pc, #32]	; (8006760 <I2C_TransferConfig+0x60>)
 8006740:	430b      	orrs	r3, r1
 8006742:	43db      	mvns	r3, r3
 8006744:	ea02 0103 	and.w	r1, r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	03ff63ff 	.word	0x03ff63ff

08006764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b20      	cmp	r3, #32
 8006778:	d138      	bne.n	80067ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006784:	2302      	movs	r3, #2
 8006786:	e032      	b.n	80067ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	; 0x24
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b20      	cmp	r3, #32
 800680e:	d139      	bne.n	8006884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800681a:	2302      	movs	r3, #2
 800681c:	e033      	b.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2224      	movs	r2, #36	; 0x24
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800684c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e000      	b.n	8006886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006884:	2302      	movs	r3, #2
  }
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800689e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80068ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	4906      	ldr	r1, [pc, #24]	; (80068d8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	604b      	str	r3, [r1, #4]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	58024400 	.word	0x58024400
 80068d8:	58000400 	.word	0x58000400

080068dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068de:	b08f      	sub	sp, #60	; 0x3c
 80068e0:	af0a      	add	r7, sp, #40	; 0x28
 80068e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e116      	b.n	8006b1c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fb fbb7 	bl	800207c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2203      	movs	r2, #3
 8006912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f006 fa87 	bl	800ce40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	687e      	ldr	r6, [r7, #4]
 800693a:	466d      	mov	r5, sp
 800693c:	f106 0410 	add.w	r4, r6, #16
 8006940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006948:	e894 0003 	ldmia.w	r4, {r0, r1}
 800694c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006950:	1d33      	adds	r3, r6, #4
 8006952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	f006 fa05 	bl	800cd64 <USB_CoreInit>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0d7      	b.n	8006b1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f006 fa75 	bl	800ce62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
 800697c:	e04a      	b.n	8006a14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	333d      	adds	r3, #61	; 0x3d
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	333c      	adds	r3, #60	; 0x3c
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069a6:	7bfa      	ldrb	r2, [r7, #15]
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
 80069aa:	b298      	uxth	r0, r3
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	3356      	adds	r3, #86	; 0x56
 80069ba:	4602      	mov	r2, r0
 80069bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069be:	7bfa      	ldrb	r2, [r7, #15]
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3340      	adds	r3, #64	; 0x40
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069d2:	7bfa      	ldrb	r2, [r7, #15]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3344      	adds	r3, #68	; 0x44
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069e6:	7bfa      	ldrb	r2, [r7, #15]
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3348      	adds	r3, #72	; 0x48
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80069fa:	7bfa      	ldrb	r2, [r7, #15]
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	4613      	mov	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	334c      	adds	r3, #76	; 0x4c
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	3301      	adds	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	7bfa      	ldrb	r2, [r7, #15]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3af      	bcc.n	800697e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
 8006a22:	e044      	b.n	8006aae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a24:	7bfa      	ldrb	r2, [r7, #15]
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006a4c:	7bfa      	ldrb	r2, [r7, #15]
 8006a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a66:	7bfa      	ldrb	r2, [r7, #15]
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a7c:	7bfa      	ldrb	r2, [r7, #15]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3b5      	bcc.n	8006a24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	687e      	ldr	r6, [r7, #4]
 8006ac0:	466d      	mov	r5, sp
 8006ac2:	f106 0410 	add.w	r4, r6, #16
 8006ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ad2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ad6:	1d33      	adds	r3, r6, #4
 8006ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ada:	6838      	ldr	r0, [r7, #0]
 8006adc:	f006 fa0e 	bl	800cefc <USB_DevInit>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e014      	b.n	8006b1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d102      	bne.n	8006b10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f80a 	bl	8006b24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f006 fbcc 	bl	800d2b2 <USB_DevDisconnect>

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	10000003 	.word	0x10000003

08006b6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <HAL_PWREx_ConfigSupply+0x70>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d00a      	beq.n	8006b96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b80:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <HAL_PWREx_ConfigSupply+0x70>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d001      	beq.n	8006b92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e01f      	b.n	8006bd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e01d      	b.n	8006bd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <HAL_PWREx_ConfigSupply+0x70>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f023 0207 	bic.w	r2, r3, #7
 8006b9e:	490f      	ldr	r1, [pc, #60]	; (8006bdc <HAL_PWREx_ConfigSupply+0x70>)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ba6:	f7fb fb5f 	bl	8002268 <HAL_GetTick>
 8006baa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bac:	e009      	b.n	8006bc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bae:	f7fb fb5b 	bl	8002268 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbc:	d901      	bls.n	8006bc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e007      	b.n	8006bd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_PWREx_ConfigSupply+0x70>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	d1ee      	bne.n	8006bae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	58024800 	.word	0x58024800

08006be0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bee:	60d3      	str	r3, [r2, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	58024800 	.word	0x58024800

08006c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f000 bc48 	b.w	80074a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8088 	beq.w	8006d32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c22:	4b99      	ldr	r3, [pc, #612]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c2c:	4b96      	ldr	r3, [pc, #600]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d007      	beq.n	8006c48 <HAL_RCC_OscConfig+0x48>
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	2b18      	cmp	r3, #24
 8006c3c:	d111      	bne.n	8006c62 <HAL_RCC_OscConfig+0x62>
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d10c      	bne.n	8006c62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c48:	4b8f      	ldr	r3, [pc, #572]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d06d      	beq.n	8006d30 <HAL_RCC_OscConfig+0x130>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d169      	bne.n	8006d30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f000 bc21 	b.w	80074a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d106      	bne.n	8006c7a <HAL_RCC_OscConfig+0x7a>
 8006c6c:	4b86      	ldr	r3, [pc, #536]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a85      	ldr	r2, [pc, #532]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	e02e      	b.n	8006cd8 <HAL_RCC_OscConfig+0xd8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCC_OscConfig+0x9c>
 8006c82:	4b81      	ldr	r3, [pc, #516]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a80      	ldr	r2, [pc, #512]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	4b7e      	ldr	r3, [pc, #504]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7d      	ldr	r2, [pc, #500]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	e01d      	b.n	8006cd8 <HAL_RCC_OscConfig+0xd8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCC_OscConfig+0xc0>
 8006ca6:	4b78      	ldr	r3, [pc, #480]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a77      	ldr	r2, [pc, #476]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	4b75      	ldr	r3, [pc, #468]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a74      	ldr	r2, [pc, #464]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e00b      	b.n	8006cd8 <HAL_RCC_OscConfig+0xd8>
 8006cc0:	4b71      	ldr	r3, [pc, #452]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a70      	ldr	r2, [pc, #448]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4b6e      	ldr	r3, [pc, #440]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a6d      	ldr	r2, [pc, #436]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d013      	beq.n	8006d08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fb fac2 	bl	8002268 <HAL_GetTick>
 8006ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce8:	f7fb fabe 	bl	8002268 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b64      	cmp	r3, #100	; 0x64
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e3d4      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cfa:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0f0      	beq.n	8006ce8 <HAL_RCC_OscConfig+0xe8>
 8006d06:	e014      	b.n	8006d32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fb faae 	bl	8002268 <HAL_GetTick>
 8006d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d10:	f7fb faaa 	bl	8002268 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b64      	cmp	r3, #100	; 0x64
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e3c0      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d22:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x110>
 8006d2e:	e000      	b.n	8006d32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80ca 	beq.w	8006ed4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d40:	4b51      	ldr	r3, [pc, #324]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d4a:	4b4f      	ldr	r3, [pc, #316]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_RCC_OscConfig+0x166>
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2b18      	cmp	r3, #24
 8006d5a:	d156      	bne.n	8006e0a <HAL_RCC_OscConfig+0x20a>
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d151      	bne.n	8006e0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d66:	4b48      	ldr	r3, [pc, #288]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_RCC_OscConfig+0x17e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e392      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d7e:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f023 0219 	bic.w	r2, r3, #25
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	493f      	ldr	r1, [pc, #252]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fb fa6a 	bl	8002268 <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d98:	f7fb fa66 	bl	8002268 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e37c      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006daa:	4b37      	ldr	r3, [pc, #220]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db6:	f7fb fa87 	bl	80022c8 <HAL_GetREVID>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d817      	bhi.n	8006df4 <HAL_RCC_OscConfig+0x1f4>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d108      	bne.n	8006dde <HAL_RCC_OscConfig+0x1de>
 8006dcc:	4b2e      	ldr	r3, [pc, #184]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ddc:	e07a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dde:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	031b      	lsls	r3, r3, #12
 8006dec:	4926      	ldr	r1, [pc, #152]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006df2:	e06f      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df4:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	061b      	lsls	r3, r3, #24
 8006e02:	4921      	ldr	r1, [pc, #132]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e08:	e064      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d047      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e12:	4b1d      	ldr	r3, [pc, #116]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 0219 	bic.w	r2, r3, #25
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	491a      	ldr	r1, [pc, #104]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fb fa20 	bl	8002268 <HAL_GetTick>
 8006e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e2c:	f7fb fa1c 	bl	8002268 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e332      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4a:	f7fb fa3d 	bl	80022c8 <HAL_GetREVID>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d819      	bhi.n	8006e8c <HAL_RCC_OscConfig+0x28c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d108      	bne.n	8006e72 <HAL_RCC_OscConfig+0x272>
 8006e60:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e68:	4a07      	ldr	r2, [pc, #28]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6e:	6053      	str	r3, [r2, #4]
 8006e70:	e030      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	031b      	lsls	r3, r3, #12
 8006e80:	4901      	ldr	r1, [pc, #4]	; (8006e88 <HAL_RCC_OscConfig+0x288>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	604b      	str	r3, [r1, #4]
 8006e86:	e025      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
 8006e88:	58024400 	.word	0x58024400
 8006e8c:	4b9a      	ldr	r3, [pc, #616]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	061b      	lsls	r3, r3, #24
 8006e9a:	4997      	ldr	r1, [pc, #604]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	604b      	str	r3, [r1, #4]
 8006ea0:	e018      	b.n	8006ed4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ea2:	4b95      	ldr	r3, [pc, #596]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a94      	ldr	r2, [pc, #592]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fb f9db 	bl	8002268 <HAL_GetTick>
 8006eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb6:	f7fb f9d7 	bl	8002268 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e2ed      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ec8:	4b8b      	ldr	r3, [pc, #556]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f0      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 80a9 	beq.w	8007034 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee2:	4b85      	ldr	r3, [pc, #532]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006eec:	4b82      	ldr	r3, [pc, #520]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d007      	beq.n	8006f08 <HAL_RCC_OscConfig+0x308>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b18      	cmp	r3, #24
 8006efc:	d13a      	bne.n	8006f74 <HAL_RCC_OscConfig+0x374>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d135      	bne.n	8006f74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f08:	4b7b      	ldr	r3, [pc, #492]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCC_OscConfig+0x320>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e2c1      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f20:	f7fb f9d2 	bl	80022c8 <HAL_GetREVID>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d817      	bhi.n	8006f5e <HAL_RCC_OscConfig+0x35e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d108      	bne.n	8006f48 <HAL_RCC_OscConfig+0x348>
 8006f36:	4b70      	ldr	r3, [pc, #448]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f3e:	4a6e      	ldr	r2, [pc, #440]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f46:	e075      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f48:	4b6b      	ldr	r3, [pc, #428]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	069b      	lsls	r3, r3, #26
 8006f56:	4968      	ldr	r1, [pc, #416]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f5c:	e06a      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f5e:	4b66      	ldr	r3, [pc, #408]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	4962      	ldr	r1, [pc, #392]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f72:	e05f      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d042      	beq.n	8007002 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f7c:	4b5e      	ldr	r3, [pc, #376]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5d      	ldr	r2, [pc, #372]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fb f96e 	bl	8002268 <HAL_GetTick>
 8006f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f90:	f7fb f96a 	bl	8002268 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e280      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006fa2:	4b55      	ldr	r3, [pc, #340]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fae:	f7fb f98b 	bl	80022c8 <HAL_GetREVID>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d817      	bhi.n	8006fec <HAL_RCC_OscConfig+0x3ec>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d108      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x3d6>
 8006fc4:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fcc:	4a4a      	ldr	r2, [pc, #296]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fd2:	6053      	str	r3, [r2, #4]
 8006fd4:	e02e      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
 8006fd6:	4b48      	ldr	r3, [pc, #288]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	069b      	lsls	r3, r3, #26
 8006fe4:	4944      	ldr	r1, [pc, #272]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	604b      	str	r3, [r1, #4]
 8006fea:	e023      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
 8006fec:	4b42      	ldr	r3, [pc, #264]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	493f      	ldr	r1, [pc, #252]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60cb      	str	r3, [r1, #12]
 8007000:	e018      	b.n	8007034 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007002:	4b3d      	ldr	r3, [pc, #244]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a3c      	ldr	r2, [pc, #240]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8007008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700e:	f7fb f92b 	bl	8002268 <HAL_GetTick>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007016:	f7fb f927 	bl	8002268 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e23d      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007028:	4b33      	ldr	r3, [pc, #204]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f0      	bne.n	8007016 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d036      	beq.n	80070ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d019      	beq.n	800707c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007048:	4b2b      	ldr	r3, [pc, #172]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 800704a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704c:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007054:	f7fb f908 	bl	8002268 <HAL_GetTick>
 8007058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800705c:	f7fb f904 	bl	8002268 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e21a      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800706e:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8007070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x45c>
 800707a:	e018      	b.n	80070ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800707c:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 800707e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007080:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fb f8ee 	bl	8002268 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007090:	f7fb f8ea 	bl	8002268 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e200      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 80070a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d039      	beq.n	800712e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01c      	beq.n	80070fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a0c      	ldr	r2, [pc, #48]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 80070c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070ce:	f7fb f8cb 	bl	8002268 <HAL_GetTick>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070d6:	f7fb f8c7 	bl	8002268 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e1dd      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <HAL_RCC_OscConfig+0x4f8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0f0      	beq.n	80070d6 <HAL_RCC_OscConfig+0x4d6>
 80070f4:	e01b      	b.n	800712e <HAL_RCC_OscConfig+0x52e>
 80070f6:	bf00      	nop
 80070f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070fc:	4b9b      	ldr	r3, [pc, #620]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a9a      	ldr	r2, [pc, #616]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007106:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007108:	f7fb f8ae 	bl	8002268 <HAL_GetTick>
 800710c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007110:	f7fb f8aa 	bl	8002268 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e1c0      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007122:	4b92      	ldr	r3, [pc, #584]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f0      	bne.n	8007110 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8081 	beq.w	800723e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800713c:	4b8c      	ldr	r3, [pc, #560]	; (8007370 <HAL_RCC_OscConfig+0x770>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a8b      	ldr	r2, [pc, #556]	; (8007370 <HAL_RCC_OscConfig+0x770>)
 8007142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007148:	f7fb f88e 	bl	8002268 <HAL_GetTick>
 800714c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007150:	f7fb f88a 	bl	8002268 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e1a0      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007162:	4b83      	ldr	r3, [pc, #524]	; (8007370 <HAL_RCC_OscConfig+0x770>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0f0      	beq.n	8007150 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d106      	bne.n	8007184 <HAL_RCC_OscConfig+0x584>
 8007176:	4b7d      	ldr	r3, [pc, #500]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717a:	4a7c      	ldr	r2, [pc, #496]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	6713      	str	r3, [r2, #112]	; 0x70
 8007182:	e02d      	b.n	80071e0 <HAL_RCC_OscConfig+0x5e0>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10c      	bne.n	80071a6 <HAL_RCC_OscConfig+0x5a6>
 800718c:	4b77      	ldr	r3, [pc, #476]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	4a76      	ldr	r2, [pc, #472]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	6713      	str	r3, [r2, #112]	; 0x70
 8007198:	4b74      	ldr	r3, [pc, #464]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719c:	4a73      	ldr	r2, [pc, #460]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800719e:	f023 0304 	bic.w	r3, r3, #4
 80071a2:	6713      	str	r3, [r2, #112]	; 0x70
 80071a4:	e01c      	b.n	80071e0 <HAL_RCC_OscConfig+0x5e0>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCC_OscConfig+0x5c8>
 80071ae:	4b6f      	ldr	r3, [pc, #444]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	4a6e      	ldr	r2, [pc, #440]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071b4:	f043 0304 	orr.w	r3, r3, #4
 80071b8:	6713      	str	r3, [r2, #112]	; 0x70
 80071ba:	4b6c      	ldr	r3, [pc, #432]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071be:	4a6b      	ldr	r2, [pc, #428]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071c0:	f043 0301 	orr.w	r3, r3, #1
 80071c4:	6713      	str	r3, [r2, #112]	; 0x70
 80071c6:	e00b      	b.n	80071e0 <HAL_RCC_OscConfig+0x5e0>
 80071c8:	4b68      	ldr	r3, [pc, #416]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071cc:	4a67      	ldr	r2, [pc, #412]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071ce:	f023 0301 	bic.w	r3, r3, #1
 80071d2:	6713      	str	r3, [r2, #112]	; 0x70
 80071d4:	4b65      	ldr	r3, [pc, #404]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d8:	4a64      	ldr	r2, [pc, #400]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80071da:	f023 0304 	bic.w	r3, r3, #4
 80071de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d015      	beq.n	8007214 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e8:	f7fb f83e 	bl	8002268 <HAL_GetTick>
 80071ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071ee:	e00a      	b.n	8007206 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f0:	f7fb f83a 	bl	8002268 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fe:	4293      	cmp	r3, r2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e14e      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007206:	4b59      	ldr	r3, [pc, #356]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0ee      	beq.n	80071f0 <HAL_RCC_OscConfig+0x5f0>
 8007212:	e014      	b.n	800723e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007214:	f7fb f828 	bl	8002268 <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800721a:	e00a      	b.n	8007232 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721c:	f7fb f824 	bl	8002268 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	f241 3288 	movw	r2, #5000	; 0x1388
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e138      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007232:	4b4e      	ldr	r3, [pc, #312]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1ee      	bne.n	800721c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 812d 	beq.w	80074a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007248:	4b48      	ldr	r3, [pc, #288]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007250:	2b18      	cmp	r3, #24
 8007252:	f000 80bd 	beq.w	80073d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b02      	cmp	r3, #2
 800725c:	f040 809e 	bne.w	800739c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007260:	4b42      	ldr	r3, [pc, #264]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a41      	ldr	r2, [pc, #260]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800726a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fa fffc 	bl	8002268 <HAL_GetTick>
 8007270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007274:	f7fa fff8 	bl	8002268 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e10e      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007292:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007296:	4b37      	ldr	r3, [pc, #220]	; (8007374 <HAL_RCC_OscConfig+0x774>)
 8007298:	4013      	ands	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072a2:	0112      	lsls	r2, r2, #4
 80072a4:	430a      	orrs	r2, r1
 80072a6:	4931      	ldr	r1, [pc, #196]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	628b      	str	r3, [r1, #40]	; 0x28
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	3b01      	subs	r3, #1
 80072b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	3b01      	subs	r3, #1
 80072bc:	025b      	lsls	r3, r3, #9
 80072be:	b29b      	uxth	r3, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	3b01      	subs	r3, #1
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	3b01      	subs	r3, #1
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072dc:	4923      	ldr	r1, [pc, #140]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80072e2:	4b22      	ldr	r3, [pc, #136]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	4a21      	ldr	r2, [pc, #132]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_RCC_OscConfig+0x778>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072fa:	00d2      	lsls	r2, r2, #3
 80072fc:	491b      	ldr	r1, [pc, #108]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007302:	4b1a      	ldr	r3, [pc, #104]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f023 020c 	bic.w	r2, r3, #12
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	4917      	ldr	r1, [pc, #92]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007310:	4313      	orrs	r3, r2
 8007312:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	f023 0202 	bic.w	r2, r3, #2
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007320:	4912      	ldr	r1, [pc, #72]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	4a10      	ldr	r2, [pc, #64]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4a0d      	ldr	r2, [pc, #52]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	4a0a      	ldr	r2, [pc, #40]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007348:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	4a07      	ldr	r2, [pc, #28]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <HAL_RCC_OscConfig+0x76c>)
 800735c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007362:	f7fa ff81 	bl	8002268 <HAL_GetTick>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007368:	e011      	b.n	800738e <HAL_RCC_OscConfig+0x78e>
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	58024800 	.word	0x58024800
 8007374:	fffffc0c 	.word	0xfffffc0c
 8007378:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737c:	f7fa ff74 	bl	8002268 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e08a      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800738e:	4b47      	ldr	r3, [pc, #284]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x77c>
 800739a:	e082      	b.n	80074a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739c:	4b43      	ldr	r3, [pc, #268]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a42      	ldr	r2, [pc, #264]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 80073a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fa ff5e 	bl	8002268 <HAL_GetTick>
 80073ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b0:	f7fa ff5a 	bl	8002268 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e070      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073c2:	4b3a      	ldr	r3, [pc, #232]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x7b0>
 80073ce:	e068      	b.n	80074a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073d0:	4b36      	ldr	r3, [pc, #216]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073d6:	4b35      	ldr	r3, [pc, #212]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d031      	beq.n	8007448 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f003 0203 	and.w	r2, r3, #3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d12a      	bne.n	8007448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d122      	bne.n	8007448 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800740e:	429a      	cmp	r2, r3
 8007410:	d11a      	bne.n	8007448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	0a5b      	lsrs	r3, r3, #9
 8007416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d111      	bne.n	8007448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007432:	429a      	cmp	r2, r3
 8007434:	d108      	bne.n	8007448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	0e1b      	lsrs	r3, r3, #24
 800743a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007442:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e02b      	b.n	80074a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800744c:	4b17      	ldr	r3, [pc, #92]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007456:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	429a      	cmp	r2, r3
 8007460:	d01f      	beq.n	80074a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007462:	4b12      	ldr	r3, [pc, #72]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a11      	ldr	r2, [pc, #68]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800746e:	f7fa fefb 	bl	8002268 <HAL_GetTick>
 8007472:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007474:	bf00      	nop
 8007476:	f7fa fef7 	bl	8002268 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	4293      	cmp	r3, r2
 8007480:	d0f9      	beq.n	8007476 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007486:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <HAL_RCC_OscConfig+0x8b0>)
 8007488:	4013      	ands	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800748e:	00d2      	lsls	r2, r2, #3
 8007490:	4906      	ldr	r1, [pc, #24]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007492:	4313      	orrs	r3, r2
 8007494:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a04      	ldr	r2, [pc, #16]	; (80074ac <HAL_RCC_OscConfig+0x8ac>)
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3730      	adds	r7, #48	; 0x30
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	58024400 	.word	0x58024400
 80074b0:	ffff0007 	.word	0xffff0007

080074b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e19c      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074c8:	4b8a      	ldr	r3, [pc, #552]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d910      	bls.n	80074f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074d6:	4b87      	ldr	r3, [pc, #540]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f023 020f 	bic.w	r2, r3, #15
 80074de:	4985      	ldr	r1, [pc, #532]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e6:	4b83      	ldr	r3, [pc, #524]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d001      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e184      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d010      	beq.n	8007526 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	4b7b      	ldr	r3, [pc, #492]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007510:	429a      	cmp	r2, r3
 8007512:	d908      	bls.n	8007526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007514:	4b78      	ldr	r3, [pc, #480]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	4975      	ldr	r1, [pc, #468]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007522:	4313      	orrs	r3, r2
 8007524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d010      	beq.n	8007554 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	4b70      	ldr	r3, [pc, #448]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800753e:	429a      	cmp	r2, r3
 8007540:	d908      	bls.n	8007554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007542:	4b6d      	ldr	r3, [pc, #436]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	496a      	ldr	r1, [pc, #424]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007550:	4313      	orrs	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b00      	cmp	r3, #0
 800755e:	d010      	beq.n	8007582 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	4b64      	ldr	r3, [pc, #400]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800756c:	429a      	cmp	r2, r3
 800756e:	d908      	bls.n	8007582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007570:	4b61      	ldr	r3, [pc, #388]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	495e      	ldr	r1, [pc, #376]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 800757e:	4313      	orrs	r3, r2
 8007580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800759a:	429a      	cmp	r2, r3
 800759c:	d908      	bls.n	80075b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800759e:	4b56      	ldr	r3, [pc, #344]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4953      	ldr	r1, [pc, #332]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	4b4d      	ldr	r3, [pc, #308]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d908      	bls.n	80075de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075cc:	4b4a      	ldr	r3, [pc, #296]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f023 020f 	bic.w	r2, r3, #15
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	4947      	ldr	r1, [pc, #284]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d055      	beq.n	8007696 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075ea:	4b43      	ldr	r3, [pc, #268]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	4940      	ldr	r1, [pc, #256]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d107      	bne.n	8007614 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007604:	4b3c      	ldr	r3, [pc, #240]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d121      	bne.n	8007654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e0f6      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d107      	bne.n	800762c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800761c:	4b36      	ldr	r3, [pc, #216]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d115      	bne.n	8007654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0ea      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d107      	bne.n	8007644 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007634:	4b30      	ldr	r3, [pc, #192]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e0de      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007644:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0d6      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007654:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f023 0207 	bic.w	r2, r3, #7
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4925      	ldr	r1, [pc, #148]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007662:	4313      	orrs	r3, r2
 8007664:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007666:	f7fa fdff 	bl	8002268 <HAL_GetTick>
 800766a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766c:	e00a      	b.n	8007684 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800766e:	f7fa fdfb 	bl	8002268 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f241 3288 	movw	r2, #5000	; 0x1388
 800767c:	4293      	cmp	r3, r2
 800767e:	d901      	bls.n	8007684 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e0be      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007684:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	429a      	cmp	r2, r3
 8007694:	d1eb      	bne.n	800766e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d010      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d208      	bcs.n	80076c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b2:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f023 020f 	bic.w	r2, r3, #15
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	490e      	ldr	r1, [pc, #56]	; (80076f8 <HAL_RCC_ClockConfig+0x244>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d214      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f023 020f 	bic.w	r2, r3, #15
 80076da:	4906      	ldr	r1, [pc, #24]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e2:	4b04      	ldr	r3, [pc, #16]	; (80076f4 <HAL_RCC_ClockConfig+0x240>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d005      	beq.n	80076fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e086      	b.n	8007802 <HAL_RCC_ClockConfig+0x34e>
 80076f4:	52002000 	.word	0x52002000
 80076f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d010      	beq.n	800772a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	4b3f      	ldr	r3, [pc, #252]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007714:	429a      	cmp	r2, r3
 8007716:	d208      	bcs.n	800772a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007718:	4b3c      	ldr	r3, [pc, #240]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	4939      	ldr	r1, [pc, #228]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007726:	4313      	orrs	r3, r2
 8007728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d010      	beq.n	8007758 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	4b34      	ldr	r3, [pc, #208]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007742:	429a      	cmp	r2, r3
 8007744:	d208      	bcs.n	8007758 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007746:	4b31      	ldr	r3, [pc, #196]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	492e      	ldr	r1, [pc, #184]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007754:	4313      	orrs	r3, r2
 8007756:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b00      	cmp	r3, #0
 8007762:	d010      	beq.n	8007786 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699a      	ldr	r2, [r3, #24]
 8007768:	4b28      	ldr	r3, [pc, #160]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007770:	429a      	cmp	r2, r3
 8007772:	d208      	bcs.n	8007786 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007774:	4b25      	ldr	r3, [pc, #148]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	4922      	ldr	r1, [pc, #136]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007782:	4313      	orrs	r3, r2
 8007784:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d010      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69da      	ldr	r2, [r3, #28]
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800779e:	429a      	cmp	r2, r3
 80077a0:	d208      	bcs.n	80077b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077a2:	4b1a      	ldr	r3, [pc, #104]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4917      	ldr	r1, [pc, #92]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077b4:	f000 f834 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80077b8:	4602      	mov	r2, r0
 80077ba:	4b14      	ldr	r3, [pc, #80]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	4912      	ldr	r1, [pc, #72]	; (8007810 <HAL_RCC_ClockConfig+0x35c>)
 80077c6:	5ccb      	ldrb	r3, [r1, r3]
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077d2:	4b0e      	ldr	r3, [pc, #56]	; (800780c <HAL_RCC_ClockConfig+0x358>)
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <HAL_RCC_ClockConfig+0x35c>)
 80077dc:	5cd3      	ldrb	r3, [r2, r3]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
 80077e8:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <HAL_RCC_ClockConfig+0x360>)
 80077ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077ec:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <HAL_RCC_ClockConfig+0x364>)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077f2:	4b0a      	ldr	r3, [pc, #40]	; (800781c <HAL_RCC_ClockConfig+0x368>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fa f864 	bl	80018c4 <HAL_InitTick>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	58024400 	.word	0x58024400
 8007810:	08020e74 	.word	0x08020e74
 8007814:	24000004 	.word	0x24000004
 8007818:	24000000 	.word	0x24000000
 800781c:	24000008 	.word	0x24000008

08007820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007820:	b480      	push	{r7}
 8007822:	b089      	sub	sp, #36	; 0x24
 8007824:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007826:	4bb3      	ldr	r3, [pc, #716]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800782e:	2b18      	cmp	r3, #24
 8007830:	f200 8155 	bhi.w	8007ade <HAL_RCC_GetSysClockFreq+0x2be>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	080078a1 	.word	0x080078a1
 8007840:	08007adf 	.word	0x08007adf
 8007844:	08007adf 	.word	0x08007adf
 8007848:	08007adf 	.word	0x08007adf
 800784c:	08007adf 	.word	0x08007adf
 8007850:	08007adf 	.word	0x08007adf
 8007854:	08007adf 	.word	0x08007adf
 8007858:	08007adf 	.word	0x08007adf
 800785c:	080078c7 	.word	0x080078c7
 8007860:	08007adf 	.word	0x08007adf
 8007864:	08007adf 	.word	0x08007adf
 8007868:	08007adf 	.word	0x08007adf
 800786c:	08007adf 	.word	0x08007adf
 8007870:	08007adf 	.word	0x08007adf
 8007874:	08007adf 	.word	0x08007adf
 8007878:	08007adf 	.word	0x08007adf
 800787c:	080078cd 	.word	0x080078cd
 8007880:	08007adf 	.word	0x08007adf
 8007884:	08007adf 	.word	0x08007adf
 8007888:	08007adf 	.word	0x08007adf
 800788c:	08007adf 	.word	0x08007adf
 8007890:	08007adf 	.word	0x08007adf
 8007894:	08007adf 	.word	0x08007adf
 8007898:	08007adf 	.word	0x08007adf
 800789c:	080078d3 	.word	0x080078d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a0:	4b94      	ldr	r3, [pc, #592]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ac:	4b91      	ldr	r3, [pc, #580]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	08db      	lsrs	r3, r3, #3
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	4a90      	ldr	r2, [pc, #576]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078b8:	fa22 f303 	lsr.w	r3, r2, r3
 80078bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80078be:	e111      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078c0:	4b8d      	ldr	r3, [pc, #564]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078c2:	61bb      	str	r3, [r7, #24]
      break;
 80078c4:	e10e      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80078c6:	4b8d      	ldr	r3, [pc, #564]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078c8:	61bb      	str	r3, [r7, #24]
      break;
 80078ca:	e10b      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80078cc:	4b8c      	ldr	r3, [pc, #560]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078ce:	61bb      	str	r3, [r7, #24]
      break;
 80078d0:	e108      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d2:	4b88      	ldr	r3, [pc, #544]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80078dc:	4b85      	ldr	r3, [pc, #532]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	091b      	lsrs	r3, r3, #4
 80078e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078e8:	4b82      	ldr	r3, [pc, #520]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078f2:	4b80      	ldr	r3, [pc, #512]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	08db      	lsrs	r3, r3, #3
 80078f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80e1 	beq.w	8007ad8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b02      	cmp	r3, #2
 800791a:	f000 8083 	beq.w	8007a24 <HAL_RCC_GetSysClockFreq+0x204>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b02      	cmp	r3, #2
 8007922:	f200 80a1 	bhi.w	8007a68 <HAL_RCC_GetSysClockFreq+0x248>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x114>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d056      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007932:	e099      	b.n	8007a68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007934:	4b6f      	ldr	r3, [pc, #444]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02d      	beq.n	800799c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007940:	4b6c      	ldr	r3, [pc, #432]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	08db      	lsrs	r3, r3, #3
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	4a6b      	ldr	r2, [pc, #428]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
 8007950:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a02 	vldr	s12, [r7, #8]
 800797e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800799a:	e087      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b08 <HAL_RCC_GetSysClockFreq+0x2e8>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b51      	ldr	r3, [pc, #324]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a02 	vldr	s12, [r7, #8]
 80079c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079de:	e065      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2ec>
 80079ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f2:	4b40      	ldr	r3, [pc, #256]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a22:	e043      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b2f      	ldr	r3, [pc, #188]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a66:	e021      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b1e      	ldr	r3, [pc, #120]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007aaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007aac:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	0a5b      	lsrs	r3, r3, #9
 8007ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad0:	ee17 3a90 	vmov	r3, s15
 8007ad4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007ad6:	e005      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61bb      	str	r3, [r7, #24]
      break;
 8007adc:	e002      	b.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ae0:	61bb      	str	r3, [r7, #24]
      break;
 8007ae2:	bf00      	nop
  }

  return sysclockfreq;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3724      	adds	r7, #36	; 0x24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	58024400 	.word	0x58024400
 8007af8:	03d09000 	.word	0x03d09000
 8007afc:	003d0900 	.word	0x003d0900
 8007b00:	007a1200 	.word	0x007a1200
 8007b04:	46000000 	.word	0x46000000
 8007b08:	4c742400 	.word	0x4c742400
 8007b0c:	4a742400 	.word	0x4a742400
 8007b10:	4af42400 	.word	0x4af42400

08007b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b1a:	f7ff fe81 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	0a1b      	lsrs	r3, r3, #8
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	490f      	ldr	r1, [pc, #60]	; (8007b68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b2c:	5ccb      	ldrb	r3, [r1, r3]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	fa22 f303 	lsr.w	r3, r2, r3
 8007b36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b42:	5cd3      	ldrb	r3, [r2, r3]
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	4a07      	ldr	r2, [pc, #28]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b52:	4a07      	ldr	r2, [pc, #28]	; (8007b70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	58024400 	.word	0x58024400
 8007b68:	08020e74 	.word	0x08020e74
 8007b6c:	24000004 	.word	0x24000004
 8007b70:	24000000 	.word	0x24000000

08007b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b78:	f7ff ffcc 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	091b      	lsrs	r3, r3, #4
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	4904      	ldr	r1, [pc, #16]	; (8007b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	08020e74 	.word	0x08020e74

08007ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ba4:	f7ff ffb6 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	08020e74 	.word	0x08020e74

08007bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	223f      	movs	r2, #63	; 0x3f
 8007bda:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 0207 	and.w	r2, r3, #7
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007be8:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007bf4:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c00:	4b11      	ldr	r3, [pc, #68]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c0c:	4b0e      	ldr	r3, [pc, #56]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c18:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <HAL_RCC_GetClockConfig+0x7c>)
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c30:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <HAL_RCC_GetClockConfig+0x80>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 020f 	and.w	r2, r3, #15
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	601a      	str	r2, [r3, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	52002000 	.word	0x52002000

08007c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c54:	b0ca      	sub	sp, #296	; 0x128
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007c74:	2500      	movs	r5, #0
 8007c76:	ea54 0305 	orrs.w	r3, r4, r5
 8007c7a:	d049      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c86:	d02f      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8c:	d828      	bhi.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c92:	d01a      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c98:	d822      	bhi.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca2:	d007      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ca4:	e01c      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca6:	4bb8      	ldr	r3, [pc, #736]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4ab7      	ldr	r2, [pc, #732]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cb2:	e01a      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb8:	3308      	adds	r3, #8
 8007cba:	2102      	movs	r1, #2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fc8f 	bl	80095e0 <RCCEx_PLL2_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cc8:	e00f      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cce:	3328      	adds	r3, #40	; 0x28
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fd36 	bl	8009744 <RCCEx_PLL3_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cde:	e004      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cf2:	4ba5      	ldr	r3, [pc, #660]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d00:	4aa1      	ldr	r2, [pc, #644]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d02:	430b      	orrs	r3, r1
 8007d04:	6513      	str	r3, [r2, #80]	; 0x50
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007d1c:	f04f 0900 	mov.w	r9, #0
 8007d20:	ea58 0309 	orrs.w	r3, r8, r9
 8007d24:	d047      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d82a      	bhi.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d30:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007d4d 	.word	0x08007d4d
 8007d3c:	08007d5b 	.word	0x08007d5b
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007d8f 	.word	0x08007d8f
 8007d48:	08007d8f 	.word	0x08007d8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b8e      	ldr	r3, [pc, #568]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a8d      	ldr	r2, [pc, #564]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d58:	e01a      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fc3c 	bl	80095e0 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d6e:	e00f      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d74:	3328      	adds	r3, #40	; 0x28
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fce3 	bl	8009744 <RCCEx_PLL3_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d84:	e004      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d98:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	f023 0107 	bic.w	r1, r3, #7
 8007da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	4a78      	ldr	r2, [pc, #480]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6513      	str	r3, [r2, #80]	; 0x50
 8007dac:	e003      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007dc2:	f04f 0b00 	mov.w	fp, #0
 8007dc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007dca:	d04c      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd6:	d030      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ddc:	d829      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dde:	2bc0      	cmp	r3, #192	; 0xc0
 8007de0:	d02d      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007de2:	2bc0      	cmp	r3, #192	; 0xc0
 8007de4:	d825      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007de6:	2b80      	cmp	r3, #128	; 0x80
 8007de8:	d018      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d821      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d007      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007df6:	e01c      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df8:	4b63      	ldr	r3, [pc, #396]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	4a62      	ldr	r2, [pc, #392]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e04:	e01c      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fbe6 	bl	80095e0 <RCCEx_PLL2_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e1a:	e011      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e20:	3328      	adds	r3, #40	; 0x28
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fc8d 	bl	8009744 <RCCEx_PLL3_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e30:	e006      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e38:	e002      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e48:	4b4f      	ldr	r3, [pc, #316]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e56:	4a4c      	ldr	r2, [pc, #304]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6513      	str	r3, [r2, #80]	; 0x50
 8007e5c:	e003      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007e80:	460b      	mov	r3, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	d053      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e92:	d035      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e98:	d82e      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007e9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e9e:	d031      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ea0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ea4:	d828      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eaa:	d01a      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb0:	d822      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eba:	d007      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ebc:	e01c      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebe:	4b32      	ldr	r3, [pc, #200]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	4a31      	ldr	r2, [pc, #196]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007eca:	e01c      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fb83 	bl	80095e0 <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ee0:	e011      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee6:	3328      	adds	r3, #40	; 0x28
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 fc2a 	bl	8009744 <RCCEx_PLL3_Config>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ef6:	e006      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10b      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f1e:	4a1a      	ldr	r2, [pc, #104]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f20:	430b      	orrs	r3, r1
 8007f22:	6593      	str	r3, [r2, #88]	; 0x58
 8007f24:	e003      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	d056      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f5a:	d038      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f60:	d831      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f66:	d034      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f6c:	d82b      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f78:	d825      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d006      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f82:	d00a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f84:	e01f      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f86:	bf00      	nop
 8007f88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8c:	4ba2      	ldr	r3, [pc, #648]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	4aa1      	ldr	r2, [pc, #644]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f98:	e01c      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fb1c 	bl	80095e0 <RCCEx_PLL2_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fae:	e011      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb4:	3328      	adds	r3, #40	; 0x28
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 fbc3 	bl	8009744 <RCCEx_PLL3_Config>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e006      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fcc:	e002      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fdc:	4b8e      	ldr	r3, [pc, #568]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fec:	4a8a      	ldr	r2, [pc, #552]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff2:	e003      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008008:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800800c:	2300      	movs	r3, #0
 800800e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008012:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008016:	460b      	mov	r3, r1
 8008018:	4313      	orrs	r3, r2
 800801a:	d03a      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	2b30      	cmp	r3, #48	; 0x30
 8008024:	d01f      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008026:	2b30      	cmp	r3, #48	; 0x30
 8008028:	d819      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d00c      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800802e:	2b20      	cmp	r3, #32
 8008030:	d815      	bhi.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d019      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008036:	2b10      	cmp	r3, #16
 8008038:	d111      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803a:	4b77      	ldr	r3, [pc, #476]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a76      	ldr	r2, [pc, #472]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008046:	e011      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804c:	3308      	adds	r3, #8
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fac5 	bl	80095e0 <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800805c:	e006      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008064:	e002      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800806a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800806c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008074:	4b68      	ldr	r3, [pc, #416]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008078:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	4a65      	ldr	r2, [pc, #404]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008084:	430b      	orrs	r3, r1
 8008086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008088:	e003      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800808e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800809e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080a2:	2300      	movs	r3, #0
 80080a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4313      	orrs	r3, r2
 80080b0:	d051      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080bc:	d035      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80080be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080c2:	d82e      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080c8:	d031      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80080ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ce:	d828      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d4:	d01a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80080d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080da:	d822      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e4:	d007      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80080e6:	e01c      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080e8:	4b4b      	ldr	r3, [pc, #300]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	4a4a      	ldr	r2, [pc, #296]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080f4:	e01c      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fa:	3308      	adds	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 fa6e 	bl	80095e0 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800810a:	e011      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008110:	3328      	adds	r3, #40	; 0x28
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fb15 	bl	8009744 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008120:	e006      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800812e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10a      	bne.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008138:	4b37      	ldr	r3, [pc, #220]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008146:	4a34      	ldr	r2, [pc, #208]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008148:	430b      	orrs	r3, r1
 800814a:	6513      	str	r3, [r2, #80]	; 0x50
 800814c:	e003      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008166:	2300      	movs	r3, #0
 8008168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800816c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d056      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008180:	d033      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008186:	d82c      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800818c:	d02f      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800818e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008192:	d826      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008198:	d02b      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800819a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800819e:	d820      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80081a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a4:	d012      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80081a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081aa:	d81a      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d022      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80081b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b4:	d115      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ba:	3308      	adds	r3, #8
 80081bc:	2101      	movs	r1, #1
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fa0e 	bl	80095e0 <RCCEx_PLL2_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081ca:	e015      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	3328      	adds	r3, #40	; 0x28
 80081d2:	2101      	movs	r1, #1
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fab5 	bl	8009744 <RCCEx_PLL3_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081e0:	e00a      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081e8:	e006      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081ea:	bf00      	nop
 80081ec:	e004      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081ee:	bf00      	nop
 80081f0:	e002      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081f2:	bf00      	nop
 80081f4:	e000      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10d      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820e:	4a02      	ldr	r2, [pc, #8]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008210:	430b      	orrs	r3, r1
 8008212:	6513      	str	r3, [r2, #80]	; 0x50
 8008214:	e006      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008216:	bf00      	nop
 8008218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008234:	2300      	movs	r3, #0
 8008236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800823a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800823e:	460b      	mov	r3, r1
 8008240:	4313      	orrs	r3, r2
 8008242:	d055      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800824c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008250:	d033      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008256:	d82c      	bhi.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d02f      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800825e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008262:	d826      	bhi.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008268:	d02b      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800826a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800826e:	d820      	bhi.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008274:	d012      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827a:	d81a      	bhi.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d022      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008284:	d115      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828a:	3308      	adds	r3, #8
 800828c:	2101      	movs	r1, #1
 800828e:	4618      	mov	r0, r3
 8008290:	f001 f9a6 	bl	80095e0 <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800829a:	e015      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800829c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a0:	3328      	adds	r3, #40	; 0x28
 80082a2:	2101      	movs	r1, #1
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fa4d 	bl	8009744 <RCCEx_PLL3_Config>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082b0:	e00a      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082ba:	bf00      	nop
 80082bc:	e004      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082d0:	4ba3      	ldr	r3, [pc, #652]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80082d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082e0:	4a9f      	ldr	r2, [pc, #636]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6593      	str	r3, [r2, #88]	; 0x58
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80082fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800830a:	460b      	mov	r3, r1
 800830c:	4313      	orrs	r3, r2
 800830e:	d037      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831a:	d00e      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800831c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008320:	d816      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d018      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800832a:	d111      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800832c:	4b8c      	ldr	r3, [pc, #560]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	4a8b      	ldr	r2, [pc, #556]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008338:	e00f      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	3308      	adds	r3, #8
 8008340:	2101      	movs	r1, #1
 8008342:	4618      	mov	r0, r3
 8008344:	f001 f94c 	bl	80095e0 <RCCEx_PLL2_Config>
 8008348:	4603      	mov	r3, r0
 800834a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800834e:	e004      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008356:	e000      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10a      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008362:	4b7f      	ldr	r3, [pc, #508]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008366:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008370:	4a7b      	ldr	r2, [pc, #492]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008372:	430b      	orrs	r3, r1
 8008374:	6513      	str	r3, [r2, #80]	; 0x50
 8008376:	e003      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800838c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800839a:	460b      	mov	r3, r1
 800839c:	4313      	orrs	r3, r2
 800839e:	d039      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d81c      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80083aa:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b0:	080083ed 	.word	0x080083ed
 80083b4:	080083c1 	.word	0x080083c1
 80083b8:	080083cf 	.word	0x080083cf
 80083bc:	080083ed 	.word	0x080083ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c0:	4b67      	ldr	r3, [pc, #412]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a66      	ldr	r2, [pc, #408]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083cc:	e00f      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d2:	3308      	adds	r3, #8
 80083d4:	2102      	movs	r1, #2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 f902 	bl	80095e0 <RCCEx_PLL2_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083e2:	e004      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083ea:	e000      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80083ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083f6:	4b5a      	ldr	r3, [pc, #360]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fa:	f023 0103 	bic.w	r1, r3, #3
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008404:	4a56      	ldr	r2, [pc, #344]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008406:	430b      	orrs	r3, r1
 8008408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800840a:	e003      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008424:	2300      	movs	r3, #0
 8008426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800842a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800842e:	460b      	mov	r3, r1
 8008430:	4313      	orrs	r3, r2
 8008432:	f000 809f 	beq.w	8008574 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008436:	4b4b      	ldr	r3, [pc, #300]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a4a      	ldr	r2, [pc, #296]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800843c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008442:	f7f9 ff11 	bl	8002268 <HAL_GetTick>
 8008446:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800844a:	e00b      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844c:	f7f9 ff0c 	bl	8002268 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	2b64      	cmp	r3, #100	; 0x64
 800845a:	d903      	bls.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008462:	e005      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008464:	4b3f      	ldr	r3, [pc, #252]	; (8008564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0ed      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008474:	2b00      	cmp	r3, #0
 8008476:	d179      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008478:	4b39      	ldr	r3, [pc, #228]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800847a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008484:	4053      	eors	r3, r2
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	2b00      	cmp	r3, #0
 800848c:	d015      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800848e:	4b34      	ldr	r3, [pc, #208]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800849a:	4b31      	ldr	r3, [pc, #196]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4a30      	ldr	r2, [pc, #192]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084a6:	4b2e      	ldr	r3, [pc, #184]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	4a2d      	ldr	r2, [pc, #180]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084b2:	4a2b      	ldr	r2, [pc, #172]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80084b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c6:	d118      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c8:	f7f9 fece 	bl	8002268 <HAL_GetTick>
 80084cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084d0:	e00d      	b.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d2:	f7f9 fec9 	bl	8002268 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80084dc:	1ad2      	subs	r2, r2, r3
 80084de:	f241 3388 	movw	r3, #5000	; 0x1388
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d903      	bls.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80084ec:	e005      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ee:	4b1c      	ldr	r3, [pc, #112]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0eb      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d129      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800850a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008512:	d10e      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008514:	4b12      	ldr	r3, [pc, #72]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008524:	091a      	lsrs	r2, r3, #4
 8008526:	4b10      	ldr	r3, [pc, #64]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008528:	4013      	ands	r3, r2
 800852a:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800852c:	430b      	orrs	r3, r1
 800852e:	6113      	str	r3, [r2, #16]
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008532:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800853c:	6113      	str	r3, [r2, #16]
 800853e:	4b08      	ldr	r3, [pc, #32]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008540:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800854a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800854e:	4a04      	ldr	r2, [pc, #16]	; (8008560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008550:	430b      	orrs	r3, r1
 8008552:	6713      	str	r3, [r2, #112]	; 0x70
 8008554:	e00e      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800855a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800855e:	e009      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008560:	58024400 	.word	0x58024400
 8008564:	58024800 	.word	0x58024800
 8008568:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f002 0301 	and.w	r3, r2, #1
 8008580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800858a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	f000 8089 	beq.w	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859c:	2b28      	cmp	r3, #40	; 0x28
 800859e:	d86b      	bhi.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	08008681 	.word	0x08008681
 80085ac:	08008679 	.word	0x08008679
 80085b0:	08008679 	.word	0x08008679
 80085b4:	08008679 	.word	0x08008679
 80085b8:	08008679 	.word	0x08008679
 80085bc:	08008679 	.word	0x08008679
 80085c0:	08008679 	.word	0x08008679
 80085c4:	08008679 	.word	0x08008679
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	08008679 	.word	0x08008679
 80085d0:	08008679 	.word	0x08008679
 80085d4:	08008679 	.word	0x08008679
 80085d8:	08008679 	.word	0x08008679
 80085dc:	08008679 	.word	0x08008679
 80085e0:	08008679 	.word	0x08008679
 80085e4:	08008679 	.word	0x08008679
 80085e8:	08008663 	.word	0x08008663
 80085ec:	08008679 	.word	0x08008679
 80085f0:	08008679 	.word	0x08008679
 80085f4:	08008679 	.word	0x08008679
 80085f8:	08008679 	.word	0x08008679
 80085fc:	08008679 	.word	0x08008679
 8008600:	08008679 	.word	0x08008679
 8008604:	08008679 	.word	0x08008679
 8008608:	08008681 	.word	0x08008681
 800860c:	08008679 	.word	0x08008679
 8008610:	08008679 	.word	0x08008679
 8008614:	08008679 	.word	0x08008679
 8008618:	08008679 	.word	0x08008679
 800861c:	08008679 	.word	0x08008679
 8008620:	08008679 	.word	0x08008679
 8008624:	08008679 	.word	0x08008679
 8008628:	08008681 	.word	0x08008681
 800862c:	08008679 	.word	0x08008679
 8008630:	08008679 	.word	0x08008679
 8008634:	08008679 	.word	0x08008679
 8008638:	08008679 	.word	0x08008679
 800863c:	08008679 	.word	0x08008679
 8008640:	08008679 	.word	0x08008679
 8008644:	08008679 	.word	0x08008679
 8008648:	08008681 	.word	0x08008681
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008650:	3308      	adds	r3, #8
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f000 ffc3 	bl	80095e0 <RCCEx_PLL2_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008660:	e00f      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008666:	3328      	adds	r3, #40	; 0x28
 8008668:	2101      	movs	r1, #1
 800866a:	4618      	mov	r0, r3
 800866c:	f001 f86a 	bl	8009744 <RCCEx_PLL3_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008676:	e004      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800867e:	e000      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800868a:	4bbf      	ldr	r3, [pc, #764]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008698:	4abb      	ldr	r2, [pc, #748]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800869a:	430b      	orrs	r3, r1
 800869c:	6553      	str	r3, [r2, #84]	; 0x54
 800869e:	e003      	b.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f002 0302 	and.w	r3, r2, #2
 80086b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80086c2:	460b      	mov	r3, r1
 80086c4:	4313      	orrs	r3, r2
 80086c6:	d041      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d824      	bhi.n	800871c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80086d2:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80086d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d8:	08008725 	.word	0x08008725
 80086dc:	080086f1 	.word	0x080086f1
 80086e0:	08008707 	.word	0x08008707
 80086e4:	08008725 	.word	0x08008725
 80086e8:	08008725 	.word	0x08008725
 80086ec:	08008725 	.word	0x08008725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f4:	3308      	adds	r3, #8
 80086f6:	2101      	movs	r1, #1
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 ff71 	bl	80095e0 <RCCEx_PLL2_Config>
 80086fe:	4603      	mov	r3, r0
 8008700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008704:	e00f      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870a:	3328      	adds	r3, #40	; 0x28
 800870c:	2101      	movs	r1, #1
 800870e:	4618      	mov	r0, r3
 8008710:	f001 f818 	bl	8009744 <RCCEx_PLL3_Config>
 8008714:	4603      	mov	r3, r0
 8008716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800871a:	e004      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008722:	e000      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800872e:	4b96      	ldr	r3, [pc, #600]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f023 0107 	bic.w	r1, r3, #7
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800873c:	4a92      	ldr	r2, [pc, #584]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800873e:	430b      	orrs	r3, r1
 8008740:	6553      	str	r3, [r2, #84]	; 0x54
 8008742:	e003      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800874c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f002 0304 	and.w	r3, r2, #4
 8008758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008766:	460b      	mov	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	d044      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008774:	2b05      	cmp	r3, #5
 8008776:	d825      	bhi.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	080087cd 	.word	0x080087cd
 8008784:	08008799 	.word	0x08008799
 8008788:	080087af 	.word	0x080087af
 800878c:	080087cd 	.word	0x080087cd
 8008790:	080087cd 	.word	0x080087cd
 8008794:	080087cd 	.word	0x080087cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879c:	3308      	adds	r3, #8
 800879e:	2101      	movs	r1, #1
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 ff1d 	bl	80095e0 <RCCEx_PLL2_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087ac:	e00f      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b2:	3328      	adds	r3, #40	; 0x28
 80087b4:	2101      	movs	r1, #1
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 ffc4 	bl	8009744 <RCCEx_PLL3_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087c2:	e004      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087ca:	e000      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80087cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087d6:	4b6c      	ldr	r3, [pc, #432]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087da:	f023 0107 	bic.w	r1, r3, #7
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087e6:	4a68      	ldr	r2, [pc, #416]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6593      	str	r3, [r2, #88]	; 0x58
 80087ec:	e003      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f002 0320 	and.w	r3, r2, #32
 8008802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008806:	2300      	movs	r3, #0
 8008808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800880c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008810:	460b      	mov	r3, r1
 8008812:	4313      	orrs	r3, r2
 8008814:	d055      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008822:	d033      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008828:	d82c      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882e:	d02f      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d826      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800883a:	d02b      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800883c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008840:	d820      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008846:	d012      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884c:	d81a      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d022      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008856:	d115      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885c:	3308      	adds	r3, #8
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f000 febd 	bl	80095e0 <RCCEx_PLL2_Config>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800886c:	e015      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008872:	3328      	adds	r3, #40	; 0x28
 8008874:	2102      	movs	r1, #2
 8008876:	4618      	mov	r0, r3
 8008878:	f000 ff64 	bl	8009744 <RCCEx_PLL3_Config>
 800887c:	4603      	mov	r3, r0
 800887e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008882:	e00a      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800888a:	e006      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800888c:	bf00      	nop
 800888e:	e004      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008890:	bf00      	nop
 8008892:	e002      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008894:	bf00      	nop
 8008896:	e000      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10b      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b2:	4a35      	ldr	r2, [pc, #212]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6553      	str	r3, [r2, #84]	; 0x54
 80088b8:	e003      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80088ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088d2:	2300      	movs	r3, #0
 80088d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d058      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088ee:	d033      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80088f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088f4:	d82c      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fa:	d02f      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d826      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008906:	d02b      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800890c:	d820      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800890e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008912:	d012      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008918:	d81a      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d022      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800891e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008922:	d115      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008928:	3308      	adds	r3, #8
 800892a:	2100      	movs	r1, #0
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fe57 	bl	80095e0 <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008938:	e015      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893e:	3328      	adds	r3, #40	; 0x28
 8008940:	2102      	movs	r1, #2
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fefe 	bl	8009744 <RCCEx_PLL3_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800894e:	e00a      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008956:	e006      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008958:	bf00      	nop
 800895a:	e004      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800895c:	bf00      	nop
 800895e:	e002      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10e      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008972:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800897e:	4a02      	ldr	r2, [pc, #8]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008980:	430b      	orrs	r3, r1
 8008982:	6593      	str	r3, [r2, #88]	; 0x58
 8008984:	e006      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80089a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089a4:	2300      	movs	r3, #0
 80089a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80089ae:	460b      	mov	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	d055      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089c0:	d033      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80089c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089c6:	d82c      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089cc:	d02f      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80089ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d2:	d826      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089d8:	d02b      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80089da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089de:	d820      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e4:	d012      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80089e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ea:	d81a      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d022      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80089f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f4:	d115      	bne.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	3308      	adds	r3, #8
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fdee 	bl	80095e0 <RCCEx_PLL2_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a0a:	e015      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a10:	3328      	adds	r3, #40	; 0x28
 8008a12:	2102      	movs	r1, #2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fe95 	bl	8009744 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a20:	e00a      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a28:	e006      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a2a:	bf00      	nop
 8008a2c:	e004      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a2e:	bf00      	nop
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a40:	4ba1      	ldr	r3, [pc, #644]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a50:	4a9d      	ldr	r2, [pc, #628]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a52:	430b      	orrs	r3, r1
 8008a54:	6593      	str	r3, [r2, #88]	; 0x58
 8008a56:	e003      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f002 0308 	and.w	r3, r2, #8
 8008a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a70:	2300      	movs	r3, #0
 8008a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	d01e      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8c:	d10c      	bne.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a92:	3328      	adds	r3, #40	; 0x28
 8008a94:	2102      	movs	r1, #2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fe54 	bl	8009744 <RCCEx_PLL3_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008aa8:	4b87      	ldr	r3, [pc, #540]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab8:	4a83      	ldr	r2, [pc, #524]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008aba:	430b      	orrs	r3, r1
 8008abc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f002 0310 	and.w	r3, r2, #16
 8008aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ad4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d01e      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aea:	d10c      	bne.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af0:	3328      	adds	r3, #40	; 0x28
 8008af2:	2102      	movs	r1, #2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fe25 	bl	8009744 <RCCEx_PLL3_Config>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b06:	4b70      	ldr	r3, [pc, #448]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b16:	4a6c      	ldr	r2, [pc, #432]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008b36:	460b      	mov	r3, r1
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	d03e      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b48:	d022      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b4e:	d81b      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b58:	d00b      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008b5a:	e015      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b60:	3308      	adds	r3, #8
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fd3b 	bl	80095e0 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b70:	e00f      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b76:	3328      	adds	r3, #40	; 0x28
 8008b78:	2102      	movs	r1, #2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fde2 	bl	8009744 <RCCEx_PLL3_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b86:	e004      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b9a:	4b4b      	ldr	r3, [pc, #300]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008baa:	4a47      	ldr	r2, [pc, #284]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bac:	430b      	orrs	r3, r1
 8008bae:	6593      	str	r3, [r2, #88]	; 0x58
 8008bb0:	e003      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bc8:	2300      	movs	r3, #0
 8008bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	d03b      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008be2:	d01f      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008be8:	d818      	bhi.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bee:	d003      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf4:	d007      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008bf6:	e011      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf8:	4b33      	ldr	r3, [pc, #204]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	4a32      	ldr	r2, [pc, #200]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c04:	e00f      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0a:	3328      	adds	r3, #40	; 0x28
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fd98 	bl	8009744 <RCCEx_PLL3_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c1a:	e004      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c22:	e000      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10b      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c2e:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3e:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6553      	str	r3, [r2, #84]	; 0x54
 8008c44:	e003      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	677b      	str	r3, [r7, #116]	; 0x74
 8008c60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008c64:	460b      	mov	r3, r1
 8008c66:	4313      	orrs	r3, r2
 8008c68:	d034      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c78:	d007      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008c7a:	e011      	b.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	4a11      	ldr	r2, [pc, #68]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c88:	e00e      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8e:	3308      	adds	r3, #8
 8008c90:	2102      	movs	r1, #2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 fca4 	bl	80095e0 <RCCEx_PLL2_Config>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c9e:	e003      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10d      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbe:	4a02      	ldr	r2, [pc, #8]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc0:	430b      	orrs	r3, r1
 8008cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cc4:	e006      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008cc6:	bf00      	nop
 8008cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ce6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008cea:	460b      	mov	r3, r1
 8008cec:	4313      	orrs	r3, r2
 8008cee:	d00c      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf4:	3328      	adds	r3, #40	; 0x28
 8008cf6:	2102      	movs	r1, #2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fd23 	bl	8009744 <RCCEx_PLL3_Config>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008d16:	663b      	str	r3, [r7, #96]	; 0x60
 8008d18:	2300      	movs	r3, #0
 8008d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8008d1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d038      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d32:	d018      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d38:	d811      	bhi.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3e:	d014      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d44:	d80b      	bhi.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d011      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4e:	d106      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d50:	4bc3      	ldr	r3, [pc, #780]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	4ac2      	ldr	r2, [pc, #776]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d5c:	e008      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d64:	e004      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d66:	bf00      	nop
 8008d68:	e002      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d6a:	bf00      	nop
 8008d6c:	e000      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d78:	4bb9      	ldr	r3, [pc, #740]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d88:	4ab5      	ldr	r2, [pc, #724]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8008d8e:	e003      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008da6:	2300      	movs	r3, #0
 8008da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008daa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008dae:	460b      	mov	r3, r1
 8008db0:	4313      	orrs	r3, r2
 8008db2:	d009      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008db4:	4baa      	ldr	r3, [pc, #680]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc2:	4aa7      	ldr	r2, [pc, #668]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008dde:	460b      	mov	r3, r1
 8008de0:	4313      	orrs	r3, r2
 8008de2:	d00a      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008de4:	4b9e      	ldr	r3, [pc, #632]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008df4:	4a9a      	ldr	r2, [pc, #616]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008df6:	430b      	orrs	r3, r1
 8008df8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e08:	2300      	movs	r3, #0
 8008e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008e10:	460b      	mov	r3, r1
 8008e12:	4313      	orrs	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e16:	4b92      	ldr	r3, [pc, #584]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e24:	4a8e      	ldr	r2, [pc, #568]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e26:	430b      	orrs	r3, r1
 8008e28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
 8008e38:	2300      	movs	r3, #0
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d00e      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e46:	4b86      	ldr	r3, [pc, #536]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	4a85      	ldr	r2, [pc, #532]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e50:	6113      	str	r3, [r2, #16]
 8008e52:	4b83      	ldr	r3, [pc, #524]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e54:	6919      	ldr	r1, [r3, #16]
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008e5e:	4a80      	ldr	r2, [pc, #512]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e60:	430b      	orrs	r3, r1
 8008e62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	d009      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e80:	4b77      	ldr	r3, [pc, #476]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	4a74      	ldr	r2, [pc, #464]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4313      	orrs	r3, r2
 8008eae:	d00a      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008eb0:	4b6b      	ldr	r3, [pc, #428]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec0:	4a67      	ldr	r2, [pc, #412]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008edc:	460b      	mov	r3, r1
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	d011      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fb78 	bl	80095e0 <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6239      	str	r1, [r7, #32]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	627b      	str	r3, [r7, #36]	; 0x24
 8008f18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	d011      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f26:	3308      	adds	r3, #8
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fb58 	bl	80095e0 <RCCEx_PLL2_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	61b9      	str	r1, [r7, #24]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	d011      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f66:	3308      	adds	r3, #8
 8008f68:	2102      	movs	r1, #2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fb38 	bl	80095e0 <RCCEx_PLL2_Config>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008f76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6139      	str	r1, [r7, #16]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d011      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa6:	3328      	adds	r3, #40	; 0x28
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fbca 	bl	8009744 <RCCEx_PLL3_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	2100      	movs	r1, #0
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d011      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe6:	3328      	adds	r3, #40	; 0x28
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fbaa 	bl	8009744 <RCCEx_PLL3_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	2100      	movs	r1, #0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	607b      	str	r3, [r7, #4]
 8009018:	e9d7 1200 	ldrd	r1, r2, [r7]
 800901c:	460b      	mov	r3, r1
 800901e:	4313      	orrs	r3, r2
 8009020:	d011      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009026:	3328      	adds	r3, #40	; 0x28
 8009028:	2102      	movs	r1, #2
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fb8a 	bl	8009744 <RCCEx_PLL3_Config>
 8009030:	4603      	mov	r3, r0
 8009032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009046:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e000      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
}
 8009054:	4618      	mov	r0, r3
 8009056:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800905a:	46bd      	mov	sp, r7
 800905c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009060:	58024400 	.word	0x58024400

08009064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009068:	f7fe fd54 	bl	8007b14 <HAL_RCC_GetHCLKFreq>
 800906c:	4602      	mov	r2, r0
 800906e:	4b06      	ldr	r3, [pc, #24]	; (8009088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	4904      	ldr	r1, [pc, #16]	; (800908c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800907a:	5ccb      	ldrb	r3, [r1, r3]
 800907c:	f003 031f 	and.w	r3, r3, #31
 8009080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009084:	4618      	mov	r0, r3
 8009086:	bd80      	pop	{r7, pc}
 8009088:	58024400 	.word	0x58024400
 800908c:	08020e74 	.word	0x08020e74

08009090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009098:	4ba1      	ldr	r3, [pc, #644]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090a2:	4b9f      	ldr	r3, [pc, #636]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	0b1b      	lsrs	r3, r3, #12
 80090a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ae:	4b9c      	ldr	r3, [pc, #624]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090ba:	4b99      	ldr	r3, [pc, #612]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	08db      	lsrs	r3, r3, #3
 80090c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	fb02 f303 	mul.w	r3, r2, r3
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8111 	beq.w	8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	f000 8083 	beq.w	80091ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	f200 80a1 	bhi.w	8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d056      	beq.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090fa:	e099      	b.n	8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090fc:	4b88      	ldr	r3, [pc, #544]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d02d      	beq.n	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009108:	4b85      	ldr	r3, [pc, #532]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	08db      	lsrs	r3, r3, #3
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	4a84      	ldr	r2, [pc, #528]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
 8009118:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b7b      	ldr	r3, [pc, #492]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a03 	vldr	s12, [r7, #12]
 8009146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009162:	e087      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b6a      	ldr	r3, [pc, #424]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a03 	vldr	s12, [r7, #12]
 800918a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a6:	e065      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ba:	4b59      	ldr	r3, [pc, #356]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c2:	ee07 3a90 	vmov	s15, r3
 80091c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ea:	e043      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091fe:	4b48      	ldr	r3, [pc, #288]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800921e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800922e:	e021      	b.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800923e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009242:	4b37      	ldr	r3, [pc, #220]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009252:	ed97 6a03 	vldr	s12, [r7, #12]
 8009256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800925a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009274:	4b2a      	ldr	r3, [pc, #168]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	0a5b      	lsrs	r3, r3, #9
 800927a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800928a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800928e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929a:	ee17 2a90 	vmov	r2, s15
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092a2:	4b1f      	ldr	r3, [pc, #124]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	0c1b      	lsrs	r3, r3, #16
 80092a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c8:	ee17 2a90 	vmov	r2, s15
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	0e1b      	lsrs	r3, r3, #24
 80092d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f6:	ee17 2a90 	vmov	r2, s15
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092fe:	e008      	b.n	8009312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	609a      	str	r2, [r3, #8]
}
 8009312:	bf00      	nop
 8009314:	3724      	adds	r7, #36	; 0x24
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	03d09000 	.word	0x03d09000
 8009328:	46000000 	.word	0x46000000
 800932c:	4c742400 	.word	0x4c742400
 8009330:	4a742400 	.word	0x4a742400
 8009334:	4af42400 	.word	0x4af42400

08009338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009338:	b480      	push	{r7}
 800933a:	b089      	sub	sp, #36	; 0x24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009340:	4ba1      	ldr	r3, [pc, #644]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800934a:	4b9f      	ldr	r3, [pc, #636]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	0d1b      	lsrs	r3, r3, #20
 8009350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009356:	4b9c      	ldr	r3, [pc, #624]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009362:	4b99      	ldr	r3, [pc, #612]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009366:	08db      	lsrs	r3, r3, #3
 8009368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8111 	beq.w	80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b02      	cmp	r3, #2
 800938a:	f000 8083 	beq.w	8009494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b02      	cmp	r3, #2
 8009392:	f200 80a1 	bhi.w	80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d056      	beq.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093a2:	e099      	b.n	80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a4:	4b88      	ldr	r3, [pc, #544]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d02d      	beq.n	800940c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b0:	4b85      	ldr	r3, [pc, #532]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a84      	ldr	r2, [pc, #528]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b7b      	ldr	r3, [pc, #492]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800940a:	e087      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b6a      	ldr	r3, [pc, #424]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800944e:	e065      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800945e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009462:	4b59      	ldr	r3, [pc, #356]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946a:	ee07 3a90 	vmov	s15, r3
 800946e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009472:	ed97 6a03 	vldr	s12, [r7, #12]
 8009476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800947a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800947e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800948e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009492:	e043      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a6:	4b48      	ldr	r3, [pc, #288]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d6:	e021      	b.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ea:	4b37      	ldr	r3, [pc, #220]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800951a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800951c:	4b2a      	ldr	r3, [pc, #168]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	0a5b      	lsrs	r3, r3, #9
 8009522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009536:	edd7 6a07 	vldr	s13, [r7, #28]
 800953a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800953e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009542:	ee17 2a90 	vmov	r2, s15
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800954a:	4b1f      	ldr	r3, [pc, #124]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	0c1b      	lsrs	r3, r3, #16
 8009550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009564:	edd7 6a07 	vldr	s13, [r7, #28]
 8009568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800956c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009570:	ee17 2a90 	vmov	r2, s15
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009578:	4b13      	ldr	r3, [pc, #76]	; (80095c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	0e1b      	lsrs	r3, r3, #24
 800957e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800958e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009592:	edd7 6a07 	vldr	s13, [r7, #28]
 8009596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800959e:	ee17 2a90 	vmov	r2, s15
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095a6:	e008      	b.n	80095ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
}
 80095ba:	bf00      	nop
 80095bc:	3724      	adds	r7, #36	; 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	58024400 	.word	0x58024400
 80095cc:	03d09000 	.word	0x03d09000
 80095d0:	46000000 	.word	0x46000000
 80095d4:	4c742400 	.word	0x4c742400
 80095d8:	4a742400 	.word	0x4a742400
 80095dc:	4af42400 	.word	0x4af42400

080095e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ee:	4b53      	ldr	r3, [pc, #332]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0303 	and.w	r3, r3, #3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d101      	bne.n	80095fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e099      	b.n	8009732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095fe:	4b4f      	ldr	r3, [pc, #316]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a4e      	ldr	r2, [pc, #312]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800960a:	f7f8 fe2d 	bl	8002268 <HAL_GetTick>
 800960e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009610:	e008      	b.n	8009624 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009612:	f7f8 fe29 	bl	8002268 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e086      	b.n	8009732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009624:	4b45      	ldr	r3, [pc, #276]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009630:	4b42      	ldr	r3, [pc, #264]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	031b      	lsls	r3, r3, #12
 800963e:	493f      	ldr	r1, [pc, #252]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009640:	4313      	orrs	r3, r2
 8009642:	628b      	str	r3, [r1, #40]	; 0x28
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	3b01      	subs	r3, #1
 800964a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	025b      	lsls	r3, r3, #9
 8009656:	b29b      	uxth	r3, r3
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	3b01      	subs	r3, #1
 8009660:	041b      	lsls	r3, r3, #16
 8009662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	3b01      	subs	r3, #1
 800966e:	061b      	lsls	r3, r3, #24
 8009670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009674:	4931      	ldr	r1, [pc, #196]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800967a:	4b30      	ldr	r3, [pc, #192]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	492d      	ldr	r1, [pc, #180]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	f023 0220 	bic.w	r2, r3, #32
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	4928      	ldr	r1, [pc, #160]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 800969a:	4313      	orrs	r3, r2
 800969c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800969e:	4b27      	ldr	r3, [pc, #156]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	4a26      	ldr	r2, [pc, #152]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096aa:	4b24      	ldr	r3, [pc, #144]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ae:	4b24      	ldr	r3, [pc, #144]	; (8009740 <RCCEx_PLL2_Config+0x160>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	69d2      	ldr	r2, [r2, #28]
 80096b6:	00d2      	lsls	r2, r2, #3
 80096b8:	4920      	ldr	r1, [pc, #128]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096be:	4b1f      	ldr	r3, [pc, #124]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096c4:	f043 0310 	orr.w	r3, r3, #16
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4a19      	ldr	r2, [pc, #100]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096dc:	e00f      	b.n	80096fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d106      	bne.n	80096f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096e4:	4b15      	ldr	r3, [pc, #84]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a14      	ldr	r2, [pc, #80]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f0:	e005      	b.n	80096fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096f2:	4b12      	ldr	r3, [pc, #72]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a11      	ldr	r2, [pc, #68]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 80096f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a0e      	ldr	r2, [pc, #56]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970a:	f7f8 fdad 	bl	8002268 <HAL_GetTick>
 800970e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009710:	e008      	b.n	8009724 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009712:	f7f8 fda9 	bl	8002268 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e006      	b.n	8009732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <RCCEx_PLL2_Config+0x15c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f0      	beq.n	8009712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	ffff0007 	.word	0xffff0007

08009744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009752:	4b53      	ldr	r3, [pc, #332]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b03      	cmp	r3, #3
 800975c:	d101      	bne.n	8009762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e099      	b.n	8009896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009762:	4b4f      	ldr	r3, [pc, #316]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a4e      	ldr	r2, [pc, #312]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800976c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800976e:	f7f8 fd7b 	bl	8002268 <HAL_GetTick>
 8009772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009774:	e008      	b.n	8009788 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009776:	f7f8 fd77 	bl	8002268 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	2b02      	cmp	r3, #2
 8009782:	d901      	bls.n	8009788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e086      	b.n	8009896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009788:	4b45      	ldr	r3, [pc, #276]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f0      	bne.n	8009776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	051b      	lsls	r3, r3, #20
 80097a2:	493f      	ldr	r1, [pc, #252]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	628b      	str	r3, [r1, #40]	; 0x28
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	025b      	lsls	r3, r3, #9
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	041b      	lsls	r3, r3, #16
 80097c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	061b      	lsls	r3, r3, #24
 80097d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097d8:	4931      	ldr	r1, [pc, #196]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097de:	4b30      	ldr	r3, [pc, #192]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	492d      	ldr	r1, [pc, #180]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097f0:	4b2b      	ldr	r3, [pc, #172]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	4928      	ldr	r1, [pc, #160]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009802:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009812:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <RCCEx_PLL3_Config+0x160>)
 8009814:	4013      	ands	r3, r2
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	69d2      	ldr	r2, [r2, #28]
 800981a:	00d2      	lsls	r2, r2, #3
 800981c:	4920      	ldr	r1, [pc, #128]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800981e:	4313      	orrs	r3, r2
 8009820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009822:	4b1f      	ldr	r3, [pc, #124]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800983a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800983e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009840:	e00f      	b.n	8009862 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d106      	bne.n	8009856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800984e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009854:	e005      	b.n	8009862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009856:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	4a11      	ldr	r2, [pc, #68]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800985c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 8009868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986e:	f7f8 fcfb 	bl	8002268 <HAL_GetTick>
 8009872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009874:	e008      	b.n	8009888 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009876:	f7f8 fcf7 	bl	8002268 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d901      	bls.n	8009888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e006      	b.n	8009896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <RCCEx_PLL3_Config+0x15c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f0      	beq.n	8009876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	58024400 	.word	0x58024400
 80098a4:	ffff0007 	.word	0xffff0007

080098a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e049      	b.n	800994e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d106      	bne.n	80098d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f841 	bl	8009956 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f000 fa00 	bl	8009cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
	...

0800996c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b01      	cmp	r3, #1
 800997e:	d001      	beq.n	8009984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e054      	b.n	8009a2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a26      	ldr	r2, [pc, #152]	; (8009a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d022      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ae:	d01d      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a22      	ldr	r2, [pc, #136]	; (8009a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d018      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a21      	ldr	r2, [pc, #132]	; (8009a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d013      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00e      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <HAL_TIM_Base_Start_IT+0xe0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d009      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1c      	ldr	r2, [pc, #112]	; (8009a50 <HAL_TIM_Base_Start_IT+0xe4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d004      	beq.n	80099ec <HAL_TIM_Base_Start_IT+0x80>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1b      	ldr	r2, [pc, #108]	; (8009a54 <HAL_TIM_Base_Start_IT+0xe8>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d115      	bne.n	8009a18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	4b19      	ldr	r3, [pc, #100]	; (8009a58 <HAL_TIM_Base_Start_IT+0xec>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b06      	cmp	r3, #6
 80099fc:	d015      	beq.n	8009a2a <HAL_TIM_Base_Start_IT+0xbe>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a04:	d011      	beq.n	8009a2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f042 0201 	orr.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a16:	e008      	b.n	8009a2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0201 	orr.w	r2, r2, #1
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	e000      	b.n	8009a2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40000400 	.word	0x40000400
 8009a44:	40000800 	.word	0x40000800
 8009a48:	40000c00 	.word	0x40000c00
 8009a4c:	40010400 	.word	0x40010400
 8009a50:	40001800 	.word	0x40001800
 8009a54:	40014000 	.word	0x40014000
 8009a58:	00010007 	.word	0x00010007

08009a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d122      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d11b      	bne.n	8009ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0202 	mvn.w	r2, #2
 8009a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f905 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009aa4:	e005      	b.n	8009ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f8f7 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f908 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d122      	bne.n	8009b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d11b      	bne.n	8009b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f06f 0204 	mvn.w	r2, #4
 8009adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f8db 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009af8:	e005      	b.n	8009b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f8cd 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f8de 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b08      	cmp	r3, #8
 8009b18:	d122      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d11b      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f06f 0208 	mvn.w	r2, #8
 8009b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2204      	movs	r2, #4
 8009b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f8b1 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009b4c:	e005      	b.n	8009b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f8a3 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f8b4 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f003 0310 	and.w	r3, r3, #16
 8009b6a:	2b10      	cmp	r3, #16
 8009b6c:	d122      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d11b      	bne.n	8009bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f06f 0210 	mvn.w	r2, #16
 8009b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d003      	beq.n	8009ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f887 	bl	8009cae <HAL_TIM_IC_CaptureCallback>
 8009ba0:	e005      	b.n	8009bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f879 	bl	8009c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f88a 	bl	8009cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d10e      	bne.n	8009be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d107      	bne.n	8009be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f06f 0201 	mvn.w	r2, #1
 8009bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7f7 fe3c 	bl	8001858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bea:	2b80      	cmp	r3, #128	; 0x80
 8009bec:	d10e      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf8:	2b80      	cmp	r3, #128	; 0x80
 8009bfa:	d107      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f914 	bl	8009e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1a:	d10e      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c26:	2b80      	cmp	r3, #128	; 0x80
 8009c28:	d107      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f907 	bl	8009e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c44:	2b40      	cmp	r3, #64	; 0x40
 8009c46:	d10e      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c52:	2b40      	cmp	r3, #64	; 0x40
 8009c54:	d107      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f838 	bl	8009cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d10e      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0320 	and.w	r3, r3, #32
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d107      	bne.n	8009c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f06f 0220 	mvn.w	r2, #32
 8009c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f8c7 	bl	8009e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cde:	bf00      	nop
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
	...

08009cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a40      	ldr	r2, [pc, #256]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d013      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d0a:	d00f      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a3d      	ldr	r2, [pc, #244]	; (8009e04 <TIM_Base_SetConfig+0x118>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00b      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a3c      	ldr	r2, [pc, #240]	; (8009e08 <TIM_Base_SetConfig+0x11c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d007      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3b      	ldr	r2, [pc, #236]	; (8009e0c <TIM_Base_SetConfig+0x120>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a3a      	ldr	r2, [pc, #232]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d108      	bne.n	8009d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2f      	ldr	r2, [pc, #188]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d01f      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4c:	d01b      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2c      	ldr	r2, [pc, #176]	; (8009e04 <TIM_Base_SetConfig+0x118>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d017      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2b      	ldr	r2, [pc, #172]	; (8009e08 <TIM_Base_SetConfig+0x11c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d013      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2a      	ldr	r2, [pc, #168]	; (8009e0c <TIM_Base_SetConfig+0x120>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00f      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a29      	ldr	r2, [pc, #164]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00b      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a28      	ldr	r2, [pc, #160]	; (8009e14 <TIM_Base_SetConfig+0x128>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d007      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a27      	ldr	r2, [pc, #156]	; (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d003      	beq.n	8009d86 <TIM_Base_SetConfig+0x9a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a26      	ldr	r2, [pc, #152]	; (8009e1c <TIM_Base_SetConfig+0x130>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d108      	bne.n	8009d98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <TIM_Base_SetConfig+0x114>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00f      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a12      	ldr	r2, [pc, #72]	; (8009e10 <TIM_Base_SetConfig+0x124>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00b      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a11      	ldr	r2, [pc, #68]	; (8009e14 <TIM_Base_SetConfig+0x128>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d007      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a10      	ldr	r2, [pc, #64]	; (8009e18 <TIM_Base_SetConfig+0x12c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d003      	beq.n	8009de4 <TIM_Base_SetConfig+0xf8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a0f      	ldr	r2, [pc, #60]	; (8009e1c <TIM_Base_SetConfig+0x130>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d103      	bne.n	8009dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	615a      	str	r2, [r3, #20]
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40000400 	.word	0x40000400
 8009e08:	40000800 	.word	0x40000800
 8009e0c:	40000c00 	.word	0x40000c00
 8009e10:	40010400 	.word	0x40010400
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40014400 	.word	0x40014400
 8009e1c:	40014800 	.word	0x40014800

08009e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e042      	b.n	8009ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d106      	bne.n	8009e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7f7 ffa3 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2224      	movs	r2, #36	; 0x24
 8009e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fdb4 	bl	800aa0c <UART_SetConfig>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d101      	bne.n	8009eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e022      	b.n	8009ef4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fb10 	bl	800b4dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0201 	orr.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fb97 	bl	800b620 <UART_CheckIdleState>
 8009ef2:	4603      	mov	r3, r0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	; 0x28
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d17b      	bne.n	800a00e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <HAL_UART_Transmit+0x26>
 8009f1c:	88fb      	ldrh	r3, [r7, #6]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e074      	b.n	800a010 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2221      	movs	r2, #33	; 0x21
 8009f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f36:	f7f8 f997 	bl	8002268 <HAL_GetTick>
 8009f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	88fa      	ldrh	r2, [r7, #6]
 8009f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f54:	d108      	bne.n	8009f68 <HAL_UART_Transmit+0x6c>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	e003      	b.n	8009f70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f70:	e030      	b.n	8009fd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2180      	movs	r1, #128	; 0x80
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f001 fbf9 	bl	800b774 <UART_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e03d      	b.n	800a010 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	3302      	adds	r3, #2
 8009fae:	61bb      	str	r3, [r7, #24]
 8009fb0:	e007      	b.n	8009fc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	781a      	ldrb	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1c8      	bne.n	8009f72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2140      	movs	r1, #64	; 0x40
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f001 fbc2 	bl	800b774 <UART_WaitOnFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e006      	b.n	800a010 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e000      	b.n	800a010 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a00e:	2302      	movs	r3, #2
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d137      	bne.n	800a0a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_UART_Receive_IT+0x24>
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e030      	b.n	800a0a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a18      	ldr	r2, [pc, #96]	; (800a0ac <HAL_UART_Receive_IT+0x94>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d01f      	beq.n	800a090 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d018      	beq.n	800a090 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	613b      	str	r3, [r7, #16]
   return(result);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	623b      	str	r3, [r7, #32]
 800a07e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	69f9      	ldr	r1, [r7, #28]
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	61bb      	str	r3, [r7, #24]
   return(result);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a090:	88fb      	ldrh	r3, [r7, #6]
 800a092:	461a      	mov	r2, r3
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f001 fbd4 	bl	800b844 <UART_Start_Receive_IT>
 800a09c:	4603      	mov	r3, r0
 800a09e:	e000      	b.n	800a0a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0a0:	2302      	movs	r3, #2
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3728      	adds	r7, #40	; 0x28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	58000c00 	.word	0x58000c00

0800a0b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	; 0x28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	d167      	bne.n	800a198 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <HAL_UART_Transmit_DMA+0x24>
 800a0ce:	88fb      	ldrh	r3, [r7, #6]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e060      	b.n	800a19a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	88fa      	ldrh	r2, [r7, #6]
 800a0e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	88fa      	ldrh	r2, [r7, #6]
 800a0ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2221      	movs	r2, #33	; 0x21
 800a0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d028      	beq.n	800a158 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10a:	4a26      	ldr	r2, [pc, #152]	; (800a1a4 <HAL_UART_Transmit_DMA+0xf4>)
 800a10c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a112:	4a25      	ldr	r2, [pc, #148]	; (800a1a8 <HAL_UART_Transmit_DMA+0xf8>)
 800a114:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11a:	4a24      	ldr	r2, [pc, #144]	; (800a1ac <HAL_UART_Transmit_DMA+0xfc>)
 800a11c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a122:	2200      	movs	r2, #0
 800a124:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12e:	4619      	mov	r1, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3328      	adds	r3, #40	; 0x28
 800a136:	461a      	mov	r2, r3
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	f7f8 fd21 	bl	8002b80 <HAL_DMA_Start_IT>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2210      	movs	r2, #16
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2220      	movs	r2, #32
 800a150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e020      	b.n	800a19a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2240      	movs	r2, #64	; 0x40
 800a15e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3308      	adds	r3, #8
 800a166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	e853 3f00 	ldrex	r3, [r3]
 800a16e:	613b      	str	r3, [r7, #16]
   return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a180:	623a      	str	r2, [r7, #32]
 800a182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	69f9      	ldr	r1, [r7, #28]
 800a186:	6a3a      	ldr	r2, [r7, #32]
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e5      	bne.n	800a160 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	e000      	b.n	800a19a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a198:	2302      	movs	r3, #2
  }
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3728      	adds	r7, #40	; 0x28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800bd25 	.word	0x0800bd25
 800a1a8:	0800bdbb 	.word	0x0800bdbb
 800a1ac:	0800bf3d 	.word	0x0800bf3d

0800a1b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08a      	sub	sp, #40	; 0x28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	d137      	bne.n	800a238 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_UART_Receive_DMA+0x24>
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e030      	b.n	800a23a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a18      	ldr	r2, [pc, #96]	; (800a244 <HAL_UART_Receive_DMA+0x94>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d01f      	beq.n	800a228 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d018      	beq.n	800a228 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	613b      	str	r3, [r7, #16]
   return(result);
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	623b      	str	r3, [r7, #32]
 800a216:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	69f9      	ldr	r1, [r7, #28]
 800a21a:	6a3a      	ldr	r2, [r7, #32]
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	61bb      	str	r3, [r7, #24]
   return(result);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e6      	bne.n	800a1f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68b9      	ldr	r1, [r7, #8]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f001 fc2a 	bl	800ba88 <UART_Start_Receive_DMA>
 800a234:	4603      	mov	r3, r0
 800a236:	e000      	b.n	800a23a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a238:	2302      	movs	r3, #2
  }
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3728      	adds	r7, #40	; 0x28
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	58000c00 	.word	0x58000c00

0800a248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b0ba      	sub	sp, #232	; 0xe8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a26e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a272:	f640 030f 	movw	r3, #2063	; 0x80f
 800a276:	4013      	ands	r3, r2
 800a278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a27c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11b      	bne.n	800a2bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a288:	f003 0320 	and.w	r3, r3, #32
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d015      	beq.n	800a2bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a294:	f003 0320 	and.w	r3, r3, #32
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 8377 	beq.w	800a9a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
      }
      return;
 800a2ba:	e371      	b.n	800a9a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 8123 	beq.w	800a50c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2ca:	4b8d      	ldr	r3, [pc, #564]	; (800a500 <HAL_UART_IRQHandler+0x2b8>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2d6:	4b8b      	ldr	r3, [pc, #556]	; (800a504 <HAL_UART_IRQHandler+0x2bc>)
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 8116 	beq.w	800a50c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d011      	beq.n	800a310 <HAL_UART_IRQHandler+0xc8>
 800a2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a306:	f043 0201 	orr.w	r2, r3, #1
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d011      	beq.n	800a340 <HAL_UART_IRQHandler+0xf8>
 800a31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2202      	movs	r2, #2
 800a32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a336:	f043 0204 	orr.w	r2, r3, #4
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d011      	beq.n	800a370 <HAL_UART_IRQHandler+0x128>
 800a34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2204      	movs	r2, #4
 800a35e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a366:	f043 0202 	orr.w	r2, r3, #2
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a374:	f003 0308 	and.w	r3, r3, #8
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d017      	beq.n	800a3ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d105      	bne.n	800a394 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a388:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a38c:	4b5c      	ldr	r3, [pc, #368]	; (800a500 <HAL_UART_IRQHandler+0x2b8>)
 800a38e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2208      	movs	r2, #8
 800a39a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a2:	f043 0208 	orr.w	r2, r3, #8
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d012      	beq.n	800a3de <HAL_UART_IRQHandler+0x196>
 800a3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00c      	beq.n	800a3de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d4:	f043 0220 	orr.w	r2, r3, #32
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 82dd 	beq.w	800a9a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d013      	beq.n	800a41e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d105      	bne.n	800a40e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d007      	beq.n	800a41e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a432:	2b40      	cmp	r3, #64	; 0x40
 800a434:	d005      	beq.n	800a442 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a43a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d054      	beq.n	800a4ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 fc08 	bl	800bc58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a452:	2b40      	cmp	r3, #64	; 0x40
 800a454:	d146      	bne.n	800a4e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a46c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a48e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a492:	e841 2300 	strex	r3, r2, [r1]
 800a496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a49a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1d9      	bne.n	800a456 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d017      	beq.n	800a4dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b2:	4a15      	ldr	r2, [pc, #84]	; (800a508 <HAL_UART_IRQHandler+0x2c0>)
 800a4b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7f9 f8e7 	bl	8003690 <HAL_DMA_Abort_IT>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d019      	beq.n	800a4fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4da:	e00f      	b.n	800a4fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa8b 	bl	800a9f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e2:	e00b      	b.n	800a4fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa87 	bl	800a9f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ea:	e007      	b.n	800a4fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fa83 	bl	800a9f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a4fa:	e253      	b.n	800a9a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4fc:	bf00      	nop
    return;
 800a4fe:	e251      	b.n	800a9a4 <HAL_UART_IRQHandler+0x75c>
 800a500:	10000001 	.word	0x10000001
 800a504:	04000120 	.word	0x04000120
 800a508:	0800bfbd 	.word	0x0800bfbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a510:	2b01      	cmp	r3, #1
 800a512:	f040 81e7 	bne.w	800a8e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a51a:	f003 0310 	and.w	r3, r3, #16
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f000 81e0 	beq.w	800a8e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a528:	f003 0310 	and.w	r3, r3, #16
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 81d9 	beq.w	800a8e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2210      	movs	r2, #16
 800a538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a544:	2b40      	cmp	r3, #64	; 0x40
 800a546:	f040 8151 	bne.w	800a7ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a96      	ldr	r2, [pc, #600]	; (800a7ac <HAL_UART_IRQHandler+0x564>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d068      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a93      	ldr	r2, [pc, #588]	; (800a7b0 <HAL_UART_IRQHandler+0x568>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d061      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a91      	ldr	r2, [pc, #580]	; (800a7b4 <HAL_UART_IRQHandler+0x56c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d05a      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a8e      	ldr	r2, [pc, #568]	; (800a7b8 <HAL_UART_IRQHandler+0x570>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d053      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a8c      	ldr	r2, [pc, #560]	; (800a7bc <HAL_UART_IRQHandler+0x574>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d04c      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a89      	ldr	r2, [pc, #548]	; (800a7c0 <HAL_UART_IRQHandler+0x578>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d045      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a87      	ldr	r2, [pc, #540]	; (800a7c4 <HAL_UART_IRQHandler+0x57c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d03e      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a84      	ldr	r2, [pc, #528]	; (800a7c8 <HAL_UART_IRQHandler+0x580>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d037      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a82      	ldr	r2, [pc, #520]	; (800a7cc <HAL_UART_IRQHandler+0x584>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d030      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a7f      	ldr	r2, [pc, #508]	; (800a7d0 <HAL_UART_IRQHandler+0x588>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d029      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a7d      	ldr	r2, [pc, #500]	; (800a7d4 <HAL_UART_IRQHandler+0x58c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d022      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a7a      	ldr	r2, [pc, #488]	; (800a7d8 <HAL_UART_IRQHandler+0x590>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d01b      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a78      	ldr	r2, [pc, #480]	; (800a7dc <HAL_UART_IRQHandler+0x594>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d014      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a75      	ldr	r2, [pc, #468]	; (800a7e0 <HAL_UART_IRQHandler+0x598>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d00d      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a73      	ldr	r2, [pc, #460]	; (800a7e4 <HAL_UART_IRQHandler+0x59c>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d006      	beq.n	800a62a <HAL_UART_IRQHandler+0x3e2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a70      	ldr	r2, [pc, #448]	; (800a7e8 <HAL_UART_IRQHandler+0x5a0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d106      	bne.n	800a638 <HAL_UART_IRQHandler+0x3f0>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	b29b      	uxth	r3, r3
 800a636:	e005      	b.n	800a644 <HAL_UART_IRQHandler+0x3fc>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	b29b      	uxth	r3, r3
 800a644:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 81ab 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a65c:	429a      	cmp	r2, r3
 800a65e:	f080 81a3 	bcs.w	800a9a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a678:	f000 8087 	beq.w	800a78a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a6a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1da      	bne.n	800a67c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6d8:	f023 0301 	bic.w	r3, r3, #1
 800a6dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e1      	bne.n	800a6c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3308      	adds	r3, #8
 800a722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a726:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a728:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a72c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e3      	bne.n	800a702 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a758:	f023 0310 	bic.w	r3, r3, #16
 800a75c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a76a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a76c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e4      	bne.n	800a748 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a784:	4618      	mov	r0, r3
 800a786:	f7f8 fc65 	bl	8003054 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2202      	movs	r2, #2
 800a78e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f6 fa9b 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7aa:	e0fd      	b.n	800a9a8 <HAL_UART_IRQHandler+0x760>
 800a7ac:	40020010 	.word	0x40020010
 800a7b0:	40020028 	.word	0x40020028
 800a7b4:	40020040 	.word	0x40020040
 800a7b8:	40020058 	.word	0x40020058
 800a7bc:	40020070 	.word	0x40020070
 800a7c0:	40020088 	.word	0x40020088
 800a7c4:	400200a0 	.word	0x400200a0
 800a7c8:	400200b8 	.word	0x400200b8
 800a7cc:	40020410 	.word	0x40020410
 800a7d0:	40020428 	.word	0x40020428
 800a7d4:	40020440 	.word	0x40020440
 800a7d8:	40020458 	.word	0x40020458
 800a7dc:	40020470 	.word	0x40020470
 800a7e0:	40020488 	.word	0x40020488
 800a7e4:	400204a0 	.word	0x400204a0
 800a7e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a806:	b29b      	uxth	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 80cf 	beq.w	800a9ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a80e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80ca 	beq.w	800a9ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a82c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a83a:	647b      	str	r3, [r7, #68]	; 0x44
 800a83c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e4      	bne.n	800a818 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	623b      	str	r3, [r7, #32]
   return(result);
 800a85e:	6a3a      	ldr	r2, [r7, #32]
 800a860:	4b55      	ldr	r3, [pc, #340]	; (800a9b8 <HAL_UART_IRQHandler+0x770>)
 800a862:	4013      	ands	r3, r2
 800a864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a872:	633a      	str	r2, [r7, #48]	; 0x30
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e3      	bne.n	800a84e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	e853 3f00 	ldrex	r3, [r3]
 800a8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0310 	bic.w	r3, r3, #16
 800a8ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8bc:	61fb      	str	r3, [r7, #28]
 800a8be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e4      	bne.n	800a89a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7f6 f9ff 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8e2:	e063      	b.n	800a9ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00e      	beq.n	800a90e <HAL_UART_IRQHandler+0x6c6>
 800a8f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d008      	beq.n	800a90e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f002 f8b6 	bl	800ca78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a90c:	e051      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a916:	2b00      	cmp	r3, #0
 800a918:	d014      	beq.n	800a944 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a91a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b00      	cmp	r3, #0
 800a924:	d105      	bne.n	800a932 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a92a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a936:	2b00      	cmp	r3, #0
 800a938:	d03a      	beq.n	800a9b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	4798      	blx	r3
    }
    return;
 800a942:	e035      	b.n	800a9b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d009      	beq.n	800a964 <HAL_UART_IRQHandler+0x71c>
 800a950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 fb43 	bl	800bfe8 <UART_EndTransmit_IT>
    return;
 800a962:	e026      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d009      	beq.n	800a984 <HAL_UART_IRQHandler+0x73c>
 800a970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d003      	beq.n	800a984 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f002 f88f 	bl	800caa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a982:	e016      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d010      	beq.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
 800a990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a994:	2b00      	cmp	r3, #0
 800a996:	da0c      	bge.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f002 f877 	bl	800ca8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a99e:	e008      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9a0:	bf00      	nop
 800a9a2:	e006      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a9a4:	bf00      	nop
 800a9a6:	e004      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9a8:	bf00      	nop
 800a9aa:	e002      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
      return;
 800a9ac:	bf00      	nop
 800a9ae:	e000      	b.n	800a9b2 <HAL_UART_IRQHandler+0x76a>
    return;
 800a9b0:	bf00      	nop
  }
}
 800a9b2:	37e8      	adds	r7, #232	; 0xe8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	effffffe 	.word	0xeffffffe

0800a9bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa10:	b092      	sub	sp, #72	; 0x48
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4bbe      	ldr	r3, [pc, #760]	; (800ad34 <UART_SetConfig+0x328>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa44:	430b      	orrs	r3, r1
 800aa46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	430a      	orrs	r2, r1
 800aa5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4ab3      	ldr	r2, [pc, #716]	; (800ad38 <UART_SetConfig+0x32c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d004      	beq.n	800aa78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa74:	4313      	orrs	r3, r2
 800aa76:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	4baf      	ldr	r3, [pc, #700]	; (800ad3c <UART_SetConfig+0x330>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	6812      	ldr	r2, [r2, #0]
 800aa86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	f023 010f 	bic.w	r1, r3, #15
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	430a      	orrs	r2, r1
 800aaa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4aa6      	ldr	r2, [pc, #664]	; (800ad40 <UART_SetConfig+0x334>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d177      	bne.n	800ab9c <UART_SetConfig+0x190>
 800aaac:	4ba5      	ldr	r3, [pc, #660]	; (800ad44 <UART_SetConfig+0x338>)
 800aaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aab4:	2b28      	cmp	r3, #40	; 0x28
 800aab6:	d86d      	bhi.n	800ab94 <UART_SetConfig+0x188>
 800aab8:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <UART_SetConfig+0xb4>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800ab65 	.word	0x0800ab65
 800aac4:	0800ab95 	.word	0x0800ab95
 800aac8:	0800ab95 	.word	0x0800ab95
 800aacc:	0800ab95 	.word	0x0800ab95
 800aad0:	0800ab95 	.word	0x0800ab95
 800aad4:	0800ab95 	.word	0x0800ab95
 800aad8:	0800ab95 	.word	0x0800ab95
 800aadc:	0800ab95 	.word	0x0800ab95
 800aae0:	0800ab6d 	.word	0x0800ab6d
 800aae4:	0800ab95 	.word	0x0800ab95
 800aae8:	0800ab95 	.word	0x0800ab95
 800aaec:	0800ab95 	.word	0x0800ab95
 800aaf0:	0800ab95 	.word	0x0800ab95
 800aaf4:	0800ab95 	.word	0x0800ab95
 800aaf8:	0800ab95 	.word	0x0800ab95
 800aafc:	0800ab95 	.word	0x0800ab95
 800ab00:	0800ab75 	.word	0x0800ab75
 800ab04:	0800ab95 	.word	0x0800ab95
 800ab08:	0800ab95 	.word	0x0800ab95
 800ab0c:	0800ab95 	.word	0x0800ab95
 800ab10:	0800ab95 	.word	0x0800ab95
 800ab14:	0800ab95 	.word	0x0800ab95
 800ab18:	0800ab95 	.word	0x0800ab95
 800ab1c:	0800ab95 	.word	0x0800ab95
 800ab20:	0800ab7d 	.word	0x0800ab7d
 800ab24:	0800ab95 	.word	0x0800ab95
 800ab28:	0800ab95 	.word	0x0800ab95
 800ab2c:	0800ab95 	.word	0x0800ab95
 800ab30:	0800ab95 	.word	0x0800ab95
 800ab34:	0800ab95 	.word	0x0800ab95
 800ab38:	0800ab95 	.word	0x0800ab95
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800ab85 	.word	0x0800ab85
 800ab44:	0800ab95 	.word	0x0800ab95
 800ab48:	0800ab95 	.word	0x0800ab95
 800ab4c:	0800ab95 	.word	0x0800ab95
 800ab50:	0800ab95 	.word	0x0800ab95
 800ab54:	0800ab95 	.word	0x0800ab95
 800ab58:	0800ab95 	.word	0x0800ab95
 800ab5c:	0800ab95 	.word	0x0800ab95
 800ab60:	0800ab8d 	.word	0x0800ab8d
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e222      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab6c:	2304      	movs	r3, #4
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e21e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab74:	2308      	movs	r3, #8
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e21a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e216      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab84:	2320      	movs	r3, #32
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e212      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab8c:	2340      	movs	r3, #64	; 0x40
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e20e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e20a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a69      	ldr	r2, [pc, #420]	; (800ad48 <UART_SetConfig+0x33c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d130      	bne.n	800ac08 <UART_SetConfig+0x1fc>
 800aba6:	4b67      	ldr	r3, [pc, #412]	; (800ad44 <UART_SetConfig+0x338>)
 800aba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abaa:	f003 0307 	and.w	r3, r3, #7
 800abae:	2b05      	cmp	r3, #5
 800abb0:	d826      	bhi.n	800ac00 <UART_SetConfig+0x1f4>
 800abb2:	a201      	add	r2, pc, #4	; (adr r2, 800abb8 <UART_SetConfig+0x1ac>)
 800abb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb8:	0800abd1 	.word	0x0800abd1
 800abbc:	0800abd9 	.word	0x0800abd9
 800abc0:	0800abe1 	.word	0x0800abe1
 800abc4:	0800abe9 	.word	0x0800abe9
 800abc8:	0800abf1 	.word	0x0800abf1
 800abcc:	0800abf9 	.word	0x0800abf9
 800abd0:	2300      	movs	r3, #0
 800abd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd6:	e1ec      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800abd8:	2304      	movs	r3, #4
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abde:	e1e8      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800abe0:	2308      	movs	r3, #8
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abe6:	e1e4      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800abe8:	2310      	movs	r3, #16
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abee:	e1e0      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800abf0:	2320      	movs	r3, #32
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf6:	e1dc      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800abf8:	2340      	movs	r3, #64	; 0x40
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e1d8      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac00:	2380      	movs	r3, #128	; 0x80
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac06:	e1d4      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a4f      	ldr	r2, [pc, #316]	; (800ad4c <UART_SetConfig+0x340>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d130      	bne.n	800ac74 <UART_SetConfig+0x268>
 800ac12:	4b4c      	ldr	r3, [pc, #304]	; (800ad44 <UART_SetConfig+0x338>)
 800ac14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	2b05      	cmp	r3, #5
 800ac1c:	d826      	bhi.n	800ac6c <UART_SetConfig+0x260>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <UART_SetConfig+0x218>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac3d 	.word	0x0800ac3d
 800ac28:	0800ac45 	.word	0x0800ac45
 800ac2c:	0800ac4d 	.word	0x0800ac4d
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac5d 	.word	0x0800ac5d
 800ac38:	0800ac65 	.word	0x0800ac65
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac42:	e1b6      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac44:	2304      	movs	r3, #4
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e1b2      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac4c:	2308      	movs	r3, #8
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e1ae      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac54:	2310      	movs	r3, #16
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e1aa      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac5c:	2320      	movs	r3, #32
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e1a6      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e1a2      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac6c:	2380      	movs	r3, #128	; 0x80
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac72:	e19e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a35      	ldr	r2, [pc, #212]	; (800ad50 <UART_SetConfig+0x344>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d130      	bne.n	800ace0 <UART_SetConfig+0x2d4>
 800ac7e:	4b31      	ldr	r3, [pc, #196]	; (800ad44 <UART_SetConfig+0x338>)
 800ac80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	d826      	bhi.n	800acd8 <UART_SetConfig+0x2cc>
 800ac8a:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <UART_SetConfig+0x284>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800aca9 	.word	0x0800aca9
 800ac94:	0800acb1 	.word	0x0800acb1
 800ac98:	0800acb9 	.word	0x0800acb9
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acc9 	.word	0x0800acc9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acae:	e180      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acb0:	2304      	movs	r3, #4
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e17c      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acb8:	2308      	movs	r3, #8
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e178      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acc0:	2310      	movs	r3, #16
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e174      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acc8:	2320      	movs	r3, #32
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e170      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e16c      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e168      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <UART_SetConfig+0x348>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d142      	bne.n	800ad70 <UART_SetConfig+0x364>
 800acea:	4b16      	ldr	r3, [pc, #88]	; (800ad44 <UART_SetConfig+0x338>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d838      	bhi.n	800ad68 <UART_SetConfig+0x35c>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <UART_SetConfig+0x2f0>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad15 	.word	0x0800ad15
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad25 	.word	0x0800ad25
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad59 	.word	0x0800ad59
 800ad10:	0800ad61 	.word	0x0800ad61
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e14a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e146      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e142      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e13e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad34:	cfff69f3 	.word	0xcfff69f3
 800ad38:	58000c00 	.word	0x58000c00
 800ad3c:	11fff4ff 	.word	0x11fff4ff
 800ad40:	40011000 	.word	0x40011000
 800ad44:	58024400 	.word	0x58024400
 800ad48:	40004400 	.word	0x40004400
 800ad4c:	40004800 	.word	0x40004800
 800ad50:	40004c00 	.word	0x40004c00
 800ad54:	40005000 	.word	0x40005000
 800ad58:	2320      	movs	r3, #32
 800ad5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad5e:	e128      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e124      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad68:	2380      	movs	r3, #128	; 0x80
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6e:	e120      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4acb      	ldr	r2, [pc, #812]	; (800b0a4 <UART_SetConfig+0x698>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d176      	bne.n	800ae68 <UART_SetConfig+0x45c>
 800ad7a:	4bcb      	ldr	r3, [pc, #812]	; (800b0a8 <UART_SetConfig+0x69c>)
 800ad7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad82:	2b28      	cmp	r3, #40	; 0x28
 800ad84:	d86c      	bhi.n	800ae60 <UART_SetConfig+0x454>
 800ad86:	a201      	add	r2, pc, #4	; (adr r2, 800ad8c <UART_SetConfig+0x380>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800ae31 	.word	0x0800ae31
 800ad90:	0800ae61 	.word	0x0800ae61
 800ad94:	0800ae61 	.word	0x0800ae61
 800ad98:	0800ae61 	.word	0x0800ae61
 800ad9c:	0800ae61 	.word	0x0800ae61
 800ada0:	0800ae61 	.word	0x0800ae61
 800ada4:	0800ae61 	.word	0x0800ae61
 800ada8:	0800ae61 	.word	0x0800ae61
 800adac:	0800ae39 	.word	0x0800ae39
 800adb0:	0800ae61 	.word	0x0800ae61
 800adb4:	0800ae61 	.word	0x0800ae61
 800adb8:	0800ae61 	.word	0x0800ae61
 800adbc:	0800ae61 	.word	0x0800ae61
 800adc0:	0800ae61 	.word	0x0800ae61
 800adc4:	0800ae61 	.word	0x0800ae61
 800adc8:	0800ae61 	.word	0x0800ae61
 800adcc:	0800ae41 	.word	0x0800ae41
 800add0:	0800ae61 	.word	0x0800ae61
 800add4:	0800ae61 	.word	0x0800ae61
 800add8:	0800ae61 	.word	0x0800ae61
 800addc:	0800ae61 	.word	0x0800ae61
 800ade0:	0800ae61 	.word	0x0800ae61
 800ade4:	0800ae61 	.word	0x0800ae61
 800ade8:	0800ae61 	.word	0x0800ae61
 800adec:	0800ae49 	.word	0x0800ae49
 800adf0:	0800ae61 	.word	0x0800ae61
 800adf4:	0800ae61 	.word	0x0800ae61
 800adf8:	0800ae61 	.word	0x0800ae61
 800adfc:	0800ae61 	.word	0x0800ae61
 800ae00:	0800ae61 	.word	0x0800ae61
 800ae04:	0800ae61 	.word	0x0800ae61
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800ae51 	.word	0x0800ae51
 800ae10:	0800ae61 	.word	0x0800ae61
 800ae14:	0800ae61 	.word	0x0800ae61
 800ae18:	0800ae61 	.word	0x0800ae61
 800ae1c:	0800ae61 	.word	0x0800ae61
 800ae20:	0800ae61 	.word	0x0800ae61
 800ae24:	0800ae61 	.word	0x0800ae61
 800ae28:	0800ae61 	.word	0x0800ae61
 800ae2c:	0800ae59 	.word	0x0800ae59
 800ae30:	2301      	movs	r3, #1
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae36:	e0bc      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae38:	2304      	movs	r3, #4
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3e:	e0b8      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae40:	2308      	movs	r3, #8
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae46:	e0b4      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae48:	2310      	movs	r3, #16
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae4e:	e0b0      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae50:	2320      	movs	r3, #32
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae56:	e0ac      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae58:	2340      	movs	r3, #64	; 0x40
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e0a8      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae60:	2380      	movs	r3, #128	; 0x80
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae66:	e0a4      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a8f      	ldr	r2, [pc, #572]	; (800b0ac <UART_SetConfig+0x6a0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d130      	bne.n	800aed4 <UART_SetConfig+0x4c8>
 800ae72:	4b8d      	ldr	r3, [pc, #564]	; (800b0a8 <UART_SetConfig+0x69c>)
 800ae74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b05      	cmp	r3, #5
 800ae7c:	d826      	bhi.n	800aecc <UART_SetConfig+0x4c0>
 800ae7e:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <UART_SetConfig+0x478>)
 800ae80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae84:	0800ae9d 	.word	0x0800ae9d
 800ae88:	0800aea5 	.word	0x0800aea5
 800ae8c:	0800aead 	.word	0x0800aead
 800ae90:	0800aeb5 	.word	0x0800aeb5
 800ae94:	0800aebd 	.word	0x0800aebd
 800ae98:	0800aec5 	.word	0x0800aec5
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea2:	e086      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aea4:	2304      	movs	r3, #4
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e082      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aeac:	2308      	movs	r3, #8
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e07e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e07a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aebc:	2320      	movs	r3, #32
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e076      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aec4:	2340      	movs	r3, #64	; 0x40
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeca:	e072      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aecc:	2380      	movs	r3, #128	; 0x80
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed2:	e06e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a75      	ldr	r2, [pc, #468]	; (800b0b0 <UART_SetConfig+0x6a4>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d130      	bne.n	800af40 <UART_SetConfig+0x534>
 800aede:	4b72      	ldr	r3, [pc, #456]	; (800b0a8 <UART_SetConfig+0x69c>)
 800aee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	2b05      	cmp	r3, #5
 800aee8:	d826      	bhi.n	800af38 <UART_SetConfig+0x52c>
 800aeea:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <UART_SetConfig+0x4e4>)
 800aeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef0:	0800af09 	.word	0x0800af09
 800aef4:	0800af11 	.word	0x0800af11
 800aef8:	0800af19 	.word	0x0800af19
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af31 	.word	0x0800af31
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0e:	e050      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af10:	2304      	movs	r3, #4
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e04c      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af18:	2308      	movs	r3, #8
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e048      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af20:	2310      	movs	r3, #16
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e044      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af28:	2320      	movs	r3, #32
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e040      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e03c      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3e:	e038      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a5b      	ldr	r2, [pc, #364]	; (800b0b4 <UART_SetConfig+0x6a8>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d130      	bne.n	800afac <UART_SetConfig+0x5a0>
 800af4a:	4b57      	ldr	r3, [pc, #348]	; (800b0a8 <UART_SetConfig+0x69c>)
 800af4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	2b05      	cmp	r3, #5
 800af54:	d826      	bhi.n	800afa4 <UART_SetConfig+0x598>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <UART_SetConfig+0x550>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800af75 	.word	0x0800af75
 800af60:	0800af7d 	.word	0x0800af7d
 800af64:	0800af85 	.word	0x0800af85
 800af68:	0800af8d 	.word	0x0800af8d
 800af6c:	0800af95 	.word	0x0800af95
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	2302      	movs	r3, #2
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7a:	e01a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af82:	e016      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e012      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e00e      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af94:	2320      	movs	r3, #32
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e00a      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e006      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800afa4:	2380      	movs	r3, #128	; 0x80
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e002      	b.n	800afb2 <UART_SetConfig+0x5a6>
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a3f      	ldr	r2, [pc, #252]	; (800b0b4 <UART_SetConfig+0x6a8>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	f040 80f8 	bne.w	800b1ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	dc46      	bgt.n	800b054 <UART_SetConfig+0x648>
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	f2c0 8082 	blt.w	800b0d0 <UART_SetConfig+0x6c4>
 800afcc:	3b02      	subs	r3, #2
 800afce:	2b1e      	cmp	r3, #30
 800afd0:	d87e      	bhi.n	800b0d0 <UART_SetConfig+0x6c4>
 800afd2:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <UART_SetConfig+0x5cc>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800b05b 	.word	0x0800b05b
 800afdc:	0800b0d1 	.word	0x0800b0d1
 800afe0:	0800b063 	.word	0x0800b063
 800afe4:	0800b0d1 	.word	0x0800b0d1
 800afe8:	0800b0d1 	.word	0x0800b0d1
 800afec:	0800b0d1 	.word	0x0800b0d1
 800aff0:	0800b073 	.word	0x0800b073
 800aff4:	0800b0d1 	.word	0x0800b0d1
 800aff8:	0800b0d1 	.word	0x0800b0d1
 800affc:	0800b0d1 	.word	0x0800b0d1
 800b000:	0800b0d1 	.word	0x0800b0d1
 800b004:	0800b0d1 	.word	0x0800b0d1
 800b008:	0800b0d1 	.word	0x0800b0d1
 800b00c:	0800b0d1 	.word	0x0800b0d1
 800b010:	0800b083 	.word	0x0800b083
 800b014:	0800b0d1 	.word	0x0800b0d1
 800b018:	0800b0d1 	.word	0x0800b0d1
 800b01c:	0800b0d1 	.word	0x0800b0d1
 800b020:	0800b0d1 	.word	0x0800b0d1
 800b024:	0800b0d1 	.word	0x0800b0d1
 800b028:	0800b0d1 	.word	0x0800b0d1
 800b02c:	0800b0d1 	.word	0x0800b0d1
 800b030:	0800b0d1 	.word	0x0800b0d1
 800b034:	0800b0d1 	.word	0x0800b0d1
 800b038:	0800b0d1 	.word	0x0800b0d1
 800b03c:	0800b0d1 	.word	0x0800b0d1
 800b040:	0800b0d1 	.word	0x0800b0d1
 800b044:	0800b0d1 	.word	0x0800b0d1
 800b048:	0800b0d1 	.word	0x0800b0d1
 800b04c:	0800b0d1 	.word	0x0800b0d1
 800b050:	0800b0c3 	.word	0x0800b0c3
 800b054:	2b40      	cmp	r3, #64	; 0x40
 800b056:	d037      	beq.n	800b0c8 <UART_SetConfig+0x6bc>
 800b058:	e03a      	b.n	800b0d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b05a:	f7fe f803 	bl	8009064 <HAL_RCCEx_GetD3PCLK1Freq>
 800b05e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b060:	e03c      	b.n	800b0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe f812 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b070:	e034      	b.n	800b0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b072:	f107 0318 	add.w	r3, r7, #24
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe f95e 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b080:	e02c      	b.n	800b0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b082:	4b09      	ldr	r3, [pc, #36]	; (800b0a8 <UART_SetConfig+0x69c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d016      	beq.n	800b0bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b08e:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <UART_SetConfig+0x69c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	08db      	lsrs	r3, r3, #3
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	4a07      	ldr	r2, [pc, #28]	; (800b0b8 <UART_SetConfig+0x6ac>)
 800b09a:	fa22 f303 	lsr.w	r3, r2, r3
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a0:	e01c      	b.n	800b0dc <UART_SetConfig+0x6d0>
 800b0a2:	bf00      	nop
 800b0a4:	40011400 	.word	0x40011400
 800b0a8:	58024400 	.word	0x58024400
 800b0ac:	40007800 	.word	0x40007800
 800b0b0:	40007c00 	.word	0x40007c00
 800b0b4:	58000c00 	.word	0x58000c00
 800b0b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b0bc:	4b9d      	ldr	r3, [pc, #628]	; (800b334 <UART_SetConfig+0x928>)
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e00c      	b.n	800b0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0c2:	4b9d      	ldr	r3, [pc, #628]	; (800b338 <UART_SetConfig+0x92c>)
 800b0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c6:	e009      	b.n	800b0dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ce:	e005      	b.n	800b0dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 81de 	beq.w	800b4a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	4a94      	ldr	r2, [pc, #592]	; (800b33c <UART_SetConfig+0x930>)
 800b0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	4413      	add	r3, r2
 800b102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b104:	429a      	cmp	r2, r3
 800b106:	d305      	bcc.n	800b114 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b110:	429a      	cmp	r2, r3
 800b112:	d903      	bls.n	800b11c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b114:	2301      	movs	r3, #1
 800b116:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b11a:	e1c1      	b.n	800b4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b11e:	2200      	movs	r2, #0
 800b120:	60bb      	str	r3, [r7, #8]
 800b122:	60fa      	str	r2, [r7, #12]
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	4a84      	ldr	r2, [pc, #528]	; (800b33c <UART_SetConfig+0x930>)
 800b12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2200      	movs	r2, #0
 800b132:	603b      	str	r3, [r7, #0]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b13a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b13e:	f7f5 fae3 	bl	8000708 <__aeabi_uldivmod>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	4610      	mov	r0, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	f04f 0300 	mov.w	r3, #0
 800b152:	020b      	lsls	r3, r1, #8
 800b154:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b158:	0202      	lsls	r2, r0, #8
 800b15a:	6979      	ldr	r1, [r7, #20]
 800b15c:	6849      	ldr	r1, [r1, #4]
 800b15e:	0849      	lsrs	r1, r1, #1
 800b160:	2000      	movs	r0, #0
 800b162:	460c      	mov	r4, r1
 800b164:	4605      	mov	r5, r0
 800b166:	eb12 0804 	adds.w	r8, r2, r4
 800b16a:	eb43 0905 	adc.w	r9, r3, r5
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	469a      	mov	sl, r3
 800b176:	4693      	mov	fp, r2
 800b178:	4652      	mov	r2, sl
 800b17a:	465b      	mov	r3, fp
 800b17c:	4640      	mov	r0, r8
 800b17e:	4649      	mov	r1, r9
 800b180:	f7f5 fac2 	bl	8000708 <__aeabi_uldivmod>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4613      	mov	r3, r2
 800b18a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b192:	d308      	bcc.n	800b1a6 <UART_SetConfig+0x79a>
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b19a:	d204      	bcs.n	800b1a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a2:	60da      	str	r2, [r3, #12]
 800b1a4:	e17c      	b.n	800b4a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b1ac:	e178      	b.n	800b4a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1b6:	f040 80c5 	bne.w	800b344 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b1ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	dc48      	bgt.n	800b254 <UART_SetConfig+0x848>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	db7b      	blt.n	800b2be <UART_SetConfig+0x8b2>
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	d879      	bhi.n	800b2be <UART_SetConfig+0x8b2>
 800b1ca:	a201      	add	r2, pc, #4	; (adr r2, 800b1d0 <UART_SetConfig+0x7c4>)
 800b1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d0:	0800b25b 	.word	0x0800b25b
 800b1d4:	0800b263 	.word	0x0800b263
 800b1d8:	0800b2bf 	.word	0x0800b2bf
 800b1dc:	0800b2bf 	.word	0x0800b2bf
 800b1e0:	0800b26b 	.word	0x0800b26b
 800b1e4:	0800b2bf 	.word	0x0800b2bf
 800b1e8:	0800b2bf 	.word	0x0800b2bf
 800b1ec:	0800b2bf 	.word	0x0800b2bf
 800b1f0:	0800b27b 	.word	0x0800b27b
 800b1f4:	0800b2bf 	.word	0x0800b2bf
 800b1f8:	0800b2bf 	.word	0x0800b2bf
 800b1fc:	0800b2bf 	.word	0x0800b2bf
 800b200:	0800b2bf 	.word	0x0800b2bf
 800b204:	0800b2bf 	.word	0x0800b2bf
 800b208:	0800b2bf 	.word	0x0800b2bf
 800b20c:	0800b2bf 	.word	0x0800b2bf
 800b210:	0800b28b 	.word	0x0800b28b
 800b214:	0800b2bf 	.word	0x0800b2bf
 800b218:	0800b2bf 	.word	0x0800b2bf
 800b21c:	0800b2bf 	.word	0x0800b2bf
 800b220:	0800b2bf 	.word	0x0800b2bf
 800b224:	0800b2bf 	.word	0x0800b2bf
 800b228:	0800b2bf 	.word	0x0800b2bf
 800b22c:	0800b2bf 	.word	0x0800b2bf
 800b230:	0800b2bf 	.word	0x0800b2bf
 800b234:	0800b2bf 	.word	0x0800b2bf
 800b238:	0800b2bf 	.word	0x0800b2bf
 800b23c:	0800b2bf 	.word	0x0800b2bf
 800b240:	0800b2bf 	.word	0x0800b2bf
 800b244:	0800b2bf 	.word	0x0800b2bf
 800b248:	0800b2bf 	.word	0x0800b2bf
 800b24c:	0800b2bf 	.word	0x0800b2bf
 800b250:	0800b2b1 	.word	0x0800b2b1
 800b254:	2b40      	cmp	r3, #64	; 0x40
 800b256:	d02e      	beq.n	800b2b6 <UART_SetConfig+0x8aa>
 800b258:	e031      	b.n	800b2be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b25a:	f7fc fc8b 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
 800b25e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b260:	e033      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b262:	f7fc fc9d 	bl	8007ba0 <HAL_RCC_GetPCLK2Freq>
 800b266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b268:	e02f      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fd ff0e 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b278:	e027      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b27a:	f107 0318 	add.w	r3, r7, #24
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe f85a 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b288:	e01f      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b28a:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <UART_SetConfig+0x934>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0320 	and.w	r3, r3, #32
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b296:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <UART_SetConfig+0x934>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	08db      	lsrs	r3, r3, #3
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	4a24      	ldr	r2, [pc, #144]	; (800b334 <UART_SetConfig+0x928>)
 800b2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2a8:	e00f      	b.n	800b2ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2aa:	4b22      	ldr	r3, [pc, #136]	; (800b334 <UART_SetConfig+0x928>)
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ae:	e00c      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2b0:	4b21      	ldr	r3, [pc, #132]	; (800b338 <UART_SetConfig+0x92c>)
 800b2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b4:	e009      	b.n	800b2ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2bc:	e005      	b.n	800b2ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b2c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80e7 	beq.w	800b4a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	4a19      	ldr	r2, [pc, #100]	; (800b33c <UART_SetConfig+0x930>)
 800b2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2e4:	005a      	lsls	r2, r3, #1
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	441a      	add	r2, r3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	2b0f      	cmp	r3, #15
 800b2fc:	d916      	bls.n	800b32c <UART_SetConfig+0x920>
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b304:	d212      	bcs.n	800b32c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f023 030f 	bic.w	r3, r3, #15
 800b30e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	085b      	lsrs	r3, r3, #1
 800b314:	b29b      	uxth	r3, r3
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b31e:	4313      	orrs	r3, r2
 800b320:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	e0b9      	b.n	800b4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b332:	e0b5      	b.n	800b4a0 <UART_SetConfig+0xa94>
 800b334:	03d09000 	.word	0x03d09000
 800b338:	003d0900 	.word	0x003d0900
 800b33c:	08020e8c 	.word	0x08020e8c
 800b340:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b344:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b348:	2b20      	cmp	r3, #32
 800b34a:	dc49      	bgt.n	800b3e0 <UART_SetConfig+0x9d4>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	db7c      	blt.n	800b44a <UART_SetConfig+0xa3e>
 800b350:	2b20      	cmp	r3, #32
 800b352:	d87a      	bhi.n	800b44a <UART_SetConfig+0xa3e>
 800b354:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <UART_SetConfig+0x950>)
 800b356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35a:	bf00      	nop
 800b35c:	0800b3e7 	.word	0x0800b3e7
 800b360:	0800b3ef 	.word	0x0800b3ef
 800b364:	0800b44b 	.word	0x0800b44b
 800b368:	0800b44b 	.word	0x0800b44b
 800b36c:	0800b3f7 	.word	0x0800b3f7
 800b370:	0800b44b 	.word	0x0800b44b
 800b374:	0800b44b 	.word	0x0800b44b
 800b378:	0800b44b 	.word	0x0800b44b
 800b37c:	0800b407 	.word	0x0800b407
 800b380:	0800b44b 	.word	0x0800b44b
 800b384:	0800b44b 	.word	0x0800b44b
 800b388:	0800b44b 	.word	0x0800b44b
 800b38c:	0800b44b 	.word	0x0800b44b
 800b390:	0800b44b 	.word	0x0800b44b
 800b394:	0800b44b 	.word	0x0800b44b
 800b398:	0800b44b 	.word	0x0800b44b
 800b39c:	0800b417 	.word	0x0800b417
 800b3a0:	0800b44b 	.word	0x0800b44b
 800b3a4:	0800b44b 	.word	0x0800b44b
 800b3a8:	0800b44b 	.word	0x0800b44b
 800b3ac:	0800b44b 	.word	0x0800b44b
 800b3b0:	0800b44b 	.word	0x0800b44b
 800b3b4:	0800b44b 	.word	0x0800b44b
 800b3b8:	0800b44b 	.word	0x0800b44b
 800b3bc:	0800b44b 	.word	0x0800b44b
 800b3c0:	0800b44b 	.word	0x0800b44b
 800b3c4:	0800b44b 	.word	0x0800b44b
 800b3c8:	0800b44b 	.word	0x0800b44b
 800b3cc:	0800b44b 	.word	0x0800b44b
 800b3d0:	0800b44b 	.word	0x0800b44b
 800b3d4:	0800b44b 	.word	0x0800b44b
 800b3d8:	0800b44b 	.word	0x0800b44b
 800b3dc:	0800b43d 	.word	0x0800b43d
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d02e      	beq.n	800b442 <UART_SetConfig+0xa36>
 800b3e4:	e031      	b.n	800b44a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3e6:	f7fc fbc5 	bl	8007b74 <HAL_RCC_GetPCLK1Freq>
 800b3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3ec:	e033      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3ee:	f7fc fbd7 	bl	8007ba0 <HAL_RCC_GetPCLK2Freq>
 800b3f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3f4:	e02f      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fd fe48 	bl	8009090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b404:	e027      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b406:	f107 0318 	add.w	r3, r7, #24
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fd ff94 	bl	8009338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b414:	e01f      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b416:	4b2d      	ldr	r3, [pc, #180]	; (800b4cc <UART_SetConfig+0xac0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d009      	beq.n	800b436 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b422:	4b2a      	ldr	r3, [pc, #168]	; (800b4cc <UART_SetConfig+0xac0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	08db      	lsrs	r3, r3, #3
 800b428:	f003 0303 	and.w	r3, r3, #3
 800b42c:	4a28      	ldr	r2, [pc, #160]	; (800b4d0 <UART_SetConfig+0xac4>)
 800b42e:	fa22 f303 	lsr.w	r3, r2, r3
 800b432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b434:	e00f      	b.n	800b456 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b436:	4b26      	ldr	r3, [pc, #152]	; (800b4d0 <UART_SetConfig+0xac4>)
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b43a:	e00c      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b43c:	4b25      	ldr	r3, [pc, #148]	; (800b4d4 <UART_SetConfig+0xac8>)
 800b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b440:	e009      	b.n	800b456 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b448:	e005      	b.n	800b456 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b454:	bf00      	nop
    }

    if (pclk != 0U)
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d021      	beq.n	800b4a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b460:	4a1d      	ldr	r2, [pc, #116]	; (800b4d8 <UART_SetConfig+0xacc>)
 800b462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b466:	461a      	mov	r2, r3
 800b468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	085b      	lsrs	r3, r3, #1
 800b474:	441a      	add	r2, r3
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	2b0f      	cmp	r3, #15
 800b484:	d909      	bls.n	800b49a <UART_SetConfig+0xa8e>
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b48c:	d205      	bcs.n	800b49a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	b29a      	uxth	r2, r3
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60da      	str	r2, [r3, #12]
 800b498:	e002      	b.n	800b4a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b4bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3748      	adds	r7, #72	; 0x48
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	03d09000 	.word	0x03d09000
 800b4d4:	003d0900 	.word	0x003d0900
 800b4d8:	08020e8c 	.word	0x08020e8c

0800b4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	430a      	orrs	r2, r1
 800b526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	f003 0308 	and.w	r3, r3, #8
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00a      	beq.n	800b58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01a      	beq.n	800b5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5da:	d10a      	bne.n	800b5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	430a      	orrs	r2, r1
 800b612:	605a      	str	r2, [r3, #4]
  }
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b098      	sub	sp, #96	; 0x60
 800b624:	af02      	add	r7, sp, #8
 800b626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b630:	f7f6 fe1a 	bl	8002268 <HAL_GetTick>
 800b634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0308 	and.w	r3, r3, #8
 800b640:	2b08      	cmp	r3, #8
 800b642:	d12f      	bne.n	800b6a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b64c:	2200      	movs	r2, #0
 800b64e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f88e 	bl	800b774 <UART_WaitOnFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d022      	beq.n	800b6a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b666:	e853 3f00 	ldrex	r3, [r3]
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b672:	653b      	str	r3, [r7, #80]	; 0x50
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b67c:	647b      	str	r3, [r7, #68]	; 0x44
 800b67e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b684:	e841 2300 	strex	r3, r2, [r1]
 800b688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1e6      	bne.n	800b65e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2220      	movs	r2, #32
 800b694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e063      	b.n	800b76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0304 	and.w	r3, r3, #4
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	d149      	bne.n	800b746 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f857 	bl	800b774 <UART_WaitOnFlagUntilTimeout>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d03c      	beq.n	800b746 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	623b      	str	r3, [r7, #32]
   return(result);
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b6ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e6      	bne.n	800b6cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f023 0301 	bic.w	r3, r3, #1
 800b714:	64bb      	str	r3, [r7, #72]	; 0x48
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b71e:	61fa      	str	r2, [r7, #28]
 800b720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	69b9      	ldr	r1, [r7, #24]
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	617b      	str	r3, [r7, #20]
   return(result);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e5      	bne.n	800b6fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e012      	b.n	800b76c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3758      	adds	r7, #88	; 0x58
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	4613      	mov	r3, r2
 800b782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b784:	e049      	b.n	800b81a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78c:	d045      	beq.n	800b81a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78e:	f7f6 fd6b 	bl	8002268 <HAL_GetTick>
 800b792:	4602      	mov	r2, r0
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d302      	bcc.n	800b7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e048      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0304 	and.w	r3, r3, #4
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d031      	beq.n	800b81a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	f003 0308 	and.w	r3, r3, #8
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d110      	bne.n	800b7e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 fa43 	bl	800bc58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e029      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f4:	d111      	bne.n	800b81a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 fa29 	bl	800bc58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2220      	movs	r2, #32
 800b80a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e00f      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	69da      	ldr	r2, [r3, #28]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4013      	ands	r3, r2
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	429a      	cmp	r2, r3
 800b828:	bf0c      	ite	eq
 800b82a:	2301      	moveq	r3, #1
 800b82c:	2300      	movne	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	429a      	cmp	r2, r3
 800b836:	d0a6      	beq.n	800b786 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b844:	b480      	push	{r7}
 800b846:	b0a3      	sub	sp, #140	; 0x8c
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4613      	mov	r3, r2
 800b850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	88fa      	ldrh	r2, [r7, #6]
 800b85c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b876:	d10e      	bne.n	800b896 <UART_Start_Receive_IT+0x52>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <UART_Start_Receive_IT+0x48>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b88a:	e02d      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	22ff      	movs	r2, #255	; 0xff
 800b890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b894:	e028      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10d      	bne.n	800b8ba <UART_Start_Receive_IT+0x76>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <UART_Start_Receive_IT+0x6c>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	22ff      	movs	r2, #255	; 0xff
 800b8aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8ae:	e01b      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	227f      	movs	r2, #127	; 0x7f
 800b8b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8b8:	e016      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c2:	d10d      	bne.n	800b8e0 <UART_Start_Receive_IT+0x9c>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d104      	bne.n	800b8d6 <UART_Start_Receive_IT+0x92>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	227f      	movs	r2, #127	; 0x7f
 800b8d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8d4:	e008      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	223f      	movs	r2, #63	; 0x3f
 800b8da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8de:	e003      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2222      	movs	r2, #34	; 0x22
 800b8f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b90a:	f043 0301 	orr.w	r3, r3, #1
 800b90e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b91c:	673a      	str	r2, [r7, #112]	; 0x70
 800b91e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b92a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e3      	bne.n	800b8f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b938:	d14f      	bne.n	800b9da <UART_Start_Receive_IT+0x196>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b940:	88fa      	ldrh	r2, [r7, #6]
 800b942:	429a      	cmp	r2, r3
 800b944:	d349      	bcc.n	800b9da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b94e:	d107      	bne.n	800b960 <UART_Start_Receive_IT+0x11c>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4a47      	ldr	r2, [pc, #284]	; (800ba78 <UART_Start_Receive_IT+0x234>)
 800b95c:	675a      	str	r2, [r3, #116]	; 0x74
 800b95e:	e002      	b.n	800b966 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a46      	ldr	r2, [pc, #280]	; (800ba7c <UART_Start_Receive_IT+0x238>)
 800b964:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d01a      	beq.n	800b9a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b990:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b992:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e4      	bne.n	800b96e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b9c4:	64ba      	str	r2, [r7, #72]	; 0x48
 800b9c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e5      	bne.n	800b9a4 <UART_Start_Receive_IT+0x160>
 800b9d8:	e046      	b.n	800ba68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9e2:	d107      	bne.n	800b9f4 <UART_Start_Receive_IT+0x1b0>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d103      	bne.n	800b9f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4a24      	ldr	r2, [pc, #144]	; (800ba80 <UART_Start_Receive_IT+0x23c>)
 800b9f0:	675a      	str	r2, [r3, #116]	; 0x74
 800b9f2:	e002      	b.n	800b9fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a23      	ldr	r2, [pc, #140]	; (800ba84 <UART_Start_Receive_IT+0x240>)
 800b9f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d019      	beq.n	800ba36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	e853 3f00 	ldrex	r3, [r3]
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ba16:	677b      	str	r3, [r7, #116]	; 0x74
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
 800ba22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba28:	e841 2300 	strex	r3, r2, [r1]
 800ba2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1e6      	bne.n	800ba02 <UART_Start_Receive_IT+0x1be>
 800ba34:	e018      	b.n	800ba68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	613b      	str	r3, [r7, #16]
   return(result);
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f043 0320 	orr.w	r3, r3, #32
 800ba4a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	461a      	mov	r2, r3
 800ba52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba54:	623b      	str	r3, [r7, #32]
 800ba56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	69f9      	ldr	r1, [r7, #28]
 800ba5a:	6a3a      	ldr	r2, [r7, #32]
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e6      	bne.n	800ba36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	378c      	adds	r7, #140	; 0x8c
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	0800c711 	.word	0x0800c711
 800ba7c:	0800c3b1 	.word	0x0800c3b1
 800ba80:	0800c1f9 	.word	0x0800c1f9
 800ba84:	0800c041 	.word	0x0800c041

0800ba88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b096      	sub	sp, #88	; 0x58
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	4613      	mov	r3, r2
 800ba94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	88fa      	ldrh	r2, [r7, #6]
 800baa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2222      	movs	r2, #34	; 0x22
 800bab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	d02d      	beq.n	800bb1a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac4:	4a40      	ldr	r2, [pc, #256]	; (800bbc8 <UART_Start_Receive_DMA+0x140>)
 800bac6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bace:	4a3f      	ldr	r2, [pc, #252]	; (800bbcc <UART_Start_Receive_DMA+0x144>)
 800bad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad8:	4a3d      	ldr	r2, [pc, #244]	; (800bbd0 <UART_Start_Receive_DMA+0x148>)
 800bada:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae2:	2200      	movs	r2, #0
 800bae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3324      	adds	r3, #36	; 0x24
 800baf2:	4619      	mov	r1, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf8:	461a      	mov	r2, r3
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	f7f7 f840 	bl	8002b80 <HAL_DMA_Start_IT>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d009      	beq.n	800bb1a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2210      	movs	r2, #16
 800bb0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2220      	movs	r2, #32
 800bb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e051      	b.n	800bbbe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d018      	beq.n	800bb54 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb36:	657b      	str	r3, [r7, #84]	; 0x54
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb40:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb42:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e6      	bne.n	800bb22 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3308      	adds	r3, #8
 800bb5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	f043 0301 	orr.w	r3, r3, #1
 800bb6a:	653b      	str	r3, [r7, #80]	; 0x50
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3308      	adds	r3, #8
 800bb72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb74:	637a      	str	r2, [r7, #52]	; 0x34
 800bb76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb7c:	e841 2300 	strex	r3, r2, [r1]
 800bb80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1e5      	bne.n	800bb54 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	e853 3f00 	ldrex	r3, [r3]
 800bb96:	613b      	str	r3, [r7, #16]
   return(result);
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3308      	adds	r3, #8
 800bba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bba8:	623a      	str	r2, [r7, #32]
 800bbaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbac:	69f9      	ldr	r1, [r7, #28]
 800bbae:	6a3a      	ldr	r2, [r7, #32]
 800bbb0:	e841 2300 	strex	r3, r2, [r1]
 800bbb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e5      	bne.n	800bb88 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3758      	adds	r7, #88	; 0x58
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	0800bdd7 	.word	0x0800bdd7
 800bbcc:	0800beff 	.word	0x0800beff
 800bbd0:	0800bf3d 	.word	0x0800bf3d

0800bbd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b08f      	sub	sp, #60	; 0x3c
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e6      	bne.n	800bbdc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc24:	633b      	str	r3, [r7, #48]	; 0x30
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc2e:	61ba      	str	r2, [r7, #24]
 800bc30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6979      	ldr	r1, [r7, #20]
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e5      	bne.n	800bc0e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bc4a:	bf00      	nop
 800bc4c:	373c      	adds	r7, #60	; 0x3c
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
	...

0800bc58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b095      	sub	sp, #84	; 0x54
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e6      	bne.n	800bc60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca2:	69fa      	ldr	r2, [r7, #28]
 800bca4:	4b1e      	ldr	r3, [pc, #120]	; (800bd20 <UART_EndRxTransfer+0xc8>)
 800bca6:	4013      	ands	r3, r2
 800bca8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3308      	adds	r3, #8
 800bcb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e5      	bne.n	800bc92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d118      	bne.n	800bd00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	e853 3f00 	ldrex	r3, [r3]
 800bcda:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f023 0310 	bic.w	r3, r3, #16
 800bce2:	647b      	str	r3, [r7, #68]	; 0x44
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	461a      	mov	r2, r3
 800bcea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcec:	61bb      	str	r3, [r7, #24]
 800bcee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6979      	ldr	r1, [r7, #20]
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e6      	bne.n	800bcce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bd14:	bf00      	nop
 800bd16:	3754      	adds	r7, #84	; 0x54
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	effffffe 	.word	0xeffffffe

0800bd24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b090      	sub	sp, #64	; 0x40
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd30:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd3a:	d037      	beq.n	800bdac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bd3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3308      	adds	r3, #8
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	e853 3f00 	ldrex	r3, [r3]
 800bd52:	623b      	str	r3, [r7, #32]
   return(result);
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3308      	adds	r3, #8
 800bd62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd64:	633a      	str	r2, [r7, #48]	; 0x30
 800bd66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e5      	bne.n	800bd44 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	e853 3f00 	ldrex	r3, [r3]
 800bd84:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9a:	69b9      	ldr	r1, [r7, #24]
 800bd9c:	69fa      	ldr	r2, [r7, #28]
 800bd9e:	e841 2300 	strex	r3, r2, [r1]
 800bda2:	617b      	str	r3, [r7, #20]
   return(result);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1e6      	bne.n	800bd78 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdaa:	e002      	b.n	800bdb2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800bdac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdae:	f7fe fe05 	bl	800a9bc <HAL_UART_TxCpltCallback>
}
 800bdb2:	bf00      	nop
 800bdb4:	3740      	adds	r7, #64	; 0x40
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7fe fe01 	bl	800a9d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdce:	bf00      	nop
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b09c      	sub	sp, #112	; 0x70
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdec:	d071      	beq.n	800bed2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800be0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	461a      	mov	r2, r3
 800be12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be14:	65bb      	str	r3, [r7, #88]	; 0x58
 800be16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e6      	bne.n	800bdf6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3308      	adds	r3, #8
 800be2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	e853 3f00 	ldrex	r3, [r3]
 800be36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	667b      	str	r3, [r7, #100]	; 0x64
 800be40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be48:	647a      	str	r2, [r7, #68]	; 0x44
 800be4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be50:	e841 2300 	strex	r3, r2, [r1]
 800be54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e5      	bne.n	800be28 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3308      	adds	r3, #8
 800be62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	e853 3f00 	ldrex	r3, [r3]
 800be6a:	623b      	str	r3, [r7, #32]
   return(result);
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be72:	663b      	str	r3, [r7, #96]	; 0x60
 800be74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be7c:	633a      	str	r2, [r7, #48]	; 0x30
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be84:	e841 2300 	strex	r3, r2, [r1]
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e5      	bne.n	800be5c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be92:	2220      	movs	r2, #32
 800be94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d118      	bne.n	800bed2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	60fb      	str	r3, [r7, #12]
   return(result);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f023 0310 	bic.w	r3, r3, #16
 800beb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	69b9      	ldr	r1, [r7, #24]
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	617b      	str	r3, [r7, #20]
   return(result);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e6      	bne.n	800bea0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bed4:	2200      	movs	r2, #0
 800bed6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d107      	bne.n	800bef0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bee6:	4619      	mov	r1, r3
 800bee8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800beea:	f7f4 fef9 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800beee:	e002      	b.n	800bef6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800bef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bef2:	f7f4 fed7 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800bef6:	bf00      	nop
 800bef8:	3770      	adds	r7, #112	; 0x70
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d109      	bne.n	800bf2e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf20:	085b      	lsrs	r3, r3, #1
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	4619      	mov	r1, r3
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7f4 feda 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf2c:	e002      	b.n	800bf34 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7fe fd58 	bl	800a9e4 <HAL_UART_RxHalfCpltCallback>
}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf50:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf58:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf64:	2b80      	cmp	r3, #128	; 0x80
 800bf66:	d109      	bne.n	800bf7c <UART_DMAError+0x40>
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2b21      	cmp	r3, #33	; 0x21
 800bf6c:	d106      	bne.n	800bf7c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bf76:	6978      	ldr	r0, [r7, #20]
 800bf78:	f7ff fe2c 	bl	800bbd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d109      	bne.n	800bf9e <UART_DMAError+0x62>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b22      	cmp	r3, #34	; 0x22
 800bf8e:	d106      	bne.n	800bf9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bf98:	6978      	ldr	r0, [r7, #20]
 800bf9a:	f7ff fe5d 	bl	800bc58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa4:	f043 0210 	orr.w	r2, r3, #16
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfae:	6978      	ldr	r0, [r7, #20]
 800bfb0:	f7fe fd22 	bl	800a9f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfb4:	bf00      	nop
 800bfb6:	3718      	adds	r7, #24
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7fe fd0c 	bl	800a9f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	461a      	mov	r2, r3
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	61bb      	str	r3, [r7, #24]
 800c010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	e841 2300 	strex	r3, r2, [r1]
 800c01a:	613b      	str	r3, [r7, #16]
   return(result);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e6      	bne.n	800bff0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2220      	movs	r2, #32
 800c026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7fe fcc3 	bl	800a9bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c036:	bf00      	nop
 800c038:	3720      	adds	r7, #32
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b09c      	sub	sp, #112	; 0x70
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c04e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c058:	2b22      	cmp	r3, #34	; 0x22
 800c05a:	f040 80be 	bne.w	800c1da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c068:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c06c:	b2d9      	uxtb	r1, r3
 800c06e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c072:	b2da      	uxtb	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c078:	400a      	ands	r2, r1
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f040 80a1 	bne.w	800c1ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e6      	bne.n	800c0a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	667b      	str	r3, [r7, #100]	; 0x64
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c0fa:	647a      	str	r2, [r7, #68]	; 0x44
 800c0fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e5      	bne.n	800c0da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a33      	ldr	r2, [pc, #204]	; (800c1f4 <UART_RxISR_8BIT+0x1b4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d01f      	beq.n	800c16c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d018      	beq.n	800c16c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	e853 3f00 	ldrex	r3, [r3]
 800c146:	623b      	str	r3, [r7, #32]
   return(result);
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c14e:	663b      	str	r3, [r7, #96]	; 0x60
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c158:	633b      	str	r3, [r7, #48]	; 0x30
 800c15a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e6      	bne.n	800c13a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c170:	2b01      	cmp	r3, #1
 800c172:	d12e      	bne.n	800c1d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	e853 3f00 	ldrex	r3, [r3]
 800c186:	60fb      	str	r3, [r7, #12]
   return(result);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f023 0310 	bic.w	r3, r3, #16
 800c18e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	461a      	mov	r2, r3
 800c196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c19c:	69b9      	ldr	r1, [r7, #24]
 800c19e:	69fa      	ldr	r2, [r7, #28]
 800c1a0:	e841 2300 	strex	r3, r2, [r1]
 800c1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1e6      	bne.n	800c17a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	f003 0310 	and.w	r3, r3, #16
 800c1b6:	2b10      	cmp	r3, #16
 800c1b8:	d103      	bne.n	800c1c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2210      	movs	r2, #16
 800c1c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7f4 fd88 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1d0:	e00b      	b.n	800c1ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7f4 fd66 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800c1d8:	e007      	b.n	800c1ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f042 0208 	orr.w	r2, r2, #8
 800c1e8:	619a      	str	r2, [r3, #24]
}
 800c1ea:	bf00      	nop
 800c1ec:	3770      	adds	r7, #112	; 0x70
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	58000c00 	.word	0x58000c00

0800c1f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b09c      	sub	sp, #112	; 0x70
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c206:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c210:	2b22      	cmp	r3, #34	; 0x22
 800c212:	f040 80be 	bne.w	800c392 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c224:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c226:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c22a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c22e:	4013      	ands	r3, r2
 800c230:	b29a      	uxth	r2, r3
 800c232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c234:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23a:	1c9a      	adds	r2, r3, #2
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c246:	b29b      	uxth	r3, r3
 800c248:	3b01      	subs	r3, #1
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c258:	b29b      	uxth	r3, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f040 80a1 	bne.w	800c3a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c268:	e853 3f00 	ldrex	r3, [r3]
 800c26c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c274:	667b      	str	r3, [r7, #100]	; 0x64
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c27e:	657b      	str	r3, [r7, #84]	; 0x54
 800c280:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c286:	e841 2300 	strex	r3, r2, [r1]
 800c28a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1e6      	bne.n	800c260 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	3308      	adds	r3, #8
 800c298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c29c:	e853 3f00 	ldrex	r3, [r3]
 800c2a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	f023 0301 	bic.w	r3, r3, #1
 800c2a8:	663b      	str	r3, [r7, #96]	; 0x60
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2b2:	643a      	str	r2, [r7, #64]	; 0x40
 800c2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e5      	bne.n	800c292 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a33      	ldr	r2, [pc, #204]	; (800c3ac <UART_RxISR_16BIT+0x1b4>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d01f      	beq.n	800c324 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d018      	beq.n	800c324 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	e853 3f00 	ldrex	r3, [r3]
 800c2fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c306:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	461a      	mov	r2, r3
 800c30e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c312:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c318:	e841 2300 	strex	r3, r2, [r1]
 800c31c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e6      	bne.n	800c2f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d12e      	bne.n	800c38a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f023 0310 	bic.w	r3, r3, #16
 800c346:	65bb      	str	r3, [r7, #88]	; 0x58
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	6979      	ldr	r1, [r7, #20]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	613b      	str	r3, [r7, #16]
   return(result);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e6      	bne.n	800c332 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	f003 0310 	and.w	r3, r3, #16
 800c36e:	2b10      	cmp	r3, #16
 800c370:	d103      	bne.n	800c37a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2210      	movs	r2, #16
 800c378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7f4 fcac 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c388:	e00b      	b.n	800c3a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7f4 fc8a 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800c390:	e007      	b.n	800c3a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	699a      	ldr	r2, [r3, #24]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f042 0208 	orr.w	r2, r2, #8
 800c3a0:	619a      	str	r2, [r3, #24]
}
 800c3a2:	bf00      	nop
 800c3a4:	3770      	adds	r7, #112	; 0x70
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	58000c00 	.word	0x58000c00

0800c3b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b0ac      	sub	sp, #176	; 0xb0
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	69db      	ldr	r3, [r3, #28]
 800c3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3e6:	2b22      	cmp	r3, #34	; 0x22
 800c3e8:	f040 8180 	bne.w	800c6ec <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3f6:	e123      	b.n	800c640 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c402:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c406:	b2d9      	uxtb	r1, r3
 800c408:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c412:	400a      	ands	r2, r1
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c428:	b29b      	uxth	r3, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c442:	f003 0307 	and.w	r3, r3, #7
 800c446:	2b00      	cmp	r3, #0
 800c448:	d053      	beq.n	800c4f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c44a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	2b00      	cmp	r3, #0
 800c454:	d011      	beq.n	800c47a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c45a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00b      	beq.n	800c47a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2201      	movs	r2, #1
 800c468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c470:	f043 0201 	orr.w	r2, r3, #1
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c47a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c47e:	f003 0302 	and.w	r3, r3, #2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d011      	beq.n	800c4aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2202      	movs	r2, #2
 800c498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4a0:	f043 0204 	orr.w	r2, r3, #4
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4ae:	f003 0304 	and.w	r3, r3, #4
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d011      	beq.n	800c4da <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c4b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2204      	movs	r2, #4
 800c4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d0:	f043 0202 	orr.w	r2, r3, #2
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7fe fa87 	bl	800a9f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f040 80a0 	bne.w	800c640 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	461a      	mov	r2, r3
 800c51e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c522:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c524:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c528:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e4      	bne.n	800c500 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3308      	adds	r3, #8
 800c53c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c548:	4b6e      	ldr	r3, [pc, #440]	; (800c704 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c54a:	4013      	ands	r3, r2
 800c54c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3308      	adds	r3, #8
 800c556:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c55a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c55c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c560:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e3      	bne.n	800c536 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2220      	movs	r2, #32
 800c572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a60      	ldr	r2, [pc, #384]	; (800c708 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d021      	beq.n	800c5d0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01a      	beq.n	800c5d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c5bc:	657b      	str	r3, [r7, #84]	; 0x54
 800c5be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e4      	bne.n	800c59a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d130      	bne.n	800c63a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	f023 0310 	bic.w	r3, r3, #16
 800c5f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c600:	643b      	str	r3, [r7, #64]	; 0x40
 800c602:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e4      	bne.n	800c5de <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	f003 0310 	and.w	r3, r3, #16
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d103      	bne.n	800c62a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2210      	movs	r2, #16
 800c628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7f4 fb54 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c638:	e002      	b.n	800c640 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7f4 fb32 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c640:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c64c:	f003 0320 	and.w	r3, r3, #32
 800c650:	2b00      	cmp	r3, #0
 800c652:	f47f aed1 	bne.w	800c3f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c65c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c664:	2b00      	cmp	r3, #0
 800c666:	d049      	beq.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c66e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c672:	429a      	cmp	r2, r3
 800c674:	d242      	bcs.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	61fb      	str	r3, [r7, #28]
   return(result);
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c68c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c69a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c69c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e3      	bne.n	800c676 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a16      	ldr	r2, [pc, #88]	; (800c70c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c6b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f043 0320 	orr.w	r3, r3, #32
 800c6c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6da:	6979      	ldr	r1, [r7, #20]
 800c6dc:	69ba      	ldr	r2, [r7, #24]
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e4      	bne.n	800c6b4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6ea:	e007      	b.n	800c6fc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	699a      	ldr	r2, [r3, #24]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f042 0208 	orr.w	r2, r2, #8
 800c6fa:	619a      	str	r2, [r3, #24]
}
 800c6fc:	bf00      	nop
 800c6fe:	37b0      	adds	r7, #176	; 0xb0
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	effffffe 	.word	0xeffffffe
 800c708:	58000c00 	.word	0x58000c00
 800c70c:	0800c041 	.word	0x0800c041

0800c710 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b0ae      	sub	sp, #184	; 0xb8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c71e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69db      	ldr	r3, [r3, #28]
 800c728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c746:	2b22      	cmp	r3, #34	; 0x22
 800c748:	f040 8184 	bne.w	800ca54 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c752:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c756:	e127      	b.n	800c9a8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c76a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c76e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c772:	4013      	ands	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c77a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c780:	1c9a      	adds	r2, r3, #2
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d053      	beq.n	800c856 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d011      	beq.n	800c7de <UART_RxISR_16BIT_FIFOEN+0xce>
 800c7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7d4:	f043 0201 	orr.w	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d011      	beq.n	800c80e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c7ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7ee:	f003 0301 	and.w	r3, r3, #1
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00b      	beq.n	800c80e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c804:	f043 0204 	orr.w	r2, r3, #4
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c812:	f003 0304 	and.w	r3, r3, #4
 800c816:	2b00      	cmp	r3, #0
 800c818:	d011      	beq.n	800c83e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c81a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00b      	beq.n	800c83e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2204      	movs	r2, #4
 800c82c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c834:	f043 0202 	orr.w	r2, r3, #2
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c844:	2b00      	cmp	r3, #0
 800c846:	d006      	beq.n	800c856 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fe f8d5 	bl	800a9f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 80a2 	bne.w	800c9a8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	461a      	mov	r2, r3
 800c882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c88a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c88e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e2      	bne.n	800c864 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8b0:	4b6e      	ldr	r3, [pc, #440]	; (800ca6c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3308      	adds	r3, #8
 800c8be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c8c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e3      	bne.n	800c89e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a60      	ldr	r2, [pc, #384]	; (800ca70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d021      	beq.n	800c938 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d01a      	beq.n	800c938 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c924:	65bb      	str	r3, [r7, #88]	; 0x58
 800c926:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c92a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e4      	bne.n	800c902 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d130      	bne.n	800c9a2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	e853 3f00 	ldrex	r3, [r3]
 800c952:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c956:	f023 0310 	bic.w	r3, r3, #16
 800c95a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	461a      	mov	r2, r3
 800c964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c968:	647b      	str	r3, [r7, #68]	; 0x44
 800c96a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c96e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c970:	e841 2300 	strex	r3, r2, [r1]
 800c974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e4      	bne.n	800c946 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	f003 0310 	and.w	r3, r3, #16
 800c986:	2b10      	cmp	r3, #16
 800c988:	d103      	bne.n	800c992 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2210      	movs	r2, #16
 800c990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7f4 f9a0 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c9a0:	e002      	b.n	800c9a8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f4 f97e 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9a8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d006      	beq.n	800c9be <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c9b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c9b4:	f003 0320 	and.w	r3, r3, #32
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f47f aecd 	bne.w	800c758 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9c4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9c8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d049      	beq.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9d6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d242      	bcs.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3308      	adds	r3, #8
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	e853 3f00 	ldrex	r3, [r3]
 800c9ec:	623b      	str	r3, [r7, #32]
   return(result);
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca02:	633a      	str	r2, [r7, #48]	; 0x30
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca0a:	e841 2300 	strex	r3, r2, [r1]
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e3      	bne.n	800c9de <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a16      	ldr	r2, [pc, #88]	; (800ca74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ca1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	e853 3f00 	ldrex	r3, [r3]
 800ca28:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f043 0320 	orr.w	r3, r3, #32
 800ca30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca3e:	61fb      	str	r3, [r7, #28]
 800ca40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca42:	69b9      	ldr	r1, [r7, #24]
 800ca44:	69fa      	ldr	r2, [r7, #28]
 800ca46:	e841 2300 	strex	r3, r2, [r1]
 800ca4a:	617b      	str	r3, [r7, #20]
   return(result);
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e4      	bne.n	800ca1c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca52:	e007      	b.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	699a      	ldr	r2, [r3, #24]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f042 0208 	orr.w	r2, r2, #8
 800ca62:	619a      	str	r2, [r3, #24]
}
 800ca64:	bf00      	nop
 800ca66:	37b8      	adds	r7, #184	; 0xb8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	effffffe 	.word	0xeffffffe
 800ca70:	58000c00 	.word	0x58000c00
 800ca74:	0800c1f9 	.word	0x0800c1f9

0800ca78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d101      	bne.n	800caca <HAL_UARTEx_DisableFifoMode+0x16>
 800cac6:	2302      	movs	r3, #2
 800cac8:	e027      	b.n	800cb1a <HAL_UARTEx_DisableFifoMode+0x66>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2224      	movs	r2, #36	; 0x24
 800cad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 0201 	bic.w	r2, r2, #1
 800caf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800caf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3714      	adds	r7, #20
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b084      	sub	sp, #16
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d101      	bne.n	800cb3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb3a:	2302      	movs	r3, #2
 800cb3c:	e02d      	b.n	800cb9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2201      	movs	r2, #1
 800cb42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2224      	movs	r2, #36	; 0x24
 800cb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f022 0201 	bic.w	r2, r2, #1
 800cb64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f8a4 	bl	800ccc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d101      	bne.n	800cbba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbb6:	2302      	movs	r3, #2
 800cbb8:	e02d      	b.n	800cc16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2224      	movs	r2, #36	; 0x24
 800cbc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f022 0201 	bic.w	r2, r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f866 	bl	800ccc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2220      	movs	r2, #32
 800cc08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b08c      	sub	sp, #48	; 0x30
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc32:	2b20      	cmp	r3, #32
 800cc34:	d142      	bne.n	800ccbc <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800cc3c:	88fb      	ldrh	r3, [r7, #6]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e03b      	b.n	800ccbe <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800cc52:	88fb      	ldrh	r3, [r7, #6]
 800cc54:	461a      	mov	r2, r3
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7fe fdf3 	bl	800b844 <UART_Start_Receive_IT>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cc64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d124      	bne.n	800ccb6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d11d      	bne.n	800ccb0 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2210      	movs	r2, #16
 800cc7a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	e853 3f00 	ldrex	r3, [r3]
 800cc88:	617b      	str	r3, [r7, #20]
   return(result);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f043 0310 	orr.w	r3, r3, #16
 800cc90:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc9c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9e:	6a39      	ldr	r1, [r7, #32]
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	e841 2300 	strex	r3, r2, [r1]
 800cca6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e6      	bne.n	800cc7c <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800ccae:	e002      	b.n	800ccb6 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ccb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccba:	e000      	b.n	800ccbe <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ccbc:	2302      	movs	r3, #2
  }
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3730      	adds	r7, #48	; 0x30
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d108      	bne.n	800ccea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cce8:	e031      	b.n	800cd4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccea:	2310      	movs	r3, #16
 800ccec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccee:	2310      	movs	r3, #16
 800ccf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	0e5b      	lsrs	r3, r3, #25
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	f003 0307 	and.w	r3, r3, #7
 800cd00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	0f5b      	lsrs	r3, r3, #29
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f003 0307 	and.w	r3, r3, #7
 800cd10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	7b3a      	ldrb	r2, [r7, #12]
 800cd16:	4911      	ldr	r1, [pc, #68]	; (800cd5c <UARTEx_SetNbDataToProcess+0x94>)
 800cd18:	5c8a      	ldrb	r2, [r1, r2]
 800cd1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd1e:	7b3a      	ldrb	r2, [r7, #12]
 800cd20:	490f      	ldr	r1, [pc, #60]	; (800cd60 <UARTEx_SetNbDataToProcess+0x98>)
 800cd22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd24:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	7b7a      	ldrb	r2, [r7, #13]
 800cd34:	4909      	ldr	r1, [pc, #36]	; (800cd5c <UARTEx_SetNbDataToProcess+0x94>)
 800cd36:	5c8a      	ldrb	r2, [r1, r2]
 800cd38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd3c:	7b7a      	ldrb	r2, [r7, #13]
 800cd3e:	4908      	ldr	r1, [pc, #32]	; (800cd60 <UARTEx_SetNbDataToProcess+0x98>)
 800cd40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd42:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd4e:	bf00      	nop
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	08020ea4 	.word	0x08020ea4
 800cd60:	08020eac 	.word	0x08020eac

0800cd64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd64:	b084      	sub	sp, #16
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	f107 001c 	add.w	r0, r7, #28
 800cd72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d120      	bne.n	800cdbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68da      	ldr	r2, [r3, #12]
 800cd8c:	4b2a      	ldr	r3, [pc, #168]	; (800ce38 <USB_CoreInit+0xd4>)
 800cd8e:	4013      	ands	r3, r2
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d105      	bne.n	800cdb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 faac 	bl	800d310 <USB_CoreReset>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]
 800cdbc:	e01a      	b.n	800cdf4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 faa0 	bl	800d310 <USB_CoreReset>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d106      	bne.n	800cde8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	639a      	str	r2, [r3, #56]	; 0x38
 800cde6:	e005      	b.n	800cdf4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d116      	bne.n	800ce28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce08:	4b0c      	ldr	r3, [pc, #48]	; (800ce3c <USB_CoreInit+0xd8>)
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f043 0206 	orr.w	r2, r3, #6
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f043 0220 	orr.w	r2, r3, #32
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce34:	b004      	add	sp, #16
 800ce36:	4770      	bx	lr
 800ce38:	ffbdffbf 	.word	0xffbdffbf
 800ce3c:	03ee0000 	.word	0x03ee0000

0800ce40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f023 0201 	bic.w	r2, r3, #1
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d115      	bne.n	800ceb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce90:	2001      	movs	r0, #1
 800ce92:	f7f5 f9f5 	bl	8002280 <HAL_Delay>
      ms++;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fa29 	bl	800d2f4 <USB_GetMode>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d01e      	beq.n	800cee6 <USB_SetCurrentMode+0x84>
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b31      	cmp	r3, #49	; 0x31
 800ceac:	d9f0      	bls.n	800ce90 <USB_SetCurrentMode+0x2e>
 800ceae:	e01a      	b.n	800cee6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d115      	bne.n	800cee2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cec2:	2001      	movs	r0, #1
 800cec4:	f7f5 f9dc 	bl	8002280 <HAL_Delay>
      ms++;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3301      	adds	r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fa10 	bl	800d2f4 <USB_GetMode>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d005      	beq.n	800cee6 <USB_SetCurrentMode+0x84>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b31      	cmp	r3, #49	; 0x31
 800cede:	d9f0      	bls.n	800cec2 <USB_SetCurrentMode+0x60>
 800cee0:	e001      	b.n	800cee6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e005      	b.n	800cef2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b32      	cmp	r3, #50	; 0x32
 800ceea:	d101      	bne.n	800cef0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
 800ceee:	e000      	b.n	800cef2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cefc:	b084      	sub	sp, #16
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b086      	sub	sp, #24
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cf0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
 800cf1a:	e009      	b.n	800cf30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	3340      	adds	r3, #64	; 0x40
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	2200      	movs	r2, #0
 800cf28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	613b      	str	r3, [r7, #16]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	2b0e      	cmp	r3, #14
 800cf34:	d9f2      	bls.n	800cf1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11c      	bne.n	800cf76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf4a:	f043 0302 	orr.w	r3, r3, #2
 800cf4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e005      	b.n	800cf82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf88:	461a      	mov	r2, r3
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf94:	4619      	mov	r1, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	680b      	ldr	r3, [r1, #0]
 800cfa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d10c      	bne.n	800cfc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d104      	bne.n	800cfb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cfae:	2100      	movs	r1, #0
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f965 	bl	800d280 <USB_SetDevSpeed>
 800cfb6:	e008      	b.n	800cfca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cfb8:	2101      	movs	r1, #1
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f960 	bl	800d280 <USB_SetDevSpeed>
 800cfc0:	e003      	b.n	800cfca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cfc2:	2103      	movs	r1, #3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f95b 	bl	800d280 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfca:	2110      	movs	r1, #16
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f8f3 	bl	800d1b8 <USB_FlushTxFifo>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f91f 	bl	800d220 <USB_FlushRxFifo>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d001      	beq.n	800cfec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cff2:	461a      	mov	r2, r3
 800cff4:	2300      	movs	r3, #0
 800cff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffe:	461a      	mov	r2, r3
 800d000:	2300      	movs	r3, #0
 800d002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d00a:	461a      	mov	r2, r3
 800d00c:	2300      	movs	r3, #0
 800d00e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d010:	2300      	movs	r3, #0
 800d012:	613b      	str	r3, [r7, #16]
 800d014:	e043      	b.n	800d09e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d02c:	d118      	bne.n	800d060 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10a      	bne.n	800d04a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	015a      	lsls	r2, r3, #5
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	4413      	add	r3, r2
 800d03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d040:	461a      	mov	r2, r3
 800d042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	e013      	b.n	800d072 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	015a      	lsls	r2, r3, #5
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	4413      	add	r3, r2
 800d052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d056:	461a      	mov	r2, r3
 800d058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d05c:	6013      	str	r3, [r2, #0]
 800d05e:	e008      	b.n	800d072 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06c:	461a      	mov	r2, r3
 800d06e:	2300      	movs	r3, #0
 800d070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	015a      	lsls	r2, r3, #5
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	4413      	add	r3, r2
 800d07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d07e:	461a      	mov	r2, r3
 800d080:	2300      	movs	r3, #0
 800d082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d090:	461a      	mov	r2, r3
 800d092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	3301      	adds	r3, #1
 800d09c:	613b      	str	r3, [r7, #16]
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d3b7      	bcc.n	800d016 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	613b      	str	r3, [r7, #16]
 800d0aa:	e043      	b.n	800d134 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0c2:	d118      	bne.n	800d0f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10a      	bne.n	800d0e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	e013      	b.n	800d108 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0f2:	6013      	str	r3, [r2, #0]
 800d0f4:	e008      	b.n	800d108 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	015a      	lsls	r2, r3, #5
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d102:	461a      	mov	r2, r3
 800d104:	2300      	movs	r3, #0
 800d106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	015a      	lsls	r2, r3, #5
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4413      	add	r3, r2
 800d110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d114:	461a      	mov	r2, r3
 800d116:	2300      	movs	r3, #0
 800d118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	015a      	lsls	r2, r3, #5
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	4413      	add	r3, r2
 800d122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d126:	461a      	mov	r2, r3
 800d128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d12c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	3301      	adds	r3, #1
 800d132:	613b      	str	r3, [r7, #16]
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d3b7      	bcc.n	800d0ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d14a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d14e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d15c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	2b00      	cmp	r3, #0
 800d162:	d105      	bne.n	800d170 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	f043 0210 	orr.w	r2, r3, #16
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	699a      	ldr	r2, [r3, #24]
 800d174:	4b0e      	ldr	r3, [pc, #56]	; (800d1b0 <USB_DevInit+0x2b4>)
 800d176:	4313      	orrs	r3, r2
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f043 0208 	orr.w	r2, r3, #8
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d190:	2b01      	cmp	r3, #1
 800d192:	d105      	bne.n	800d1a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	699a      	ldr	r2, [r3, #24]
 800d198:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <USB_DevInit+0x2b8>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3718      	adds	r7, #24
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1ac:	b004      	add	sp, #16
 800d1ae:	4770      	bx	lr
 800d1b0:	803c3800 	.word	0x803c3800
 800d1b4:	40000004 	.word	0x40000004

0800d1b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4a13      	ldr	r2, [pc, #76]	; (800d21c <USB_FlushTxFifo+0x64>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d901      	bls.n	800d1d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e01b      	b.n	800d210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	daf2      	bge.n	800d1c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	019b      	lsls	r3, r3, #6
 800d1e8:	f043 0220 	orr.w	r2, r3, #32
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	4a08      	ldr	r2, [pc, #32]	; (800d21c <USB_FlushTxFifo+0x64>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d901      	bls.n	800d202 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d1fe:	2303      	movs	r3, #3
 800d200:	e006      	b.n	800d210 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	f003 0320 	and.w	r3, r3, #32
 800d20a:	2b20      	cmp	r3, #32
 800d20c:	d0f0      	beq.n	800d1f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	00030d40 	.word	0x00030d40

0800d220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3301      	adds	r3, #1
 800d230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	4a11      	ldr	r2, [pc, #68]	; (800d27c <USB_FlushRxFifo+0x5c>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d901      	bls.n	800d23e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d23a:	2303      	movs	r3, #3
 800d23c:	e018      	b.n	800d270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	daf2      	bge.n	800d22c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2210      	movs	r2, #16
 800d24e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	3301      	adds	r3, #1
 800d254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	4a08      	ldr	r2, [pc, #32]	; (800d27c <USB_FlushRxFifo+0x5c>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d901      	bls.n	800d262 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d25e:	2303      	movs	r3, #3
 800d260:	e006      	b.n	800d270 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	f003 0310 	and.w	r3, r3, #16
 800d26a:	2b10      	cmp	r3, #16
 800d26c:	d0f0      	beq.n	800d250 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr
 800d27c:	00030d40 	.word	0x00030d40

0800d280 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	78fb      	ldrb	r3, [r7, #3]
 800d29a:	68f9      	ldr	r1, [r7, #12]
 800d29c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b085      	sub	sp, #20
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2cc:	f023 0303 	bic.w	r3, r3, #3
 800d2d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2e0:	f043 0302 	orr.w	r3, r3, #2
 800d2e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	f003 0301 	and.w	r3, r3, #1
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3301      	adds	r3, #1
 800d320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	4a13      	ldr	r2, [pc, #76]	; (800d374 <USB_CoreReset+0x64>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d901      	bls.n	800d32e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e01b      	b.n	800d366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	daf2      	bge.n	800d31c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d336:	2300      	movs	r3, #0
 800d338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	f043 0201 	orr.w	r2, r3, #1
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3301      	adds	r3, #1
 800d34a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	4a09      	ldr	r2, [pc, #36]	; (800d374 <USB_CoreReset+0x64>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d901      	bls.n	800d358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e006      	b.n	800d366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b01      	cmp	r3, #1
 800d362:	d0f0      	beq.n	800d346 <USB_CoreReset+0x36>

  return HAL_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	00030d40 	.word	0x00030d40

0800d378 <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf>:
	using OriEKFBase::ControlVec;
	using OriEKFBase::MeassurementVec;
	using OriEKFBase::StateCovarianceMatrix;
	using OriEKFBase::ControlCovarianceMatrix;
	using OriEKFBase::MeasurementCovarianceMatrix;
	using OriEKFBase::OriEKFBase;
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	ed87 0a00 	vstr	s0, [r7]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	edd7 7a00 	vldr	s15, [r7]
 800d38e:	eeb0 0a67 	vmov.f32	s0, s15
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	4618      	mov	r0, r3
 800d398:	f000 fc74 	bl	800dc84 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>
 800d39c:	4a03      	ldr	r2, [pc, #12]	; (800d3ac <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf+0x34>)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	08020f14 	.word	0x08020f14

0800d3b0 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>:
	using VelEKFBase::ControlVec;
	using VelEKFBase::MeassurementVec;
	using VelEKFBase::StateCovarianceMatrix;
	using VelEKFBase::ControlCovarianceMatrix;
	using VelEKFBase::MeasurementCovarianceMatrix;
	using VelEKFBase::VelEKFBase;
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
 800d3bc:	ed87 0a00 	vstr	s0, [r7]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	edd7 7a00 	vldr	s15, [r7]
 800d3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	68b9      	ldr	r1, [r7, #8]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 fc9c 	bl	800dd0c <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>
 800d3d4:	4a03      	ldr	r2, [pc, #12]	; (800d3e4 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf+0x34>)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	08020f40 	.word	0x08020f40

0800d3e8 <_ZN10Algorithms15FusionAlgorithmC1Ev>:
public:
//	FusionAlgorithm(
//			const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//			const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//			float time);
	FusionAlgorithm(){
 800d3e8:	b5b0      	push	{r4, r5, r7, lr}
 800d3ea:	b0ca      	sub	sp, #296	; 0x128
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3f0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d3f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fc2c 	bl	800dc54 <_ZN3Mat8V_VectorILt4EEC1Ev>
 800d3fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d400:	4618      	mov	r0, r3
 800d402:	f000 fc34 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800d406:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d40a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d40e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800d560 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x178>
 800d412:	4619      	mov	r1, r3
 800d414:	4620      	mov	r0, r4
 800d416:	f7ff ffaf 	bl	800d378 <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf>
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800d420:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d424:	4618      	mov	r0, r3
 800d426:	f000 fc59 	bl	800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d42a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fc61 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800d434:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d438:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d43c:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d560 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x178>
 800d440:	4619      	mov	r1, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f7ff ffb4 	bl	800d3b0 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fc84 	bl	800dd5c <_ZN3Mat8V_VectorILt3EEC1Ev>
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 fc8b 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fc38 	bl	800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d472:	4618      	mov	r0, r3
 800d474:	f000 fc3f 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fc6c 	bl	800dd5c <_ZN3Mat8V_VectorILt3EEC1Ev>
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 fc73 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fc20 	bl	800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fc27 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
		_orientationControlCov = Eye<3>(_gyroNoiseVariance);
 800d4a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d564 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x17c>
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fc6b 	bl	800dd8c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 800d4b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d4ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d4be:	f504 748a 	add.w	r4, r4, #276	; 0x114
 800d4c2:	461d      	mov	r5, r3
 800d4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4cc:	682b      	ldr	r3, [r5, #0]
 800d4ce:	6023      	str	r3, [r4, #0]
		_orientationMeassurementCov(0,0) = _accNoiseVariance;
 800d4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fc7a 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4a21      	ldr	r2, [pc, #132]	; (800d568 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d4e4:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(1,1) = _accNoiseVariance;
 800d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 fc6f 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	4a1b      	ldr	r2, [pc, #108]	; (800d568 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d4fa:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(2,2) = _accNoiseVariance;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d502:	2202      	movs	r2, #2
 800d504:	2102      	movs	r1, #2
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fc64 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d50c:	4603      	mov	r3, r0
 800d50e:	4a16      	ldr	r2, [pc, #88]	; (800d568 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d510:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(3,3) = _magNoiseVariance;
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d518:	2203      	movs	r2, #3
 800d51a:	2103      	movs	r1, #3
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 fc59 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d522:	4603      	mov	r3, r0
 800d524:	4a11      	ldr	r2, [pc, #68]	; (800d56c <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d526:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(4,4) = _magNoiseVariance;
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d52e:	2204      	movs	r2, #4
 800d530:	2104      	movs	r1, #4
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fc4e 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d538:	4603      	mov	r3, r0
 800d53a:	4a0c      	ldr	r2, [pc, #48]	; (800d56c <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d53c:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(5,5) = _magNoiseVariance;
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d544:	2205      	movs	r2, #5
 800d546:	2105      	movs	r1, #5
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fc43 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d54e:	4603      	mov	r3, r0
 800d550:	4a06      	ldr	r2, [pc, #24]	; (800d56c <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d552:	601a      	str	r2, [r3, #0]
	};
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	4618      	mov	r0, r3
 800d558:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bdb0      	pop	{r4, r5, r7, pc}
 800d560:	00000000 	.word	0x00000000
 800d564:	3d4ccccd 	.word	0x3d4ccccd
 800d568:	3c23d70a 	.word	0x3c23d70a
 800d56c:	3f23d70a 	.word	0x3f23d70a

0800d570 <_ZN10Algorithms10AHRSKalmanC1Ev>:
{

class AHRSKalman
{
public:
	AHRSKalman(){};
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	3310      	adds	r3, #16
 800d57c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d580:	4618      	mov	r0, r3
 800d582:	f000 fc43 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4a08      	ldr	r2, [pc, #32]	; (800d5ac <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800d58a:	659a      	str	r2, [r3, #88]	; 0x58
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4a08      	ldr	r2, [pc, #32]	; (800d5b0 <_ZN10Algorithms10AHRSKalmanC1Ev+0x40>)
 800d590:	65da      	str	r2, [r3, #92]	; 0x5c
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a07      	ldr	r2, [pc, #28]	; (800d5b4 <_ZN10Algorithms10AHRSKalmanC1Ev+0x44>)
 800d596:	661a      	str	r2, [r3, #96]	; 0x60
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	3364      	adds	r3, #100	; 0x64
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 fb66 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	3d4ccccd 	.word	0x3d4ccccd
 800d5b0:	3fd1eb85 	.word	0x3fd1eb85
 800d5b4:	3e570a3d 	.word	0x3e570a3d

0800d5b8 <InitAlgorithms>:
Mat::Matrix<3, 1> meanMag = 0.0f;

float al = 0.01f;

uint8_t InitAlgorithms(const AGMSensorData* sensorData)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	printf("InitAlgorithms\n\r");
 800d5c0:	483f      	ldr	r0, [pc, #252]	; (800d6c0 <InitAlgorithms+0x108>)
 800d5c2:	f011 fa61 	bl	801ea88 <iprintf>
	AccRaw(0,0) = sensorData->Acc.x;
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	483e      	ldr	r0, [pc, #248]	; (800d6c4 <InitAlgorithms+0x10c>)
 800d5cc:	f000 fc7f 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	6013      	str	r3, [r2, #0]
	AccRaw(1,0) = sensorData->Acc.y;
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2101      	movs	r1, #1
 800d5dc:	4839      	ldr	r0, [pc, #228]	; (800d6c4 <InitAlgorithms+0x10c>)
 800d5de:	f000 fc76 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	6013      	str	r3, [r2, #0]
	AccRaw(2,0) = sensorData->Acc.z;
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	2102      	movs	r1, #2
 800d5ee:	4835      	ldr	r0, [pc, #212]	; (800d6c4 <InitAlgorithms+0x10c>)
 800d5f0:	f000 fc6d 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	695b      	ldr	r3, [r3, #20]
 800d5fa:	6013      	str	r3, [r2, #0]
	MagRaw(0,0) = sensorData->Mag.x;
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2100      	movs	r1, #0
 800d600:	4831      	ldr	r0, [pc, #196]	; (800d6c8 <InitAlgorithms+0x110>)
 800d602:	f000 fc64 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d606:	4602      	mov	r2, r0
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6013      	str	r3, [r2, #0]
	MagRaw(1,0) = sensorData->Mag.y;
 800d60e:	2200      	movs	r2, #0
 800d610:	2101      	movs	r1, #1
 800d612:	482d      	ldr	r0, [pc, #180]	; (800d6c8 <InitAlgorithms+0x110>)
 800d614:	f000 fc5b 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d618:	4602      	mov	r2, r0
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	6013      	str	r3, [r2, #0]
	MagRaw(2,0) = sensorData->Mag.z;
 800d620:	2200      	movs	r2, #0
 800d622:	2102      	movs	r1, #2
 800d624:	4828      	ldr	r0, [pc, #160]	; (800d6c8 <InitAlgorithms+0x110>)
 800d626:	f000 fc52 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d62a:	4602      	mov	r2, r0
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	6013      	str	r3, [r2, #0]
	AccCal = CalibrateAcc(AccRaw);
 800d632:	4824      	ldr	r0, [pc, #144]	; (800d6c4 <InitAlgorithms+0x10c>)
 800d634:	f003 fa6a 	bl	8010b0c <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d638:	eef0 6a40 	vmov.f32	s13, s0
 800d63c:	eeb0 7a60 	vmov.f32	s14, s1
 800d640:	eef0 7a41 	vmov.f32	s15, s2
 800d644:	4b21      	ldr	r3, [pc, #132]	; (800d6cc <InitAlgorithms+0x114>)
 800d646:	edc3 6a00 	vstr	s13, [r3]
 800d64a:	ed83 7a01 	vstr	s14, [r3, #4]
 800d64e:	edc3 7a02 	vstr	s15, [r3, #8]
	MagCal = CalibrateMag(MagRaw);
 800d652:	481d      	ldr	r0, [pc, #116]	; (800d6c8 <InitAlgorithms+0x110>)
 800d654:	f003 fa1e 	bl	8010a94 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d658:	eef0 6a40 	vmov.f32	s13, s0
 800d65c:	eeb0 7a60 	vmov.f32	s14, s1
 800d660:	eef0 7a41 	vmov.f32	s15, s2
 800d664:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <InitAlgorithms+0x118>)
 800d666:	edc3 6a00 	vstr	s13, [r3]
 800d66a:	ed83 7a01 	vstr	s14, [r3, #4]
 800d66e:	edc3 7a02 	vstr	s15, [r3, #8]
	Fusion.InitState(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d672:	f7f4 fdf9 	bl	8002268 <HAL_GetTick>
 800d676:	ee07 0a90 	vmov	s15, r0
 800d67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d6d4 <InitAlgorithms+0x11c>
 800d682:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d686:	eeb0 0a67 	vmov.f32	s0, s15
 800d68a:	4a11      	ldr	r2, [pc, #68]	; (800d6d0 <InitAlgorithms+0x118>)
 800d68c:	490f      	ldr	r1, [pc, #60]	; (800d6cc <InitAlgorithms+0x114>)
 800d68e:	4812      	ldr	r0, [pc, #72]	; (800d6d8 <InitAlgorithms+0x120>)
 800d690:	f00b f9f4 	bl	8018a7c <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>
	Kalman.InitialiseKalman(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d694:	f7f4 fde8 	bl	8002268 <HAL_GetTick>
 800d698:	ee07 0a90 	vmov	s15, r0
 800d69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d6d4 <InitAlgorithms+0x11c>
 800d6a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6a8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ac:	4a08      	ldr	r2, [pc, #32]	; (800d6d0 <InitAlgorithms+0x118>)
 800d6ae:	4907      	ldr	r1, [pc, #28]	; (800d6cc <InitAlgorithms+0x114>)
 800d6b0:	480a      	ldr	r0, [pc, #40]	; (800d6dc <InitAlgorithms+0x124>)
 800d6b2:	f003 fe22 	bl	80112fa <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
	return 1;
 800d6b6:	2301      	movs	r3, #1
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	08020ba8 	.word	0x08020ba8
 800d6c4:	2400509c 	.word	0x2400509c
 800d6c8:	2400506c 	.word	0x2400506c
 800d6cc:	24005090 	.word	0x24005090
 800d6d0:	24005060 	.word	0x24005060
 800d6d4:	3a83126f 	.word	0x3a83126f
 800d6d8:	24004cf4 	.word	0x24004cf4
 800d6dc:	24004fac 	.word	0x24004fac

0800d6e0 <MadgwickUpdate>:
	al = al * 0.5f;
	return 1;
}

uint8_t MadgwickUpdate(const AGMSensorData* sensorData)
{
 800d6e0:	b590      	push	{r4, r7, lr}
 800d6e2:	ed2d 8b0a 	vpush	{d8-d12}
 800d6e6:	b0a9      	sub	sp, #164	; 0xa4
 800d6e8:	af0a      	add	r7, sp, #40	; 0x28
 800d6ea:	6078      	str	r0, [r7, #4]
	if(sensorData != nullptr)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 825e 	beq.w	800dbb0 <MadgwickUpdate+0x4d0>
	{
		static float last_time{sensorData->SensorTime * 0.001f};
 800d6f4:	4bc3      	ldr	r3, [pc, #780]	; (800da04 <MadgwickUpdate+0x324>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f3bf 8f5b 	dmb	ish
 800d6fc:	f003 0301 	and.w	r3, r3, #1
 800d700:	2b00      	cmp	r3, #0
 800d702:	bf0c      	ite	eq
 800d704:	2301      	moveq	r3, #1
 800d706:	2300      	movne	r3, #0
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d017      	beq.n	800d73e <MadgwickUpdate+0x5e>
 800d70e:	48bd      	ldr	r0, [pc, #756]	; (800da04 <MadgwickUpdate+0x324>)
 800d710:	f010 f84a 	bl	801d7a8 <__cxa_guard_acquire>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	bf14      	ite	ne
 800d71a:	2301      	movne	r3, #1
 800d71c:	2300      	moveq	r3, #0
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00c      	beq.n	800d73e <MadgwickUpdate+0x5e>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d72a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800da08 <MadgwickUpdate+0x328>
 800d72e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d732:	4bb6      	ldr	r3, [pc, #728]	; (800da0c <MadgwickUpdate+0x32c>)
 800d734:	edc3 7a00 	vstr	s15, [r3]
 800d738:	48b2      	ldr	r0, [pc, #712]	; (800da04 <MadgwickUpdate+0x324>)
 800d73a:	f010 f841 	bl	801d7c0 <__cxa_guard_release>
		float currTime = sensorData->SensorTime * 0.001f;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d744:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800da08 <MadgwickUpdate+0x328>
 800d748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d74c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		float deltat = (currTime - last_time);
 800d750:	4bae      	ldr	r3, [pc, #696]	; (800da0c <MadgwickUpdate+0x32c>)
 800d752:	edd3 7a00 	vldr	s15, [r3]
 800d756:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800d75a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d75e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		last_time = currTime;
 800d762:	4aaa      	ldr	r2, [pc, #680]	; (800da0c <MadgwickUpdate+0x32c>)
 800d764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d766:	6013      	str	r3, [r2, #0]

		AccRaw(0,0) = sensorData->Acc.x;
 800d768:	2200      	movs	r2, #0
 800d76a:	2100      	movs	r1, #0
 800d76c:	48a8      	ldr	r0, [pc, #672]	; (800da10 <MadgwickUpdate+0x330>)
 800d76e:	f000 fbae 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d772:	4602      	mov	r2, r0
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	6013      	str	r3, [r2, #0]
		AccRaw(1,0) = sensorData->Acc.y;
 800d77a:	2200      	movs	r2, #0
 800d77c:	2101      	movs	r1, #1
 800d77e:	48a4      	ldr	r0, [pc, #656]	; (800da10 <MadgwickUpdate+0x330>)
 800d780:	f000 fba5 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d784:	4602      	mov	r2, r0
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	6013      	str	r3, [r2, #0]
		AccRaw(2,0) = sensorData->Acc.z;
 800d78c:	2200      	movs	r2, #0
 800d78e:	2102      	movs	r1, #2
 800d790:	489f      	ldr	r0, [pc, #636]	; (800da10 <MadgwickUpdate+0x330>)
 800d792:	f000 fb9c 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d796:	4602      	mov	r2, r0
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	6013      	str	r3, [r2, #0]
		MagRaw(0,0) = sensorData->Mag.x;
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	489c      	ldr	r0, [pc, #624]	; (800da14 <MadgwickUpdate+0x334>)
 800d7a4:	f000 fb93 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6013      	str	r3, [r2, #0]
		MagRaw(1,0) = sensorData->Mag.y;
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2101      	movs	r1, #1
 800d7b4:	4897      	ldr	r0, [pc, #604]	; (800da14 <MadgwickUpdate+0x334>)
 800d7b6:	f000 fb8a 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	6013      	str	r3, [r2, #0]
		MagRaw(2,0) = sensorData->Mag.z;
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2102      	movs	r1, #2
 800d7c6:	4893      	ldr	r0, [pc, #588]	; (800da14 <MadgwickUpdate+0x334>)
 800d7c8:	f000 fb81 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	6013      	str	r3, [r2, #0]
		GyroRaw(0,0) = sensorData->Gyro.x;
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	488f      	ldr	r0, [pc, #572]	; (800da18 <MadgwickUpdate+0x338>)
 800d7da:	f000 fb78 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	6013      	str	r3, [r2, #0]
		GyroRaw(1,0) = sensorData->Gyro.y;
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	2101      	movs	r1, #1
 800d7ea:	488b      	ldr	r0, [pc, #556]	; (800da18 <MadgwickUpdate+0x338>)
 800d7ec:	f000 fb6f 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	6013      	str	r3, [r2, #0]
		GyroRaw(2,0) = sensorData->Gyro.z;
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2102      	movs	r1, #2
 800d7fc:	4886      	ldr	r0, [pc, #536]	; (800da18 <MadgwickUpdate+0x338>)
 800d7fe:	f000 fb66 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d802:	4602      	mov	r2, r0
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	6013      	str	r3, [r2, #0]
		AccCal = CalibrateAcc(AccRaw);
 800d80a:	4881      	ldr	r0, [pc, #516]	; (800da10 <MadgwickUpdate+0x330>)
 800d80c:	f003 f97e 	bl	8010b0c <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d810:	eef0 6a40 	vmov.f32	s13, s0
 800d814:	eeb0 7a60 	vmov.f32	s14, s1
 800d818:	eef0 7a41 	vmov.f32	s15, s2
 800d81c:	4b7f      	ldr	r3, [pc, #508]	; (800da1c <MadgwickUpdate+0x33c>)
 800d81e:	edc3 6a00 	vstr	s13, [r3]
 800d822:	ed83 7a01 	vstr	s14, [r3, #4]
 800d826:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCal = CalibrateMag(MagRaw);
 800d82a:	487a      	ldr	r0, [pc, #488]	; (800da14 <MadgwickUpdate+0x334>)
 800d82c:	f003 f932 	bl	8010a94 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d830:	eef0 6a40 	vmov.f32	s13, s0
 800d834:	eeb0 7a60 	vmov.f32	s14, s1
 800d838:	eef0 7a41 	vmov.f32	s15, s2
 800d83c:	4b78      	ldr	r3, [pc, #480]	; (800da20 <MadgwickUpdate+0x340>)
 800d83e:	edc3 6a00 	vstr	s13, [r3]
 800d842:	ed83 7a01 	vstr	s14, [r3, #4]
 800d846:	edc3 7a02 	vstr	s15, [r3, #8]
		GyroCal = CalibrateGyro(GyroRaw);
 800d84a:	4873      	ldr	r0, [pc, #460]	; (800da18 <MadgwickUpdate+0x338>)
 800d84c:	f003 f99a 	bl	8010b84 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>
 800d850:	eef0 6a40 	vmov.f32	s13, s0
 800d854:	eeb0 7a60 	vmov.f32	s14, s1
 800d858:	eef0 7a41 	vmov.f32	s15, s2
 800d85c:	4b71      	ldr	r3, [pc, #452]	; (800da24 <MadgwickUpdate+0x344>)
 800d85e:	edc3 6a00 	vstr	s13, [r3]
 800d862:	ed83 7a01 	vstr	s14, [r3, #4]
 800d866:	edc3 7a02 	vstr	s15, [r3, #8]
		AGMSensorData sensorDataCal;
		sensorDataCal.Acc.x = AccCal(0,0);
 800d86a:	2200      	movs	r2, #0
 800d86c:	2100      	movs	r1, #0
 800d86e:	486b      	ldr	r0, [pc, #428]	; (800da1c <MadgwickUpdate+0x33c>)
 800d870:	f000 fb2d 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d874:	4603      	mov	r3, r0
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	617b      	str	r3, [r7, #20]
		sensorDataCal.Acc.y = AccCal(1,0);
 800d87a:	2200      	movs	r2, #0
 800d87c:	2101      	movs	r1, #1
 800d87e:	4867      	ldr	r0, [pc, #412]	; (800da1c <MadgwickUpdate+0x33c>)
 800d880:	f000 fb25 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d884:	4603      	mov	r3, r0
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	61bb      	str	r3, [r7, #24]
		sensorDataCal.Acc.z = AccCal(2,0);
 800d88a:	2200      	movs	r2, #0
 800d88c:	2102      	movs	r1, #2
 800d88e:	4863      	ldr	r0, [pc, #396]	; (800da1c <MadgwickUpdate+0x33c>)
 800d890:	f000 fb1d 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d894:	4603      	mov	r3, r0
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	61fb      	str	r3, [r7, #28]
		sensorDataCal.Mag.x = MagCal(0,0);
 800d89a:	2200      	movs	r2, #0
 800d89c:	2100      	movs	r1, #0
 800d89e:	4860      	ldr	r0, [pc, #384]	; (800da20 <MadgwickUpdate+0x340>)
 800d8a0:	f000 fb15 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	60bb      	str	r3, [r7, #8]
		sensorDataCal.Mag.y = MagCal(1,0);
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	485c      	ldr	r0, [pc, #368]	; (800da20 <MadgwickUpdate+0x340>)
 800d8b0:	f000 fb0d 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60fb      	str	r3, [r7, #12]
		sensorDataCal.Mag.z = MagCal(2,0);
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2102      	movs	r1, #2
 800d8be:	4858      	ldr	r0, [pc, #352]	; (800da20 <MadgwickUpdate+0x340>)
 800d8c0:	f000 fb05 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	613b      	str	r3, [r7, #16]
		sensorDataCal.Gyro.x = GyroCal(0,0);
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4855      	ldr	r0, [pc, #340]	; (800da24 <MadgwickUpdate+0x344>)
 800d8d0:	f000 fafd 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	623b      	str	r3, [r7, #32]
		sensorDataCal.Gyro.y = GyroCal(1,0);
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2101      	movs	r1, #1
 800d8de:	4851      	ldr	r0, [pc, #324]	; (800da24 <MadgwickUpdate+0x344>)
 800d8e0:	f000 faf5 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	627b      	str	r3, [r7, #36]	; 0x24
		sensorDataCal.Gyro.z = GyroCal(2,0);
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2102      	movs	r1, #2
 800d8ee:	484d      	ldr	r0, [pc, #308]	; (800da24 <MadgwickUpdate+0x344>)
 800d8f0:	f000 faed 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	62bb      	str	r3, [r7, #40]	; 0x28
		currTime = (float)(HAL_GetTick()) * ms2s;
 800d8fa:	f7f4 fcb5 	bl	8002268 <HAL_GetTick>
 800d8fe:	ee07 0a90 	vmov	s15, r0
 800d902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d906:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800da08 <MadgwickUpdate+0x328>
 800d90a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d90e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		sensorDataCal.SensorTime = currTime;
 800d912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d914:	62fb      	str	r3, [r7, #44]	; 0x2c
		Fusion.OnIMUData(sensorDataCal);
 800d916:	f107 0308 	add.w	r3, r7, #8
 800d91a:	4619      	mov	r1, r3
 800d91c:	4842      	ldr	r0, [pc, #264]	; (800da28 <MadgwickUpdate+0x348>)
 800d91e:	f00b f919 	bl	8018b54 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERK15AGMSensorData_t>
		const auto& rotMatrix = Fusion.GetRotationMatrix();
 800d922:	4841      	ldr	r0, [pc, #260]	; (800da28 <MadgwickUpdate+0x348>)
 800d924:	f00b fd18 	bl	8019358 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>
 800d928:	66f8      	str	r0, [r7, #108]	; 0x6c
		auto acc = rotMatrix * AccCal;
 800d92a:	493c      	ldr	r1, [pc, #240]	; (800da1c <MadgwickUpdate+0x33c>)
 800d92c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d92e:	f000 fae4 	bl	800defa <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d932:	eef0 6a40 	vmov.f32	s13, s0
 800d936:	eeb0 7a60 	vmov.f32	s14, s1
 800d93a:	eef0 7a41 	vmov.f32	s15, s2
 800d93e:	edc7 6a10 	vstr	s13, [r7, #64]	; 0x40
 800d942:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 800d946:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

//		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
//								AccCal(0,0), AccCal(1,0), AccCal(2,0),
//								MagCal(0,0), MagCal(1,0), MagCal(2,0),
//								sensorData->SensorTime / 1000.0f);
		Kalman.UpdateState(GyroCal, currTime);
 800d94a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d94e:	4935      	ldr	r1, [pc, #212]	; (800da24 <MadgwickUpdate+0x344>)
 800d950:	4836      	ldr	r0, [pc, #216]	; (800da2c <MadgwickUpdate+0x34c>)
 800d952:	f003 fea5 	bl	80116a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>
		Kalman.CorrectStateAcc(AccCal, currTime);
 800d956:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d95a:	4930      	ldr	r1, [pc, #192]	; (800da1c <MadgwickUpdate+0x33c>)
 800d95c:	4833      	ldr	r0, [pc, #204]	; (800da2c <MadgwickUpdate+0x34c>)
 800d95e:	f005 f89d 	bl	8012a9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>
		Kalman.CorrectStateMag(MagCal, currTime);
 800d962:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d966:	492e      	ldr	r1, [pc, #184]	; (800da20 <MadgwickUpdate+0x340>)
 800d968:	4830      	ldr	r0, [pc, #192]	; (800da2c <MadgwickUpdate+0x34c>)
 800d96a:	f004 fa4b 	bl	8011e04 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>
		Q = Kalman.GetState();
 800d96e:	482f      	ldr	r0, [pc, #188]	; (800da2c <MadgwickUpdate+0x34c>)
 800d970:	f003 fcb8 	bl	80112e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 800d974:	4603      	mov	r3, r0
 800d976:	4a2e      	ldr	r2, [pc, #184]	; (800da30 <MadgwickUpdate+0x350>)
 800d978:	4614      	mov	r4, r2
 800d97a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d97c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LOG("AHRS: \t%f, \t%f, \t%f, \t\t\t%f, \t%f, \t%f", Kalman.GetRoll(), Kalman.GetPitch(), Kalman.GetYaw(), Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw());
 800d980:	f7f4 fc72 	bl	8002268 <HAL_GetTick>
 800d984:	4601      	mov	r1, r0
 800d986:	238f      	movs	r3, #143	; 0x8f
 800d988:	4a2a      	ldr	r2, [pc, #168]	; (800da34 <MadgwickUpdate+0x354>)
 800d98a:	482b      	ldr	r0, [pc, #172]	; (800da38 <MadgwickUpdate+0x358>)
 800d98c:	f011 f87c 	bl	801ea88 <iprintf>
 800d990:	4826      	ldr	r0, [pc, #152]	; (800da2c <MadgwickUpdate+0x34c>)
 800d992:	f005 fce5 	bl	8013360 <_ZNK10Algorithms10AHRSKalman7GetRollEv>
 800d996:	eef0 7a40 	vmov.f32	s15, s0
 800d99a:	eeb7 cae7 	vcvt.f64.f32	d12, s15
 800d99e:	4823      	ldr	r0, [pc, #140]	; (800da2c <MadgwickUpdate+0x34c>)
 800d9a0:	f005 fd32 	bl	8013408 <_ZNK10Algorithms10AHRSKalman8GetPitchEv>
 800d9a4:	eef0 7a40 	vmov.f32	s15, s0
 800d9a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800d9ac:	481f      	ldr	r0, [pc, #124]	; (800da2c <MadgwickUpdate+0x34c>)
 800d9ae:	f005 fd5b 	bl	8013468 <_ZNK10Algorithms10AHRSKalman6GetYawEv>
 800d9b2:	eef0 7a40 	vmov.f32	s15, s0
 800d9b6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800d9ba:	481b      	ldr	r0, [pc, #108]	; (800da28 <MadgwickUpdate+0x348>)
 800d9bc:	f00b fb82 	bl	80190c4 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv>
 800d9c0:	eef0 7a40 	vmov.f32	s15, s0
 800d9c4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800d9c8:	4817      	ldr	r0, [pc, #92]	; (800da28 <MadgwickUpdate+0x348>)
 800d9ca:	f00b fbfb 	bl	80191c4 <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv>
 800d9ce:	eef0 7a40 	vmov.f32	s15, s0
 800d9d2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800d9d6:	4814      	ldr	r0, [pc, #80]	; (800da28 <MadgwickUpdate+0x348>)
 800d9d8:	f00b fc38 	bl	801924c <_ZNK10Algorithms15FusionAlgorithm6GetYawEv>
 800d9dc:	eef0 7a40 	vmov.f32	s15, s0
 800d9e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d9e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d9e8:	ed8d bb06 	vstr	d11, [sp, #24]
 800d9ec:	ed8d ab04 	vstr	d10, [sp, #16]
 800d9f0:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d9f4:	ed8d 8b00 	vstr	d8, [sp]
 800d9f8:	ec53 2b1c 	vmov	r2, r3, d12
 800d9fc:	480f      	ldr	r0, [pc, #60]	; (800da3c <MadgwickUpdate+0x35c>)
 800d9fe:	f011 f843 	bl	801ea88 <iprintf>
 800da02:	e01d      	b.n	800da40 <MadgwickUpdate+0x360>
 800da04:	240050f8 	.word	0x240050f8
 800da08:	3a83126f 	.word	0x3a83126f
 800da0c:	240050f4 	.word	0x240050f4
 800da10:	2400509c 	.word	0x2400509c
 800da14:	2400506c 	.word	0x2400506c
 800da18:	24005084 	.word	0x24005084
 800da1c:	24005090 	.word	0x24005090
 800da20:	24005060 	.word	0x24005060
 800da24:	24005078 	.word	0x24005078
 800da28:	24004cf4 	.word	0x24004cf4
 800da2c:	24004fac 	.word	0x24004fac
 800da30:	240050c0 	.word	0x240050c0
 800da34:	08020bbc 	.word	0x08020bbc
 800da38:	08020bcc 	.word	0x08020bcc
 800da3c:	08020bdc 	.word	0x08020bdc
 800da40:	485f      	ldr	r0, [pc, #380]	; (800dbc0 <MadgwickUpdate+0x4e0>)
 800da42:	f011 f821 	bl	801ea88 <iprintf>
		Mat::Quaternion newAcceleration = {0, AccCal(0,0), AccCal(1,0), AccCal(2,0)};
 800da46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da4a:	2200      	movs	r2, #0
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	605a      	str	r2, [r3, #4]
 800da50:	609a      	str	r2, [r3, #8]
 800da52:	60da      	str	r2, [r3, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	2100      	movs	r1, #0
 800da58:	485a      	ldr	r0, [pc, #360]	; (800dbc4 <MadgwickUpdate+0x4e4>)
 800da5a:	f000 fa38 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800da5e:	4603      	mov	r3, r0
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	637b      	str	r3, [r7, #52]	; 0x34
 800da64:	2200      	movs	r2, #0
 800da66:	2101      	movs	r1, #1
 800da68:	4856      	ldr	r0, [pc, #344]	; (800dbc4 <MadgwickUpdate+0x4e4>)
 800da6a:	f000 fa30 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800da6e:	4603      	mov	r3, r0
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	63bb      	str	r3, [r7, #56]	; 0x38
 800da74:	2200      	movs	r2, #0
 800da76:	2102      	movs	r1, #2
 800da78:	4852      	ldr	r0, [pc, #328]	; (800dbc4 <MadgwickUpdate+0x4e4>)
 800da7a:	f000 fa28 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800da7e:	4603      	mov	r3, r0
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	63fb      	str	r3, [r7, #60]	; 0x3c
//		Q.w = GetW();
//		Q.x = GetX();
//		Q.y = GetY();
//		Q.z = GetZ();
		Q = Kalman.GetState();
 800da84:	4850      	ldr	r0, [pc, #320]	; (800dbc8 <MadgwickUpdate+0x4e8>)
 800da86:	f003 fc2d 	bl	80112e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 800da8a:	4603      	mov	r3, r0
 800da8c:	4a4f      	ldr	r2, [pc, #316]	; (800dbcc <MadgwickUpdate+0x4ec>)
 800da8e:	4614      	mov	r4, r2
 800da90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		newAcceleration = (Q * newAcceleration * Q.Conjugate());
 800da96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da9a:	4619      	mov	r1, r3
 800da9c:	484b      	ldr	r0, [pc, #300]	; (800dbcc <MadgwickUpdate+0x4ec>)
 800da9e:	f00b ff29 	bl	80198f4 <_ZNK3Mat10QuaternionmlERKS0_>
 800daa2:	eeb0 6a40 	vmov.f32	s12, s0
 800daa6:	eef0 6a60 	vmov.f32	s13, s1
 800daaa:	eeb0 7a41 	vmov.f32	s14, s2
 800daae:	eef0 7a61 	vmov.f32	s15, s3
 800dab2:	ed87 6a13 	vstr	s12, [r7, #76]	; 0x4c
 800dab6:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800daba:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800dabe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800dac2:	4842      	ldr	r0, [pc, #264]	; (800dbcc <MadgwickUpdate+0x4ec>)
 800dac4:	f00c f812 	bl	8019aec <_ZNK3Mat10Quaternion9ConjugateEv>
 800dac8:	eeb0 6a40 	vmov.f32	s12, s0
 800dacc:	eef0 6a60 	vmov.f32	s13, s1
 800dad0:	eeb0 7a41 	vmov.f32	s14, s2
 800dad4:	eef0 7a61 	vmov.f32	s15, s3
 800dad8:	ed87 6a17 	vstr	s12, [r7, #92]	; 0x5c
 800dadc:	edc7 6a18 	vstr	s13, [r7, #96]	; 0x60
 800dae0:	ed87 7a19 	vstr	s14, [r7, #100]	; 0x64
 800dae4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800dae8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800daec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800daf0:	4611      	mov	r1, r2
 800daf2:	4618      	mov	r0, r3
 800daf4:	f00b fefe 	bl	80198f4 <_ZNK3Mat10QuaternionmlERKS0_>
 800daf8:	eeb0 6a40 	vmov.f32	s12, s0
 800dafc:	eef0 6a60 	vmov.f32	s13, s1
 800db00:	eeb0 7a41 	vmov.f32	s14, s2
 800db04:	eef0 7a61 	vmov.f32	s15, s3
 800db08:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 800db0c:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800db10:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800db14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		LOG("Acceleration Vector: \t%f, \t%f, \t%f,  \t%f, \t%f, \t%f", acc(0,0), acc(1,0), acc(2,0), newAcceleration.x, newAcceleration.y, newAcceleration.z);
 800db18:	f7f4 fba6 	bl	8002268 <HAL_GetTick>
 800db1c:	4601      	mov	r1, r0
 800db1e:	2397      	movs	r3, #151	; 0x97
 800db20:	4a2b      	ldr	r2, [pc, #172]	; (800dbd0 <MadgwickUpdate+0x4f0>)
 800db22:	482c      	ldr	r0, [pc, #176]	; (800dbd4 <MadgwickUpdate+0x4f4>)
 800db24:	f010 ffb0 	bl	801ea88 <iprintf>
 800db28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db2c:	2200      	movs	r2, #0
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f000 f9cc 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800db36:	4603      	mov	r3, r0
 800db38:	edd3 7a00 	vldr	s15, [r3]
 800db3c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800db40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db44:	2200      	movs	r2, #0
 800db46:	2101      	movs	r1, #1
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 f9c0 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800db4e:	4603      	mov	r3, r0
 800db50:	edd3 7a00 	vldr	s15, [r3]
 800db54:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800db58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800db5c:	2200      	movs	r2, #0
 800db5e:	2102      	movs	r1, #2
 800db60:	4618      	mov	r0, r3
 800db62:	f000 f9b4 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800db66:	4603      	mov	r3, r0
 800db68:	edd3 7a00 	vldr	s15, [r3]
 800db6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db70:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800db74:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800db78:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800db7c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800db80:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800db84:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800db88:	ed8d 4b08 	vstr	d4, [sp, #32]
 800db8c:	ed8d 5b06 	vstr	d5, [sp, #24]
 800db90:	ed8d 6b04 	vstr	d6, [sp, #16]
 800db94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db98:	ed8d 8b00 	vstr	d8, [sp]
 800db9c:	ec53 2b19 	vmov	r2, r3, d9
 800dba0:	480d      	ldr	r0, [pc, #52]	; (800dbd8 <MadgwickUpdate+0x4f8>)
 800dba2:	f010 ff71 	bl	801ea88 <iprintf>
 800dba6:	4806      	ldr	r0, [pc, #24]	; (800dbc0 <MadgwickUpdate+0x4e0>)
 800dba8:	f010 ff6e 	bl	801ea88 <iprintf>
		//auto acc = Fusion.GetAcceleration();
//		printf("Orig: %f, \t%f, \t%f, \tMy: %f, \t%f, \t%f\n\r",
//				_acceleration.x, _acceleration.y, _acceleration.z,
//				acc.x, acc.y, acc.z);

		return 1;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e000      	b.n	800dbb2 <MadgwickUpdate+0x4d2>
	}
	return 0;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	377c      	adds	r7, #124	; 0x7c
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	ecbd 8b0a 	vpop	{d8-d12}
 800dbbc:	bd90      	pop	{r4, r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08020c04 	.word	0x08020c04
 800dbc4:	24005090 	.word	0x24005090
 800dbc8:	24004fac 	.word	0x24004fac
 800dbcc:	240050c0 	.word	0x240050c0
 800dbd0:	08020bbc 	.word	0x08020bbc
 800dbd4:	08020bcc 	.word	0x08020bcc
 800dbd8:	08020c08 	.word	0x08020c08

0800dbdc <OnGNSSData>:

uint8_t OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
	Fusion.OnGNSSData(GNSSData);
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	4804      	ldr	r0, [pc, #16]	; (800dbf8 <OnGNSSData+0x1c>)
 800dbe8:	f00b f8c0 	bl	8018d6c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>
}
 800dbec:	bf00      	nop
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	24004cf4 	.word	0x24004cf4

0800dbfc <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(float val)
{
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	601a      	str	r2, [r3, #0]
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <_ZN3Mat6MatrixILt6ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800dc1a:	b590      	push	{r4, r7, lr}
 800dc1c:	b083      	sub	sp, #12
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 f9a5 	bl	800df78 <_ZNSt5arrayIfLj36EE5beginEv>
 800dc2e:	4604      	mov	r4, r0
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 f9ac 	bl	800df90 <_ZNSt5arrayIfLj36EE3endEv>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	edd7 7a00 	vldr	s15, [r7]
 800dc3e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc42:	4619      	mov	r1, r3
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 f9b0 	bl	800dfaa <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}

0800dc54 <_ZN3Mat8V_VectorILt4EEC1Ev>:
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
	return std::sqrt(result);
}

template <u_short length>
V_Vector<length>::V_Vector() : Matrix<length, 1>() {}
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f000 f9bf 	bl	800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800dc6e:	b480      	push	{r7}
 800dc70:	b083      	sub	sp, #12
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>:
	using MeassurementVec = V_Vector<meassurementLen>;
	using StateCovarianceMatrix = Matrix<stateLen, stateLen>;
	using ControlCovarianceMatrix = Matrix<controlLen, controlLen>;
	using MeasurementCovarianceMatrix = Matrix<meassurementLen, meassurementLen>;

	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800dc84:	b4b0      	push	{r4, r5, r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800dc94:	4a10      	ldr	r2, [pc, #64]	; (800dcd8 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf+0x54>)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	1d1c      	adds	r4, r3, #4
 800dca0:	4613      	mov	r3, r2
 800dca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	f103 0414 	add.w	r4, r3, #20
 800dcb0:	4615      	mov	r5, r2
 800dcb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dcbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dcc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	655a      	str	r2, [r3, #84]	; 0x54
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bcb0      	pop	{r4, r5, r7}
 800dcd6:	4770      	bx	lr
 800dcd8:	08020ebc 	.word	0x08020ebc

0800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>:
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 f986 	bl	800dff8 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>:
 800dcf6:	b480      	push	{r7}
 800dcf8:	b083      	sub	sp, #12
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800dd0c:	b5b0      	push	{r4, r5, r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800dd1c:	4a0e      	ldr	r2, [pc, #56]	; (800dd58 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf+0x4c>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	1d1c      	adds	r4, r3, #4
 800dd28:	4615      	mov	r5, r2
 800dd2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dd32:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	331c      	adds	r3, #28
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	2290      	movs	r2, #144	; 0x90
 800dd40:	4618      	mov	r0, r3
 800dd42:	f010 ff76 	bl	801ec32 <memcpy>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bdb0      	pop	{r4, r5, r7, pc}
 800dd58:	08020ee8 	.word	0x08020ee8

0800dd5c <_ZN3Mat8V_VectorILt3EEC1Ev>:
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 f951 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>:
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4618      	mov	r0, r3
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800dd98:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ddd0 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 f950 	bl	800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800dda2:	2300      	movs	r3, #0
 800dda4:	81fb      	strh	r3, [r7, #14]
 800dda6:	e00b      	b.n	800ddc0 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800dda8:	89fa      	ldrh	r2, [r7, #14]
 800ddaa:	89fb      	ldrh	r3, [r7, #14]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f964 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800ddba:	89fb      	ldrh	r3, [r7, #14]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	81fb      	strh	r3, [r7, #14]
 800ddc0:	89fb      	ldrh	r3, [r7, #14]
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d9f0      	bls.n	800dda8 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800ddc6:	bf00      	nop
}
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	00000000 	.word	0x00000000

0800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	460b      	mov	r3, r1
 800ddde:	807b      	strh	r3, [r7, #2]
 800dde0:	4613      	mov	r3, r2
 800dde2:	803b      	strh	r3, [r7, #0]
{
	u_int index = width * row + col;
 800dde4:	887a      	ldrh	r2, [r7, #2]
 800dde6:	4613      	mov	r3, r2
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	4413      	add	r3, r2
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	461a      	mov	r2, r3
 800ddf0:	883b      	ldrh	r3, [r7, #0]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68f9      	ldr	r1, [r7, #12]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f000 f957 	bl	800e0ae <_ZNSt5arrayIfLj36EEixEj>
 800de00:	4603      	mov	r3, r0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800de18:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800de50 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f964 	bl	800e0ea <_ZN3Mat6MatrixILt4ELt4EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800de22:	2300      	movs	r3, #0
 800de24:	81fb      	strh	r3, [r7, #14]
 800de26:	e00b      	b.n	800de40 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800de28:	89fa      	ldrh	r2, [r7, #14]
 800de2a:	89fb      	ldrh	r3, [r7, #14]
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f978 	bl	800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800de34:	4602      	mov	r2, r0
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800de3a:	89fb      	ldrh	r3, [r7, #14]
 800de3c:	3301      	adds	r3, #1
 800de3e:	81fb      	strh	r3, [r7, #14]
 800de40:	89fb      	ldrh	r3, [r7, #14]
 800de42:	2b03      	cmp	r3, #3
 800de44:	d9f0      	bls.n	800de28 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800de46:	bf00      	nop
}
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	00000000 	.word	0x00000000

0800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	ca07      	ldmia	r2, {r0, r1, r2}
 800de64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800de76:	b480      	push	{r7}
 800de78:	b083      	sub	sp, #12
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	6039      	str	r1, [r7, #0]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	601a      	str	r2, [r3, #0]
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800de94:	b590      	push	{r4, r7, lr}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 f955 	bl	800e152 <_ZNSt5arrayIfLj3EE5beginEv>
 800dea8:	4604      	mov	r4, r0
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 f95c 	bl	800e16a <_ZNSt5arrayIfLj3EE3endEv>
 800deb2:	4603      	mov	r3, r0
 800deb4:	edd7 7a00 	vldr	s15, [r7]
 800deb8:	eeb0 0a67 	vmov.f32	s0, s15
 800debc:	4619      	mov	r1, r3
 800debe:	4620      	mov	r0, r4
 800dec0:	f000 f960 	bl	800e184 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4618      	mov	r0, r3
 800dec8:	370c      	adds	r7, #12
 800deca:	46bd      	mov	sp, r7
 800decc:	bd90      	pop	{r4, r7, pc}

0800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	460b      	mov	r3, r1
 800ded8:	807b      	strh	r3, [r7, #2]
 800deda:	4613      	mov	r3, r2
 800dedc:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800dede:	887a      	ldrh	r2, [r7, #2]
 800dee0:	883b      	ldrh	r3, [r7, #0]
 800dee2:	4413      	add	r3, r2
 800dee4:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	68f9      	ldr	r1, [r7, #12]
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f966 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 800def0:	4603      	mov	r3, r0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800defa:	b580      	push	{r7, lr}
 800defc:	b08c      	sub	sp, #48	; 0x30
 800defe:	af00      	add	r7, sp, #0
 800df00:	6178      	str	r0, [r7, #20]
 800df02:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 800df04:	f107 0318 	add.w	r3, r7, #24
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 f880 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
	Multiply(other, result);
 800df0e:	f107 0318 	add.w	r3, r7, #24
 800df12:	461a      	mov	r2, r3
 800df14:	6939      	ldr	r1, [r7, #16]
 800df16:	6978      	ldr	r0, [r7, #20]
 800df18:	f000 f95f 	bl	800e1da <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 800df1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df20:	f107 0218 	add.w	r2, r7, #24
 800df24:	ca07      	ldmia	r2, {r0, r1, r2}
 800df26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800df2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	ee06 1a90 	vmov	s13, r1
 800df34:	ee07 2a10 	vmov	s14, r2
 800df38:	ee07 3a90 	vmov	s15, r3
}
 800df3c:	eeb0 0a66 	vmov.f32	s0, s13
 800df40:	eef0 0a47 	vmov.f32	s1, s14
 800df44:	eeb0 1a67 	vmov.f32	s2, s15
 800df48:	3730      	adds	r7, #48	; 0x30
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <_ZNK3Mat8V_VectorILt6EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 800df4e:	b580      	push	{r7, lr}
 800df50:	b082      	sub	sp, #8
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	460b      	mov	r3, r1
 800df58:	807b      	strh	r3, [r7, #2]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	887a      	ldrh	r2, [r7, #2]
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f9ee 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 800df66:	4603      	mov	r3, r0
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	ee07 3a90 	vmov	s15, r3
 800df6e:	eeb0 0a67 	vmov.f32	s0, s15
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <_ZNSt5arrayIfLj36EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f9ed 	bl	800e360 <_ZNSt5arrayIfLj36EE4dataEv>
 800df86:	4603      	mov	r3, r0
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZNSt5arrayIfLj36EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f9e1 	bl	800e360 <_ZNSt5arrayIfLj36EE4dataEv>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	3390      	adds	r3, #144	; 0x90
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 800dfb8:	e007      	b.n	800dfca <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800dfba:	1d3b      	adds	r3, r7, #4
 800dfbc:	68f9      	ldr	r1, [r7, #12]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7ff fe1c 	bl	800dbfc <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	60fb      	str	r3, [r7, #12]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d1f3      	bne.n	800dfba <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	ee07 3a90 	vmov	s15, r3
    }
 800dfd8:	eeb0 0a67 	vmov.f32	s0, s15
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>:
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4618      	mov	r0, r3
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>:
 800e00e:	b480      	push	{r7}
 800e010:	b083      	sub	sp, #12
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	601a      	str	r2, [r3, #0]
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr

0800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800e042:	b590      	push	{r4, r7, lr}
 800e044:	b083      	sub	sp, #12
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	f000 f992 	bl	800e37a <_ZNSt5arrayIfLj9EE5beginEv>
 800e056:	4604      	mov	r4, r0
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f000 f999 	bl	800e392 <_ZNSt5arrayIfLj9EE3endEv>
 800e060:	4603      	mov	r3, r0
 800e062:	edd7 7a00 	vldr	s15, [r7]
 800e066:	eeb0 0a67 	vmov.f32	s0, s15
 800e06a:	4619      	mov	r1, r3
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 f99d 	bl	800e3ac <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd90      	pop	{r4, r7, pc}

0800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	807b      	strh	r3, [r7, #2]
 800e088:	4613      	mov	r3, r2
 800e08a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e08c:	887a      	ldrh	r2, [r7, #2]
 800e08e:	4613      	mov	r3, r2
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	441a      	add	r2, r3
 800e094:	883b      	ldrh	r3, [r7, #0]
 800e096:	4413      	add	r3, r2
 800e098:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	68f9      	ldr	r1, [r7, #12]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 f9a0 	bl	800e3e4 <_ZNSt5arrayIfLj9EEixEj>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <_ZNSt5arrayIfLj36EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f9a0 	bl	800e402 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800e0c2:	4603      	mov	r3, r0
      }
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	601a      	str	r2, [r3, #0]
 800e0de:	bf00      	nop
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <_ZN3Mat6MatrixILt4ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800e0ea:	b590      	push	{r4, r7, lr}
 800e0ec:	b083      	sub	sp, #12
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 f991 	bl	800e420 <_ZNSt5arrayIfLj16EE5beginEv>
 800e0fe:	4604      	mov	r4, r0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 f998 	bl	800e438 <_ZNSt5arrayIfLj16EE3endEv>
 800e108:	4603      	mov	r3, r0
 800e10a:	edd7 7a00 	vldr	s15, [r7]
 800e10e:	eeb0 0a67 	vmov.f32	s0, s15
 800e112:	4619      	mov	r1, r3
 800e114:	4620      	mov	r0, r4
 800e116:	f000 f99c 	bl	800e452 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	bd90      	pop	{r4, r7, pc}

0800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	807b      	strh	r3, [r7, #2]
 800e130:	4613      	mov	r3, r2
 800e132:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e134:	887b      	ldrh	r3, [r7, #2]
 800e136:	009a      	lsls	r2, r3, #2
 800e138:	883b      	ldrh	r3, [r7, #0]
 800e13a:	4413      	add	r3, r2
 800e13c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68f9      	ldr	r1, [r7, #12]
 800e142:	4618      	mov	r0, r3
 800e144:	f000 f9a1 	bl	800e48a <_ZNSt5arrayIfLj16EEixEj>
 800e148:	4603      	mov	r3, r0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <_ZNSt5arrayIfLj3EE5beginEv>:
      begin() noexcept
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f9a4 	bl	800e4a8 <_ZNSt5arrayIfLj3EE4dataEv>
 800e160:	4603      	mov	r3, r0
 800e162:	4618      	mov	r0, r3
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <_ZNSt5arrayIfLj3EE3endEv>:
      end() noexcept
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b082      	sub	sp, #8
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f998 	bl	800e4a8 <_ZNSt5arrayIfLj3EE4dataEv>
 800e178:	4603      	mov	r3, r0
 800e17a:	330c      	adds	r3, #12
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e192:	e007      	b.n	800e1a4 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e194:	1d3b      	adds	r3, r7, #4
 800e196:	68f9      	ldr	r1, [r7, #12]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7ff fe6c 	bl	800de76 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	60fb      	str	r3, [r7, #12]
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d1f3      	bne.n	800e194 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	ee07 3a90 	vmov	s15, r3
    }
 800e1b2:	eeb0 0a67 	vmov.f32	s0, s15
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6839      	ldr	r1, [r7, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 f979 	bl	800e4c2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800e1d0:	4603      	mov	r3, r0
      }
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800e1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1dc:	b095      	sub	sp, #84	; 0x54
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	60f8      	str	r0, [r7, #12]
 800e1e2:	60b9      	str	r1, [r7, #8]
 800e1e4:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e1ec:	e02d      	b.n	800e24a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e1f4:	e020      	b.n	800e238 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800e1f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e1fa:	f107 0314 	add.w	r3, r7, #20
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f000 f96d 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800e206:	4602      	mov	r2, r0
 800e208:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e20c:	4619      	mov	r1, r3
 800e20e:	4610      	mov	r0, r2
 800e210:	f7ff ffd4 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 800e214:	4604      	mov	r4, r0
 800e216:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800e21a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e21e:	4619      	mov	r1, r3
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f96c 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800e226:	eef0 7a40 	vmov.f32	s15, s0
 800e22a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800e22e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e232:	3301      	adds	r3, #1
 800e234:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d9da      	bls.n	800e1f6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800e240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e244:	3301      	adds	r3, #1
 800e246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e24a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d9cd      	bls.n	800e1ee <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 800e252:	2300      	movs	r3, #0
 800e254:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e258:	e02d      	b.n	800e2b6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800e25a:	2300      	movs	r3, #0
 800e25c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e260:	e020      	b.n	800e2a4 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800e262:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e266:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e26a:	4611      	mov	r1, r2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f000 f963 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800e272:	4602      	mov	r2, r0
 800e274:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e278:	4619      	mov	r1, r3
 800e27a:	4610      	mov	r0, r2
 800e27c:	f7ff ff9e 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 800e280:	4604      	mov	r4, r0
 800e282:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e286:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e28a:	4619      	mov	r1, r3
 800e28c:	68b8      	ldr	r0, [r7, #8]
 800e28e:	f000 f962 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800e292:	eef0 7a40 	vmov.f32	s15, s0
 800e296:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800e29a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e29e:	3301      	adds	r3, #1
 800e2a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e2a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d9da      	bls.n	800e262 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800e2ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e2b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d0cd      	beq.n	800e25a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x80>

	for(u_short row = 0; row < heigth; ++row)
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e2c4:	e034      	b.n	800e330 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e2cc:	e027      	b.n	800e31e <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800e2ce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e2d2:	f107 0314 	add.w	r3, r7, #20
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 f901 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800e2de:	4605      	mov	r5, r0
 800e2e0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e2e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 f924 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e2f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7ff fde6 	bl	800dece <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800e302:	4604      	mov	r4, r0
 800e304:	4631      	mov	r1, r6
 800e306:	4628      	mov	r0, r5
 800e308:	f000 f93f 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 800e30c:	eef0 7a40 	vmov.f32	s15, s0
 800e310:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800e314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e318:	3301      	adds	r3, #1
 800e31a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e31e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e322:	2b00      	cmp	r3, #0
 800e324:	d0d3      	beq.n	800e2ce <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800e326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e32a:	3301      	adds	r3, #1
 800e32c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e334:	2b02      	cmp	r3, #2
 800e336:	d9c6      	bls.n	800e2c6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	3754      	adds	r7, #84	; 0x54
 800e33e:	46bd      	mov	sp, r7
 800e340:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e342 <_ZNKSt5arrayIfLj6EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	4618      	mov	r0, r3
 800e352:	f000 f94d 	bl	800e5f0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800e356:	4603      	mov	r3, r0
      }
 800e358:	4618      	mov	r0, r3
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <_ZNSt5arrayIfLj36EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 f94f 	bl	800e60e <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>
 800e370:	4603      	mov	r3, r0
 800e372:	4618      	mov	r0, r3
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <_ZNSt5arrayIfLj9EE5beginEv>:
      begin() noexcept
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 f94e 	bl	800e624 <_ZNSt5arrayIfLj9EE4dataEv>
 800e388:	4603      	mov	r3, r0
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <_ZNSt5arrayIfLj9EE3endEv>:
      end() noexcept
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f942 	bl	800e624 <_ZNSt5arrayIfLj9EE4dataEv>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	3324      	adds	r3, #36	; 0x24
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e3ba:	e007      	b.n	800e3cc <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e3bc:	1d3b      	adds	r3, r7, #4
 800e3be:	68f9      	ldr	r1, [r7, #12]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff fe2f 	bl	800e024 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d1f3      	bne.n	800e3bc <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	ee07 3a90 	vmov	s15, r3
    }
 800e3da:	eeb0 0a67 	vmov.f32	s0, s15
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <_ZNSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) noexcept
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f000 f923 	bl	800e63e <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800e3f8:	4603      	mov	r3, r0
      }
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e402:	b480      	push	{r7}
 800e404:	b083      	sub	sp, #12
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	4413      	add	r3, r2
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <_ZNSt5arrayIfLj16EE5beginEv>:
      begin() noexcept
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f917 	bl	800e65c <_ZNSt5arrayIfLj16EE4dataEv>
 800e42e:	4603      	mov	r3, r0
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <_ZNSt5arrayIfLj16EE3endEv>:
      end() noexcept
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f90b 	bl	800e65c <_ZNSt5arrayIfLj16EE4dataEv>
 800e446:	4603      	mov	r3, r0
 800e448:	3340      	adds	r3, #64	; 0x40
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	60b9      	str	r1, [r7, #8]
 800e45c:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e460:	e007      	b.n	800e472 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e462:	1d3b      	adds	r3, r7, #4
 800e464:	68f9      	ldr	r1, [r7, #12]
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff fe30 	bl	800e0cc <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	3304      	adds	r3, #4
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	429a      	cmp	r2, r3
 800e478:	d1f3      	bne.n	800e462 <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	ee07 3a90 	vmov	s15, r3
    }
 800e480:	eeb0 0a67 	vmov.f32	s0, s15
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b082      	sub	sp, #8
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 f8ec 	bl	800e676 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800e49e:	4603      	mov	r3, r0
      }
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <_ZNSt5arrayIfLj3EE4dataEv>:
      data() noexcept
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f000 f8ee 	bl	800e694 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e4c2:	b480      	push	{r7}
 800e4c4:	b083      	sub	sp, #12
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6839      	ldr	r1, [r7, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 f8db 	bl	800e6aa <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800e4f4:	4603      	mov	r3, r0
      }
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	460b      	mov	r3, r1
 800e508:	807b      	strh	r3, [r7, #2]
 800e50a:	4613      	mov	r3, r2
 800e50c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e50e:	887a      	ldrh	r2, [r7, #2]
 800e510:	4613      	mov	r3, r2
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	441a      	add	r2, r3
 800e516:	883b      	ldrh	r3, [r7, #0]
 800e518:	4413      	add	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68f9      	ldr	r1, [r7, #12]
 800e520:	4618      	mov	r0, r3
 800e522:	f000 f8d4 	bl	800e6ce <_ZNKSt5arrayIfLj9EEixEj>
 800e526:	4603      	mov	r3, r0
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	ee07 3a90 	vmov	s15, r3
}
 800e52e:	eeb0 0a67 	vmov.f32	s0, s15
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 f8d0 	bl	800e6ec <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800e54c:	4603      	mov	r3, r0
      }
 800e54e:	4618      	mov	r0, r3
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e556:	b580      	push	{r7, lr}
 800e558:	b084      	sub	sp, #16
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	460b      	mov	r3, r1
 800e560:	807b      	strh	r3, [r7, #2]
 800e562:	4613      	mov	r3, r2
 800e564:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e566:	887a      	ldrh	r2, [r7, #2]
 800e568:	883b      	ldrh	r3, [r7, #0]
 800e56a:	4413      	add	r3, r2
 800e56c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	68f9      	ldr	r1, [r7, #12]
 800e572:	4618      	mov	r0, r3
 800e574:	f000 f8cc 	bl	800e710 <_ZNKSt5arrayIfLj3EEixEj>
 800e578:	4603      	mov	r3, r0
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	ee07 3a90 	vmov	s15, r3
}
 800e580:	eeb0 0a67 	vmov.f32	s0, s15
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800e58a:	b580      	push	{r7, lr}
 800e58c:	ed2d 8b02 	vpush	{d8}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800e598:	f04f 0300 	mov.w	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60bb      	str	r3, [r7, #8]
 800e5a2:	e018      	b.n	800e5d6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800e5a4:	68b9      	ldr	r1, [r7, #8]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f8b2 	bl	800e710 <_ZNKSt5arrayIfLj3EEixEj>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	ed93 8a00 	vldr	s16, [r3]
 800e5b2:	68b9      	ldr	r1, [r7, #8]
 800e5b4:	6838      	ldr	r0, [r7, #0]
 800e5b6:	f000 f8ab 	bl	800e710 <_ZNKSt5arrayIfLj3EEixEj>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	edd3 7a00 	vldr	s15, [r3]
 800e5c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e5c4:	ed97 7a03 	vldr	s14, [r7, #12]
 800e5c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5cc:	edc7 7a03 	vstr	s15, [r7, #12]
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	60bb      	str	r3, [r7, #8]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d9e3      	bls.n	800e5a4 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	ee07 3a90 	vmov	s15, r3
}
 800e5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	ecbd 8b02 	vpop	{d8}
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	4413      	add	r3, r2
 800e602:	4618      	mov	r0, r3
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e60e:	b480      	push	{r7}
 800e610:	b083      	sub	sp, #12
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4618      	mov	r0, r3
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <_ZNSt5arrayIfLj9EE4dataEv>:
      data() noexcept
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 f87d 	bl	800e72e <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>
 800e634:	4603      	mov	r3, r0
 800e636:	4618      	mov	r0, r3
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	4413      	add	r3, r2
 800e650:	4618      	mov	r0, r3
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <_ZNSt5arrayIfLj16EE4dataEv>:
      data() noexcept
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4618      	mov	r0, r3
 800e668:	f000 f86c 	bl	800e744 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>
 800e66c:	4603      	mov	r3, r0
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e676:	b480      	push	{r7}
 800e678:	b083      	sub	sp, #12
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	4413      	add	r3, r2
 800e688:	4618      	mov	r0, r3
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	370c      	adds	r7, #12
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e6aa:	b480      	push	{r7}
 800e6ac:	b083      	sub	sp, #12
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	4413      	add	r3, r2
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	370c      	adds	r7, #12
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr

0800e6ce <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b082      	sub	sp, #8
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6839      	ldr	r1, [r7, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7ff ffae 	bl	800e63e <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800e6e2:	4603      	mov	r3, r0
      }
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	4413      	add	r3, r2
 800e704:	4618      	mov	r0, r3
 800e706:	370c      	adds	r7, #12
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <_ZNKSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) const noexcept
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff fecf 	bl	800e4c2 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800e724:	4603      	mov	r3, r0
      }
 800e726:	4618      	mov	r0, r3
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
	...

0800e75c <_Z41__static_initialization_and_destruction_0ii>:

Vec3 GetAcceleration()
{
	Vec3 result;
	return result;
}
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b09a      	sub	sp, #104	; 0x68
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	f040 8093 	bne.w	800e894 <_Z41__static_initialization_and_destruction_0ii+0x138>
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e774:	4293      	cmp	r3, r2
 800e776:	f040 808d 	bne.w	800e894 <_Z41__static_initialization_and_destruction_0ii+0x138>
Algorithms::FusionAlgorithm Fusion{};
 800e77a:	4848      	ldr	r0, [pc, #288]	; (800e89c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800e77c:	f7fe fe34 	bl	800d3e8 <_ZN10Algorithms15FusionAlgorithmC1Ev>
Algorithms::AHRSKalman Kalman{};
 800e780:	4847      	ldr	r0, [pc, #284]	; (800e8a0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800e782:	f7fe fef5 	bl	800d570 <_ZN10Algorithms10AHRSKalmanC1Ev>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 800e786:	f04f 0300 	mov.w	r3, #0
 800e78a:	60bb      	str	r3, [r7, #8]
 800e78c:	f04f 0300 	mov.w	r3, #0
 800e790:	60fb      	str	r3, [r7, #12]
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	613b      	str	r3, [r7, #16]
 800e798:	f107 0308 	add.w	r3, r7, #8
 800e79c:	4619      	mov	r1, r3
 800e79e:	4841      	ldr	r0, [pc, #260]	; (800e8a4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800e7a0:	f7ff fb58 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 800e7a4:	f04f 0300 	mov.w	r3, #0
 800e7a8:	617b      	str	r3, [r7, #20]
 800e7aa:	f04f 0300 	mov.w	r3, #0
 800e7ae:	61bb      	str	r3, [r7, #24]
 800e7b0:	f04f 0300 	mov.w	r3, #0
 800e7b4:	61fb      	str	r3, [r7, #28]
 800e7b6:	f107 0314 	add.w	r3, r7, #20
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	483a      	ldr	r0, [pc, #232]	; (800e8a8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800e7be:	f7ff fb49 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 800e7c2:	f04f 0300 	mov.w	r3, #0
 800e7c6:	623b      	str	r3, [r7, #32]
 800e7c8:	f04f 0300 	mov.w	r3, #0
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ce:	f04f 0300 	mov.w	r3, #0
 800e7d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7d4:	f107 0320 	add.w	r3, r7, #32
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4834      	ldr	r0, [pc, #208]	; (800e8ac <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800e7dc:	f7ff fb3a 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 800e7e0:	f04f 0300 	mov.w	r3, #0
 800e7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e6:	f04f 0300 	mov.w	r3, #0
 800e7ea:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	482d      	ldr	r0, [pc, #180]	; (800e8b0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800e7fa:	f7ff fb2b 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 800e7fe:	f04f 0300 	mov.w	r3, #0
 800e802:	63bb      	str	r3, [r7, #56]	; 0x38
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e80a:	f04f 0300 	mov.w	r3, #0
 800e80e:	643b      	str	r3, [r7, #64]	; 0x40
 800e810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e814:	4619      	mov	r1, r3
 800e816:	4827      	ldr	r0, [pc, #156]	; (800e8b4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800e818:	f7ff fb1c 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800e81c:	f04f 0300 	mov.w	r3, #0
 800e820:	647b      	str	r3, [r7, #68]	; 0x44
 800e822:	f04f 0300 	mov.w	r3, #0
 800e826:	64bb      	str	r3, [r7, #72]	; 0x48
 800e828:	f04f 0300 	mov.w	r3, #0
 800e82c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e82e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e832:	4619      	mov	r1, r3
 800e834:	4820      	ldr	r0, [pc, #128]	; (800e8b8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800e836:	f7ff fb0d 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 800e83a:	f04f 0300 	mov.w	r3, #0
 800e83e:	653b      	str	r3, [r7, #80]	; 0x50
 800e840:	f04f 0300 	mov.w	r3, #0
 800e844:	657b      	str	r3, [r7, #84]	; 0x54
 800e846:	f04f 0300 	mov.w	r3, #0
 800e84a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e84c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e850:	4619      	mov	r1, r3
 800e852:	481a      	ldr	r0, [pc, #104]	; (800e8bc <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800e854:	f7ff fafe 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 800e858:	f04f 0300 	mov.w	r3, #0
 800e85c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e85e:	f04f 0300 	mov.w	r3, #0
 800e862:	663b      	str	r3, [r7, #96]	; 0x60
 800e864:	f04f 0300 	mov.w	r3, #0
 800e868:	667b      	str	r3, [r7, #100]	; 0x64
 800e86a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e86e:	4619      	mov	r1, r3
 800e870:	4813      	ldr	r0, [pc, #76]	; (800e8c0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800e872:	f7ff faef 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> angle = 0.0f;
 800e876:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e8c4 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e87a:	4813      	ldr	r0, [pc, #76]	; (800e8c8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800e87c:	f7ff fb0a 	bl	800de94 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> speed = 0.0f;
 800e880:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e8c4 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e884:	4811      	ldr	r0, [pc, #68]	; (800e8cc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800e886:	f7ff fb05 	bl	800de94 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> meanMag = 0.0f;
 800e88a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e8c4 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e88e:	4810      	ldr	r0, [pc, #64]	; (800e8d0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800e890:	f7ff fb00 	bl	800de94 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
}
 800e894:	bf00      	nop
 800e896:	3768      	adds	r7, #104	; 0x68
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	24004cf4 	.word	0x24004cf4
 800e8a0:	24004fac 	.word	0x24004fac
 800e8a4:	24005060 	.word	0x24005060
 800e8a8:	2400506c 	.word	0x2400506c
 800e8ac:	24005078 	.word	0x24005078
 800e8b0:	24005084 	.word	0x24005084
 800e8b4:	24005090 	.word	0x24005090
 800e8b8:	2400509c 	.word	0x2400509c
 800e8bc:	240050a8 	.word	0x240050a8
 800e8c0:	240050b4 	.word	0x240050b4
 800e8c4:	00000000 	.word	0x00000000
 800e8c8:	240050d0 	.word	0x240050d0
 800e8cc:	240050dc 	.word	0x240050dc
 800e8d0:	240050e8 	.word	0x240050e8

0800e8d4 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE4InitERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800e8d4:	b4b0      	push	{r4, r5, r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
 800e8e0:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	1d1c      	adds	r4, r3, #4
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_stateCovMatrix = stateCovMatrix;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	f103 0414 	add.w	r4, r3, #20
 800e8fa:	4615      	mov	r5, r2
 800e8fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e908:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e90c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_time = time;}
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	655a      	str	r2, [r3, #84]	; 0x54
 800e916:	bf00      	nop
 800e918:	3714      	adds	r7, #20
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bcb0      	pop	{r4, r5, r7}
 800e91e:	4770      	bx	lr

0800e920 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
	StateCovarianceMatrix _stateCovMatrix;
	float _time;
};

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800e920:	b5b0      	push	{r4, r5, r7, lr}
 800e922:	b0e4      	sub	sp, #400	; 0x190
 800e924:	af00      	add	r7, sp, #0
 800e926:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e92a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e92e:	6018      	str	r0, [r3, #0]
 800e930:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e934:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e938:	6019      	str	r1, [r3, #0]
 800e93a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e93e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e948:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e94c:	ed83 0a00 	vstr	s0, [r3]
		const ControlVec& controlVec,
		const ControlCovarianceMatrix& controlCov,
		float time)
{
	const StateCovarianceMatrix F = _F(controlVec, time);
 800e950:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e954:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	3310      	adds	r3, #16
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e964:	f5a2 74a0 	sub.w	r4, r2, #320	; 0x140
 800e968:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e96c:	f5a2 70a8 	sub.w	r0, r2, #336	; 0x150
 800e970:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e974:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800e978:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800e97c:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800e980:	ed90 0a00 	vldr	s0, [r0]
 800e984:	6812      	ldr	r2, [r2, #0]
 800e986:	6809      	ldr	r1, [r1, #0]
 800e988:	4620      	mov	r0, r4
 800e98a:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800e98c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e990:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f103 0214 	add.w	r2, r3, #20
 800e99a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e99e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 fbc4 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800e9a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 fbcf 	bl	800f156 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 800e9b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e9bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e9c0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e9c4:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 fbb1 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800e9ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e9d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3314      	adds	r3, #20
 800e9dc:	681c      	ldr	r4, [r3, #0]
 800e9de:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800e9e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e9e6:	f5a3 70a8 	sub.w	r0, r3, #336	; 0x150
 800e9ea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e9ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e9f2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e9f6:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800e9fa:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800e9fe:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800ea02:	ed90 0a00 	vldr	s0, [r0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6812      	ldr	r2, [r2, #0]
 800ea0a:	6809      	ldr	r1, [r1, #0]
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47a0      	blx	r4
 800ea10:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ea14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ea18:	681c      	ldr	r4, [r3, #0]
 800ea1a:	463b      	mov	r3, r7
 800ea1c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800ea20:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 fbc6 	bl	800f1b6 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 800ea2a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ea2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ea32:	3414      	adds	r4, #20
 800ea34:	461d      	mov	r5, r3
 800ea36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ea46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_state = _f(controlVec, time);
 800ea4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ea4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	330c      	adds	r3, #12
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ea5e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800ea62:	6814      	ldr	r4, [r2, #0]
 800ea64:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ea68:	f5a2 70a8 	sub.w	r0, r2, #336	; 0x150
 800ea6c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ea70:	f5a2 71a4 	sub.w	r1, r2, #328	; 0x148
 800ea74:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ea78:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800ea7c:	ed90 0a00 	vldr	s0, [r0]
 800ea80:	6809      	ldr	r1, [r1, #0]
 800ea82:	6810      	ldr	r0, [r2, #0]
 800ea84:	4798      	blx	r3
 800ea86:	eeb0 6a40 	vmov.f32	s12, s0
 800ea8a:	eef0 6a60 	vmov.f32	s13, s1
 800ea8e:	eeb0 7a41 	vmov.f32	s14, s2
 800ea92:	eef0 7a61 	vmov.f32	s15, s3
 800ea96:	ed84 6a01 	vstr	s12, [r4, #4]
 800ea9a:	edc4 6a02 	vstr	s13, [r4, #8]
 800ea9e:	ed84 7a03 	vstr	s14, [r4, #12]
 800eaa2:	edc4 7a04 	vstr	s15, [r4, #16]
	_time = time;
 800eaa6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800eaaa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800eab4:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800eab8:	6812      	ldr	r2, [r2, #0]
 800eaba:	655a      	str	r2, [r3, #84]	; 0x54
}
 800eabc:	bf00      	nop
 800eabe:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bdb0      	pop	{r4, r5, r7, pc}

0800eac6 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800eac6:	b5b0      	push	{r4, r5, r7, lr}
 800eac8:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 800eacc:	af00      	add	r7, sp, #0
 800eace:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ead2:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ead6:	6018      	str	r0, [r3, #0]
 800ead8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eadc:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800eae0:	6019      	str	r1, [r3, #0]
 800eae2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eae6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eaf0:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800eaf4:	ed83 0a00 	vstr	s0, [r3]
		const MeassurementVec& meassurementVec,
		const MeasurementCovarianceMatrix& meassurementCov,
		float time)
{
	auto H = _H();
 800eaf8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eafc:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	331c      	adds	r3, #28
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800eb0c:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
 800eb10:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800eb14:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 800eb18:	6811      	ldr	r1, [r2, #0]
 800eb1a:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800eb1c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb20:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f103 0214 	add.w	r2, r3, #20
 800eb2a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb2e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800eb32:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fb5a 	bl	800f1f0 <_ZNK3Mat6MatrixILt6ELt4EEmlILt4EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>
 800eb3c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb40:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800eb44:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800eb48:	4611      	mov	r1, r2
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fb63 	bl	800f216 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>
 800eb50:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb54:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800eb58:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800eb5c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 fb88 	bl	800f276 <_ZNK3Mat6MatrixILt6ELt4EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>
 800eb66:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb6a:	f5a3 6092 	sub.w	r0, r3, #1168	; 0x490
 800eb6e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb72:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800eb76:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	f000 fb8e 	bl	800f29c <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800eb80:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb84:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f103 0414 	add.w	r4, r3, #20
 800eb8e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb92:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800eb96:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 fb3a 	bl	800f216 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>
 800eba2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eba6:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800ebaa:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800ebae:	4621      	mov	r1, r4
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 fb8a 	bl	800f2ca <_ZNK3Mat6MatrixILt4ELt4EEmlILt6EEENS0_ILt4EXT_EEERKS3_>
 800ebb6:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ebba:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	3320      	adds	r3, #32
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ebca:	f5a2 70c8 	sub.w	r0, r2, #400	; 0x190
 800ebce:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800ebd2:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 800ebd6:	f2a1 41f4 	subw	r1, r1, #1268	; 0x4f4
 800ebda:	6809      	ldr	r1, [r1, #0]
 800ebdc:	4798      	blx	r3
 800ebde:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ebe2:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ebe6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ebea:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 fb7e 	bl	800f2f0 <_ZNK3Mat6MatrixILt4ELt6EEmlILt6EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
	_state += K * (meassurementVec - _h());
 800ebf4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ebf8:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	1d1c      	adds	r4, r3, #4
 800ec00:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec04:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ec08:	681d      	ldr	r5, [r3, #0]
 800ec0a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec0e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3318      	adds	r3, #24
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 800ec1e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ec22:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 800ec26:	6811      	ldr	r1, [r2, #0]
 800ec28:	4798      	blx	r3
 800ec2a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800ec2e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800ec32:	4629      	mov	r1, r5
 800ec34:	4618      	mov	r0, r3
 800ec36:	f000 fb6e 	bl	800f316 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800ec3a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800ec3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 fb7f 	bl	800f348 <_ZNK3Mat6MatrixILt4ELt6EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
 800ec4a:	eeb0 6a40 	vmov.f32	s12, s0
 800ec4e:	eef0 6a60 	vmov.f32	s13, s1
 800ec52:	eeb0 7a41 	vmov.f32	s14, s2
 800ec56:	eef0 7a61 	vmov.f32	s15, s3
 800ec5a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ec62:	ed83 6a00 	vstr	s12, [r3]
 800ec66:	edc3 6a01 	vstr	s13, [r3, #4]
 800ec6a:	ed83 7a02 	vstr	s14, [r3, #8]
 800ec6e:	edc3 7a03 	vstr	s15, [r3, #12]
 800ec72:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800ec76:	4619      	mov	r1, r3
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 fb94 	bl	800f3a6 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800ec7e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800ec82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7ff f8c0 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800ec8c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800ec90:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ec94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f000 fbb9 	bl	800f410 <_ZNK3Mat6MatrixILt4ELt6EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
 800ec9e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800eca2:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800eca6:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f000 fbc3 	bl	800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 800ecb0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ecb4:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f103 0214 	add.w	r2, r3, #20
 800ecbe:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ecc2:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ecc6:	681c      	ldr	r4, [r3, #0]
 800ecc8:	463b      	mov	r3, r7
 800ecca:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 fa2e 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800ecd4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ecd8:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800ecdc:	3414      	adds	r4, #20
 800ecde:	461d      	mov	r5, r3
 800ece0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ece2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ece4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ece6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ece8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ecf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_time = time;
 800ecf4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ecf8:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ed02:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800ed06:	6812      	ldr	r2, [r2, #0]
 800ed08:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ed0a:	bf00      	nop
 800ed0c:	f507 67a8 	add.w	r7, r7, #1344	; 0x540
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bdb0      	pop	{r4, r5, r7, pc}

0800ed14 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE4InitERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800ed14:	b5b0      	push	{r4, r5, r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	1d1c      	adds	r4, r3, #4
 800ed2a:	4615      	mov	r5, r2
 800ed2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed30:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed34:	e884 0003 	stmia.w	r4, {r0, r1}
		_stateCovMatrix = stateCovMatrix;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	331c      	adds	r3, #28
 800ed3e:	4611      	mov	r1, r2
 800ed40:	2290      	movs	r2, #144	; 0x90
 800ed42:	4618      	mov	r0, r3
 800ed44:	f00f ff75 	bl	801ec32 <memcpy>
		_time = time;}
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800ed50:	bf00      	nop
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bdb0      	pop	{r4, r5, r7, pc}

0800ed58 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800ed58:	b5b0      	push	{r4, r5, r7, lr}
 800ed5a:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed64:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ed68:	6018      	str	r0, [r3, #0]
 800ed6a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed6e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ed72:	6019      	str	r1, [r3, #0]
 800ed74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed78:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed82:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ed86:	ed83 0a00 	vstr	s0, [r3]
	const StateCovarianceMatrix F = _F(controlVec, time);
 800ed8a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed8e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3310      	adds	r3, #16
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ed9e:	f5a2 7434 	sub.w	r4, r2, #720	; 0x2d0
 800eda2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eda6:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800edaa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800edae:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800edb2:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800edb6:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800edba:	ed90 0a00 	vldr	s0, [r0]
 800edbe:	6812      	ldr	r2, [r2, #0]
 800edc0:	6809      	ldr	r1, [r1, #0]
 800edc2:	4620      	mov	r0, r4
 800edc4:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800edc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edca:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f103 021c 	add.w	r2, r3, #28
 800edd4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800eddc:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fb45 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ede6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800edee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800edf2:	4611      	mov	r1, r2
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 fb4e 	bl	800f496 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800edfa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edfe:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800ee02:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800ee06:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 fb30 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ee10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee14:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3314      	adds	r3, #20
 800ee1e:	681c      	ldr	r4, [r3, #0]
 800ee20:	f507 7538 	add.w	r5, r7, #736	; 0x2e0
 800ee24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee28:	f5a3 7038 	sub.w	r0, r3, #736	; 0x2e0
 800ee2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee30:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ee34:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee38:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800ee3c:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800ee40:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800ee44:	ed90 0a00 	vldr	s0, [r0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	6809      	ldr	r1, [r1, #0]
 800ee4e:	4628      	mov	r0, r5
 800ee50:	47a0      	blx	r4
 800ee52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee56:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ee5a:	681c      	ldr	r4, [r3, #0]
 800ee5c:	463b      	mov	r3, r7
 800ee5e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ee62:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 fa18 	bl	800f29c <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
 800ee6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee70:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800ee74:	f104 031c 	add.w	r3, r4, #28
 800ee78:	4611      	mov	r1, r2
 800ee7a:	2290      	movs	r2, #144	; 0x90
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f00f fed8 	bl	801ec32 <memcpy>
	_state = _f(controlVec, time);
 800ee82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee86:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	330c      	adds	r3, #12
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee96:	f5a2 7235 	sub.w	r2, r2, #724	; 0x2d4
 800ee9a:	6814      	ldr	r4, [r2, #0]
 800ee9c:	463d      	mov	r5, r7
 800ee9e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eea2:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800eea6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eeaa:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800eeae:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800eeb2:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800eeb6:	ed90 0a00 	vldr	s0, [r0]
 800eeba:	6812      	ldr	r2, [r2, #0]
 800eebc:	6809      	ldr	r1, [r1, #0]
 800eebe:	4628      	mov	r0, r5
 800eec0:	4798      	blx	r3
 800eec2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800eec6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800eeca:	3404      	adds	r4, #4
 800eecc:	461d      	mov	r5, r3
 800eece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eed6:	e884 0003 	stmia.w	r4, {r0, r1}
	_time = time;
 800eeda:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800eede:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eee8:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800eeec:	6812      	ldr	r2, [r2, #0]
 800eeee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800eef2:	bf00      	nop
 800eef4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bdb0      	pop	{r4, r5, r7, pc}

0800eefc <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800eefc:	b5b0      	push	{r4, r5, r7, lr}
 800eefe:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef08:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef0c:	6018      	str	r0, [r3, #0]
 800ef0e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef12:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800ef16:	6019      	str	r1, [r3, #0]
 800ef18:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef1c:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef26:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800ef2a:	ed83 0a00 	vstr	s0, [r3]
	auto H = _H();
 800ef2e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef32:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	331c      	adds	r3, #28
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800ef42:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 800ef46:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800ef4a:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800ef4e:	6811      	ldr	r1, [r2, #0]
 800ef50:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800ef52:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef56:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f103 021c 	add.w	r2, r3, #28
 800ef60:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef64:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800ef68:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fa7f 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ef72:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef76:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800ef7a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fa88 	bl	800f496 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800ef86:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef8a:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800ef8e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ef92:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 fa6a 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ef9c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efa0:	f5a3 60cf 	sub.w	r0, r3, #1656	; 0x678
 800efa4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efa8:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800efac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	f000 f973 	bl	800f29c <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800efb6:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efba:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f103 041c 	add.w	r4, r3, #28
 800efc4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efc8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800efcc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 fa5f 	bl	800f496 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800efd8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efdc:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800efe0:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800efe4:	4621      	mov	r1, r4
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 fa42 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800efec:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800eff0:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3320      	adds	r3, #32
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800f000:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 800f004:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800f008:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800f00c:	f2a1 710c 	subw	r1, r1, #1804	; 0x70c
 800f010:	6809      	ldr	r1, [r1, #0]
 800f012:	4798      	blx	r3
 800f014:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f018:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800f01c:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800f020:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800f024:	4618      	mov	r0, r3
 800f026:	f000 fa23 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
	_state += K * (meassurementVec - _h());
 800f02a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f02e:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	1d1c      	adds	r4, r3, #4
 800f036:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f03a:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800f03e:	681d      	ldr	r5, [r3, #0]
 800f040:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f044:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3318      	adds	r3, #24
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800f054:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800f058:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800f05c:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800f060:	6811      	ldr	r1, [r2, #0]
 800f062:	4798      	blx	r3
 800f064:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f068:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f06c:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800f070:	4629      	mov	r1, r5
 800f072:	4618      	mov	r0, r3
 800f074:	f000 f94f 	bl	800f316 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800f078:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f07c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f080:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800f084:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800f088:	4618      	mov	r0, r3
 800f08a:	f000 fa34 	bl	800f4f6 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>
 800f08e:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800f092:	4619      	mov	r1, r3
 800f094:	4620      	mov	r0, r4
 800f096:	f000 fa41 	bl	800f51c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800f09a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f09e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800f0a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 fa6e 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 800f0ac:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800f0b0:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800f0b4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 f9d9 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800f0be:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f0c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f0c6:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800f0ca:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fa7e 	bl	800f5d0 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 800f0d4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f0d8:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f103 021c 	add.w	r2, r3, #28
 800f0e2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f0e6:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f0ea:	681c      	ldr	r4, [r3, #0]
 800f0ec:	463b      	mov	r3, r7
 800f0ee:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 f9bc 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800f0f8:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f0fc:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800f100:	f104 031c 	add.w	r3, r4, #28
 800f104:	4611      	mov	r1, r2
 800f106:	2290      	movs	r2, #144	; 0x90
 800f108:	4618      	mov	r0, r3
 800f10a:	f00f fd92 	bl	801ec32 <memcpy>
	_time = time;
 800f10e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f112:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800f11c:	f5a2 62e3 	sub.w	r2, r2, #1816	; 0x718
 800f120:	6812      	ldr	r2, [r2, #0]
 800f122:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800f126:	bf00      	nop
 800f128:	f507 67f5 	add.w	r7, r7, #1960	; 0x7a8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bdb0      	pop	{r4, r5, r7, pc}

0800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f7fe fd96 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	68b8      	ldr	r0, [r7, #8]
 800f148:	f000 fa59 	bl	800f5fe <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 800f14c:	bf00      	nop
}
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>:
		result += (v * v);
	return sqrt(result);
}

template <u_short heigth, u_short width>
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f156:	b590      	push	{r4, r7, lr}
 800f158:	b085      	sub	sp, #20
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	6039      	str	r1, [r7, #0]
{
	Matrix<width, heigth> result;
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fe fd84 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f166:	2300      	movs	r3, #0
 800f168:	81fb      	strh	r3, [r7, #14]
 800f16a:	e01c      	b.n	800f1a6 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f16c:	2300      	movs	r3, #0
 800f16e:	81bb      	strh	r3, [r7, #12]
 800f170:	e013      	b.n	800f19a <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f172:	89ba      	ldrh	r2, [r7, #12]
 800f174:	89fb      	ldrh	r3, [r7, #14]
 800f176:	4619      	mov	r1, r3
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7fe ffd3 	bl	800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800f17e:	4604      	mov	r4, r0
 800f180:	89fa      	ldrh	r2, [r7, #14]
 800f182:	89bb      	ldrh	r3, [r7, #12]
 800f184:	4619      	mov	r1, r3
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	f000 faed 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f18c:	eef0 7a40 	vmov.f32	s15, s0
 800f190:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f194:	89bb      	ldrh	r3, [r7, #12]
 800f196:	3301      	adds	r3, #1
 800f198:	81bb      	strh	r3, [r7, #12]
 800f19a:	89bb      	ldrh	r3, [r7, #12]
 800f19c:	2b03      	cmp	r3, #3
 800f19e:	d9e8      	bls.n	800f172 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f1a0:	89fb      	ldrh	r3, [r7, #14]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	81fb      	strh	r3, [r7, #14]
 800f1a6:	89fb      	ldrh	r3, [r7, #14]
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d9df      	bls.n	800f16c <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x16>
	return result;
 800f1ac:	bf00      	nop
}
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	3714      	adds	r7, #20
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd90      	pop	{r4, r7, pc}

0800f1b6 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800f1b6:	b5b0      	push	{r4, r5, r7, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	60f8      	str	r0, [r7, #12]
 800f1be:	60b9      	str	r1, [r7, #8]
 800f1c0:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	4614      	mov	r4, r2
 800f1c8:	461d      	mov	r5, r3
 800f1ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f1da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 800f1de:	6879      	ldr	r1, [r7, #4]
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f000 fadb 	bl	800f79c <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>
	return result;
 800f1e6:	bf00      	nop
}
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bdb0      	pop	{r4, r5, r7, pc}

0800f1f0 <_ZNK3Mat6MatrixILt6ELt4EEmlILt4EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f000 fb02 	bl	800f806 <_ZN3Mat6MatrixILt6ELt4EEC1Ev>
	Multiply(other, result);
 800f202:	68fa      	ldr	r2, [r7, #12]
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	68b8      	ldr	r0, [r7, #8]
 800f208:	f000 fb08 	bl	800f81c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 800f20c:	bf00      	nop
}
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f216:	b590      	push	{r4, r7, lr}
 800f218:	b085      	sub	sp, #20
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
 800f21e:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fbaf 	bl	800f984 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f226:	2300      	movs	r3, #0
 800f228:	81fb      	strh	r3, [r7, #14]
 800f22a:	e01c      	b.n	800f266 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f22c:	2300      	movs	r3, #0
 800f22e:	81bb      	strh	r3, [r7, #12]
 800f230:	e013      	b.n	800f25a <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f232:	89ba      	ldrh	r2, [r7, #12]
 800f234:	89fb      	ldrh	r3, [r7, #14]
 800f236:	4619      	mov	r1, r3
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fbae 	bl	800f99a <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800f23e:	4604      	mov	r4, r0
 800f240:	89fa      	ldrh	r2, [r7, #14]
 800f242:	89bb      	ldrh	r3, [r7, #12]
 800f244:	4619      	mov	r1, r3
 800f246:	6838      	ldr	r0, [r7, #0]
 800f248:	f000 fbc2 	bl	800f9d0 <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800f24c:	eef0 7a40 	vmov.f32	s15, s0
 800f250:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f254:	89bb      	ldrh	r3, [r7, #12]
 800f256:	3301      	adds	r3, #1
 800f258:	81bb      	strh	r3, [r7, #12]
 800f25a:	89bb      	ldrh	r3, [r7, #12]
 800f25c:	2b05      	cmp	r3, #5
 800f25e:	d9e8      	bls.n	800f232 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f260:	89fb      	ldrh	r3, [r7, #14]
 800f262:	3301      	adds	r3, #1
 800f264:	81fb      	strh	r3, [r7, #14]
 800f266:	89fb      	ldrh	r3, [r7, #14]
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d9df      	bls.n	800f22c <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x16>
	return result;
 800f26c:	bf00      	nop
}
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	3714      	adds	r7, #20
 800f272:	46bd      	mov	sp, r7
 800f274:	bd90      	pop	{r4, r7, pc}

0800f276 <_ZNK3Mat6MatrixILt6ELt4EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	60f8      	str	r0, [r7, #12]
 800f27e:	60b9      	str	r1, [r7, #8]
 800f280:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7fe fd37 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	6879      	ldr	r1, [r7, #4]
 800f28c:	68b8      	ldr	r0, [r7, #8]
 800f28e:	f000 fbba 	bl	800fa06 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 800f292:	bf00      	nop
}
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	2390      	movs	r3, #144	; 0x90
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	f00f fcbd 	bl	801ec32 <memcpy>
	result += other;
 800f2b8:	6879      	ldr	r1, [r7, #4]
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f000 fc57 	bl	800fb6e <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>
	return result;
 800f2c0:	bf00      	nop
}
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <_ZNK3Mat6MatrixILt4ELt4EEmlILt6EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	60f8      	str	r0, [r7, #12]
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 fb54 	bl	800f984 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	Multiply(other, result);
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	68b8      	ldr	r0, [r7, #8]
 800f2e2:	f000 fc79 	bl	800fbd8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 800f2e6:	bf00      	nop
}
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZNK3Mat6MatrixILt4ELt6EEmlILt6EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f000 fb41 	bl	800f984 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	Multiply(other, result);
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	68b8      	ldr	r0, [r7, #8]
 800f308:	f000 fd1a 	bl	800fd40 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f30c:	bf00      	nop
}
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}

0800f316 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f316:	b5b0      	push	{r4, r5, r7, lr}
 800f318:	b084      	sub	sp, #16
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	60f8      	str	r0, [r7, #12]
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	4614      	mov	r4, r2
 800f328:	461d      	mov	r5, r3
 800f32a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f32c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f32e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f332:	e884 0003 	stmia.w	r4, {r0, r1}
	result -= other;
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 fdcb 	bl	800fed4 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>
	return result;
 800f33e:	bf00      	nop
}
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bdb0      	pop	{r4, r5, r7, pc}

0800f348 <_ZNK3Mat6MatrixILt4ELt6EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f348:	b590      	push	{r4, r7, lr}
 800f34a:	b08f      	sub	sp, #60	; 0x3c
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6178      	str	r0, [r7, #20]
 800f350:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 800f352:	f107 0318 	add.w	r3, r7, #24
 800f356:	4618      	mov	r0, r3
 800f358:	f7fe fe43 	bl	800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 800f35c:	f107 0318 	add.w	r3, r7, #24
 800f360:	461a      	mov	r2, r3
 800f362:	6939      	ldr	r1, [r7, #16]
 800f364:	6978      	ldr	r0, [r7, #20]
 800f366:	f000 fdea 	bl	800ff3e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f36a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f36e:	f107 0318 	add.w	r3, r7, #24
 800f372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f37a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f380:	ee06 0a10 	vmov	s12, r0
 800f384:	ee06 1a90 	vmov	s13, r1
 800f388:	ee07 2a10 	vmov	s14, r2
 800f38c:	ee07 3a90 	vmov	s15, r3
}
 800f390:	eeb0 0a46 	vmov.f32	s0, s12
 800f394:	eef0 0a66 	vmov.f32	s1, s13
 800f398:	eeb0 1a47 	vmov.f32	s2, s14
 800f39c:	eef0 1a67 	vmov.f32	s3, s15
 800f3a0:	373c      	adds	r7, #60	; 0x3c
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd90      	pop	{r4, r7, pc}

0800f3a6 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	ed2d 8b02 	vpush	{d8}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	e016      	b.n	800f3e8 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_+0x42>
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	68f9      	ldr	r1, [r7, #12]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fe8b 	bl	80100da <_ZNKSt5arrayIfLj4EEixEj>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	ed93 8a00 	vldr	s16, [r3]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68f9      	ldr	r1, [r7, #12]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 fe74 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	edd3 7a00 	vldr	s15, [r3]
 800f3da:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f3de:	edc3 7a00 	vstr	s15, [r3]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 fe5b 	bl	80100a6 <_ZNKSt5arrayIfLj4EE4sizeEv>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	bf34      	ite	cc
 800f3f8:	2301      	movcc	r3, #1
 800f3fa:	2300      	movcs	r3, #0
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1db      	bne.n	800f3ba <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_+0x14>
	return *this;
 800f402:	687b      	ldr	r3, [r7, #4]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	ecbd 8b02 	vpop	{d8}
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZNK3Mat6MatrixILt4ELt6EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f7fe fc26 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	68b8      	ldr	r0, [r7, #8]
 800f428:	f000 fe66 	bl	80100f8 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f42c:	bf00      	nop
}
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f436:	b5b0      	push	{r4, r5, r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	60f8      	str	r0, [r7, #12]
 800f43e:	60b9      	str	r1, [r7, #8]
 800f440:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	4614      	mov	r4, r2
 800f448:	461d      	mov	r5, r3
 800f44a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f44c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f44e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f456:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f45a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result -= other;
 800f45e:	6879      	ldr	r1, [r7, #4]
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f000 fefd 	bl	8010260 <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>
	return result;
 800f466:	bf00      	nop
}
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bdb0      	pop	{r4, r5, r7, pc}

0800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f7fe fc3a 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	6879      	ldr	r1, [r7, #4]
 800f486:	68b8      	ldr	r0, [r7, #8]
 800f488:	f000 ff1f 	bl	80102ca <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800f48c:	bf00      	nop
}
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f496:	b590      	push	{r4, r7, lr}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7fe fc28 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	81fb      	strh	r3, [r7, #14]
 800f4aa:	e01c      	b.n	800f4e6 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	81bb      	strh	r3, [r7, #12]
 800f4b0:	e013      	b.n	800f4da <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f4b2:	89ba      	ldrh	r2, [r7, #12]
 800f4b4:	89fb      	ldrh	r3, [r7, #14]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7fe fc8b 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800f4be:	4604      	mov	r4, r0
 800f4c0:	89fa      	ldrh	r2, [r7, #14]
 800f4c2:	89bb      	ldrh	r3, [r7, #12]
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6838      	ldr	r0, [r7, #0]
 800f4c8:	f000 ffc9 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800f4cc:	eef0 7a40 	vmov.f32	s15, s0
 800f4d0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f4d4:	89bb      	ldrh	r3, [r7, #12]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	81bb      	strh	r3, [r7, #12]
 800f4da:	89bb      	ldrh	r3, [r7, #12]
 800f4dc:	2b05      	cmp	r3, #5
 800f4de:	d9e8      	bls.n	800f4b2 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f4e0:	89fb      	ldrh	r3, [r7, #14]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	81fb      	strh	r3, [r7, #14]
 800f4e6:	89fb      	ldrh	r3, [r7, #14]
 800f4e8:	2b05      	cmp	r3, #5
 800f4ea:	d9df      	bls.n	800f4ac <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x16>
	return result;
 800f4ec:	bf00      	nop
}
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	3714      	adds	r7, #20
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd90      	pop	{r4, r7, pc}

0800f4f6 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b084      	sub	sp, #16
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f7fe fd78 	bl	800dff8 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	6879      	ldr	r1, [r7, #4]
 800f50c:	68b8      	ldr	r0, [r7, #8]
 800f50e:	f000 ffc5 	bl	801049c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800f512:	bf00      	nop
}
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f51c:	b580      	push	{r7, lr}
 800f51e:	ed2d 8b02 	vpush	{d8}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f52a:	2300      	movs	r3, #0
 800f52c:	60fb      	str	r3, [r7, #12]
 800f52e:	e016      	b.n	800f55e <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x42>
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	68f9      	ldr	r1, [r7, #12]
 800f534:	4618      	mov	r0, r3
 800f536:	f7fe ff04 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 800f53a:	4603      	mov	r3, r0
 800f53c:	ed93 8a00 	vldr	s16, [r3]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	68f9      	ldr	r1, [r7, #12]
 800f544:	4618      	mov	r0, r3
 800f546:	f001 f868 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800f54a:	4603      	mov	r3, r0
 800f54c:	edd3 7a00 	vldr	s15, [r3]
 800f550:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f554:	edc3 7a00 	vstr	s15, [r3]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3301      	adds	r3, #1
 800f55c:	60fb      	str	r3, [r7, #12]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	f001 f84f 	bl	8010604 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800f566:	4602      	mov	r2, r0
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	4293      	cmp	r3, r2
 800f56c:	bf34      	ite	cc
 800f56e:	2301      	movcc	r3, #1
 800f570:	2300      	movcs	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1db      	bne.n	800f530 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x14>
	return *this;
 800f578:	687b      	ldr	r3, [r7, #4]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	ecbd 8b02 	vpop	{d8}
 800f584:	bd80      	pop	{r7, pc}
	...

0800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800f594:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f5cc <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7fe fb3e 	bl	800dc1a <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800f59e:	2300      	movs	r3, #0
 800f5a0:	81fb      	strh	r3, [r7, #14]
 800f5a2:	e00b      	b.n	800f5bc <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800f5a4:	89fa      	ldrh	r2, [r7, #14]
 800f5a6:	89fb      	ldrh	r3, [r7, #14]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7fe fc12 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800f5b6:	89fb      	ldrh	r3, [r7, #14]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	81fb      	strh	r3, [r7, #14]
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	2b05      	cmp	r3, #5
 800f5c0:	d9f0      	bls.n	800f5a4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800f5c2:	bf00      	nop
}
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	00000000 	.word	0x00000000

0800f5d0 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	2390      	movs	r3, #144	; 0x90
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f00f fb23 	bl	801ec32 <memcpy>
	result -= other;
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f001 f822 	bl	8010638 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>
	return result;
 800f5f4:	bf00      	nop
}
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800f5fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f600:	b0a9      	sub	sp, #164	; 0xa4
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800f60a:	2300      	movs	r3, #0
 800f60c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800f610:	e02d      	b.n	800f66e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800f612:	2300      	movs	r3, #0
 800f614:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800f618:	e020      	b.n	800f65c <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800f61a:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800f61e:	f107 0314 	add.w	r3, r7, #20
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f001 f83c 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f62a:	4602      	mov	r2, r0
 800f62c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f630:	4619      	mov	r1, r3
 800f632:	4610      	mov	r0, r2
 800f634:	f000 fd42 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800f638:	4604      	mov	r4, r0
 800f63a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800f63e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f642:	4619      	mov	r1, r3
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f000 f88e 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f64a:	eef0 7a40 	vmov.f32	s15, s0
 800f64e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800f652:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f656:	3301      	adds	r3, #1
 800f658:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800f65c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f660:	2b03      	cmp	r3, #3
 800f662:	d9da      	bls.n	800f61a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800f664:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f668:	3301      	adds	r3, #1
 800f66a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800f66e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f672:	2b03      	cmp	r3, #3
 800f674:	d9cd      	bls.n	800f612 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800f676:	2300      	movs	r3, #0
 800f678:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800f67c:	e02d      	b.n	800f6da <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800f67e:	2300      	movs	r3, #0
 800f680:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800f684:	e020      	b.n	800f6c8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800f686:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800f68a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f68e:	4611      	mov	r1, r2
 800f690:	4618      	mov	r0, r3
 800f692:	f001 f806 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f696:	4602      	mov	r2, r0
 800f698:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f69c:	4619      	mov	r1, r3
 800f69e:	4610      	mov	r0, r2
 800f6a0:	f000 fd0c 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800f6aa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	68b8      	ldr	r0, [r7, #8]
 800f6b2:	f000 f858 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f6b6:	eef0 7a40 	vmov.f32	s15, s0
 800f6ba:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800f6be:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800f6c8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f6cc:	2b03      	cmp	r3, #3
 800f6ce:	d9da      	bls.n	800f686 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800f6d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800f6da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f6de:	2b03      	cmp	r3, #3
 800f6e0:	d9cd      	bls.n	800f67e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800f6e8:	e034      	b.n	800f754 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f6f0:	e027      	b.n	800f742 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800f6f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f6f6:	f107 0314 	add.w	r3, r7, #20
 800f6fa:	4611      	mov	r1, r2
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 ffd0 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f702:	4605      	mov	r5, r0
 800f704:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800f708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f000 ffc7 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f714:	4606      	mov	r6, r0
 800f716:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800f71a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7fe fcff 	bl	800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800f726:	4604      	mov	r4, r0
 800f728:	4631      	mov	r1, r6
 800f72a:	4628      	mov	r0, r5
 800f72c:	f000 ffc8 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800f730:	eef0 7a40 	vmov.f32	s15, s0
 800f734:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800f738:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f73c:	3301      	adds	r3, #1
 800f73e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f742:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f746:	2b03      	cmp	r3, #3
 800f748:	d9d3      	bls.n	800f6f2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800f74a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f74e:	3301      	adds	r3, #1
 800f750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800f754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d9c6      	bls.n	800f6ea <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 800f75c:	bf00      	nop
 800f75e:	bf00      	nop
 800f760:	37a4      	adds	r7, #164	; 0xa4
 800f762:	46bd      	mov	sp, r7
 800f764:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800f766:	b580      	push	{r7, lr}
 800f768:	b084      	sub	sp, #16
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	460b      	mov	r3, r1
 800f770:	807b      	strh	r3, [r7, #2]
 800f772:	4613      	mov	r3, r2
 800f774:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f776:	887b      	ldrh	r3, [r7, #2]
 800f778:	009a      	lsls	r2, r3, #2
 800f77a:	883b      	ldrh	r3, [r7, #0]
 800f77c:	4413      	add	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68f9      	ldr	r1, [r7, #12]
 800f784:	4618      	mov	r0, r3
 800f786:	f000 ffce 	bl	8010726 <_ZNKSt5arrayIfLj16EEixEj>
 800f78a:	4603      	mov	r3, r0
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	ee07 3a90 	vmov	s15, r3
}
 800f792:	eeb0 0a67 	vmov.f32	s0, s15
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f79c:	b580      	push	{r7, lr}
 800f79e:	ed2d 8b02 	vpush	{d8}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60fb      	str	r3, [r7, #12]
 800f7ae:	e016      	b.n	800f7de <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x42>
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68f9      	ldr	r1, [r7, #12]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 ffb6 	bl	8010726 <_ZNKSt5arrayIfLj16EEixEj>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	ed93 8a00 	vldr	s16, [r3]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	68f9      	ldr	r1, [r7, #12]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fe fe60 	bl	800e48a <_ZNSt5arrayIfLj16EEixEj>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	edd3 7a00 	vldr	s15, [r3]
 800f7d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f7d4:	edc3 7a00 	vstr	s15, [r3]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	60fb      	str	r3, [r7, #12]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f000 ffaf 	bl	8010744 <_ZNKSt5arrayIfLj16EE4sizeEv>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	bf34      	ite	cc
 800f7ee:	2301      	movcc	r3, #1
 800f7f0:	2300      	movcs	r3, #0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d1db      	bne.n	800f7b0 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x14>
	return *this;
 800f7f8:	687b      	ldr	r3, [r7, #4]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	ecbd 8b02 	vpop	{d8}
 800f804:	bd80      	pop	{r7, pc}

0800f806 <_ZN3Mat6MatrixILt6ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800f806:	b480      	push	{r7}
 800f808:	b083      	sub	sp, #12
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800f81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f81e:	b0b1      	sub	sp, #196	; 0xc4
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800f828:	2300      	movs	r3, #0
 800f82a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f82e:	e02d      	b.n	800f88c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800f830:	2300      	movs	r3, #0
 800f832:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800f836:	e020      	b.n	800f87a <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800f838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f83c:	f107 0314 	add.w	r3, r7, #20
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f000 ff89 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800f848:	4602      	mov	r2, r0
 800f84a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f84e:	4619      	mov	r1, r3
 800f850:	4610      	mov	r0, r2
 800f852:	f000 fc33 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800f856:	4604      	mov	r4, r0
 800f858:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800f85c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f860:	4619      	mov	r1, r3
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f000 f8b4 	bl	800f9d0 <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800f868:	eef0 7a40 	vmov.f32	s15, s0
 800f86c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800f870:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f874:	3301      	adds	r3, #1
 800f876:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800f87a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f87e:	2b03      	cmp	r3, #3
 800f880:	d9da      	bls.n	800f838 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800f882:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f886:	3301      	adds	r3, #1
 800f888:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f88c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f890:	2b05      	cmp	r3, #5
 800f892:	d9cd      	bls.n	800f830 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800f894:	2300      	movs	r3, #0
 800f896:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800f89a:	e02d      	b.n	800f8f8 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800f89c:	2300      	movs	r3, #0
 800f89e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800f8a2:	e020      	b.n	800f8e6 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800f8a4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f8a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f000 fef7 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	4610      	mov	r0, r2
 800f8be:	f000 fbfd 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f8c8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	68b8      	ldr	r0, [r7, #8]
 800f8d0:	f7ff ff49 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f8d4:	eef0 7a40 	vmov.f32	s15, s0
 800f8d8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800f8dc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800f8e6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f8ea:	2b03      	cmp	r3, #3
 800f8ec:	d9da      	bls.n	800f8a4 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800f8ee:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800f8f8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800f8fc:	2b03      	cmp	r3, #3
 800f8fe:	d9cd      	bls.n	800f89c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800f900:	2300      	movs	r3, #0
 800f902:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800f906:	e034      	b.n	800f972 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800f908:	2300      	movs	r3, #0
 800f90a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f90e:	e027      	b.n	800f960 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800f910:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800f914:	f107 0314 	add.w	r3, r7, #20
 800f918:	4611      	mov	r1, r2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 ff1d 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800f920:	4605      	mov	r5, r0
 800f922:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800f926:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f92a:	4611      	mov	r1, r2
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 feb8 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f932:	4606      	mov	r6, r0
 800f934:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800f938:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 ff1a 	bl	8010778 <_ZN3Mat6MatrixILt6ELt4EEclEtt>
 800f944:	4604      	mov	r4, r0
 800f946:	4631      	mov	r1, r6
 800f948:	4628      	mov	r0, r5
 800f94a:	f000 feb9 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800f94e:	eef0 7a40 	vmov.f32	s15, s0
 800f952:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800f956:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800f95a:	3301      	adds	r3, #1
 800f95c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f960:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800f964:	2b03      	cmp	r3, #3
 800f966:	d9d3      	bls.n	800f910 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800f968:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f96c:	3301      	adds	r3, #1
 800f96e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800f972:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f976:	2b05      	cmp	r3, #5
 800f978:	d9c6      	bls.n	800f908 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 800f97a:	bf00      	nop
 800f97c:	bf00      	nop
 800f97e:	37c4      	adds	r7, #196	; 0xc4
 800f980:	46bd      	mov	sp, r7
 800f982:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f984 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <_ZN3Mat6MatrixILt4ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	807b      	strh	r3, [r7, #2]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f9aa:	887a      	ldrh	r2, [r7, #2]
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	005b      	lsls	r3, r3, #1
 800f9b0:	4413      	add	r3, r2
 800f9b2:	005b      	lsls	r3, r3, #1
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	883b      	ldrh	r3, [r7, #0]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	68f9      	ldr	r1, [r7, #12]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f000 fef0 	bl	80107a6 <_ZNSt5arrayIfLj24EEixEj>
 800f9c6:	4603      	mov	r3, r0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <_ZNK3Mat6MatrixILt6ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	807b      	strh	r3, [r7, #2]
 800f9dc:	4613      	mov	r3, r2
 800f9de:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f9e0:	887b      	ldrh	r3, [r7, #2]
 800f9e2:	009a      	lsls	r2, r3, #2
 800f9e4:	883b      	ldrh	r3, [r7, #0]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68f9      	ldr	r1, [r7, #12]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f000 fee8 	bl	80107c4 <_ZNKSt5arrayIfLj24EEixEj>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	ee07 3a90 	vmov	s15, r3
}
 800f9fc:	eeb0 0a67 	vmov.f32	s0, s15
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800fa06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa08:	b0b9      	sub	sp, #228	; 0xe4
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800fa12:	2300      	movs	r3, #0
 800fa14:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 800fa18:	e02d      	b.n	800fa76 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 800fa20:	e020      	b.n	800fa64 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800fa22:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 800fa26:	f107 0314 	add.w	r3, r7, #20
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 fe94 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fa32:	4602      	mov	r2, r0
 800fa34:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800fa38:	4619      	mov	r1, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	f000 fb3e 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800fa40:	4604      	mov	r4, r0
 800fa42:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800fa46:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7ff ffbf 	bl	800f9d0 <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800fa52:	eef0 7a40 	vmov.f32	s15, s0
 800fa56:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fa5a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800fa5e:	3301      	adds	r3, #1
 800fa60:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 800fa64:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800fa68:	2b03      	cmp	r3, #3
 800fa6a:	d9da      	bls.n	800fa22 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800fa6c:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800fa70:	3301      	adds	r3, #1
 800fa72:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 800fa76:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800fa7a:	2b05      	cmp	r3, #5
 800fa7c:	d9cd      	bls.n	800fa1a <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 800fa84:	e02d      	b.n	800fae2 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800fa86:	2300      	movs	r3, #0
 800fa88:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800fa8c:	e020      	b.n	800fad0 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800fa8e:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800fa92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fe5e 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800faa4:	4619      	mov	r1, r3
 800faa6:	4610      	mov	r0, r2
 800faa8:	f000 fb08 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800faac:	4604      	mov	r4, r0
 800faae:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800fab2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fab6:	4619      	mov	r1, r3
 800fab8:	68b8      	ldr	r0, [r7, #8]
 800faba:	f000 fe92 	bl	80107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fabe:	eef0 7a40 	vmov.f32	s15, s0
 800fac2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fac6:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800faca:	3301      	adds	r3, #1
 800facc:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800fad0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fad4:	2b03      	cmp	r3, #3
 800fad6:	d9da      	bls.n	800fa8e <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800fad8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800fadc:	3301      	adds	r3, #1
 800fade:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 800fae2:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800fae6:	2b05      	cmp	r3, #5
 800fae8:	d9cd      	bls.n	800fa86 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800faea:	2300      	movs	r3, #0
 800faec:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800faf0:	e034      	b.n	800fb5c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800faf2:	2300      	movs	r3, #0
 800faf4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 800faf8:	e027      	b.n	800fb4a <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fafa:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 fe28 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800fb10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f000 fe1f 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800fb22:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800fb26:	4619      	mov	r1, r3
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f7fe f953 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800fb2e:	4604      	mov	r4, r0
 800fb30:	4631      	mov	r1, r6
 800fb32:	4628      	mov	r0, r5
 800fb34:	f000 fdc4 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800fb38:	eef0 7a40 	vmov.f32	s15, s0
 800fb3c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800fb40:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800fb44:	3301      	adds	r3, #1
 800fb46:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 800fb4a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800fb4e:	2b05      	cmp	r3, #5
 800fb50:	d9d3      	bls.n	800fafa <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800fb52:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800fb56:	3301      	adds	r3, #1
 800fb58:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800fb5c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800fb60:	2b05      	cmp	r3, #5
 800fb62:	d9c6      	bls.n	800faf2 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop
 800fb68:	37e4      	adds	r7, #228	; 0xe4
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb6e <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	ed2d 8b02 	vpush	{d8}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	e016      	b.n	800fbb0 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x42>
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	68f9      	ldr	r1, [r7, #12]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f000 fe55 	bl	8010836 <_ZNKSt5arrayIfLj36EEixEj>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	ed93 8a00 	vldr	s16, [r3]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	68f9      	ldr	r1, [r7, #12]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fa89 	bl	800e0ae <_ZNSt5arrayIfLj36EEixEj>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	edd3 7a00 	vldr	s15, [r3]
 800fba2:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fba6:	edc3 7a00 	vstr	s15, [r3]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	3301      	adds	r3, #1
 800fbae:	60fb      	str	r3, [r7, #12]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f000 fe34 	bl	8010820 <_ZNKSt5arrayIfLj36EE4sizeEv>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	bf34      	ite	cc
 800fbc0:	2301      	movcc	r3, #1
 800fbc2:	2300      	movcs	r3, #0
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1db      	bne.n	800fb82 <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x14>
	return *this;
 800fbca:	687b      	ldr	r3, [r7, #4]
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	ecbd 8b02 	vpop	{d8}
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800fbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbda:	b0b1      	sub	sp, #196	; 0xc4
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fbea:	e02d      	b.n	800fc48 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800fbec:	2300      	movs	r3, #0
 800fbee:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fbf2:	e020      	b.n	800fc36 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800fbf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fbf8:	f107 0314 	add.w	r3, r7, #20
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f000 fd4f 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800fc04:	4602      	mov	r2, r0
 800fc06:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	f000 fa55 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800fc12:	4604      	mov	r4, r0
 800fc14:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800fc18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f7ff fda1 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800fc24:	eef0 7a40 	vmov.f32	s15, s0
 800fc28:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fc2c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fc30:	3301      	adds	r3, #1
 800fc32:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fc36:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d9da      	bls.n	800fbf4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800fc3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc42:	3301      	adds	r3, #1
 800fc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc4c:	2b03      	cmp	r3, #3
 800fc4e:	d9cd      	bls.n	800fbec <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800fc50:	2300      	movs	r3, #0
 800fc52:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fc56:	e02d      	b.n	800fcb4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fc5e:	e020      	b.n	800fca2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800fc60:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800fc64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f000 fd75 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fc70:	4602      	mov	r2, r0
 800fc72:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fc76:	4619      	mov	r1, r3
 800fc78:	4610      	mov	r0, r2
 800fc7a:	f000 fa1f 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 800fc7e:	4604      	mov	r4, r0
 800fc80:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800fc84:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fc88:	4619      	mov	r1, r3
 800fc8a:	68b8      	ldr	r0, [r7, #8]
 800fc8c:	f000 fda9 	bl	80107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fc90:	eef0 7a40 	vmov.f32	s15, s0
 800fc94:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fc98:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fca2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fca6:	2b03      	cmp	r3, #3
 800fca8:	d9da      	bls.n	800fc60 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800fcaa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800fcae:	3301      	adds	r3, #1
 800fcb0:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fcb4:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800fcb8:	2b05      	cmp	r3, #5
 800fcba:	d9cd      	bls.n	800fc58 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fcc2:	e034      	b.n	800fd2e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fcca:	e027      	b.n	800fd1c <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fccc:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800fcd0:	f107 0314 	add.w	r3, r7, #20
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 fce3 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800fcdc:	4605      	mov	r5, r0
 800fcde:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800fce2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fce6:	4611      	mov	r1, r2
 800fce8:	4618      	mov	r0, r3
 800fcea:	f000 fd36 	bl	801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fcee:	4606      	mov	r6, r0
 800fcf0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800fcf4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7ff fe4d 	bl	800f99a <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800fd00:	4604      	mov	r4, r0
 800fd02:	4631      	mov	r1, r6
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 fcdb 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800fd0a:	eef0 7a40 	vmov.f32	s15, s0
 800fd0e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800fd12:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800fd16:	3301      	adds	r3, #1
 800fd18:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fd1c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800fd20:	2b05      	cmp	r3, #5
 800fd22:	d9d3      	bls.n	800fccc <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800fd24:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fd28:	3301      	adds	r3, #1
 800fd2a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fd2e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fd32:	2b03      	cmp	r3, #3
 800fd34:	d9c6      	bls.n	800fcc4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 800fd36:	bf00      	nop
 800fd38:	bf00      	nop
 800fd3a:	37c4      	adds	r7, #196	; 0xc4
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd40 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd42:	b0c5      	sub	sp, #276	; 0x114
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd4e:	6018      	str	r0, [r3, #0]
 800fd50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd58:	6019      	str	r1, [r3, #0]
 800fd5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fd62:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 800fd64:	2300      	movs	r3, #0
 800fd66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800fd6a:	e030      	b.n	800fdce <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x8e>
		for(u_short col = 0; col < width; ++col)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 800fd72:	e023      	b.n	800fdbc <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 800fd74:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800fd78:	f107 0314 	add.w	r3, r7, #20
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f000 fd68 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800fd84:	4602      	mov	r2, r0
 800fd86:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	f000 fc44 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800fd92:	4604      	mov	r4, r0
 800fd94:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 800fd98:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 800fd9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fda0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fda4:	6818      	ldr	r0, [r3, #0]
 800fda6:	f000 fd1c 	bl	80107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fdaa:	eef0 7a40 	vmov.f32	s15, s0
 800fdae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fdb2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 800fdbc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fdc0:	2b05      	cmp	r3, #5
 800fdc2:	d9d7      	bls.n	800fd74 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x34>
	for(u_short row = 0; row < heigth; ++row)
 800fdc4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800fdc8:	3301      	adds	r3, #1
 800fdca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800fdce:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800fdd2:	2b03      	cmp	r3, #3
 800fdd4:	d9ca      	bls.n	800fd6c <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800fddc:	e030      	b.n	800fe40 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x100>
		for(u_short row = 0; row < width; ++row)
 800fdde:	2300      	movs	r3, #0
 800fde0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 800fde4:	e023      	b.n	800fe2e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xee>
			other_columns[col][row] = other(row, col);
 800fde6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800fdea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fdee:	4611      	mov	r1, r2
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 fd3e 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	4610      	mov	r0, r2
 800fe00:	f000 fc0b 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800fe04:	4604      	mov	r4, r0
 800fe06:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800fe0a:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 800fe0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe16:	6818      	ldr	r0, [r3, #0]
 800fe18:	f000 fb21 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800fe1c:	eef0 7a40 	vmov.f32	s15, s0
 800fe20:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fe24:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fe28:	3301      	adds	r3, #1
 800fe2a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 800fe2e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fe32:	2b05      	cmp	r3, #5
 800fe34:	d9d7      	bls.n	800fde6 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 800fe36:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800fe40:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800fe44:	2b05      	cmp	r3, #5
 800fe46:	d9ca      	bls.n	800fdde <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 800fe48:	2300      	movs	r3, #0
 800fe4a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800fe4e:	e037      	b.n	800fec0 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x180>
		for(u_short col = 0; col < other_width; ++col)
 800fe50:	2300      	movs	r3, #0
 800fe52:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800fe56:	e02a      	b.n	800feae <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fe58:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800fe5c:	f107 0314 	add.w	r3, r7, #20
 800fe60:	4611      	mov	r1, r2
 800fe62:	4618      	mov	r0, r3
 800fe64:	f000 fcf6 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800fe68:	4605      	mov	r5, r0
 800fe6a:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 800fe6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fe72:	4611      	mov	r1, r2
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 fcfc 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 800fe80:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 800fe84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fe88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	f7ff fd84 	bl	800f99a <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800fe92:	4604      	mov	r4, r0
 800fe94:	4631      	mov	r1, r6
 800fe96:	4628      	mov	r0, r5
 800fe98:	f000 fcfa 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800fe9c:	eef0 7a40 	vmov.f32	s15, s0
 800fea0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800fea4:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800fea8:	3301      	adds	r3, #1
 800feaa:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800feae:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800feb2:	2b05      	cmp	r3, #5
 800feb4:	d9d0      	bls.n	800fe58 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x118>
	for(u_short row = 0; row < heigth; ++row)
 800feb6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800feba:	3301      	adds	r3, #1
 800febc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800fec0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800fec4:	2b03      	cmp	r3, #3
 800fec6:	d9c3      	bls.n	800fe50 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x110>
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fed4 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800fed4:	b580      	push	{r7, lr}
 800fed6:	ed2d 8b02 	vpush	{d8}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800fee2:	2300      	movs	r3, #0
 800fee4:	60fb      	str	r3, [r7, #12]
 800fee6:	e016      	b.n	800ff16 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x42>
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	68f9      	ldr	r1, [r7, #12]
 800feec:	4618      	mov	r0, r3
 800feee:	f7fe fa28 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 800fef2:	4603      	mov	r3, r0
 800fef4:	ed93 8a00 	vldr	s16, [r3]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68f9      	ldr	r1, [r7, #12]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fb8c 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800ff02:	4603      	mov	r3, r0
 800ff04:	edd3 7a00 	vldr	s15, [r3]
 800ff08:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ff0c:	edc3 7a00 	vstr	s15, [r3]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3301      	adds	r3, #1
 800ff14:	60fb      	str	r3, [r7, #12]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f000 fb73 	bl	8010604 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	4293      	cmp	r3, r2
 800ff24:	bf34      	ite	cc
 800ff26:	2301      	movcc	r3, #1
 800ff28:	2300      	movcs	r3, #0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1db      	bne.n	800fee8 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x14>
	return *this;
 800ff30:	687b      	ldr	r3, [r7, #4]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	ecbd 8b02 	vpop	{d8}
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800ff3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff40:	b0a7      	sub	sp, #156	; 0x9c
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	60f8      	str	r0, [r7, #12]
 800ff46:	60b9      	str	r1, [r7, #8]
 800ff48:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800ff50:	e02d      	b.n	800ffae <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800ff52:	2300      	movs	r3, #0
 800ff54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ff58:	e020      	b.n	800ff9c <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800ff5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ff5e:	f107 0314 	add.w	r3, r7, #20
 800ff62:	4611      	mov	r1, r2
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 fc75 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ff70:	4619      	mov	r1, r3
 800ff72:	4610      	mov	r0, r2
 800ff74:	f000 fb51 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800ff78:	4604      	mov	r4, r0
 800ff7a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800ff7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ff82:	4619      	mov	r1, r3
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f000 fc2c 	bl	80107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800ff8a:	eef0 7a40 	vmov.f32	s15, s0
 800ff8e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800ff92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ff96:	3301      	adds	r3, #1
 800ff98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ff9c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ffa0:	2b05      	cmp	r3, #5
 800ffa2:	d9da      	bls.n	800ff5a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800ffa4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800ffae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d9cd      	bls.n	800ff52 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800ffbc:	e02d      	b.n	801001a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800ffc4:	e020      	b.n	8010008 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800ffc6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ffca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ffce:	4611      	mov	r1, r2
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 fc90 	bl	80108f6 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f000 fb1b 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ffea:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ffee:	4619      	mov	r1, r3
 800fff0:	68b8      	ldr	r0, [r7, #8]
 800fff2:	f000 fc8f 	bl	8010914 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 800fff6:	eef0 7a40 	vmov.f32	s15, s0
 800fffa:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fffe:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010002:	3301      	adds	r3, #1
 8010004:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8010008:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801000c:	2b05      	cmp	r3, #5
 801000e:	d9da      	bls.n	800ffc6 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8010010:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010014:	3301      	adds	r3, #1
 8010016:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 801001a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801001e:	2b00      	cmp	r3, #0
 8010020:	d0cd      	beq.n	800ffbe <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8010022:	2300      	movs	r3, #0
 8010024:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8010028:	e034      	b.n	8010094 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801002a:	2300      	movs	r3, #0
 801002c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8010030:	e027      	b.n	8010082 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8010032:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010036:	f107 0314 	add.w	r3, r7, #20
 801003a:	4611      	mov	r1, r2
 801003c:	4618      	mov	r0, r3
 801003e:	f000 fc09 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8010042:	4605      	mov	r5, r0
 8010044:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010048:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801004c:	4611      	mov	r1, r2
 801004e:	4618      	mov	r0, r3
 8010050:	f000 fc51 	bl	80108f6 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 8010054:	4606      	mov	r6, r0
 8010056:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801005a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801005e:	4619      	mov	r1, r3
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 fc71 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8010066:	4604      	mov	r4, r0
 8010068:	4631      	mov	r1, r6
 801006a:	4628      	mov	r0, r5
 801006c:	f000 fc10 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8010070:	eef0 7a40 	vmov.f32	s15, s0
 8010074:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8010078:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801007c:	3301      	adds	r3, #1
 801007e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8010082:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8010086:	2b00      	cmp	r3, #0
 8010088:	d0d3      	beq.n	8010032 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801008a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801008e:	3301      	adds	r3, #1
 8010090:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8010094:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010098:	2b03      	cmp	r3, #3
 801009a:	d9c6      	bls.n	801002a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 801009c:	bf00      	nop
 801009e:	bf00      	nop
 80100a0:	379c      	adds	r7, #156	; 0x9c
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100a6 <_ZNKSt5arrayIfLj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80100a6:	b480      	push	{r7}
 80100a8:	b083      	sub	sp, #12
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	2304      	movs	r3, #4
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6839      	ldr	r1, [r7, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fc52 	bl	8010974 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 80100d0:	4603      	mov	r3, r0
      }
 80100d2:	4618      	mov	r0, r3
 80100d4:	3708      	adds	r7, #8
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 80100da:	b580      	push	{r7, lr}
 80100dc:	b082      	sub	sp, #8
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 fc43 	bl	8010974 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 80100ee:	4603      	mov	r3, r0
      }
 80100f0:	4618      	mov	r0, r3
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fa:	b0b9      	sub	sp, #228	; 0xe4
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8010104:	2300      	movs	r3, #0
 8010106:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 801010a:	e02d      	b.n	8010168 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801010c:	2300      	movs	r3, #0
 801010e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8010112:	e020      	b.n	8010156 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8010114:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8010118:	f107 0314 	add.w	r3, r7, #20
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f000 fb98 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8010124:	4602      	mov	r2, r0
 8010126:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 801012a:	4619      	mov	r1, r3
 801012c:	4610      	mov	r0, r2
 801012e:	f000 fa74 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 8010132:	4604      	mov	r4, r0
 8010134:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8010138:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 801013c:	4619      	mov	r1, r3
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f000 fb4f 	bl	80107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 8010144:	eef0 7a40 	vmov.f32	s15, s0
 8010148:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801014c:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8010150:	3301      	adds	r3, #1
 8010152:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8010156:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 801015a:	2b05      	cmp	r3, #5
 801015c:	d9da      	bls.n	8010114 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801015e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8010162:	3301      	adds	r3, #1
 8010164:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 8010168:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 801016c:	2b03      	cmp	r3, #3
 801016e:	d9cd      	bls.n	801010c <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8010170:	2300      	movs	r3, #0
 8010172:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 8010176:	e02d      	b.n	80101d4 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8010178:	2300      	movs	r3, #0
 801017a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 801017e:	e020      	b.n	80101c2 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8010180:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8010184:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f000 fb62 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8010190:	4602      	mov	r2, r0
 8010192:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8010196:	4619      	mov	r1, r3
 8010198:	4610      	mov	r0, r2
 801019a:	f000 fa3e 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801019e:	4604      	mov	r4, r0
 80101a0:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 80101a4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80101a8:	4619      	mov	r1, r3
 80101aa:	68b8      	ldr	r0, [r7, #8]
 80101ac:	f7ff fc10 	bl	800f9d0 <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 80101b0:	eef0 7a40 	vmov.f32	s15, s0
 80101b4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80101b8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80101bc:	3301      	adds	r3, #1
 80101be:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80101c2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80101c6:	2b05      	cmp	r3, #5
 80101c8:	d9da      	bls.n	8010180 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80101ca:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80101ce:	3301      	adds	r3, #1
 80101d0:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 80101d4:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80101d8:	2b03      	cmp	r3, #3
 80101da:	d9cd      	bls.n	8010178 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80101dc:	2300      	movs	r3, #0
 80101de:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 80101e2:	e034      	b.n	801024e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80101e4:	2300      	movs	r3, #0
 80101e6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 80101ea:	e027      	b.n	801023c <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80101ec:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80101f0:	f107 0314 	add.w	r3, r7, #20
 80101f4:	4611      	mov	r1, r2
 80101f6:	4618      	mov	r0, r3
 80101f8:	f000 fb2c 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 80101fc:	4605      	mov	r5, r0
 80101fe:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8010202:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010206:	4611      	mov	r1, r2
 8010208:	4618      	mov	r0, r3
 801020a:	f000 fb23 	bl	8010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 801020e:	4606      	mov	r6, r0
 8010210:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8010214:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8010218:	4619      	mov	r1, r3
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f7fd ff82 	bl	800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 8010220:	4604      	mov	r4, r0
 8010222:	4631      	mov	r1, r6
 8010224:	4628      	mov	r0, r5
 8010226:	f000 fb33 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 801022a:	eef0 7a40 	vmov.f32	s15, s0
 801022e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8010232:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8010236:	3301      	adds	r3, #1
 8010238:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 801023c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8010240:	2b03      	cmp	r3, #3
 8010242:	d9d3      	bls.n	80101ec <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8010244:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8010248:	3301      	adds	r3, #1
 801024a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 801024e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8010252:	2b03      	cmp	r3, #3
 8010254:	d9c6      	bls.n	80101e4 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8010256:	bf00      	nop
 8010258:	bf00      	nop
 801025a:	37e4      	adds	r7, #228	; 0xe4
 801025c:	46bd      	mov	sp, r7
 801025e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010260 <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 8010260:	b580      	push	{r7, lr}
 8010262:	ed2d 8b02 	vpush	{d8}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 801026e:	2300      	movs	r3, #0
 8010270:	60fb      	str	r3, [r7, #12]
 8010272:	e016      	b.n	80102a2 <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x42>
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	68f9      	ldr	r1, [r7, #12]
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fa54 	bl	8010726 <_ZNKSt5arrayIfLj16EEixEj>
 801027e:	4603      	mov	r3, r0
 8010280:	ed93 8a00 	vldr	s16, [r3]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68f9      	ldr	r1, [r7, #12]
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe f8fe 	bl	800e48a <_ZNSt5arrayIfLj16EEixEj>
 801028e:	4603      	mov	r3, r0
 8010290:	edd3 7a00 	vldr	s15, [r3]
 8010294:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010298:	edc3 7a00 	vstr	s15, [r3]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3301      	adds	r3, #1
 80102a0:	60fb      	str	r3, [r7, #12]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 fa4d 	bl	8010744 <_ZNKSt5arrayIfLj16EE4sizeEv>
 80102aa:	4602      	mov	r2, r0
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	bf34      	ite	cc
 80102b2:	2301      	movcc	r3, #1
 80102b4:	2300      	movcs	r3, #0
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1db      	bne.n	8010274 <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x14>
	return *this;
 80102bc:	687b      	ldr	r3, [r7, #4]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	ecbd 8b02 	vpop	{d8}
 80102c8:	bd80      	pop	{r7, pc}

080102ca <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80102ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102cc:	b0d1      	sub	sp, #324	; 0x144
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80102d8:	6018      	str	r0, [r3, #0]
 80102da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80102e2:	6019      	str	r1, [r3, #0]
 80102e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80102e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80102ec:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 80102ee:	2300      	movs	r3, #0
 80102f0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80102f4:	e030      	b.n	8010358 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x8e>
		for(u_short col = 0; col < width; ++col)
 80102f6:	2300      	movs	r3, #0
 80102f8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 80102fc:	e023      	b.n	8010346 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 80102fe:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8010302:	f107 0314 	add.w	r3, r7, #20
 8010306:	4611      	mov	r1, r2
 8010308:	4618      	mov	r0, r3
 801030a:	f000 fab2 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801030e:	4602      	mov	r2, r0
 8010310:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f000 f97f 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801031c:	4604      	mov	r4, r0
 801031e:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 8010322:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
 8010326:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801032a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	f000 f895 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8010334:	eef0 7a40 	vmov.f32	s15, s0
 8010338:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801033c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8010340:	3301      	adds	r3, #1
 8010342:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 8010346:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 801034a:	2b05      	cmp	r3, #5
 801034c:	d9d7      	bls.n	80102fe <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x34>
	for(u_short row = 0; row < heigth; ++row)
 801034e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8010352:	3301      	adds	r3, #1
 8010354:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8010358:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 801035c:	2b05      	cmp	r3, #5
 801035e:	d9ca      	bls.n	80102f6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 8010360:	2300      	movs	r3, #0
 8010362:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 8010366:	e030      	b.n	80103ca <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x100>
		for(u_short row = 0; row < width; ++row)
 8010368:	2300      	movs	r3, #0
 801036a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 801036e:	e023      	b.n	80103b8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xee>
			other_columns[col][row] = other(row, col);
 8010370:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8010374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010378:	4611      	mov	r1, r2
 801037a:	4618      	mov	r0, r3
 801037c:	f000 fa79 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8010380:	4602      	mov	r2, r0
 8010382:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8010386:	4619      	mov	r1, r3
 8010388:	4610      	mov	r0, r2
 801038a:	f000 f946 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801038e:	4604      	mov	r4, r0
 8010390:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8010394:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 8010398:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801039c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80103a0:	6818      	ldr	r0, [r3, #0]
 80103a2:	f000 f85c 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80103a6:	eef0 7a40 	vmov.f32	s15, s0
 80103aa:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80103ae:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80103b2:	3301      	adds	r3, #1
 80103b4:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 80103b8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80103bc:	2b05      	cmp	r3, #5
 80103be:	d9d7      	bls.n	8010370 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 80103c0:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80103c4:	3301      	adds	r3, #1
 80103c6:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 80103ca:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 80103ce:	2b05      	cmp	r3, #5
 80103d0:	d9ca      	bls.n	8010368 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 80103d2:	2300      	movs	r3, #0
 80103d4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80103d8:	e037      	b.n	801044a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x180>
		for(u_short col = 0; col < other_width; ++col)
 80103da:	2300      	movs	r3, #0
 80103dc:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 80103e0:	e02a      	b.n	8010438 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80103e2:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80103e6:	f107 0314 	add.w	r3, r7, #20
 80103ea:	4611      	mov	r1, r2
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 fa40 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80103f2:	4605      	mov	r5, r0
 80103f4:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 80103f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80103fc:	4611      	mov	r1, r2
 80103fe:	4618      	mov	r0, r3
 8010400:	f000 fa37 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8010404:	4606      	mov	r6, r0
 8010406:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 801040a:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 801040e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010412:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010416:	6818      	ldr	r0, [r3, #0]
 8010418:	f7fd fcdc 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801041c:	4604      	mov	r4, r0
 801041e:	4631      	mov	r1, r6
 8010420:	4628      	mov	r0, r5
 8010422:	f000 fa35 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8010426:	eef0 7a40 	vmov.f32	s15, s0
 801042a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801042e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8010432:	3301      	adds	r3, #1
 8010434:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 8010438:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 801043c:	2b05      	cmp	r3, #5
 801043e:	d9d0      	bls.n	80103e2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x118>
	for(u_short row = 0; row < heigth; ++row)
 8010440:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8010444:	3301      	adds	r3, #1
 8010446:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 801044a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 801044e:	2b05      	cmp	r3, #5
 8010450:	d9c3      	bls.n	80103da <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x110>
}
 8010452:	bf00      	nop
 8010454:	bf00      	nop
 8010456:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 801045a:	46bd      	mov	sp, r7
 801045c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 801045e:	b580      	push	{r7, lr}
 8010460:	b084      	sub	sp, #16
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	460b      	mov	r3, r1
 8010468:	807b      	strh	r3, [r7, #2]
 801046a:	4613      	mov	r3, r2
 801046c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801046e:	887a      	ldrh	r2, [r7, #2]
 8010470:	4613      	mov	r3, r2
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	4413      	add	r3, r2
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	461a      	mov	r2, r3
 801047a:	883b      	ldrh	r3, [r7, #0]
 801047c:	4413      	add	r3, r2
 801047e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	68f9      	ldr	r1, [r7, #12]
 8010484:	4618      	mov	r0, r3
 8010486:	f000 f9d6 	bl	8010836 <_ZNKSt5arrayIfLj36EEixEj>
 801048a:	4603      	mov	r3, r0
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	ee07 3a90 	vmov	s15, r3
}
 8010492:	eeb0 0a67 	vmov.f32	s0, s15
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 801049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801049e:	b0b3      	sub	sp, #204	; 0xcc
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80104a8:	2300      	movs	r3, #0
 80104aa:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80104ae:	e02d      	b.n	801050c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80104b6:	e020      	b.n	80104fa <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80104b8:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80104bc:	f107 0314 	add.w	r3, r7, #20
 80104c0:	4611      	mov	r1, r2
 80104c2:	4618      	mov	r0, r3
 80104c4:	f000 f9d5 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80104c8:	4602      	mov	r2, r0
 80104ca:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80104ce:	4619      	mov	r1, r3
 80104d0:	4610      	mov	r0, r2
 80104d2:	f000 f8a2 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 80104d6:	4604      	mov	r4, r0
 80104d8:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80104dc:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80104e0:	4619      	mov	r1, r3
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff ffbb 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80104e8:	eef0 7a40 	vmov.f32	s15, s0
 80104ec:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80104f0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80104f4:	3301      	adds	r3, #1
 80104f6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80104fa:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80104fe:	2b05      	cmp	r3, #5
 8010500:	d9da      	bls.n	80104b8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8010502:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8010506:	3301      	adds	r3, #1
 8010508:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 801050c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8010510:	2b05      	cmp	r3, #5
 8010512:	d9cd      	bls.n	80104b0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8010514:	2300      	movs	r3, #0
 8010516:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 801051a:	e02d      	b.n	8010578 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 801051c:	2300      	movs	r3, #0
 801051e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8010522:	e020      	b.n	8010566 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8010524:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8010528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801052c:	4611      	mov	r1, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f000 f9e1 	bl	80108f6 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 8010534:	4602      	mov	r2, r0
 8010536:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801053a:	4619      	mov	r1, r3
 801053c:	4610      	mov	r0, r2
 801053e:	f000 f86c 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 8010542:	4604      	mov	r4, r0
 8010544:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8010548:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801054c:	4619      	mov	r1, r3
 801054e:	68b8      	ldr	r0, [r7, #8]
 8010550:	f000 f9e0 	bl	8010914 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 8010554:	eef0 7a40 	vmov.f32	s15, s0
 8010558:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801055c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010560:	3301      	adds	r3, #1
 8010562:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8010566:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801056a:	2b05      	cmp	r3, #5
 801056c:	d9da      	bls.n	8010524 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801056e:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8010572:	3301      	adds	r3, #1
 8010574:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8010578:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 801057c:	2b00      	cmp	r3, #0
 801057e:	d0cd      	beq.n	801051c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8010580:	2300      	movs	r3, #0
 8010582:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8010586:	e034      	b.n	80105f2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8010588:	2300      	movs	r3, #0
 801058a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 801058e:	e027      	b.n	80105e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8010590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010594:	f107 0314 	add.w	r3, r7, #20
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f000 f969 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80105a0:	4605      	mov	r5, r0
 80105a2:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80105a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80105aa:	4611      	mov	r1, r2
 80105ac:	4618      	mov	r0, r3
 80105ae:	f000 f9a2 	bl	80108f6 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 80105b2:	4606      	mov	r6, r0
 80105b4:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 80105b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f9e7 	bl	8010992 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 80105c4:	4604      	mov	r4, r0
 80105c6:	4631      	mov	r1, r6
 80105c8:	4628      	mov	r0, r5
 80105ca:	f000 f961 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 80105ce:	eef0 7a40 	vmov.f32	s15, s0
 80105d2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80105d6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80105da:	3301      	adds	r3, #1
 80105dc:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80105e0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d0d3      	beq.n	8010590 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80105e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80105ec:	3301      	adds	r3, #1
 80105ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80105f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80105f6:	2b05      	cmp	r3, #5
 80105f8:	d9c6      	bls.n	8010588 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 80105fa:	bf00      	nop
 80105fc:	bf00      	nop
 80105fe:	37cc      	adds	r7, #204	; 0xcc
 8010600:	46bd      	mov	sp, r7
 8010602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010604 <_ZNKSt5arrayIfLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	2306      	movs	r3, #6
 801060e:	4618      	mov	r0, r3
 8010610:	370c      	adds	r7, #12
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr

0801061a <_ZNSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) noexcept
 801061a:	b580      	push	{r7, lr}
 801061c:	b082      	sub	sp, #8
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6839      	ldr	r1, [r7, #0]
 8010628:	4618      	mov	r0, r3
 801062a:	f7fd ffe1 	bl	800e5f0 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 801062e:	4603      	mov	r3, r0
      }
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 8010638:	b580      	push	{r7, lr}
 801063a:	ed2d 8b02 	vpush	{d8}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 8010646:	2300      	movs	r3, #0
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	e016      	b.n	801067a <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x42>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	68f9      	ldr	r1, [r7, #12]
 8010650:	4618      	mov	r0, r3
 8010652:	f000 f8f0 	bl	8010836 <_ZNKSt5arrayIfLj36EEixEj>
 8010656:	4603      	mov	r3, r0
 8010658:	ed93 8a00 	vldr	s16, [r3]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	68f9      	ldr	r1, [r7, #12]
 8010660:	4618      	mov	r0, r3
 8010662:	f7fd fd24 	bl	800e0ae <_ZNSt5arrayIfLj36EEixEj>
 8010666:	4603      	mov	r3, r0
 8010668:	edd3 7a00 	vldr	s15, [r3]
 801066c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010670:	edc3 7a00 	vstr	s15, [r3]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	3301      	adds	r3, #1
 8010678:	60fb      	str	r3, [r7, #12]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4618      	mov	r0, r3
 801067e:	f000 f8cf 	bl	8010820 <_ZNKSt5arrayIfLj36EE4sizeEv>
 8010682:	4602      	mov	r2, r0
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	4293      	cmp	r3, r2
 8010688:	bf34      	ite	cc
 801068a:	2301      	movcc	r3, #1
 801068c:	2300      	movcs	r3, #0
 801068e:	b2db      	uxtb	r3, r3
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1db      	bne.n	801064c <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x14>
	return *this;
 8010694:	687b      	ldr	r3, [r7, #4]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	ecbd 8b02 	vpop	{d8}
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>:
      operator[](size_type __n) noexcept
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b082      	sub	sp, #8
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6839      	ldr	r1, [r7, #0]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 f984 	bl	80109be <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>
 80106b6:	4603      	mov	r3, r0
      }
 80106b8:	4618      	mov	r0, r3
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 80106c0:	b580      	push	{r7, lr}
 80106c2:	ed2d 8b02 	vpush	{d8}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 80106ce:	f04f 0300 	mov.w	r3, #0
 80106d2:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 80106d4:	2300      	movs	r3, #0
 80106d6:	60bb      	str	r3, [r7, #8]
 80106d8:	e018      	b.n	801070c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x4c>
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f7ff fcfc 	bl	80100da <_ZNKSt5arrayIfLj4EEixEj>
 80106e2:	4603      	mov	r3, r0
 80106e4:	ed93 8a00 	vldr	s16, [r3]
 80106e8:	68b9      	ldr	r1, [r7, #8]
 80106ea:	6838      	ldr	r0, [r7, #0]
 80106ec:	f7ff fcf5 	bl	80100da <_ZNKSt5arrayIfLj4EEixEj>
 80106f0:	4603      	mov	r3, r0
 80106f2:	edd3 7a00 	vldr	s15, [r3]
 80106f6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80106fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80106fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010702:	edc7 7a03 	vstr	s15, [r7, #12]
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	3301      	adds	r3, #1
 801070a:	60bb      	str	r3, [r7, #8]
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	2b03      	cmp	r3, #3
 8010710:	d9e3      	bls.n	80106da <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	ee07 3a90 	vmov	s15, r3
}
 8010718:	eeb0 0a67 	vmov.f32	s0, s15
 801071c:	3710      	adds	r7, #16
 801071e:	46bd      	mov	sp, r7
 8010720:	ecbd 8b02 	vpop	{d8}
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	4618      	mov	r0, r3
 8010736:	f7fd ff9e 	bl	800e676 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 801073a:	4603      	mov	r3, r0
      }
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <_ZNKSt5arrayIfLj16EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	2310      	movs	r3, #16
 801074e:	4618      	mov	r0, r3
 8010750:	370c      	adds	r7, #12
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <_ZNSt5arrayIS_IfLj4EELj6EEixEj>:
      operator[](size_type __n) noexcept
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6839      	ldr	r1, [r7, #0]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f937 	bl	80109dc <_ZNSt14__array_traitsISt5arrayIfLj4EELj6EE6_S_refERA6_KS1_j>
 801076e:	4603      	mov	r3, r0
      }
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <_ZN3Mat6MatrixILt6ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	460b      	mov	r3, r1
 8010782:	807b      	strh	r3, [r7, #2]
 8010784:	4613      	mov	r3, r2
 8010786:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8010788:	887b      	ldrh	r3, [r7, #2]
 801078a:	009a      	lsls	r2, r3, #2
 801078c:	883b      	ldrh	r3, [r7, #0]
 801078e:	4413      	add	r3, r2
 8010790:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68f9      	ldr	r1, [r7, #12]
 8010796:	4618      	mov	r0, r3
 8010798:	f000 f805 	bl	80107a6 <_ZNSt5arrayIfLj24EEixEj>
 801079c:	4603      	mov	r3, r0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}

080107a6 <_ZNSt5arrayIfLj24EEixEj>:
      operator[](size_type __n) noexcept
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
 80107ae:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	4618      	mov	r0, r3
 80107b6:	f000 f920 	bl	80109fa <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>
 80107ba:	4603      	mov	r3, r0
      }
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}

080107c4 <_ZNKSt5arrayIfLj24EEixEj>:
      operator[](size_type __n) const noexcept
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	4618      	mov	r0, r3
 80107d4:	f000 f911 	bl	80109fa <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>
 80107d8:	4603      	mov	r3, r0
      }
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <_ZNK3Mat6MatrixILt4ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b084      	sub	sp, #16
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	460b      	mov	r3, r1
 80107ec:	807b      	strh	r3, [r7, #2]
 80107ee:	4613      	mov	r3, r2
 80107f0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80107f2:	887a      	ldrh	r2, [r7, #2]
 80107f4:	4613      	mov	r3, r2
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	4413      	add	r3, r2
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	461a      	mov	r2, r3
 80107fe:	883b      	ldrh	r3, [r7, #0]
 8010800:	4413      	add	r3, r2
 8010802:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	68f9      	ldr	r1, [r7, #12]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff ffdb 	bl	80107c4 <_ZNKSt5arrayIfLj24EEixEj>
 801080e:	4603      	mov	r3, r0
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	ee07 3a90 	vmov	s15, r3
}
 8010816:	eeb0 0a67 	vmov.f32	s0, s15
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <_ZNKSt5arrayIfLj36EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	2324      	movs	r3, #36	; 0x24
 801082a:	4618      	mov	r0, r3
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <_ZNKSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) const noexcept
 8010836:	b580      	push	{r7, lr}
 8010838:	b082      	sub	sp, #8
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
 801083e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	4618      	mov	r0, r3
 8010846:	f7fd fddc 	bl	800e402 <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 801084a:	4603      	mov	r3, r0
      }
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	4618      	mov	r0, r3
 8010864:	f000 f8d8 	bl	8010a18 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>
 8010868:	4603      	mov	r3, r0
      }
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>:
      operator[](size_type __n) noexcept
 8010872:	b580      	push	{r7, lr}
 8010874:	b082      	sub	sp, #8
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	4618      	mov	r0, r3
 8010882:	f000 f8db 	bl	8010a3c <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>
 8010886:	4603      	mov	r3, r0
      }
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 8010890:	b580      	push	{r7, lr}
 8010892:	ed2d 8b02 	vpush	{d8}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 801089e:	f04f 0300 	mov.w	r3, #0
 80108a2:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 80108a4:	2300      	movs	r3, #0
 80108a6:	60bb      	str	r3, [r7, #8]
 80108a8:	e018      	b.n	80108dc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x4c>
 80108aa:	68b9      	ldr	r1, [r7, #8]
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fd fd48 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 80108b2:	4603      	mov	r3, r0
 80108b4:	ed93 8a00 	vldr	s16, [r3]
 80108b8:	68b9      	ldr	r1, [r7, #8]
 80108ba:	6838      	ldr	r0, [r7, #0]
 80108bc:	f7fd fd41 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 80108c0:	4603      	mov	r3, r0
 80108c2:	edd3 7a00 	vldr	s15, [r3]
 80108c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80108ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80108ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108d2:	edc7 7a03 	vstr	s15, [r7, #12]
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	3301      	adds	r3, #1
 80108da:	60bb      	str	r3, [r7, #8]
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	2b05      	cmp	r3, #5
 80108e0:	d9e3      	bls.n	80108aa <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	ee07 3a90 	vmov	s15, r3
}
 80108e8:	eeb0 0a67 	vmov.f32	s0, s15
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	ecbd 8b02 	vpop	{d8}
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>:
      operator[](size_type __n) noexcept
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b082      	sub	sp, #8
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f000 f8ab 	bl	8010a60 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>
 801090a:	4603      	mov	r3, r0
      }
 801090c:	4618      	mov	r0, r3
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	807b      	strh	r3, [r7, #2]
 8010920:	4613      	mov	r3, r2
 8010922:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8010924:	887a      	ldrh	r2, [r7, #2]
 8010926:	883b      	ldrh	r3, [r7, #0]
 8010928:	4413      	add	r3, r2
 801092a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	68f9      	ldr	r1, [r7, #12]
 8010930:	4618      	mov	r0, r3
 8010932:	f7fd fd06 	bl	800e342 <_ZNKSt5arrayIfLj6EEixEj>
 8010936:	4603      	mov	r3, r0
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	ee07 3a90 	vmov	s15, r3
}
 801093e:	eeb0 0a67 	vmov.f32	s0, s15
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	807b      	strh	r3, [r7, #2]
 8010954:	4613      	mov	r3, r2
 8010956:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8010958:	887a      	ldrh	r2, [r7, #2]
 801095a:	883b      	ldrh	r3, [r7, #0]
 801095c:	4413      	add	r3, r2
 801095e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	68f9      	ldr	r1, [r7, #12]
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fba9 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 801096a:	4603      	mov	r3, r0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	4413      	add	r3, r2
 8010986:	4618      	mov	r0, r3
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr

08010992 <_ZN3Mat6MatrixILt6ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8010992:	b580      	push	{r7, lr}
 8010994:	b084      	sub	sp, #16
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
 801099a:	460b      	mov	r3, r1
 801099c:	807b      	strh	r3, [r7, #2]
 801099e:	4613      	mov	r3, r2
 80109a0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80109a2:	887a      	ldrh	r2, [r7, #2]
 80109a4:	883b      	ldrh	r3, [r7, #0]
 80109a6:	4413      	add	r3, r2
 80109a8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	68f9      	ldr	r1, [r7, #12]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fe33 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 80109b4:	4603      	mov	r3, r0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	011b      	lsls	r3, r3, #4
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	4413      	add	r3, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <_ZNSt14__array_traitsISt5arrayIfLj4EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	4413      	add	r3, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	370c      	adds	r7, #12
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80109fa:	b480      	push	{r7}
 80109fc:	b083      	sub	sp, #12
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010a22:	683a      	ldr	r2, [r7, #0]
 8010a24:	4613      	mov	r3, r2
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	4413      	add	r3, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	4413      	add	r3, r2
 8010a4e:	00db      	lsls	r3, r3, #3
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	4413      	add	r3, r2
 8010a54:	4618      	mov	r0, r3
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	4413      	add	r3, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <_GLOBAL__sub_I_Fusion>:
 8010a84:	b580      	push	{r7, lr}
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	f7fd fe65 	bl	800e75c <_Z41__static_initialization_and_destruction_0ii>
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
						0.0, 8.238f * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.193f * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.0480, 0.04522, -0.004564});

Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b08c      	sub	sp, #48	; 0x30
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 8010a9c:	4919      	ldr	r1, [pc, #100]	; (8010b04 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010a9e:	6978      	ldr	r0, [r7, #20]
 8010aa0:	f000 f8c1 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010aa4:	eef0 6a40 	vmov.f32	s13, s0
 8010aa8:	eeb0 7a60 	vmov.f32	s14, s1
 8010aac:	eef0 7a41 	vmov.f32	s15, s2
 8010ab0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010ab4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010ab8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4811      	ldr	r0, [pc, #68]	; (8010b08 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010ac4:	f7fd fa19 	bl	800defa <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010ac8:	eef0 6a40 	vmov.f32	s13, s0
 8010acc:	eeb0 7a60 	vmov.f32	s14, s1
 8010ad0:	eef0 7a41 	vmov.f32	s15, s2
 8010ad4:	edc7 6a06 	vstr	s13, [r7, #24]
 8010ad8:	ed87 7a07 	vstr	s14, [r7, #28]
 8010adc:	edc7 7a08 	vstr	s15, [r7, #32]
 8010ae0:	69b9      	ldr	r1, [r7, #24]
 8010ae2:	69fa      	ldr	r2, [r7, #28]
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	ee06 1a90 	vmov	s13, r1
 8010aea:	ee07 2a10 	vmov	s14, r2
 8010aee:	ee07 3a90 	vmov	s15, r3
}
 8010af2:	eeb0 0a66 	vmov.f32	s0, s13
 8010af6:	eef0 0a47 	vmov.f32	s1, s14
 8010afa:	eeb0 1a67 	vmov.f32	s2, s15
 8010afe:	3730      	adds	r7, #48	; 0x30
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	24005120 	.word	0x24005120
 8010b08:	240050fc 	.word	0x240050fc

08010b0c <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08c      	sub	sp, #48	; 0x30
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 8010b14:	4919      	ldr	r1, [pc, #100]	; (8010b7c <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010b16:	6978      	ldr	r0, [r7, #20]
 8010b18:	f000 f885 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010b1c:	eef0 6a40 	vmov.f32	s13, s0
 8010b20:	eeb0 7a60 	vmov.f32	s14, s1
 8010b24:	eef0 7a41 	vmov.f32	s15, s2
 8010b28:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010b2c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010b30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b38:	4619      	mov	r1, r3
 8010b3a:	4811      	ldr	r0, [pc, #68]	; (8010b80 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010b3c:	f7fd f9dd 	bl	800defa <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010b40:	eef0 6a40 	vmov.f32	s13, s0
 8010b44:	eeb0 7a60 	vmov.f32	s14, s1
 8010b48:	eef0 7a41 	vmov.f32	s15, s2
 8010b4c:	edc7 6a06 	vstr	s13, [r7, #24]
 8010b50:	ed87 7a07 	vstr	s14, [r7, #28]
 8010b54:	edc7 7a08 	vstr	s15, [r7, #32]
 8010b58:	69b9      	ldr	r1, [r7, #24]
 8010b5a:	69fa      	ldr	r2, [r7, #28]
 8010b5c:	6a3b      	ldr	r3, [r7, #32]
 8010b5e:	ee06 1a90 	vmov	s13, r1
 8010b62:	ee07 2a10 	vmov	s14, r2
 8010b66:	ee07 3a90 	vmov	s15, r3
}
 8010b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8010b6e:	eef0 0a47 	vmov.f32	s1, s14
 8010b72:	eeb0 1a67 	vmov.f32	s2, s15
 8010b76:	3730      	adds	r7, #48	; 0x30
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	24005150 	.word	0x24005150
 8010b80:	2400512c 	.word	0x2400512c

08010b84 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08c      	sub	sp, #48	; 0x30
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6178      	str	r0, [r7, #20]
	return (GyroA * (GyroVec - GyroB));
 8010b8c:	4919      	ldr	r1, [pc, #100]	; (8010bf4 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010b8e:	6978      	ldr	r0, [r7, #20]
 8010b90:	f000 f849 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010b94:	eef0 6a40 	vmov.f32	s13, s0
 8010b98:	eeb0 7a60 	vmov.f32	s14, s1
 8010b9c:	eef0 7a41 	vmov.f32	s15, s2
 8010ba0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010ba4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010ba8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	4811      	ldr	r0, [pc, #68]	; (8010bf8 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010bb4:	f7fd f9a1 	bl	800defa <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010bb8:	eef0 6a40 	vmov.f32	s13, s0
 8010bbc:	eeb0 7a60 	vmov.f32	s14, s1
 8010bc0:	eef0 7a41 	vmov.f32	s15, s2
 8010bc4:	edc7 6a06 	vstr	s13, [r7, #24]
 8010bc8:	ed87 7a07 	vstr	s14, [r7, #28]
 8010bcc:	edc7 7a08 	vstr	s15, [r7, #32]
 8010bd0:	69b9      	ldr	r1, [r7, #24]
 8010bd2:	69fa      	ldr	r2, [r7, #28]
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	ee06 1a90 	vmov	s13, r1
 8010bda:	ee07 2a10 	vmov	s14, r2
 8010bde:	ee07 3a90 	vmov	s15, r3
}
 8010be2:	eeb0 0a66 	vmov.f32	s0, s13
 8010be6:	eef0 0a47 	vmov.f32	s1, s14
 8010bea:	eeb0 1a67 	vmov.f32	s2, s15
 8010bee:	3730      	adds	r7, #48	; 0x30
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	24005180 	.word	0x24005180
 8010bf8:	2400515c 	.word	0x2400515c

08010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8010bfc:	b4b0      	push	{r4, r5, r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	4614      	mov	r4, r2
 8010c0c:	461d      	mov	r5, r3
 8010c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c16:	682b      	ldr	r3, [r5, #0]
 8010c18:	6023      	str	r3, [r4, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bcb0      	pop	{r4, r5, r7}
 8010c24:	4770      	bx	lr

08010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b08c      	sub	sp, #48	; 0x30
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6178      	str	r0, [r7, #20]
 8010c2e:	6139      	str	r1, [r7, #16]
    Matrix<heigth, width> result = *this;
 8010c30:	697a      	ldr	r2, [r7, #20]
 8010c32:	f107 0318 	add.w	r3, r7, #24
 8010c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 8010c3c:	f107 0318 	add.w	r3, r7, #24
 8010c40:	6939      	ldr	r1, [r7, #16]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f819 	bl	8010c7a <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>
	return result;
 8010c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c4c:	f107 0218 	add.w	r2, r7, #24
 8010c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8010c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5c:	ee06 1a90 	vmov	s13, r1
 8010c60:	ee07 2a10 	vmov	s14, r2
 8010c64:	ee07 3a90 	vmov	s15, r3
}
 8010c68:	eeb0 0a66 	vmov.f32	s0, s13
 8010c6c:	eef0 0a47 	vmov.f32	s1, s14
 8010c70:	eeb0 1a67 	vmov.f32	s2, s15
 8010c74:	3730      	adds	r7, #48	; 0x30
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	ed2d 8b02 	vpush	{d8}
 8010c80:	b084      	sub	sp, #16
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 8010c88:	2300      	movs	r3, #0
 8010c8a:	60fb      	str	r3, [r7, #12]
 8010c8c:	e016      	b.n	8010cbc <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x42>
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	68f9      	ldr	r1, [r7, #12]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fd fd3c 	bl	800e710 <_ZNKSt5arrayIfLj3EEixEj>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	ed93 8a00 	vldr	s16, [r3]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	68f9      	ldr	r1, [r7, #12]
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fd fa8a 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	edd3 7a00 	vldr	s15, [r3]
 8010cae:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010cb2:	edc3 7a00 	vstr	s15, [r3]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f000 f810 	bl	8010ce4 <_ZNKSt5arrayIfLj3EE4sizeEv>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	bf34      	ite	cc
 8010ccc:	2301      	movcc	r3, #1
 8010cce:	2300      	movcs	r3, #0
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d1db      	bne.n	8010c8e <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x14>
	return *this;
 8010cd6:	687b      	ldr	r3, [r7, #4]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	ecbd 8b02 	vpop	{d8}
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	2303      	movs	r3, #3
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
	...

08010cfc <_Z41__static_initialization_and_destruction_0ii>:
 8010cfc:	b5b0      	push	{r4, r5, r7, lr}
 8010cfe:	b0a6      	sub	sp, #152	; 0x98
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d158      	bne.n	8010dbe <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d153      	bne.n	8010dbe <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.004f, -0.005f, 1.107f});
 8010d16:	4b2c      	ldr	r3, [pc, #176]	; (8010dc8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8010d18:	f107 0408 	add.w	r4, r7, #8
 8010d1c:	461d      	mov	r5, r3
 8010d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d26:	682b      	ldr	r3, [r5, #0]
 8010d28:	6023      	str	r3, [r4, #0]
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4826      	ldr	r0, [pc, #152]	; (8010dcc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8010d32:	f7ff ff63 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({-36.35f, 21.20f, -21.76f});
 8010d36:	4a26      	ldr	r2, [pc, #152]	; (8010dd0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8010d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d46:	4619      	mov	r1, r3
 8010d48:	4822      	ldr	r0, [pc, #136]	; (8010dd4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8010d4a:	f7fd f883 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						-0.001166, 0.000580, 0.996647});
 8010d4e:	4b22      	ldr	r3, [pc, #136]	; (8010dd8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8010d50:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010d54:	461d      	mov	r5, r3
 8010d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d5e:	682b      	ldr	r3, [r5, #0]
 8010d60:	6023      	str	r3, [r4, #0]
 8010d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010d66:	4619      	mov	r1, r3
 8010d68:	481c      	ldr	r0, [pc, #112]	; (8010ddc <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8010d6a:	f7ff ff47 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.349030, 0.113962, -0.205569});
 8010d6e:	4a1c      	ldr	r2, [pc, #112]	; (8010de0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8010d70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d7e:	4619      	mov	r1, r3
 8010d80:	4818      	ldr	r0, [pc, #96]	; (8010de4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8010d82:	f7fd f867 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.193f * DEG_2_RAD});
 8010d86:	4b18      	ldr	r3, [pc, #96]	; (8010de8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8010d88:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8010d8c:	461d      	mov	r5, r3
 8010d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d96:	682b      	ldr	r3, [r5, #0]
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d9e:	4619      	mov	r1, r3
 8010da0:	4812      	ldr	r0, [pc, #72]	; (8010dec <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8010da2:	f7ff ff2b 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.0480, 0.04522, -0.004564});
 8010da6:	4a12      	ldr	r2, [pc, #72]	; (8010df0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8010da8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8010dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010db2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010db6:	4619      	mov	r1, r3
 8010db8:	480e      	ldr	r0, [pc, #56]	; (8010df4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8010dba:	f7fd f84b 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
}
 8010dbe:	bf00      	nop
 8010dc0:	3798      	adds	r7, #152	; 0x98
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	08020c3c 	.word	0x08020c3c
 8010dcc:	240050fc 	.word	0x240050fc
 8010dd0:	08020c60 	.word	0x08020c60
 8010dd4:	24005120 	.word	0x24005120
 8010dd8:	08020c6c 	.word	0x08020c6c
 8010ddc:	2400512c 	.word	0x2400512c
 8010de0:	08020c90 	.word	0x08020c90
 8010de4:	24005150 	.word	0x24005150
 8010de8:	08020c9c 	.word	0x08020c9c
 8010dec:	2400515c 	.word	0x2400515c
 8010df0:	08020cc0 	.word	0x08020cc0
 8010df4:	24005180 	.word	0x24005180

08010df8 <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e00:	2001      	movs	r0, #1
 8010e02:	f7ff ff7b 	bl	8010cfc <_Z41__static_initialization_and_destruction_0ii>
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e12:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e16:	f00c fcd7 	bl	801d7c8 <asinf>
 8010e1a:	eef0 7a40 	vmov.f32	s15, s0
 8010e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e32:	edc7 0a00 	vstr	s1, [r7]
 8010e36:	edd7 0a00 	vldr	s1, [r7]
 8010e3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e3e:	f00c fcef 	bl	801d820 <atan2f>
 8010e42:	eef0 7a40 	vmov.f32	s15, s0
 8010e46:	eeb0 0a67 	vmov.f32	s0, s15
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e5a:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e5e:	f00c fdfb 	bl	801da58 <cosf>
 8010e62:	eef0 7a40 	vmov.f32	s15, s0
 8010e66:	eeb0 0a67 	vmov.f32	s0, s15
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e7e:	f00c fd27 	bl	801d8d0 <sinf>
 8010e82:	eef0 7a40 	vmov.f32	s15, s0
 8010e86:	eeb0 0a67 	vmov.f32	s0, s15
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e9e:	f00c fcc1 	bl	801d824 <sqrtf>
 8010ea2:	eef0 7a40 	vmov.f32	s15, s0
 8010ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <_ZN10Algorithms3sgnEf>:

namespace Algorithms
{

float sgn(float val)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((0.0f < val) - (0.0f > val));
 8010eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec6:	bfcc      	ite	gt
 8010ec8:	2301      	movgt	r3, #1
 8010eca:	2300      	movle	r3, #0
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	461a      	mov	r2, r3
 8010ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010edc:	bf4c      	ite	mi
 8010ede:	2301      	movmi	r3, #1
 8010ee0:	2300      	movpl	r3, #0
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	ee07 3a90 	vmov	s15, r3
 8010eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8010eee:	eeb0 0a67 	vmov.f32	s0, s15
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

const Matrix<3, 3>& Inverse3_3Matrix(const Matrix<3, 3>& mat)
{
 8010efc:	b5b0      	push	{r4, r5, r7, lr}
 8010efe:	b096      	sub	sp, #88	; 0x58
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
	static Matrix<3, 3> result;
 8010f04:	4bd2      	ldr	r3, [pc, #840]	; (8011250 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f3bf 8f5b 	dmb	ish
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	bf0c      	ite	eq
 8010f14:	2301      	moveq	r3, #1
 8010f16:	2300      	movne	r3, #0
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d010      	beq.n	8010f40 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 8010f1e:	48cc      	ldr	r0, [pc, #816]	; (8011250 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010f20:	f00c fc42 	bl	801d7a8 <__cxa_guard_acquire>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	bf14      	ite	ne
 8010f2a:	2301      	movne	r3, #1
 8010f2c:	2300      	moveq	r3, #0
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d005      	beq.n	8010f40 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 8010f34:	48c7      	ldr	r0, [pc, #796]	; (8011254 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x358>)
 8010f36:	f7fc ff1e 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8010f3a:	48c5      	ldr	r0, [pc, #788]	; (8011250 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010f3c:	f00c fc40 	bl	801d7c0 <__cxa_guard_release>
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = mat(0,0); a_1_2 = mat(0,1); a_1_3 = mat(0,2);
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7fd fada 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f4a:	eef0 7a40 	vmov.f32	s15, s0
 8010f4e:	4bc2      	ldr	r3, [pc, #776]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8010f50:	edc3 7a00 	vstr	s15, [r3]
 8010f54:	2201      	movs	r2, #1
 8010f56:	2100      	movs	r1, #0
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7fd fad0 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f5e:	eef0 7a40 	vmov.f32	s15, s0
 8010f62:	4bbe      	ldr	r3, [pc, #760]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8010f64:	edc3 7a00 	vstr	s15, [r3]
 8010f68:	2202      	movs	r2, #2
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7fd fac6 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f72:	eef0 7a40 	vmov.f32	s15, s0
 8010f76:	4bba      	ldr	r3, [pc, #744]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8010f78:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = mat(1,0); a_2_2 = mat(1,1); a_2_3 = mat(1,2);
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	2101      	movs	r1, #1
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7fd fabc 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f86:	eef0 7a40 	vmov.f32	s15, s0
 8010f8a:	4bb6      	ldr	r3, [pc, #728]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8010f8c:	edc3 7a00 	vstr	s15, [r3]
 8010f90:	2201      	movs	r2, #1
 8010f92:	2101      	movs	r1, #1
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7fd fab2 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f9a:	eef0 7a40 	vmov.f32	s15, s0
 8010f9e:	4bb2      	ldr	r3, [pc, #712]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010fa0:	edc3 7a00 	vstr	s15, [r3]
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7fd faa8 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010fae:	eef0 7a40 	vmov.f32	s15, s0
 8010fb2:	4bae      	ldr	r3, [pc, #696]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8010fb4:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = mat(2,0); a_3_2 = mat(2,1); a_3_3 = mat(2,2);
 8010fb8:	2200      	movs	r2, #0
 8010fba:	2102      	movs	r1, #2
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f7fd fa9e 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010fc2:	eef0 7a40 	vmov.f32	s15, s0
 8010fc6:	4baa      	ldr	r3, [pc, #680]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8010fc8:	edc3 7a00 	vstr	s15, [r3]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	2102      	movs	r1, #2
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7fd fa94 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010fd6:	eef0 7a40 	vmov.f32	s15, s0
 8010fda:	4ba6      	ldr	r3, [pc, #664]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8010fdc:	edc3 7a00 	vstr	s15, [r3]
 8010fe0:	2202      	movs	r2, #2
 8010fe2:	2102      	movs	r1, #2
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7fd fa8a 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010fea:	eef0 7a40 	vmov.f32	s15, s0
 8010fee:	4ba2      	ldr	r3, [pc, #648]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8010ff0:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8010ff4:	4b98      	ldr	r3, [pc, #608]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8010ff6:	ed93 7a00 	vldr	s14, [r3]
 8010ffa:	4b9b      	ldr	r3, [pc, #620]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010ffc:	edd3 7a00 	vldr	s15, [r3]
 8011000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011004:	4b9c      	ldr	r3, [pc, #624]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8011006:	edd3 7a00 	vldr	s15, [r3]
 801100a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801100e:	4b92      	ldr	r3, [pc, #584]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8011010:	edd3 6a00 	vldr	s13, [r3]
 8011014:	4b95      	ldr	r3, [pc, #596]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8011016:	edd3 7a00 	vldr	s15, [r3]
 801101a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801101e:	4b95      	ldr	r3, [pc, #596]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8011020:	edd3 7a00 	vldr	s15, [r3]
 8011024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011028:	ee37 7a67 	vsub.f32	s14, s14, s15
 801102c:	4b8b      	ldr	r3, [pc, #556]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 801102e:	edd3 6a00 	vldr	s13, [r3]
 8011032:	4b8c      	ldr	r3, [pc, #560]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8011034:	edd3 7a00 	vldr	s15, [r3]
 8011038:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801103c:	4b8e      	ldr	r3, [pc, #568]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801103e:	edd3 7a00 	vldr	s15, [r3]
 8011042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011046:	ee37 7a67 	vsub.f32	s14, s14, s15
 801104a:	4b84      	ldr	r3, [pc, #528]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 801104c:	edd3 6a00 	vldr	s13, [r3]
 8011050:	4b86      	ldr	r3, [pc, #536]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8011052:	edd3 7a00 	vldr	s15, [r3]
 8011056:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801105a:	4b85      	ldr	r3, [pc, #532]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801105c:	edd3 7a00 	vldr	s15, [r3]
 8011060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011068:	4b7d      	ldr	r3, [pc, #500]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 801106a:	edd3 6a00 	vldr	s13, [r3]
 801106e:	4b7d      	ldr	r3, [pc, #500]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8011070:	edd3 7a00 	vldr	s15, [r3]
 8011074:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011078:	4b7e      	ldr	r3, [pc, #504]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801107a:	edd3 7a00 	vldr	s15, [r3]
 801107e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011086:	4b76      	ldr	r3, [pc, #472]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8011088:	edd3 6a00 	vldr	s13, [r3]
 801108c:	4b76      	ldr	r3, [pc, #472]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801108e:	edd3 7a00 	vldr	s15, [r3]
 8011092:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011096:	4b76      	ldr	r3, [pc, #472]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011098:	edd3 7a00 	vldr	s15, [r3]
 801109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110a4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float det1 = 1.0f / det;
 80110a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110ac:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80110b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110b4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 80110b8:	4b6b      	ldr	r3, [pc, #428]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80110ba:	ed93 7a00 	vldr	s14, [r3]
 80110be:	4b6e      	ldr	r3, [pc, #440]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80110c0:	edd3 7a00 	vldr	s15, [r3]
 80110c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110c8:	4b68      	ldr	r3, [pc, #416]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80110ca:	edd3 6a00 	vldr	s13, [r3]
 80110ce:	4b69      	ldr	r3, [pc, #420]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80110d0:	edd3 7a00 	vldr	s15, [r3]
 80110d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80110e0:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80110e4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 80110e8:	4b5c      	ldr	r3, [pc, #368]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 80110ea:	ed93 7a00 	vldr	s14, [r3]
 80110ee:	4b62      	ldr	r3, [pc, #392]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80110f0:	edd3 7a00 	vldr	s15, [r3]
 80110f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110f8:	4b59      	ldr	r3, [pc, #356]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 80110fa:	edd3 6a00 	vldr	s13, [r3]
 80110fe:	4b5d      	ldr	r3, [pc, #372]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8011100:	edd3 7a00 	vldr	s15, [r3]
 8011104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011108:	ee77 7a67 	vsub.f32	s15, s14, s15
 801110c:	eeb1 7a67 	vneg.f32	s14, s15
 8011110:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011114:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011118:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801111c:	4b4f      	ldr	r3, [pc, #316]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 801111e:	ed93 7a00 	vldr	s14, [r3]
 8011122:	4b52      	ldr	r3, [pc, #328]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8011124:	edd3 7a00 	vldr	s15, [r3]
 8011128:	ee27 7a27 	vmul.f32	s14, s14, s15
 801112c:	4b4c      	ldr	r3, [pc, #304]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 801112e:	edd3 6a00 	vldr	s13, [r3]
 8011132:	4b4d      	ldr	r3, [pc, #308]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8011134:	edd3 7a00 	vldr	s15, [r3]
 8011138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801113c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011140:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011144:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011148:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 801114c:	4b45      	ldr	r3, [pc, #276]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 801114e:	ed93 7a00 	vldr	s14, [r3]
 8011152:	4b49      	ldr	r3, [pc, #292]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8011154:	edd3 7a00 	vldr	s15, [r3]
 8011158:	ee27 7a27 	vmul.f32	s14, s14, s15
 801115c:	4b43      	ldr	r3, [pc, #268]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801115e:	edd3 6a00 	vldr	s13, [r3]
 8011162:	4b43      	ldr	r3, [pc, #268]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011164:	edd3 7a00 	vldr	s15, [r3]
 8011168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011170:	eeb1 7a67 	vneg.f32	s14, s15
 8011174:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011178:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 801117c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8011180:	4b35      	ldr	r3, [pc, #212]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8011182:	ed93 7a00 	vldr	s14, [r3]
 8011186:	4b3c      	ldr	r3, [pc, #240]	; (8011278 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8011188:	edd3 7a00 	vldr	s15, [r3]
 801118c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011190:	4b33      	ldr	r3, [pc, #204]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8011192:	edd3 6a00 	vldr	s13, [r3]
 8011196:	4b36      	ldr	r3, [pc, #216]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011198:	edd3 7a00 	vldr	s15, [r3]
 801119c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80111a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80111a8:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80111ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80111b0:	4b29      	ldr	r3, [pc, #164]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 80111b2:	ed93 7a00 	vldr	s14, [r3]
 80111b6:	4b2d      	ldr	r3, [pc, #180]	; (801126c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80111b8:	edd3 7a00 	vldr	s15, [r3]
 80111bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111c0:	4b27      	ldr	r3, [pc, #156]	; (8011260 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 80111c2:	edd3 6a00 	vldr	s13, [r3]
 80111c6:	4b27      	ldr	r3, [pc, #156]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 80111c8:	edd3 7a00 	vldr	s15, [r3]
 80111cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80111d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111d4:	eeb1 7a67 	vneg.f32	s14, s15
 80111d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80111dc:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80111e0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 80111e4:	4b1f      	ldr	r3, [pc, #124]	; (8011264 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 80111e6:	ed93 7a00 	vldr	s14, [r3]
 80111ea:	4b22      	ldr	r3, [pc, #136]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80111ec:	edd3 7a00 	vldr	s15, [r3]
 80111f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111f4:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80111f6:	edd3 6a00 	vldr	s13, [r3]
 80111fa:	4b1d      	ldr	r3, [pc, #116]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80111fc:	edd3 7a00 	vldr	s15, [r3]
 8011200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011204:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011208:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801120c:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011210:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8011214:	4b10      	ldr	r3, [pc, #64]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8011216:	ed93 7a00 	vldr	s14, [r3]
 801121a:	4b16      	ldr	r3, [pc, #88]	; (8011274 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801121c:	edd3 7a00 	vldr	s15, [r3]
 8011220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8011226:	edd3 6a00 	vldr	s13, [r3]
 801122a:	4b11      	ldr	r3, [pc, #68]	; (8011270 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801122c:	edd3 7a00 	vldr	s15, [r3]
 8011230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011238:	eeb1 7a67 	vneg.f32	s14, s15
 801123c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011240:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011244:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8011248:	4b03      	ldr	r3, [pc, #12]	; (8011258 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 801124a:	ed93 7a00 	vldr	s14, [r3]
 801124e:	e015      	b.n	801127c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>
 8011250:	240051b0 	.word	0x240051b0
 8011254:	2400518c 	.word	0x2400518c
 8011258:	240051b4 	.word	0x240051b4
 801125c:	240051b8 	.word	0x240051b8
 8011260:	240051bc 	.word	0x240051bc
 8011264:	240051c0 	.word	0x240051c0
 8011268:	240051c4 	.word	0x240051c4
 801126c:	240051c8 	.word	0x240051c8
 8011270:	240051cc 	.word	0x240051cc
 8011274:	240051d0 	.word	0x240051d0
 8011278:	240051d4 	.word	0x240051d4
 801127c:	4b15      	ldr	r3, [pc, #84]	; (80112d4 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 801127e:	edd3 7a00 	vldr	s15, [r3]
 8011282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011286:	4b14      	ldr	r3, [pc, #80]	; (80112d8 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3dc>)
 8011288:	edd3 6a00 	vldr	s13, [r3]
 801128c:	4b13      	ldr	r3, [pc, #76]	; (80112dc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e0>)
 801128e:	edd3 7a00 	vldr	s15, [r3]
 8011292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011296:	ee37 7a67 	vsub.f32	s14, s14, s15
 801129a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801129e:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80112a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80112a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80112aa:	f107 0308 	add.w	r3, r7, #8
 80112ae:	4611      	mov	r1, r2
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ff fca3 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80112b6:	4b0a      	ldr	r3, [pc, #40]	; (80112e0 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
 80112b8:	461d      	mov	r5, r3
 80112ba:	f107 0408 	add.w	r4, r7, #8
 80112be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80112c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	602b      	str	r3, [r5, #0]
	}};
	return result;
 80112ca:	4b05      	ldr	r3, [pc, #20]	; (80112e0 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3758      	adds	r7, #88	; 0x58
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bdb0      	pop	{r4, r5, r7, pc}
 80112d4:	240051c4 	.word	0x240051c4
 80112d8:	240051b8 	.word	0x240051b8
 80112dc:	240051c0 	.word	0x240051c0
 80112e0:	2400518c 	.word	0x2400518c

080112e4 <_ZNK10Algorithms10AHRSKalman8GetStateEv>:

const Quaternion& AHRSKalman::GetState() const
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
	return _X;
 80112ec:	687b      	ldr	r3, [r7, #4]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>:
{
	return _P;
}

void AHRSKalman::InitialiseKalman(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 80112fa:	b580      	push	{r7, lr}
 80112fc:	ed2d 8b02 	vpush	{d8}
 8011300:	b094      	sub	sp, #80	; 0x50
 8011302:	af00      	add	r7, sp, #0
 8011304:	60f8      	str	r0, [r7, #12]
 8011306:	60b9      	str	r1, [r7, #8]
 8011308:	607a      	str	r2, [r7, #4]
 801130a:	ed87 0a00 	vstr	s0, [r7]
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 801130e:	2200      	movs	r2, #0
 8011310:	2100      	movs	r1, #0
 8011312:	68b8      	ldr	r0, [r7, #8]
 8011314:	f7fd f91f 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011318:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 801131c:	2200      	movs	r2, #0
 801131e:	2101      	movs	r1, #1
 8011320:	68b8      	ldr	r0, [r7, #8]
 8011322:	f7fd f918 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011326:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 801132a:	2200      	movs	r2, #0
 801132c:	2102      	movs	r1, #2
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	f7fd f911 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011334:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 8011338:	2200      	movs	r2, #0
 801133a:	2100      	movs	r1, #0
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7fd f90a 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011342:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8011346:	2200      	movs	r2, #0
 8011348:	2101      	movs	r1, #1
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7fd f903 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011350:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 8011354:	2200      	movs	r2, #0
 8011356:	2102      	movs	r1, #2
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fd f8fc 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801135e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float amx{ay*mz - az*my};
 8011362:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011366:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801136a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801136e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8011372:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801137a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801137e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float amy{az*mx - ax*mz};
 8011382:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011386:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801138e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8011392:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801139a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801139e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float amz{ax*my - ay*mx};
 80113a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80113a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80113aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113ae:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80113b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80113b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amax{amy*az - amz*ay};
 80113c2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80113c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80113ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80113d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80113d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float amay{amz*ax - amx*az};
 80113e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80113e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80113ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113ee:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80113f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80113f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float amaz{amx*ay - amy*ax};
 8011402:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011406:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801140e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8011412:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8011416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801141a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801141e:	edc7 7a08 	vstr	s15, [r7, #32]

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 8011422:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8011426:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801142a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801142e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011436:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801143a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011442:	eeb0 0a67 	vmov.f32	s0, s15
 8011446:	f7ff fd23 	bl	8010e90 <_ZSt4sqrtf>
 801144a:	eeb0 7a40 	vmov.f32	s14, s0
 801144e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011456:	edc7 7a07 	vstr	s15, [r7, #28]
	ax *= ad; ay *= ad; az *= ad;
 801145a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801145e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011466:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 801146a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801146e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011476:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 801147a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801147e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011486:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 801148a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801148e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011492:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011496:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801149e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80114a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80114a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114aa:	eeb0 0a67 	vmov.f32	s0, s15
 80114ae:	f7ff fcef 	bl	8010e90 <_ZSt4sqrtf>
 80114b2:	eeb0 7a40 	vmov.f32	s14, s0
 80114b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114be:	edc7 7a06 	vstr	s15, [r7, #24]
	amx *= amd; amy *= amd; amz *= amd;
 80114c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80114c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80114ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80114d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80114d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80114da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80114e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80114e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80114ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 80114f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80114f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80114fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80114fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011506:	edd7 7a08 	vldr	s15, [r7, #32]
 801150a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011512:	eeb0 0a67 	vmov.f32	s0, s15
 8011516:	f7ff fcbb 	bl	8010e90 <_ZSt4sqrtf>
 801151a:	eeb0 7a40 	vmov.f32	s14, s0
 801151e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011526:	edc7 7a05 	vstr	s15, [r7, #20]
	amax *= amad; amay *= amad; amaz *= amad;
 801152a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801152e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011536:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801153a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801153e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011546:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801154a:	ed97 7a08 	vldr	s14, [r7, #32]
 801154e:	edd7 7a05 	vldr	s15, [r7, #20]
 8011552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011556:	edc7 7a08 	vstr	s15, [r7, #32]

	_X.w = 0.5f * sqrt(amax + amy + az + 1.0f);
 801155a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801155e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011566:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801156e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011576:	eeb0 0a67 	vmov.f32	s0, s15
 801157a:	f7ff fc89 	bl	8010e90 <_ZSt4sqrtf>
 801157e:	eef0 7a40 	vmov.f32	s15, s0
 8011582:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011586:	ee67 7a87 	vmul.f32	s15, s15, s14
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	edc3 7a00 	vstr	s15, [r3]
	_X.x = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 8011590:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011594:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011598:	ee77 7a67 	vsub.f32	s15, s14, s15
 801159c:	eeb0 0a67 	vmov.f32	s0, s15
 80115a0:	f7ff fc86 	bl	8010eb0 <_ZN10Algorithms3sgnEf>
 80115a4:	eef0 7a40 	vmov.f32	s15, s0
 80115a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80115ac:	ee27 8a87 	vmul.f32	s16, s15, s14
 80115b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80115b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80115b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80115c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80115cc:	eeb0 0a67 	vmov.f32	s0, s15
 80115d0:	f7ff fc5e 	bl	8010e90 <_ZSt4sqrtf>
 80115d4:	eef0 7a40 	vmov.f32	s15, s0
 80115d8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	edc3 7a01 	vstr	s15, [r3, #4]
	_X.y = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 80115e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80115e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80115ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115ee:	eeb0 0a67 	vmov.f32	s0, s15
 80115f2:	f7ff fc5d 	bl	8010eb0 <_ZN10Algorithms3sgnEf>
 80115f6:	eef0 7a40 	vmov.f32	s15, s0
 80115fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80115fe:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011602:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8011606:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801160a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801160e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801161a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801161e:	eeb0 0a67 	vmov.f32	s0, s15
 8011622:	f7ff fc35 	bl	8010e90 <_ZSt4sqrtf>
 8011626:	eef0 7a40 	vmov.f32	s15, s0
 801162a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	edc3 7a02 	vstr	s15, [r3, #8]
	_X.z = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 8011634:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011638:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801163c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011640:	eeb0 0a67 	vmov.f32	s0, s15
 8011644:	f7ff fc34 	bl	8010eb0 <_ZN10Algorithms3sgnEf>
 8011648:	eef0 7a40 	vmov.f32	s15, s0
 801164c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011650:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011654:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8011658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801165c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011660:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801166c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011670:	eeb0 0a67 	vmov.f32	s0, s15
 8011674:	f7ff fc0c 	bl	8010e90 <_ZSt4sqrtf>
 8011678:	eef0 7a40 	vmov.f32	s15, s0
 801167c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	edc3 7a03 	vstr	s15, [r3, #12]
	_lastUpdateTime = time;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	651a      	str	r2, [r3, #80]	; 0x50
	_lastCorrectionTime = time;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	655a      	str	r2, [r3, #84]	; 0x54
}
 8011692:	bf00      	nop
 8011694:	3750      	adds	r7, #80	; 0x50
 8011696:	46bd      	mov	sp, r7
 8011698:	ecbd 8b02 	vpop	{d8}
 801169c:	bd80      	pop	{r7, pc}
	...

080116a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::UpdateState(const Matrix<3, 1>& U, float time)
{
 80116a0:	b5b0      	push	{r4, r5, r7, lr}
 80116a2:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80116b0:	6018      	str	r0, [r3, #0]
 80116b2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80116ba:	6019      	str	r1, [r3, #0]
 80116bc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116c0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80116c4:	ed83 0a00 	vstr	s0, [r3]
//Update State
	float hdt = (time - _lastUpdateTime) * 0.5f; //Half-delta-time
 80116c8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116cc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80116d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116da:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80116de:	ed93 7a00 	vldr	s14, [r3]
 80116e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116ee:	edc7 7a9f 	vstr	s15, [r7, #636]	; 0x27c
	_lastUpdateTime = time;
 80116f2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116f6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8011700:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8011704:	6812      	ldr	r2, [r2, #0]
 8011706:	651a      	str	r2, [r3, #80]	; 0x50
	static Matrix<4, 4> F;
 8011708:	4bdc      	ldr	r3, [pc, #880]	; (8011a7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f3bf 8f5b 	dmb	ish
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b00      	cmp	r3, #0
 8011716:	bf0c      	ite	eq
 8011718:	2301      	moveq	r3, #1
 801171a:	2300      	movne	r3, #0
 801171c:	b2db      	uxtb	r3, r3
 801171e:	2b00      	cmp	r3, #0
 8011720:	d010      	beq.n	8011744 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8011722:	48d6      	ldr	r0, [pc, #856]	; (8011a7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 8011724:	f00c f840 	bl	801d7a8 <__cxa_guard_acquire>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	bf14      	ite	ne
 801172e:	2301      	movne	r3, #1
 8011730:	2300      	moveq	r3, #0
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d005      	beq.n	8011744 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8011738:	48d1      	ldr	r0, [pc, #836]	; (8011a80 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e0>)
 801173a:	f7fc fa98 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 801173e:	48cf      	ldr	r0, [pc, #828]	; (8011a7c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 8011740:	f00c f83e 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 3> W;
 8011744:	4bcf      	ldr	r3, [pc, #828]	; (8011a84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f3bf 8f5b 	dmb	ish
 801174c:	f003 0301 	and.w	r3, r3, #1
 8011750:	2b00      	cmp	r3, #0
 8011752:	bf0c      	ite	eq
 8011754:	2301      	moveq	r3, #1
 8011756:	2300      	movne	r3, #0
 8011758:	b2db      	uxtb	r3, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d010      	beq.n	8011780 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 801175e:	48c9      	ldr	r0, [pc, #804]	; (8011a84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 8011760:	f00c f822 	bl	801d7a8 <__cxa_guard_acquire>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	bf14      	ite	ne
 801176a:	2301      	movne	r3, #1
 801176c:	2300      	moveq	r3, #0
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d005      	beq.n	8011780 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8011774:	48c4      	ldr	r0, [pc, #784]	; (8011a88 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e8>)
 8011776:	f001 fed1 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 801177a:	48c2      	ldr	r0, [pc, #776]	; (8011a84 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 801177c:	f00c f820 	bl	801d7c0 <__cxa_guard_release>
	static Quaternion newX;
	float wx{U(0,0)}, wy{U(1,0)}, wz{U(2,0)};
 8011780:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011784:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8011788:	2200      	movs	r2, #0
 801178a:	2100      	movs	r1, #0
 801178c:	6818      	ldr	r0, [r3, #0]
 801178e:	f7fc fee2 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011792:	ed87 0a9e 	vstr	s0, [r7, #632]	; 0x278
 8011796:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801179a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801179e:	2200      	movs	r2, #0
 80117a0:	2101      	movs	r1, #1
 80117a2:	6818      	ldr	r0, [r3, #0]
 80117a4:	f7fc fed7 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80117a8:	ed87 0a9d 	vstr	s0, [r7, #628]	; 0x274
 80117ac:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117b0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80117b4:	2200      	movs	r2, #0
 80117b6:	2102      	movs	r1, #2
 80117b8:	6818      	ldr	r0, [r3, #0]
 80117ba:	f7fc fecc 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80117be:	ed87 0a9c 	vstr	s0, [r7, #624]	; 0x270
	newX.w = _X.w + hdt*(-wx*_X.x - wy*_X.y - wz*_X.z);
 80117c2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117c6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	ed93 7a00 	vldr	s14, [r3]
 80117d0:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 80117d4:	eef1 6a67 	vneg.f32	s13, s15
 80117d8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117dc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80117e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80117ea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117ee:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	ed93 6a02 	vldr	s12, [r3, #8]
 80117f8:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 80117fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011800:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011804:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011808:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	ed93 6a03 	vldr	s12, [r3, #12]
 8011812:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011816:	ee66 7a27 	vmul.f32	s15, s12, s15
 801181a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801181e:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011826:	ee77 7a27 	vadd.f32	s15, s14, s15
 801182a:	4b98      	ldr	r3, [pc, #608]	; (8011a8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 801182c:	edc3 7a00 	vstr	s15, [r3]
	newX.x = _X.x + hdt*(wx*_X.w - wy*_X.z + wz*_X.y);
 8011830:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011834:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	ed93 7a01 	vldr	s14, [r3, #4]
 801183e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011842:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	edd3 6a00 	vldr	s13, [r3]
 801184c:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011850:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011854:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011858:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	ed93 6a03 	vldr	s12, [r3, #12]
 8011862:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011866:	ee66 7a27 	vmul.f32	s15, s12, s15
 801186a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801186e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011872:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	ed93 6a02 	vldr	s12, [r3, #8]
 801187c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011880:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011888:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 801188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011894:	4b7d      	ldr	r3, [pc, #500]	; (8011a8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 8011896:	edc3 7a01 	vstr	s15, [r3, #4]
	newX.y = _X.y + hdt*(wx*_X.z + wy*_X.w - wz*_X.x);
 801189a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801189e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80118a8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80118b6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 80118ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80118be:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118c2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	ed93 6a00 	vldr	s12, [r3]
 80118cc:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 80118d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80118d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80118d8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118dc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	ed93 6a01 	vldr	s12, [r3, #4]
 80118e6:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 80118ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80118ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80118f2:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 80118f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118fe:	4b63      	ldr	r3, [pc, #396]	; (8011a8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 8011900:	edc3 7a02 	vstr	s15, [r3, #8]
	newX.z = _X.z + hdt*(-wx*_X.y + wy*_X.x + wz*_X.w);
 8011904:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011908:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	ed93 7a03 	vldr	s14, [r3, #12]
 8011912:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011916:	eef1 6a67 	vneg.f32	s13, s15
 801191a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801191e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	edd3 7a02 	vldr	s15, [r3, #8]
 8011928:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801192c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011930:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	ed93 6a01 	vldr	s12, [r3, #4]
 801193a:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 801193e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011942:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011946:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801194a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	ed93 6a00 	vldr	s12, [r3]
 8011954:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011958:	ee66 7a27 	vmul.f32	s15, s12, s15
 801195c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011960:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801196c:	4b47      	ldr	r3, [pc, #284]	; (8011a8c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 801196e:	edc3 7a03 	vstr	s15, [r3, #12]

	auto qW = _X * hdt;
 8011972:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011976:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	ed97 0a9f 	vldr	s0, [r7, #636]	; 0x27c
 8011980:	4618      	mov	r0, r3
 8011982:	f008 f882 	bl	8019a8a <_ZNK3Mat10QuaternionmlEf>
 8011986:	eeb0 6a40 	vmov.f32	s12, s0
 801198a:	eef0 6a60 	vmov.f32	s13, s1
 801198e:	eeb0 7a41 	vmov.f32	s14, s2
 8011992:	eef0 7a61 	vmov.f32	s15, s3
 8011996:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801199a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801199e:	ed83 6a00 	vstr	s12, [r3]
 80119a2:	edc3 6a01 	vstr	s13, [r3, #4]
 80119a6:	ed83 7a02 	vstr	s14, [r3, #8]
 80119aa:	edc3 7a03 	vstr	s15, [r3, #12]

	W =
	{{
		-qW.x, -qW.y, -qW.z,
 80119ae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119b2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80119ba:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80119be:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119c2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119c6:	edc3 7a00 	vstr	s15, [r3]
		-qW.x, -qW.y, -qW.z,
 80119ca:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80119d6:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80119da:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119de:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119e2:	edc3 7a01 	vstr	s15, [r3, #4]
		-qW.x, -qW.y, -qW.z,
 80119e6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80119f2:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80119f6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119fa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119fe:	edc3 7a02 	vstr	s15, [r3, #8]
		qW.w, -qW.z, qW.y,
 8011a02:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a06:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a0a:	681a      	ldr	r2, [r3, #0]
	W =
 8011a0c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a14:	60da      	str	r2, [r3, #12]
		qW.w, -qW.z, qW.y,
 8011a16:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a1a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011a22:	eef1 7a67 	vneg.f32	s15, s15
	W =
 8011a26:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a2a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a2e:	edc3 7a04 	vstr	s15, [r3, #16]
		qW.w, -qW.z, qW.y,
 8011a32:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a3a:	689a      	ldr	r2, [r3, #8]
	W =
 8011a3c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a40:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a44:	615a      	str	r2, [r3, #20]
		qW.z, qW.w, -qW.x,
 8011a46:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a4e:	68da      	ldr	r2, [r3, #12]
	W =
 8011a50:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a54:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a58:	619a      	str	r2, [r3, #24]
		qW.z, qW.w, -qW.x,
 8011a5a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a62:	681a      	ldr	r2, [r3, #0]
	W =
 8011a64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a68:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a6c:	61da      	str	r2, [r3, #28]
		qW.z, qW.w, -qW.x,
 8011a6e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a72:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8011a7a:	e009      	b.n	8011a90 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3f0>
 8011a7c:	24005218 	.word	0x24005218
 8011a80:	240051d8 	.word	0x240051d8
 8011a84:	2400524c 	.word	0x2400524c
 8011a88:	2400521c 	.word	0x2400521c
 8011a8c:	24005250 	.word	0x24005250
 8011a90:	eef1 7a67 	vneg.f32	s15, s15
	W =
 8011a94:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a98:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a9c:	edc3 7a08 	vstr	s15, [r3, #32]
		-qW.y, qW.x, qW.w
 8011aa0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011aa4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011aa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8011aac:	eef1 7a67 	vneg.f32	s15, s15
	W =
 8011ab0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ab4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011ab8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-qW.y, qW.x, qW.w
 8011abc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ac0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ac4:	685a      	ldr	r2, [r3, #4]
	W =
 8011ac6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011aca:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011ace:	629a      	str	r2, [r3, #40]	; 0x28
		-qW.y, qW.x, qW.w
 8011ad0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ad4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ad8:	681a      	ldr	r2, [r3, #0]
	W =
 8011ada:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ade:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8011ae4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8011ae8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011aec:	4611      	mov	r1, r2
 8011aee:	4618      	mov	r0, r3
 8011af0:	f001 fd1f 	bl	8013532 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
 8011af4:	4ac0      	ldr	r2, [pc, #768]	; (8011df8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011af6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011afa:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011afe:	4614      	mov	r4, r2
 8011b00:	461d      	mov	r5, r3
 8011b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_Q = W*W.Transposed() * _gyroNoiseVariance;
 8011b12:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8011b1a:	49b7      	ldr	r1, [pc, #732]	; (8011df8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f001 fd1f 	bl	8013560 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 8011b22:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011b2a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8011b2e:	49b2      	ldr	r1, [pc, #712]	; (8011df8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011b30:	4618      	mov	r0, r3
 8011b32:	f001 fd45 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8011b36:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b3a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8011b44:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b48:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011b4c:	681c      	ldr	r4, [r3, #0]
 8011b4e:	463b      	mov	r3, r7
 8011b50:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8011b54:	eeb0 0a67 	vmov.f32	s0, s15
 8011b58:	4611      	mov	r1, r2
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f001 fd43 	bl	80135e6 <_ZNK3Mat6MatrixILt4ELt4EEmlEf>
 8011b60:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b64:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011b68:	3464      	adds	r4, #100	; 0x64
 8011b6a:	461d      	mov	r5, r3
 8011b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	F =
 8011b80:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011b8c:	601a      	str	r2, [r3, #0]
	{{
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011b8e:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011b92:	eeb1 7a67 	vneg.f32	s14, s15
 8011b96:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b9e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ba2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011ba6:	edc3 7a01 	vstr	s15, [r3, #4]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011baa:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011bae:	eeb1 7a67 	vneg.f32	s14, s15
 8011bb2:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bc2:	edc3 7a02 	vstr	s15, [r3, #8]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011bc6:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011bca:	eeb1 7a67 	vneg.f32	s14, s15
 8011bce:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bd6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bde:	edc3 7a03 	vstr	s15, [r3, #12]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011be2:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011be6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011bea:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bee:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bf2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bf6:	edc3 7a04 	vstr	s15, [r3, #16]
 8011bfa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011c06:	615a      	str	r2, [r3, #20]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011c08:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011c0c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011c10:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011c14:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c1c:	edc3 7a06 	vstr	s15, [r3, #24]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011c20:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011c24:	eeb1 7a67 	vneg.f32	s14, s15
 8011c28:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011c30:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c38:	edc3 7a07 	vstr	s15, [r3, #28]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011c3c:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011c40:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011c44:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011c48:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c50:	edc3 7a08 	vstr	s15, [r3, #32]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011c54:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011c58:	eeb1 7a67 	vneg.f32	s14, s15
 8011c5c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011c60:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011c64:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c6c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8011c70:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011c7c:	629a      	str	r2, [r3, #40]	; 0x28
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011c7e:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011c82:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011c86:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011c8a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011c96:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011c9a:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011ca2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011caa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011cae:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011cb2:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011cba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011cbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011cc2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011cc6:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011cca:	eeb1 7a67 	vneg.f32	s14, s15
 8011cce:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011cd6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011cda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011cde:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8011ce2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ce6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011cea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8011cf0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8011cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fc92 	bl	8013624 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
 8011d00:	4a3e      	ldr	r2, [pc, #248]	; (8011dfc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011d02:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d06:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011d0a:	4614      	mov	r4, r2
 8011d0c:	461d      	mov	r5, r3
 8011d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_X = newX;
 8011d22:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d26:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4a34      	ldr	r2, [pc, #208]	; (8011e00 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x760>)
 8011d2e:	461c      	mov	r4, r3
 8011d30:	4613      	mov	r3, r2
 8011d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_P = F * _P * F.Transposed() + _Q;
 8011d38:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d3c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	f103 0210 	add.w	r2, r3, #16
 8011d46:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8011d4a:	492c      	ldr	r1, [pc, #176]	; (8011dfc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fd f9ef 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8011d52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8011d56:	4929      	ldr	r1, [pc, #164]	; (8011dfc <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fd f9fc 	bl	800f156 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 8011d5e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011d62:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8011d66:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fd f9e0 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8011d70:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d74:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8011d7e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d82:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011d86:	681c      	ldr	r4, [r3, #0]
 8011d88:	463b      	mov	r3, r7
 8011d8a:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fd fa11 	bl	800f1b6 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 8011d94:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011d98:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011d9c:	3410      	adds	r4, #16
 8011d9e:	461d      	mov	r5, r3
 8011da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_X = _X.Normalised();
 8011db4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011db8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011dc2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011dc6:	681c      	ldr	r4, [r3, #0]
 8011dc8:	4610      	mov	r0, r2
 8011dca:	f007 feca 	bl	8019b62 <_ZNK3Mat10Quaternion10NormalisedEv>
 8011dce:	eeb0 6a40 	vmov.f32	s12, s0
 8011dd2:	eef0 6a60 	vmov.f32	s13, s1
 8011dd6:	eeb0 7a41 	vmov.f32	s14, s2
 8011dda:	eef0 7a61 	vmov.f32	s15, s3
 8011dde:	ed84 6a00 	vstr	s12, [r4]
 8011de2:	edc4 6a01 	vstr	s13, [r4, #4]
 8011de6:	ed84 7a02 	vstr	s14, [r4, #8]
 8011dea:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8011dee:	bf00      	nop
 8011df0:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bdb0      	pop	{r4, r5, r7, pc}
 8011df8:	2400521c 	.word	0x2400521c
 8011dfc:	240051d8 	.word	0x240051d8
 8011e00:	24005250 	.word	0x24005250

08011e04 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateMag(const Matrix<3, 1>& mag, float time)
{
 8011e04:	b5b0      	push	{r4, r5, r7, lr}
 8011e06:	ed2d 8b02 	vpush	{d8}
 8011e0a:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011e14:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011e18:	6018      	str	r0, [r3, #0]
 8011e1a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011e1e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011e22:	6019      	str	r1, [r3, #0]
 8011e24:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011e28:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011e2c:	ed83 0a00 	vstr	s0, [r3]
	float dip = 0.5f;
 8011e30:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8011e34:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	static const float ry{cos(dip)}, rz{-sin(dip)};
 8011e38:	4ba3      	ldr	r3, [pc, #652]	; (80120c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f3bf 8f5b 	dmb	ish
 8011e40:	f003 0301 	and.w	r3, r3, #1
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	bf0c      	ite	eq
 8011e48:	2301      	moveq	r3, #1
 8011e4a:	2300      	movne	r3, #0
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d016      	beq.n	8011e80 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 8011e52:	489d      	ldr	r0, [pc, #628]	; (80120c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011e54:	f00b fca8 	bl	801d7a8 <__cxa_guard_acquire>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	bf14      	ite	ne
 8011e5e:	2301      	movne	r3, #1
 8011e60:	2300      	moveq	r3, #0
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00b      	beq.n	8011e80 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 8011e68:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8011e6c:	f7fe fff0 	bl	8010e50 <_ZSt3cosf>
 8011e70:	eef0 7a40 	vmov.f32	s15, s0
 8011e74:	4b95      	ldr	r3, [pc, #596]	; (80120cc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c8>)
 8011e76:	edc3 7a00 	vstr	s15, [r3]
 8011e7a:	4893      	ldr	r0, [pc, #588]	; (80120c8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011e7c:	f00b fca0 	bl	801d7c0 <__cxa_guard_release>
 8011e80:	4b93      	ldr	r3, [pc, #588]	; (80120d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f3bf 8f5b 	dmb	ish
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	bf0c      	ite	eq
 8011e90:	2301      	moveq	r3, #1
 8011e92:	2300      	movne	r3, #0
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d018      	beq.n	8011ecc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 8011e9a:	488d      	ldr	r0, [pc, #564]	; (80120d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011e9c:	f00b fc84 	bl	801d7a8 <__cxa_guard_acquire>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	bf14      	ite	ne
 8011ea6:	2301      	movne	r3, #1
 8011ea8:	2300      	moveq	r3, #0
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00d      	beq.n	8011ecc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 8011eb0:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8011eb4:	f7fe ffdc 	bl	8010e70 <_ZSt3sinf>
 8011eb8:	eef0 7a40 	vmov.f32	s15, s0
 8011ebc:	eef1 7a67 	vneg.f32	s15, s15
 8011ec0:	4b84      	ldr	r3, [pc, #528]	; (80120d4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d0>)
 8011ec2:	edc3 7a00 	vstr	s15, [r3]
 8011ec6:	4882      	ldr	r0, [pc, #520]	; (80120d0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011ec8:	f00b fc7a 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 1> Z;
 8011ecc:	4b82      	ldr	r3, [pc, #520]	; (80120d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f3bf 8f5b 	dmb	ish
 8011ed4:	f003 0301 	and.w	r3, r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	bf0c      	ite	eq
 8011edc:	2301      	moveq	r3, #1
 8011ede:	2300      	movne	r3, #0
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d010      	beq.n	8011f08 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 8011ee6:	487c      	ldr	r0, [pc, #496]	; (80120d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011ee8:	f00b fc5e 	bl	801d7a8 <__cxa_guard_acquire>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	bf14      	ite	ne
 8011ef2:	2301      	movne	r3, #1
 8011ef4:	2300      	moveq	r3, #0
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d005      	beq.n	8011f08 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 8011efc:	4877      	ldr	r0, [pc, #476]	; (80120dc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d8>)
 8011efe:	f7fc f886 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8011f02:	4875      	ldr	r0, [pc, #468]	; (80120d8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011f04:	f00b fc5c 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8011f08:	4b75      	ldr	r3, [pc, #468]	; (80120e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f3bf 8f5b 	dmb	ish
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	bf0c      	ite	eq
 8011f18:	2301      	moveq	r3, #1
 8011f1a:	2300      	movne	r3, #0
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d010      	beq.n	8011f44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 8011f22:	486f      	ldr	r0, [pc, #444]	; (80120e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011f24:	f00b fc40 	bl	801d7a8 <__cxa_guard_acquire>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	bf14      	ite	ne
 8011f2e:	2301      	movne	r3, #1
 8011f30:	2300      	moveq	r3, #0
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d005      	beq.n	8011f44 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 8011f38:	486a      	ldr	r0, [pc, #424]	; (80120e4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e0>)
 8011f3a:	f7fc f868 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8011f3e:	4868      	ldr	r0, [pc, #416]	; (80120e0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011f40:	f00b fc3e 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8011f44:	4b68      	ldr	r3, [pc, #416]	; (80120e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f3bf 8f5b 	dmb	ish
 8011f4c:	f003 0301 	and.w	r3, r3, #1
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	bf0c      	ite	eq
 8011f54:	2301      	moveq	r3, #1
 8011f56:	2300      	movne	r3, #0
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d010      	beq.n	8011f80 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 8011f5e:	4862      	ldr	r0, [pc, #392]	; (80120e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011f60:	f00b fc22 	bl	801d7a8 <__cxa_guard_acquire>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	bf14      	ite	ne
 8011f6a:	2301      	movne	r3, #1
 8011f6c:	2300      	moveq	r3, #0
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d005      	beq.n	8011f80 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 8011f74:	485d      	ldr	r0, [pc, #372]	; (80120ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e8>)
 8011f76:	f001 fb6e 	bl	8013656 <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8011f7a:	485b      	ldr	r0, [pc, #364]	; (80120e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011f7c:	f00b fc20 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8011f80:	4b5b      	ldr	r3, [pc, #364]	; (80120f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	f3bf 8f5b 	dmb	ish
 8011f88:	f003 0301 	and.w	r3, r3, #1
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	bf0c      	ite	eq
 8011f90:	2301      	moveq	r3, #1
 8011f92:	2300      	movne	r3, #0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d010      	beq.n	8011fbc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 8011f9a:	4855      	ldr	r0, [pc, #340]	; (80120f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011f9c:	f00b fc04 	bl	801d7a8 <__cxa_guard_acquire>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	bf14      	ite	ne
 8011fa6:	2301      	movne	r3, #1
 8011fa8:	2300      	moveq	r3, #0
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d005      	beq.n	8011fbc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 8011fb0:	4850      	ldr	r0, [pc, #320]	; (80120f4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f0>)
 8011fb2:	f001 fab3 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8011fb6:	484e      	ldr	r0, [pc, #312]	; (80120f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011fb8:	f00b fc02 	bl	801d7c0 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_magNoiseVariance);
 8011fbc:	4b4e      	ldr	r3, [pc, #312]	; (80120f8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f3bf 8f5b 	dmb	ish
 8011fc4:	f003 0301 	and.w	r3, r3, #1
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	bf0c      	ite	eq
 8011fcc:	2301      	moveq	r3, #1
 8011fce:	2300      	movne	r3, #0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d01a      	beq.n	801200c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 8011fd6:	4848      	ldr	r0, [pc, #288]	; (80120f8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8011fd8:	f00b fbe6 	bl	801d7a8 <__cxa_guard_acquire>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	bf14      	ite	ne
 8011fe2:	2301      	movne	r3, #1
 8011fe4:	2300      	moveq	r3, #0
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00f      	beq.n	801200c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 8011fec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011ff0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8011ffa:	4b40      	ldr	r3, [pc, #256]	; (80120fc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f8>)
 8011ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8012000:	4618      	mov	r0, r3
 8012002:	f7fb fec3 	bl	800dd8c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8012006:	483c      	ldr	r0, [pc, #240]	; (80120f8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8012008:	f00b fbda 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 3> S;
 801200c:	4b3c      	ldr	r3, [pc, #240]	; (8012100 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f3bf 8f5b 	dmb	ish
 8012014:	f003 0301 	and.w	r3, r3, #1
 8012018:	2b00      	cmp	r3, #0
 801201a:	bf0c      	ite	eq
 801201c:	2301      	moveq	r3, #1
 801201e:	2300      	movne	r3, #0
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b00      	cmp	r3, #0
 8012024:	d010      	beq.n	8012048 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 8012026:	4836      	ldr	r0, [pc, #216]	; (8012100 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8012028:	f00b fbbe 	bl	801d7a8 <__cxa_guard_acquire>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	bf14      	ite	ne
 8012032:	2301      	movne	r3, #1
 8012034:	2300      	moveq	r3, #0
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d005      	beq.n	8012048 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 801203c:	4831      	ldr	r0, [pc, #196]	; (8012104 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x300>)
 801203e:	f7fb fe9a 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8012042:	482f      	ldr	r0, [pc, #188]	; (8012100 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8012044:	f00b fbbc 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>(1.0f);
 8012048:	4b2f      	ldr	r3, [pc, #188]	; (8012108 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f3bf 8f5b 	dmb	ish
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	bf0c      	ite	eq
 8012058:	2301      	moveq	r3, #1
 801205a:	2300      	movne	r3, #0
 801205c:	b2db      	uxtb	r3, r3
 801205e:	2b00      	cmp	r3, #0
 8012060:	d013      	beq.n	801208a <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8012062:	4829      	ldr	r0, [pc, #164]	; (8012108 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8012064:	f00b fba0 	bl	801d7a8 <__cxa_guard_acquire>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	bf14      	ite	ne
 801206e:	2301      	movne	r3, #1
 8012070:	2300      	moveq	r3, #0
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d008      	beq.n	801208a <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8012078:	4b24      	ldr	r3, [pc, #144]	; (801210c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x308>)
 801207a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801207e:	4618      	mov	r0, r3
 8012080:	f7fb fec4 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8012084:	4820      	ldr	r0, [pc, #128]	; (8012108 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8012086:	f00b fb9b 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 1> res;
 801208a:	4b21      	ldr	r3, [pc, #132]	; (8012110 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f3bf 8f5b 	dmb	ish
 8012092:	f003 0301 	and.w	r3, r3, #1
 8012096:	2b00      	cmp	r3, #0
 8012098:	bf0c      	ite	eq
 801209a:	2301      	moveq	r3, #1
 801209c:	2300      	movne	r3, #0
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d039      	beq.n	8012118 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 80120a4:	481a      	ldr	r0, [pc, #104]	; (8012110 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 80120a6:	f00b fb7f 	bl	801d7a8 <__cxa_guard_acquire>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	bf14      	ite	ne
 80120b0:	2301      	movne	r3, #1
 80120b2:	2300      	moveq	r3, #0
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d02e      	beq.n	8012118 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 80120ba:	4816      	ldr	r0, [pc, #88]	; (8012114 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x310>)
 80120bc:	f7fb ff91 	bl	800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 80120c0:	4813      	ldr	r0, [pc, #76]	; (8012110 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 80120c2:	f00b fb7d 	bl	801d7c0 <__cxa_guard_release>
 80120c6:	e027      	b.n	8012118 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 80120c8:	24005264 	.word	0x24005264
 80120cc:	24005260 	.word	0x24005260
 80120d0:	2400526c 	.word	0x2400526c
 80120d4:	24005268 	.word	0x24005268
 80120d8:	2400527c 	.word	0x2400527c
 80120dc:	24005270 	.word	0x24005270
 80120e0:	2400528c 	.word	0x2400528c
 80120e4:	24005280 	.word	0x24005280
 80120e8:	240052c0 	.word	0x240052c0
 80120ec:	24005290 	.word	0x24005290
 80120f0:	240052f4 	.word	0x240052f4
 80120f4:	240052c4 	.word	0x240052c4
 80120f8:	2400531c 	.word	0x2400531c
 80120fc:	240052f8 	.word	0x240052f8
 8012100:	24005344 	.word	0x24005344
 8012104:	24005320 	.word	0x24005320
 8012108:	24005388 	.word	0x24005388
 801210c:	24005348 	.word	0x24005348
 8012110:	2400539c 	.word	0x2400539c
 8012114:	2400538c 	.word	0x2400538c
	static Quaternion add;
	float md = 1.0f / sqrt(mag(0,0)*mag(0,0) + mag(1,0)*mag(1,0) + mag(2,0)*mag(2,0));
 8012118:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801211c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012120:	2200      	movs	r2, #0
 8012122:	2100      	movs	r1, #0
 8012124:	6818      	ldr	r0, [r3, #0]
 8012126:	f7fc fa16 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801212a:	eeb0 8a40 	vmov.f32	s16, s0
 801212e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012132:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012136:	2200      	movs	r2, #0
 8012138:	2100      	movs	r1, #0
 801213a:	6818      	ldr	r0, [r3, #0]
 801213c:	f7fc fa0b 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012140:	eef0 7a40 	vmov.f32	s15, s0
 8012144:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012148:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801214c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012150:	2200      	movs	r2, #0
 8012152:	2101      	movs	r1, #1
 8012154:	6818      	ldr	r0, [r3, #0]
 8012156:	f7fc f9fe 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801215a:	eef0 8a40 	vmov.f32	s17, s0
 801215e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012162:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012166:	2200      	movs	r2, #0
 8012168:	2101      	movs	r1, #1
 801216a:	6818      	ldr	r0, [r3, #0]
 801216c:	f7fc f9f3 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012170:	eef0 7a40 	vmov.f32	s15, s0
 8012174:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012178:	ee38 8a27 	vadd.f32	s16, s16, s15
 801217c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012180:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012184:	2200      	movs	r2, #0
 8012186:	2102      	movs	r1, #2
 8012188:	6818      	ldr	r0, [r3, #0]
 801218a:	f7fc f9e4 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801218e:	eef0 8a40 	vmov.f32	s17, s0
 8012192:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012196:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801219a:	2200      	movs	r2, #0
 801219c:	2102      	movs	r1, #2
 801219e:	6818      	ldr	r0, [r3, #0]
 80121a0:	f7fc f9d9 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80121a4:	eef0 7a40 	vmov.f32	s15, s0
 80121a8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80121ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80121b0:	eeb0 0a67 	vmov.f32	s0, s15
 80121b4:	f7fe fe6c 	bl	8010e90 <_ZSt4sqrtf>
 80121b8:	eeb0 7a40 	vmov.f32	s14, s0
 80121bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121c4:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268

	Z =
	{{
		mag(0,0)*md,
 80121c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121cc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80121d0:	2200      	movs	r2, #0
 80121d2:	2100      	movs	r1, #0
 80121d4:	6818      	ldr	r0, [r3, #0]
 80121d6:	f7fc f9be 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80121da:	eeb0 7a40 	vmov.f32	s14, s0
 80121de:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 80121e2:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 80121e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80121ee:	edc3 7a00 	vstr	s15, [r3]
		mag(1,0)*md,
 80121f2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121f6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80121fa:	2200      	movs	r2, #0
 80121fc:	2101      	movs	r1, #1
 80121fe:	6818      	ldr	r0, [r3, #0]
 8012200:	f7fc f9a9 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012204:	eeb0 7a40 	vmov.f32	s14, s0
 8012208:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 801220c:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012210:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012218:	edc3 7a01 	vstr	s15, [r3, #4]
		mag(2,0)*md
 801221c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012220:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012224:	2200      	movs	r2, #0
 8012226:	2102      	movs	r1, #2
 8012228:	6818      	ldr	r0, [r3, #0]
 801222a:	f7fc f994 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801222e:	eeb0 7a40 	vmov.f32	s14, s0
 8012232:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8012236:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 801223a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801223e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012242:	edc3 7a02 	vstr	s15, [r3, #8]
 8012246:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801224a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801224e:	4611      	mov	r1, r2
 8012250:	4618      	mov	r0, r3
 8012252:	f7fb fdff 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012256:	49e4      	ldr	r1, [pc, #912]	; (80125e8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e4>)
 8012258:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801225c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012260:	460b      	mov	r3, r1
 8012262:	ca07      	ldmia	r2, {r0, r1, r2}
 8012264:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		2.0f*(ry*(_X.w*_X.z + _X.x*_X.y) + rz*(_X.x*_X.z - _X.w*_X.y)),
 8012268:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801226c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	ed93 7a00 	vldr	s14, [r3]
 8012276:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801227a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	edd3 7a03 	vldr	s15, [r3, #12]
 8012284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012288:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801228c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	edd3 6a01 	vldr	s13, [r3, #4]
 8012296:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801229a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80122a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122ac:	4bcf      	ldr	r3, [pc, #828]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80122ae:	edd3 7a00 	vldr	s15, [r3]
 80122b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80122b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80122c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80122d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80122d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	ed93 6a00 	vldr	s12, [r3]
 80122e4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122e8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80122f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80122f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80122fa:	4bbd      	ldr	r3, [pc, #756]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80122fc:	edd3 7a00 	vldr	s15, [r3]
 8012300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012308:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801230c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012310:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012314:	edc3 7a00 	vstr	s15, [r3]
		2.0f*(ry*(0.5f - _X.x*_X.x - _X.z*_X.z) + rz*(_X.w*_X.x + _X.y*_X.z)),
 8012318:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801231c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	ed93 7a01 	vldr	s14, [r3, #4]
 8012326:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801232a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	edd3 7a01 	vldr	s15, [r3, #4]
 8012334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012338:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801233c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012340:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012344:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	edd3 6a03 	vldr	s13, [r3, #12]
 801234e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012352:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	edd3 7a03 	vldr	s15, [r3, #12]
 801235c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012364:	4ba1      	ldr	r3, [pc, #644]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8012366:	edd3 7a00 	vldr	s15, [r3]
 801236a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801236e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012372:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	edd3 6a00 	vldr	s13, [r3]
 801237c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012380:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	edd3 7a01 	vldr	s15, [r3, #4]
 801238a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801238e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012392:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	ed93 6a02 	vldr	s12, [r3, #8]
 801239c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80123aa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80123ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80123b2:	4b8f      	ldr	r3, [pc, #572]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80123b4:	edd3 7a00 	vldr	s15, [r3]
 80123b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80123c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80123cc:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*(ry*(_X.y*_X.z - _X.w*_X.x) + rz*(0.5f - _X.x*_X.x - _X.y*_X.y))
 80123d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	ed93 7a02 	vldr	s14, [r3, #8]
 80123de:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123e2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80123ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123f0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	edd3 6a00 	vldr	s13, [r3]
 80123fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012402:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	edd3 7a01 	vldr	s15, [r3, #4]
 801240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012414:	4b75      	ldr	r3, [pc, #468]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8012416:	edd3 7a00 	vldr	s15, [r3]
 801241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801241e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012422:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	edd3 6a01 	vldr	s13, [r3, #4]
 801242c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012430:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	edd3 7a01 	vldr	s15, [r3, #4]
 801243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801243e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012442:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012446:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801244a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	ed93 6a02 	vldr	s12, [r3, #8]
 8012454:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012458:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012462:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012466:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801246a:	4b61      	ldr	r3, [pc, #388]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 801246c:	edd3 7a00 	vldr	s15, [r3]
 8012470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012478:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 801247c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012480:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012484:	edc3 7a02 	vstr	s15, [r3, #8]
 8012488:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801248c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012490:	4611      	mov	r1, r2
 8012492:	4618      	mov	r0, r3
 8012494:	f7fb fcde 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012498:	4956      	ldr	r1, [pc, #344]	; (80125f4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f0>)
 801249a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801249e:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 80124a2:	460b      	mov	r3, r1
 80124a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80124a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80124aa:	4b50      	ldr	r3, [pc, #320]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80124ac:	edd3 7a00 	vldr	s15, [r3]
 80124b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80124b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	edd3 7a03 	vldr	s15, [r3, #12]
 80124c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80124c6:	4b4a      	ldr	r3, [pc, #296]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80124c8:	edd3 7a00 	vldr	s15, [r3]
 80124cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80124d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124d4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	edd3 7a02 	vldr	s15, [r3, #8]
 80124de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124e2:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80124e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80124ee:	edc3 7a00 	vstr	s15, [r3]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80124f2:	4b3e      	ldr	r3, [pc, #248]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80124f4:	edd3 7a00 	vldr	s15, [r3]
 80124f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80124fc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012500:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	edd3 7a03 	vldr	s15, [r3, #12]
 801250a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801250e:	4b38      	ldr	r3, [pc, #224]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8012510:	edd3 7a00 	vldr	s15, [r3]
 8012514:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012518:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801251c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	edd3 7a03 	vldr	s15, [r3, #12]
 8012526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801252a:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801252e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012532:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012536:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 801253a:	4b2c      	ldr	r3, [pc, #176]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801253c:	edd3 7a00 	vldr	s15, [r3]
 8012540:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012544:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012548:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012556:	4b26      	ldr	r3, [pc, #152]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8012558:	edd3 7a00 	vldr	s15, [r3]
 801255c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012560:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012564:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	edd3 7a00 	vldr	s15, [r3]
 801256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012572:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 8012576:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801257a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801257e:	edc3 7a02 	vstr	s15, [r3, #8]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 8012582:	4b1a      	ldr	r3, [pc, #104]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8012584:	edd3 7a00 	vldr	s15, [r3]
 8012588:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801258c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012590:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	edd3 7a00 	vldr	s15, [r3]
 801259a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801259e:	4b14      	ldr	r3, [pc, #80]	; (80125f0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80125a0:	edd3 7a00 	vldr	s15, [r3]
 80125a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80125a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80125b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80125ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80125be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80125c6:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80125ca:	4b08      	ldr	r3, [pc, #32]	; (80125ec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80125cc:	edd3 7a00 	vldr	s15, [r3]
 80125d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80125d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	edd3 7a00 	vldr	s15, [r3]
 80125e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80125e6:	e007      	b.n	80125f8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f4>
 80125e8:	24005270 	.word	0x24005270
 80125ec:	24005260 	.word	0x24005260
 80125f0:	24005268 	.word	0x24005268
 80125f4:	24005280 	.word	0x24005280
 80125f8:	4be0      	ldr	r3, [pc, #896]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80125fa:	edd3 7a00 	vldr	s15, [r3]
 80125fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012602:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012606:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012614:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012618:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801261c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012620:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8012624:	4bd6      	ldr	r3, [pc, #856]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012626:	edd3 7a00 	vldr	s15, [r3]
 801262a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801262e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012632:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012636:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012644:	4bcd      	ldr	r3, [pc, #820]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012646:	edd3 7a00 	vldr	s15, [r3]
 801264a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801264e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012652:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	edd3 7a00 	vldr	s15, [r3]
 801265c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012660:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012664:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012668:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801266c:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8012670:	4bc3      	ldr	r3, [pc, #780]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012672:	edd3 7a00 	vldr	s15, [r3]
 8012676:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801267a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801267e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	edd3 7a02 	vldr	s15, [r3, #8]
 8012688:	ee27 7a27 	vmul.f32	s14, s14, s15
 801268c:	4bbb      	ldr	r3, [pc, #748]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801268e:	edd3 7a00 	vldr	s15, [r3]
 8012692:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012696:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801269a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80126a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126a8:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80126ac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80126b4:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80126b8:	4bb1      	ldr	r3, [pc, #708]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80126ba:	edd3 7a00 	vldr	s15, [r3]
 80126be:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80126c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80126c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80126d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126d8:	4ba8      	ldr	r3, [pc, #672]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80126da:	edd3 7a00 	vldr	s15, [r3]
 80126de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80126e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80126f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126f4:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80126f8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012700:	edc3 7a07 	vstr	s15, [r3, #28]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8012704:	4b9e      	ldr	r3, [pc, #632]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012706:	edd3 7a00 	vldr	s15, [r3]
 801270a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801270e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012712:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012716:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012724:	4b95      	ldr	r3, [pc, #596]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012726:	edd3 7a00 	vldr	s15, [r3]
 801272a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801272e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012732:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	edd3 7a00 	vldr	s15, [r3]
 801273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012740:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012744:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012748:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801274c:	edc3 7a08 	vstr	s15, [r3, #32]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8012750:	4b8b      	ldr	r3, [pc, #556]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012752:	edd3 7a00 	vldr	s15, [r3]
 8012756:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801275a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801275e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012762:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	edd3 7a00 	vldr	s15, [r3]
 801276c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012770:	4b82      	ldr	r3, [pc, #520]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012772:	edd3 7a00 	vldr	s15, [r3]
 8012776:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801277a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801277e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	edd3 7a01 	vldr	s15, [r3, #4]
 8012788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801278c:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 8012790:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012794:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012798:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 801279c:	4b78      	ldr	r3, [pc, #480]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801279e:	edd3 7a00 	vldr	s15, [r3]
 80127a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80127a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80127b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80127b8:	4b70      	ldr	r3, [pc, #448]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80127ba:	edd3 7a00 	vldr	s15, [r3]
 80127be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80127c2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80127d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127d4:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80127d8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80127e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 80127e4:	4b66      	ldr	r3, [pc, #408]	; (8012980 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80127e6:	edd3 7a00 	vldr	s15, [r3]
 80127ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80127ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127f2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80127fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012800:	4b5e      	ldr	r3, [pc, #376]	; (801297c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012802:	edd3 7a00 	vldr	s15, [r3]
 8012806:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801280a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801280e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	edd3 7a03 	vldr	s15, [r3, #12]
 8012818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801281c:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012820:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012824:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012828:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 801282c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8012830:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012834:	4611      	mov	r1, r2
 8012836:	4618      	mov	r0, r3
 8012838:	f000 ff18 	bl	801366c <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 801283c:	4a51      	ldr	r2, [pc, #324]	; (8012984 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 801283e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012842:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8012846:	4614      	mov	r4, r2
 8012848:	461d      	mov	r5, r3
 801284a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801284c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801284e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 801285a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801285e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f103 0210 	add.w	r2, r3, #16
 8012868:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801286c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012870:	4944      	ldr	r1, [pc, #272]	; (8012984 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8012872:	4618      	mov	r0, r3
 8012874:	f000 ff11 	bl	801369a <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8012878:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801287c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012880:	4940      	ldr	r1, [pc, #256]	; (8012984 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8012882:	4618      	mov	r0, r3
 8012884:	f000 ff1c 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8012888:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801288c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012890:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8012894:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8012898:	4618      	mov	r0, r3
 801289a:	f000 ff41 	bl	8013720 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801289e:	4c3a      	ldr	r4, [pc, #232]	; (8012988 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 80128a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80128a4:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80128a8:	4a38      	ldr	r2, [pc, #224]	; (801298c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb88>)
 80128aa:	4618      	mov	r0, r3
 80128ac:	f000 ff4b 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 80128b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80128b4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80128b8:	461d      	mov	r5, r3
 80128ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128c2:	682b      	ldr	r3, [r5, #0]
 80128c4:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 80128c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80128ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f103 0410 	add.w	r4, r3, #16
 80128d4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80128d8:	492a      	ldr	r1, [pc, #168]	; (8012984 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 fef0 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80128e0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80128e4:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80128e8:	4621      	mov	r1, r4
 80128ea:	4618      	mov	r0, r3
 80128ec:	f000 ff44 	bl	8013778 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 80128f0:	4825      	ldr	r0, [pc, #148]	; (8012988 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 80128f2:	f7fe fb03 	bl	8010efc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80128f6:	4602      	mov	r2, r0
 80128f8:	4c25      	ldr	r4, [pc, #148]	; (8012990 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 80128fa:	463b      	mov	r3, r7
 80128fc:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8012900:	4618      	mov	r0, r3
 8012902:	f000 ff4c 	bl	801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8012906:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801290a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801290e:	461d      	mov	r5, r3
 8012910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801291c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 8012920:	491c      	ldr	r1, [pc, #112]	; (8012994 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb90>)
 8012922:	481d      	ldr	r0, [pc, #116]	; (8012998 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb94>)
 8012924:	f7fe f97f 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8012928:	eef0 6a40 	vmov.f32	s13, s0
 801292c:	eeb0 7a60 	vmov.f32	s14, s1
 8012930:	eef0 7a41 	vmov.f32	s15, s2
 8012934:	edc7 6a77 	vstr	s13, [r7, #476]	; 0x1dc
 8012938:	ed87 7a78 	vstr	s14, [r7, #480]	; 0x1e0
 801293c:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
 8012940:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8012944:	4619      	mov	r1, r3
 8012946:	4812      	ldr	r0, [pc, #72]	; (8012990 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 8012948:	f000 ff3c 	bl	80137c4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801294c:	eeb0 6a40 	vmov.f32	s12, s0
 8012950:	eef0 6a60 	vmov.f32	s13, s1
 8012954:	eeb0 7a41 	vmov.f32	s14, s2
 8012958:	eef0 7a61 	vmov.f32	s15, s3
 801295c:	4b0f      	ldr	r3, [pc, #60]	; (801299c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 801295e:	ed83 6a00 	vstr	s12, [r3]
 8012962:	edc3 6a01 	vstr	s13, [r3, #4]
 8012966:	ed83 7a02 	vstr	s14, [r3, #8]
 801296a:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 801296e:	2200      	movs	r2, #0
 8012970:	2100      	movs	r1, #0
 8012972:	480a      	ldr	r0, [pc, #40]	; (801299c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 8012974:	f7fd ffe8 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8012978:	4603      	mov	r3, r0
 801297a:	e011      	b.n	80129a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb9c>
 801297c:	24005268 	.word	0x24005268
 8012980:	24005260 	.word	0x24005260
 8012984:	24005290 	.word	0x24005290
 8012988:	24005320 	.word	0x24005320
 801298c:	240052f8 	.word	0x240052f8
 8012990:	240052c4 	.word	0x240052c4
 8012994:	24005280 	.word	0x24005280
 8012998:	24005270 	.word	0x24005270
 801299c:	2400538c 	.word	0x2400538c
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	4a39      	ldr	r2, [pc, #228]	; (8012a88 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	2200      	movs	r2, #0
 80129a8:	2101      	movs	r1, #1
 80129aa:	4838      	ldr	r0, [pc, #224]	; (8012a8c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80129ac:	f7fd ffcc 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80129b0:	4603      	mov	r3, r0
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a34      	ldr	r2, [pc, #208]	; (8012a88 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80129b6:	6053      	str	r3, [r2, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	2102      	movs	r1, #2
 80129bc:	4833      	ldr	r0, [pc, #204]	; (8012a8c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80129be:	f7fd ffc3 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80129c2:	4603      	mov	r3, r0
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a30      	ldr	r2, [pc, #192]	; (8012a88 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80129c8:	6093      	str	r3, [r2, #8]
 80129ca:	2200      	movs	r2, #0
 80129cc:	2103      	movs	r1, #3
 80129ce:	482f      	ldr	r0, [pc, #188]	; (8012a8c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80129d0:	f7fd ffba 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80129d4:	4603      	mov	r3, r0
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a2b      	ldr	r2, [pc, #172]	; (8012a88 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80129da:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 80129dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80129e0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80129ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80129ee:	681c      	ldr	r4, [r3, #0]
 80129f0:	4925      	ldr	r1, [pc, #148]	; (8012a88 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80129f2:	4610      	mov	r0, r2
 80129f4:	f006 ff4f 	bl	8019896 <_ZNK3Mat10QuaternionplERKS0_>
 80129f8:	eeb0 6a40 	vmov.f32	s12, s0
 80129fc:	eef0 6a60 	vmov.f32	s13, s1
 8012a00:	eeb0 7a41 	vmov.f32	s14, s2
 8012a04:	eef0 7a61 	vmov.f32	s15, s3
 8012a08:	ed84 6a00 	vstr	s12, [r4]
 8012a0c:	edc4 6a01 	vstr	s13, [r4, #4]
 8012a10:	ed84 7a02 	vstr	s14, [r4, #8]
 8012a14:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 8012a18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012a1c:	4a1c      	ldr	r2, [pc, #112]	; (8012a90 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8c>)
 8012a1e:	491d      	ldr	r1, [pc, #116]	; (8012a94 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc90>)
 8012a20:	4618      	mov	r0, r3
 8012a22:	f000 fdcd 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8012a26:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8012a2a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8012a2e:	491a      	ldr	r1, [pc, #104]	; (8012a98 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc94>)
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7fc fd00 	bl	800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8012a36:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012a3a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f103 0210 	add.w	r2, r3, #16
 8012a44:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012a48:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012a4c:	681c      	ldr	r4, [r3, #0]
 8012a4e:	463b      	mov	r3, r7
 8012a50:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7fc fb6b 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8012a5a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012a5e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012a62:	3410      	adds	r4, #16
 8012a64:	461d      	mov	r5, r3
 8012a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012a7a:	bf00      	nop
 8012a7c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8012a80:	46bd      	mov	sp, r7
 8012a82:	ecbd 8b02 	vpop	{d8}
 8012a86:	bdb0      	pop	{r4, r5, r7, pc}
 8012a88:	240053a0 	.word	0x240053a0
 8012a8c:	2400538c 	.word	0x2400538c
 8012a90:	24005290 	.word	0x24005290
 8012a94:	240052c4 	.word	0x240052c4
 8012a98:	24005348 	.word	0x24005348

08012a9c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateAcc(const Matrix<3, 1>& acc, float time)
{
 8012a9c:	b5b0      	push	{r4, r5, r7, lr}
 8012a9e:	ed2d 8b02 	vpush	{d8}
 8012aa2:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012aac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ab0:	6018      	str	r0, [r3, #0]
 8012ab2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ab6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012aba:	6019      	str	r1, [r3, #0]
 8012abc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ac0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8012ac4:	ed83 0a00 	vstr	s0, [r3]
	static const float gz{1.0f};
	static const float gz2 = 2.0f*gz;
	static Matrix<3, 1> Z;
 8012ac8:	4b7e      	ldr	r3, [pc, #504]	; (8012cc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f3bf 8f5b 	dmb	ish
 8012ad0:	f003 0301 	and.w	r3, r3, #1
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	bf0c      	ite	eq
 8012ad8:	2301      	moveq	r3, #1
 8012ada:	2300      	movne	r3, #0
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d010      	beq.n	8012b04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8012ae2:	4878      	ldr	r0, [pc, #480]	; (8012cc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8012ae4:	f00a fe60 	bl	801d7a8 <__cxa_guard_acquire>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bf14      	ite	ne
 8012aee:	2301      	movne	r3, #1
 8012af0:	2300      	moveq	r3, #0
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d005      	beq.n	8012b04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8012af8:	4873      	ldr	r0, [pc, #460]	; (8012cc8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x22c>)
 8012afa:	f7fb fa88 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8012afe:	4871      	ldr	r0, [pc, #452]	; (8012cc4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8012b00:	f00a fe5e 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8012b04:	4b71      	ldr	r3, [pc, #452]	; (8012ccc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f3bf 8f5b 	dmb	ish
 8012b0c:	f003 0301 	and.w	r3, r3, #1
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bf0c      	ite	eq
 8012b14:	2301      	moveq	r3, #1
 8012b16:	2300      	movne	r3, #0
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d010      	beq.n	8012b40 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8012b1e:	486b      	ldr	r0, [pc, #428]	; (8012ccc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012b20:	f00a fe42 	bl	801d7a8 <__cxa_guard_acquire>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	bf14      	ite	ne
 8012b2a:	2301      	movne	r3, #1
 8012b2c:	2300      	moveq	r3, #0
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d005      	beq.n	8012b40 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8012b34:	4866      	ldr	r0, [pc, #408]	; (8012cd0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8012b36:	f7fb fa6a 	bl	800e00e <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8012b3a:	4864      	ldr	r0, [pc, #400]	; (8012ccc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012b3c:	f00a fe40 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8012b40:	4b64      	ldr	r3, [pc, #400]	; (8012cd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f3bf 8f5b 	dmb	ish
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bf0c      	ite	eq
 8012b50:	2301      	moveq	r3, #1
 8012b52:	2300      	movne	r3, #0
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d010      	beq.n	8012b7c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8012b5a:	485e      	ldr	r0, [pc, #376]	; (8012cd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012b5c:	f00a fe24 	bl	801d7a8 <__cxa_guard_acquire>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	bf14      	ite	ne
 8012b66:	2301      	movne	r3, #1
 8012b68:	2300      	moveq	r3, #0
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d005      	beq.n	8012b7c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8012b70:	4859      	ldr	r0, [pc, #356]	; (8012cd8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 8012b72:	f000 fd70 	bl	8013656 <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8012b76:	4857      	ldr	r0, [pc, #348]	; (8012cd4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012b78:	f00a fe22 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8012b7c:	4b57      	ldr	r3, [pc, #348]	; (8012cdc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f3bf 8f5b 	dmb	ish
 8012b84:	f003 0301 	and.w	r3, r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	bf0c      	ite	eq
 8012b8c:	2301      	moveq	r3, #1
 8012b8e:	2300      	movne	r3, #0
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d010      	beq.n	8012bb8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8012b96:	4851      	ldr	r0, [pc, #324]	; (8012cdc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012b98:	f00a fe06 	bl	801d7a8 <__cxa_guard_acquire>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	bf14      	ite	ne
 8012ba2:	2301      	movne	r3, #1
 8012ba4:	2300      	moveq	r3, #0
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d005      	beq.n	8012bb8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8012bac:	484c      	ldr	r0, [pc, #304]	; (8012ce0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 8012bae:	f000 fcb5 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8012bb2:	484a      	ldr	r0, [pc, #296]	; (8012cdc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012bb4:	f00a fe04 	bl	801d7c0 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_accNoiseVariance);
 8012bb8:	4b4a      	ldr	r3, [pc, #296]	; (8012ce4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f3bf 8f5b 	dmb	ish
 8012bc0:	f003 0301 	and.w	r3, r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	bf0c      	ite	eq
 8012bc8:	2301      	moveq	r3, #1
 8012bca:	2300      	movne	r3, #0
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01a      	beq.n	8012c08 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8012bd2:	4844      	ldr	r0, [pc, #272]	; (8012ce4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012bd4:	f00a fde8 	bl	801d7a8 <__cxa_guard_acquire>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	bf14      	ite	ne
 8012bde:	2301      	movne	r3, #1
 8012be0:	2300      	moveq	r3, #0
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d00f      	beq.n	8012c08 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8012be8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012bec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8012bf6:	4b3c      	ldr	r3, [pc, #240]	; (8012ce8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8012bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fb f8c5 	bl	800dd8c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8012c02:	4838      	ldr	r0, [pc, #224]	; (8012ce4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012c04:	f00a fddc 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8012c08:	4b38      	ldr	r3, [pc, #224]	; (8012cec <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f3bf 8f5b 	dmb	ish
 8012c10:	f003 0301 	and.w	r3, r3, #1
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	bf0c      	ite	eq
 8012c18:	2301      	moveq	r3, #1
 8012c1a:	2300      	movne	r3, #0
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d010      	beq.n	8012c44 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8012c22:	4832      	ldr	r0, [pc, #200]	; (8012cec <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012c24:	f00a fdc0 	bl	801d7a8 <__cxa_guard_acquire>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	bf14      	ite	ne
 8012c2e:	2301      	movne	r3, #1
 8012c30:	2300      	moveq	r3, #0
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d005      	beq.n	8012c44 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8012c38:	482d      	ldr	r0, [pc, #180]	; (8012cf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8012c3a:	f7fb f89c 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8012c3e:	482b      	ldr	r0, [pc, #172]	; (8012cec <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012c40:	f00a fdbe 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>();
 8012c44:	4b2b      	ldr	r3, [pc, #172]	; (8012cf4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f3bf 8f5b 	dmb	ish
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bf0c      	ite	eq
 8012c54:	2301      	moveq	r3, #1
 8012c56:	2300      	movne	r3, #0
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d013      	beq.n	8012c86 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8012c5e:	4825      	ldr	r0, [pc, #148]	; (8012cf4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012c60:	f00a fda2 	bl	801d7a8 <__cxa_guard_acquire>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	bf14      	ite	ne
 8012c6a:	2301      	movne	r3, #1
 8012c6c:	2300      	moveq	r3, #0
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d008      	beq.n	8012c86 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8012c74:	4b20      	ldr	r3, [pc, #128]	; (8012cf8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8012c76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fb f8c6 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8012c80:	481c      	ldr	r0, [pc, #112]	; (8012cf4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012c82:	f00a fd9d 	bl	801d7c0 <__cxa_guard_release>
	static Matrix<4, 1> res;
 8012c86:	4b1d      	ldr	r3, [pc, #116]	; (8012cfc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f3bf 8f5b 	dmb	ish
 8012c8e:	f003 0301 	and.w	r3, r3, #1
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	bf0c      	ite	eq
 8012c96:	2301      	moveq	r3, #1
 8012c98:	2300      	movne	r3, #0
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d031      	beq.n	8012d04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012ca0:	4816      	ldr	r0, [pc, #88]	; (8012cfc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012ca2:	f00a fd81 	bl	801d7a8 <__cxa_guard_acquire>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	bf14      	ite	ne
 8012cac:	2301      	movne	r3, #1
 8012cae:	2300      	moveq	r3, #0
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d026      	beq.n	8012d04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012cb6:	4812      	ldr	r0, [pc, #72]	; (8012d00 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 8012cb8:	f7fb f993 	bl	800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8012cbc:	480f      	ldr	r0, [pc, #60]	; (8012cfc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012cbe:	f00a fd7f 	bl	801d7c0 <__cxa_guard_release>
 8012cc2:	e01f      	b.n	8012d04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012cc4:	240053bc 	.word	0x240053bc
 8012cc8:	240053b0 	.word	0x240053b0
 8012ccc:	240053cc 	.word	0x240053cc
 8012cd0:	240053c0 	.word	0x240053c0
 8012cd4:	24005400 	.word	0x24005400
 8012cd8:	240053d0 	.word	0x240053d0
 8012cdc:	24005434 	.word	0x24005434
 8012ce0:	24005404 	.word	0x24005404
 8012ce4:	2400545c 	.word	0x2400545c
 8012ce8:	24005438 	.word	0x24005438
 8012cec:	24005484 	.word	0x24005484
 8012cf0:	24005460 	.word	0x24005460
 8012cf4:	240054c8 	.word	0x240054c8
 8012cf8:	24005488 	.word	0x24005488
 8012cfc:	240054dc 	.word	0x240054dc
 8012d00:	240054cc 	.word	0x240054cc
	static Quaternion add;

	float gd = 1.0f / sqrt(acc(0,0)*acc(0,0) + acc(1,0)*acc(1,0) + acc(2,0)*acc(2,0));
 8012d04:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d08:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	2100      	movs	r1, #0
 8012d10:	6818      	ldr	r0, [r3, #0]
 8012d12:	f7fb fc20 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d16:	eeb0 8a40 	vmov.f32	s16, s0
 8012d1a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d1e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d22:	2200      	movs	r2, #0
 8012d24:	2100      	movs	r1, #0
 8012d26:	6818      	ldr	r0, [r3, #0]
 8012d28:	f7fb fc15 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d2c:	eef0 7a40 	vmov.f32	s15, s0
 8012d30:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012d34:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d38:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	2101      	movs	r1, #1
 8012d40:	6818      	ldr	r0, [r3, #0]
 8012d42:	f7fb fc08 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d46:	eef0 8a40 	vmov.f32	s17, s0
 8012d4a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d4e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d52:	2200      	movs	r2, #0
 8012d54:	2101      	movs	r1, #1
 8012d56:	6818      	ldr	r0, [r3, #0]
 8012d58:	f7fb fbfd 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d5c:	eef0 7a40 	vmov.f32	s15, s0
 8012d60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012d64:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012d68:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d6c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d70:	2200      	movs	r2, #0
 8012d72:	2102      	movs	r1, #2
 8012d74:	6818      	ldr	r0, [r3, #0]
 8012d76:	f7fb fbee 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d7a:	eef0 8a40 	vmov.f32	s17, s0
 8012d7e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d82:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d86:	2200      	movs	r2, #0
 8012d88:	2102      	movs	r1, #2
 8012d8a:	6818      	ldr	r0, [r3, #0]
 8012d8c:	f7fb fbe3 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d90:	eef0 7a40 	vmov.f32	s15, s0
 8012d94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012d98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8012da0:	f7fe f876 	bl	8010e90 <_ZSt4sqrtf>
 8012da4:	eeb0 7a40 	vmov.f32	s14, s0
 8012da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012db0:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c
	Z =
	{{
		acc(0,0)*gd,
 8012db4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012db8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	6818      	ldr	r0, [r3, #0]
 8012dc2:	f7fb fbc8 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8012dca:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012dce:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012dd2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012dd6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012dda:	edc3 7a00 	vstr	s15, [r3]
		acc(1,0)*gd,
 8012dde:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012de2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012de6:	2200      	movs	r2, #0
 8012de8:	2101      	movs	r1, #1
 8012dea:	6818      	ldr	r0, [r3, #0]
 8012dec:	f7fb fbb3 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012df0:	eeb0 7a40 	vmov.f32	s14, s0
 8012df4:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012df8:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012dfc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e00:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012e04:	edc3 7a01 	vstr	s15, [r3, #4]
		acc(2,0)*gd
 8012e08:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e0c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012e10:	2200      	movs	r2, #0
 8012e12:	2102      	movs	r1, #2
 8012e14:	6818      	ldr	r0, [r3, #0]
 8012e16:	f7fb fb9e 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012e1a:	eeb0 7a40 	vmov.f32	s14, s0
 8012e1e:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012e22:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012e26:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012e2e:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e32:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012e36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fb f809 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012e42:	49e6      	ldr	r1, [pc, #920]	; (80131dc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x740>)
 8012e44:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e48:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		gz2*(_X.x*_X.z - _X.w*_X.y),
 8012e54:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012e62:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e66:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e74:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	edd3 6a00 	vldr	s13, [r3]
 8012e82:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e86:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e98:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012e9c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ea0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012ea4:	edc3 7a00 	vstr	s15, [r3]
		gz2*(_X.w*_X.x + _X.y*_X.z),
 8012ea8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012eac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	ed93 7a00 	vldr	s14, [r3]
 8012eb6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012eba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8012ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ec8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ecc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	edd3 6a02 	vldr	s13, [r3, #8]
 8012ed6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012eda:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012eec:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012ef0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ef4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012ef8:	edc3 7a01 	vstr	s15, [r3, #4]
		gz2*(0.5f - _X.x*_X.x - _X.y*_X.y)
 8012efc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f00:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	ed93 7a01 	vldr	s14, [r3, #4]
 8012f0a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f0e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f24:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f28:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8012f32:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f36:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012f4c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012f54:	edc3 7a02 	vstr	s15, [r3, #8]
 8012f58:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8012f5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012f60:	4611      	mov	r1, r2
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fa ff76 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012f68:	499d      	ldr	r1, [pc, #628]	; (80131e0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x744>)
 8012f6a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f6e:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8012f72:	460b      	mov	r3, r1
 8012f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012f7a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f7e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8012f88:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012f90:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f94:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f98:	edc3 7a00 	vstr	s15, [r3]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012f9c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fa0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8012faa:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012fae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fb2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012fb6:	edc3 7a01 	vstr	s15, [r3, #4]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012fba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fbe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	edd3 7a00 	vldr	s15, [r3]
 8012fc8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012fd0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fd4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012fd8:	edc3 7a02 	vstr	s15, [r3, #8]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012fdc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fe0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8012fea:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012fee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ff2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012ff6:	edc3 7a03 	vstr	s15, [r3, #12]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8012ffa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ffe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	edd3 7a01 	vldr	s15, [r3, #4]
 8013008:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801300c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013010:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8013014:	edc3 7a04 	vstr	s15, [r3, #16]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8013018:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801301c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	edd3 7a00 	vldr	s15, [r3]
 8013026:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801302a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801302e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8013032:	edc3 7a05 	vstr	s15, [r3, #20]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8013036:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801303a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	edd3 7a03 	vldr	s15, [r3, #12]
 8013044:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8013048:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801304c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8013050:	edc3 7a06 	vstr	s15, [r3, #24]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8013054:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013058:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	edd3 7a02 	vldr	s15, [r3, #8]
 8013062:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8013066:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801306a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801306e:	edc3 7a07 	vstr	s15, [r3, #28]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8013072:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013076:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	edd3 7a00 	vldr	s15, [r3]
 8013080:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8013084:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013088:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801308c:	edc3 7a08 	vstr	s15, [r3, #32]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8013090:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013094:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	edd3 7a01 	vldr	s15, [r3, #4]
 801309e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80130a2:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 80130a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130aa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80130ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 80130b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80130c0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80130c4:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 80130c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130cc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80130d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 80130d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	edd3 7a03 	vldr	s15, [r3, #12]
 80130e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 80130e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130ea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80130ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80130f2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80130f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80130fa:	4611      	mov	r1, r2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 fab5 	bl	801366c <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 8013102:	4a38      	ldr	r2, [pc, #224]	; (80131e4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8013104:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013108:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801310c:	4614      	mov	r4, r2
 801310e:	461d      	mov	r5, r3
 8013110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013118:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801311c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 8013120:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013124:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f103 0210 	add.w	r2, r3, #16
 801312e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013132:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013136:	492b      	ldr	r1, [pc, #172]	; (80131e4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8013138:	4618      	mov	r0, r3
 801313a:	f000 faae 	bl	801369a <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801313e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013142:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013146:	4927      	ldr	r1, [pc, #156]	; (80131e4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8013148:	4618      	mov	r0, r3
 801314a:	f000 fab9 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 801314e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013152:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013156:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801315a:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801315e:	4618      	mov	r0, r3
 8013160:	f000 fade 	bl	8013720 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8013164:	4c20      	ldr	r4, [pc, #128]	; (80131e8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 8013166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801316a:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 801316e:	4a1f      	ldr	r2, [pc, #124]	; (80131ec <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x750>)
 8013170:	4618      	mov	r0, r3
 8013172:	f000 fae8 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 8013176:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801317a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801317e:	461d      	mov	r5, r3
 8013180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013188:	682b      	ldr	r3, [r5, #0]
 801318a:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 801318c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013190:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f103 0410 	add.w	r4, r3, #16
 801319a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801319e:	4911      	ldr	r1, [pc, #68]	; (80131e4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80131a0:	4618      	mov	r0, r3
 80131a2:	f000 fa8d 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80131a6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80131aa:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80131ae:	4621      	mov	r1, r4
 80131b0:	4618      	mov	r0, r3
 80131b2:	f000 fae1 	bl	8013778 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 80131b6:	480c      	ldr	r0, [pc, #48]	; (80131e8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 80131b8:	f7fd fea0 	bl	8010efc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80131bc:	4602      	mov	r2, r0
 80131be:	4c0c      	ldr	r4, [pc, #48]	; (80131f0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x754>)
 80131c0:	463b      	mov	r3, r7
 80131c2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80131c6:	4618      	mov	r0, r3
 80131c8:	f000 fae9 	bl	801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80131cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80131d0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80131d4:	461d      	mov	r5, r3
 80131d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131d8:	e00c      	b.n	80131f4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x758>
 80131da:	bf00      	nop
 80131dc:	240053b0 	.word	0x240053b0
 80131e0:	240053c0 	.word	0x240053c0
 80131e4:	240053d0 	.word	0x240053d0
 80131e8:	24005460 	.word	0x24005460
 80131ec:	24005438 	.word	0x24005438
 80131f0:	24005404 	.word	0x24005404
 80131f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80131fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 8013202:	4950      	ldr	r1, [pc, #320]	; (8013344 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8a8>)
 8013204:	4850      	ldr	r0, [pc, #320]	; (8013348 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8ac>)
 8013206:	f7fd fd0e 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 801320a:	eef0 6a40 	vmov.f32	s13, s0
 801320e:	eeb0 7a60 	vmov.f32	s14, s1
 8013212:	eef0 7a41 	vmov.f32	s15, s2
 8013216:	edc7 6a78 	vstr	s13, [r7, #480]	; 0x1e0
 801321a:	ed87 7a79 	vstr	s14, [r7, #484]	; 0x1e4
 801321e:	edc7 7a7a 	vstr	s15, [r7, #488]	; 0x1e8
 8013222:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8013226:	4619      	mov	r1, r3
 8013228:	4848      	ldr	r0, [pc, #288]	; (801334c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 801322a:	f000 facb 	bl	80137c4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801322e:	eeb0 6a40 	vmov.f32	s12, s0
 8013232:	eef0 6a60 	vmov.f32	s13, s1
 8013236:	eeb0 7a41 	vmov.f32	s14, s2
 801323a:	eef0 7a61 	vmov.f32	s15, s3
 801323e:	4b44      	ldr	r3, [pc, #272]	; (8013350 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8013240:	ed83 6a00 	vstr	s12, [r3]
 8013244:	edc3 6a01 	vstr	s13, [r3, #4]
 8013248:	ed83 7a02 	vstr	s14, [r3, #8]
 801324c:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8013250:	2200      	movs	r2, #0
 8013252:	2100      	movs	r1, #0
 8013254:	483e      	ldr	r0, [pc, #248]	; (8013350 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8013256:	f7fd fb77 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801325a:	4603      	mov	r3, r0
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4a3d      	ldr	r2, [pc, #244]	; (8013354 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013260:	6013      	str	r3, [r2, #0]
 8013262:	2200      	movs	r2, #0
 8013264:	2101      	movs	r1, #1
 8013266:	483a      	ldr	r0, [pc, #232]	; (8013350 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8013268:	f7fd fb6e 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801326c:	4603      	mov	r3, r0
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	4a38      	ldr	r2, [pc, #224]	; (8013354 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013272:	6053      	str	r3, [r2, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	2102      	movs	r1, #2
 8013278:	4835      	ldr	r0, [pc, #212]	; (8013350 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801327a:	f7fd fb65 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801327e:	4603      	mov	r3, r0
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	4a34      	ldr	r2, [pc, #208]	; (8013354 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013284:	6093      	str	r3, [r2, #8]
 8013286:	2200      	movs	r2, #0
 8013288:	2103      	movs	r1, #3
 801328a:	4831      	ldr	r0, [pc, #196]	; (8013350 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801328c:	f7fd fb5c 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8013290:	4603      	mov	r3, r0
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4a2f      	ldr	r2, [pc, #188]	; (8013354 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013296:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8013298:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801329c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80132a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80132aa:	681c      	ldr	r4, [r3, #0]
 80132ac:	4929      	ldr	r1, [pc, #164]	; (8013354 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 80132ae:	4610      	mov	r0, r2
 80132b0:	f006 faf1 	bl	8019896 <_ZNK3Mat10QuaternionplERKS0_>
 80132b4:	eeb0 6a40 	vmov.f32	s12, s0
 80132b8:	eef0 6a60 	vmov.f32	s13, s1
 80132bc:	eeb0 7a41 	vmov.f32	s14, s2
 80132c0:	eef0 7a61 	vmov.f32	s15, s3
 80132c4:	ed84 6a00 	vstr	s12, [r4]
 80132c8:	edc4 6a01 	vstr	s13, [r4, #4]
 80132cc:	ed84 7a02 	vstr	s14, [r4, #8]
 80132d0:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 80132d4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80132d8:	4a1f      	ldr	r2, [pc, #124]	; (8013358 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8bc>)
 80132da:	491c      	ldr	r1, [pc, #112]	; (801334c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 80132dc:	4618      	mov	r0, r3
 80132de:	f000 f96f 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80132e2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80132e6:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80132ea:	491c      	ldr	r1, [pc, #112]	; (801335c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8c0>)
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fc f8a2 	bl	800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 80132f2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80132f6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f103 0210 	add.w	r2, r3, #16
 8013300:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013304:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013308:	681c      	ldr	r4, [r3, #0]
 801330a:	463b      	mov	r3, r7
 801330c:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8013310:	4618      	mov	r0, r3
 8013312:	f7fb ff0d 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8013316:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801331a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801331e:	3410      	adds	r4, #16
 8013320:	461d      	mov	r5, r3
 8013322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801332a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801332c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801332e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013336:	bf00      	nop
 8013338:	f507 771c 	add.w	r7, r7, #624	; 0x270
 801333c:	46bd      	mov	sp, r7
 801333e:	ecbd 8b02 	vpop	{d8}
 8013342:	bdb0      	pop	{r4, r5, r7, pc}
 8013344:	240053c0 	.word	0x240053c0
 8013348:	240053b0 	.word	0x240053b0
 801334c:	24005404 	.word	0x24005404
 8013350:	240054cc 	.word	0x240054cc
 8013354:	240054e0 	.word	0x240054e0
 8013358:	240053d0 	.word	0x240053d0
 801335c:	24005488 	.word	0x24005488

08013360 <_ZNK10Algorithms10AHRSKalman7GetRollEv>:

float AHRSKalman::GetRoll() const
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
	float roll = atan2(2.0f * (_X.w * _X.x + _X.y * _X.z), _X.w * _X.w - _X.x * _X.x - _X.y * _X.y + _X.z * _X.z);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	ed93 7a00 	vldr	s14, [r3]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	edd3 7a01 	vldr	s15, [r3, #4]
 8013374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	edd3 6a02 	vldr	s13, [r3, #8]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	edd3 7a03 	vldr	s15, [r3, #12]
 8013384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013388:	ee77 7a27 	vadd.f32	s15, s14, s15
 801338c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	ed93 7a00 	vldr	s14, [r3]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	edd3 7a00 	vldr	s15, [r3]
 801339c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80133ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80133c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80133d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133dc:	eef0 0a67 	vmov.f32	s1, s15
 80133e0:	eeb0 0a46 	vmov.f32	s0, s12
 80133e4:	f7fd fd20 	bl	8010e28 <_ZSt5atan2ff>
 80133e8:	ed87 0a03 	vstr	s0, [r7, #12]
	return roll * 57.29578f;
 80133ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80133f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8013404 <_ZNK10Algorithms10AHRSKalman7GetRollEv+0xa4>
 80133f4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80133f8:	eeb0 0a67 	vmov.f32	s0, s15
 80133fc:	3710      	adds	r7, #16
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	42652ee1 	.word	0x42652ee1

08013408 <_ZNK10Algorithms10AHRSKalman8GetPitchEv>:

float AHRSKalman::GetPitch() const
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
	float pitch = -asin(2.0f * (_X.x * _X.z - _X.w * _X.y));
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	ed93 7a01 	vldr	s14, [r3, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	edd3 7a03 	vldr	s15, [r3, #12]
 801341c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	edd3 6a00 	vldr	s13, [r3]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	edd3 7a02 	vldr	s15, [r3, #8]
 801342c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013434:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013438:	eeb0 0a67 	vmov.f32	s0, s15
 801343c:	f7fd fce4 	bl	8010e08 <_ZSt4asinf>
 8013440:	eef0 7a40 	vmov.f32	s15, s0
 8013444:	eef1 7a67 	vneg.f32	s15, s15
 8013448:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch * 57.29578f;
 801344c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013450:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8013464 <_ZNK10Algorithms10AHRSKalman8GetPitchEv+0x5c>
 8013454:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8013458:	eeb0 0a67 	vmov.f32	s0, s15
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	42652ee1 	.word	0x42652ee1

08013468 <_ZNK10Algorithms10AHRSKalman6GetYawEv>:

float AHRSKalman::GetYaw() const
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
	float yaw = atan2(2.0f * (_X.x * _X.y + _X.w * _X.z), _X.w * _X.w + _X.x * _X.x - _X.y * _X.y - _X.z * _X.z);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	ed93 7a01 	vldr	s14, [r3, #4]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	edd3 7a02 	vldr	s15, [r3, #8]
 801347c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	edd3 6a00 	vldr	s13, [r3]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	edd3 7a03 	vldr	s15, [r3, #12]
 801348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013494:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	ed93 7a00 	vldr	s14, [r3]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	edd3 7a00 	vldr	s15, [r3]
 80134a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80134b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	edd3 6a02 	vldr	s13, [r3, #8]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80134c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80134dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134e4:	eef0 0a67 	vmov.f32	s1, s15
 80134e8:	eeb0 0a46 	vmov.f32	s0, s12
 80134ec:	f7fd fc9c 	bl	8010e28 <_ZSt5atan2ff>
 80134f0:	ed87 0a03 	vstr	s0, [r7, #12]
	return yaw * 57.29578f + 180.0f;
 80134f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80134f8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013514 <_ZNK10Algorithms10AHRSKalman6GetYawEv+0xac>
 80134fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013500:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013518 <_ZNK10Algorithms10AHRSKalman6GetYawEv+0xb0>
 8013504:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8013508:	eeb0 0a67 	vmov.f32	s0, s15
 801350c:	3710      	adds	r7, #16
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}
 8013512:	bf00      	nop
 8013514:	42652ee1 	.word	0x42652ee1
 8013518:	43340000 	.word	0x43340000

0801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013532:	b4b0      	push	{r4, r5, r7}
 8013534:	b083      	sub	sp, #12
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
 801353a:	6039      	str	r1, [r7, #0]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	4614      	mov	r4, r2
 8013542:	461d      	mov	r5, r3
 8013544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801354a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801354c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	bcb0      	pop	{r4, r5, r7}
 801355e:	4770      	bx	lr

08013560 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f000 f873 	bl	8013656 <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8013570:	2300      	movs	r3, #0
 8013572:	81fb      	strh	r3, [r7, #14]
 8013574:	e01c      	b.n	80135b0 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8013576:	2300      	movs	r3, #0
 8013578:	81bb      	strh	r3, [r7, #12]
 801357a:	e013      	b.n	80135a4 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 801357c:	89ba      	ldrh	r2, [r7, #12]
 801357e:	89fb      	ldrh	r3, [r7, #14]
 8013580:	4619      	mov	r1, r3
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f000 f94d 	bl	8013822 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 8013588:	4604      	mov	r4, r0
 801358a:	89fa      	ldrh	r2, [r7, #14]
 801358c:	89bb      	ldrh	r3, [r7, #12]
 801358e:	4619      	mov	r1, r3
 8013590:	6838      	ldr	r0, [r7, #0]
 8013592:	f000 f95d 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013596:	eef0 7a40 	vmov.f32	s15, s0
 801359a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 801359e:	89bb      	ldrh	r3, [r7, #12]
 80135a0:	3301      	adds	r3, #1
 80135a2:	81bb      	strh	r3, [r7, #12]
 80135a4:	89bb      	ldrh	r3, [r7, #12]
 80135a6:	2b03      	cmp	r3, #3
 80135a8:	d9e8      	bls.n	801357c <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 80135aa:	89fb      	ldrh	r3, [r7, #14]
 80135ac:	3301      	adds	r3, #1
 80135ae:	81fb      	strh	r3, [r7, #14]
 80135b0:	89fb      	ldrh	r3, [r7, #14]
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	d9df      	bls.n	8013576 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x16>
	return result;
 80135b6:	bf00      	nop
}
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	3714      	adds	r7, #20
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd90      	pop	{r4, r7, pc}

080135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80135cc:	68f8      	ldr	r0, [r7, #12]
 80135ce:	f7fa fb4e 	bl	800dc6e <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	6879      	ldr	r1, [r7, #4]
 80135d6:	68b8      	ldr	r0, [r7, #8]
 80135d8:	f000 f957 	bl	801388a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80135dc:	bf00      	nop
}
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <_ZNK3Mat6MatrixILt4ELt4EEmlEf>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator*(float val) const
 80135e6:	b5b0      	push	{r4, r5, r7, lr}
 80135e8:	b084      	sub	sp, #16
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	60f8      	str	r0, [r7, #12]
 80135ee:	60b9      	str	r1, [r7, #8]
 80135f0:	ed87 0a01 	vstr	s0, [r7, #4]
    Matrix<heigth, width> result = *this;
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	4614      	mov	r4, r2
 80135fa:	461d      	mov	r5, r3
 80135fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801360c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= val;
 8013610:	ed97 0a01 	vldr	s0, [r7, #4]
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f000 f9ec 	bl	80139f2 <_ZN3Mat6MatrixILt4ELt4EEmLEf>
	return result;
 801361a:	bf00      	nop
}
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	3710      	adds	r7, #16
 8013620:	46bd      	mov	sp, r7
 8013622:	bdb0      	pop	{r4, r5, r7, pc}

08013624 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013624:	b4b0      	push	{r4, r5, r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	6039      	str	r1, [r7, #0]
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	4614      	mov	r4, r2
 8013634:	461d      	mov	r5, r3
 8013636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801363a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801363c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801363e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	370c      	adds	r7, #12
 8013650:	46bd      	mov	sp, r7
 8013652:	bcb0      	pop	{r4, r5, r7}
 8013654:	4770      	bx	lr

08013656 <_ZN3Mat6MatrixILt3ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013656:	b480      	push	{r7}
 8013658:	b083      	sub	sp, #12
 801365a:	af00      	add	r7, sp, #0
 801365c:	6078      	str	r0, [r7, #4]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4618      	mov	r0, r3
 8013662:	370c      	adds	r7, #12
 8013664:	46bd      	mov	sp, r7
 8013666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366a:	4770      	bx	lr

0801366c <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801366c:	b4b0      	push	{r4, r5, r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	4614      	mov	r4, r2
 801367c:	461d      	mov	r5, r3
 801367e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801368a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	4618      	mov	r0, r3
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	bcb0      	pop	{r4, r5, r7}
 8013698:	4770      	bx	lr

0801369a <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801369a:	b580      	push	{r7, lr}
 801369c:	b084      	sub	sp, #16
 801369e:	af00      	add	r7, sp, #0
 80136a0:	60f8      	str	r0, [r7, #12]
 80136a2:	60b9      	str	r1, [r7, #8]
 80136a4:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff ffd5 	bl	8013656 <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	Multiply(other, result);
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	6879      	ldr	r1, [r7, #4]
 80136b0:	68b8      	ldr	r0, [r7, #8]
 80136b2:	f000 f9ca 	bl	8013a4a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 80136b6:	bf00      	nop
}
 80136b8:	68f8      	ldr	r0, [r7, #12]
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 80136c0:	b590      	push	{r4, r7, lr}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff ff26 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 80136d0:	2300      	movs	r3, #0
 80136d2:	81fb      	strh	r3, [r7, #14]
 80136d4:	e01c      	b.n	8013710 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80136d6:	2300      	movs	r3, #0
 80136d8:	81bb      	strh	r3, [r7, #12]
 80136da:	e013      	b.n	8013704 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80136dc:	89ba      	ldrh	r2, [r7, #12]
 80136de:	89fb      	ldrh	r3, [r7, #14]
 80136e0:	4619      	mov	r1, r3
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 fa65 	bl	8013bb2 <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 80136e8:	4604      	mov	r4, r0
 80136ea:	89fa      	ldrh	r2, [r7, #14]
 80136ec:	89bb      	ldrh	r3, [r7, #12]
 80136ee:	4619      	mov	r1, r3
 80136f0:	6838      	ldr	r0, [r7, #0]
 80136f2:	f000 fa77 	bl	8013be4 <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80136f6:	eef0 7a40 	vmov.f32	s15, s0
 80136fa:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 80136fe:	89bb      	ldrh	r3, [r7, #12]
 8013700:	3301      	adds	r3, #1
 8013702:	81bb      	strh	r3, [r7, #12]
 8013704:	89bb      	ldrh	r3, [r7, #12]
 8013706:	2b02      	cmp	r3, #2
 8013708:	d9e8      	bls.n	80136dc <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 801370a:	89fb      	ldrh	r3, [r7, #14]
 801370c:	3301      	adds	r3, #1
 801370e:	81fb      	strh	r3, [r7, #14]
 8013710:	89fb      	ldrh	r3, [r7, #14]
 8013712:	2b03      	cmp	r3, #3
 8013714:	d9df      	bls.n	80136d6 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x16>
	return result;
 8013716:	bf00      	nop
}
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	bd90      	pop	{r4, r7, pc}

08013720 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f7fa fb22 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	6879      	ldr	r1, [r7, #4]
 8013736:	68b8      	ldr	r0, [r7, #8]
 8013738:	f000 fa6f 	bl	8013c1a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 801373c:	bf00      	nop
}
 801373e:	68f8      	ldr	r0, [r7, #12]
 8013740:	3710      	adds	r7, #16
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 8013746:	b5b0      	push	{r4, r5, r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	60f8      	str	r0, [r7, #12]
 801374e:	60b9      	str	r1, [r7, #8]
 8013750:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	4614      	mov	r4, r2
 8013758:	461d      	mov	r5, r3
 801375a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801375c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801375e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013762:	682b      	ldr	r3, [r5, #0]
 8013764:	6023      	str	r3, [r4, #0]
	result += other;
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	68f8      	ldr	r0, [r7, #12]
 801376a:	f000 fb0a 	bl	8013d82 <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>
	return result;
 801376e:	bf00      	nop
}
 8013770:	68f8      	ldr	r0, [r7, #12]
 8013772:	3710      	adds	r7, #16
 8013774:	46bd      	mov	sp, r7
 8013776:	bdb0      	pop	{r4, r5, r7, pc}

08013778 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	60b9      	str	r1, [r7, #8]
 8013782:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7ff fec9 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	6879      	ldr	r1, [r7, #4]
 801378e:	68b8      	ldr	r0, [r7, #8]
 8013790:	f000 fb2c 	bl	8013dec <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 8013794:	bf00      	nop
}
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	3710      	adds	r7, #16
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801379e:	b580      	push	{r7, lr}
 80137a0:	b084      	sub	sp, #16
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	60f8      	str	r0, [r7, #12]
 80137a6:	60b9      	str	r1, [r7, #8]
 80137a8:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f7ff feb6 	bl	801351c <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 80137b0:	68fa      	ldr	r2, [r7, #12]
 80137b2:	6879      	ldr	r1, [r7, #4]
 80137b4:	68b8      	ldr	r0, [r7, #8]
 80137b6:	f000 fbcd 	bl	8013f54 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80137ba:	bf00      	nop
}
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	3710      	adds	r7, #16
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}

080137c4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80137c4:	b590      	push	{r4, r7, lr}
 80137c6:	b08f      	sub	sp, #60	; 0x3c
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6178      	str	r0, [r7, #20]
 80137cc:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 80137ce:	f107 0318 	add.w	r3, r7, #24
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fa fc05 	bl	800dfe2 <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 80137d8:	f107 0318 	add.w	r3, r7, #24
 80137dc:	461a      	mov	r2, r3
 80137de:	6939      	ldr	r1, [r7, #16]
 80137e0:	6978      	ldr	r0, [r7, #20]
 80137e2:	f000 fc6b 	bl	80140bc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 80137e6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80137ea:	f107 0318 	add.w	r3, r7, #24
 80137ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80137f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80137f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137fc:	ee06 0a10 	vmov	s12, r0
 8013800:	ee06 1a90 	vmov	s13, r1
 8013804:	ee07 2a10 	vmov	s14, r2
 8013808:	ee07 3a90 	vmov	s15, r3
}
 801380c:	eeb0 0a46 	vmov.f32	s0, s12
 8013810:	eef0 0a66 	vmov.f32	s1, s13
 8013814:	eeb0 1a47 	vmov.f32	s2, s14
 8013818:	eef0 1a67 	vmov.f32	s3, s15
 801381c:	373c      	adds	r7, #60	; 0x3c
 801381e:	46bd      	mov	sp, r7
 8013820:	bd90      	pop	{r4, r7, pc}

08013822 <_ZN3Mat6MatrixILt3ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	460b      	mov	r3, r1
 801382c:	807b      	strh	r3, [r7, #2]
 801382e:	4613      	mov	r3, r2
 8013830:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013832:	887b      	ldrh	r3, [r7, #2]
 8013834:	009a      	lsls	r2, r3, #2
 8013836:	883b      	ldrh	r3, [r7, #0]
 8013838:	4413      	add	r3, r2
 801383a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	68f9      	ldr	r1, [r7, #12]
 8013840:	4618      	mov	r0, r3
 8013842:	f000 fcef 	bl	8014224 <_ZNSt5arrayIfLj12EEixEj>
 8013846:	4603      	mov	r3, r0
}
 8013848:	4618      	mov	r0, r3
 801384a:	3710      	adds	r7, #16
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	807b      	strh	r3, [r7, #2]
 801385c:	4613      	mov	r3, r2
 801385e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013860:	887a      	ldrh	r2, [r7, #2]
 8013862:	4613      	mov	r3, r2
 8013864:	005b      	lsls	r3, r3, #1
 8013866:	441a      	add	r2, r3
 8013868:	883b      	ldrh	r3, [r7, #0]
 801386a:	4413      	add	r3, r2
 801386c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	68f9      	ldr	r1, [r7, #12]
 8013872:	4618      	mov	r0, r3
 8013874:	f000 fce5 	bl	8014242 <_ZNKSt5arrayIfLj12EEixEj>
 8013878:	4603      	mov	r3, r0
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	ee07 3a90 	vmov	s15, r3
}
 8013880:	eeb0 0a67 	vmov.f32	s0, s15
 8013884:	3710      	adds	r7, #16
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}

0801388a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 801388a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388c:	b0a1      	sub	sp, #132	; 0x84
 801388e:	af00      	add	r7, sp, #0
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	60b9      	str	r1, [r7, #8]
 8013894:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013896:	2300      	movs	r3, #0
 8013898:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801389c:	e02d      	b.n	80138fa <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801389e:	2300      	movs	r3, #0
 80138a0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80138a4:	e020      	b.n	80138e8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80138a6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80138aa:	f107 0314 	add.w	r3, r7, #20
 80138ae:	4611      	mov	r1, r2
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fcd5 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80138b6:	4602      	mov	r2, r0
 80138b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80138bc:	4619      	mov	r1, r3
 80138be:	4610      	mov	r0, r2
 80138c0:	f7fa fc7c 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 80138c4:	4604      	mov	r4, r0
 80138c6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80138ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80138ce:	4619      	mov	r1, r3
 80138d0:	68f8      	ldr	r0, [r7, #12]
 80138d2:	f7ff ffbd 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80138d6:	eef0 7a40 	vmov.f32	s15, s0
 80138da:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80138de:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80138e2:	3301      	adds	r3, #1
 80138e4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80138e8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80138ec:	2b02      	cmp	r3, #2
 80138ee:	d9da      	bls.n	80138a6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80138f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80138f4:	3301      	adds	r3, #1
 80138f6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80138fa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d9cd      	bls.n	801389e <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013902:	2300      	movs	r3, #0
 8013904:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013908:	e02d      	b.n	8013966 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 801390a:	2300      	movs	r3, #0
 801390c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013910:	e020      	b.n	8013954 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013912:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013916:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801391a:	4611      	mov	r1, r2
 801391c:	4618      	mov	r0, r3
 801391e:	f000 fc9f 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013922:	4602      	mov	r2, r0
 8013924:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013928:	4619      	mov	r1, r3
 801392a:	4610      	mov	r0, r2
 801392c:	f7fa fc46 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8013930:	4604      	mov	r4, r0
 8013932:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013936:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801393a:	4619      	mov	r1, r3
 801393c:	68b8      	ldr	r0, [r7, #8]
 801393e:	f000 f951 	bl	8013be4 <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8013942:	eef0 7a40 	vmov.f32	s15, s0
 8013946:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801394a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801394e:	3301      	adds	r3, #1
 8013950:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013954:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013958:	2b02      	cmp	r3, #2
 801395a:	d9da      	bls.n	8013912 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801395c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013960:	3301      	adds	r3, #1
 8013962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801396a:	2b03      	cmp	r3, #3
 801396c:	d9cd      	bls.n	801390a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801396e:	2300      	movs	r3, #0
 8013970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013974:	e034      	b.n	80139e0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013976:	2300      	movs	r3, #0
 8013978:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 801397c:	e027      	b.n	80139ce <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801397e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013982:	f107 0314 	add.w	r3, r7, #20
 8013986:	4611      	mov	r1, r2
 8013988:	4618      	mov	r0, r3
 801398a:	f000 fc69 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 801398e:	4605      	mov	r5, r0
 8013990:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013994:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013998:	4611      	mov	r1, r2
 801399a:	4618      	mov	r0, r3
 801399c:	f000 fc60 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80139a0:	4606      	mov	r6, r0
 80139a2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80139a6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80139aa:	4619      	mov	r1, r3
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f7fa fbb9 	bl	800e124 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 80139b2:	4604      	mov	r4, r0
 80139b4:	4631      	mov	r1, r6
 80139b6:	4628      	mov	r0, r5
 80139b8:	f7fa fde7 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80139bc:	eef0 7a40 	vmov.f32	s15, s0
 80139c0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80139c4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80139c8:	3301      	adds	r3, #1
 80139ca:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80139ce:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80139d2:	2b03      	cmp	r3, #3
 80139d4:	d9d3      	bls.n	801397e <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80139d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80139da:	3301      	adds	r3, #1
 80139dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80139e0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80139e4:	2b03      	cmp	r3, #3
 80139e6:	d9c6      	bls.n	8013976 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 80139e8:	bf00      	nop
 80139ea:	bf00      	nop
 80139ec:	3784      	adds	r7, #132	; 0x84
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080139f2 <_ZN3Mat6MatrixILt4ELt4EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 80139f2:	b580      	push	{r7, lr}
 80139f4:	b084      	sub	sp, #16
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 80139fe:	2300      	movs	r3, #0
 8013a00:	60fb      	str	r3, [r7, #12]
 8013a02:	e010      	b.n	8013a26 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x34>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	68f9      	ldr	r1, [r7, #12]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fa fd3e 	bl	800e48a <_ZNSt5arrayIfLj16EEixEj>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	ed93 7a00 	vldr	s14, [r3]
 8013a14:	edd7 7a00 	vldr	s15, [r7]
 8013a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a1c:	edc3 7a00 	vstr	s15, [r3]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	3301      	adds	r3, #1
 8013a24:	60fb      	str	r3, [r7, #12]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7fc fe8b 	bl	8010744 <_ZNKSt5arrayIfLj16EE4sizeEv>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	4293      	cmp	r3, r2
 8013a34:	bf34      	ite	cc
 8013a36:	2301      	movcc	r3, #1
 8013a38:	2300      	movcs	r3, #0
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1e1      	bne.n	8013a04 <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x12>
	return *this;
 8013a40:	687b      	ldr	r3, [r7, #4]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a4c:	b0a5      	sub	sp, #148	; 0x94
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	60b9      	str	r1, [r7, #8]
 8013a54:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013a56:	2300      	movs	r3, #0
 8013a58:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013a5c:	e02d      	b.n	8013aba <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013a5e:	2300      	movs	r3, #0
 8013a60:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013a64:	e020      	b.n	8013aa8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013a66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013a6a:	f107 0314 	add.w	r3, r7, #20
 8013a6e:	4611      	mov	r1, r2
 8013a70:	4618      	mov	r0, r3
 8013a72:	f000 fc04 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013a76:	4602      	mov	r2, r0
 8013a78:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	4610      	mov	r0, r2
 8013a80:	f7fc fb1c 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013a84:	4604      	mov	r4, r0
 8013a86:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013a8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013a8e:	4619      	mov	r1, r3
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f000 f8a7 	bl	8013be4 <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8013a96:	eef0 7a40 	vmov.f32	s15, s0
 8013a9a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013a9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013aa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013aac:	2b03      	cmp	r3, #3
 8013aae:	d9da      	bls.n	8013a66 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013ab0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013aba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	d9cd      	bls.n	8013a5e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013ac8:	e02d      	b.n	8013b26 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013aca:	2300      	movs	r3, #0
 8013acc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013ad0:	e020      	b.n	8013b14 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013ad2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013ad6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ada:	4611      	mov	r1, r2
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fc fde0 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4610      	mov	r0, r2
 8013aec:	f7fc fae6 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013af0:	4604      	mov	r4, r0
 8013af2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013af6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013afa:	4619      	mov	r1, r3
 8013afc:	68b8      	ldr	r0, [r7, #8]
 8013afe:	f7fb fe32 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8013b02:	eef0 7a40 	vmov.f32	s15, s0
 8013b06:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013b0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013b0e:	3301      	adds	r3, #1
 8013b10:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013b14:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013b18:	2b03      	cmp	r3, #3
 8013b1a:	d9da      	bls.n	8013ad2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013b1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013b20:	3301      	adds	r3, #1
 8013b22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013b26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d9cd      	bls.n	8013aca <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013b2e:	2300      	movs	r3, #0
 8013b30:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013b34:	e034      	b.n	8013ba0 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013b36:	2300      	movs	r3, #0
 8013b38:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013b3c:	e027      	b.n	8013b8e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013b3e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8013b42:	f107 0314 	add.w	r3, r7, #20
 8013b46:	4611      	mov	r1, r2
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f000 fb98 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013b4e:	4605      	mov	r5, r0
 8013b50:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013b54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b58:	4611      	mov	r1, r2
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fc fda1 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013b60:	4606      	mov	r6, r0
 8013b62:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013b66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f7ff fe58 	bl	8013822 <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 8013b72:	4604      	mov	r4, r0
 8013b74:	4631      	mov	r1, r6
 8013b76:	4628      	mov	r0, r5
 8013b78:	f7fc fda2 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8013b7c:	eef0 7a40 	vmov.f32	s15, s0
 8013b80:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013b84:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013b88:	3301      	adds	r3, #1
 8013b8a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013b8e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013b92:	2b03      	cmp	r3, #3
 8013b94:	d9d3      	bls.n	8013b3e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013b96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013ba4:	2b02      	cmp	r3, #2
 8013ba6:	d9c6      	bls.n	8013b36 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013ba8:	bf00      	nop
 8013baa:	bf00      	nop
 8013bac:	3794      	adds	r7, #148	; 0x94
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bb2 <_ZN3Mat6MatrixILt4ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8013bb2:	b580      	push	{r7, lr}
 8013bb4:	b084      	sub	sp, #16
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
 8013bba:	460b      	mov	r3, r1
 8013bbc:	807b      	strh	r3, [r7, #2]
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013bc2:	887a      	ldrh	r2, [r7, #2]
 8013bc4:	4613      	mov	r3, r2
 8013bc6:	005b      	lsls	r3, r3, #1
 8013bc8:	441a      	add	r2, r3
 8013bca:	883b      	ldrh	r3, [r7, #0]
 8013bcc:	4413      	add	r3, r2
 8013bce:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	68f9      	ldr	r1, [r7, #12]
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f000 fb25 	bl	8014224 <_ZNSt5arrayIfLj12EEixEj>
 8013bda:	4603      	mov	r3, r0
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3710      	adds	r7, #16
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_ZNK3Mat6MatrixILt3ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	460b      	mov	r3, r1
 8013bee:	807b      	strh	r3, [r7, #2]
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8013bf4:	887b      	ldrh	r3, [r7, #2]
 8013bf6:	009a      	lsls	r2, r3, #2
 8013bf8:	883b      	ldrh	r3, [r7, #0]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	68f9      	ldr	r1, [r7, #12]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f000 fb1d 	bl	8014242 <_ZNKSt5arrayIfLj12EEixEj>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	ee07 3a90 	vmov	s15, r3
}
 8013c10:	eeb0 0a67 	vmov.f32	s0, s15
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c1c:	b0a1      	sub	sp, #132	; 0x84
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	60f8      	str	r0, [r7, #12]
 8013c22:	60b9      	str	r1, [r7, #8]
 8013c24:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013c26:	2300      	movs	r3, #0
 8013c28:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8013c2c:	e02d      	b.n	8013c8a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013c2e:	2300      	movs	r3, #0
 8013c30:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8013c34:	e020      	b.n	8013c78 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013c36:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8013c3a:	f107 0314 	add.w	r3, r7, #20
 8013c3e:	4611      	mov	r1, r2
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 fb1c 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013c46:	4602      	mov	r2, r0
 8013c48:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	4610      	mov	r0, r2
 8013c50:	f7fc fa34 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013c54:	4604      	mov	r4, r0
 8013c56:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013c5a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013c5e:	4619      	mov	r1, r3
 8013c60:	68f8      	ldr	r0, [r7, #12]
 8013c62:	f7ff ffbf 	bl	8013be4 <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 8013c66:	eef0 7a40 	vmov.f32	s15, s0
 8013c6a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013c6e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8013c72:	3301      	adds	r3, #1
 8013c74:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8013c78:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8013c7c:	2b03      	cmp	r3, #3
 8013c7e:	d9da      	bls.n	8013c36 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013c80:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013c84:	3301      	adds	r3, #1
 8013c86:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8013c8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013c8e:	2b02      	cmp	r3, #2
 8013c90:	d9cd      	bls.n	8013c2e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013c92:	2300      	movs	r3, #0
 8013c94:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013c98:	e02d      	b.n	8013cf6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013ca0:	e020      	b.n	8013ce4 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013ca2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013ca6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013caa:	4611      	mov	r1, r2
 8013cac:	4618      	mov	r0, r3
 8013cae:	f000 fae6 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013cb8:	4619      	mov	r1, r3
 8013cba:	4610      	mov	r0, r2
 8013cbc:	f7fc f9fe 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013cc6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013cca:	4619      	mov	r1, r3
 8013ccc:	68b8      	ldr	r0, [r7, #8]
 8013cce:	f7ff fdbf 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013cd2:	eef0 7a40 	vmov.f32	s15, s0
 8013cd6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013cda:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013cde:	3301      	adds	r3, #1
 8013ce0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013ce4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013ce8:	2b03      	cmp	r3, #3
 8013cea:	d9da      	bls.n	8013ca2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013cec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013cf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013cfa:	2b02      	cmp	r3, #2
 8013cfc:	d9cd      	bls.n	8013c9a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013cfe:	2300      	movs	r3, #0
 8013d00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013d04:	e034      	b.n	8013d70 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013d06:	2300      	movs	r3, #0
 8013d08:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013d0c:	e027      	b.n	8013d5e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013d12:	f107 0314 	add.w	r3, r7, #20
 8013d16:	4611      	mov	r1, r2
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f000 fab0 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013d1e:	4605      	mov	r5, r0
 8013d20:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013d24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f000 faa7 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013d30:	4606      	mov	r6, r0
 8013d32:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013d36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f7fa f99d 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8013d42:	4604      	mov	r4, r0
 8013d44:	4631      	mov	r1, r6
 8013d46:	4628      	mov	r0, r5
 8013d48:	f7fc fcba 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8013d4c:	eef0 7a40 	vmov.f32	s15, s0
 8013d50:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013d54:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013d58:	3301      	adds	r3, #1
 8013d5a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013d5e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013d62:	2b02      	cmp	r3, #2
 8013d64:	d9d3      	bls.n	8013d0e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013d66:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013d70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013d74:	2b02      	cmp	r3, #2
 8013d76:	d9c6      	bls.n	8013d06 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013d78:	bf00      	nop
 8013d7a:	bf00      	nop
 8013d7c:	3784      	adds	r7, #132	; 0x84
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d82 <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 8013d82:	b580      	push	{r7, lr}
 8013d84:	ed2d 8b02 	vpush	{d8}
 8013d88:	b084      	sub	sp, #16
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	6078      	str	r0, [r7, #4]
 8013d8e:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 8013d90:	2300      	movs	r3, #0
 8013d92:	60fb      	str	r3, [r7, #12]
 8013d94:	e016      	b.n	8013dc4 <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x42>
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	68f9      	ldr	r1, [r7, #12]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7fa fc97 	bl	800e6ce <_ZNKSt5arrayIfLj9EEixEj>
 8013da0:	4603      	mov	r3, r0
 8013da2:	ed93 8a00 	vldr	s16, [r3]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	68f9      	ldr	r1, [r7, #12]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fa fb1a 	bl	800e3e4 <_ZNSt5arrayIfLj9EEixEj>
 8013db0:	4603      	mov	r3, r0
 8013db2:	edd3 7a00 	vldr	s15, [r3]
 8013db6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013dba:	edc3 7a00 	vstr	s15, [r3]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	60fb      	str	r3, [r7, #12]
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f000 fa68 	bl	801429c <_ZNKSt5arrayIfLj9EE4sizeEv>
 8013dcc:	4602      	mov	r2, r0
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	bf34      	ite	cc
 8013dd4:	2301      	movcc	r3, #1
 8013dd6:	2300      	movcs	r3, #0
 8013dd8:	b2db      	uxtb	r3, r3
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1db      	bne.n	8013d96 <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x14>
	return *this;
 8013dde:	687b      	ldr	r3, [r7, #4]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3710      	adds	r7, #16
 8013de4:	46bd      	mov	sp, r7
 8013de6:	ecbd 8b02 	vpop	{d8}
 8013dea:	bd80      	pop	{r7, pc}

08013dec <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dee:	b0a5      	sub	sp, #148	; 0x94
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	60b9      	str	r1, [r7, #8]
 8013df6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013dfe:	e02d      	b.n	8013e5c <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8013e00:	2300      	movs	r3, #0
 8013e02:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013e06:	e020      	b.n	8013e4a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013e08:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013e0c:	f107 0314 	add.w	r3, r7, #20
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fc fc45 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013e18:	4602      	mov	r2, r0
 8013e1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013e1e:	4619      	mov	r1, r3
 8013e20:	4610      	mov	r0, r2
 8013e22:	f7fc f94b 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013e26:	4604      	mov	r4, r0
 8013e28:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013e2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013e30:	4619      	mov	r1, r3
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f7fb fc97 	bl	800f766 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8013e38:	eef0 7a40 	vmov.f32	s15, s0
 8013e3c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013e40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013e44:	3301      	adds	r3, #1
 8013e46:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013e4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013e4e:	2b03      	cmp	r3, #3
 8013e50:	d9da      	bls.n	8013e08 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013e52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013e56:	3301      	adds	r3, #1
 8013e58:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013e5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013e60:	2b03      	cmp	r3, #3
 8013e62:	d9cd      	bls.n	8013e00 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013e64:	2300      	movs	r3, #0
 8013e66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013e6a:	e02d      	b.n	8013ec8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013e72:	e020      	b.n	8013eb6 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8013e74:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013e78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e7c:	4611      	mov	r1, r2
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f000 f9fd 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013e84:	4602      	mov	r2, r0
 8013e86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	4610      	mov	r0, r2
 8013e8e:	f7fc f915 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8013e92:	4604      	mov	r4, r0
 8013e94:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013e98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	68b8      	ldr	r0, [r7, #8]
 8013ea0:	f7ff fcd6 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013ea4:	eef0 7a40 	vmov.f32	s15, s0
 8013ea8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013eac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013eb6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	d9da      	bls.n	8013e74 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013ebe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013ec8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013ecc:	2b02      	cmp	r3, #2
 8013ece:	d9cd      	bls.n	8013e6c <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013ed6:	e034      	b.n	8013f42 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013ed8:	2300      	movs	r3, #0
 8013eda:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013ede:	e027      	b.n	8013f30 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013ee0:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8013ee4:	f107 0314 	add.w	r3, r7, #20
 8013ee8:	4611      	mov	r1, r2
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fc fbd9 	bl	80106a2 <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013ef6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013efa:	4611      	mov	r1, r2
 8013efc:	4618      	mov	r0, r3
 8013efe:	f000 f9be 	bl	801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013f02:	4606      	mov	r6, r0
 8013f04:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013f08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013f0c:	4619      	mov	r1, r3
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff fe4f 	bl	8013bb2 <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 8013f14:	4604      	mov	r4, r0
 8013f16:	4631      	mov	r1, r6
 8013f18:	4628      	mov	r0, r5
 8013f1a:	f7fc fbd1 	bl	80106c0 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8013f1e:	eef0 7a40 	vmov.f32	s15, s0
 8013f22:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013f26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013f30:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d9d3      	bls.n	8013ee0 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013f38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013f42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013f46:	2b03      	cmp	r3, #3
 8013f48:	d9c6      	bls.n	8013ed8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 8013f4a:	bf00      	nop
 8013f4c:	bf00      	nop
 8013f4e:	3794      	adds	r7, #148	; 0x94
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f54 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f56:	b09d      	sub	sp, #116	; 0x74
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013f60:	2300      	movs	r3, #0
 8013f62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8013f66:	e02d      	b.n	8013fc4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013f68:	2300      	movs	r3, #0
 8013f6a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8013f6e:	e020      	b.n	8013fb2 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013f70:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8013f74:	f107 0310 	add.w	r3, r7, #16
 8013f78:	4611      	mov	r1, r2
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 f970 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013f80:	4602      	mov	r2, r0
 8013f82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013f86:	4619      	mov	r1, r3
 8013f88:	4610      	mov	r0, r2
 8013f8a:	f7fa f917 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8013f8e:	4604      	mov	r4, r0
 8013f90:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8013f94:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013f98:	4619      	mov	r1, r3
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f7ff fc58 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013fa0:	eef0 7a40 	vmov.f32	s15, s0
 8013fa4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013fa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013fac:	3301      	adds	r3, #1
 8013fae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8013fb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d9da      	bls.n	8013f70 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013fba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8013fc4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013fc8:	2b03      	cmp	r3, #3
 8013fca:	d9cd      	bls.n	8013f68 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8013fd2:	e02d      	b.n	8014030 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8013fda:	e020      	b.n	801401e <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013fdc:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8013fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fa fa7a 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8013fec:	4602      	mov	r2, r0
 8013fee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	f7fa f8e1 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8014000:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014004:	4619      	mov	r1, r3
 8014006:	68b8      	ldr	r0, [r7, #8]
 8014008:	f7fa fa79 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801400c:	eef0 7a40 	vmov.f32	s15, s0
 8014010:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8014014:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014018:	3301      	adds	r3, #1
 801401a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801401e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8014022:	2b02      	cmp	r3, #2
 8014024:	d9da      	bls.n	8013fdc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8014026:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801402a:	3301      	adds	r3, #1
 801402c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8014030:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8014034:	2b02      	cmp	r3, #2
 8014036:	d9cd      	bls.n	8013fd4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8014038:	2300      	movs	r3, #0
 801403a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801403e:	e034      	b.n	80140aa <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8014040:	2300      	movs	r3, #0
 8014042:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8014046:	e027      	b.n	8014098 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8014048:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 801404c:	f107 0310 	add.w	r3, r7, #16
 8014050:	4611      	mov	r1, r2
 8014052:	4618      	mov	r0, r3
 8014054:	f000 f904 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8014058:	4605      	mov	r5, r0
 801405a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 801405e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014062:	4611      	mov	r1, r2
 8014064:	4618      	mov	r0, r3
 8014066:	f7fa fa3b 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 801406a:	4606      	mov	r6, r0
 801406c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8014070:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8014074:	4619      	mov	r1, r3
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff fd9b 	bl	8013bb2 <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 801407c:	4604      	mov	r4, r0
 801407e:	4631      	mov	r1, r6
 8014080:	4628      	mov	r0, r5
 8014082:	f7fa fa82 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8014086:	eef0 7a40 	vmov.f32	s15, s0
 801408a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801408e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8014092:	3301      	adds	r3, #1
 8014094:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8014098:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801409c:	2b02      	cmp	r3, #2
 801409e:	d9d3      	bls.n	8014048 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80140a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80140a4:	3301      	adds	r3, #1
 80140a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80140aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80140ae:	2b03      	cmp	r3, #3
 80140b0:	d9c6      	bls.n	8014040 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 80140b2:	bf00      	nop
 80140b4:	bf00      	nop
 80140b6:	3774      	adds	r7, #116	; 0x74
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080140bc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80140bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140be:	b097      	sub	sp, #92	; 0x5c
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80140c8:	2300      	movs	r3, #0
 80140ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80140ce:	e02d      	b.n	801412c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80140d0:	2300      	movs	r3, #0
 80140d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80140d6:	e020      	b.n	801411a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80140d8:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80140dc:	f107 0310 	add.w	r3, r7, #16
 80140e0:	4611      	mov	r1, r2
 80140e2:	4618      	mov	r0, r3
 80140e4:	f000 f8bc 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80140e8:	4602      	mov	r2, r0
 80140ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80140ee:	4619      	mov	r1, r3
 80140f0:	4610      	mov	r0, r2
 80140f2:	f7fa f863 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 80140f6:	4604      	mov	r4, r0
 80140f8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80140fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014100:	4619      	mov	r1, r3
 8014102:	68f8      	ldr	r0, [r7, #12]
 8014104:	f7ff fba4 	bl	8013850 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8014108:	eef0 7a40 	vmov.f32	s15, s0
 801410c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8014110:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8014114:	3301      	adds	r3, #1
 8014116:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801411a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801411e:	2b02      	cmp	r3, #2
 8014120:	d9da      	bls.n	80140d8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8014122:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014126:	3301      	adds	r3, #1
 8014128:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801412c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014130:	2b03      	cmp	r3, #3
 8014132:	d9cd      	bls.n	80140d0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8014134:	2300      	movs	r3, #0
 8014136:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801413a:	e02d      	b.n	8014198 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 801413c:	2300      	movs	r3, #0
 801413e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8014142:	e020      	b.n	8014186 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8014144:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8014148:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801414c:	4611      	mov	r1, r2
 801414e:	4618      	mov	r0, r3
 8014150:	f7fa f9f2 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8014154:	4602      	mov	r2, r0
 8014156:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801415a:	4619      	mov	r1, r3
 801415c:	4610      	mov	r0, r2
 801415e:	f7fa f82d 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8014162:	4604      	mov	r4, r0
 8014164:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8014168:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801416c:	4619      	mov	r1, r3
 801416e:	68b8      	ldr	r0, [r7, #8]
 8014170:	f7fa f9f1 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014174:	eef0 7a40 	vmov.f32	s15, s0
 8014178:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801417c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8014180:	3301      	adds	r3, #1
 8014182:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8014186:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801418a:	2b02      	cmp	r3, #2
 801418c:	d9da      	bls.n	8014144 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801418e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8014192:	3301      	adds	r3, #1
 8014194:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8014198:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801419c:	2b00      	cmp	r3, #0
 801419e:	d0cd      	beq.n	801413c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80141a0:	2300      	movs	r3, #0
 80141a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80141a6:	e034      	b.n	8014212 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80141a8:	2300      	movs	r3, #0
 80141aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80141ae:	e027      	b.n	8014200 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80141b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80141b4:	f107 0310 	add.w	r3, r7, #16
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f000 f850 	bl	8014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80141c0:	4605      	mov	r5, r0
 80141c2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80141c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80141ca:	4611      	mov	r1, r2
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fa f9b3 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 80141d2:	4606      	mov	r6, r0
 80141d4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80141d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80141dc:	4619      	mov	r1, r3
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f7fc fbb2 	bl	8010948 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80141e4:	4604      	mov	r4, r0
 80141e6:	4631      	mov	r1, r6
 80141e8:	4628      	mov	r0, r5
 80141ea:	f7fa f9ce 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80141ee:	eef0 7a40 	vmov.f32	s15, s0
 80141f2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80141f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80141fa:	3301      	adds	r3, #1
 80141fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014200:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014204:	2b00      	cmp	r3, #0
 8014206:	d0d3      	beq.n	80141b0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8014208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801420c:	3301      	adds	r3, #1
 801420e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014212:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014216:	2b03      	cmp	r3, #3
 8014218:	d9c6      	bls.n	80141a8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 801421a:	bf00      	nop
 801421c:	bf00      	nop
 801421e:	375c      	adds	r7, #92	; 0x5c
 8014220:	46bd      	mov	sp, r7
 8014222:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014224 <_ZNSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) noexcept
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6839      	ldr	r1, [r7, #0]
 8014232:	4618      	mov	r0, r3
 8014234:	f000 f83d 	bl	80142b2 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8014238:	4603      	mov	r3, r0
      }
 801423a:	4618      	mov	r0, r3
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 8014242:	b580      	push	{r7, lr}
 8014244:	b082      	sub	sp, #8
 8014246:	af00      	add	r7, sp, #0
 8014248:	6078      	str	r0, [r7, #4]
 801424a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f82e 	bl	80142b2 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8014256:	4603      	mov	r3, r0
      }
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6839      	ldr	r1, [r7, #0]
 801426e:	4618      	mov	r0, r3
 8014270:	f000 f82e 	bl	80142d0 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8014274:	4603      	mov	r3, r0
      }
 8014276:	4618      	mov	r0, r3
 8014278:	3708      	adds	r7, #8
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}

0801427e <_ZNSt5arrayIS_IfLj4EELj3EEixEj>:
      operator[](size_type __n) noexcept
 801427e:	b580      	push	{r7, lr}
 8014280:	b082      	sub	sp, #8
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	4618      	mov	r0, r3
 801428e:	f000 f831 	bl	80142f4 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>
 8014292:	4603      	mov	r3, r0
      }
 8014294:	4618      	mov	r0, r3
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <_ZNKSt5arrayIfLj9EE4sizeEv>:
      size() const noexcept { return _Nm; }
 801429c:	b480      	push	{r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	2309      	movs	r3, #9
 80142a6:	4618      	mov	r0, r3
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr

080142b2 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80142b2:	b480      	push	{r7}
 80142b4:	b083      	sub	sp, #12
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
 80142ba:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	687a      	ldr	r2, [r7, #4]
 80142c2:	4413      	add	r3, r2
 80142c4:	4618      	mov	r0, r3
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80142da:	683a      	ldr	r2, [r7, #0]
 80142dc:	4613      	mov	r3, r2
 80142de:	005b      	lsls	r3, r3, #1
 80142e0:	4413      	add	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	4413      	add	r3, r2
 80142e8:	4618      	mov	r0, r3
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr

080142f4 <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	011b      	lsls	r3, r3, #4
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	4413      	add	r3, r2
 8014306:	4618      	mov	r0, r3
 8014308:	370c      	adds	r7, #12
 801430a:	46bd      	mov	sp, r7
 801430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014310:	4770      	bx	lr

08014312 <_ZNK10Algorithms14OrientationEKF2_hEv>:
	//Prediction step
	virtual StateVec _f(const ControlVec& controlVec, float time) const override;
	virtual StateCovarianceMatrix _F(const ControlVec& controlVec, float time) const override;
	virtual StateCovarianceMatrix _Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const override;
	//Correction step
	virtual MeassurementVec _h() const override {return MeassurementVec{-1.0f};} //not used
 8014312:	b580      	push	{r7, lr}
 8014314:	b082      	sub	sp, #8
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
 801431a:	6039      	str	r1, [r7, #0]
 801431c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f002 f89d 	bl	8016460 <_ZN3Mat8V_VectorILt6EEC1Ef>
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <_ZNK10Algorithms14OrientationEKF2_HEv>:
	virtual Matrix<OrientationEKF_meassurementLen, OrientationEKF_stateLen> _H() const override {return Matrix<OrientationEKF_meassurementLen, OrientationEKF_stateLen>{-1.0f};}//not used
 801432e:	b580      	push	{r7, lr}
 8014330:	b082      	sub	sp, #8
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	6039      	str	r1, [r7, #0]
 8014338:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f002 f8af 	bl	80164a0 <_ZN3Mat6MatrixILt6ELt4EEC1Ef>
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}

0801434a <_ZNK10Algorithms14OrientationEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:
	virtual MeasurementCovarianceMatrix _InvertMatrix(const MeasurementCovarianceMatrix& matrix) const override {return MeasurementCovarianceMatrix{-1.0f};} //not used
 801434a:	b580      	push	{r7, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
 8014350:	60f8      	str	r0, [r7, #12]
 8014352:	60b9      	str	r1, [r7, #8]
 8014354:	607a      	str	r2, [r7, #4]
 8014356:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7f9 fc5d 	bl	800dc1a <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	3710      	adds	r7, #16
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <_ZN12_GLOBAL__N_13sgnEf>:
#include <math.h>

namespace
{
	float sgn(float val)
	{
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	ed87 0a01 	vstr	s0, [r7, #4]
		return ((0.0f < val) - (0.0f > val));
 8014372:	edd7 7a01 	vldr	s15, [r7, #4]
 8014376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437e:	bfcc      	ite	gt
 8014380:	2301      	movgt	r3, #1
 8014382:	2300      	movle	r3, #0
 8014384:	b2db      	uxtb	r3, r3
 8014386:	461a      	mov	r2, r3
 8014388:	edd7 7a01 	vldr	s15, [r7, #4]
 801438c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014394:	bf4c      	ite	mi
 8014396:	2301      	movmi	r3, #1
 8014398:	2300      	movpl	r3, #0
 801439a:	b2db      	uxtb	r3, r3
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	ee07 3a90 	vmov	s15, r3
 80143a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 80143a6:	eeb0 0a67 	vmov.f32	s0, s15
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr

080143b4 <_ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
const V_Vector<3> _r{{0.0f, cos(magDip), -sin(magDip)}};
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};

void OrientationEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b086      	sub	sp, #24
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	607a      	str	r2, [r7, #4]
 80143c0:	ed87 0a00 	vstr	s0, [r7]
	float norm_1 = 1.0f / _state.Norm();
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	3304      	adds	r3, #4
 80143c8:	4618      	mov	r0, r3
 80143ca:	f002 f902 	bl	80165d2 <_ZNK3Mat8V_VectorILt4EE4NormEv>
 80143ce:	eeb0 7a40 	vmov.f32	s14, s0
 80143d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80143da:	edc7 7a05 	vstr	s15, [r7, #20]
	_state*= norm_1;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3304      	adds	r3, #4
 80143e2:	ed97 0a05 	vldr	s0, [r7, #20]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f002 f917 	bl	801661a <_ZN3Mat6MatrixILt4ELt1EEmLEf>
	_UpdateAcc(meassurementVec, meassurementCov);
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	68b9      	ldr	r1, [r7, #8]
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 fa07 	bl	8014804 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_UpdateMag(meassurementVec, meassurementCov);
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	68b9      	ldr	r1, [r7, #8]
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	f000 fd7a 	bl	8014ef4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_time = time;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	683a      	ldr	r2, [r7, #0]
 8014404:	655a      	str	r2, [r3, #84]	; 0x54
}
 8014406:	bf00      	nop
 8014408:	3718      	adds	r7, #24
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}

0801440e <_ZN10Algorithms14OrientationEKF10InitialiseERKN3Mat6MatrixILt3ELt1EEES5_f>:

void OrientationEKF::Initialise(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 801440e:	b5b0      	push	{r4, r5, r7, lr}
 8014410:	ed2d 8b02 	vpush	{d8}
 8014414:	b0a4      	sub	sp, #144	; 0x90
 8014416:	af00      	add	r7, sp, #0
 8014418:	64f8      	str	r0, [r7, #76]	; 0x4c
 801441a:	64b9      	str	r1, [r7, #72]	; 0x48
 801441c:	647a      	str	r2, [r7, #68]	; 0x44
 801441e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 8014422:	2200      	movs	r2, #0
 8014424:	2100      	movs	r1, #0
 8014426:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014428:	f7fa f895 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801442c:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
 8014430:	2200      	movs	r2, #0
 8014432:	2101      	movs	r1, #1
 8014434:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014436:	f7fa f88e 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801443a:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
 801443e:	2200      	movs	r2, #0
 8014440:	2102      	movs	r1, #2
 8014442:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014444:	f7fa f887 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014448:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 801444c:	2200      	movs	r2, #0
 801444e:	2100      	movs	r1, #0
 8014450:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014452:	f7fa f880 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014456:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
 801445a:	2200      	movs	r2, #0
 801445c:	2101      	movs	r1, #1
 801445e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014460:	f7fa f879 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014464:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
 8014468:	2200      	movs	r2, #0
 801446a:	2102      	movs	r1, #2
 801446c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801446e:	f7fa f872 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014472:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78

	float amx{ay*mz - az*my};
 8014476:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 801447a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801447e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014482:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8014486:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 801448a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801448e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014492:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float amy{az*mx - ax*mz};
 8014496:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 801449a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801449e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80144a6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80144aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144b2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float amz{ax*my - ay*mx};
 80144b6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80144ba:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80144be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144c2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80144c6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80144ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144d2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	float amax{amy*az - amz*ay};
 80144d6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80144da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80144de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144e2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80144e6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80144ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144f2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float amay{amz*ax - amx*az};
 80144f6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80144fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80144fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014502:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8014506:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801450a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801450e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014512:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float amaz{amx*ay - amy*ax};
 8014516:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801451a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801451e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014522:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8014526:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801452a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801452e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014532:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 8014536:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801453a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801453e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014542:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014546:	ee37 7a27 	vadd.f32	s14, s14, s15
 801454a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801454e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014556:	eeb0 0a67 	vmov.f32	s0, s15
 801455a:	f7fc fc99 	bl	8010e90 <_ZSt4sqrtf>
 801455e:	eeb0 7a40 	vmov.f32	s14, s0
 8014562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801456a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	ax *= ad; ay *= ad; az *= ad;
 801456e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8014572:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801457a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 801457e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014582:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801458a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 801458e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014592:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8014596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801459a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 801459e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80145a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80145a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80145aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145b2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80145b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80145ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145be:	eeb0 0a67 	vmov.f32	s0, s15
 80145c2:	f7fc fc65 	bl	8010e90 <_ZSt4sqrtf>
 80145c6:	eeb0 7a40 	vmov.f32	s14, s0
 80145ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80145ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80145d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	amx *= amd; amy *= amd; amz *= amd;
 80145d6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80145da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80145de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145e2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 80145e6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80145ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80145ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80145f6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80145fa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80145fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014602:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 8014606:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801460a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801460e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8014612:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014616:	ee37 7a27 	vadd.f32	s14, s14, s15
 801461a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801461e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014626:	eeb0 0a67 	vmov.f32	s0, s15
 801462a:	f7fc fc31 	bl	8010e90 <_ZSt4sqrtf>
 801462e:	eeb0 7a40 	vmov.f32	s14, s0
 8014632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801463a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	amax *= amad; amay *= amad; amaz *= amad;
 801463e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8014642:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014646:	ee67 7a27 	vmul.f32	s15, s14, s15
 801464a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 801464e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8014652:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801465a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 801465e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014662:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014666:	ee67 7a27 	vmul.f32	s15, s14, s15
 801466a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	_state(0) = 0.5f * sqrt(amax + amy + az + 1.0f);
 801466e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8014672:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8014676:	ee37 7a27 	vadd.f32	s14, s14, s15
 801467a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801467e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014686:	ee77 7a87 	vadd.f32	s15, s15, s14
 801468a:	eeb0 0a67 	vmov.f32	s0, s15
 801468e:	f7fc fbff 	bl	8010e90 <_ZSt4sqrtf>
 8014692:	eeb0 8a40 	vmov.f32	s16, s0
 8014696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014698:	3304      	adds	r3, #4
 801469a:	2100      	movs	r1, #0
 801469c:	4618      	mov	r0, r3
 801469e:	f001 ffe8 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80146a2:	4603      	mov	r3, r0
 80146a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80146a8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80146ac:	edc3 7a00 	vstr	s15, [r3]
	_state(1) = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 80146b0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80146b4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80146b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146bc:	eeb0 0a67 	vmov.f32	s0, s15
 80146c0:	f7ff fe52 	bl	8014368 <_ZN12_GLOBAL__N_13sgnEf>
 80146c4:	eef0 7a40 	vmov.f32	s15, s0
 80146c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80146cc:	ee27 8a87 	vmul.f32	s16, s15, s14
 80146d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80146d4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80146d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80146e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146ec:	eeb0 0a67 	vmov.f32	s0, s15
 80146f0:	f7fc fbce 	bl	8010e90 <_ZSt4sqrtf>
 80146f4:	eef0 8a40 	vmov.f32	s17, s0
 80146f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146fa:	3304      	adds	r3, #4
 80146fc:	2101      	movs	r1, #1
 80146fe:	4618      	mov	r0, r3
 8014700:	f001 ffb7 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014704:	4603      	mov	r3, r0
 8014706:	ee68 7a28 	vmul.f32	s15, s16, s17
 801470a:	edc3 7a00 	vstr	s15, [r3]
	_state(2) = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 801470e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8014712:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014716:	ee77 7a67 	vsub.f32	s15, s14, s15
 801471a:	eeb0 0a67 	vmov.f32	s0, s15
 801471e:	f7ff fe23 	bl	8014368 <_ZN12_GLOBAL__N_13sgnEf>
 8014722:	eef0 7a40 	vmov.f32	s15, s0
 8014726:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801472a:	ee27 8a87 	vmul.f32	s16, s15, s14
 801472e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8014732:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8014736:	ee37 7a67 	vsub.f32	s14, s14, s15
 801473a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801473e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014746:	ee77 7a87 	vadd.f32	s15, s15, s14
 801474a:	eeb0 0a67 	vmov.f32	s0, s15
 801474e:	f7fc fb9f 	bl	8010e90 <_ZSt4sqrtf>
 8014752:	eef0 8a40 	vmov.f32	s17, s0
 8014756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014758:	3304      	adds	r3, #4
 801475a:	2102      	movs	r1, #2
 801475c:	4618      	mov	r0, r3
 801475e:	f001 ff88 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014762:	4603      	mov	r3, r0
 8014764:	ee68 7a28 	vmul.f32	s15, s16, s17
 8014768:	edc3 7a00 	vstr	s15, [r3]
	_state(3) = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 801476c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8014770:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014778:	eeb0 0a67 	vmov.f32	s0, s15
 801477c:	f7ff fdf4 	bl	8014368 <_ZN12_GLOBAL__N_13sgnEf>
 8014780:	eef0 7a40 	vmov.f32	s15, s0
 8014784:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014788:	ee27 8a87 	vmul.f32	s16, s15, s14
 801478c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014790:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8014794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014798:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 801479c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80147a8:	eeb0 0a67 	vmov.f32	s0, s15
 80147ac:	f7fc fb70 	bl	8010e90 <_ZSt4sqrtf>
 80147b0:	eef0 8a40 	vmov.f32	s17, s0
 80147b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147b6:	3304      	adds	r3, #4
 80147b8:	2103      	movs	r1, #3
 80147ba:	4618      	mov	r0, r3
 80147bc:	f001 ff59 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80147c0:	4603      	mov	r3, r0
 80147c2:	ee68 7a28 	vmul.f32	s15, s16, s17
 80147c6:	edc3 7a00 	vstr	s15, [r3]
	_time = time;
 80147ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147ce:	655a      	str	r2, [r3, #84]	; 0x54
	_stateCovMatrix = Eye<OrientationEKF_stateLen>(1.0f);
 80147d0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80147d2:	463b      	mov	r3, r7
 80147d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80147d8:	4618      	mov	r0, r3
 80147da:	f7f9 fb17 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 80147de:	3414      	adds	r4, #20
 80147e0:	463d      	mov	r5, r7
 80147e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80147ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80147f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80147f6:	bf00      	nop
 80147f8:	3790      	adds	r7, #144	; 0x90
 80147fa:	46bd      	mov	sp, r7
 80147fc:	ecbd 8b02 	vpop	{d8}
 8014800:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014804 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void OrientationEKF::_UpdateAcc(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8014804:	b5b0      	push	{r4, r5, r7, lr}
 8014806:	ed2d 8b02 	vpush	{d8}
 801480a:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 801480e:	af00      	add	r7, sp, #0
 8014810:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014814:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014818:	6018      	str	r0, [r3, #0]
 801481a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801481e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014822:	6019      	str	r1, [r3, #0]
 8014824:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014828:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801482c:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 801482e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014832:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014836:	2100      	movs	r1, #0
 8014838:	6818      	ldr	r0, [r3, #0]
 801483a:	f7f9 fb88 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801483e:	eef0 7a40 	vmov.f32	s15, s0
 8014842:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014846:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801484a:	edc3 7a00 	vstr	s15, [r3]
 801484e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014852:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014856:	2101      	movs	r1, #1
 8014858:	6818      	ldr	r0, [r3, #0]
 801485a:	f7f9 fb78 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801485e:	eef0 7a40 	vmov.f32	s15, s0
 8014862:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014866:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801486a:	edc3 7a01 	vstr	s15, [r3, #4]
 801486e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014872:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014876:	2102      	movs	r1, #2
 8014878:	6818      	ldr	r0, [r3, #0]
 801487a:	f7f9 fb68 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801487e:	eef0 7a40 	vmov.f32	s15, s0
 8014882:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014886:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801488a:	edc3 7a02 	vstr	s15, [r3, #8]
 801488e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8014892:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f001 fe1e 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	z *= 1.0f / z.Norm();
 801489e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80148a2:	4618      	mov	r0, r3
 80148a4:	f001 fe57 	bl	8016556 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 80148a8:	eeb0 7a40 	vmov.f32	s14, s0
 80148ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80148b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80148b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80148b8:	eeb0 0a67 	vmov.f32	s0, s15
 80148bc:	4618      	mov	r0, r3
 80148be:	f001 fee9 	bl	8016694 <_ZN3Mat6MatrixILt3ELt1EEmLEf>
	//[0, 0, 1]
	V_Vector<3> h{{
		2.0f * (_state(1)*_state(3) - _state(0)*_state(2)),
 80148c2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148c6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	3304      	adds	r3, #4
 80148ce:	2101      	movs	r1, #1
 80148d0:	4618      	mov	r0, r3
 80148d2:	f001 fece 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80148d6:	4603      	mov	r3, r0
 80148d8:	ed93 8a00 	vldr	s16, [r3]
 80148dc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148e0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	3304      	adds	r3, #4
 80148e8:	2103      	movs	r1, #3
 80148ea:	4618      	mov	r0, r3
 80148ec:	f001 fec1 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80148f0:	4603      	mov	r3, r0
 80148f2:	edd3 7a00 	vldr	s15, [r3]
 80148f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80148fa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148fe:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	3304      	adds	r3, #4
 8014906:	2100      	movs	r1, #0
 8014908:	4618      	mov	r0, r3
 801490a:	f001 feb2 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801490e:	4603      	mov	r3, r0
 8014910:	edd3 8a00 	vldr	s17, [r3]
 8014914:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014918:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	3304      	adds	r3, #4
 8014920:	2102      	movs	r1, #2
 8014922:	4618      	mov	r0, r3
 8014924:	f001 fea5 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014928:	4603      	mov	r3, r0
 801492a:	edd3 7a00 	vldr	s15, [r3]
 801492e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014932:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014936:	ee77 7aa7 	vadd.f32	s15, s15, s15
		2.0f * (_state(0)*_state(1) + _state(2)*_state(3)),
		2.0f * (0.5f - _state(1)*_state(1) - _state(2)*_state(2))
	}};
 801493a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801493e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014942:	edc3 7a00 	vstr	s15, [r3]
		2.0f * (_state(0)*_state(1) + _state(2)*_state(3)),
 8014946:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801494a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	3304      	adds	r3, #4
 8014952:	2100      	movs	r1, #0
 8014954:	4618      	mov	r0, r3
 8014956:	f001 fe8c 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801495a:	4603      	mov	r3, r0
 801495c:	ed93 8a00 	vldr	s16, [r3]
 8014960:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014964:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	3304      	adds	r3, #4
 801496c:	2101      	movs	r1, #1
 801496e:	4618      	mov	r0, r3
 8014970:	f001 fe7f 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014974:	4603      	mov	r3, r0
 8014976:	edd3 7a00 	vldr	s15, [r3]
 801497a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801497e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014982:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3304      	adds	r3, #4
 801498a:	2102      	movs	r1, #2
 801498c:	4618      	mov	r0, r3
 801498e:	f001 fe70 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014992:	4603      	mov	r3, r0
 8014994:	edd3 8a00 	vldr	s17, [r3]
 8014998:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801499c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	3304      	adds	r3, #4
 80149a4:	2103      	movs	r1, #3
 80149a6:	4618      	mov	r0, r3
 80149a8:	f001 fe63 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80149ac:	4603      	mov	r3, r0
 80149ae:	edd3 7a00 	vldr	s15, [r3]
 80149b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80149b6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80149ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 80149be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149c2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80149c6:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f * (0.5f - _state(1)*_state(1) - _state(2)*_state(2))
 80149ca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149ce:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	3304      	adds	r3, #4
 80149d6:	2101      	movs	r1, #1
 80149d8:	4618      	mov	r0, r3
 80149da:	f001 fe4a 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80149de:	4603      	mov	r3, r0
 80149e0:	ed93 8a00 	vldr	s16, [r3]
 80149e4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149e8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3304      	adds	r3, #4
 80149f0:	2101      	movs	r1, #1
 80149f2:	4618      	mov	r0, r3
 80149f4:	f001 fe3d 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80149f8:	4603      	mov	r3, r0
 80149fa:	edd3 7a00 	vldr	s15, [r3]
 80149fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014a02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014a06:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014a0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a0e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3304      	adds	r3, #4
 8014a16:	2102      	movs	r1, #2
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f001 fe2a 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	edd3 8a00 	vldr	s17, [r3]
 8014a24:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a28:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	3304      	adds	r3, #4
 8014a30:	2102      	movs	r1, #2
 8014a32:	4618      	mov	r0, r3
 8014a34:	f001 fe1d 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	edd3 7a00 	vldr	s15, [r3]
 8014a3e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014a42:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014a46:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014a4a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a4e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014a52:	edc3 7a02 	vstr	s15, [r3, #8]
 8014a56:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8014a5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8014a5e:	4611      	mov	r1, r2
 8014a60:	4618      	mov	r0, r3
 8014a62:	f001 fd3a 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	Matrix<3, OrientationEKF_stateLen> H{{
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014a66:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a6a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	3304      	adds	r3, #4
 8014a72:	2102      	movs	r1, #2
 8014a74:	4618      	mov	r0, r3
 8014a76:	f001 fdfc 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	edd3 7a00 	vldr	s15, [r3]
 8014a80:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8014a84:	ee67 7a87 	vmul.f32	s15, s15, s14
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
	}};
 8014a88:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a8c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014a90:	edc3 7a00 	vstr	s15, [r3]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014a94:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a98:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	3304      	adds	r3, #4
 8014aa0:	2103      	movs	r1, #3
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f001 fde5 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	edd3 7a00 	vldr	s15, [r3]
 8014aae:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014ab2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ab6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014aba:	edc3 7a01 	vstr	s15, [r3, #4]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014abe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ac2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	3304      	adds	r3, #4
 8014aca:	2100      	movs	r1, #0
 8014acc:	4618      	mov	r0, r3
 8014ace:	f001 fdd0 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	edd3 7a00 	vldr	s15, [r3]
 8014ad8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8014adc:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 8014ae0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ae4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014ae8:	edc3 7a02 	vstr	s15, [r3, #8]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014aec:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014af0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	3304      	adds	r3, #4
 8014af8:	2101      	movs	r1, #1
 8014afa:	4618      	mov	r0, r3
 8014afc:	f001 fdb9 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014b00:	4603      	mov	r3, r0
 8014b02:	edd3 7a00 	vldr	s15, [r3]
 8014b06:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014b0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b0e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014b12:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 8014b16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b1a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	3304      	adds	r3, #4
 8014b22:	2101      	movs	r1, #1
 8014b24:	4618      	mov	r0, r3
 8014b26:	f001 fda4 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	edd3 7a00 	vldr	s15, [r3]
 8014b30:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014b34:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b38:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014b3c:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 8014b40:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b44:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	2100      	movs	r1, #0
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f001 fd8f 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014b54:	4603      	mov	r3, r0
 8014b56:	edd3 7a00 	vldr	s15, [r3]
 8014b5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014b5e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b62:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014b66:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 8014b6a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b6e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	3304      	adds	r3, #4
 8014b76:	2103      	movs	r1, #3
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f001 fd7a 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	edd3 7a00 	vldr	s15, [r3]
 8014b84:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014b88:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b8c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014b90:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 8014b94:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b98:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	3304      	adds	r3, #4
 8014ba0:	2102      	movs	r1, #2
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f001 fd65 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	edd3 7a00 	vldr	s15, [r3]
 8014bae:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014bb2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014bb6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014bba:	edc3 7a07 	vstr	s15, [r3, #28]
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014bbe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014bc2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	3304      	adds	r3, #4
 8014bca:	2100      	movs	r1, #0
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f001 fd50 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	edd3 7a00 	vldr	s15, [r3]
 8014bd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014bdc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014be0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014be4:	edc3 7a08 	vstr	s15, [r3, #32]
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014be8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014bec:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	2101      	movs	r1, #1
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f001 fd3b 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	edd3 7a00 	vldr	s15, [r3]
 8014c02:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8014c06:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 8014c0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c0e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014c12:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014c16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c1a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	3304      	adds	r3, #4
 8014c22:	2102      	movs	r1, #2
 8014c24:	4618      	mov	r0, r3
 8014c26:	f001 fd24 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	edd3 7a00 	vldr	s15, [r3]
 8014c30:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8014c34:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 8014c38:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c3c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014c40:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014c44:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c48:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	3304      	adds	r3, #4
 8014c50:	2103      	movs	r1, #3
 8014c52:	4618      	mov	r0, r3
 8014c54:	f001 fd0d 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	edd3 7a00 	vldr	s15, [r3]
 8014c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014c62:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c66:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014c6a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8014c6e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8014c72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014c76:	4611      	mov	r1, r2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fe fcf7 	bl	801366c <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
	static Matrix<3, 3> R{0.0f};
 8014c7e:	4b9a      	ldr	r3, [pc, #616]	; (8014ee8 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	f3bf 8f5b 	dmb	ish
 8014c86:	f003 0301 	and.w	r3, r3, #1
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	bf0c      	ite	eq
 8014c8e:	2301      	moveq	r3, #1
 8014c90:	2300      	movne	r3, #0
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d012      	beq.n	8014cbe <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x4ba>
 8014c98:	4893      	ldr	r0, [pc, #588]	; (8014ee8 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 8014c9a:	f008 fd85 	bl	801d7a8 <__cxa_guard_acquire>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	bf14      	ite	ne
 8014ca4:	2301      	movne	r3, #1
 8014ca6:	2300      	moveq	r3, #0
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d007      	beq.n	8014cbe <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x4ba>
 8014cae:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8014eec <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e8>
 8014cb2:	488f      	ldr	r0, [pc, #572]	; (8014ef0 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014cb4:	f7f9 f9c5 	bl	800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8014cb8:	488b      	ldr	r0, [pc, #556]	; (8014ee8 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 8014cba:	f008 fd81 	bl	801d7c0 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	2100      	movs	r1, #0
 8014cc2:	488b      	ldr	r0, [pc, #556]	; (8014ef0 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014cc4:	f7f9 f9da 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014cc8:	4604      	mov	r4, r0
 8014cca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014cce:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	6818      	ldr	r0, [r3, #0]
 8014cd8:	f7fb fbc1 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014cdc:	eef0 7a40 	vmov.f32	s15, s0
 8014ce0:	edc4 7a00 	vstr	s15, [r4]
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	2101      	movs	r1, #1
 8014ce8:	4881      	ldr	r0, [pc, #516]	; (8014ef0 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014cea:	f7f9 f9c7 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014cee:	4604      	mov	r4, r0
 8014cf0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014cf4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014cf8:	2201      	movs	r2, #1
 8014cfa:	2101      	movs	r1, #1
 8014cfc:	6818      	ldr	r0, [r3, #0]
 8014cfe:	f7fb fbae 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014d02:	eef0 7a40 	vmov.f32	s15, s0
 8014d06:	edc4 7a00 	vstr	s15, [r4]
 8014d0a:	2202      	movs	r2, #2
 8014d0c:	2102      	movs	r1, #2
 8014d0e:	4878      	ldr	r0, [pc, #480]	; (8014ef0 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014d10:	f7f9 f9b4 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014d14:	4604      	mov	r4, r0
 8014d16:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d1a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014d1e:	2202      	movs	r2, #2
 8014d20:	2102      	movs	r1, #2
 8014d22:	6818      	ldr	r0, [r3, #0]
 8014d24:	f7fb fb9b 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014d28:	eef0 7a40 	vmov.f32	s15, s0
 8014d2c:	edc4 7a00 	vstr	s15, [r4]
	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8014d30:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d34:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f103 0214 	add.w	r2, r3, #20
 8014d3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014d46:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7fe fca5 	bl	801369a <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8014d50:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014d58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fe fcae 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8014d64:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014d6c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8014d70:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fe fcd3 	bl	8013720 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8014d7a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d7e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8014d82:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8014d86:	4a5a      	ldr	r2, [pc, #360]	; (8014ef0 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7fe fcdc 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8014d8e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d92:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	f103 0414 	add.w	r4, r3, #20
 8014d9c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014da4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014da8:	4611      	mov	r1, r2
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fe fc88 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8014db0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014db4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014db8:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8014dbc:	4621      	mov	r1, r4
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7fe fcda 	bl	8013778 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8014dc4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014dc8:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 8014dcc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8014dd0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014dd4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014dd8:	6819      	ldr	r1, [r3, #0]
 8014dda:	f001 f953 	bl	8016084 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8014dde:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014de2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8014de6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014dea:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7fe fcd5 	bl	801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8014df4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014df8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	1d1c      	adds	r4, r3, #4
 8014e00:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014e04:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014e08:	4611      	mov	r1, r2
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fb ff0b 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8014e10:	eef0 6a40 	vmov.f32	s13, s0
 8014e14:	eeb0 7a60 	vmov.f32	s14, s1
 8014e18:	eef0 7a41 	vmov.f32	s15, s2
 8014e1c:	edc7 6a93 	vstr	s13, [r7, #588]	; 0x24c
 8014e20:	ed87 7a94 	vstr	s14, [r7, #592]	; 0x250
 8014e24:	edc7 7a95 	vstr	s15, [r7, #596]	; 0x254
 8014e28:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8014e2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014e30:	4611      	mov	r1, r2
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fe fcc6 	bl	80137c4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8014e38:	eeb0 6a40 	vmov.f32	s12, s0
 8014e3c:	eef0 6a60 	vmov.f32	s13, s1
 8014e40:	eeb0 7a41 	vmov.f32	s14, s2
 8014e44:	eef0 7a61 	vmov.f32	s15, s3
 8014e48:	ed87 6a8f 	vstr	s12, [r7, #572]	; 0x23c
 8014e4c:	edc7 6a90 	vstr	s13, [r7, #576]	; 0x240
 8014e50:	ed87 7a91 	vstr	s14, [r7, #580]	; 0x244
 8014e54:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
 8014e58:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f7fa faa1 	bl	800f3a6 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<OrientationEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8014e64:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8014e68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7f8 ffcd 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8014e72:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014e76:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014e7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7fe fb9e 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8014e84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8014e88:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8014e8c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fa fad0 	bl	800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8014e96:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e9a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f103 0214 	add.w	r2, r3, #20
 8014ea4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ea8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014eac:	681c      	ldr	r4, [r3, #0]
 8014eae:	463b      	mov	r3, r7
 8014eb0:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fa f93b 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8014eba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ebe:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8014ec2:	3414      	adds	r4, #20
 8014ec4:	461d      	mov	r5, r3
 8014ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ed2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014eda:	bf00      	nop
 8014edc:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	ecbd 8b02 	vpop	{d8}
 8014ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8014ee8:	24005538 	.word	0x24005538
 8014eec:	00000000 	.word	0x00000000
 8014ef0:	24005514 	.word	0x24005514

08014ef4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void OrientationEKF::_UpdateMag(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8014ef4:	b5b0      	push	{r4, r5, r7, lr}
 8014ef6:	ed2d 8b04 	vpush	{d8-d9}
 8014efa:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f04:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f08:	6018      	str	r0, [r3, #0]
 8014f0a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f0e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014f12:	6019      	str	r1, [r3, #0]
 8014f14:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f18:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014f1c:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(3), meassurementVec(4), meassurementVec(5)}};
 8014f1e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f22:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014f26:	2103      	movs	r1, #3
 8014f28:	6818      	ldr	r0, [r3, #0]
 8014f2a:	f7f9 f810 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8014f2e:	eef0 7a40 	vmov.f32	s15, s0
 8014f32:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f36:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f3a:	edc3 7a00 	vstr	s15, [r3]
 8014f3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f42:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014f46:	2104      	movs	r1, #4
 8014f48:	6818      	ldr	r0, [r3, #0]
 8014f4a:	f7f9 f800 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8014f4e:	eef0 7a40 	vmov.f32	s15, s0
 8014f52:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f56:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f5a:	edc3 7a01 	vstr	s15, [r3, #4]
 8014f5e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f62:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014f66:	2105      	movs	r1, #5
 8014f68:	6818      	ldr	r0, [r3, #0]
 8014f6a:	f7f8 fff0 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8014f6e:	eef0 7a40 	vmov.f32	s15, s0
 8014f72:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f76:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014f7a:	edc3 7a02 	vstr	s15, [r3, #8]
 8014f7e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8014f82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014f86:	4611      	mov	r1, r2
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f001 faa6 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	z *= 1.0f / z.Norm();
 8014f8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f001 fadf 	bl	8016556 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8014f98:	eeb0 7a40 	vmov.f32	s14, s0
 8014f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014fa4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8014fac:	4618      	mov	r0, r3
 8014fae:	f001 fb71 	bl	8016694 <_ZN3Mat6MatrixILt3ELt1EEmLEf>
	V_Vector<3> h{{
		(r2(1)*(_state(0)*_state(3) + _state(1)*_state(2)) + r2(2)*(_state(1)*_state(3) - _state(0)*_state(2))),
 8014fb2:	2101      	movs	r1, #1
 8014fb4:	48ec      	ldr	r0, [pc, #944]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014fb6:	f001 fa9f 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014fba:	eeb0 9a40 	vmov.f32	s18, s0
 8014fbe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014fc2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	3304      	adds	r3, #4
 8014fca:	2100      	movs	r1, #0
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f001 fb50 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	ed93 8a00 	vldr	s16, [r3]
 8014fd8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014fdc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	3304      	adds	r3, #4
 8014fe4:	2103      	movs	r1, #3
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f001 fb43 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8014fec:	4603      	mov	r3, r0
 8014fee:	edd3 7a00 	vldr	s15, [r3]
 8014ff2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ff6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ffa:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	3304      	adds	r3, #4
 8015002:	2101      	movs	r1, #1
 8015004:	4618      	mov	r0, r3
 8015006:	f001 fb34 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801500a:	4603      	mov	r3, r0
 801500c:	edd3 8a00 	vldr	s17, [r3]
 8015010:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015014:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	3304      	adds	r3, #4
 801501c:	2102      	movs	r1, #2
 801501e:	4618      	mov	r0, r3
 8015020:	f001 fb27 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015024:	4603      	mov	r3, r0
 8015026:	edd3 7a00 	vldr	s15, [r3]
 801502a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801502e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015032:	ee29 8a27 	vmul.f32	s16, s18, s15
 8015036:	2102      	movs	r1, #2
 8015038:	48cb      	ldr	r0, [pc, #812]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 801503a:	f001 fa5d 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801503e:	eef0 9a40 	vmov.f32	s19, s0
 8015042:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015046:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	3304      	adds	r3, #4
 801504e:	2101      	movs	r1, #1
 8015050:	4618      	mov	r0, r3
 8015052:	f001 fb0e 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015056:	4603      	mov	r3, r0
 8015058:	edd3 8a00 	vldr	s17, [r3]
 801505c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015060:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	3304      	adds	r3, #4
 8015068:	2103      	movs	r1, #3
 801506a:	4618      	mov	r0, r3
 801506c:	f001 fb01 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015070:	4603      	mov	r3, r0
 8015072:	edd3 7a00 	vldr	s15, [r3]
 8015076:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801507a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801507e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	3304      	adds	r3, #4
 8015086:	2100      	movs	r1, #0
 8015088:	4618      	mov	r0, r3
 801508a:	f001 faf2 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801508e:	4603      	mov	r3, r0
 8015090:	ed93 9a00 	vldr	s18, [r3]
 8015094:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015098:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	3304      	adds	r3, #4
 80150a0:	2102      	movs	r1, #2
 80150a2:	4618      	mov	r0, r3
 80150a4:	f001 fae5 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80150a8:	4603      	mov	r3, r0
 80150aa:	edd3 7a00 	vldr	s15, [r3]
 80150ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 80150b2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80150b6:	ee69 7aa7 	vmul.f32	s15, s19, s15
 80150ba:	ee78 7a27 	vadd.f32	s15, s16, s15
		(r2(1)*(0.5f - _state(1)*_state(1) - _state(3)*_state(3)) + r2(2)*(_state(0)*_state(1) + _state(2)*_state(3))),
		(r2(1)*(_state(2)*_state(3) - _state(0)*_state(1)) + r2(2)*(0.5f - _state(1)*_state(1) - _state(2)*_state(2)))
	}};
 80150be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150c2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80150c6:	edc3 7a00 	vstr	s15, [r3]
		(r2(1)*(0.5f - _state(1)*_state(1) - _state(3)*_state(3)) + r2(2)*(_state(0)*_state(1) + _state(2)*_state(3))),
 80150ca:	2101      	movs	r1, #1
 80150cc:	48a6      	ldr	r0, [pc, #664]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 80150ce:	f001 fa13 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80150d2:	eeb0 9a40 	vmov.f32	s18, s0
 80150d6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150da:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	3304      	adds	r3, #4
 80150e2:	2101      	movs	r1, #1
 80150e4:	4618      	mov	r0, r3
 80150e6:	f001 fac4 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80150ea:	4603      	mov	r3, r0
 80150ec:	ed93 8a00 	vldr	s16, [r3]
 80150f0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150f4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	3304      	adds	r3, #4
 80150fc:	2101      	movs	r1, #1
 80150fe:	4618      	mov	r0, r3
 8015100:	f001 fab7 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015104:	4603      	mov	r3, r0
 8015106:	edd3 7a00 	vldr	s15, [r3]
 801510a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801510e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015112:	ee37 8a67 	vsub.f32	s16, s14, s15
 8015116:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801511a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	3304      	adds	r3, #4
 8015122:	2103      	movs	r1, #3
 8015124:	4618      	mov	r0, r3
 8015126:	f001 faa4 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801512a:	4603      	mov	r3, r0
 801512c:	edd3 8a00 	vldr	s17, [r3]
 8015130:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015134:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	3304      	adds	r3, #4
 801513c:	2103      	movs	r1, #3
 801513e:	4618      	mov	r0, r3
 8015140:	f001 fa97 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015144:	4603      	mov	r3, r0
 8015146:	edd3 7a00 	vldr	s15, [r3]
 801514a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801514e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015152:	ee29 8a27 	vmul.f32	s16, s18, s15
 8015156:	2102      	movs	r1, #2
 8015158:	4883      	ldr	r0, [pc, #524]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 801515a:	f001 f9cd 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801515e:	eef0 9a40 	vmov.f32	s19, s0
 8015162:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015166:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	3304      	adds	r3, #4
 801516e:	2100      	movs	r1, #0
 8015170:	4618      	mov	r0, r3
 8015172:	f001 fa7e 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015176:	4603      	mov	r3, r0
 8015178:	edd3 8a00 	vldr	s17, [r3]
 801517c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015180:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	3304      	adds	r3, #4
 8015188:	2101      	movs	r1, #1
 801518a:	4618      	mov	r0, r3
 801518c:	f001 fa71 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015190:	4603      	mov	r3, r0
 8015192:	edd3 7a00 	vldr	s15, [r3]
 8015196:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801519a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801519e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	3304      	adds	r3, #4
 80151a6:	2102      	movs	r1, #2
 80151a8:	4618      	mov	r0, r3
 80151aa:	f001 fa62 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80151ae:	4603      	mov	r3, r0
 80151b0:	ed93 9a00 	vldr	s18, [r3]
 80151b4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151b8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	3304      	adds	r3, #4
 80151c0:	2103      	movs	r1, #3
 80151c2:	4618      	mov	r0, r3
 80151c4:	f001 fa55 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80151c8:	4603      	mov	r3, r0
 80151ca:	edd3 7a00 	vldr	s15, [r3]
 80151ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80151d2:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80151d6:	ee69 7aa7 	vmul.f32	s15, s19, s15
 80151da:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80151de:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151e2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80151e6:	edc3 7a01 	vstr	s15, [r3, #4]
		(r2(1)*(_state(2)*_state(3) - _state(0)*_state(1)) + r2(2)*(0.5f - _state(1)*_state(1) - _state(2)*_state(2)))
 80151ea:	2101      	movs	r1, #1
 80151ec:	485e      	ldr	r0, [pc, #376]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 80151ee:	f001 f983 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80151f2:	eeb0 9a40 	vmov.f32	s18, s0
 80151f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151fa:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	3304      	adds	r3, #4
 8015202:	2102      	movs	r1, #2
 8015204:	4618      	mov	r0, r3
 8015206:	f001 fa34 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801520a:	4603      	mov	r3, r0
 801520c:	ed93 8a00 	vldr	s16, [r3]
 8015210:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015214:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	3304      	adds	r3, #4
 801521c:	2103      	movs	r1, #3
 801521e:	4618      	mov	r0, r3
 8015220:	f001 fa27 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015224:	4603      	mov	r3, r0
 8015226:	edd3 7a00 	vldr	s15, [r3]
 801522a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801522e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015232:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	3304      	adds	r3, #4
 801523a:	2100      	movs	r1, #0
 801523c:	4618      	mov	r0, r3
 801523e:	f001 fa18 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015242:	4603      	mov	r3, r0
 8015244:	edd3 8a00 	vldr	s17, [r3]
 8015248:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801524c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	3304      	adds	r3, #4
 8015254:	2101      	movs	r1, #1
 8015256:	4618      	mov	r0, r3
 8015258:	f001 fa0b 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801525c:	4603      	mov	r3, r0
 801525e:	edd3 7a00 	vldr	s15, [r3]
 8015262:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015266:	ee78 7a67 	vsub.f32	s15, s16, s15
 801526a:	ee29 8a27 	vmul.f32	s16, s18, s15
 801526e:	2102      	movs	r1, #2
 8015270:	483d      	ldr	r0, [pc, #244]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8015272:	f001 f941 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015276:	eef0 9a40 	vmov.f32	s19, s0
 801527a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801527e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	3304      	adds	r3, #4
 8015286:	2101      	movs	r1, #1
 8015288:	4618      	mov	r0, r3
 801528a:	f001 f9f2 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801528e:	4603      	mov	r3, r0
 8015290:	edd3 8a00 	vldr	s17, [r3]
 8015294:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015298:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	3304      	adds	r3, #4
 80152a0:	2101      	movs	r1, #1
 80152a2:	4618      	mov	r0, r3
 80152a4:	f001 f9e5 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80152a8:	4603      	mov	r3, r0
 80152aa:	edd3 7a00 	vldr	s15, [r3]
 80152ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80152b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80152b6:	ee77 8a67 	vsub.f32	s17, s14, s15
 80152ba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80152be:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	3304      	adds	r3, #4
 80152c6:	2102      	movs	r1, #2
 80152c8:	4618      	mov	r0, r3
 80152ca:	f001 f9d2 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80152ce:	4603      	mov	r3, r0
 80152d0:	ed93 9a00 	vldr	s18, [r3]
 80152d4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80152d8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	3304      	adds	r3, #4
 80152e0:	2102      	movs	r1, #2
 80152e2:	4618      	mov	r0, r3
 80152e4:	f001 f9c5 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80152e8:	4603      	mov	r3, r0
 80152ea:	edd3 7a00 	vldr	s15, [r3]
 80152ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80152f2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80152f6:	ee69 7aa7 	vmul.f32	s15, s19, s15
 80152fa:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80152fe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015302:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8015306:	edc3 7a02 	vstr	s15, [r3, #8]
 801530a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801530e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015312:	4611      	mov	r1, r2
 8015314:	4618      	mov	r0, r3
 8015316:	f001 f8e0 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	Matrix<3, OrientationEKF_stateLen> H{{
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 801531a:	2101      	movs	r1, #1
 801531c:	4812      	ldr	r0, [pc, #72]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 801531e:	f001 f8eb 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015322:	eeb0 8a40 	vmov.f32	s16, s0
 8015326:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801532a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	3304      	adds	r3, #4
 8015332:	2103      	movs	r1, #3
 8015334:	4618      	mov	r0, r3
 8015336:	f001 f99c 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801533a:	4603      	mov	r3, r0
 801533c:	edd3 7a00 	vldr	s15, [r3]
 8015340:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015344:	2102      	movs	r1, #2
 8015346:	4808      	ldr	r0, [pc, #32]	; (8015368 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8015348:	f001 f8d6 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801534c:	eef0 8a40 	vmov.f32	s17, s0
 8015350:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015354:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	3304      	adds	r3, #4
 801535c:	2102      	movs	r1, #2
 801535e:	4618      	mov	r0, r3
 8015360:	f001 f987 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015364:	4603      	mov	r3, r0
 8015366:	e001      	b.n	801536c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x478>
 8015368:	24005508 	.word	0x24005508
 801536c:	edd3 7a00 	vldr	s15, [r3]
 8015370:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015374:	ee78 7a67 	vsub.f32	s15, s16, s15
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
	}};
 8015378:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801537c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015380:	edc3 7a00 	vstr	s15, [r3]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 8015384:	2101      	movs	r1, #1
 8015386:	48eb      	ldr	r0, [pc, #940]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015388:	f001 f8b6 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801538c:	eeb0 8a40 	vmov.f32	s16, s0
 8015390:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015394:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	3304      	adds	r3, #4
 801539c:	2102      	movs	r1, #2
 801539e:	4618      	mov	r0, r3
 80153a0:	f001 f967 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80153a4:	4603      	mov	r3, r0
 80153a6:	edd3 7a00 	vldr	s15, [r3]
 80153aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80153ae:	2102      	movs	r1, #2
 80153b0:	48e0      	ldr	r0, [pc, #896]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80153b2:	f001 f8a1 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80153b6:	eef0 8a40 	vmov.f32	s17, s0
 80153ba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153be:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	3304      	adds	r3, #4
 80153c6:	2103      	movs	r1, #3
 80153c8:	4618      	mov	r0, r3
 80153ca:	f001 f952 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80153ce:	4603      	mov	r3, r0
 80153d0:	edd3 7a00 	vldr	s15, [r3]
 80153d4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80153d8:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80153dc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153e0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80153e4:	edc3 7a01 	vstr	s15, [r3, #4]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 80153e8:	2101      	movs	r1, #1
 80153ea:	48d2      	ldr	r0, [pc, #840]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80153ec:	f001 f884 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80153f0:	eeb0 8a40 	vmov.f32	s16, s0
 80153f4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153f8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	3304      	adds	r3, #4
 8015400:	2101      	movs	r1, #1
 8015402:	4618      	mov	r0, r3
 8015404:	f001 f935 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015408:	4603      	mov	r3, r0
 801540a:	edd3 7a00 	vldr	s15, [r3]
 801540e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015412:	2102      	movs	r1, #2
 8015414:	48c7      	ldr	r0, [pc, #796]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015416:	f001 f86f 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801541a:	eef0 8a40 	vmov.f32	s17, s0
 801541e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015422:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	3304      	adds	r3, #4
 801542a:	2100      	movs	r1, #0
 801542c:	4618      	mov	r0, r3
 801542e:	f001 f920 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015432:	4603      	mov	r3, r0
 8015434:	edd3 7a00 	vldr	s15, [r3]
 8015438:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801543c:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015440:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015444:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015448:	edc3 7a02 	vstr	s15, [r3, #8]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 801544c:	2101      	movs	r1, #1
 801544e:	48b9      	ldr	r0, [pc, #740]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015450:	f001 f852 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015454:	eeb0 8a40 	vmov.f32	s16, s0
 8015458:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801545c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3304      	adds	r3, #4
 8015464:	2100      	movs	r1, #0
 8015466:	4618      	mov	r0, r3
 8015468:	f001 f903 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801546c:	4603      	mov	r3, r0
 801546e:	edd3 7a00 	vldr	s15, [r3]
 8015472:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015476:	2102      	movs	r1, #2
 8015478:	48ae      	ldr	r0, [pc, #696]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801547a:	f001 f83d 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801547e:	eef0 8a40 	vmov.f32	s17, s0
 8015482:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015486:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	3304      	adds	r3, #4
 801548e:	2101      	movs	r1, #1
 8015490:	4618      	mov	r0, r3
 8015492:	f001 f8ee 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015496:	4603      	mov	r3, r0
 8015498:	edd3 7a00 	vldr	s15, [r3]
 801549c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80154a0:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80154a4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80154ac:	edc3 7a03 	vstr	s15, [r3, #12]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 80154b0:	2101      	movs	r1, #1
 80154b2:	48a0      	ldr	r0, [pc, #640]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80154b4:	f001 f820 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80154b8:	eeb0 8a40 	vmov.f32	s16, s0
 80154bc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154c0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	3304      	adds	r3, #4
 80154c8:	2100      	movs	r1, #0
 80154ca:	4618      	mov	r0, r3
 80154cc:	f001 f8d1 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80154d0:	4603      	mov	r3, r0
 80154d2:	edd3 7a00 	vldr	s15, [r3]
 80154d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80154da:	2102      	movs	r1, #2
 80154dc:	4895      	ldr	r0, [pc, #596]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80154de:	f001 f80b 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80154e2:	eef0 8a40 	vmov.f32	s17, s0
 80154e6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154ea:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	3304      	adds	r3, #4
 80154f2:	2101      	movs	r1, #1
 80154f4:	4618      	mov	r0, r3
 80154f6:	f001 f8bc 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80154fa:	4603      	mov	r3, r0
 80154fc:	edd3 7a00 	vldr	s15, [r3]
 8015500:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015504:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015508:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801550c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015510:	edc3 7a04 	vstr	s15, [r3, #16]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 8015514:	2101      	movs	r1, #1
 8015516:	4887      	ldr	r0, [pc, #540]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015518:	f000 ffee 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801551c:	eef0 7a40 	vmov.f32	s15, s0
 8015520:	eeb1 8a67 	vneg.f32	s16, s15
 8015524:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015528:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	3304      	adds	r3, #4
 8015530:	2101      	movs	r1, #1
 8015532:	4618      	mov	r0, r3
 8015534:	f001 f89d 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015538:	4603      	mov	r3, r0
 801553a:	edd3 7a00 	vldr	s15, [r3]
 801553e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015542:	2102      	movs	r1, #2
 8015544:	487b      	ldr	r0, [pc, #492]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015546:	f000 ffd7 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801554a:	eef0 8a40 	vmov.f32	s17, s0
 801554e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015552:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	3304      	adds	r3, #4
 801555a:	2100      	movs	r1, #0
 801555c:	4618      	mov	r0, r3
 801555e:	f001 f888 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015562:	4603      	mov	r3, r0
 8015564:	edd3 7a00 	vldr	s15, [r3]
 8015568:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801556c:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015570:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015574:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015578:	edc3 7a05 	vstr	s15, [r3, #20]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 801557c:	2101      	movs	r1, #1
 801557e:	486d      	ldr	r0, [pc, #436]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015580:	f000 ffba 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015584:	eeb0 8a40 	vmov.f32	s16, s0
 8015588:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801558c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	3304      	adds	r3, #4
 8015594:	2102      	movs	r1, #2
 8015596:	4618      	mov	r0, r3
 8015598:	f001 f86b 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801559c:	4603      	mov	r3, r0
 801559e:	edd3 7a00 	vldr	s15, [r3]
 80155a2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80155a6:	2102      	movs	r1, #2
 80155a8:	4862      	ldr	r0, [pc, #392]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80155aa:	f000 ffa5 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80155ae:	eef0 8a40 	vmov.f32	s17, s0
 80155b2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155b6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	3304      	adds	r3, #4
 80155be:	2103      	movs	r1, #3
 80155c0:	4618      	mov	r0, r3
 80155c2:	f001 f856 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80155c6:	4603      	mov	r3, r0
 80155c8:	edd3 7a00 	vldr	s15, [r3]
 80155cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80155d0:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80155d4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155d8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80155dc:	edc3 7a06 	vstr	s15, [r3, #24]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 80155e0:	2101      	movs	r1, #1
 80155e2:	4854      	ldr	r0, [pc, #336]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80155e4:	f000 ff88 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80155e8:	eef0 7a40 	vmov.f32	s15, s0
 80155ec:	eeb1 8a67 	vneg.f32	s16, s15
 80155f0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155f4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	3304      	adds	r3, #4
 80155fc:	2103      	movs	r1, #3
 80155fe:	4618      	mov	r0, r3
 8015600:	f001 f837 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015604:	4603      	mov	r3, r0
 8015606:	edd3 7a00 	vldr	s15, [r3]
 801560a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801560e:	2102      	movs	r1, #2
 8015610:	4848      	ldr	r0, [pc, #288]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015612:	f000 ff71 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015616:	eef0 8a40 	vmov.f32	s17, s0
 801561a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801561e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	3304      	adds	r3, #4
 8015626:	2102      	movs	r1, #2
 8015628:	4618      	mov	r0, r3
 801562a:	f001 f822 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801562e:	4603      	mov	r3, r0
 8015630:	edd3 7a00 	vldr	s15, [r3]
 8015634:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015638:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 801563c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015640:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015644:	edc3 7a07 	vstr	s15, [r3, #28]
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 8015648:	2101      	movs	r1, #1
 801564a:	483a      	ldr	r0, [pc, #232]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801564c:	f000 ff54 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015650:	eef0 7a40 	vmov.f32	s15, s0
 8015654:	eeb1 8a67 	vneg.f32	s16, s15
 8015658:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801565c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3304      	adds	r3, #4
 8015664:	2101      	movs	r1, #1
 8015666:	4618      	mov	r0, r3
 8015668:	f001 f803 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801566c:	4603      	mov	r3, r0
 801566e:	edd3 7a00 	vldr	s15, [r3]
 8015672:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015676:	2102      	movs	r1, #2
 8015678:	482e      	ldr	r0, [pc, #184]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801567a:	f000 ff3d 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801567e:	eef0 8a40 	vmov.f32	s17, s0
 8015682:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015686:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	3304      	adds	r3, #4
 801568e:	2100      	movs	r1, #0
 8015690:	4618      	mov	r0, r3
 8015692:	f000 ffee 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015696:	4603      	mov	r3, r0
 8015698:	edd3 7a00 	vldr	s15, [r3]
 801569c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80156a0:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80156a4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80156ac:	edc3 7a08 	vstr	s15, [r3, #32]
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 80156b0:	2101      	movs	r1, #1
 80156b2:	4820      	ldr	r0, [pc, #128]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80156b4:	f000 ff20 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80156b8:	eef0 7a40 	vmov.f32	s15, s0
 80156bc:	eeb1 8a67 	vneg.f32	s16, s15
 80156c0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156c4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	3304      	adds	r3, #4
 80156cc:	2100      	movs	r1, #0
 80156ce:	4618      	mov	r0, r3
 80156d0:	f000 ffcf 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80156d4:	4603      	mov	r3, r0
 80156d6:	edd3 7a00 	vldr	s15, [r3]
 80156da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80156de:	2102      	movs	r1, #2
 80156e0:	4814      	ldr	r0, [pc, #80]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80156e2:	f000 ff09 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80156e6:	eef0 8a40 	vmov.f32	s17, s0
 80156ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3304      	adds	r3, #4
 80156f6:	2101      	movs	r1, #1
 80156f8:	4618      	mov	r0, r3
 80156fa:	f000 ffba 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80156fe:	4603      	mov	r3, r0
 8015700:	edd3 7a00 	vldr	s15, [r3]
 8015704:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015708:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 801570c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015710:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015714:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 8015718:	2101      	movs	r1, #1
 801571a:	4806      	ldr	r0, [pc, #24]	; (8015734 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801571c:	f000 feec 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015720:	eeb0 8a40 	vmov.f32	s16, s0
 8015724:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015728:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	3304      	adds	r3, #4
 8015730:	2103      	movs	r1, #3
 8015732:	e001      	b.n	8015738 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x844>
 8015734:	24005508 	.word	0x24005508
 8015738:	4618      	mov	r0, r3
 801573a:	f000 ff9a 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 801573e:	4603      	mov	r3, r0
 8015740:	edd3 7a00 	vldr	s15, [r3]
 8015744:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015748:	2102      	movs	r1, #2
 801574a:	48c5      	ldr	r0, [pc, #788]	; (8015a60 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 801574c:	f000 fed4 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015750:	eef0 8a40 	vmov.f32	s17, s0
 8015754:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015758:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	3304      	adds	r3, #4
 8015760:	2102      	movs	r1, #2
 8015762:	4618      	mov	r0, r3
 8015764:	f000 ff85 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 8015768:	4603      	mov	r3, r0
 801576a:	edd3 7a00 	vldr	s15, [r3]
 801576e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015772:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015776:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801577a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801577e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 8015782:	2101      	movs	r1, #1
 8015784:	48b6      	ldr	r0, [pc, #728]	; (8015a60 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 8015786:	f000 feb7 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801578a:	eeb0 8a40 	vmov.f32	s16, s0
 801578e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015792:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	3304      	adds	r3, #4
 801579a:	2102      	movs	r1, #2
 801579c:	4618      	mov	r0, r3
 801579e:	f000 ff68 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80157a2:	4603      	mov	r3, r0
 80157a4:	edd3 7a00 	vldr	s15, [r3]
 80157a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80157ac:	2102      	movs	r1, #2
 80157ae:	48ac      	ldr	r0, [pc, #688]	; (8015a60 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 80157b0:	f000 fea2 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80157b4:	eef0 8a40 	vmov.f32	s17, s0
 80157b8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80157bc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	3304      	adds	r3, #4
 80157c4:	2103      	movs	r1, #3
 80157c6:	4618      	mov	r0, r3
 80157c8:	f000 ff53 	bl	8016672 <_ZN3Mat8V_VectorILt4EEclEt>
 80157cc:	4603      	mov	r3, r0
 80157ce:	edd3 7a00 	vldr	s15, [r3]
 80157d2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80157d6:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80157da:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80157de:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80157e2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80157e6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80157ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80157ee:	4611      	mov	r1, r2
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7fd ff3b 	bl	801366c <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
	static Matrix<3, 3> R{0.0f};
 80157f6:	4b9b      	ldr	r3, [pc, #620]	; (8015a64 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f3bf 8f5b 	dmb	ish
 80157fe:	f003 0301 	and.w	r3, r3, #1
 8015802:	2b00      	cmp	r3, #0
 8015804:	bf0c      	ite	eq
 8015806:	2301      	moveq	r3, #1
 8015808:	2300      	movne	r3, #0
 801580a:	b2db      	uxtb	r3, r3
 801580c:	2b00      	cmp	r3, #0
 801580e:	d012      	beq.n	8015836 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x942>
 8015810:	4894      	ldr	r0, [pc, #592]	; (8015a64 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 8015812:	f007 ffc9 	bl	801d7a8 <__cxa_guard_acquire>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	bf14      	ite	ne
 801581c:	2301      	movne	r3, #1
 801581e:	2300      	moveq	r3, #0
 8015820:	b2db      	uxtb	r3, r3
 8015822:	2b00      	cmp	r3, #0
 8015824:	d007      	beq.n	8015836 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x942>
 8015826:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8015a68 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb74>
 801582a:	4890      	ldr	r0, [pc, #576]	; (8015a6c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 801582c:	f7f8 fc09 	bl	800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8015830:	488c      	ldr	r0, [pc, #560]	; (8015a64 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 8015832:	f007 ffc5 	bl	801d7c0 <__cxa_guard_release>
	R(0,0) = meassurementCov(3,3); R(1,1) = meassurementCov(4,4); R(2,2) = meassurementCov(5,5);
 8015836:	2200      	movs	r2, #0
 8015838:	2100      	movs	r1, #0
 801583a:	488c      	ldr	r0, [pc, #560]	; (8015a6c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 801583c:	f7f8 fc1e 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8015840:	4604      	mov	r4, r0
 8015842:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015846:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801584a:	2203      	movs	r2, #3
 801584c:	2103      	movs	r1, #3
 801584e:	6818      	ldr	r0, [r3, #0]
 8015850:	f7fa fe05 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8015854:	eef0 7a40 	vmov.f32	s15, s0
 8015858:	edc4 7a00 	vstr	s15, [r4]
 801585c:	2201      	movs	r2, #1
 801585e:	2101      	movs	r1, #1
 8015860:	4882      	ldr	r0, [pc, #520]	; (8015a6c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 8015862:	f7f8 fc0b 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8015866:	4604      	mov	r4, r0
 8015868:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801586c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015870:	2204      	movs	r2, #4
 8015872:	2104      	movs	r1, #4
 8015874:	6818      	ldr	r0, [r3, #0]
 8015876:	f7fa fdf2 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 801587a:	eef0 7a40 	vmov.f32	s15, s0
 801587e:	edc4 7a00 	vstr	s15, [r4]
 8015882:	2202      	movs	r2, #2
 8015884:	2102      	movs	r1, #2
 8015886:	4879      	ldr	r0, [pc, #484]	; (8015a6c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 8015888:	f7f8 fbf8 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 801588c:	4604      	mov	r4, r0
 801588e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015892:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8015896:	2205      	movs	r2, #5
 8015898:	2105      	movs	r1, #5
 801589a:	6818      	ldr	r0, [r3, #0]
 801589c:	f7fa fddf 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80158a0:	eef0 7a40 	vmov.f32	s15, s0
 80158a4:	edc4 7a00 	vstr	s15, [r4]
	auto S = H * _stateCovMatrix * H.Transposed() + R;
 80158a8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80158ac:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f103 0214 	add.w	r2, r3, #20
 80158b6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80158ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80158be:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80158c2:	4618      	mov	r0, r3
 80158c4:	f7fd fee9 	bl	801369a <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 80158c8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80158cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80158d0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80158d4:	4611      	mov	r1, r2
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7fd fef2 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80158dc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80158e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80158e4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80158e8:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7fd ff17 	bl	8013720 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 80158f2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80158f6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80158fa:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80158fe:	4a5b      	ldr	r2, [pc, #364]	; (8015a6c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 8015900:	4618      	mov	r0, r3
 8015902:	f7fd ff20 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8015906:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801590a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f103 0414 	add.w	r4, r3, #20
 8015914:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801591c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8015920:	4611      	mov	r1, r2
 8015922:	4618      	mov	r0, r3
 8015924:	f7fd fecc 	bl	80136c0 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8015928:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801592c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8015930:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8015934:	4621      	mov	r1, r4
 8015936:	4618      	mov	r0, r3
 8015938:	f7fd ff1e 	bl	8013778 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 801593c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015940:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 8015944:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8015948:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801594c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015950:	6819      	ldr	r1, [r3, #0]
 8015952:	f000 fb97 	bl	8016084 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8015956:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801595a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801595e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8015962:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8015966:	4618      	mov	r0, r3
 8015968:	f7fd ff19 	bl	801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 801596c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015970:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	1d1c      	adds	r4, r3, #4
 8015978:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801597c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8015980:	4611      	mov	r1, r2
 8015982:	4618      	mov	r0, r3
 8015984:	f7fb f94f 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8015988:	eef0 6a40 	vmov.f32	s13, s0
 801598c:	eeb0 7a60 	vmov.f32	s14, s1
 8015990:	eef0 7a41 	vmov.f32	s15, s2
 8015994:	edc7 6a93 	vstr	s13, [r7, #588]	; 0x24c
 8015998:	ed87 7a94 	vstr	s14, [r7, #592]	; 0x250
 801599c:	edc7 7a95 	vstr	s15, [r7, #596]	; 0x254
 80159a0:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80159a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7fd ff0a 	bl	80137c4 <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80159b0:	eeb0 6a40 	vmov.f32	s12, s0
 80159b4:	eef0 6a60 	vmov.f32	s13, s1
 80159b8:	eeb0 7a41 	vmov.f32	s14, s2
 80159bc:	eef0 7a61 	vmov.f32	s15, s3
 80159c0:	ed87 6a8f 	vstr	s12, [r7, #572]	; 0x23c
 80159c4:	edc7 6a90 	vstr	s13, [r7, #576]	; 0x240
 80159c8:	ed87 7a91 	vstr	s14, [r7, #580]	; 0x244
 80159cc:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
 80159d0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80159d4:	4619      	mov	r1, r3
 80159d6:	4620      	mov	r0, r4
 80159d8:	f7f9 fce5 	bl	800f3a6 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<OrientationEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 80159dc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80159e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f8 fa11 	bl	800de0c <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 80159ea:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80159ee:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80159f2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fd fde2 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80159fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015a00:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8015a04:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7f9 fd14 	bl	800f436 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8015a0e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015a12:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f103 0214 	add.w	r2, r3, #20
 8015a1c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015a20:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015a24:	681c      	ldr	r4, [r3, #0]
 8015a26:	463b      	mov	r3, r7
 8015a28:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f9 fb7f 	bl	800f130 <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8015a32:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015a36:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8015a3a:	3414      	adds	r4, #20
 8015a3c:	461d      	mov	r5, r3
 8015a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015a52:	bf00      	nop
 8015a54:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	ecbd 8b04 	vpop	{d8-d9}
 8015a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a60:	24005508 	.word	0x24005508
 8015a64:	24005560 	.word	0x24005560
 8015a68:	00000000 	.word	0x00000000
 8015a6c:	2400553c 	.word	0x2400553c

08015a70 <_ZNK10Algorithms14OrientationEKF2_fERKN3Mat8V_VectorILt3EEEf>:

OrientationEKF::StateVec OrientationEKF::_f(const ControlVec& controlVec, float time) const
{
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	ed2d 8b02 	vpush	{d8}
 8015a76:	b097      	sub	sp, #92	; 0x5c
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	61f8      	str	r0, [r7, #28]
 8015a7c:	61b9      	str	r1, [r7, #24]
 8015a7e:	ed87 0a05 	vstr	s0, [r7, #20]
	const float dt = time - _time;
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015a88:	ed97 7a05 	vldr	s14, [r7, #20]
 8015a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a90:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	const float dt_2 = dt*0.5f;
 8015a94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015a98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015aa0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	return StateVec{{
		_state(0) - dt_2*controlVec(0)*_state(1) - dt_2*controlVec(1)*_state(2) - dt_2*controlVec(2)*_state(3),
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	3304      	adds	r3, #4
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 fe1e 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015ab0:	eef0 8a40 	vmov.f32	s17, s0
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	69b8      	ldr	r0, [r7, #24]
 8015ab8:	f000 fd1e 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015abc:	eeb0 7a40 	vmov.f32	s14, s0
 8015ac0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015ac4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	3304      	adds	r3, #4
 8015acc:	2101      	movs	r1, #1
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 fe0c 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015ad4:	eef0 7a40 	vmov.f32	s15, s0
 8015ad8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015adc:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8015ae0:	2101      	movs	r1, #1
 8015ae2:	69b8      	ldr	r0, [r7, #24]
 8015ae4:	f000 fd08 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8015aec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015af0:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015af4:	69fb      	ldr	r3, [r7, #28]
 8015af6:	3304      	adds	r3, #4
 8015af8:	2102      	movs	r1, #2
 8015afa:	4618      	mov	r0, r3
 8015afc:	f000 fdf6 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015b00:	eef0 7a40 	vmov.f32	s15, s0
 8015b04:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015b08:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015b0c:	2102      	movs	r1, #2
 8015b0e:	69b8      	ldr	r0, [r7, #24]
 8015b10:	f000 fcf2 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b14:	eeb0 7a40 	vmov.f32	s14, s0
 8015b18:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b1c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	3304      	adds	r3, #4
 8015b24:	2103      	movs	r1, #3
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 fde0 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015b2c:	eef0 7a40 	vmov.f32	s15, s0
 8015b30:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015b34:	ee78 7a67 	vsub.f32	s15, s16, s15
	return StateVec{{
 8015b38:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_state(1) + dt_2*controlVec(0)*_state(0) - dt_2*controlVec(1)*_state(3) + dt_2*controlVec(2)*_state(2),
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	3304      	adds	r3, #4
 8015b40:	2101      	movs	r1, #1
 8015b42:	4618      	mov	r0, r3
 8015b44:	f000 fdd2 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015b48:	eef0 8a40 	vmov.f32	s17, s0
 8015b4c:	2100      	movs	r1, #0
 8015b4e:	69b8      	ldr	r0, [r7, #24]
 8015b50:	f000 fcd2 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b54:	eeb0 7a40 	vmov.f32	s14, s0
 8015b58:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b5c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	3304      	adds	r3, #4
 8015b64:	2100      	movs	r1, #0
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 fdc0 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015b6c:	eef0 7a40 	vmov.f32	s15, s0
 8015b70:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015b74:	ee38 8aa7 	vadd.f32	s16, s17, s15
 8015b78:	2101      	movs	r1, #1
 8015b7a:	69b8      	ldr	r0, [r7, #24]
 8015b7c:	f000 fcbc 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b80:	eeb0 7a40 	vmov.f32	s14, s0
 8015b84:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b88:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	2103      	movs	r1, #3
 8015b92:	4618      	mov	r0, r3
 8015b94:	f000 fdaa 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015b98:	eef0 7a40 	vmov.f32	s15, s0
 8015b9c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015ba0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015ba4:	2102      	movs	r1, #2
 8015ba6:	69b8      	ldr	r0, [r7, #24]
 8015ba8:	f000 fca6 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015bac:	eeb0 7a40 	vmov.f32	s14, s0
 8015bb0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015bb4:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	2102      	movs	r1, #2
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f000 fd94 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015bc4:	eef0 7a40 	vmov.f32	s15, s0
 8015bc8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015bcc:	ee78 7a27 	vadd.f32	s15, s16, s15
	return StateVec{{
 8015bd0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_state(2) + dt_2*controlVec(0)*_state(3) + dt_2*controlVec(1)*_state(0) - dt_2*controlVec(2)*_state(1),
 8015bd4:	69fb      	ldr	r3, [r7, #28]
 8015bd6:	3304      	adds	r3, #4
 8015bd8:	2102      	movs	r1, #2
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f000 fd86 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015be0:	eef0 8a40 	vmov.f32	s17, s0
 8015be4:	2100      	movs	r1, #0
 8015be6:	69b8      	ldr	r0, [r7, #24]
 8015be8:	f000 fc86 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015bec:	eeb0 7a40 	vmov.f32	s14, s0
 8015bf0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015bf4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	3304      	adds	r3, #4
 8015bfc:	2103      	movs	r1, #3
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f000 fd74 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c04:	eef0 7a40 	vmov.f32	s15, s0
 8015c08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015c0c:	ee38 8aa7 	vadd.f32	s16, s17, s15
 8015c10:	2101      	movs	r1, #1
 8015c12:	69b8      	ldr	r0, [r7, #24]
 8015c14:	f000 fc70 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015c18:	eeb0 7a40 	vmov.f32	s14, s0
 8015c1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c20:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015c24:	69fb      	ldr	r3, [r7, #28]
 8015c26:	3304      	adds	r3, #4
 8015c28:	2100      	movs	r1, #0
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f000 fd5e 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c30:	eef0 7a40 	vmov.f32	s15, s0
 8015c34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015c38:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015c3c:	2102      	movs	r1, #2
 8015c3e:	69b8      	ldr	r0, [r7, #24]
 8015c40:	f000 fc5a 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015c44:	eeb0 7a40 	vmov.f32	s14, s0
 8015c48:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c4c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	3304      	adds	r3, #4
 8015c54:	2101      	movs	r1, #1
 8015c56:	4618      	mov	r0, r3
 8015c58:	f000 fd48 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c5c:	eef0 7a40 	vmov.f32	s15, s0
 8015c60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015c64:	ee78 7a67 	vsub.f32	s15, s16, s15
	return StateVec{{
 8015c68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_state(3) - dt_2*controlVec(0)*_state(2) + dt_2*controlVec(1)*_state(1) + dt_2*controlVec(2)*_state(0)
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	3304      	adds	r3, #4
 8015c70:	2103      	movs	r1, #3
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fd3a 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c78:	eef0 8a40 	vmov.f32	s17, s0
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	69b8      	ldr	r0, [r7, #24]
 8015c80:	f000 fc3a 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015c84:	eeb0 7a40 	vmov.f32	s14, s0
 8015c88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c8c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	3304      	adds	r3, #4
 8015c94:	2102      	movs	r1, #2
 8015c96:	4618      	mov	r0, r3
 8015c98:	f000 fd28 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c9c:	eef0 7a40 	vmov.f32	s15, s0
 8015ca0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015ca4:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8015ca8:	2101      	movs	r1, #1
 8015caa:	69b8      	ldr	r0, [r7, #24]
 8015cac:	f000 fc24 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8015cb4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015cb8:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 fd12 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015cc8:	eef0 7a40 	vmov.f32	s15, s0
 8015ccc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015cd0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015cd4:	2102      	movs	r1, #2
 8015cd6:	69b8      	ldr	r0, [r7, #24]
 8015cd8:	f000 fc0e 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8015ce0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015ce4:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015ce8:	69fb      	ldr	r3, [r7, #28]
 8015cea:	3304      	adds	r3, #4
 8015cec:	2100      	movs	r1, #0
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f000 fcfc 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015cf4:	eef0 7a40 	vmov.f32	s15, s0
 8015cf8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015cfc:	ee78 7a27 	vadd.f32	s15, s16, s15
	return StateVec{{
 8015d00:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8015d04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015d08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 fd01 	bl	8016716 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
	}};
 8015d14:	f107 0420 	add.w	r4, r7, #32
 8015d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015d22:	6a38      	ldr	r0, [r7, #32]
 8015d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2a:	ee06 0a10 	vmov	s12, r0
 8015d2e:	ee06 1a90 	vmov	s13, r1
 8015d32:	ee07 2a10 	vmov	s14, r2
 8015d36:	ee07 3a90 	vmov	s15, r3
}
 8015d3a:	eeb0 0a46 	vmov.f32	s0, s12
 8015d3e:	eef0 0a66 	vmov.f32	s1, s13
 8015d42:	eeb0 1a47 	vmov.f32	s2, s14
 8015d46:	eef0 1a67 	vmov.f32	s3, s15
 8015d4a:	375c      	adds	r7, #92	; 0x5c
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	ecbd 8b02 	vpop	{d8}
 8015d52:	bd90      	pop	{r4, r7, pc}

08015d54 <_ZNK10Algorithms14OrientationEKF2_FERKN3Mat8V_VectorILt3EEEf>:

OrientationEKF::StateCovarianceMatrix OrientationEKF::_F(const ControlVec& controlVec, float time) const
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	ed2d 8b02 	vpush	{d8}
 8015d5a:	b096      	sub	sp, #88	; 0x58
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	60f8      	str	r0, [r7, #12]
 8015d60:	60b9      	str	r1, [r7, #8]
 8015d62:	607a      	str	r2, [r7, #4]
 8015d64:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015d6e:	ed97 7a00 	vldr	s14, [r7]
 8015d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d76:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	const float dt_2 = dt*0.5f;
 8015d7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015d7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d86:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	return StateCovarianceMatrix{{
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
	}};
 8015d8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015d8e:	613b      	str	r3, [r7, #16]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015d90:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015d94:	eeb1 8a67 	vneg.f32	s16, s15
 8015d98:	2100      	movs	r1, #0
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 fbac 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015da0:	eef0 7a40 	vmov.f32	s15, s0
 8015da4:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015da8:	edc7 7a05 	vstr	s15, [r7, #20]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015dac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015db0:	eeb1 8a67 	vneg.f32	s16, s15
 8015db4:	2101      	movs	r1, #1
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 fb9e 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015dbc:	eef0 7a40 	vmov.f32	s15, s0
 8015dc0:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015dc4:	edc7 7a06 	vstr	s15, [r7, #24]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015dc8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015dcc:	eeb1 8a67 	vneg.f32	s16, s15
 8015dd0:	2102      	movs	r1, #2
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f000 fb90 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015dd8:	eef0 7a40 	vmov.f32	s15, s0
 8015ddc:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015de0:	edc7 7a07 	vstr	s15, [r7, #28]
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015de4:	2100      	movs	r1, #0
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f000 fb86 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015dec:	eeb0 7a40 	vmov.f32	s14, s0
 8015df0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015df4:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015df8:	edc7 7a08 	vstr	s15, [r7, #32]
 8015dfc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015e00:	627b      	str	r3, [r7, #36]	; 0x24
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015e02:	2102      	movs	r1, #2
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 fb77 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8015e0e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e12:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015e16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015e1a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e1e:	eeb1 8a67 	vneg.f32	s16, s15
 8015e22:	2101      	movs	r1, #1
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f000 fb67 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e2a:	eef0 7a40 	vmov.f32	s15, s0
 8015e2e:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015e32:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015e36:	2101      	movs	r1, #1
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f000 fb5d 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8015e42:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e46:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015e4a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015e4e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e52:	eeb1 8a67 	vneg.f32	s16, s15
 8015e56:	2102      	movs	r1, #2
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 fb4d 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e5e:	eef0 7a40 	vmov.f32	s15, s0
 8015e62:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015e66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8015e6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015e6e:	63bb      	str	r3, [r7, #56]	; 0x38
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015e70:	2100      	movs	r1, #0
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f000 fb40 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e78:	eeb0 7a40 	vmov.f32	s14, s0
 8015e7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e80:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015e84:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015e88:	2102      	movs	r1, #2
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 fb34 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015e90:	eeb0 7a40 	vmov.f32	s14, s0
 8015e94:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015e98:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015e9c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015ea0:	2101      	movs	r1, #1
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fb28 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015ea8:	eeb0 7a40 	vmov.f32	s14, s0
 8015eac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015eb4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015eb8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015ebc:	eeb1 8a67 	vneg.f32	s16, s15
 8015ec0:	2100      	movs	r1, #0
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 fb18 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015ec8:	eef0 7a40 	vmov.f32	s15, s0
 8015ecc:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015ed0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8015ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015eda:	f107 0310 	add.w	r3, r7, #16
 8015ede:	4619      	mov	r1, r3
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f7fd fb9f 	bl	8013624 <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
}
 8015ee6:	68f8      	ldr	r0, [r7, #12]
 8015ee8:	3758      	adds	r7, #88	; 0x58
 8015eea:	46bd      	mov	sp, r7
 8015eec:	ecbd 8b02 	vpop	{d8}
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <_ZNK10Algorithms14OrientationEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

OrientationEKF::StateCovarianceMatrix OrientationEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b0b8      	sub	sp, #224	; 0xe0
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6178      	str	r0, [r7, #20]
 8015efa:	6139      	str	r1, [r7, #16]
 8015efc:	60fa      	str	r2, [r7, #12]
 8015efe:	60bb      	str	r3, [r7, #8]
 8015f00:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015f0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8015f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f12:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	const float dt_2 = dt*0.5f;
 8015f16:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8015f1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f22:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	Matrix<OrientationEKF_stateLen, OrientationEKF_controlLen> W{{
		-_state(1), -_state(2), -_state(3),
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	3304      	adds	r3, #4
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f000 fbdd 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015f32:	eef0 7a40 	vmov.f32	s15, s0
 8015f36:	eef1 7a67 	vneg.f32	s15, s15
		_state(0), -_state(3), _state(2),
		_state(3), _state(0), -_state(1),
		-_state(2), _state(1), _state(0)
	}};
 8015f3a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		-_state(1), -_state(2), -_state(3),
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	3304      	adds	r3, #4
 8015f42:	2102      	movs	r1, #2
 8015f44:	4618      	mov	r0, r3
 8015f46:	f000 fbd1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015f4a:	eef0 7a40 	vmov.f32	s15, s0
 8015f4e:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015f52:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		-_state(1), -_state(2), -_state(3),
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	3304      	adds	r3, #4
 8015f5a:	2103      	movs	r1, #3
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f000 fbc5 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015f62:	eef0 7a40 	vmov.f32	s15, s0
 8015f66:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015f6a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_state(0), -_state(3), _state(2),
 8015f6e:	693b      	ldr	r3, [r7, #16]
 8015f70:	3304      	adds	r3, #4
 8015f72:	2100      	movs	r1, #0
 8015f74:	4618      	mov	r0, r3
 8015f76:	f000 fbb9 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015f7a:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015f7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_state(0), -_state(3), _state(2),
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	3304      	adds	r3, #4
 8015f86:	2103      	movs	r1, #3
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 fbaf 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015f8e:	eef0 7a40 	vmov.f32	s15, s0
 8015f92:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015f96:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_state(0), -_state(3), _state(2),
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	3304      	adds	r3, #4
 8015f9e:	2102      	movs	r1, #2
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f000 fba3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015fa6:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015faa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_state(3), _state(0), -_state(1),
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	3304      	adds	r3, #4
 8015fb2:	2103      	movs	r1, #3
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f000 fb99 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015fba:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015fbe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_state(3), _state(0), -_state(1),
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f000 fb8f 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015fce:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015fd2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_state(3), _state(0), -_state(1),
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	3304      	adds	r3, #4
 8015fda:	2101      	movs	r1, #1
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f000 fb85 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015fe2:	eef0 7a40 	vmov.f32	s15, s0
 8015fe6:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015fea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		-_state(2), _state(1), _state(0)
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	3304      	adds	r3, #4
 8015ff2:	2102      	movs	r1, #2
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f000 fb79 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8015ffa:	eef0 7a40 	vmov.f32	s15, s0
 8015ffe:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8016002:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		-_state(2), _state(1), _state(0)
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	3304      	adds	r3, #4
 801600a:	2101      	movs	r1, #1
 801600c:	4618      	mov	r0, r3
 801600e:	f000 fb6d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8016012:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8016016:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		-_state(2), _state(1), _state(0)
 801601a:	693b      	ldr	r3, [r7, #16]
 801601c:	3304      	adds	r3, #4
 801601e:	2100      	movs	r1, #0
 8016020:	4618      	mov	r0, r3
 8016022:	f000 fb63 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8016026:	eef0 7a40 	vmov.f32	s15, s0
	}};
 801602a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 801602e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016032:	f107 0318 	add.w	r3, r7, #24
 8016036:	4611      	mov	r1, r2
 8016038:	4618      	mov	r0, r3
 801603a:	f7fd fa7a 	bl	8013532 <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
	W *= dt_2;
 801603e:	f107 0318 	add.w	r3, r7, #24
 8016042:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8016046:	4618      	mov	r0, r3
 8016048:	f000 fb74 	bl	8016734 <_ZN3Mat6MatrixILt4ELt3EEmLEf>
	return W*controlCov*W.Transposed();
 801604c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016050:	f107 0118 	add.w	r1, r7, #24
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	4618      	mov	r0, r3
 8016058:	f7fd fba1 	bl	801379e <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801605c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8016060:	f107 0218 	add.w	r2, r7, #24
 8016064:	4611      	mov	r1, r2
 8016066:	4618      	mov	r0, r3
 8016068:	f7fd fa7a 	bl	8013560 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016072:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8016076:	4618      	mov	r0, r3
 8016078:	f7fd faa2 	bl	80135c0 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
}
 801607c:	6978      	ldr	r0, [r7, #20]
 801607e:	37e0      	adds	r7, #224	; 0xe0
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> OrientationEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 8016084:	b5b0      	push	{r4, r5, r7, lr}
 8016086:	b090      	sub	sp, #64	; 0x40
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8016090:	2200      	movs	r2, #0
 8016092:	2100      	movs	r1, #0
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7f8 fa32 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801609a:	eef0 7a40 	vmov.f32	s15, s0
 801609e:	4bd4      	ldr	r3, [pc, #848]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80160a0:	edc3 7a00 	vstr	s15, [r3]
 80160a4:	2201      	movs	r2, #1
 80160a6:	2100      	movs	r1, #0
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7f8 fa28 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80160ae:	eef0 7a40 	vmov.f32	s15, s0
 80160b2:	4bd0      	ldr	r3, [pc, #832]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80160b4:	edc3 7a00 	vstr	s15, [r3]
 80160b8:	2202      	movs	r2, #2
 80160ba:	2100      	movs	r1, #0
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7f8 fa1e 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80160c2:	eef0 7a40 	vmov.f32	s15, s0
 80160c6:	4bcc      	ldr	r3, [pc, #816]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80160c8:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 80160cc:	2200      	movs	r2, #0
 80160ce:	2101      	movs	r1, #1
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f7f8 fa14 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80160d6:	eef0 7a40 	vmov.f32	s15, s0
 80160da:	4bc8      	ldr	r3, [pc, #800]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80160dc:	edc3 7a00 	vstr	s15, [r3]
 80160e0:	2201      	movs	r2, #1
 80160e2:	2101      	movs	r1, #1
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f7f8 fa0a 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80160ea:	eef0 7a40 	vmov.f32	s15, s0
 80160ee:	4bc4      	ldr	r3, [pc, #784]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80160f0:	edc3 7a00 	vstr	s15, [r3]
 80160f4:	2202      	movs	r2, #2
 80160f6:	2101      	movs	r1, #1
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f7f8 fa00 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80160fe:	eef0 7a40 	vmov.f32	s15, s0
 8016102:	4bc0      	ldr	r3, [pc, #768]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8016104:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 8016108:	2200      	movs	r2, #0
 801610a:	2102      	movs	r1, #2
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f7f8 f9f6 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8016112:	eef0 7a40 	vmov.f32	s15, s0
 8016116:	4bbc      	ldr	r3, [pc, #752]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8016118:	edc3 7a00 	vstr	s15, [r3]
 801611c:	2201      	movs	r2, #1
 801611e:	2102      	movs	r1, #2
 8016120:	6878      	ldr	r0, [r7, #4]
 8016122:	f7f8 f9ec 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8016126:	eef0 7a40 	vmov.f32	s15, s0
 801612a:	4bb8      	ldr	r3, [pc, #736]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 801612c:	edc3 7a00 	vstr	s15, [r3]
 8016130:	2202      	movs	r2, #2
 8016132:	2102      	movs	r1, #2
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f7f8 f9e2 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801613a:	eef0 7a40 	vmov.f32	s15, s0
 801613e:	4bb4      	ldr	r3, [pc, #720]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016140:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8016144:	4baa      	ldr	r3, [pc, #680]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016146:	ed93 7a00 	vldr	s14, [r3]
 801614a:	4bad      	ldr	r3, [pc, #692]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801614c:	edd3 7a00 	vldr	s15, [r3]
 8016150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016154:	4bae      	ldr	r3, [pc, #696]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016156:	edd3 7a00 	vldr	s15, [r3]
 801615a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801615e:	4ba4      	ldr	r3, [pc, #656]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016160:	edd3 6a00 	vldr	s13, [r3]
 8016164:	4ba7      	ldr	r3, [pc, #668]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8016166:	edd3 7a00 	vldr	s15, [r3]
 801616a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801616e:	4ba7      	ldr	r3, [pc, #668]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8016170:	edd3 7a00 	vldr	s15, [r3]
 8016174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016178:	ee37 7a67 	vsub.f32	s14, s14, s15
 801617c:	4b9d      	ldr	r3, [pc, #628]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801617e:	edd3 6a00 	vldr	s13, [r3]
 8016182:	4b9e      	ldr	r3, [pc, #632]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8016184:	edd3 7a00 	vldr	s15, [r3]
 8016188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801618c:	4ba0      	ldr	r3, [pc, #640]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 801618e:	edd3 7a00 	vldr	s15, [r3]
 8016192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016196:	ee37 7a67 	vsub.f32	s14, s14, s15
 801619a:	4b96      	ldr	r3, [pc, #600]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801619c:	edd3 6a00 	vldr	s13, [r3]
 80161a0:	4b98      	ldr	r3, [pc, #608]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80161a2:	edd3 7a00 	vldr	s15, [r3]
 80161a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80161aa:	4b97      	ldr	r3, [pc, #604]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80161ac:	edd3 7a00 	vldr	s15, [r3]
 80161b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161b8:	4b8f      	ldr	r3, [pc, #572]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80161ba:	edd3 6a00 	vldr	s13, [r3]
 80161be:	4b8f      	ldr	r3, [pc, #572]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80161c0:	edd3 7a00 	vldr	s15, [r3]
 80161c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80161c8:	4b90      	ldr	r3, [pc, #576]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80161ca:	edd3 7a00 	vldr	s15, [r3]
 80161ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161d6:	4b88      	ldr	r3, [pc, #544]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80161d8:	edd3 6a00 	vldr	s13, [r3]
 80161dc:	4b88      	ldr	r3, [pc, #544]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80161de:	edd3 7a00 	vldr	s15, [r3]
 80161e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80161e6:	4b88      	ldr	r3, [pc, #544]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80161e8:	edd3 7a00 	vldr	s15, [r3]
 80161ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 80161f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8016200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016204:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 8016208:	4b82      	ldr	r3, [pc, #520]	; (8016414 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f3bf 8f5b 	dmb	ish
 8016210:	f003 0301 	and.w	r3, r3, #1
 8016214:	2b00      	cmp	r3, #0
 8016216:	bf0c      	ite	eq
 8016218:	2301      	moveq	r3, #1
 801621a:	2300      	movne	r3, #0
 801621c:	b2db      	uxtb	r3, r3
 801621e:	2b00      	cmp	r3, #0
 8016220:	f000 810b 	beq.w	801643a <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 8016224:	487b      	ldr	r0, [pc, #492]	; (8016414 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8016226:	f007 fabf 	bl	801d7a8 <__cxa_guard_acquire>
 801622a:	4603      	mov	r3, r0
 801622c:	2b00      	cmp	r3, #0
 801622e:	bf14      	ite	ne
 8016230:	2301      	movne	r3, #1
 8016232:	2300      	moveq	r3, #0
 8016234:	b2db      	uxtb	r3, r3
 8016236:	2b00      	cmp	r3, #0
 8016238:	f000 80ff 	beq.w	801643a <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801623c:	4b70      	ldr	r3, [pc, #448]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801623e:	ed93 7a00 	vldr	s14, [r3]
 8016242:	4b73      	ldr	r3, [pc, #460]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016244:	edd3 7a00 	vldr	s15, [r3]
 8016248:	ee27 7a27 	vmul.f32	s14, s14, s15
 801624c:	4b6d      	ldr	r3, [pc, #436]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801624e:	edd3 6a00 	vldr	s13, [r3]
 8016252:	4b6e      	ldr	r3, [pc, #440]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8016254:	edd3 7a00 	vldr	s15, [r3]
 8016258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801625c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016260:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016264:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016268:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801626c:	4b61      	ldr	r3, [pc, #388]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801626e:	ed93 7a00 	vldr	s14, [r3]
 8016272:	4b67      	ldr	r3, [pc, #412]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016274:	edd3 7a00 	vldr	s15, [r3]
 8016278:	ee27 7a27 	vmul.f32	s14, s14, s15
 801627c:	4b5e      	ldr	r3, [pc, #376]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801627e:	edd3 6a00 	vldr	s13, [r3]
 8016282:	4b62      	ldr	r3, [pc, #392]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8016284:	edd3 7a00 	vldr	s15, [r3]
 8016288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801628c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016290:	eeb1 7a67 	vneg.f32	s14, s15
 8016294:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016298:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801629c:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 80162a0:	4b54      	ldr	r3, [pc, #336]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80162a2:	ed93 7a00 	vldr	s14, [r3]
 80162a6:	4b57      	ldr	r3, [pc, #348]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80162a8:	edd3 7a00 	vldr	s15, [r3]
 80162ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162b0:	4b51      	ldr	r3, [pc, #324]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80162b2:	edd3 6a00 	vldr	s13, [r3]
 80162b6:	4b52      	ldr	r3, [pc, #328]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80162b8:	edd3 7a00 	vldr	s15, [r3]
 80162bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80162c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80162c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80162c8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80162cc:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80162d0:	4b4a      	ldr	r3, [pc, #296]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80162d2:	ed93 7a00 	vldr	s14, [r3]
 80162d6:	4b4e      	ldr	r3, [pc, #312]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80162d8:	edd3 7a00 	vldr	s15, [r3]
 80162dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162e0:	4b48      	ldr	r3, [pc, #288]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80162e2:	edd3 6a00 	vldr	s13, [r3]
 80162e6:	4b48      	ldr	r3, [pc, #288]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80162e8:	edd3 7a00 	vldr	s15, [r3]
 80162ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80162f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162f4:	eeb1 7a67 	vneg.f32	s14, s15
 80162f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80162fc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016300:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8016304:	4b3a      	ldr	r3, [pc, #232]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016306:	ed93 7a00 	vldr	s14, [r3]
 801630a:	4b41      	ldr	r3, [pc, #260]	; (8016410 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 801630c:	edd3 7a00 	vldr	s15, [r3]
 8016310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016314:	4b38      	ldr	r3, [pc, #224]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8016316:	edd3 6a00 	vldr	s13, [r3]
 801631a:	4b3b      	ldr	r3, [pc, #236]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 801631c:	edd3 7a00 	vldr	s15, [r3]
 8016320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016328:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801632c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016330:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8016334:	4b2e      	ldr	r3, [pc, #184]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016336:	ed93 7a00 	vldr	s14, [r3]
 801633a:	4b32      	ldr	r3, [pc, #200]	; (8016404 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801633c:	edd3 7a00 	vldr	s15, [r3]
 8016340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016344:	4b2c      	ldr	r3, [pc, #176]	; (80163f8 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8016346:	edd3 6a00 	vldr	s13, [r3]
 801634a:	4b2c      	ldr	r3, [pc, #176]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801634c:	edd3 7a00 	vldr	s15, [r3]
 8016350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016358:	eeb1 7a67 	vneg.f32	s14, s15
 801635c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016360:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016364:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8016368:	4b24      	ldr	r3, [pc, #144]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801636a:	ed93 7a00 	vldr	s14, [r3]
 801636e:	4b27      	ldr	r3, [pc, #156]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8016370:	edd3 7a00 	vldr	s15, [r3]
 8016374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016378:	4b21      	ldr	r3, [pc, #132]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801637a:	edd3 6a00 	vldr	s13, [r3]
 801637e:	4b22      	ldr	r3, [pc, #136]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8016380:	edd3 7a00 	vldr	s15, [r3]
 8016384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016388:	ee37 7a67 	vsub.f32	s14, s14, s15
 801638c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016390:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016394:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8016398:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801639a:	ed93 7a00 	vldr	s14, [r3]
 801639e:	4b1b      	ldr	r3, [pc, #108]	; (801640c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80163a0:	edd3 7a00 	vldr	s15, [r3]
 80163a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80163a8:	4b12      	ldr	r3, [pc, #72]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80163aa:	edd3 6a00 	vldr	s13, [r3]
 80163ae:	4b16      	ldr	r3, [pc, #88]	; (8016408 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80163b0:	edd3 7a00 	vldr	s15, [r3]
 80163b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80163b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163bc:	eeb1 7a67 	vneg.f32	s14, s15
 80163c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80163c4:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80163c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 80163cc:	4b08      	ldr	r3, [pc, #32]	; (80163f0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80163ce:	ed93 7a00 	vldr	s14, [r3]
 80163d2:	4b0b      	ldr	r3, [pc, #44]	; (8016400 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80163d4:	edd3 7a00 	vldr	s15, [r3]
 80163d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80163dc:	4b05      	ldr	r3, [pc, #20]	; (80163f4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80163de:	edd3 6a00 	vldr	s13, [r3]
 80163e2:	4b06      	ldr	r3, [pc, #24]	; (80163fc <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80163e4:	edd3 7a00 	vldr	s15, [r3]
 80163e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80163ec:	e014      	b.n	8016418 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 80163ee:	bf00      	nop
 80163f0:	24005564 	.word	0x24005564
 80163f4:	24005568 	.word	0x24005568
 80163f8:	2400556c 	.word	0x2400556c
 80163fc:	24005570 	.word	0x24005570
 8016400:	24005574 	.word	0x24005574
 8016404:	24005578 	.word	0x24005578
 8016408:	2400557c 	.word	0x2400557c
 801640c:	24005580 	.word	0x24005580
 8016410:	24005584 	.word	0x24005584
 8016414:	240055ac 	.word	0x240055ac
 8016418:	ee37 7a67 	vsub.f32	s14, s14, s15
 801641c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016420:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016424:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8016428:	f107 0314 	add.w	r3, r7, #20
 801642c:	4619      	mov	r1, r3
 801642e:	480a      	ldr	r0, [pc, #40]	; (8016458 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8016430:	f7fa fbe4 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 8016434:	4809      	ldr	r0, [pc, #36]	; (801645c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 8016436:	f007 f9c3 	bl	801d7c0 <__cxa_guard_release>
	return result;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	4a06      	ldr	r2, [pc, #24]	; (8016458 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 801643e:	461c      	mov	r4, r3
 8016440:	4615      	mov	r5, r2
 8016442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801644a:	682b      	ldr	r3, [r5, #0]
 801644c:	6023      	str	r3, [r4, #0]
}
 801644e:	68f8      	ldr	r0, [r7, #12]
 8016450:	3740      	adds	r7, #64	; 0x40
 8016452:	46bd      	mov	sp, r7
 8016454:	bdb0      	pop	{r4, r5, r7, pc}
 8016456:	bf00      	nop
 8016458:	24005588 	.word	0x24005588
 801645c:	240055ac 	.word	0x240055ac

08016460 <_ZN3Mat8V_VectorILt6EEC1Ef>:

template <u_short length>
V_Vector<length>::V_Vector(float val) : Matrix<length, 1>(val) {}
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	ed87 0a00 	vstr	s0, [r7]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	ed97 0a00 	vldr	s0, [r7]
 8016472:	4618      	mov	r0, r3
 8016474:	f000 f999 	bl	80167aa <_ZN3Mat6MatrixILt6ELt1EEC1Ef>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	4618      	mov	r0, r3
 801647c:	3708      	adds	r7, #8
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}

08016482 <_ZZN3Mat6MatrixILt6ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8016482:	b480      	push	{r7}
 8016484:	b083      	sub	sp, #12
 8016486:	af00      	add	r7, sp, #0
 8016488:	6078      	str	r0, [r7, #4]
 801648a:	6039      	str	r1, [r7, #0]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	683b      	ldr	r3, [r7, #0]
 8016492:	601a      	str	r2, [r3, #0]
 8016494:	bf00      	nop
 8016496:	370c      	adds	r7, #12
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr

080164a0 <_ZN3Mat6MatrixILt6ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 80164a0:	b590      	push	{r4, r7, lr}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	4618      	mov	r0, r3
 80164b0:	f000 f998 	bl	80167e4 <_ZNSt5arrayIfLj24EE5beginEv>
 80164b4:	4604      	mov	r4, r0
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	4618      	mov	r0, r3
 80164ba:	f000 f99f 	bl	80167fc <_ZNSt5arrayIfLj24EE3endEv>
 80164be:	4603      	mov	r3, r0
 80164c0:	edd7 7a00 	vldr	s15, [r7]
 80164c4:	eeb0 0a67 	vmov.f32	s0, s15
 80164c8:	4619      	mov	r1, r3
 80164ca:	4620      	mov	r0, r4
 80164cc:	f000 f9a3 	bl	8016816 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	4618      	mov	r0, r3
 80164d4:	370c      	adds	r7, #12
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd90      	pop	{r4, r7, pc}

080164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>:

template <u_short length>
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 80164da:	b580      	push	{r7, lr}
 80164dc:	b082      	sub	sp, #8
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	6039      	str	r1, [r7, #0]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6839      	ldr	r1, [r7, #0]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f7 fcb3 	bl	800de54 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	4618      	mov	r0, r3
 80164f2:	3708      	adds	r7, #8
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <_ZNK3Mat8V_VectorILt3EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
 8016500:	460b      	mov	r3, r1
 8016502:	807b      	strh	r3, [r7, #2]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	887a      	ldrh	r2, [r7, #2]
 8016508:	4611      	mov	r1, r2
 801650a:	4618      	mov	r0, r3
 801650c:	f7f8 f900 	bl	800e710 <_ZNKSt5arrayIfLj3EEixEj>
 8016510:	4603      	mov	r3, r0
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	ee07 3a90 	vmov	s15, r3
 8016518:	eeb0 0a67 	vmov.f32	s0, s15
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>:

template <u_short length>
float V_Vector<length>::Norm() const
{
	float result = 0.0f;
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 8016522:	b480      	push	{r7}
 8016524:	b083      	sub	sp, #12
 8016526:	af00      	add	r7, sp, #0
 8016528:	6078      	str	r0, [r7, #4]
 801652a:	ed87 0a00 	vstr	s0, [r7]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	ed93 7a00 	vldr	s14, [r3]
 8016536:	edd7 7a00 	vldr	s15, [r7]
 801653a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016546:	edc3 7a00 	vstr	s15, [r3]
 801654a:	bf00      	nop
 801654c:	370c      	adds	r7, #12
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr

08016556 <_ZNK3Mat8V_VectorILt3EE4NormEv>:
float V_Vector<length>::Norm() const
 8016556:	b590      	push	{r4, r7, lr}
 8016558:	b085      	sub	sp, #20
 801655a:	af00      	add	r7, sp, #0
 801655c:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 801655e:	f04f 0300 	mov.w	r3, #0
 8016562:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	4618      	mov	r0, r3
 8016568:	f000 f971 	bl	801684e <_ZNKSt5arrayIfLj3EE5beginEv>
 801656c:	4604      	mov	r4, r0
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	4618      	mov	r0, r3
 8016572:	f000 f978 	bl	8016866 <_ZNKSt5arrayIfLj3EE3endEv>
 8016576:	4603      	mov	r3, r0
 8016578:	f107 020c 	add.w	r2, r7, #12
 801657c:	4619      	mov	r1, r3
 801657e:	4620      	mov	r0, r4
 8016580:	f000 f97e 	bl	8016880 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 8016584:	edd7 7a03 	vldr	s15, [r7, #12]
 8016588:	eeb0 0a67 	vmov.f32	s0, s15
 801658c:	f7fa fc80 	bl	8010e90 <_ZSt4sqrtf>
 8016590:	eef0 7a40 	vmov.f32	s15, s0
}
 8016594:	eeb0 0a67 	vmov.f32	s0, s15
 8016598:	3714      	adds	r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	bd90      	pop	{r4, r7, pc}

0801659e <_ZZNK3Mat8V_VectorILt4EE4NormEvENKUlfE_clEf>:
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801659e:	b480      	push	{r7}
 80165a0:	b083      	sub	sp, #12
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	6078      	str	r0, [r7, #4]
 80165a6:	ed87 0a00 	vstr	s0, [r7]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	ed93 7a00 	vldr	s14, [r3]
 80165b2:	edd7 7a00 	vldr	s15, [r7]
 80165b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165c2:	edc3 7a00 	vstr	s15, [r3]
 80165c6:	bf00      	nop
 80165c8:	370c      	adds	r7, #12
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr

080165d2 <_ZNK3Mat8V_VectorILt4EE4NormEv>:
float V_Vector<length>::Norm() const
 80165d2:	b590      	push	{r4, r7, lr}
 80165d4:	b085      	sub	sp, #20
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 80165da:	f04f 0300 	mov.w	r3, #0
 80165de:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f000 f968 	bl	80168b8 <_ZNKSt5arrayIfLj4EE5beginEv>
 80165e8:	4604      	mov	r4, r0
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f000 f96f 	bl	80168d0 <_ZNKSt5arrayIfLj4EE3endEv>
 80165f2:	4603      	mov	r3, r0
 80165f4:	f107 020c 	add.w	r2, r7, #12
 80165f8:	4619      	mov	r1, r3
 80165fa:	4620      	mov	r0, r4
 80165fc:	f000 f975 	bl	80168ea <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 8016600:	edd7 7a03 	vldr	s15, [r7, #12]
 8016604:	eeb0 0a67 	vmov.f32	s0, s15
 8016608:	f7fa fc42 	bl	8010e90 <_ZSt4sqrtf>
 801660c:	eef0 7a40 	vmov.f32	s15, s0
}
 8016610:	eeb0 0a67 	vmov.f32	s0, s15
 8016614:	3714      	adds	r7, #20
 8016616:	46bd      	mov	sp, r7
 8016618:	bd90      	pop	{r4, r7, pc}

0801661a <_ZN3Mat6MatrixILt4ELt1EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 801661a:	b580      	push	{r7, lr}
 801661c:	b084      	sub	sp, #16
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
 8016622:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8016626:	2300      	movs	r3, #0
 8016628:	60fb      	str	r3, [r7, #12]
 801662a:	e010      	b.n	801664e <_ZN3Mat6MatrixILt4ELt1EEmLEf+0x34>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	68f9      	ldr	r1, [r7, #12]
 8016630:	4618      	mov	r0, r3
 8016632:	f7f9 fd43 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 8016636:	4603      	mov	r3, r0
 8016638:	ed93 7a00 	vldr	s14, [r3]
 801663c:	edd7 7a00 	vldr	s15, [r7]
 8016640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016644:	edc3 7a00 	vstr	s15, [r3]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3301      	adds	r3, #1
 801664c:	60fb      	str	r3, [r7, #12]
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	4618      	mov	r0, r3
 8016652:	f7f9 fd28 	bl	80100a6 <_ZNKSt5arrayIfLj4EE4sizeEv>
 8016656:	4602      	mov	r2, r0
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	4293      	cmp	r3, r2
 801665c:	bf34      	ite	cc
 801665e:	2301      	movcc	r3, #1
 8016660:	2300      	movcs	r3, #0
 8016662:	b2db      	uxtb	r3, r3
 8016664:	2b00      	cmp	r3, #0
 8016666:	d1e1      	bne.n	801662c <_ZN3Mat6MatrixILt4ELt1EEmLEf+0x12>
	return *this;
 8016668:	687b      	ldr	r3, [r7, #4]
}
 801666a:	4618      	mov	r0, r3
 801666c:	3710      	adds	r7, #16
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}

08016672 <_ZN3Mat8V_VectorILt4EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 8016672:	b580      	push	{r7, lr}
 8016674:	b082      	sub	sp, #8
 8016676:	af00      	add	r7, sp, #0
 8016678:	6078      	str	r0, [r7, #4]
 801667a:	460b      	mov	r3, r1
 801667c:	807b      	strh	r3, [r7, #2]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	887a      	ldrh	r2, [r7, #2]
 8016682:	4611      	mov	r1, r2
 8016684:	4618      	mov	r0, r3
 8016686:	f7f9 fd19 	bl	80100bc <_ZNSt5arrayIfLj4EEixEj>
 801668a:	4603      	mov	r3, r0
 801668c:	4618      	mov	r0, r3
 801668e:	3708      	adds	r7, #8
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}

08016694 <_ZN3Mat6MatrixILt3ELt1EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 80166a0:	2300      	movs	r3, #0
 80166a2:	60fb      	str	r3, [r7, #12]
 80166a4:	e010      	b.n	80166c8 <_ZN3Mat6MatrixILt3ELt1EEmLEf+0x34>
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	68f9      	ldr	r1, [r7, #12]
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f7 fd86 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 80166b0:	4603      	mov	r3, r0
 80166b2:	ed93 7a00 	vldr	s14, [r3]
 80166b6:	edd7 7a00 	vldr	s15, [r7]
 80166ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80166be:	edc3 7a00 	vstr	s15, [r3]
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	3301      	adds	r3, #1
 80166c6:	60fb      	str	r3, [r7, #12]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7fa fb0a 	bl	8010ce4 <_ZNKSt5arrayIfLj3EE4sizeEv>
 80166d0:	4602      	mov	r2, r0
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	4293      	cmp	r3, r2
 80166d6:	bf34      	ite	cc
 80166d8:	2301      	movcc	r3, #1
 80166da:	2300      	movcs	r3, #0
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d1e1      	bne.n	80166a6 <_ZN3Mat6MatrixILt3ELt1EEmLEf+0x12>
	return *this;
 80166e2:	687b      	ldr	r3, [r7, #4]
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <_ZNK3Mat8V_VectorILt4EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	460b      	mov	r3, r1
 80166f6:	807b      	strh	r3, [r7, #2]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	887a      	ldrh	r2, [r7, #2]
 80166fc:	4611      	mov	r1, r2
 80166fe:	4618      	mov	r0, r3
 8016700:	f7f9 fceb 	bl	80100da <_ZNKSt5arrayIfLj4EEixEj>
 8016704:	4603      	mov	r3, r0
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	ee07 3a90 	vmov	s15, r3
 801670c:	eeb0 0a67 	vmov.f32	s0, s15
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}

08016716 <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>:
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 8016716:	b580      	push	{r7, lr}
 8016718:	b082      	sub	sp, #8
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	6039      	str	r1, [r7, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6839      	ldr	r1, [r7, #0]
 8016724:	4618      	mov	r0, r3
 8016726:	f000 f8fc 	bl	8016922 <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	4618      	mov	r0, r3
 801672e:	3708      	adds	r7, #8
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <_ZN3Mat6MatrixILt4ELt3EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 8016734:	b580      	push	{r7, lr}
 8016736:	b084      	sub	sp, #16
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
 801673c:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8016740:	2300      	movs	r3, #0
 8016742:	60fb      	str	r3, [r7, #12]
 8016744:	e010      	b.n	8016768 <_ZN3Mat6MatrixILt4ELt3EEmLEf+0x34>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	68f9      	ldr	r1, [r7, #12]
 801674a:	4618      	mov	r0, r3
 801674c:	f7fd fd6a 	bl	8014224 <_ZNSt5arrayIfLj12EEixEj>
 8016750:	4603      	mov	r3, r0
 8016752:	ed93 7a00 	vldr	s14, [r3]
 8016756:	edd7 7a00 	vldr	s15, [r7]
 801675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801675e:	edc3 7a00 	vstr	s15, [r3]
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	3301      	adds	r3, #1
 8016766:	60fb      	str	r3, [r7, #12]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4618      	mov	r0, r3
 801676c:	f000 f8ea 	bl	8016944 <_ZNKSt5arrayIfLj12EE4sizeEv>
 8016770:	4602      	mov	r2, r0
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	4293      	cmp	r3, r2
 8016776:	bf34      	ite	cc
 8016778:	2301      	movcc	r3, #1
 801677a:	2300      	movcs	r3, #0
 801677c:	b2db      	uxtb	r3, r3
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1e1      	bne.n	8016746 <_ZN3Mat6MatrixILt4ELt3EEmLEf+0x12>
	return *this;
 8016782:	687b      	ldr	r3, [r7, #4]
}
 8016784:	4618      	mov	r0, r3
 8016786:	3710      	adds	r7, #16
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}

0801678c <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 801678c:	b480      	push	{r7}
 801678e:	b083      	sub	sp, #12
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	601a      	str	r2, [r3, #0]
 801679e:	bf00      	nop
 80167a0:	370c      	adds	r7, #12
 80167a2:	46bd      	mov	sp, r7
 80167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a8:	4770      	bx	lr

080167aa <_ZN3Mat6MatrixILt6ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 80167aa:	b590      	push	{r4, r7, lr}
 80167ac:	b083      	sub	sp, #12
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	6078      	str	r0, [r7, #4]
 80167b2:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	4618      	mov	r0, r3
 80167ba:	f000 f8ce 	bl	801695a <_ZNSt5arrayIfLj6EE5beginEv>
 80167be:	4604      	mov	r4, r0
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	4618      	mov	r0, r3
 80167c4:	f000 f8d5 	bl	8016972 <_ZNSt5arrayIfLj6EE3endEv>
 80167c8:	4603      	mov	r3, r0
 80167ca:	edd7 7a00 	vldr	s15, [r7]
 80167ce:	eeb0 0a67 	vmov.f32	s0, s15
 80167d2:	4619      	mov	r1, r3
 80167d4:	4620      	mov	r0, r4
 80167d6:	f000 f8d9 	bl	801698c <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	370c      	adds	r7, #12
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd90      	pop	{r4, r7, pc}

080167e4 <_ZNSt5arrayIfLj24EE5beginEv>:
      begin() noexcept
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 f8e9 	bl	80169c4 <_ZNSt5arrayIfLj24EE4dataEv>
 80167f2:	4603      	mov	r3, r0
 80167f4:	4618      	mov	r0, r3
 80167f6:	3708      	adds	r7, #8
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}

080167fc <_ZNSt5arrayIfLj24EE3endEv>:
      end() noexcept
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 f8dd 	bl	80169c4 <_ZNSt5arrayIfLj24EE4dataEv>
 801680a:	4603      	mov	r3, r0
 801680c:	3360      	adds	r3, #96	; 0x60
 801680e:	4618      	mov	r0, r3
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8016816:	b580      	push	{r7, lr}
 8016818:	b084      	sub	sp, #16
 801681a:	af00      	add	r7, sp, #0
 801681c:	60f8      	str	r0, [r7, #12]
 801681e:	60b9      	str	r1, [r7, #8]
 8016820:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8016824:	e007      	b.n	8016836 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8016826:	1d3b      	adds	r3, r7, #4
 8016828:	68f9      	ldr	r1, [r7, #12]
 801682a:	4618      	mov	r0, r3
 801682c:	f7ff fe29 	bl	8016482 <_ZZN3Mat6MatrixILt6ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	3304      	adds	r3, #4
 8016834:	60fb      	str	r3, [r7, #12]
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	429a      	cmp	r2, r3
 801683c:	d1f3      	bne.n	8016826 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	ee07 3a90 	vmov	s15, r3
    }
 8016844:	eeb0 0a67 	vmov.f32	s0, s15
 8016848:	3710      	adds	r7, #16
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}

0801684e <_ZNKSt5arrayIfLj3EE5beginEv>:
      begin() const noexcept
 801684e:	b580      	push	{r7, lr}
 8016850:	b082      	sub	sp, #8
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f000 f8c1 	bl	80169de <_ZNKSt5arrayIfLj3EE4dataEv>
 801685c:	4603      	mov	r3, r0
 801685e:	4618      	mov	r0, r3
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}

08016866 <_ZNKSt5arrayIfLj3EE3endEv>:
      end() const noexcept
 8016866:	b580      	push	{r7, lr}
 8016868:	b082      	sub	sp, #8
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	f000 f8b5 	bl	80169de <_ZNKSt5arrayIfLj3EE4dataEv>
 8016874:	4603      	mov	r3, r0
 8016876:	330c      	adds	r3, #12
 8016878:	4618      	mov	r0, r3
 801687a:	3708      	adds	r7, #8
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8016880:	b580      	push	{r7, lr}
 8016882:	b084      	sub	sp, #16
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 801688c:	e00b      	b.n	80168a6 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	edd3 7a00 	vldr	s15, [r3]
 8016894:	1d3b      	adds	r3, r7, #4
 8016896:	eeb0 0a67 	vmov.f32	s0, s15
 801689a:	4618      	mov	r0, r3
 801689c:	f7ff fe41 	bl	8016522 <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	3304      	adds	r3, #4
 80168a4:	60fb      	str	r3, [r7, #12]
 80168a6:	68fa      	ldr	r2, [r7, #12]
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d1ef      	bne.n	801688e <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 80168ae:	687b      	ldr	r3, [r7, #4]
    }
 80168b0:	4618      	mov	r0, r3
 80168b2:	3710      	adds	r7, #16
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <_ZNKSt5arrayIfLj4EE5beginEv>:
      begin() const noexcept
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 f899 	bl	80169f8 <_ZNKSt5arrayIfLj4EE4dataEv>
 80168c6:	4603      	mov	r3, r0
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <_ZNKSt5arrayIfLj4EE3endEv>:
      end() const noexcept
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 f88d 	bl	80169f8 <_ZNKSt5arrayIfLj4EE4dataEv>
 80168de:	4603      	mov	r3, r0
 80168e0:	3310      	adds	r3, #16
 80168e2:	4618      	mov	r0, r3
 80168e4:	3708      	adds	r7, #8
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}

080168ea <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b084      	sub	sp, #16
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	60f8      	str	r0, [r7, #12]
 80168f2:	60b9      	str	r1, [r7, #8]
 80168f4:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 80168f6:	e00b      	b.n	8016910 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	edd3 7a00 	vldr	s15, [r3]
 80168fe:	1d3b      	adds	r3, r7, #4
 8016900:	eeb0 0a67 	vmov.f32	s0, s15
 8016904:	4618      	mov	r0, r3
 8016906:	f7ff fe4a 	bl	801659e <_ZZNK3Mat8V_VectorILt4EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	3304      	adds	r3, #4
 801690e:	60fb      	str	r3, [r7, #12]
 8016910:	68fa      	ldr	r2, [r7, #12]
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	429a      	cmp	r2, r3
 8016916:	d1ef      	bne.n	80168f8 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8016918:	687b      	ldr	r3, [r7, #4]
    }
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}

08016922 <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8016922:	b490      	push	{r4, r7}
 8016924:	b082      	sub	sp, #8
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
 801692a:	6039      	str	r1, [r7, #0]
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	4614      	mov	r4, r2
 8016932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	4618      	mov	r0, r3
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bc90      	pop	{r4, r7}
 8016942:	4770      	bx	lr

08016944 <_ZNKSt5arrayIfLj12EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	230c      	movs	r3, #12
 801694e:	4618      	mov	r0, r3
 8016950:	370c      	adds	r7, #12
 8016952:	46bd      	mov	sp, r7
 8016954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016958:	4770      	bx	lr

0801695a <_ZNSt5arrayIfLj6EE5beginEv>:
      begin() noexcept
 801695a:	b580      	push	{r7, lr}
 801695c:	b082      	sub	sp, #8
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 f855 	bl	8016a12 <_ZNSt5arrayIfLj6EE4dataEv>
 8016968:	4603      	mov	r3, r0
 801696a:	4618      	mov	r0, r3
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}

08016972 <_ZNSt5arrayIfLj6EE3endEv>:
      end() noexcept
 8016972:	b580      	push	{r7, lr}
 8016974:	b082      	sub	sp, #8
 8016976:	af00      	add	r7, sp, #0
 8016978:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 f849 	bl	8016a12 <_ZNSt5arrayIfLj6EE4dataEv>
 8016980:	4603      	mov	r3, r0
 8016982:	3318      	adds	r3, #24
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}

0801698c <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 801698c:	b580      	push	{r7, lr}
 801698e:	b084      	sub	sp, #16
 8016990:	af00      	add	r7, sp, #0
 8016992:	60f8      	str	r0, [r7, #12]
 8016994:	60b9      	str	r1, [r7, #8]
 8016996:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 801699a:	e007      	b.n	80169ac <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 801699c:	1d3b      	adds	r3, r7, #4
 801699e:	68f9      	ldr	r1, [r7, #12]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7ff fef3 	bl	801678c <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	3304      	adds	r3, #4
 80169aa:	60fb      	str	r3, [r7, #12]
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d1f3      	bne.n	801699c <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	ee07 3a90 	vmov	s15, r3
    }
 80169ba:	eeb0 0a67 	vmov.f32	s0, s15
 80169be:	3710      	adds	r7, #16
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}

080169c4 <_ZNSt5arrayIfLj24EE4dataEv>:
      data() noexcept
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4618      	mov	r0, r3
 80169d0:	f000 f82c 	bl	8016a2c <_ZNSt14__array_traitsIfLj24EE6_S_ptrERA24_Kf>
 80169d4:	4603      	mov	r3, r0
 80169d6:	4618      	mov	r0, r3
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <_ZNKSt5arrayIfLj3EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7f7 fe53 	bl	800e694 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 80169ee:	4603      	mov	r3, r0
 80169f0:	4618      	mov	r0, r3
 80169f2:	3708      	adds	r7, #8
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <_ZNKSt5arrayIfLj4EE4dataEv>:
      data() const noexcept
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b082      	sub	sp, #8
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	4618      	mov	r0, r3
 8016a04:	f000 f81d 	bl	8016a42 <_ZNSt14__array_traitsIfLj4EE6_S_ptrERA4_Kf>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}

08016a12 <_ZNSt5arrayIfLj6EE4dataEv>:
      data() noexcept
 8016a12:	b580      	push	{r7, lr}
 8016a14:	b082      	sub	sp, #8
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f000 f81b 	bl	8016a58 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>
 8016a22:	4603      	mov	r3, r0
 8016a24:	4618      	mov	r0, r3
 8016a26:	3708      	adds	r7, #8
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <_ZNSt14__array_traitsIfLj24EE6_S_ptrERA24_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	4618      	mov	r0, r3
 8016a38:	370c      	adds	r7, #12
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr

08016a42 <_ZNSt14__array_traitsIfLj4EE6_S_ptrERA4_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8016a42:	b480      	push	{r7}
 8016a44:	b083      	sub	sp, #12
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	370c      	adds	r7, #12
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr

08016a58 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8016a58:	b480      	push	{r7}
 8016a5a:	b083      	sub	sp, #12
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4618      	mov	r0, r3
 8016a64:	370c      	adds	r7, #12
 8016a66:	46bd      	mov	sp, r7
 8016a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6c:	4770      	bx	lr
	...

08016a70 <_Z41__static_initialization_and_destruction_0ii>:

} //namespace Algorithms
 8016a70:	b580      	push	{r7, lr}
 8016a72:	ed2d 8b02 	vpush	{d8}
 8016a76:	b08c      	sub	sp, #48	; 0x30
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
 8016a7c:	6039      	str	r1, [r7, #0]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d15c      	bne.n	8016b3e <_Z41__static_initialization_and_destruction_0ii+0xce>
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a8a:	4293      	cmp	r3, r2
 8016a8c:	d157      	bne.n	8016b3e <_Z41__static_initialization_and_destruction_0ii+0xce>
const V_Vector<3> _r{{0.0f, cos(magDip), -sin(magDip)}};
 8016a8e:	4a2f      	ldr	r2, [pc, #188]	; (8016b4c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016a90:	f107 030c 	add.w	r3, r7, #12
 8016a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016a9a:	f107 030c 	add.w	r3, r7, #12
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	482b      	ldr	r0, [pc, #172]	; (8016b50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016aa2:	f7ff fd1a 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
 8016aa6:	f04f 0300 	mov.w	r3, #0
 8016aaa:	61bb      	str	r3, [r7, #24]
 8016aac:	2101      	movs	r1, #1
 8016aae:	4828      	ldr	r0, [pc, #160]	; (8016b50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016ab0:	f7ff fd22 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8016ab4:	eeb0 8a40 	vmov.f32	s16, s0
 8016ab8:	4825      	ldr	r0, [pc, #148]	; (8016b50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016aba:	f7ff fd4c 	bl	8016556 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8016abe:	eeb0 7a40 	vmov.f32	s14, s0
 8016ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016aca:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016ace:	edc7 7a07 	vstr	s15, [r7, #28]
 8016ad2:	2102      	movs	r1, #2
 8016ad4:	481e      	ldr	r0, [pc, #120]	; (8016b50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016ad6:	f7ff fd0f 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8016ada:	eeb0 8a40 	vmov.f32	s16, s0
 8016ade:	481c      	ldr	r0, [pc, #112]	; (8016b50 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016ae0:	f7ff fd39 	bl	8016556 <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8016ae4:	eeb0 7a40 	vmov.f32	s14, s0
 8016ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016af0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016af4:	edc7 7a08 	vstr	s15, [r7, #32]
 8016af8:	f107 0318 	add.w	r3, r7, #24
 8016afc:	4619      	mov	r1, r3
 8016afe:	4815      	ldr	r0, [pc, #84]	; (8016b54 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016b00:	f7ff fceb 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};
 8016b04:	f04f 0300 	mov.w	r3, #0
 8016b08:	627b      	str	r3, [r7, #36]	; 0x24
 8016b0a:	2101      	movs	r1, #1
 8016b0c:	4811      	ldr	r0, [pc, #68]	; (8016b54 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016b0e:	f7ff fcf3 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8016b12:	eef0 7a40 	vmov.f32	s15, s0
 8016b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016b1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016b1e:	2102      	movs	r1, #2
 8016b20:	480c      	ldr	r0, [pc, #48]	; (8016b54 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016b22:	f7ff fce9 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8016b26:	eef0 7a40 	vmov.f32	s15, s0
 8016b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016b2e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8016b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016b36:	4619      	mov	r1, r3
 8016b38:	4807      	ldr	r0, [pc, #28]	; (8016b58 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8016b3a:	f7ff fcce 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
} //namespace Algorithms
 8016b3e:	bf00      	nop
 8016b40:	3730      	adds	r7, #48	; 0x30
 8016b42:	46bd      	mov	sp, r7
 8016b44:	ecbd 8b02 	vpop	{d8}
 8016b48:	bd80      	pop	{r7, pc}
 8016b4a:	bf00      	nop
 8016b4c:	08020ccc 	.word	0x08020ccc
 8016b50:	240054f0 	.word	0x240054f0
 8016b54:	240054fc 	.word	0x240054fc
 8016b58:	24005508 	.word	0x24005508

08016b5c <_GLOBAL__sub_I__ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016b64:	2001      	movs	r0, #1
 8016b66:	f7ff ff83 	bl	8016a70 <_Z41__static_initialization_and_destruction_0ii>
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:

namespace Algorithms
{

void VelocityEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b084      	sub	sp, #16
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
 8016b78:	ed87 0a00 	vstr	s0, [r7]
	_UpdateVelocity(meassurementVec, meassurementCov);
 8016b7c:	687a      	ldr	r2, [r7, #4]
 8016b7e:	68b9      	ldr	r1, [r7, #8]
 8016b80:	68f8      	ldr	r0, [r7, #12]
 8016b82:	f000 f80d 	bl	8016ba0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_UpdatePosition(meassurementVec, meassurementCov);
 8016b86:	687a      	ldr	r2, [r7, #4]
 8016b88:	68b9      	ldr	r1, [r7, #8]
 8016b8a:	68f8      	ldr	r0, [r7, #12]
 8016b8c:	f000 f9f6 	bl	8016f7c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_time = time;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	683a      	ldr	r2, [r7, #0]
 8016b94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8016b98:	bf00      	nop
 8016b9a:	3710      	adds	r7, #16
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	bd80      	pop	{r7, pc}

08016ba0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdateVelocity(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8016ba0:	b590      	push	{r4, r7, lr}
 8016ba2:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bac:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016bb0:	6018      	str	r0, [r3, #0]
 8016bb2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bb6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016bba:	6019      	str	r1, [r3, #0]
 8016bbc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bc0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016bc4:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 8016bc6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bca:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016bce:	2100      	movs	r1, #0
 8016bd0:	6818      	ldr	r0, [r3, #0]
 8016bd2:	f7f7 f9bc 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016bd6:	eef0 7a40 	vmov.f32	s15, s0
 8016bda:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bde:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016be2:	edc3 7a00 	vstr	s15, [r3]
 8016be6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bea:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016bee:	2101      	movs	r1, #1
 8016bf0:	6818      	ldr	r0, [r3, #0]
 8016bf2:	f7f7 f9ac 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016bf6:	eef0 7a40 	vmov.f32	s15, s0
 8016bfa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bfe:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016c02:	edc3 7a01 	vstr	s15, [r3, #4]
 8016c06:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c0a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016c0e:	2102      	movs	r1, #2
 8016c10:	6818      	ldr	r0, [r3, #0]
 8016c12:	f7f7 f99c 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016c16:	eef0 7a40 	vmov.f32	s15, s0
 8016c1a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c1e:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016c22:	edc3 7a02 	vstr	s15, [r3, #8]
 8016c26:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8016c2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016c2e:	4611      	mov	r1, r2
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7ff fc52 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(0), _state(1), _state(2)}};
 8016c36:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c3a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	3304      	adds	r3, #4
 8016c42:	2100      	movs	r1, #0
 8016c44:	4618      	mov	r0, r3
 8016c46:	f001 f847 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	681a      	ldr	r2, [r3, #0]
 8016c4e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c52:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016c56:	601a      	str	r2, [r3, #0]
 8016c58:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c5c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	3304      	adds	r3, #4
 8016c64:	2101      	movs	r1, #1
 8016c66:	4618      	mov	r0, r3
 8016c68:	f001 f836 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c74:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016c78:	605a      	str	r2, [r3, #4]
 8016c7a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c7e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	3304      	adds	r3, #4
 8016c86:	2102      	movs	r1, #2
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f001 f825 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	681a      	ldr	r2, [r3, #0]
 8016c92:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c96:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016c9a:	609a      	str	r2, [r3, #8]
 8016c9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016ca0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8016ca4:	4611      	mov	r1, r2
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7ff fc17 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8016cac:	4bae      	ldr	r3, [pc, #696]	; (8016f68 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	f3bf 8f5b 	dmb	ish
 8016cb4:	f003 0301 	and.w	r3, r3, #1
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	bf0c      	ite	eq
 8016cbc:	2301      	moveq	r3, #1
 8016cbe:	2300      	movne	r3, #0
 8016cc0:	b2db      	uxtb	r3, r3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d012      	beq.n	8016cec <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8016cc6:	48a8      	ldr	r0, [pc, #672]	; (8016f68 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016cc8:	f006 fd6e 	bl	801d7a8 <__cxa_guard_acquire>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	bf14      	ite	ne
 8016cd2:	2301      	movne	r3, #1
 8016cd4:	2300      	moveq	r3, #0
 8016cd6:	b2db      	uxtb	r3, r3
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d007      	beq.n	8016cec <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8016cdc:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8016f6c <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8016ce0:	48a3      	ldr	r0, [pc, #652]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016ce2:	f001 f819 	bl	8017d18 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8016ce6:	48a0      	ldr	r0, [pc, #640]	; (8016f68 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016ce8:	f006 fd6a 	bl	801d7c0 <__cxa_guard_release>
	H(0,0) = 1.0f; H(1,1) = 1.0f; H(2,2) = 1.0f;
 8016cec:	2200      	movs	r2, #0
 8016cee:	2100      	movs	r1, #0
 8016cf0:	489f      	ldr	r0, [pc, #636]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016cf2:	f001 f82e 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	2201      	movs	r2, #1
 8016d00:	2101      	movs	r1, #1
 8016d02:	489b      	ldr	r0, [pc, #620]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016d04:	f001 f825 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016d0e:	601a      	str	r2, [r3, #0]
 8016d10:	2202      	movs	r2, #2
 8016d12:	2102      	movs	r1, #2
 8016d14:	4896      	ldr	r0, [pc, #600]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016d16:	f001 f81c 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016d20:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8016d22:	4b94      	ldr	r3, [pc, #592]	; (8016f74 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	f3bf 8f5b 	dmb	ish
 8016d2a:	f003 0301 	and.w	r3, r3, #1
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	bf0c      	ite	eq
 8016d32:	2301      	moveq	r3, #1
 8016d34:	2300      	movne	r3, #0
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d012      	beq.n	8016d62 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8016d3c:	488d      	ldr	r0, [pc, #564]	; (8016f74 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016d3e:	f006 fd33 	bl	801d7a8 <__cxa_guard_acquire>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	bf14      	ite	ne
 8016d48:	2301      	movne	r3, #1
 8016d4a:	2300      	moveq	r3, #0
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d007      	beq.n	8016d62 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8016d52:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016f6c <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8016d56:	4888      	ldr	r0, [pc, #544]	; (8016f78 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016d58:	f7f7 f973 	bl	800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8016d5c:	4885      	ldr	r0, [pc, #532]	; (8016f74 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016d5e:	f006 fd2f 	bl	801d7c0 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8016d62:	2200      	movs	r2, #0
 8016d64:	2100      	movs	r1, #0
 8016d66:	4884      	ldr	r0, [pc, #528]	; (8016f78 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016d68:	f7f7 f988 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d72:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016d76:	2200      	movs	r2, #0
 8016d78:	2100      	movs	r1, #0
 8016d7a:	6818      	ldr	r0, [r3, #0]
 8016d7c:	f7f9 fb6f 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016d80:	eef0 7a40 	vmov.f32	s15, s0
 8016d84:	edc4 7a00 	vstr	s15, [r4]
 8016d88:	2201      	movs	r2, #1
 8016d8a:	2101      	movs	r1, #1
 8016d8c:	487a      	ldr	r0, [pc, #488]	; (8016f78 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016d8e:	f7f7 f975 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016d92:	4604      	mov	r4, r0
 8016d94:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d98:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016d9c:	2201      	movs	r2, #1
 8016d9e:	2101      	movs	r1, #1
 8016da0:	6818      	ldr	r0, [r3, #0]
 8016da2:	f7f9 fb5c 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016da6:	eef0 7a40 	vmov.f32	s15, s0
 8016daa:	edc4 7a00 	vstr	s15, [r4]
 8016dae:	2202      	movs	r2, #2
 8016db0:	2102      	movs	r1, #2
 8016db2:	4871      	ldr	r0, [pc, #452]	; (8016f78 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016db4:	f7f7 f962 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016db8:	4604      	mov	r4, r0
 8016dba:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016dbe:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016dc2:	2202      	movs	r2, #2
 8016dc4:	2102      	movs	r1, #2
 8016dc6:	6818      	ldr	r0, [r3, #0]
 8016dc8:	f7f9 fb49 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016dcc:	eef0 7a40 	vmov.f32	s15, s0
 8016dd0:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8016dd4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016dd8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	f103 021c 	add.w	r2, r3, #28
 8016de2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016de6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8016dea:	4961      	ldr	r1, [pc, #388]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016dec:	4618      	mov	r0, r3
 8016dee:	f000 ffcb 	bl	8017d88 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016df2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016df6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8016dfa:	495d      	ldr	r1, [pc, #372]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f000 ffd6 	bl	8017dae <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016e02:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e06:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8016e0a:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8016e0e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8016e12:	4618      	mov	r0, r3
 8016e14:	f000 fffb 	bl	8017e0e <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016e18:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e1c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8016e20:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8016e24:	4a54      	ldr	r2, [pc, #336]	; (8016f78 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7fc fc8d 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8016e2c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e30:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	f103 041c 	add.w	r4, r3, #28
 8016e3a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e3e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8016e42:	494b      	ldr	r1, [pc, #300]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016e44:	4618      	mov	r0, r3
 8016e46:	f000 ffb2 	bl	8017dae <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016e4a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e4e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8016e52:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8016e56:	4621      	mov	r1, r4
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f000 ffeb 	bl	8017e34 <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8016e5e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e62:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8016e66:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8016e6a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e6e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016e72:	6819      	ldr	r1, [r3, #0]
 8016e74:	f000 fd42 	bl	80178fc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8016e78:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e7c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8016e80:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8016e84:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f000 ffe6 	bl	8017e5a <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8016e8e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016e92:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	1d1c      	adds	r4, r3, #4
 8016e9a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8016e9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016ea2:	4611      	mov	r1, r2
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7f9 febe 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8016eaa:	eef0 6a40 	vmov.f32	s13, s0
 8016eae:	eeb0 7a60 	vmov.f32	s14, s1
 8016eb2:	eef0 7a41 	vmov.f32	s15, s2
 8016eb6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016eba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016ebe:	edc3 6a00 	vstr	s13, [r3]
 8016ec2:	ed83 7a01 	vstr	s14, [r3, #4]
 8016ec6:	edc3 7a02 	vstr	s15, [r3, #8]
 8016eca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ece:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016ed2:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8016ed6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8016eda:	4618      	mov	r0, r3
 8016edc:	f000 ffd0 	bl	8017e80 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8016ee0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f7f8 fb18 	bl	800f51c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8016eec:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ef0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016ef4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7f8 fb45 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8016efe:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8016f02:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8016f06:	4a1a      	ldr	r2, [pc, #104]	; (8016f70 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f000 ffcc 	bl	8017ea6 <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8016f0e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016f16:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8016f1a:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7f8 fb56 	bl	800f5d0 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 8016f24:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f28:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	f103 021c 	add.w	r2, r3, #28
 8016f32:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f36:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016f3a:	681c      	ldr	r4, [r3, #0]
 8016f3c:	463b      	mov	r3, r7
 8016f3e:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8016f42:	4618      	mov	r0, r3
 8016f44:	f7f8 fa94 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 8016f48:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f4c:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 8016f50:	f104 031c 	add.w	r3, r4, #28
 8016f54:	4611      	mov	r1, r2
 8016f56:	2290      	movs	r2, #144	; 0x90
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f007 fe6a 	bl	801ec32 <memcpy>
}
 8016f5e:	bf00      	nop
 8016f60:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd90      	pop	{r4, r7, pc}
 8016f68:	240055f8 	.word	0x240055f8
 8016f6c:	00000000 	.word	0x00000000
 8016f70:	240055b0 	.word	0x240055b0
 8016f74:	24005620 	.word	0x24005620
 8016f78:	240055fc 	.word	0x240055fc

08016f7c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdatePosition(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8016f7c:	b590      	push	{r4, r7, lr}
 8016f7e:	ed2d 8b02 	vpush	{d8}
 8016f82:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f8c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016f90:	6018      	str	r0, [r3, #0]
 8016f92:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f96:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016f9a:	6019      	str	r1, [r3, #0]
 8016f9c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fa0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016fa4:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(3), meassurementVec(4), meassurementVec(5)}};
 8016fa6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016faa:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016fae:	2103      	movs	r1, #3
 8016fb0:	6818      	ldr	r0, [r3, #0]
 8016fb2:	f7f6 ffcc 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016fb6:	eef0 7a40 	vmov.f32	s15, s0
 8016fba:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fbe:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016fc2:	edc3 7a00 	vstr	s15, [r3]
 8016fc6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fca:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016fce:	2104      	movs	r1, #4
 8016fd0:	6818      	ldr	r0, [r3, #0]
 8016fd2:	f7f6 ffbc 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016fd6:	eef0 7a40 	vmov.f32	s15, s0
 8016fda:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fde:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016fe2:	edc3 7a01 	vstr	s15, [r3, #4]
 8016fe6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fea:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016fee:	2105      	movs	r1, #5
 8016ff0:	6818      	ldr	r0, [r3, #0]
 8016ff2:	f7f6 ffac 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8016ff6:	eef0 7a40 	vmov.f32	s15, s0
 8016ffa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ffe:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8017002:	edc3 7a02 	vstr	s15, [r3, #8]
 8017006:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801700a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801700e:	4611      	mov	r1, r2
 8017010:	4618      	mov	r0, r3
 8017012:	f7ff fa62 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(3), _state(4), _state(5)}};
 8017016:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801701a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	3304      	adds	r3, #4
 8017022:	2103      	movs	r1, #3
 8017024:	4618      	mov	r0, r3
 8017026:	f000 fe57 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 801702a:	4603      	mov	r3, r0
 801702c:	681a      	ldr	r2, [r3, #0]
 801702e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017032:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8017036:	601a      	str	r2, [r3, #0]
 8017038:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801703c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	3304      	adds	r3, #4
 8017044:	2104      	movs	r1, #4
 8017046:	4618      	mov	r0, r3
 8017048:	f000 fe46 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 801704c:	4603      	mov	r3, r0
 801704e:	681a      	ldr	r2, [r3, #0]
 8017050:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017054:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8017058:	605a      	str	r2, [r3, #4]
 801705a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801705e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	3304      	adds	r3, #4
 8017066:	2105      	movs	r1, #5
 8017068:	4618      	mov	r0, r3
 801706a:	f000 fe35 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 801706e:	4603      	mov	r3, r0
 8017070:	681a      	ldr	r2, [r3, #0]
 8017072:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017076:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 801707a:	609a      	str	r2, [r3, #8]
 801707c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8017080:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8017084:	4611      	mov	r1, r2
 8017086:	4618      	mov	r0, r3
 8017088:	f7ff fa27 	bl	80164da <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 801708c:	4bbe      	ldr	r3, [pc, #760]	; (8017388 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	f3bf 8f5b 	dmb	ish
 8017094:	f003 0301 	and.w	r3, r3, #1
 8017098:	2b00      	cmp	r3, #0
 801709a:	bf0c      	ite	eq
 801709c:	2301      	moveq	r3, #1
 801709e:	2300      	movne	r3, #0
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d012      	beq.n	80170cc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 80170a6:	48b8      	ldr	r0, [pc, #736]	; (8017388 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 80170a8:	f006 fb7e 	bl	801d7a8 <__cxa_guard_acquire>
 80170ac:	4603      	mov	r3, r0
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	bf14      	ite	ne
 80170b2:	2301      	movne	r3, #1
 80170b4:	2300      	moveq	r3, #0
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d007      	beq.n	80170cc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 80170bc:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 801738c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 80170c0:	48b3      	ldr	r0, [pc, #716]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 80170c2:	f000 fe29 	bl	8017d18 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 80170c6:	48b0      	ldr	r0, [pc, #704]	; (8017388 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 80170c8:	f006 fb7a 	bl	801d7c0 <__cxa_guard_release>
	H(0,3) = 1.0f; H(1,4) = 1.0f; H(2,5) = 1.0f;
 80170cc:	2203      	movs	r2, #3
 80170ce:	2100      	movs	r1, #0
 80170d0:	48af      	ldr	r0, [pc, #700]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 80170d2:	f000 fe3e 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 80170d6:	4603      	mov	r3, r0
 80170d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80170dc:	601a      	str	r2, [r3, #0]
 80170de:	2204      	movs	r2, #4
 80170e0:	2101      	movs	r1, #1
 80170e2:	48ab      	ldr	r0, [pc, #684]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 80170e4:	f000 fe35 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 80170e8:	4603      	mov	r3, r0
 80170ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80170ee:	601a      	str	r2, [r3, #0]
 80170f0:	2205      	movs	r2, #5
 80170f2:	2102      	movs	r1, #2
 80170f4:	48a6      	ldr	r0, [pc, #664]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 80170f6:	f000 fe2c 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 80170fa:	4603      	mov	r3, r0
 80170fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017100:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8017102:	4ba4      	ldr	r3, [pc, #656]	; (8017394 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f3bf 8f5b 	dmb	ish
 801710a:	f003 0301 	and.w	r3, r3, #1
 801710e:	2b00      	cmp	r3, #0
 8017110:	bf0c      	ite	eq
 8017112:	2301      	moveq	r3, #1
 8017114:	2300      	movne	r3, #0
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d012      	beq.n	8017142 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 801711c:	489d      	ldr	r0, [pc, #628]	; (8017394 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 801711e:	f006 fb43 	bl	801d7a8 <__cxa_guard_acquire>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	bf14      	ite	ne
 8017128:	2301      	movne	r3, #1
 801712a:	2300      	moveq	r3, #0
 801712c:	b2db      	uxtb	r3, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	d007      	beq.n	8017142 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8017132:	ed9f 0a96 	vldr	s0, [pc, #600]	; 801738c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 8017136:	4898      	ldr	r0, [pc, #608]	; (8017398 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8017138:	f7f6 ff83 	bl	800e042 <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 801713c:	4895      	ldr	r0, [pc, #596]	; (8017394 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 801713e:	f006 fb3f 	bl	801d7c0 <__cxa_guard_release>
	R(0,0) = meassurementCov(3,3)*_ER; R(1,1) = meassurementCov(4,4)*_ER / cos(_state(3)); R(2,2) = meassurementCov(5,5);
 8017142:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017146:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801714a:	2203      	movs	r2, #3
 801714c:	2103      	movs	r1, #3
 801714e:	6818      	ldr	r0, [r3, #0]
 8017150:	f7f9 f985 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8017154:	eeb0 8a40 	vmov.f32	s16, s0
 8017158:	2200      	movs	r2, #0
 801715a:	2100      	movs	r1, #0
 801715c:	488e      	ldr	r0, [pc, #568]	; (8017398 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 801715e:	f7f6 ff8d 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8017162:	4603      	mov	r3, r0
 8017164:	eddf 7a8d 	vldr	s15, [pc, #564]	; 801739c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 8017168:	ee68 7a27 	vmul.f32	s15, s16, s15
 801716c:	edc3 7a00 	vstr	s15, [r3]
 8017170:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017174:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8017178:	2204      	movs	r2, #4
 801717a:	2104      	movs	r1, #4
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f7f9 f96e 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8017182:	eef0 7a40 	vmov.f32	s15, s0
 8017186:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801739c <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 801718a:	ee27 8a87 	vmul.f32	s16, s15, s14
 801718e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017192:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	3304      	adds	r3, #4
 801719a:	2103      	movs	r1, #3
 801719c:	4618      	mov	r0, r3
 801719e:	f000 fd9b 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 80171a2:	4603      	mov	r3, r0
 80171a4:	edd3 7a00 	vldr	s15, [r3]
 80171a8:	eeb0 0a67 	vmov.f32	s0, s15
 80171ac:	f7f9 fe50 	bl	8010e50 <_ZSt3cosf>
 80171b0:	eef0 8a40 	vmov.f32	s17, s0
 80171b4:	2201      	movs	r2, #1
 80171b6:	2101      	movs	r1, #1
 80171b8:	4877      	ldr	r0, [pc, #476]	; (8017398 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 80171ba:	f7f6 ff5f 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80171be:	4603      	mov	r3, r0
 80171c0:	eec8 7a28 	vdiv.f32	s15, s16, s17
 80171c4:	edc3 7a00 	vstr	s15, [r3]
 80171c8:	2202      	movs	r2, #2
 80171ca:	2102      	movs	r1, #2
 80171cc:	4872      	ldr	r0, [pc, #456]	; (8017398 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 80171ce:	f7f6 ff55 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80171d2:	4604      	mov	r4, r0
 80171d4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80171d8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80171dc:	2205      	movs	r2, #5
 80171de:	2105      	movs	r1, #5
 80171e0:	6818      	ldr	r0, [r3, #0]
 80171e2:	f7f9 f93c 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80171e6:	eef0 7a40 	vmov.f32	s15, s0
 80171ea:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 80171ee:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80171f2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f103 021c 	add.w	r2, r3, #28
 80171fc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017200:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8017204:	4962      	ldr	r1, [pc, #392]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8017206:	4618      	mov	r0, r3
 8017208:	f000 fdbe 	bl	8017d88 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 801720c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017210:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8017214:	495e      	ldr	r1, [pc, #376]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8017216:	4618      	mov	r0, r3
 8017218:	f000 fdc9 	bl	8017dae <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 801721c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017220:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8017224:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8017228:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 801722c:	4618      	mov	r0, r3
 801722e:	f000 fdee 	bl	8017e0e <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8017232:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017236:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801723a:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 801723e:	4a56      	ldr	r2, [pc, #344]	; (8017398 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8017240:	4618      	mov	r0, r3
 8017242:	f7fc fa80 	bl	8013746 <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8017246:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801724a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	f103 041c 	add.w	r4, r3, #28
 8017254:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017258:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801725c:	494c      	ldr	r1, [pc, #304]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 801725e:	4618      	mov	r0, r3
 8017260:	f000 fda5 	bl	8017dae <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8017264:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017268:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801726c:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8017270:	4621      	mov	r1, r4
 8017272:	4618      	mov	r0, r3
 8017274:	f000 fdde 	bl	8017e34 <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8017278:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801727c:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8017280:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8017284:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017288:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 801728c:	6819      	ldr	r1, [r3, #0]
 801728e:	f000 fb35 	bl	80178fc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8017292:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017296:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801729a:	f507 7220 	add.w	r2, r7, #640	; 0x280
 801729e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80172a2:	4618      	mov	r0, r3
 80172a4:	f000 fdd9 	bl	8017e5a <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 80172a8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80172ac:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	1d1c      	adds	r4, r3, #4
 80172b4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80172b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80172bc:	4611      	mov	r1, r2
 80172be:	4618      	mov	r0, r3
 80172c0:	f7f9 fcb1 	bl	8010c26 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 80172c4:	eef0 6a40 	vmov.f32	s13, s0
 80172c8:	eeb0 7a60 	vmov.f32	s14, s1
 80172cc:	eef0 7a41 	vmov.f32	s15, s2
 80172d0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80172d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80172d8:	edc3 6a00 	vstr	s13, [r3]
 80172dc:	ed83 7a01 	vstr	s14, [r3, #4]
 80172e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80172e4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80172e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80172ec:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 80172f0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80172f4:	4618      	mov	r0, r3
 80172f6:	f000 fdc3 	bl	8017e80 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 80172fa:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80172fe:	4619      	mov	r1, r3
 8017300:	4620      	mov	r0, r4
 8017302:	f7f8 f90b 	bl	800f51c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8017306:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801730a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801730e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017312:	4618      	mov	r0, r3
 8017314:	f7f8 f938 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8017318:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 801731c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8017320:	4a1b      	ldr	r2, [pc, #108]	; (8017390 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8017322:	4618      	mov	r0, r3
 8017324:	f000 fdbf 	bl	8017ea6 <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8017328:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801732c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017330:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8017334:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8017338:	4618      	mov	r0, r3
 801733a:	f7f8 f949 	bl	800f5d0 <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 801733e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017342:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f103 021c 	add.w	r2, r3, #28
 801734c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017350:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017354:	681c      	ldr	r4, [r3, #0]
 8017356:	463b      	mov	r3, r7
 8017358:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 801735c:	4618      	mov	r0, r3
 801735e:	f7f8 f887 	bl	800f470 <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 8017362:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017366:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 801736a:	f104 031c 	add.w	r3, r4, #28
 801736e:	4611      	mov	r1, r2
 8017370:	2290      	movs	r2, #144	; 0x90
 8017372:	4618      	mov	r0, r3
 8017374:	f007 fc5d 	bl	801ec32 <memcpy>
}
 8017378:	bf00      	nop
 801737a:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 801737e:	46bd      	mov	sp, r7
 8017380:	ecbd 8b02 	vpop	{d8}
 8017384:	bd90      	pop	{r4, r7, pc}
 8017386:	bf00      	nop
 8017388:	2400566c 	.word	0x2400566c
 801738c:	00000000 	.word	0x00000000
 8017390:	24005624 	.word	0x24005624
 8017394:	24005694 	.word	0x24005694
 8017398:	24005670 	.word	0x24005670
 801739c:	3428892d 	.word	0x3428892d

080173a0 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateVec VelocityEKF::_f(const ControlVec& controlVec, float time) const
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	ed2d 8b04 	vpush	{d8-d9}
 80173a6:	b088      	sub	sp, #32
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	607a      	str	r2, [r7, #4]
 80173b0:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80173ba:	ed97 7a00 	vldr	s14, [r7]
 80173be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173c2:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 80173c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80173ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80173ce:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 80173d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80173d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173de:	edc7 7a05 	vstr	s15, [r7, #20]
	StateVec result;
 80173e2:	68f8      	ldr	r0, [r7, #12]
 80173e4:	f7f6 fc7a 	bl	800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>
	result(0) = _state(0) + controlVec(0)*dt;
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	3304      	adds	r3, #4
 80173ec:	2100      	movs	r1, #0
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f6 fdad 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80173f4:	eef0 8a40 	vmov.f32	s17, s0
 80173f8:	2100      	movs	r1, #0
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f7ff f87c 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017400:	eeb0 7a40 	vmov.f32	s14, s0
 8017404:	edd7 7a07 	vldr	s15, [r7, #28]
 8017408:	ee27 8a27 	vmul.f32	s16, s14, s15
 801740c:	2100      	movs	r1, #0
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f000 fc62 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8017414:	4603      	mov	r3, r0
 8017416:	ee78 7a88 	vadd.f32	s15, s17, s16
 801741a:	edc3 7a00 	vstr	s15, [r3]
	result(1) = _state(1) + controlVec(1)*dt;
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	3304      	adds	r3, #4
 8017422:	2101      	movs	r1, #1
 8017424:	4618      	mov	r0, r3
 8017426:	f7f6 fd92 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801742a:	eef0 8a40 	vmov.f32	s17, s0
 801742e:	2101      	movs	r1, #1
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f7ff f861 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017436:	eeb0 7a40 	vmov.f32	s14, s0
 801743a:	edd7 7a07 	vldr	s15, [r7, #28]
 801743e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017442:	2101      	movs	r1, #1
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	f000 fc47 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 801744a:	4603      	mov	r3, r0
 801744c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8017450:	edc3 7a00 	vstr	s15, [r3]
	result(2) = _state(2) + controlVec(2)*dt;
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	3304      	adds	r3, #4
 8017458:	2102      	movs	r1, #2
 801745a:	4618      	mov	r0, r3
 801745c:	f7f6 fd77 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017460:	eef0 8a40 	vmov.f32	s17, s0
 8017464:	2102      	movs	r1, #2
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7ff f846 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801746c:	eeb0 7a40 	vmov.f32	s14, s0
 8017470:	edd7 7a07 	vldr	s15, [r7, #28]
 8017474:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017478:	2102      	movs	r1, #2
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f000 fc2c 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8017480:	4603      	mov	r3, r0
 8017482:	ee78 7a88 	vadd.f32	s15, s17, s16
 8017486:	edc3 7a00 	vstr	s15, [r3]
	result(3) = _state(3) + (_state(1)*dt + controlVec(1)*dt2_2)*_ER;
 801748a:	68bb      	ldr	r3, [r7, #8]
 801748c:	3304      	adds	r3, #4
 801748e:	2103      	movs	r1, #3
 8017490:	4618      	mov	r0, r3
 8017492:	f7f6 fd5c 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017496:	eef0 8a40 	vmov.f32	s17, s0
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	3304      	adds	r3, #4
 801749e:	2101      	movs	r1, #1
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7f6 fd54 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80174a6:	eeb0 7a40 	vmov.f32	s14, s0
 80174aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80174ae:	ee27 8a27 	vmul.f32	s16, s14, s15
 80174b2:	2101      	movs	r1, #1
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7ff f81f 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 80174ba:	eeb0 7a40 	vmov.f32	s14, s0
 80174be:	edd7 7a05 	vldr	s15, [r7, #20]
 80174c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80174c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80174ca:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80175c0 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 80174ce:	ee27 8a87 	vmul.f32	s16, s15, s14
 80174d2:	2103      	movs	r1, #3
 80174d4:	68f8      	ldr	r0, [r7, #12]
 80174d6:	f000 fbff 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 80174da:	4603      	mov	r3, r0
 80174dc:	ee78 7a88 	vadd.f32	s15, s17, s16
 80174e0:	edc3 7a00 	vstr	s15, [r3]
	result(4) = _state(4) + (_state(0)*dt + controlVec(0)*dt2_2)*_ER / cos(_state(3));
 80174e4:	68bb      	ldr	r3, [r7, #8]
 80174e6:	3304      	adds	r3, #4
 80174e8:	2104      	movs	r1, #4
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7f6 fd2f 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80174f0:	eeb0 9a40 	vmov.f32	s18, s0
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	3304      	adds	r3, #4
 80174f8:	2100      	movs	r1, #0
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7f6 fd27 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017500:	eeb0 7a40 	vmov.f32	s14, s0
 8017504:	edd7 7a07 	vldr	s15, [r7, #28]
 8017508:	ee27 8a27 	vmul.f32	s16, s14, s15
 801750c:	2100      	movs	r1, #0
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f7fe fff2 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017514:	eeb0 7a40 	vmov.f32	s14, s0
 8017518:	edd7 7a05 	vldr	s15, [r7, #20]
 801751c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017520:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017524:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80175c0 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 8017528:	ee67 8a87 	vmul.f32	s17, s15, s14
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	3304      	adds	r3, #4
 8017530:	2103      	movs	r1, #3
 8017532:	4618      	mov	r0, r3
 8017534:	f7f6 fd0b 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017538:	eef0 7a40 	vmov.f32	s15, s0
 801753c:	eeb0 0a67 	vmov.f32	s0, s15
 8017540:	f7f9 fc86 	bl	8010e50 <_ZSt3cosf>
 8017544:	eef0 7a40 	vmov.f32	s15, s0
 8017548:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 801754c:	2104      	movs	r1, #4
 801754e:	68f8      	ldr	r0, [r7, #12]
 8017550:	f000 fbc2 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8017554:	4603      	mov	r3, r0
 8017556:	ee79 7a08 	vadd.f32	s15, s18, s16
 801755a:	edc3 7a00 	vstr	s15, [r3]
	result(5) = _state(5) + _state(2)*dt + controlVec(2)*dt2_2;
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	3304      	adds	r3, #4
 8017562:	2105      	movs	r1, #5
 8017564:	4618      	mov	r0, r3
 8017566:	f7f6 fcf2 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801756a:	eeb0 8a40 	vmov.f32	s16, s0
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	3304      	adds	r3, #4
 8017572:	2102      	movs	r1, #2
 8017574:	4618      	mov	r0, r3
 8017576:	f7f6 fcea 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 801757a:	eeb0 7a40 	vmov.f32	s14, s0
 801757e:	edd7 7a07 	vldr	s15, [r7, #28]
 8017582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017586:	ee78 8a27 	vadd.f32	s17, s16, s15
 801758a:	2102      	movs	r1, #2
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	f7fe ffb3 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017592:	eeb0 7a40 	vmov.f32	s14, s0
 8017596:	edd7 7a05 	vldr	s15, [r7, #20]
 801759a:	ee27 8a27 	vmul.f32	s16, s14, s15
 801759e:	2105      	movs	r1, #5
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f000 fb99 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 80175a6:	4603      	mov	r3, r0
 80175a8:	ee78 7a88 	vadd.f32	s15, s17, s16
 80175ac:	edc3 7a00 	vstr	s15, [r3]
	return result;
 80175b0:	bf00      	nop
}
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	3720      	adds	r7, #32
 80175b6:	46bd      	mov	sp, r7
 80175b8:	ecbd 8b04 	vpop	{d8-d9}
 80175bc:	bd80      	pop	{r7, pc}
 80175be:	bf00      	nop
 80175c0:	3428892d 	.word	0x3428892d

080175c4 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_F(const ControlVec& controlVec, float time) const
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	ed2d 8b02 	vpush	{d8}
 80175ca:	b088      	sub	sp, #32
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	60b9      	str	r1, [r7, #8]
 80175d2:	607a      	str	r2, [r7, #4]
 80175d4:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80175de:	ed97 7a00 	vldr	s14, [r7]
 80175e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80175e6:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 80175ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80175ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80175f2:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 80175f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80175fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80175fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017602:	edc7 7a05 	vstr	s15, [r7, #20]
	StateCovarianceMatrix result = Eye<VelocityEKF_stateLen>(1.0f);
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801760c:	4618      	mov	r0, r3
 801760e:	f7f7 ffbb 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
	result(3, 1) = dt*_ER;
 8017612:	2201      	movs	r2, #1
 8017614:	2103      	movs	r1, #3
 8017616:	68f8      	ldr	r0, [r7, #12]
 8017618:	f7f6 fbdc 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801761c:	4603      	mov	r3, r0
 801761e:	edd7 7a07 	vldr	s15, [r7, #28]
 8017622:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017730 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 8017626:	ee67 7a87 	vmul.f32	s15, s15, s14
 801762a:	edc3 7a00 	vstr	s15, [r3]
	result(4, 0) = dt*_ER / cos(_state(3)); result(4, 3) = (_state(0)*dt + dt2_2*controlVec(0)) * sin(_state(3)) * _ER / (cos(_state(3)) * cos(_state(3)));
 801762e:	edd7 7a07 	vldr	s15, [r7, #28]
 8017632:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8017730 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 8017636:	ee27 8a87 	vmul.f32	s16, s15, s14
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	3304      	adds	r3, #4
 801763e:	2103      	movs	r1, #3
 8017640:	4618      	mov	r0, r3
 8017642:	f7f6 fc84 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017646:	eef0 7a40 	vmov.f32	s15, s0
 801764a:	eeb0 0a67 	vmov.f32	s0, s15
 801764e:	f7f9 fbff 	bl	8010e50 <_ZSt3cosf>
 8017652:	eef0 8a40 	vmov.f32	s17, s0
 8017656:	2200      	movs	r2, #0
 8017658:	2104      	movs	r1, #4
 801765a:	68f8      	ldr	r0, [r7, #12]
 801765c:	f7f6 fbba 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8017660:	4603      	mov	r3, r0
 8017662:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8017666:	edc3 7a00 	vstr	s15, [r3]
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	3304      	adds	r3, #4
 801766e:	2100      	movs	r1, #0
 8017670:	4618      	mov	r0, r3
 8017672:	f7f6 fc6c 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017676:	eeb0 7a40 	vmov.f32	s14, s0
 801767a:	edd7 7a07 	vldr	s15, [r7, #28]
 801767e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017682:	2100      	movs	r1, #0
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7fe ff37 	bl	80164f8 <_ZNK3Mat8V_VectorILt3EEclEt>
 801768a:	eeb0 7a40 	vmov.f32	s14, s0
 801768e:	edd7 7a05 	vldr	s15, [r7, #20]
 8017692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017696:	ee38 8a27 	vadd.f32	s16, s16, s15
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	3304      	adds	r3, #4
 801769e:	2103      	movs	r1, #3
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7f6 fc54 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80176a6:	eef0 7a40 	vmov.f32	s15, s0
 80176aa:	eeb0 0a67 	vmov.f32	s0, s15
 80176ae:	f7f9 fbdf 	bl	8010e70 <_ZSt3sinf>
 80176b2:	eef0 7a40 	vmov.f32	s15, s0
 80176b6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80176ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8017730 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 80176be:	ee67 8a87 	vmul.f32	s17, s15, s14
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	3304      	adds	r3, #4
 80176c6:	2103      	movs	r1, #3
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7f6 fc40 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80176ce:	eef0 7a40 	vmov.f32	s15, s0
 80176d2:	eeb0 0a67 	vmov.f32	s0, s15
 80176d6:	f7f9 fbbb 	bl	8010e50 <_ZSt3cosf>
 80176da:	eeb0 8a40 	vmov.f32	s16, s0
 80176de:	68bb      	ldr	r3, [r7, #8]
 80176e0:	3304      	adds	r3, #4
 80176e2:	2103      	movs	r1, #3
 80176e4:	4618      	mov	r0, r3
 80176e6:	f7f6 fc32 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 80176ea:	eef0 7a40 	vmov.f32	s15, s0
 80176ee:	eeb0 0a67 	vmov.f32	s0, s15
 80176f2:	f7f9 fbad 	bl	8010e50 <_ZSt3cosf>
 80176f6:	eef0 7a40 	vmov.f32	s15, s0
 80176fa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80176fe:	2203      	movs	r2, #3
 8017700:	2104      	movs	r1, #4
 8017702:	68f8      	ldr	r0, [r7, #12]
 8017704:	f7f6 fb66 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8017708:	4603      	mov	r3, r0
 801770a:	eec8 7a88 	vdiv.f32	s15, s17, s16
 801770e:	edc3 7a00 	vstr	s15, [r3]
	result(5, 2) = dt;
 8017712:	2202      	movs	r2, #2
 8017714:	2105      	movs	r1, #5
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7f6 fb5c 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801771c:	4602      	mov	r2, r0
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	6013      	str	r3, [r2, #0]
	return result;
 8017722:	bf00      	nop
}
 8017724:	68f8      	ldr	r0, [r7, #12]
 8017726:	3720      	adds	r7, #32
 8017728:	46bd      	mov	sp, r7
 801772a:	ecbd 8b02 	vpop	{d8}
 801772e:	bd80      	pop	{r7, pc}
 8017730:	3428892d 	.word	0x3428892d

08017734 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 8017734:	b580      	push	{r7, lr}
 8017736:	ed2d 8b02 	vpush	{d8}
 801773a:	b0c0      	sub	sp, #256	; 0x100
 801773c:	af00      	add	r7, sp, #0
 801773e:	6178      	str	r0, [r7, #20]
 8017740:	6139      	str	r1, [r7, #16]
 8017742:	60fa      	str	r2, [r7, #12]
 8017744:	60bb      	str	r3, [r7, #8]
 8017746:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8017750:	ed97 7a01 	vldr	s14, [r7, #4]
 8017754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017758:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	const float dt2 = dt*dt;
 801775c:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8017760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017764:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
	const float dt2_2 = dt2 * 0.5f;
 8017768:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 801776c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017774:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
	Matrix<VelocityEKF_stateLen, VelocityEKF_controlLen> W{0.0f};
 8017778:	f107 031c 	add.w	r3, r7, #28
 801777c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8017884 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x150>
 8017780:	4618      	mov	r0, r3
 8017782:	f000 fbb2 	bl	8017eea <_ZN3Mat6MatrixILt6ELt3EEC1Ef>
	W(0,0) = dt; W(1,1) = dt; W(2,2) = dt;
 8017786:	f107 031c 	add.w	r3, r7, #28
 801778a:	2200      	movs	r2, #0
 801778c:	2100      	movs	r1, #0
 801778e:	4618      	mov	r0, r3
 8017790:	f000 fbc8 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017794:	4602      	mov	r2, r0
 8017796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801779a:	6013      	str	r3, [r2, #0]
 801779c:	f107 031c 	add.w	r3, r7, #28
 80177a0:	2201      	movs	r2, #1
 80177a2:	2101      	movs	r1, #1
 80177a4:	4618      	mov	r0, r3
 80177a6:	f000 fbbd 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80177aa:	4602      	mov	r2, r0
 80177ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80177b0:	6013      	str	r3, [r2, #0]
 80177b2:	f107 031c 	add.w	r3, r7, #28
 80177b6:	2202      	movs	r2, #2
 80177b8:	2102      	movs	r1, #2
 80177ba:	4618      	mov	r0, r3
 80177bc:	f000 fbb2 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80177c0:	4602      	mov	r2, r0
 80177c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80177c6:	6013      	str	r3, [r2, #0]
	W(3,1) = dt2_2*_ER;
 80177c8:	f107 031c 	add.w	r3, r7, #28
 80177cc:	2201      	movs	r2, #1
 80177ce:	2103      	movs	r1, #3
 80177d0:	4618      	mov	r0, r3
 80177d2:	f000 fba7 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80177d6:	4603      	mov	r3, r0
 80177d8:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80177dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8017888 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x154>
 80177e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80177e4:	edc3 7a00 	vstr	s15, [r3]
	W(4,0) = W(3,1) / cos(_state(3));
 80177e8:	f107 031c 	add.w	r3, r7, #28
 80177ec:	2201      	movs	r2, #1
 80177ee:	2103      	movs	r1, #3
 80177f0:	4618      	mov	r0, r3
 80177f2:	f000 fb97 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80177f6:	4603      	mov	r3, r0
 80177f8:	ed93 8a00 	vldr	s16, [r3]
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	3304      	adds	r3, #4
 8017800:	2103      	movs	r1, #3
 8017802:	4618      	mov	r0, r3
 8017804:	f7f6 fba3 	bl	800df4e <_ZNK3Mat8V_VectorILt6EEclEt>
 8017808:	eef0 7a40 	vmov.f32	s15, s0
 801780c:	eeb0 0a67 	vmov.f32	s0, s15
 8017810:	f7f9 fb1e 	bl	8010e50 <_ZSt3cosf>
 8017814:	eef0 8a40 	vmov.f32	s17, s0
 8017818:	f107 031c 	add.w	r3, r7, #28
 801781c:	2200      	movs	r2, #0
 801781e:	2104      	movs	r1, #4
 8017820:	4618      	mov	r0, r3
 8017822:	f000 fb7f 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017826:	4603      	mov	r3, r0
 8017828:	eec8 7a28 	vdiv.f32	s15, s16, s17
 801782c:	edc3 7a00 	vstr	s15, [r3]
	W(5,2) = dt2_2;
 8017830:	f107 031c 	add.w	r3, r7, #28
 8017834:	2202      	movs	r2, #2
 8017836:	2105      	movs	r1, #5
 8017838:	4618      	mov	r0, r3
 801783a:	f000 fb73 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801783e:	4602      	mov	r2, r0
 8017840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017844:	6013      	str	r3, [r2, #0]
	return W*controlCov*W.Transposed();
 8017846:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801784a:	f107 011c 	add.w	r1, r7, #28
 801784e:	68ba      	ldr	r2, [r7, #8]
 8017850:	4618      	mov	r0, r3
 8017852:	f000 fb02 	bl	8017e5a <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8017856:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801785a:	f107 021c 	add.w	r2, r7, #28
 801785e:	4611      	mov	r1, r2
 8017860:	4618      	mov	r0, r3
 8017862:	f000 fb78 	bl	8017f56 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801786c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8017870:	4618      	mov	r0, r3
 8017872:	f000 fb18 	bl	8017ea6 <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
}
 8017876:	6978      	ldr	r0, [r7, #20]
 8017878:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801787c:	46bd      	mov	sp, r7
 801787e:	ecbd 8b02 	vpop	{d8}
 8017882:	bd80      	pop	{r7, pc}
 8017884:	00000000 	.word	0x00000000
 8017888:	3428892d 	.word	0x3428892d

0801788c <_ZNK10Algorithms11VelocityEKF2_hEv>:

VelocityEKF::MeassurementVec VelocityEKF::_h() const
{
 801788c:	b4b0      	push	{r4, r5, r7}
 801788e:	b083      	sub	sp, #12
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	6039      	str	r1, [r7, #0]
	return _state;
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	4615      	mov	r5, r2
 801789c:	1d1c      	adds	r4, r3, #4
 801789e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80178a6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80178aa:	6878      	ldr	r0, [r7, #4]
 80178ac:	370c      	adds	r7, #12
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bcb0      	pop	{r4, r5, r7}
 80178b2:	4770      	bx	lr

080178b4 <_ZNK10Algorithms11VelocityEKF2_HEv>:

Matrix<VelocityEKF_meassurementLen, VelocityEKF_stateLen> VelocityEKF::_H() const
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	6039      	str	r1, [r7, #0]
	return Eye<VelocityEKF_meassurementLen>(1.0f);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80178c4:	4618      	mov	r0, r3
 80178c6:	f7f7 fe5f 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 80178ca:	bf00      	nop
}
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <_ZNK10Algorithms11VelocityEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:

VelocityEKF::MeasurementCovarianceMatrix VelocityEKF::_InvertMatrix(const MeasurementCovarianceMatrix& matrix) const
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b084      	sub	sp, #16
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	607a      	str	r2, [r7, #4]
	auto result = matrix;
 80178e0:	68fa      	ldr	r2, [r7, #12]
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	4610      	mov	r0, r2
 80178e6:	4619      	mov	r1, r3
 80178e8:	2390      	movs	r3, #144	; 0x90
 80178ea:	461a      	mov	r2, r3
 80178ec:	f007 f9a1 	bl	801ec32 <memcpy>
	return result;
 80178f0:	bf00      	nop
}
 80178f2:	68f8      	ldr	r0, [r7, #12]
 80178f4:	3710      	adds	r7, #16
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
	...

080178fc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> VelocityEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 80178fc:	b5b0      	push	{r4, r5, r7, lr}
 80178fe:	b090      	sub	sp, #64	; 0x40
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	60b9      	str	r1, [r7, #8]
 8017906:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8017908:	2200      	movs	r2, #0
 801790a:	2100      	movs	r1, #0
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f7f6 fdf6 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8017912:	eef0 7a40 	vmov.f32	s15, s0
 8017916:	4bd4      	ldr	r3, [pc, #848]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017918:	edc3 7a00 	vstr	s15, [r3]
 801791c:	2201      	movs	r2, #1
 801791e:	2100      	movs	r1, #0
 8017920:	6878      	ldr	r0, [r7, #4]
 8017922:	f7f6 fdec 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8017926:	eef0 7a40 	vmov.f32	s15, s0
 801792a:	4bd0      	ldr	r3, [pc, #832]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801792c:	edc3 7a00 	vstr	s15, [r3]
 8017930:	2202      	movs	r2, #2
 8017932:	2100      	movs	r1, #0
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7f6 fde2 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801793a:	eef0 7a40 	vmov.f32	s15, s0
 801793e:	4bcc      	ldr	r3, [pc, #816]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017940:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 8017944:	2200      	movs	r2, #0
 8017946:	2101      	movs	r1, #1
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7f6 fdd8 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801794e:	eef0 7a40 	vmov.f32	s15, s0
 8017952:	4bc8      	ldr	r3, [pc, #800]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017954:	edc3 7a00 	vstr	s15, [r3]
 8017958:	2201      	movs	r2, #1
 801795a:	2101      	movs	r1, #1
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f6 fdce 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8017962:	eef0 7a40 	vmov.f32	s15, s0
 8017966:	4bc4      	ldr	r3, [pc, #784]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017968:	edc3 7a00 	vstr	s15, [r3]
 801796c:	2202      	movs	r2, #2
 801796e:	2101      	movs	r1, #1
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7f6 fdc4 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8017976:	eef0 7a40 	vmov.f32	s15, s0
 801797a:	4bc0      	ldr	r3, [pc, #768]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801797c:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 8017980:	2200      	movs	r2, #0
 8017982:	2102      	movs	r1, #2
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f7f6 fdba 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801798a:	eef0 7a40 	vmov.f32	s15, s0
 801798e:	4bbc      	ldr	r3, [pc, #752]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017990:	edc3 7a00 	vstr	s15, [r3]
 8017994:	2201      	movs	r2, #1
 8017996:	2102      	movs	r1, #2
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f7f6 fdb0 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801799e:	eef0 7a40 	vmov.f32	s15, s0
 80179a2:	4bb8      	ldr	r3, [pc, #736]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80179a4:	edc3 7a00 	vstr	s15, [r3]
 80179a8:	2202      	movs	r2, #2
 80179aa:	2102      	movs	r1, #2
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7f6 fda6 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80179b2:	eef0 7a40 	vmov.f32	s15, s0
 80179b6:	4bb4      	ldr	r3, [pc, #720]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80179b8:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 80179bc:	4baa      	ldr	r3, [pc, #680]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80179be:	ed93 7a00 	vldr	s14, [r3]
 80179c2:	4bad      	ldr	r3, [pc, #692]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80179c4:	edd3 7a00 	vldr	s15, [r3]
 80179c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80179cc:	4bae      	ldr	r3, [pc, #696]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80179ce:	edd3 7a00 	vldr	s15, [r3]
 80179d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80179d6:	4ba4      	ldr	r3, [pc, #656]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80179d8:	edd3 6a00 	vldr	s13, [r3]
 80179dc:	4ba7      	ldr	r3, [pc, #668]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80179de:	edd3 7a00 	vldr	s15, [r3]
 80179e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80179e6:	4ba7      	ldr	r3, [pc, #668]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80179e8:	edd3 7a00 	vldr	s15, [r3]
 80179ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80179f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80179f4:	4b9d      	ldr	r3, [pc, #628]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80179f6:	edd3 6a00 	vldr	s13, [r3]
 80179fa:	4b9e      	ldr	r3, [pc, #632]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80179fc:	edd3 7a00 	vldr	s15, [r3]
 8017a00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017a04:	4ba0      	ldr	r3, [pc, #640]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017a06:	edd3 7a00 	vldr	s15, [r3]
 8017a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a12:	4b96      	ldr	r3, [pc, #600]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017a14:	edd3 6a00 	vldr	s13, [r3]
 8017a18:	4b98      	ldr	r3, [pc, #608]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017a1a:	edd3 7a00 	vldr	s15, [r3]
 8017a1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017a22:	4b97      	ldr	r3, [pc, #604]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017a24:	edd3 7a00 	vldr	s15, [r3]
 8017a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a30:	4b8f      	ldr	r3, [pc, #572]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017a32:	edd3 6a00 	vldr	s13, [r3]
 8017a36:	4b8f      	ldr	r3, [pc, #572]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017a38:	edd3 7a00 	vldr	s15, [r3]
 8017a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017a40:	4b90      	ldr	r3, [pc, #576]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017a42:	edd3 7a00 	vldr	s15, [r3]
 8017a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a4e:	4b88      	ldr	r3, [pc, #544]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017a50:	edd3 6a00 	vldr	s13, [r3]
 8017a54:	4b88      	ldr	r3, [pc, #544]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017a56:	edd3 7a00 	vldr	s15, [r3]
 8017a5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017a5e:	4b88      	ldr	r3, [pc, #544]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017a60:	edd3 7a00 	vldr	s15, [r3]
 8017a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 8017a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017a7c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 8017a80:	4b82      	ldr	r3, [pc, #520]	; (8017c8c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	f3bf 8f5b 	dmb	ish
 8017a88:	f003 0301 	and.w	r3, r3, #1
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	bf0c      	ite	eq
 8017a90:	2301      	moveq	r3, #1
 8017a92:	2300      	movne	r3, #0
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	f000 810b 	beq.w	8017cb2 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 8017a9c:	487b      	ldr	r0, [pc, #492]	; (8017c8c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8017a9e:	f005 fe83 	bl	801d7a8 <__cxa_guard_acquire>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	bf14      	ite	ne
 8017aa8:	2301      	movne	r3, #1
 8017aaa:	2300      	moveq	r3, #0
 8017aac:	b2db      	uxtb	r3, r3
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 80ff 	beq.w	8017cb2 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8017ab4:	4b70      	ldr	r3, [pc, #448]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017ab6:	ed93 7a00 	vldr	s14, [r3]
 8017aba:	4b73      	ldr	r3, [pc, #460]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017abc:	edd3 7a00 	vldr	s15, [r3]
 8017ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017ac4:	4b6d      	ldr	r3, [pc, #436]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017ac6:	edd3 6a00 	vldr	s13, [r3]
 8017aca:	4b6e      	ldr	r3, [pc, #440]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017acc:	edd3 7a00 	vldr	s15, [r3]
 8017ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017ad4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017ad8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017adc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017ae0:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8017ae4:	4b61      	ldr	r3, [pc, #388]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017ae6:	ed93 7a00 	vldr	s14, [r3]
 8017aea:	4b67      	ldr	r3, [pc, #412]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017aec:	edd3 7a00 	vldr	s15, [r3]
 8017af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017af4:	4b5e      	ldr	r3, [pc, #376]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017af6:	edd3 6a00 	vldr	s13, [r3]
 8017afa:	4b62      	ldr	r3, [pc, #392]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017afc:	edd3 7a00 	vldr	s15, [r3]
 8017b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b08:	eeb1 7a67 	vneg.f32	s14, s15
 8017b0c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017b10:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017b14:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8017b18:	4b54      	ldr	r3, [pc, #336]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017b1a:	ed93 7a00 	vldr	s14, [r3]
 8017b1e:	4b57      	ldr	r3, [pc, #348]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017b20:	edd3 7a00 	vldr	s15, [r3]
 8017b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017b28:	4b51      	ldr	r3, [pc, #324]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017b2a:	edd3 6a00 	vldr	s13, [r3]
 8017b2e:	4b52      	ldr	r3, [pc, #328]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017b30:	edd3 7a00 	vldr	s15, [r3]
 8017b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017b38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017b3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017b40:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017b44:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8017b48:	4b4a      	ldr	r3, [pc, #296]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017b4a:	ed93 7a00 	vldr	s14, [r3]
 8017b4e:	4b4e      	ldr	r3, [pc, #312]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017b50:	edd3 7a00 	vldr	s15, [r3]
 8017b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017b58:	4b48      	ldr	r3, [pc, #288]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017b5a:	edd3 6a00 	vldr	s13, [r3]
 8017b5e:	4b48      	ldr	r3, [pc, #288]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017b60:	edd3 7a00 	vldr	s15, [r3]
 8017b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b6c:	eeb1 7a67 	vneg.f32	s14, s15
 8017b70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017b74:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017b78:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8017b7c:	4b3a      	ldr	r3, [pc, #232]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017b7e:	ed93 7a00 	vldr	s14, [r3]
 8017b82:	4b41      	ldr	r3, [pc, #260]	; (8017c88 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017b84:	edd3 7a00 	vldr	s15, [r3]
 8017b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017b8c:	4b38      	ldr	r3, [pc, #224]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017b8e:	edd3 6a00 	vldr	s13, [r3]
 8017b92:	4b3b      	ldr	r3, [pc, #236]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017b94:	edd3 7a00 	vldr	s15, [r3]
 8017b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017ba0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017ba8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8017bac:	4b2e      	ldr	r3, [pc, #184]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017bae:	ed93 7a00 	vldr	s14, [r3]
 8017bb2:	4b32      	ldr	r3, [pc, #200]	; (8017c7c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017bb4:	edd3 7a00 	vldr	s15, [r3]
 8017bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017bbc:	4b2c      	ldr	r3, [pc, #176]	; (8017c70 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017bbe:	edd3 6a00 	vldr	s13, [r3]
 8017bc2:	4b2c      	ldr	r3, [pc, #176]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017bc4:	edd3 7a00 	vldr	s15, [r3]
 8017bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bd0:	eeb1 7a67 	vneg.f32	s14, s15
 8017bd4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017bdc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8017be0:	4b24      	ldr	r3, [pc, #144]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017be2:	ed93 7a00 	vldr	s14, [r3]
 8017be6:	4b27      	ldr	r3, [pc, #156]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017be8:	edd3 7a00 	vldr	s15, [r3]
 8017bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017bf0:	4b21      	ldr	r3, [pc, #132]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017bf2:	edd3 6a00 	vldr	s13, [r3]
 8017bf6:	4b22      	ldr	r3, [pc, #136]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017bf8:	edd3 7a00 	vldr	s15, [r3]
 8017bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017c04:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017c08:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017c0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8017c10:	4b15      	ldr	r3, [pc, #84]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017c12:	ed93 7a00 	vldr	s14, [r3]
 8017c16:	4b1b      	ldr	r3, [pc, #108]	; (8017c84 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017c18:	edd3 7a00 	vldr	s15, [r3]
 8017c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017c20:	4b12      	ldr	r3, [pc, #72]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017c22:	edd3 6a00 	vldr	s13, [r3]
 8017c26:	4b16      	ldr	r3, [pc, #88]	; (8017c80 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017c28:	edd3 7a00 	vldr	s15, [r3]
 8017c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c34:	eeb1 7a67 	vneg.f32	s14, s15
 8017c38:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017c40:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8017c44:	4b08      	ldr	r3, [pc, #32]	; (8017c68 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017c46:	ed93 7a00 	vldr	s14, [r3]
 8017c4a:	4b0b      	ldr	r3, [pc, #44]	; (8017c78 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017c4c:	edd3 7a00 	vldr	s15, [r3]
 8017c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017c54:	4b05      	ldr	r3, [pc, #20]	; (8017c6c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017c56:	edd3 6a00 	vldr	s13, [r3]
 8017c5a:	4b06      	ldr	r3, [pc, #24]	; (8017c74 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017c5c:	edd3 7a00 	vldr	s15, [r3]
 8017c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017c64:	e014      	b.n	8017c90 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 8017c66:	bf00      	nop
 8017c68:	24005698 	.word	0x24005698
 8017c6c:	2400569c 	.word	0x2400569c
 8017c70:	240056a0 	.word	0x240056a0
 8017c74:	240056a4 	.word	0x240056a4
 8017c78:	240056a8 	.word	0x240056a8
 8017c7c:	240056ac 	.word	0x240056ac
 8017c80:	240056b0 	.word	0x240056b0
 8017c84:	240056b4 	.word	0x240056b4
 8017c88:	240056b8 	.word	0x240056b8
 8017c8c:	240056e0 	.word	0x240056e0
 8017c90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017c94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017c98:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017c9c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8017ca0:	f107 0314 	add.w	r3, r7, #20
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	480a      	ldr	r0, [pc, #40]	; (8017cd0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8017ca8:	f7f8 ffa8 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 8017cac:	4809      	ldr	r0, [pc, #36]	; (8017cd4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 8017cae:	f005 fd87 	bl	801d7c0 <__cxa_guard_release>
	return result;
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	4a06      	ldr	r2, [pc, #24]	; (8017cd0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8017cb6:	461c      	mov	r4, r3
 8017cb8:	4615      	mov	r5, r2
 8017cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017cc2:	682b      	ldr	r3, [r5, #0]
 8017cc4:	6023      	str	r3, [r4, #0]
}
 8017cc6:	68f8      	ldr	r0, [r7, #12]
 8017cc8:	3740      	adds	r7, #64	; 0x40
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	240056bc 	.word	0x240056bc
 8017cd4:	240056e0 	.word	0x240056e0

08017cd8 <_ZN3Mat8V_VectorILt6EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	460b      	mov	r3, r1
 8017ce2:	807b      	strh	r3, [r7, #2]
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	887a      	ldrh	r2, [r7, #2]
 8017ce8:	4611      	mov	r1, r2
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7f8 fc95 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3708      	adds	r7, #8
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}

08017cfa <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017cfa:	b480      	push	{r7}
 8017cfc:	b083      	sub	sp, #12
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	6078      	str	r0, [r7, #4]
 8017d02:	6039      	str	r1, [r7, #0]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681a      	ldr	r2, [r3, #0]
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	601a      	str	r2, [r3, #0]
 8017d0c:	bf00      	nop
 8017d0e:	370c      	adds	r7, #12
 8017d10:	46bd      	mov	sp, r7
 8017d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d16:	4770      	bx	lr

08017d18 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8017d18:	b590      	push	{r4, r7, lr}
 8017d1a:	b083      	sub	sp, #12
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f000 f945 	bl	8017fb6 <_ZNSt5arrayIfLj18EE5beginEv>
 8017d2c:	4604      	mov	r4, r0
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	4618      	mov	r0, r3
 8017d32:	f000 f94c 	bl	8017fce <_ZNSt5arrayIfLj18EE3endEv>
 8017d36:	4603      	mov	r3, r0
 8017d38:	edd7 7a00 	vldr	s15, [r7]
 8017d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8017d40:	4619      	mov	r1, r3
 8017d42:	4620      	mov	r0, r4
 8017d44:	f000 f950 	bl	8017fe8 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	370c      	adds	r7, #12
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd90      	pop	{r4, r7, pc}

08017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8017d52:	b580      	push	{r7, lr}
 8017d54:	b084      	sub	sp, #16
 8017d56:	af00      	add	r7, sp, #0
 8017d58:	6078      	str	r0, [r7, #4]
 8017d5a:	460b      	mov	r3, r1
 8017d5c:	807b      	strh	r3, [r7, #2]
 8017d5e:	4613      	mov	r3, r2
 8017d60:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8017d62:	887a      	ldrh	r2, [r7, #2]
 8017d64:	4613      	mov	r3, r2
 8017d66:	005b      	lsls	r3, r3, #1
 8017d68:	4413      	add	r3, r2
 8017d6a:	005b      	lsls	r3, r3, #1
 8017d6c:	461a      	mov	r2, r3
 8017d6e:	883b      	ldrh	r3, [r7, #0]
 8017d70:	4413      	add	r3, r2
 8017d72:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	68f9      	ldr	r1, [r7, #12]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f000 f951 	bl	8018020 <_ZNSt5arrayIfLj18EEixEj>
 8017d7e:	4603      	mov	r3, r0
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b084      	sub	sp, #16
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	f000 f952 	bl	801803e <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	Multiply(other, result);
 8017d9a:	68fa      	ldr	r2, [r7, #12]
 8017d9c:	6879      	ldr	r1, [r7, #4]
 8017d9e:	68b8      	ldr	r0, [r7, #8]
 8017da0:	f000 f958 	bl	8018054 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8017da4:	bf00      	nop
}
 8017da6:	68f8      	ldr	r0, [r7, #12]
 8017da8:	3710      	adds	r7, #16
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}

08017dae <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8017dae:	b590      	push	{r4, r7, lr}
 8017db0:	b085      	sub	sp, #20
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
 8017db6:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8017db8:	6878      	ldr	r0, [r7, #4]
 8017dba:	f000 f9ff 	bl	80181bc <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	81fb      	strh	r3, [r7, #14]
 8017dc2:	e01c      	b.n	8017dfe <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	81bb      	strh	r3, [r7, #12]
 8017dc8:	e013      	b.n	8017df2 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8017dca:	89ba      	ldrh	r2, [r7, #12]
 8017dcc:	89fb      	ldrh	r3, [r7, #14]
 8017dce:	4619      	mov	r1, r3
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f000 f8a7 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017dd6:	4604      	mov	r4, r0
 8017dd8:	89fa      	ldrh	r2, [r7, #14]
 8017dda:	89bb      	ldrh	r3, [r7, #12]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6838      	ldr	r0, [r7, #0]
 8017de0:	f000 f9f7 	bl	80181d2 <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8017de4:	eef0 7a40 	vmov.f32	s15, s0
 8017de8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8017dec:	89bb      	ldrh	r3, [r7, #12]
 8017dee:	3301      	adds	r3, #1
 8017df0:	81bb      	strh	r3, [r7, #12]
 8017df2:	89bb      	ldrh	r3, [r7, #12]
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d9e8      	bls.n	8017dca <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8017df8:	89fb      	ldrh	r3, [r7, #14]
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	81fb      	strh	r3, [r7, #14]
 8017dfe:	89fb      	ldrh	r3, [r7, #14]
 8017e00:	2b05      	cmp	r3, #5
 8017e02:	d9df      	bls.n	8017dc4 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x16>
	return result;
 8017e04:	bf00      	nop
}
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	3714      	adds	r7, #20
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd90      	pop	{r4, r7, pc}

08017e0e <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017e0e:	b580      	push	{r7, lr}
 8017e10:	b084      	sub	sp, #16
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	60f8      	str	r0, [r7, #12]
 8017e16:	60b9      	str	r1, [r7, #8]
 8017e18:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017e1a:	68f8      	ldr	r0, [r7, #12]
 8017e1c:	f7f5 ffab 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8017e20:	68fa      	ldr	r2, [r7, #12]
 8017e22:	6879      	ldr	r1, [r7, #4]
 8017e24:	68b8      	ldr	r0, [r7, #8]
 8017e26:	f000 f9f3 	bl	8018210 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8017e2a:	bf00      	nop
}
 8017e2c:	68f8      	ldr	r0, [r7, #12]
 8017e2e:	3710      	adds	r7, #16
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b084      	sub	sp, #16
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	60f8      	str	r0, [r7, #12]
 8017e3c:	60b9      	str	r1, [r7, #8]
 8017e3e:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017e40:	68f8      	ldr	r0, [r7, #12]
 8017e42:	f000 f9bb 	bl	80181bc <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8017e46:	68fa      	ldr	r2, [r7, #12]
 8017e48:	6879      	ldr	r1, [r7, #4]
 8017e4a:	68b8      	ldr	r0, [r7, #8]
 8017e4c:	f000 fa94 	bl	8018378 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 8017e50:	bf00      	nop
}
 8017e52:	68f8      	ldr	r0, [r7, #12]
 8017e54:	3710      	adds	r7, #16
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017e5a:	b580      	push	{r7, lr}
 8017e5c:	b084      	sub	sp, #16
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	60f8      	str	r0, [r7, #12]
 8017e62:	60b9      	str	r1, [r7, #8]
 8017e64:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	f000 f9a8 	bl	80181bc <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8017e6c:	68fa      	ldr	r2, [r7, #12]
 8017e6e:	6879      	ldr	r1, [r7, #4]
 8017e70:	68b8      	ldr	r0, [r7, #8]
 8017e72:	f000 fb35 	bl	80184e0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017e76:	bf00      	nop
}
 8017e78:	68f8      	ldr	r0, [r7, #12]
 8017e7a:	3710      	adds	r7, #16
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	60f8      	str	r0, [r7, #12]
 8017e88:	60b9      	str	r1, [r7, #8]
 8017e8a:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017e8c:	68f8      	ldr	r0, [r7, #12]
 8017e8e:	f7f6 f8b3 	bl	800dff8 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 8017e92:	68fa      	ldr	r2, [r7, #12]
 8017e94:	6879      	ldr	r1, [r7, #4]
 8017e96:	68b8      	ldr	r0, [r7, #8]
 8017e98:	f000 fbd6 	bl	8018648 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017e9c:	bf00      	nop
}
 8017e9e:	68f8      	ldr	r0, [r7, #12]
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}

08017ea6 <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017ea6:	b580      	push	{r7, lr}
 8017ea8:	b084      	sub	sp, #16
 8017eaa:	af00      	add	r7, sp, #0
 8017eac:	60f8      	str	r0, [r7, #12]
 8017eae:	60b9      	str	r1, [r7, #8]
 8017eb0:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017eb2:	68f8      	ldr	r0, [r7, #12]
 8017eb4:	f7f5 ff1f 	bl	800dcf6 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 8017eb8:	68fa      	ldr	r2, [r7, #12]
 8017eba:	6879      	ldr	r1, [r7, #4]
 8017ebc:	68b8      	ldr	r0, [r7, #8]
 8017ebe:	f000 fc77 	bl	80187b0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017ec2:	bf00      	nop
}
 8017ec4:	68f8      	ldr	r0, [r7, #12]
 8017ec6:	3710      	adds	r7, #16
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	6039      	str	r1, [r7, #0]
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681a      	ldr	r2, [r3, #0]
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	601a      	str	r2, [r3, #0]
 8017ede:	bf00      	nop
 8017ee0:	370c      	adds	r7, #12
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee8:	4770      	bx	lr

08017eea <_ZN3Mat6MatrixILt6ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8017eea:	b590      	push	{r4, r7, lr}
 8017eec:	b083      	sub	sp, #12
 8017eee:	af00      	add	r7, sp, #0
 8017ef0:	6078      	str	r0, [r7, #4]
 8017ef2:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f000 f85c 	bl	8017fb6 <_ZNSt5arrayIfLj18EE5beginEv>
 8017efe:	4604      	mov	r4, r0
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	4618      	mov	r0, r3
 8017f04:	f000 f863 	bl	8017fce <_ZNSt5arrayIfLj18EE3endEv>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	edd7 7a00 	vldr	s15, [r7]
 8017f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8017f12:	4619      	mov	r1, r3
 8017f14:	4620      	mov	r0, r4
 8017f16:	f000 fcff 	bl	8018918 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	370c      	adds	r7, #12
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd90      	pop	{r4, r7, pc}

08017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	807b      	strh	r3, [r7, #2]
 8017f30:	4613      	mov	r3, r2
 8017f32:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8017f34:	887a      	ldrh	r2, [r7, #2]
 8017f36:	4613      	mov	r3, r2
 8017f38:	005b      	lsls	r3, r3, #1
 8017f3a:	441a      	add	r2, r3
 8017f3c:	883b      	ldrh	r3, [r7, #0]
 8017f3e:	4413      	add	r3, r2
 8017f40:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	68f9      	ldr	r1, [r7, #12]
 8017f46:	4618      	mov	r0, r3
 8017f48:	f000 f86a 	bl	8018020 <_ZNSt5arrayIfLj18EEixEj>
 8017f4c:	4603      	mov	r3, r0
}
 8017f4e:	4618      	mov	r0, r3
 8017f50:	3710      	adds	r7, #16
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}

08017f56 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8017f56:	b590      	push	{r4, r7, lr}
 8017f58:	b085      	sub	sp, #20
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
 8017f5e:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f000 f86c 	bl	801803e <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8017f66:	2300      	movs	r3, #0
 8017f68:	81fb      	strh	r3, [r7, #14]
 8017f6a:	e01c      	b.n	8017fa6 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	81bb      	strh	r3, [r7, #12]
 8017f70:	e013      	b.n	8017f9a <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8017f72:	89ba      	ldrh	r2, [r7, #12]
 8017f74:	89fb      	ldrh	r3, [r7, #14]
 8017f76:	4619      	mov	r1, r3
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f7ff feea 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8017f7e:	4604      	mov	r4, r0
 8017f80:	89fa      	ldrh	r2, [r7, #14]
 8017f82:	89bb      	ldrh	r3, [r7, #12]
 8017f84:	4619      	mov	r1, r3
 8017f86:	6838      	ldr	r0, [r7, #0]
 8017f88:	f000 fce2 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8017f8c:	eef0 7a40 	vmov.f32	s15, s0
 8017f90:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8017f94:	89bb      	ldrh	r3, [r7, #12]
 8017f96:	3301      	adds	r3, #1
 8017f98:	81bb      	strh	r3, [r7, #12]
 8017f9a:	89bb      	ldrh	r3, [r7, #12]
 8017f9c:	2b05      	cmp	r3, #5
 8017f9e:	d9e8      	bls.n	8017f72 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8017fa0:	89fb      	ldrh	r3, [r7, #14]
 8017fa2:	3301      	adds	r3, #1
 8017fa4:	81fb      	strh	r3, [r7, #14]
 8017fa6:	89fb      	ldrh	r3, [r7, #14]
 8017fa8:	2b02      	cmp	r3, #2
 8017faa:	d9df      	bls.n	8017f6c <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x16>
	return result;
 8017fac:	bf00      	nop
}
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	3714      	adds	r7, #20
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	bd90      	pop	{r4, r7, pc}

08017fb6 <_ZNSt5arrayIfLj18EE5beginEv>:
      begin() noexcept
 8017fb6:	b580      	push	{r7, lr}
 8017fb8:	b082      	sub	sp, #8
 8017fba:	af00      	add	r7, sp, #0
 8017fbc:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f000 fce3 	bl	801898a <_ZNSt5arrayIfLj18EE4dataEv>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3708      	adds	r7, #8
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <_ZNSt5arrayIfLj18EE3endEv>:
      end() noexcept
 8017fce:	b580      	push	{r7, lr}
 8017fd0:	b082      	sub	sp, #8
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 fcd7 	bl	801898a <_ZNSt5arrayIfLj18EE4dataEv>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	3348      	adds	r3, #72	; 0x48
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	3708      	adds	r7, #8
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b084      	sub	sp, #16
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	60f8      	str	r0, [r7, #12]
 8017ff0:	60b9      	str	r1, [r7, #8]
 8017ff2:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8017ff6:	e007      	b.n	8018008 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8017ff8:	1d3b      	adds	r3, r7, #4
 8017ffa:	68f9      	ldr	r1, [r7, #12]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7ff fe7c 	bl	8017cfa <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	3304      	adds	r3, #4
 8018006:	60fb      	str	r3, [r7, #12]
 8018008:	68fa      	ldr	r2, [r7, #12]
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	429a      	cmp	r2, r3
 801800e:	d1f3      	bne.n	8017ff8 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	ee07 3a90 	vmov	s15, r3
    }
 8018016:	eeb0 0a67 	vmov.f32	s0, s15
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <_ZNSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) noexcept
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6839      	ldr	r1, [r7, #0]
 801802e:	4618      	mov	r0, r3
 8018030:	f000 fcb8 	bl	80189a4 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 8018034:	4603      	mov	r3, r0
      }
 8018036:	4618      	mov	r0, r3
 8018038:	3708      	adds	r7, #8
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}

0801803e <_ZN3Mat6MatrixILt3ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801803e:	b480      	push	{r7}
 8018040:	b083      	sub	sp, #12
 8018042:	af00      	add	r7, sp, #0
 8018044:	6078      	str	r0, [r7, #4]
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	4618      	mov	r0, r3
 801804a:	370c      	adds	r7, #12
 801804c:	46bd      	mov	sp, r7
 801804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018052:	4770      	bx	lr

08018054 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018056:	b0bf      	sub	sp, #252	; 0xfc
 8018058:	af00      	add	r7, sp, #0
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	60b9      	str	r1, [r7, #8]
 801805e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8018060:	2300      	movs	r3, #0
 8018062:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8018066:	e02d      	b.n	80180c4 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8018068:	2300      	movs	r3, #0
 801806a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 801806e:	e020      	b.n	80180b2 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8018070:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8018074:	f107 0314 	add.w	r3, r7, #20
 8018078:	4611      	mov	r1, r2
 801807a:	4618      	mov	r0, r3
 801807c:	f000 fca1 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018080:	4602      	mov	r2, r0
 8018082:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8018086:	4619      	mov	r1, r3
 8018088:	4610      	mov	r0, r2
 801808a:	f7f8 fac6 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801808e:	4604      	mov	r4, r0
 8018090:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8018094:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8018098:	4619      	mov	r1, r3
 801809a:	68f8      	ldr	r0, [r7, #12]
 801809c:	f000 f899 	bl	80181d2 <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 80180a0:	eef0 7a40 	vmov.f32	s15, s0
 80180a4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80180a8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80180ac:	3301      	adds	r3, #1
 80180ae:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80180b2:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80180b6:	2b05      	cmp	r3, #5
 80180b8:	d9da      	bls.n	8018070 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80180ba:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80180be:	3301      	adds	r3, #1
 80180c0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80180c4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80180c8:	2b02      	cmp	r3, #2
 80180ca:	d9cd      	bls.n	8018068 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80180cc:	2300      	movs	r3, #0
 80180ce:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 80180d2:	e02d      	b.n	8018130 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80180d4:	2300      	movs	r3, #0
 80180d6:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80180da:	e020      	b.n	801811e <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80180dc:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 80180e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80180e4:	4611      	mov	r1, r2
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7f8 fbc3 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80180ec:	4602      	mov	r2, r0
 80180ee:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80180f2:	4619      	mov	r1, r3
 80180f4:	4610      	mov	r0, r2
 80180f6:	f7f8 fa90 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 80180fa:	4604      	mov	r4, r0
 80180fc:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8018100:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018104:	4619      	mov	r1, r3
 8018106:	68b8      	ldr	r0, [r7, #8]
 8018108:	f7f8 f9a9 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 801810c:	eef0 7a40 	vmov.f32	s15, s0
 8018110:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018114:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018118:	3301      	adds	r3, #1
 801811a:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 801811e:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018122:	2b05      	cmp	r3, #5
 8018124:	d9da      	bls.n	80180dc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8018126:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 801812a:	3301      	adds	r3, #1
 801812c:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8018130:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8018134:	2b05      	cmp	r3, #5
 8018136:	d9cd      	bls.n	80180d4 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8018138:	2300      	movs	r3, #0
 801813a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 801813e:	e034      	b.n	80181aa <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018140:	2300      	movs	r3, #0
 8018142:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8018146:	e027      	b.n	8018198 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8018148:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 801814c:	f107 0314 	add.w	r3, r7, #20
 8018150:	4611      	mov	r1, r2
 8018152:	4618      	mov	r0, r3
 8018154:	f000 fc35 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018158:	4605      	mov	r5, r0
 801815a:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 801815e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018162:	4611      	mov	r1, r2
 8018164:	4618      	mov	r0, r3
 8018166:	f7f8 fb84 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801816a:	4606      	mov	r6, r0
 801816c:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8018170:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8018174:	4619      	mov	r1, r3
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f7ff fdeb 	bl	8017d52 <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 801817c:	4604      	mov	r4, r0
 801817e:	4631      	mov	r1, r6
 8018180:	4628      	mov	r0, r5
 8018182:	f7f8 fb85 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8018186:	eef0 7a40 	vmov.f32	s15, s0
 801818a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801818e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8018192:	3301      	adds	r3, #1
 8018194:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8018198:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 801819c:	2b05      	cmp	r3, #5
 801819e:	d9d3      	bls.n	8018148 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80181a0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80181a4:	3301      	adds	r3, #1
 80181a6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80181aa:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80181ae:	2b02      	cmp	r3, #2
 80181b0:	d9c6      	bls.n	8018140 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 80181b2:	bf00      	nop
 80181b4:	bf00      	nop
 80181b6:	37fc      	adds	r7, #252	; 0xfc
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181bc <_ZN3Mat6MatrixILt6ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	4618      	mov	r0, r3
 80181c8:	370c      	adds	r7, #12
 80181ca:	46bd      	mov	sp, r7
 80181cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d0:	4770      	bx	lr

080181d2 <_ZNK3Mat6MatrixILt3ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80181d2:	b580      	push	{r7, lr}
 80181d4:	b084      	sub	sp, #16
 80181d6:	af00      	add	r7, sp, #0
 80181d8:	6078      	str	r0, [r7, #4]
 80181da:	460b      	mov	r3, r1
 80181dc:	807b      	strh	r3, [r7, #2]
 80181de:	4613      	mov	r3, r2
 80181e0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80181e2:	887a      	ldrh	r2, [r7, #2]
 80181e4:	4613      	mov	r3, r2
 80181e6:	005b      	lsls	r3, r3, #1
 80181e8:	4413      	add	r3, r2
 80181ea:	005b      	lsls	r3, r3, #1
 80181ec:	461a      	mov	r2, r3
 80181ee:	883b      	ldrh	r3, [r7, #0]
 80181f0:	4413      	add	r3, r2
 80181f2:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	68f9      	ldr	r1, [r7, #12]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f000 fbf1 	bl	80189e0 <_ZNKSt5arrayIfLj18EEixEj>
 80181fe:	4603      	mov	r3, r0
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	ee07 3a90 	vmov	s15, r3
}
 8018206:	eeb0 0a67 	vmov.f32	s0, s15
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018212:	b0ad      	sub	sp, #180	; 0xb4
 8018214:	af00      	add	r7, sp, #0
 8018216:	60f8      	str	r0, [r7, #12]
 8018218:	60b9      	str	r1, [r7, #8]
 801821a:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 801821c:	2300      	movs	r3, #0
 801821e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018222:	e02d      	b.n	8018280 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8018224:	2300      	movs	r3, #0
 8018226:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 801822a:	e020      	b.n	801826e <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 801822c:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8018230:	f107 0314 	add.w	r3, r7, #20
 8018234:	4611      	mov	r1, r2
 8018236:	4618      	mov	r0, r3
 8018238:	f000 fbc3 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801823c:	4602      	mov	r2, r0
 801823e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018242:	4619      	mov	r1, r3
 8018244:	4610      	mov	r0, r2
 8018246:	f7f8 f9e8 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801824a:	4604      	mov	r4, r0
 801824c:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8018250:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018254:	4619      	mov	r1, r3
 8018256:	68f8      	ldr	r0, [r7, #12]
 8018258:	f7ff ffbb 	bl	80181d2 <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 801825c:	eef0 7a40 	vmov.f32	s15, s0
 8018260:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8018264:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018268:	3301      	adds	r3, #1
 801826a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 801826e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018272:	2b05      	cmp	r3, #5
 8018274:	d9da      	bls.n	801822c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8018276:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801827a:	3301      	adds	r3, #1
 801827c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018280:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018284:	2b02      	cmp	r3, #2
 8018286:	d9cd      	bls.n	8018224 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018288:	2300      	movs	r3, #0
 801828a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801828e:	e02d      	b.n	80182ec <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018290:	2300      	movs	r3, #0
 8018292:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8018296:	e020      	b.n	80182da <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8018298:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801829c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80182a0:	4611      	mov	r1, r2
 80182a2:	4618      	mov	r0, r3
 80182a4:	f000 fb8d 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 80182a8:	4602      	mov	r2, r0
 80182aa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80182ae:	4619      	mov	r1, r3
 80182b0:	4610      	mov	r0, r2
 80182b2:	f7f8 f9b2 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 80182b6:	4604      	mov	r4, r0
 80182b8:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80182bc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80182c0:	4619      	mov	r1, r3
 80182c2:	68b8      	ldr	r0, [r7, #8]
 80182c4:	f000 fb44 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 80182c8:	eef0 7a40 	vmov.f32	s15, s0
 80182cc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80182d0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80182d4:	3301      	adds	r3, #1
 80182d6:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80182da:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80182de:	2b05      	cmp	r3, #5
 80182e0:	d9da      	bls.n	8018298 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80182e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80182e6:	3301      	adds	r3, #1
 80182e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80182ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80182f0:	2b02      	cmp	r3, #2
 80182f2:	d9cd      	bls.n	8018290 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80182f4:	2300      	movs	r3, #0
 80182f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80182fa:	e034      	b.n	8018366 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80182fc:	2300      	movs	r3, #0
 80182fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8018302:	e027      	b.n	8018354 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8018304:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8018308:	f107 0314 	add.w	r3, r7, #20
 801830c:	4611      	mov	r1, r2
 801830e:	4618      	mov	r0, r3
 8018310:	f000 fb57 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018314:	4605      	mov	r5, r0
 8018316:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801831a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801831e:	4611      	mov	r1, r2
 8018320:	4618      	mov	r0, r3
 8018322:	f000 fb4e 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018326:	4606      	mov	r6, r0
 8018328:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801832c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018330:	4619      	mov	r1, r3
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f7f5 fea2 	bl	800e07c <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8018338:	4604      	mov	r4, r0
 801833a:	4631      	mov	r1, r6
 801833c:	4628      	mov	r0, r5
 801833e:	f7f8 faa7 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8018342:	eef0 7a40 	vmov.f32	s15, s0
 8018346:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801834a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 801834e:	3301      	adds	r3, #1
 8018350:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8018354:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8018358:	2b02      	cmp	r3, #2
 801835a:	d9d3      	bls.n	8018304 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801835c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018360:	3301      	adds	r3, #1
 8018362:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8018366:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801836a:	2b02      	cmp	r3, #2
 801836c:	d9c6      	bls.n	80182fc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 801836e:	bf00      	nop
 8018370:	bf00      	nop
 8018372:	37b4      	adds	r7, #180	; 0xb4
 8018374:	46bd      	mov	sp, r7
 8018376:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018378 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801837a:	b0bf      	sub	sp, #252	; 0xfc
 801837c:	af00      	add	r7, sp, #0
 801837e:	60f8      	str	r0, [r7, #12]
 8018380:	60b9      	str	r1, [r7, #8]
 8018382:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8018384:	2300      	movs	r3, #0
 8018386:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 801838a:	e02d      	b.n	80183e8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 801838c:	2300      	movs	r3, #0
 801838e:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8018392:	e020      	b.n	80183d6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8018394:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8018398:	f107 0314 	add.w	r3, r7, #20
 801839c:	4611      	mov	r1, r2
 801839e:	4618      	mov	r0, r3
 80183a0:	f7f8 fa67 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80183a4:	4602      	mov	r2, r0
 80183a6:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80183aa:	4619      	mov	r1, r3
 80183ac:	4610      	mov	r0, r2
 80183ae:	f7f8 f934 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 80183b2:	4604      	mov	r4, r0
 80183b4:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 80183b8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80183bc:	4619      	mov	r1, r3
 80183be:	68f8      	ldr	r0, [r7, #12]
 80183c0:	f7f8 f84d 	bl	801045e <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80183c4:	eef0 7a40 	vmov.f32	s15, s0
 80183c8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80183cc:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80183d0:	3301      	adds	r3, #1
 80183d2:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80183d6:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80183da:	2b05      	cmp	r3, #5
 80183dc:	d9da      	bls.n	8018394 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80183de:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80183e2:	3301      	adds	r3, #1
 80183e4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80183e8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80183ec:	2b05      	cmp	r3, #5
 80183ee:	d9cd      	bls.n	801838c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80183f0:	2300      	movs	r3, #0
 80183f2:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 80183f6:	e02d      	b.n	8018454 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 80183f8:	2300      	movs	r3, #0
 80183fa:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80183fe:	e020      	b.n	8018442 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8018400:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8018404:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018408:	4611      	mov	r1, r2
 801840a:	4618      	mov	r0, r3
 801840c:	f000 fad9 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018410:	4602      	mov	r2, r0
 8018412:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018416:	4619      	mov	r1, r3
 8018418:	4610      	mov	r0, r2
 801841a:	f7f8 f8fe 	bl	801061a <_ZNSt5arrayIfLj6EEixEj>
 801841e:	4604      	mov	r4, r0
 8018420:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8018424:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018428:	4619      	mov	r1, r3
 801842a:	68b8      	ldr	r0, [r7, #8]
 801842c:	f000 fa90 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018430:	eef0 7a40 	vmov.f32	s15, s0
 8018434:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018438:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801843c:	3301      	adds	r3, #1
 801843e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8018442:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018446:	2b05      	cmp	r3, #5
 8018448:	d9da      	bls.n	8018400 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801844a:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 801844e:	3301      	adds	r3, #1
 8018450:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8018454:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8018458:	2b02      	cmp	r3, #2
 801845a:	d9cd      	bls.n	80183f8 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801845c:	2300      	movs	r3, #0
 801845e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8018462:	e034      	b.n	80184ce <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018464:	2300      	movs	r3, #0
 8018466:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 801846a:	e027      	b.n	80184bc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801846c:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8018470:	f107 0314 	add.w	r3, r7, #20
 8018474:	4611      	mov	r1, r2
 8018476:	4618      	mov	r0, r3
 8018478:	f7f8 f9fb 	bl	8010872 <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801847c:	4605      	mov	r5, r0
 801847e:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8018482:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018486:	4611      	mov	r1, r2
 8018488:	4618      	mov	r0, r3
 801848a:	f000 fa9a 	bl	80189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801848e:	4606      	mov	r6, r0
 8018490:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8018494:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8018498:	4619      	mov	r1, r3
 801849a:	6878      	ldr	r0, [r7, #4]
 801849c:	f7ff fd42 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80184a0:	4604      	mov	r4, r0
 80184a2:	4631      	mov	r1, r6
 80184a4:	4628      	mov	r0, r5
 80184a6:	f7f8 f9f3 	bl	8010890 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 80184aa:	eef0 7a40 	vmov.f32	s15, s0
 80184ae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80184b2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80184b6:	3301      	adds	r3, #1
 80184b8:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80184bc:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80184c0:	2b02      	cmp	r3, #2
 80184c2:	d9d3      	bls.n	801846c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80184c4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80184c8:	3301      	adds	r3, #1
 80184ca:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80184ce:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80184d2:	2b05      	cmp	r3, #5
 80184d4:	d9c6      	bls.n	8018464 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 80184d6:	bf00      	nop
 80184d8:	bf00      	nop
 80184da:	37fc      	adds	r7, #252	; 0xfc
 80184dc:	46bd      	mov	sp, r7
 80184de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080184e0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80184e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184e2:	b0a3      	sub	sp, #140	; 0x8c
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	60f8      	str	r0, [r7, #12]
 80184e8:	60b9      	str	r1, [r7, #8]
 80184ea:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80184ec:	2300      	movs	r3, #0
 80184ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80184f2:	e02d      	b.n	8018550 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80184f4:	2300      	movs	r3, #0
 80184f6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80184fa:	e020      	b.n	801853e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80184fc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8018500:	f107 0310 	add.w	r3, r7, #16
 8018504:	4611      	mov	r1, r2
 8018506:	4618      	mov	r0, r3
 8018508:	f000 fa79 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801850c:	4602      	mov	r2, r0
 801850e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018512:	4619      	mov	r1, r3
 8018514:	4610      	mov	r0, r2
 8018516:	f7f5 fe51 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 801851a:	4604      	mov	r4, r0
 801851c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8018520:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018524:	4619      	mov	r1, r3
 8018526:	68f8      	ldr	r0, [r7, #12]
 8018528:	f000 fa12 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 801852c:	eef0 7a40 	vmov.f32	s15, s0
 8018530:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8018534:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018538:	3301      	adds	r3, #1
 801853a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 801853e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018542:	2b02      	cmp	r3, #2
 8018544:	d9da      	bls.n	80184fc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8018546:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801854a:	3301      	adds	r3, #1
 801854c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8018550:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018554:	2b05      	cmp	r3, #5
 8018556:	d9cd      	bls.n	80184f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018558:	2300      	movs	r3, #0
 801855a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 801855e:	e02d      	b.n	80185bc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018560:	2300      	movs	r3, #0
 8018562:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8018566:	e020      	b.n	80185aa <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8018568:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801856c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018570:	4611      	mov	r1, r2
 8018572:	4618      	mov	r0, r3
 8018574:	f7f5 ffb4 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8018578:	4602      	mov	r2, r0
 801857a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 801857e:	4619      	mov	r1, r3
 8018580:	4610      	mov	r0, r2
 8018582:	f7f5 fe1b 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8018586:	4604      	mov	r4, r0
 8018588:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801858c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8018590:	4619      	mov	r1, r3
 8018592:	68b8      	ldr	r0, [r7, #8]
 8018594:	f7f5 ffb3 	bl	800e4fe <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8018598:	eef0 7a40 	vmov.f32	s15, s0
 801859c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80185a0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80185a4:	3301      	adds	r3, #1
 80185a6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80185aa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80185ae:	2b02      	cmp	r3, #2
 80185b0:	d9da      	bls.n	8018568 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80185b2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80185b6:	3301      	adds	r3, #1
 80185b8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80185bc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80185c0:	2b02      	cmp	r3, #2
 80185c2:	d9cd      	bls.n	8018560 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80185c4:	2300      	movs	r3, #0
 80185c6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80185ca:	e034      	b.n	8018636 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80185cc:	2300      	movs	r3, #0
 80185ce:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80185d2:	e027      	b.n	8018624 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80185d4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80185d8:	f107 0310 	add.w	r3, r7, #16
 80185dc:	4611      	mov	r1, r2
 80185de:	4618      	mov	r0, r3
 80185e0:	f000 fa0d 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80185e4:	4605      	mov	r5, r0
 80185e6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80185ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80185ee:	4611      	mov	r1, r2
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f5 ff75 	bl	800e4e0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80185f6:	4606      	mov	r6, r0
 80185f8:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80185fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8018600:	4619      	mov	r1, r3
 8018602:	6878      	ldr	r0, [r7, #4]
 8018604:	f7ff fc8e 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8018608:	4604      	mov	r4, r0
 801860a:	4631      	mov	r1, r6
 801860c:	4628      	mov	r0, r5
 801860e:	f7f5 ffbc 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8018612:	eef0 7a40 	vmov.f32	s15, s0
 8018616:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801861a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801861e:	3301      	adds	r3, #1
 8018620:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8018624:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8018628:	2b02      	cmp	r3, #2
 801862a:	d9d3      	bls.n	80185d4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801862c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8018630:	3301      	adds	r3, #1
 8018632:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8018636:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801863a:	2b05      	cmp	r3, #5
 801863c:	d9c6      	bls.n	80185cc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 801863e:	bf00      	nop
 8018640:	bf00      	nop
 8018642:	378c      	adds	r7, #140	; 0x8c
 8018644:	46bd      	mov	sp, r7
 8018646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018648 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801864a:	b09d      	sub	sp, #116	; 0x74
 801864c:	af00      	add	r7, sp, #0
 801864e:	60f8      	str	r0, [r7, #12]
 8018650:	60b9      	str	r1, [r7, #8]
 8018652:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8018654:	2300      	movs	r3, #0
 8018656:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801865a:	e02d      	b.n	80186b8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801865c:	2300      	movs	r3, #0
 801865e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8018662:	e020      	b.n	80186a6 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8018664:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8018668:	f107 0310 	add.w	r3, r7, #16
 801866c:	4611      	mov	r1, r2
 801866e:	4618      	mov	r0, r3
 8018670:	f000 f9c5 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8018674:	4602      	mov	r2, r0
 8018676:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801867a:	4619      	mov	r1, r3
 801867c:	4610      	mov	r0, r2
 801867e:	f7f5 fd9d 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8018682:	4604      	mov	r4, r0
 8018684:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8018688:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801868c:	4619      	mov	r1, r3
 801868e:	68f8      	ldr	r0, [r7, #12]
 8018690:	f000 f95e 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018694:	eef0 7a40 	vmov.f32	s15, s0
 8018698:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801869c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80186a0:	3301      	adds	r3, #1
 80186a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80186a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80186aa:	2b02      	cmp	r3, #2
 80186ac:	d9da      	bls.n	8018664 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80186ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80186b2:	3301      	adds	r3, #1
 80186b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80186b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80186bc:	2b05      	cmp	r3, #5
 80186be:	d9cd      	bls.n	801865c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80186c0:	2300      	movs	r3, #0
 80186c2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80186c6:	e02d      	b.n	8018724 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80186c8:	2300      	movs	r3, #0
 80186ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80186ce:	e020      	b.n	8018712 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80186d0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80186d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80186d8:	4611      	mov	r1, r2
 80186da:	4618      	mov	r0, r3
 80186dc:	f7f5 ff2c 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 80186e0:	4602      	mov	r2, r0
 80186e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80186e6:	4619      	mov	r1, r3
 80186e8:	4610      	mov	r0, r2
 80186ea:	f7f5 fd67 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 80186ee:	4604      	mov	r4, r0
 80186f0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80186f4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80186f8:	4619      	mov	r1, r3
 80186fa:	68b8      	ldr	r0, [r7, #8]
 80186fc:	f7f5 ff2b 	bl	800e556 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8018700:	eef0 7a40 	vmov.f32	s15, s0
 8018704:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018708:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801870c:	3301      	adds	r3, #1
 801870e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8018712:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8018716:	2b02      	cmp	r3, #2
 8018718:	d9da      	bls.n	80186d0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801871a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801871e:	3301      	adds	r3, #1
 8018720:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8018724:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8018728:	2b00      	cmp	r3, #0
 801872a:	d0cd      	beq.n	80186c8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801872c:	2300      	movs	r3, #0
 801872e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8018732:	e034      	b.n	801879e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018734:	2300      	movs	r3, #0
 8018736:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801873a:	e027      	b.n	801878c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801873c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8018740:	f107 0310 	add.w	r3, r7, #16
 8018744:	4611      	mov	r1, r2
 8018746:	4618      	mov	r0, r3
 8018748:	f000 f959 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801874c:	4605      	mov	r5, r0
 801874e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8018752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018756:	4611      	mov	r1, r2
 8018758:	4618      	mov	r0, r3
 801875a:	f7f5 feed 	bl	800e538 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 801875e:	4606      	mov	r6, r0
 8018760:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8018764:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018768:	4619      	mov	r1, r3
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f7f8 f911 	bl	8010992 <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 8018770:	4604      	mov	r4, r0
 8018772:	4631      	mov	r1, r6
 8018774:	4628      	mov	r0, r5
 8018776:	f7f5 ff08 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801877a:	eef0 7a40 	vmov.f32	s15, s0
 801877e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8018782:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018786:	3301      	adds	r3, #1
 8018788:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801878c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018790:	2b00      	cmp	r3, #0
 8018792:	d0d3      	beq.n	801873c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8018794:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018798:	3301      	adds	r3, #1
 801879a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801879e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80187a2:	2b05      	cmp	r3, #5
 80187a4:	d9c6      	bls.n	8018734 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 80187a6:	bf00      	nop
 80187a8:	bf00      	nop
 80187aa:	3774      	adds	r7, #116	; 0x74
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187b0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80187b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187b2:	b0ad      	sub	sp, #180	; 0xb4
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80187bc:	2300      	movs	r3, #0
 80187be:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80187c2:	e02d      	b.n	8018820 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80187c4:	2300      	movs	r3, #0
 80187c6:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80187ca:	e020      	b.n	801880e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80187cc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80187d0:	f107 0314 	add.w	r3, r7, #20
 80187d4:	4611      	mov	r1, r2
 80187d6:	4618      	mov	r0, r3
 80187d8:	f000 f911 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80187dc:	4602      	mov	r2, r0
 80187de:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80187e2:	4619      	mov	r1, r3
 80187e4:	4610      	mov	r0, r2
 80187e6:	f7f5 fce9 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 80187ea:	4604      	mov	r4, r0
 80187ec:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80187f0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80187f4:	4619      	mov	r1, r3
 80187f6:	68f8      	ldr	r0, [r7, #12]
 80187f8:	f000 f8aa 	bl	8018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 80187fc:	eef0 7a40 	vmov.f32	s15, s0
 8018800:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8018804:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018808:	3301      	adds	r3, #1
 801880a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 801880e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018812:	2b02      	cmp	r3, #2
 8018814:	d9da      	bls.n	80187cc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8018816:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801881a:	3301      	adds	r3, #1
 801881c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018820:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018824:	2b05      	cmp	r3, #5
 8018826:	d9cd      	bls.n	80187c4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018828:	2300      	movs	r3, #0
 801882a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801882e:	e02d      	b.n	801888c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018830:	2300      	movs	r3, #0
 8018832:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8018836:	e020      	b.n	801887a <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8018838:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801883c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018840:	4611      	mov	r1, r2
 8018842:	4618      	mov	r0, r3
 8018844:	f000 f8db 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8018848:	4602      	mov	r2, r0
 801884a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801884e:	4619      	mov	r1, r3
 8018850:	4610      	mov	r0, r2
 8018852:	f7f5 fcb3 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8018856:	4604      	mov	r4, r0
 8018858:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801885c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8018860:	4619      	mov	r1, r3
 8018862:	68b8      	ldr	r0, [r7, #8]
 8018864:	f7ff fcb5 	bl	80181d2 <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8018868:	eef0 7a40 	vmov.f32	s15, s0
 801886c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018870:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8018874:	3301      	adds	r3, #1
 8018876:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801887a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801887e:	2b02      	cmp	r3, #2
 8018880:	d9da      	bls.n	8018838 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8018882:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8018886:	3301      	adds	r3, #1
 8018888:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801888c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8018890:	2b05      	cmp	r3, #5
 8018892:	d9cd      	bls.n	8018830 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8018894:	2300      	movs	r3, #0
 8018896:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 801889a:	e034      	b.n	8018906 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801889c:	2300      	movs	r3, #0
 801889e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80188a2:	e027      	b.n	80188f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80188a4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80188a8:	f107 0314 	add.w	r3, r7, #20
 80188ac:	4611      	mov	r1, r2
 80188ae:	4618      	mov	r0, r3
 80188b0:	f000 f8a5 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80188b4:	4605      	mov	r5, r0
 80188b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80188ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80188be:	4611      	mov	r1, r2
 80188c0:	4618      	mov	r0, r3
 80188c2:	f000 f89c 	bl	80189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80188c6:	4606      	mov	r6, r0
 80188c8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80188cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80188d0:	4619      	mov	r1, r3
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f7f5 fa7e 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 80188d8:	4604      	mov	r4, r0
 80188da:	4631      	mov	r1, r6
 80188dc:	4628      	mov	r0, r5
 80188de:	f7f5 fe54 	bl	800e58a <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80188e2:	eef0 7a40 	vmov.f32	s15, s0
 80188e6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80188ea:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80188ee:	3301      	adds	r3, #1
 80188f0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80188f4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80188f8:	2b05      	cmp	r3, #5
 80188fa:	d9d3      	bls.n	80188a4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80188fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018900:	3301      	adds	r3, #1
 8018902:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8018906:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801890a:	2b05      	cmp	r3, #5
 801890c:	d9c6      	bls.n	801889c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 801890e:	bf00      	nop
 8018910:	bf00      	nop
 8018912:	37b4      	adds	r7, #180	; 0xb4
 8018914:	46bd      	mov	sp, r7
 8018916:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018918 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8018918:	b580      	push	{r7, lr}
 801891a:	b084      	sub	sp, #16
 801891c:	af00      	add	r7, sp, #0
 801891e:	60f8      	str	r0, [r7, #12]
 8018920:	60b9      	str	r1, [r7, #8]
 8018922:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8018926:	e007      	b.n	8018938 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8018928:	1d3b      	adds	r3, r7, #4
 801892a:	68f9      	ldr	r1, [r7, #12]
 801892c:	4618      	mov	r0, r3
 801892e:	f7ff facd 	bl	8017ecc <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	3304      	adds	r3, #4
 8018936:	60fb      	str	r3, [r7, #12]
 8018938:	68fa      	ldr	r2, [r7, #12]
 801893a:	68bb      	ldr	r3, [r7, #8]
 801893c:	429a      	cmp	r2, r3
 801893e:	d1f3      	bne.n	8018928 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	ee07 3a90 	vmov	s15, r3
    }
 8018946:	eeb0 0a67 	vmov.f32	s0, s15
 801894a:	3710      	adds	r7, #16
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
 8018958:	460b      	mov	r3, r1
 801895a:	807b      	strh	r3, [r7, #2]
 801895c:	4613      	mov	r3, r2
 801895e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8018960:	887a      	ldrh	r2, [r7, #2]
 8018962:	4613      	mov	r3, r2
 8018964:	005b      	lsls	r3, r3, #1
 8018966:	441a      	add	r2, r3
 8018968:	883b      	ldrh	r3, [r7, #0]
 801896a:	4413      	add	r3, r2
 801896c:	60fb      	str	r3, [r7, #12]
	return _values[index];
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	68f9      	ldr	r1, [r7, #12]
 8018972:	4618      	mov	r0, r3
 8018974:	f000 f834 	bl	80189e0 <_ZNKSt5arrayIfLj18EEixEj>
 8018978:	4603      	mov	r3, r0
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	ee07 3a90 	vmov	s15, r3
}
 8018980:	eeb0 0a67 	vmov.f32	s0, s15
 8018984:	3710      	adds	r7, #16
 8018986:	46bd      	mov	sp, r7
 8018988:	bd80      	pop	{r7, pc}

0801898a <_ZNSt5arrayIfLj18EE4dataEv>:
      data() noexcept
 801898a:	b580      	push	{r7, lr}
 801898c:	b082      	sub	sp, #8
 801898e:	af00      	add	r7, sp, #0
 8018990:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	4618      	mov	r0, r3
 8018996:	f000 f841 	bl	8018a1c <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>
 801899a:	4603      	mov	r3, r0
 801899c:	4618      	mov	r0, r3
 801899e:	3708      	adds	r7, #8
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80189a4:	b480      	push	{r7}
 80189a6:	b083      	sub	sp, #12
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80189ae:	683b      	ldr	r3, [r7, #0]
 80189b0:	009b      	lsls	r3, r3, #2
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	4413      	add	r3, r2
 80189b6:	4618      	mov	r0, r3
 80189b8:	370c      	adds	r7, #12
 80189ba:	46bd      	mov	sp, r7
 80189bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c0:	4770      	bx	lr

080189c2 <_ZNSt5arrayIS_IfLj6EELj3EEixEj>:
      operator[](size_type __n) noexcept
 80189c2:	b580      	push	{r7, lr}
 80189c4:	b082      	sub	sp, #8
 80189c6:	af00      	add	r7, sp, #0
 80189c8:	6078      	str	r0, [r7, #4]
 80189ca:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6839      	ldr	r1, [r7, #0]
 80189d0:	4618      	mov	r0, r3
 80189d2:	f000 f82e 	bl	8018a32 <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>
 80189d6:	4603      	mov	r3, r0
      }
 80189d8:	4618      	mov	r0, r3
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}

080189e0 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
 80189e8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6839      	ldr	r1, [r7, #0]
 80189ee:	4618      	mov	r0, r3
 80189f0:	f7ff ffd8 	bl	80189a4 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 80189f4:	4603      	mov	r3, r0
      }
 80189f6:	4618      	mov	r0, r3
 80189f8:	3708      	adds	r7, #8
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}

080189fe <_ZNSt5arrayIS_IfLj3EELj6EEixEj>:
      operator[](size_type __n) noexcept
 80189fe:	b580      	push	{r7, lr}
 8018a00:	b082      	sub	sp, #8
 8018a02:	af00      	add	r7, sp, #0
 8018a04:	6078      	str	r0, [r7, #4]
 8018a06:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6839      	ldr	r1, [r7, #0]
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f000 f822 	bl	8018a56 <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>
 8018a12:	4603      	mov	r3, r0
      }
 8018a14:	4618      	mov	r0, r3
 8018a16:	3708      	adds	r7, #8
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	bd80      	pop	{r7, pc}

08018a1c <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8018a1c:	b480      	push	{r7}
 8018a1e:	b083      	sub	sp, #12
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	4618      	mov	r0, r3
 8018a28:	370c      	adds	r7, #12
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a30:	4770      	bx	lr

08018a32 <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8018a32:	b480      	push	{r7}
 8018a34:	b083      	sub	sp, #12
 8018a36:	af00      	add	r7, sp, #0
 8018a38:	6078      	str	r0, [r7, #4]
 8018a3a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8018a3c:	683a      	ldr	r2, [r7, #0]
 8018a3e:	4613      	mov	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4413      	add	r3, r2
 8018a44:	00db      	lsls	r3, r3, #3
 8018a46:	687a      	ldr	r2, [r7, #4]
 8018a48:	4413      	add	r3, r2
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	370c      	adds	r7, #12
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a54:	4770      	bx	lr

08018a56 <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8018a56:	b480      	push	{r7}
 8018a58:	b083      	sub	sp, #12
 8018a5a:	af00      	add	r7, sp, #0
 8018a5c:	6078      	str	r0, [r7, #4]
 8018a5e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8018a60:	683a      	ldr	r2, [r7, #0]
 8018a62:	4613      	mov	r3, r2
 8018a64:	005b      	lsls	r3, r3, #1
 8018a66:	4413      	add	r3, r2
 8018a68:	009b      	lsls	r3, r3, #2
 8018a6a:	687a      	ldr	r2, [r7, #4]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	4618      	mov	r0, r3
 8018a70:	370c      	adds	r7, #12
 8018a72:	46bd      	mov	sp, r7
 8018a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a78:	4770      	bx	lr
	...

08018a7c <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>:
//		const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//		const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//		float time) : _orientationEKF{oriState, oriCov, time}, _velocityEKF{velState, velCov, time}{}

void FusionAlgorithm::InitState(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	ed2d 8b06 	vpush	{d8-d10}
 8018a82:	b08c      	sub	sp, #48	; 0x30
 8018a84:	af06      	add	r7, sp, #24
 8018a86:	60f8      	str	r0, [r7, #12]
 8018a88:	60b9      	str	r1, [r7, #8]
 8018a8a:	607a      	str	r2, [r7, #4]
 8018a8c:	ed87 0a00 	vstr	s0, [r7]
	LOG("INIT");
 8018a90:	f7e9 fbea 	bl	8002268 <HAL_GetTick>
 8018a94:	4601      	mov	r1, r0
 8018a96:	2317      	movs	r3, #23
 8018a98:	4a29      	ldr	r2, [pc, #164]	; (8018b40 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc4>)
 8018a9a:	482a      	ldr	r0, [pc, #168]	; (8018b44 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc8>)
 8018a9c:	f005 fff4 	bl	801ea88 <iprintf>
 8018aa0:	4829      	ldr	r0, [pc, #164]	; (8018b48 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xcc>)
 8018aa2:	f005 fff1 	bl	801ea88 <iprintf>
 8018aa6:	4829      	ldr	r0, [pc, #164]	; (8018b4c <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd0>)
 8018aa8:	f005 ffee 	bl	801ea88 <iprintf>
	_orientationEKF.Initialise(acc, mag, time);
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	ed97 0a00 	vldr	s0, [r7]
 8018ab2:	687a      	ldr	r2, [r7, #4]
 8018ab4:	68b9      	ldr	r1, [r7, #8]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7fb fca9 	bl	801440e <_ZN10Algorithms14OrientationEKF10InitialiseERKN3Mat6MatrixILt3ELt1EEES5_f>
	const auto& _state = _orientationEKF.GetState();
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f000 fe20 	bl	8019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 8018ac4:	6178      	str	r0, [r7, #20]
	LOG("State: %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3));
 8018ac6:	f7e9 fbcf 	bl	8002268 <HAL_GetTick>
 8018aca:	4601      	mov	r1, r0
 8018acc:	231a      	movs	r3, #26
 8018ace:	4a1c      	ldr	r2, [pc, #112]	; (8018b40 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc4>)
 8018ad0:	481c      	ldr	r0, [pc, #112]	; (8018b44 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc8>)
 8018ad2:	f005 ffd9 	bl	801ea88 <iprintf>
 8018ad6:	2100      	movs	r1, #0
 8018ad8:	6978      	ldr	r0, [r7, #20]
 8018ada:	f7fd fe07 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8018ade:	eef0 7a40 	vmov.f32	s15, s0
 8018ae2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8018ae6:	2101      	movs	r1, #1
 8018ae8:	6978      	ldr	r0, [r7, #20]
 8018aea:	f7fd fdff 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8018aee:	eef0 7a40 	vmov.f32	s15, s0
 8018af2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8018af6:	2102      	movs	r1, #2
 8018af8:	6978      	ldr	r0, [r7, #20]
 8018afa:	f7fd fdf7 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8018afe:	eef0 7a40 	vmov.f32	s15, s0
 8018b02:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8018b06:	2103      	movs	r1, #3
 8018b08:	6978      	ldr	r0, [r7, #20]
 8018b0a:	f7fd fdef 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8018b0e:	eef0 7a40 	vmov.f32	s15, s0
 8018b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018b16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018b1a:	ed8d 9b02 	vstr	d9, [sp, #8]
 8018b1e:	ed8d 8b00 	vstr	d8, [sp]
 8018b22:	ec53 2b1a 	vmov	r2, r3, d10
 8018b26:	480a      	ldr	r0, [pc, #40]	; (8018b50 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd4>)
 8018b28:	f005 ffae 	bl	801ea88 <iprintf>
 8018b2c:	4807      	ldr	r0, [pc, #28]	; (8018b4c <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd0>)
 8018b2e:	f005 ffab 	bl	801ea88 <iprintf>
}
 8018b32:	bf00      	nop
 8018b34:	3718      	adds	r7, #24
 8018b36:	46bd      	mov	sp, r7
 8018b38:	ecbd 8b06 	vpop	{d8-d10}
 8018b3c:	bd80      	pop	{r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	08020cd8 	.word	0x08020cd8
 8018b44:	08020ce4 	.word	0x08020ce4
 8018b48:	08020cf4 	.word	0x08020cf4
 8018b4c:	08020cfc 	.word	0x08020cfc
 8018b50:	08020d00 	.word	0x08020d00

08018b54 <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERK15AGMSensorData_t>:

void FusionAlgorithm::OnIMUData(const AGMSensorData& imuData)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	ed2d 8b02 	vpush	{d8}
 8018b5a:	b08e      	sub	sp, #56	; 0x38
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	6039      	str	r1, [r7, #0]
	float dt = imuData.SensorTime - _orientationEKF.GetTime();
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f000 fdd6 	bl	801971c <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7GetTimeEv>
 8018b70:	eef0 7a40 	vmov.f32	s15, s0
 8018b74:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018b78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	_orientationControlVec(0) = imuData.Gyro.x; _orientationControlVec(1) = imuData.Gyro.y; _orientationControlVec(2) = imuData.Gyro.z;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018b82:	2100      	movs	r1, #0
 8018b84:	4618      	mov	r0, r3
 8018b86:	f000 fdd8 	bl	801973a <_ZN3Mat8V_VectorILt3EEclEt>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	699b      	ldr	r3, [r3, #24]
 8018b90:	6013      	str	r3, [r2, #0]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018b98:	2101      	movs	r1, #1
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f000 fdcd 	bl	801973a <_ZN3Mat8V_VectorILt3EEclEt>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	69db      	ldr	r3, [r3, #28]
 8018ba6:	6013      	str	r3, [r2, #0]
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018bae:	2102      	movs	r1, #2
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f000 fdc2 	bl	801973a <_ZN3Mat8V_VectorILt3EEclEt>
 8018bb6:	4602      	mov	r2, r0
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	6a1b      	ldr	r3, [r3, #32]
 8018bbc:	6013      	str	r3, [r2, #0]
	_orientationEKF.Predict(_orientationControlVec, _orientationControlCov, imuData.SensorTime);
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f503 7184 	add.w	r1, r3, #264	; 0x108
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8018bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8018bd6:	f7f5 fea3 	bl	800e920 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>
	float a_factor = 1.0f / (sqrt(imuData.Acc.x*imuData.Acc.x + imuData.Acc.y*imuData.Acc.y + imuData.Acc.z*imuData.Acc.z));
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	ed93 7a03 	vldr	s14, [r3, #12]
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8018be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	edd3 6a04 	vldr	s13, [r3, #16]
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	edd3 7a04 	vldr	s15, [r3, #16]
 8018bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	edd3 6a05 	vldr	s13, [r3, #20]
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8018c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c12:	eeb0 0a67 	vmov.f32	s0, s15
 8018c16:	f7f8 f93b 	bl	8010e90 <_ZSt4sqrtf>
 8018c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8018c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float m_factor = 1.0f / (sqrt(imuData.Mag.x*imuData.Mag.x + imuData.Mag.y*imuData.Mag.y + imuData.Mag.z*imuData.Mag.z));
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	ed93 7a00 	vldr	s14, [r3]
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	edd3 7a00 	vldr	s15, [r3]
 8018c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8018c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	edd3 6a02 	vldr	s13, [r3, #8]
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	edd3 7a02 	vldr	s15, [r3, #8]
 8018c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c62:	eeb0 0a67 	vmov.f32	s0, s15
 8018c66:	f7f8 f913 	bl	8010e90 <_ZSt4sqrtf>
 8018c6a:	eeb0 7a40 	vmov.f32	s14, s0
 8018c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018c76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_orientationMeassurementVec(0) = imuData.Acc.x * a_factor;
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	ed93 8a03 	vldr	s16, [r3, #12]
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018c86:	2100      	movs	r1, #0
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7ff f825 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018c94:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018c98:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(1) = imuData.Acc.y * a_factor;
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	ed93 8a04 	vldr	s16, [r3, #16]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018ca8:	2101      	movs	r1, #1
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7ff f814 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018cb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018cba:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(2) = imuData.Acc.z * a_factor;
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	ed93 8a05 	vldr	s16, [r3, #20]
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018cca:	2102      	movs	r1, #2
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7ff f803 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018cd8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018cdc:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(3) = imuData.Mag.x * m_factor;
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	ed93 8a00 	vldr	s16, [r3]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018cec:	2103      	movs	r1, #3
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fe fff2 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018cfa:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018cfe:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(4) = imuData.Mag.y * m_factor;
 8018d02:	683b      	ldr	r3, [r7, #0]
 8018d04:	ed93 8a01 	vldr	s16, [r3, #4]
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018d0e:	2104      	movs	r1, #4
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7fe ffe1 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018d16:	4603      	mov	r3, r0
 8018d18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018d1c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018d20:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(5) = imuData.Mag.z * m_factor;
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	ed93 8a02 	vldr	s16, [r3, #8]
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018d30:	2105      	movs	r1, #5
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7fe ffd0 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018d3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018d42:	edc3 7a00 	vstr	s15, [r3]
	_orientationEKF.Update(_orientationMeassurementVec, _orientationMeassurementCov, imuData.SensorTime);
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8018d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8018d5e:	f7fb fb29 	bl	80143b4 <_ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>
	return;
	V_Vector<3> accL{{imuData.Acc.x, imuData.Acc.y, imuData.Acc.z}};
	auto accENU = GetRotationMatrix()*accL;
	accENU(2,0) -= Gravity;
	_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(accL(0), accL(1), accL(2)), imuData.SensorTime);
}
 8018d62:	3738      	adds	r7, #56	; 0x38
 8018d64:	46bd      	mov	sp, r7
 8018d66:	ecbd 8b02 	vpop	{d8}
 8018d6a:	bd80      	pop	{r7, pc}

08018d6c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>:

void FusionAlgorithm::OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	ed2d 8b0a 	vpush	{d8-d12}
 8018d72:	b08d      	sub	sp, #52	; 0x34
 8018d74:	af0a      	add	r7, sp, #40	; 0x28
 8018d76:	6078      	str	r0, [r7, #4]
 8018d78:	6039      	str	r1, [r7, #0]
	static VelocityEKF::MeassurementVec measurementVec;
 8018d7a:	4bc7      	ldr	r3, [pc, #796]	; (8019098 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	f3bf 8f5b 	dmb	ish
 8018d82:	f003 0301 	and.w	r3, r3, #1
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	bf0c      	ite	eq
 8018d8a:	2301      	moveq	r3, #1
 8018d8c:	2300      	movne	r3, #0
 8018d8e:	b2db      	uxtb	r3, r3
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d010      	beq.n	8018db6 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 8018d94:	48c0      	ldr	r0, [pc, #768]	; (8019098 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018d96:	f004 fd07 	bl	801d7a8 <__cxa_guard_acquire>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	bf14      	ite	ne
 8018da0:	2301      	movne	r3, #1
 8018da2:	2300      	moveq	r3, #0
 8018da4:	b2db      	uxtb	r3, r3
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d005      	beq.n	8018db6 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 8018daa:	48bc      	ldr	r0, [pc, #752]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018dac:	f7f4 ff96 	bl	800dcdc <_ZN3Mat8V_VectorILt6EEC1Ev>
 8018db0:	48b9      	ldr	r0, [pc, #740]	; (8019098 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018db2:	f004 fd05 	bl	801d7c0 <__cxa_guard_release>
	static VelocityEKF::MeasurementCovarianceMatrix measurementCov = Eye<6>(1.0f);
 8018db6:	4bba      	ldr	r3, [pc, #744]	; (80190a0 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f3bf 8f5b 	dmb	ish
 8018dbe:	f003 0301 	and.w	r3, r3, #1
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	bf0c      	ite	eq
 8018dc6:	2301      	moveq	r3, #1
 8018dc8:	2300      	movne	r3, #0
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d013      	beq.n	8018df8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 8018dd0:	48b3      	ldr	r0, [pc, #716]	; (80190a0 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018dd2:	f004 fce9 	bl	801d7a8 <__cxa_guard_acquire>
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	bf14      	ite	ne
 8018ddc:	2301      	movne	r3, #1
 8018dde:	2300      	moveq	r3, #0
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d008      	beq.n	8018df8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 8018de6:	4baf      	ldr	r3, [pc, #700]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018de8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7f6 fbcb 	bl	800f588 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8018df2:	48ab      	ldr	r0, [pc, #684]	; (80190a0 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018df4:	f004 fce4 	bl	801d7c0 <__cxa_guard_release>
	measurementVec(0) = ((float)GNSSData->velE) * mm2m;
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8018dfe:	ee07 3a90 	vmov	s15, r3
 8018e02:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018e06:	2100      	movs	r1, #0
 8018e08:	48a4      	ldr	r0, [pc, #656]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018e0a:	f7fe ff65 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	eddf 7aa5 	vldr	s15, [pc, #660]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018e14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018e18:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(1) = ((float)GNSSData->velN) * mm2m;
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8018e22:	ee07 3a90 	vmov	s15, r3
 8018e26:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018e2a:	2101      	movs	r1, #1
 8018e2c:	489b      	ldr	r0, [pc, #620]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018e2e:	f7fe ff53 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018e32:	4603      	mov	r3, r0
 8018e34:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018e38:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018e3c:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(2) = -((float)GNSSData->velD) * mm2m;
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8018e46:	ee07 3a90 	vmov	s15, r3
 8018e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e4e:	eeb1 8a67 	vneg.f32	s16, s15
 8018e52:	2102      	movs	r1, #2
 8018e54:	4891      	ldr	r0, [pc, #580]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018e56:	f7fe ff3f 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	eddf 7a92 	vldr	s15, [pc, #584]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018e60:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018e64:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(3) = GNSSData->fLat;
 8018e68:	2103      	movs	r1, #3
 8018e6a:	488c      	ldr	r0, [pc, #560]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018e6c:	f7fe ff34 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018e70:	4602      	mov	r2, r0
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	6013      	str	r3, [r2, #0]
	measurementVec(4) = GNSSData->fLon;
 8018e7c:	2104      	movs	r1, #4
 8018e7e:	4887      	ldr	r0, [pc, #540]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018e80:	f7fe ff2a 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018e84:	4602      	mov	r2, r0
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	6013      	str	r3, [r2, #0]
	measurementVec(5) = ((float)GNSSData->hMSL) * mm2m;
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8018e96:	ee07 3a90 	vmov	s15, r3
 8018e9a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018e9e:	2105      	movs	r1, #5
 8018ea0:	487e      	ldr	r0, [pc, #504]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018ea2:	f7fe ff19 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018eac:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018eb0:	edc3 7a00 	vstr	s15, [r3]
	LOG("measurementVec: \t%f, \t%f, \t%f, \t%f, \t%f, \t%f", measurementVec(0), measurementVec(1), measurementVec(2), measurementVec(3), measurementVec(4), measurementVec(5));
 8018eb4:	f7e9 f9d8 	bl	8002268 <HAL_GetTick>
 8018eb8:	4601      	mov	r1, r0
 8018eba:	233f      	movs	r3, #63	; 0x3f
 8018ebc:	4a7b      	ldr	r2, [pc, #492]	; (80190ac <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x340>)
 8018ebe:	487c      	ldr	r0, [pc, #496]	; (80190b0 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x344>)
 8018ec0:	f005 fde2 	bl	801ea88 <iprintf>
 8018ec4:	2100      	movs	r1, #0
 8018ec6:	4875      	ldr	r0, [pc, #468]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018ec8:	f7fe ff06 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	edd3 7a00 	vldr	s15, [r3]
 8018ed2:	eeb7 cae7 	vcvt.f64.f32	d12, s15
 8018ed6:	2101      	movs	r1, #1
 8018ed8:	4870      	ldr	r0, [pc, #448]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018eda:	f7fe fefd 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	edd3 7a00 	vldr	s15, [r3]
 8018ee4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8018ee8:	2102      	movs	r1, #2
 8018eea:	486c      	ldr	r0, [pc, #432]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018eec:	f7fe fef4 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	edd3 7a00 	vldr	s15, [r3]
 8018ef6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8018efa:	2103      	movs	r1, #3
 8018efc:	4867      	ldr	r0, [pc, #412]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018efe:	f7fe feeb 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018f02:	4603      	mov	r3, r0
 8018f04:	edd3 7a00 	vldr	s15, [r3]
 8018f08:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8018f0c:	2104      	movs	r1, #4
 8018f0e:	4863      	ldr	r0, [pc, #396]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018f10:	f7fe fee2 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018f14:	4603      	mov	r3, r0
 8018f16:	edd3 7a00 	vldr	s15, [r3]
 8018f1a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8018f1e:	2105      	movs	r1, #5
 8018f20:	485e      	ldr	r0, [pc, #376]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018f22:	f7fe fed9 	bl	8017cd8 <_ZN3Mat8V_VectorILt6EEclEt>
 8018f26:	4603      	mov	r3, r0
 8018f28:	edd3 7a00 	vldr	s15, [r3]
 8018f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018f30:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018f34:	ed8d bb06 	vstr	d11, [sp, #24]
 8018f38:	ed8d ab04 	vstr	d10, [sp, #16]
 8018f3c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8018f40:	ed8d 8b00 	vstr	d8, [sp]
 8018f44:	ec53 2b1c 	vmov	r2, r3, d12
 8018f48:	485a      	ldr	r0, [pc, #360]	; (80190b4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x348>)
 8018f4a:	f005 fd9d 	bl	801ea88 <iprintf>
 8018f4e:	485a      	ldr	r0, [pc, #360]	; (80190b8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x34c>)
 8018f50:	f005 fd9a 	bl	801ea88 <iprintf>

	measurementCov(0,0) = ((float)GNSSData->sAcc) * mm2m;
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018f5a:	ee07 3a90 	vmov	s15, r3
 8018f5e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018f62:	2200      	movs	r2, #0
 8018f64:	2100      	movs	r1, #0
 8018f66:	484f      	ldr	r0, [pc, #316]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018f68:	f7f4 ff34 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018f72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018f76:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(1,1) = ((float)GNSSData->sAcc) * mm2m;
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018f80:	ee07 3a90 	vmov	s15, r3
 8018f84:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018f88:	2201      	movs	r2, #1
 8018f8a:	2101      	movs	r1, #1
 8018f8c:	4845      	ldr	r0, [pc, #276]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018f8e:	f7f4 ff21 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018f92:	4603      	mov	r3, r0
 8018f94:	eddf 7a44 	vldr	s15, [pc, #272]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018f98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018f9c:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(2,2) = ((float)GNSSData->sAcc) * mm2m;
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018fa6:	ee07 3a90 	vmov	s15, r3
 8018faa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018fae:	2202      	movs	r2, #2
 8018fb0:	2102      	movs	r1, #2
 8018fb2:	483c      	ldr	r0, [pc, #240]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018fb4:	f7f4 ff0e 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018fbe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018fc2:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(3,3) = ((float)GNSSData->hAcc) * mm2m * _ER;
 8018fc6:	683b      	ldr	r3, [r7, #0]
 8018fc8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8018fcc:	ee07 3a90 	vmov	s15, r3
 8018fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018fd4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018fd8:	ee27 8a87 	vmul.f32	s16, s15, s14
 8018fdc:	2203      	movs	r2, #3
 8018fde:	2103      	movs	r1, #3
 8018fe0:	4830      	ldr	r0, [pc, #192]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018fe2:	f7f4 fef7 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	eddf 7a34 	vldr	s15, [pc, #208]	; 80190bc <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x350>
 8018fec:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018ff0:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(4,4) = ((float)GNSSData->hAcc) * mm2m * _ER / cos(GNSSData->fLat * DEG_2_RAD);
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8018ffa:	ee07 3a90 	vmov	s15, r3
 8018ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019002:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8019006:	ee67 7a87 	vmul.f32	s15, s15, s14
 801900a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80190bc <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x350>
 801900e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8019018:	edd3 7a00 	vldr	s15, [r3]
 801901c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80190c0 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x354>
 8019020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019024:	eeb0 0a67 	vmov.f32	s0, s15
 8019028:	f7f7 ff12 	bl	8010e50 <_ZSt3cosf>
 801902c:	eef0 8a40 	vmov.f32	s17, s0
 8019030:	2204      	movs	r2, #4
 8019032:	2104      	movs	r1, #4
 8019034:	481b      	ldr	r0, [pc, #108]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8019036:	f7f4 fecd 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801903a:	4603      	mov	r3, r0
 801903c:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8019040:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(5,5) = ((float)GNSSData->vAcc) * mm2m;
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 801904a:	ee07 3a90 	vmov	s15, r3
 801904e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8019052:	2205      	movs	r2, #5
 8019054:	2105      	movs	r1, #5
 8019056:	4813      	ldr	r0, [pc, #76]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8019058:	f7f4 febc 	bl	800ddd4 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 801905c:	4603      	mov	r3, r0
 801905e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80190a8 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8019062:	ee68 7a27 	vmul.f32	s15, s16, s15
 8019066:	edc3 7a00 	vstr	s15, [r3]
	_velocityEKF.Update(measurementVec, measurementCov, _velocityEKF.GetTime());
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	3358      	adds	r3, #88	; 0x58
 8019074:	4618      	mov	r0, r3
 8019076:	f000 fb71 	bl	801975c <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>
 801907a:	eef0 7a40 	vmov.f32	s15, s0
 801907e:	eeb0 0a67 	vmov.f32	s0, s15
 8019082:	4a08      	ldr	r2, [pc, #32]	; (80190a4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8019084:	4905      	ldr	r1, [pc, #20]	; (801909c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8019086:	4620      	mov	r0, r4
 8019088:	f7fd fd70 	bl	8016b6c <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>
}
 801908c:	bf00      	nop
 801908e:	370c      	adds	r7, #12
 8019090:	46bd      	mov	sp, r7
 8019092:	ecbd 8b0a 	vpop	{d8-d12}
 8019096:	bd90      	pop	{r4, r7, pc}
 8019098:	240056fc 	.word	0x240056fc
 801909c:	240056e4 	.word	0x240056e4
 80190a0:	24005790 	.word	0x24005790
 80190a4:	24005700 	.word	0x24005700
 80190a8:	3a83126f 	.word	0x3a83126f
 80190ac:	08020d18 	.word	0x08020d18
 80190b0:	08020ce4 	.word	0x08020ce4
 80190b4:	08020d24 	.word	0x08020d24
 80190b8:	08020cfc 	.word	0x08020cfc
 80190bc:	3428892d 	.word	0x3428892d
 80190c0:	3c8ee7a4 	.word	0x3c8ee7a4

080190c4 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv>:


float FusionAlgorithm::GetRoll() const
{
 80190c4:	b580      	push	{r7, lr}
 80190c6:	ed2d 8b04 	vpush	{d8-d9}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
	const OrientationEKF::StateVec& q = _orientationEKF.GetState();
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	4618      	mov	r0, r3
 80190d4:	f000 fb16 	bl	8019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 80190d8:	60f8      	str	r0, [r7, #12]
	float roll = atan2(2.0f * (q(0) * q(1) + q(2) * q(3)), q(0) * q(0) - q(1) * q(1) - q(2) * q(2) + q(3) * q(3));
 80190da:	2100      	movs	r1, #0
 80190dc:	68f8      	ldr	r0, [r7, #12]
 80190de:	f7fd fb05 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80190e2:	eeb0 8a40 	vmov.f32	s16, s0
 80190e6:	2101      	movs	r1, #1
 80190e8:	68f8      	ldr	r0, [r7, #12]
 80190ea:	f7fd faff 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80190ee:	eef0 7a40 	vmov.f32	s15, s0
 80190f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80190f6:	2102      	movs	r1, #2
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f7fd faf7 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80190fe:	eef0 8a40 	vmov.f32	s17, s0
 8019102:	2103      	movs	r1, #3
 8019104:	68f8      	ldr	r0, [r7, #12]
 8019106:	f7fd faf1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801910a:	eef0 7a40 	vmov.f32	s15, s0
 801910e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019112:	ee78 7a27 	vadd.f32	s15, s16, s15
 8019116:	ee77 8aa7 	vadd.f32	s17, s15, s15
 801911a:	2100      	movs	r1, #0
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7fd fae5 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019122:	eeb0 8a40 	vmov.f32	s16, s0
 8019126:	2100      	movs	r1, #0
 8019128:	68f8      	ldr	r0, [r7, #12]
 801912a:	f7fd fadf 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801912e:	eef0 7a40 	vmov.f32	s15, s0
 8019132:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019136:	2101      	movs	r1, #1
 8019138:	68f8      	ldr	r0, [r7, #12]
 801913a:	f7fd fad7 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801913e:	eeb0 9a40 	vmov.f32	s18, s0
 8019142:	2101      	movs	r1, #1
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7fd fad1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801914a:	eef0 7a40 	vmov.f32	s15, s0
 801914e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019152:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019156:	2102      	movs	r1, #2
 8019158:	68f8      	ldr	r0, [r7, #12]
 801915a:	f7fd fac7 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801915e:	eeb0 9a40 	vmov.f32	s18, s0
 8019162:	2102      	movs	r1, #2
 8019164:	68f8      	ldr	r0, [r7, #12]
 8019166:	f7fd fac1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801916a:	eef0 7a40 	vmov.f32	s15, s0
 801916e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019172:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019176:	2103      	movs	r1, #3
 8019178:	68f8      	ldr	r0, [r7, #12]
 801917a:	f7fd fab7 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801917e:	eeb0 9a40 	vmov.f32	s18, s0
 8019182:	2103      	movs	r1, #3
 8019184:	68f8      	ldr	r0, [r7, #12]
 8019186:	f7fd fab1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801918a:	eef0 7a40 	vmov.f32	s15, s0
 801918e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019192:	ee78 7a27 	vadd.f32	s15, s16, s15
 8019196:	eef0 0a67 	vmov.f32	s1, s15
 801919a:	eeb0 0a68 	vmov.f32	s0, s17
 801919e:	f7f7 fe43 	bl	8010e28 <_ZSt5atan2ff>
 80191a2:	ed87 0a02 	vstr	s0, [r7, #8]
	return roll * 57.29578f;
 80191a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80191aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80191c0 <_ZNK10Algorithms15FusionAlgorithm7GetRollEv+0xfc>
 80191ae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80191b2:	eeb0 0a67 	vmov.f32	s0, s15
 80191b6:	3710      	adds	r7, #16
 80191b8:	46bd      	mov	sp, r7
 80191ba:	ecbd 8b04 	vpop	{d8-d9}
 80191be:	bd80      	pop	{r7, pc}
 80191c0:	42652ee1 	.word	0x42652ee1

080191c4 <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv>:

float FusionAlgorithm::GetPitch() const
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	ed2d 8b02 	vpush	{d8}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
	const OrientationEKF::StateVec& q = _orientationEKF.GetState();
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	4618      	mov	r0, r3
 80191d4:	f000 fa96 	bl	8019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 80191d8:	60f8      	str	r0, [r7, #12]
	float pitch = -asin(2.0f * (q(1) * q(3) - q(0) * q(2)));
 80191da:	2101      	movs	r1, #1
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f7fd fa85 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80191e2:	eeb0 8a40 	vmov.f32	s16, s0
 80191e6:	2103      	movs	r1, #3
 80191e8:	68f8      	ldr	r0, [r7, #12]
 80191ea:	f7fd fa7f 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80191ee:	eef0 7a40 	vmov.f32	s15, s0
 80191f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80191f6:	2100      	movs	r1, #0
 80191f8:	68f8      	ldr	r0, [r7, #12]
 80191fa:	f7fd fa77 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80191fe:	eef0 8a40 	vmov.f32	s17, s0
 8019202:	2102      	movs	r1, #2
 8019204:	68f8      	ldr	r0, [r7, #12]
 8019206:	f7fd fa71 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801920a:	eef0 7a40 	vmov.f32	s15, s0
 801920e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019212:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019216:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801921a:	eeb0 0a67 	vmov.f32	s0, s15
 801921e:	f7f7 fdf3 	bl	8010e08 <_ZSt4asinf>
 8019222:	eef0 7a40 	vmov.f32	s15, s0
 8019226:	eef1 7a67 	vneg.f32	s15, s15
 801922a:	edc7 7a02 	vstr	s15, [r7, #8]
	return pitch * 57.29578f;
 801922e:	edd7 7a02 	vldr	s15, [r7, #8]
 8019232:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8019248 <_ZNK10Algorithms15FusionAlgorithm8GetPitchEv+0x84>
 8019236:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 801923a:	eeb0 0a67 	vmov.f32	s0, s15
 801923e:	3710      	adds	r7, #16
 8019240:	46bd      	mov	sp, r7
 8019242:	ecbd 8b02 	vpop	{d8}
 8019246:	bd80      	pop	{r7, pc}
 8019248:	42652ee1 	.word	0x42652ee1

0801924c <_ZNK10Algorithms15FusionAlgorithm6GetYawEv>:

float FusionAlgorithm::GetYaw() const
{
 801924c:	b580      	push	{r7, lr}
 801924e:	ed2d 8b04 	vpush	{d8-d9}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
	const OrientationEKF::StateVec& q = _orientationEKF.GetState();
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	4618      	mov	r0, r3
 801925c:	f000 fa52 	bl	8019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 8019260:	60f8      	str	r0, [r7, #12]
	float yaw = atan2(2.0f * (q(1) * q(2) + q(0) * q(3)), q(0) * q(0) + q(1) * q(1) - q(2) * q(2) - q(3) * q(3));
 8019262:	2101      	movs	r1, #1
 8019264:	68f8      	ldr	r0, [r7, #12]
 8019266:	f7fd fa41 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801926a:	eeb0 8a40 	vmov.f32	s16, s0
 801926e:	2102      	movs	r1, #2
 8019270:	68f8      	ldr	r0, [r7, #12]
 8019272:	f7fd fa3b 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019276:	eef0 7a40 	vmov.f32	s15, s0
 801927a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801927e:	2100      	movs	r1, #0
 8019280:	68f8      	ldr	r0, [r7, #12]
 8019282:	f7fd fa33 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019286:	eef0 8a40 	vmov.f32	s17, s0
 801928a:	2103      	movs	r1, #3
 801928c:	68f8      	ldr	r0, [r7, #12]
 801928e:	f7fd fa2d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019292:	eef0 7a40 	vmov.f32	s15, s0
 8019296:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801929a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801929e:	ee77 8aa7 	vadd.f32	s17, s15, s15
 80192a2:	2100      	movs	r1, #0
 80192a4:	68f8      	ldr	r0, [r7, #12]
 80192a6:	f7fd fa21 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192aa:	eeb0 8a40 	vmov.f32	s16, s0
 80192ae:	2100      	movs	r1, #0
 80192b0:	68f8      	ldr	r0, [r7, #12]
 80192b2:	f7fd fa1b 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192b6:	eef0 7a40 	vmov.f32	s15, s0
 80192ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80192be:	2101      	movs	r1, #1
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f7fd fa13 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192c6:	eeb0 9a40 	vmov.f32	s18, s0
 80192ca:	2101      	movs	r1, #1
 80192cc:	68f8      	ldr	r0, [r7, #12]
 80192ce:	f7fd fa0d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192d2:	eef0 7a40 	vmov.f32	s15, s0
 80192d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80192da:	ee38 8a27 	vadd.f32	s16, s16, s15
 80192de:	2102      	movs	r1, #2
 80192e0:	68f8      	ldr	r0, [r7, #12]
 80192e2:	f7fd fa03 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192e6:	eeb0 9a40 	vmov.f32	s18, s0
 80192ea:	2102      	movs	r1, #2
 80192ec:	68f8      	ldr	r0, [r7, #12]
 80192ee:	f7fd f9fd 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80192f2:	eef0 7a40 	vmov.f32	s15, s0
 80192f6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80192fa:	ee38 8a67 	vsub.f32	s16, s16, s15
 80192fe:	2103      	movs	r1, #3
 8019300:	68f8      	ldr	r0, [r7, #12]
 8019302:	f7fd f9f3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019306:	eeb0 9a40 	vmov.f32	s18, s0
 801930a:	2103      	movs	r1, #3
 801930c:	68f8      	ldr	r0, [r7, #12]
 801930e:	f7fd f9ed 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019312:	eef0 7a40 	vmov.f32	s15, s0
 8019316:	ee69 7a27 	vmul.f32	s15, s18, s15
 801931a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801931e:	eef0 0a67 	vmov.f32	s1, s15
 8019322:	eeb0 0a68 	vmov.f32	s0, s17
 8019326:	f7f7 fd7f 	bl	8010e28 <_ZSt5atan2ff>
 801932a:	ed87 0a02 	vstr	s0, [r7, #8]
	return yaw * 57.29578f + 180.0f;
 801932e:	edd7 7a02 	vldr	s15, [r7, #8]
 8019332:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8019350 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv+0x104>
 8019336:	ee67 7a87 	vmul.f32	s15, s15, s14
 801933a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8019354 <_ZNK10Algorithms15FusionAlgorithm6GetYawEv+0x108>
 801933e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8019342:	eeb0 0a67 	vmov.f32	s0, s15
 8019346:	3710      	adds	r7, #16
 8019348:	46bd      	mov	sp, r7
 801934a:	ecbd 8b04 	vpop	{d8-d9}
 801934e:	bd80      	pop	{r7, pc}
 8019350:	42652ee1 	.word	0x42652ee1
 8019354:	43340000 	.word	0x43340000

08019358 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>:

const Matrix<3,3>& FusionAlgorithm::GetRotationMatrix() const
{
 8019358:	b5b0      	push	{r4, r5, r7, lr}
 801935a:	ed2d 8b02 	vpush	{d8}
 801935e:	b096      	sub	sp, #88	; 0x58
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
	static Matrix<3,3> rotationMatrix;
 8019364:	4b0f      	ldr	r3, [pc, #60]	; (80193a4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f3bf 8f5b 	dmb	ish
 801936c:	f003 0301 	and.w	r3, r3, #1
 8019370:	2b00      	cmp	r3, #0
 8019372:	bf0c      	ite	eq
 8019374:	2301      	moveq	r3, #1
 8019376:	2300      	movne	r3, #0
 8019378:	b2db      	uxtb	r3, r3
 801937a:	2b00      	cmp	r3, #0
 801937c:	d016      	beq.n	80193ac <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 801937e:	4809      	ldr	r0, [pc, #36]	; (80193a4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8019380:	f004 fa12 	bl	801d7a8 <__cxa_guard_acquire>
 8019384:	4603      	mov	r3, r0
 8019386:	2b00      	cmp	r3, #0
 8019388:	bf14      	ite	ne
 801938a:	2301      	movne	r3, #1
 801938c:	2300      	moveq	r3, #0
 801938e:	b2db      	uxtb	r3, r3
 8019390:	2b00      	cmp	r3, #0
 8019392:	d00b      	beq.n	80193ac <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8019394:	4804      	ldr	r0, [pc, #16]	; (80193a8 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x50>)
 8019396:	f7f4 fcee 	bl	800dd76 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 801939a:	4802      	ldr	r0, [pc, #8]	; (80193a4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 801939c:	f004 fa10 	bl	801d7c0 <__cxa_guard_release>
 80193a0:	e004      	b.n	80193ac <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 80193a2:	bf00      	nop
 80193a4:	240057b8 	.word	0x240057b8
 80193a8:	24005794 	.word	0x24005794
	const OrientationEKF::StateVec& q = _orientationEKF.GetState();
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	4618      	mov	r0, r3
 80193b0:	f000 f9a8 	bl	8019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 80193b4:	6578      	str	r0, [r7, #84]	; 0x54
	rotationMatrix = {{
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 80193b6:	2100      	movs	r1, #0
 80193b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193ba:	f7fd f997 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80193be:	eeb0 8a40 	vmov.f32	s16, s0
 80193c2:	2100      	movs	r1, #0
 80193c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193c6:	f7fd f991 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80193ca:	eef0 7a40 	vmov.f32	s15, s0
 80193ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80193d2:	2101      	movs	r1, #1
 80193d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193d6:	f7fd f989 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80193da:	eef0 8a40 	vmov.f32	s17, s0
 80193de:	2101      	movs	r1, #1
 80193e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193e2:	f7fd f983 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80193e6:	eef0 7a40 	vmov.f32	s15, s0
 80193ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80193ee:	ee38 8a27 	vadd.f32	s16, s16, s15
 80193f2:	2102      	movs	r1, #2
 80193f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193f6:	f7fd f979 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80193fa:	eef0 8a40 	vmov.f32	s17, s0
 80193fe:	2102      	movs	r1, #2
 8019400:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019402:	f7fd f973 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019406:	eef0 7a40 	vmov.f32	s15, s0
 801940a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801940e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019412:	2103      	movs	r1, #3
 8019414:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019416:	f7fd f969 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801941a:	eef0 8a40 	vmov.f32	s17, s0
 801941e:	2103      	movs	r1, #3
 8019420:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019422:	f7fd f963 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019426:	eef0 7a40 	vmov.f32	s15, s0
 801942a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801942e:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8019432:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8019436:	2101      	movs	r1, #1
 8019438:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801943a:	f7fd f957 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801943e:	eeb0 8a40 	vmov.f32	s16, s0
 8019442:	2102      	movs	r1, #2
 8019444:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019446:	f7fd f951 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801944a:	eef0 7a40 	vmov.f32	s15, s0
 801944e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019452:	2100      	movs	r1, #0
 8019454:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019456:	f7fd f949 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801945a:	eef0 8a40 	vmov.f32	s17, s0
 801945e:	2103      	movs	r1, #3
 8019460:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019462:	f7fd f943 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019466:	eef0 7a40 	vmov.f32	s15, s0
 801946a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801946e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019472:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8019476:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 801947a:	2101      	movs	r1, #1
 801947c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801947e:	f7fd f935 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019482:	eeb0 8a40 	vmov.f32	s16, s0
 8019486:	2103      	movs	r1, #3
 8019488:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801948a:	f7fd f92f 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801948e:	eef0 7a40 	vmov.f32	s15, s0
 8019492:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019496:	2100      	movs	r1, #0
 8019498:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801949a:	f7fd f927 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801949e:	eef0 8a40 	vmov.f32	s17, s0
 80194a2:	2102      	movs	r1, #2
 80194a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194a6:	f7fd f921 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80194aa:	eef0 7a40 	vmov.f32	s15, s0
 80194ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80194b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80194b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 80194ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 80194be:	2101      	movs	r1, #1
 80194c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194c2:	f7fd f913 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80194c6:	eeb0 8a40 	vmov.f32	s16, s0
 80194ca:	2102      	movs	r1, #2
 80194cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194ce:	f7fd f90d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80194d2:	eef0 7a40 	vmov.f32	s15, s0
 80194d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80194da:	2100      	movs	r1, #0
 80194dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194de:	f7fd f905 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80194e2:	eef0 8a40 	vmov.f32	s17, s0
 80194e6:	2103      	movs	r1, #3
 80194e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194ea:	f7fd f8ff 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80194ee:	eef0 7a40 	vmov.f32	s15, s0
 80194f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80194f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80194fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 80194fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8019502:	2100      	movs	r1, #0
 8019504:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019506:	f7fd f8f1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801950a:	eeb0 8a40 	vmov.f32	s16, s0
 801950e:	2100      	movs	r1, #0
 8019510:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019512:	f7fd f8eb 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019516:	eef0 7a40 	vmov.f32	s15, s0
 801951a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801951e:	2101      	movs	r1, #1
 8019520:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019522:	f7fd f8e3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019526:	eef0 8a40 	vmov.f32	s17, s0
 801952a:	2101      	movs	r1, #1
 801952c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801952e:	f7fd f8dd 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019532:	eef0 7a40 	vmov.f32	s15, s0
 8019536:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801953a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801953e:	2102      	movs	r1, #2
 8019540:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019542:	f7fd f8d3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019546:	eef0 8a40 	vmov.f32	s17, s0
 801954a:	2102      	movs	r1, #2
 801954c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801954e:	f7fd f8cd 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019552:	eef0 7a40 	vmov.f32	s15, s0
 8019556:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801955a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801955e:	2103      	movs	r1, #3
 8019560:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019562:	f7fd f8c3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019566:	eef0 8a40 	vmov.f32	s17, s0
 801956a:	2103      	movs	r1, #3
 801956c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801956e:	f7fd f8bd 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019572:	eef0 7a40 	vmov.f32	s15, s0
 8019576:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801957a:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 801957e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8019582:	2102      	movs	r1, #2
 8019584:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019586:	f7fd f8b1 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801958a:	eeb0 8a40 	vmov.f32	s16, s0
 801958e:	2103      	movs	r1, #3
 8019590:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019592:	f7fd f8ab 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019596:	eef0 7a40 	vmov.f32	s15, s0
 801959a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801959e:	2100      	movs	r1, #0
 80195a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195a2:	f7fd f8a3 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195a6:	eef0 8a40 	vmov.f32	s17, s0
 80195aa:	2101      	movs	r1, #1
 80195ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195ae:	f7fd f89d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195b2:	eef0 7a40 	vmov.f32	s15, s0
 80195b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80195ba:	ee78 7a67 	vsub.f32	s15, s16, s15
 80195be:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 80195c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 80195c6:	2101      	movs	r1, #1
 80195c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195ca:	f7fd f88f 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195ce:	eeb0 8a40 	vmov.f32	s16, s0
 80195d2:	2103      	movs	r1, #3
 80195d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195d6:	f7fd f889 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195da:	eef0 7a40 	vmov.f32	s15, s0
 80195de:	ee28 8a27 	vmul.f32	s16, s16, s15
 80195e2:	2100      	movs	r1, #0
 80195e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195e6:	f7fd f881 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195ea:	eef0 8a40 	vmov.f32	s17, s0
 80195ee:	2102      	movs	r1, #2
 80195f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80195f2:	f7fd f87b 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80195f6:	eef0 7a40 	vmov.f32	s15, s0
 80195fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80195fe:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019602:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8019606:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801960a:	2100      	movs	r1, #0
 801960c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801960e:	f7fd f86d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019612:	eeb0 8a40 	vmov.f32	s16, s0
 8019616:	2101      	movs	r1, #1
 8019618:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801961a:	f7fd f867 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801961e:	eef0 7a40 	vmov.f32	s15, s0
 8019622:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019626:	2102      	movs	r1, #2
 8019628:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801962a:	f7fd f85f 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801962e:	eef0 8a40 	vmov.f32	s17, s0
 8019632:	2103      	movs	r1, #3
 8019634:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019636:	f7fd f859 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801963a:	eef0 7a40 	vmov.f32	s15, s0
 801963e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019642:	ee78 7a27 	vadd.f32	s15, s16, s15
 8019646:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 801964a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801964e:	2100      	movs	r1, #0
 8019650:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019652:	f7fd f84b 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019656:	eeb0 8a40 	vmov.f32	s16, s0
 801965a:	2100      	movs	r1, #0
 801965c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801965e:	f7fd f845 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019662:	eef0 7a40 	vmov.f32	s15, s0
 8019666:	ee28 8a27 	vmul.f32	s16, s16, s15
 801966a:	2101      	movs	r1, #1
 801966c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801966e:	f7fd f83d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019672:	eef0 8a40 	vmov.f32	s17, s0
 8019676:	2101      	movs	r1, #1
 8019678:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801967a:	f7fd f837 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801967e:	eef0 7a40 	vmov.f32	s15, s0
 8019682:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019686:	ee38 8a67 	vsub.f32	s16, s16, s15
 801968a:	2102      	movs	r1, #2
 801968c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801968e:	f7fd f82d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 8019692:	eef0 8a40 	vmov.f32	s17, s0
 8019696:	2102      	movs	r1, #2
 8019698:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801969a:	f7fd f827 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 801969e:	eef0 7a40 	vmov.f32	s15, s0
 80196a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80196a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80196aa:	2103      	movs	r1, #3
 80196ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80196ae:	f7fd f81d 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80196b2:	eef0 8a40 	vmov.f32	s17, s0
 80196b6:	2103      	movs	r1, #3
 80196b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80196ba:	f7fd f817 	bl	80166ec <_ZNK3Mat8V_VectorILt4EEclEt>
 80196be:	eef0 7a40 	vmov.f32	s15, s0
 80196c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80196c6:	ee78 7a27 	vadd.f32	s15, s16, s15
	rotationMatrix = {{
 80196ca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80196ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80196d2:	f107 030c 	add.w	r3, r7, #12
 80196d6:	4611      	mov	r1, r2
 80196d8:	4618      	mov	r0, r3
 80196da:	f7f7 fa8f 	bl	8010bfc <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80196de:	4b08      	ldr	r3, [pc, #32]	; (8019700 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x3a8>)
 80196e0:	461d      	mov	r5, r3
 80196e2:	f107 040c 	add.w	r4, r7, #12
 80196e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80196ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80196ee:	6823      	ldr	r3, [r4, #0]
 80196f0:	602b      	str	r3, [r5, #0]
	}};
	return rotationMatrix;
 80196f2:	4b03      	ldr	r3, [pc, #12]	; (8019700 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x3a8>)
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3758      	adds	r7, #88	; 0x58
 80196f8:	46bd      	mov	sp, r7
 80196fa:	ecbd 8b02 	vpop	{d8}
 80196fe:	bdb0      	pop	{r4, r5, r7, pc}
 8019700:	24005794 	.word	0x24005794

08019704 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>:
		_time = time;}

	virtual void Predict(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time);
	virtual void Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time);

	const StateVec& GetState() const {return _state;}
 8019704:	b480      	push	{r7}
 8019706:	b083      	sub	sp, #12
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	3304      	adds	r3, #4
 8019710:	4618      	mov	r0, r3
 8019712:	370c      	adds	r7, #12
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr

0801971c <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7GetTimeEv>:
	const StateCovarianceMatrix& GetStateCov() const {return _stateCovMatrix;}
	float GetTime() const {return _time;}
 801971c:	b480      	push	{r7}
 801971e:	b083      	sub	sp, #12
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019728:	ee07 3a90 	vmov	s15, r3
 801972c:	eeb0 0a67 	vmov.f32	s0, s15
 8019730:	370c      	adds	r7, #12
 8019732:	46bd      	mov	sp, r7
 8019734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019738:	4770      	bx	lr

0801973a <_ZN3Mat8V_VectorILt3EEclEt>:
 801973a:	b580      	push	{r7, lr}
 801973c:	b082      	sub	sp, #8
 801973e:	af00      	add	r7, sp, #0
 8019740:	6078      	str	r0, [r7, #4]
 8019742:	460b      	mov	r3, r1
 8019744:	807b      	strh	r3, [r7, #2]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	887a      	ldrh	r2, [r7, #2]
 801974a:	4611      	mov	r1, r2
 801974c:	4618      	mov	r0, r3
 801974e:	f7f4 fd35 	bl	800e1bc <_ZNSt5arrayIfLj3EEixEj>
 8019752:	4603      	mov	r3, r0
 8019754:	4618      	mov	r0, r3
 8019756:	3708      	adds	r7, #8
 8019758:	46bd      	mov	sp, r7
 801975a:	bd80      	pop	{r7, pc}

0801975c <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>:
 801975c:	b480      	push	{r7}
 801975e:	b083      	sub	sp, #12
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801976a:	ee07 3a90 	vmov	s15, r3
 801976e:	eeb0 0a67 	vmov.f32	s0, s15
 8019772:	370c      	adds	r7, #12
 8019774:	46bd      	mov	sp, r7
 8019776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977a:	4770      	bx	lr

0801977c <_ZN3Mat10QuaternionpLERKS0_>:

namespace Mat
{

Quaternion& Quaternion::operator+=(const Quaternion& other)
{
 801977c:	b480      	push	{r7}
 801977e:	b083      	sub	sp, #12
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
 8019784:	6039      	str	r1, [r7, #0]
	w += other.w;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	ed93 7a00 	vldr	s14, [r3]
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	edd3 7a00 	vldr	s15, [r3]
 8019792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	edc3 7a00 	vstr	s15, [r3]
	x += other.x;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	ed93 7a01 	vldr	s14, [r3, #4]
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80197a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	edc3 7a01 	vstr	s15, [r3, #4]
	y += other.y;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80197b8:	683b      	ldr	r3, [r7, #0]
 80197ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80197be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	edc3 7a02 	vstr	s15, [r3, #8]
	z += other.z;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80197d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 80197de:	687b      	ldr	r3, [r7, #4]
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	370c      	adds	r7, #12
 80197e4:	46bd      	mov	sp, r7
 80197e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ea:	4770      	bx	lr

080197ec <_ZN3Mat10QuaternionmLEf>:
	*this = operator*(other);
	return *this;
}

Quaternion& Quaternion::operator*=(float f)
{
 80197ec:	b480      	push	{r7}
 80197ee:	b083      	sub	sp, #12
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
 80197f4:	ed87 0a00 	vstr	s0, [r7]
	w *= f;
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	ed93 7a00 	vldr	s14, [r3]
 80197fe:	edd7 7a00 	vldr	s15, [r7]
 8019802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	edc3 7a00 	vstr	s15, [r3]
	x *= f;
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	ed93 7a01 	vldr	s14, [r3, #4]
 8019812:	edd7 7a00 	vldr	s15, [r7]
 8019816:	ee67 7a27 	vmul.f32	s15, s14, s15
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	edc3 7a01 	vstr	s15, [r3, #4]
	y *= f;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	ed93 7a02 	vldr	s14, [r3, #8]
 8019826:	edd7 7a00 	vldr	s15, [r7]
 801982a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	edc3 7a02 	vstr	s15, [r3, #8]
	z *= f;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	ed93 7a03 	vldr	s14, [r3, #12]
 801983a:	edd7 7a00 	vldr	s15, [r7]
 801983e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 8019848:	687b      	ldr	r3, [r7, #4]
}
 801984a:	4618      	mov	r0, r3
 801984c:	370c      	adds	r7, #12
 801984e:	46bd      	mov	sp, r7
 8019850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019854:	4770      	bx	lr

08019856 <_ZN3Mat10Quaternion9NormaliseEv>:

Quaternion& Quaternion::Normalise()
{
 8019856:	b580      	push	{r7, lr}
 8019858:	b084      	sub	sp, #16
 801985a:	af00      	add	r7, sp, #0
 801985c:	6078      	str	r0, [r7, #4]
	float norm = Norm();
 801985e:	6878      	ldr	r0, [r7, #4]
 8019860:	f000 f9ac 	bl	8019bbc <_ZNK3Mat10Quaternion4NormEv>
 8019864:	ed87 0a03 	vstr	s0, [r7, #12]
	if(norm != 0.0f) this->operator *=((1.0f / norm));
 8019868:	edd7 7a03 	vldr	s15, [r7, #12]
 801986c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019874:	d00a      	beq.n	801988c <_ZN3Mat10Quaternion9NormaliseEv+0x36>
 8019876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801987a:	edd7 7a03 	vldr	s15, [r7, #12]
 801987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019882:	eeb0 0a47 	vmov.f32	s0, s14
 8019886:	6878      	ldr	r0, [r7, #4]
 8019888:	f7ff ffb0 	bl	80197ec <_ZN3Mat10QuaternionmLEf>
	return *this;
 801988c:	687b      	ldr	r3, [r7, #4]
}
 801988e:	4618      	mov	r0, r3
 8019890:	3710      	adds	r7, #16
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}

08019896 <_ZNK3Mat10QuaternionplERKS0_>:

Quaternion Quaternion::operator+(const Quaternion& other) const
{
 8019896:	b590      	push	{r4, r7, lr}
 8019898:	b08f      	sub	sp, #60	; 0x3c
 801989a:	af00      	add	r7, sp, #0
 801989c:	6178      	str	r0, [r7, #20]
 801989e:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 80198a0:	697b      	ldr	r3, [r7, #20]
 80198a2:	f107 0418 	add.w	r4, r7, #24
 80198a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80198a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 80198ac:	f107 0318 	add.w	r3, r7, #24
 80198b0:	6939      	ldr	r1, [r7, #16]
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7ff ff62 	bl	801977c <_ZN3Mat10QuaternionpLERKS0_>
	return result;
 80198b8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80198bc:	f107 0318 	add.w	r3, r7, #24
 80198c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80198c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80198c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80198ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ce:	ee06 0a10 	vmov	s12, r0
 80198d2:	ee06 1a90 	vmov	s13, r1
 80198d6:	ee07 2a10 	vmov	s14, r2
 80198da:	ee07 3a90 	vmov	s15, r3
}
 80198de:	eeb0 0a46 	vmov.f32	s0, s12
 80198e2:	eef0 0a66 	vmov.f32	s1, s13
 80198e6:	eeb0 1a47 	vmov.f32	s2, s14
 80198ea:	eef0 1a67 	vmov.f32	s3, s15
 80198ee:	373c      	adds	r7, #60	; 0x3c
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd90      	pop	{r4, r7, pc}

080198f4 <_ZNK3Mat10QuaternionmlERKS0_>:
	result -= other;
	return result;
}

Quaternion Quaternion::operator*(const Quaternion& other) const
{
 80198f4:	b490      	push	{r4, r7}
 80198f6:	b08e      	sub	sp, #56	; 0x38
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6178      	str	r0, [r7, #20]
 80198fc:	6139      	str	r1, [r7, #16]
	Quaternion result{};
 80198fe:	f107 0318 	add.w	r3, r7, #24
 8019902:	2200      	movs	r2, #0
 8019904:	601a      	str	r2, [r3, #0]
 8019906:	605a      	str	r2, [r3, #4]
 8019908:	609a      	str	r2, [r3, #8]
 801990a:	60da      	str	r2, [r3, #12]
	result.w = this->w*other.w - this->x*other.x - this->y*other.y - this->z*other.z;
 801990c:	697b      	ldr	r3, [r7, #20]
 801990e:	ed93 7a00 	vldr	s14, [r3]
 8019912:	693b      	ldr	r3, [r7, #16]
 8019914:	edd3 7a00 	vldr	s15, [r3]
 8019918:	ee27 7a27 	vmul.f32	s14, s14, s15
 801991c:	697b      	ldr	r3, [r7, #20]
 801991e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019922:	693b      	ldr	r3, [r7, #16]
 8019924:	edd3 7a01 	vldr	s15, [r3, #4]
 8019928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801992c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	edd3 6a02 	vldr	s13, [r3, #8]
 8019936:	693b      	ldr	r3, [r7, #16]
 8019938:	edd3 7a02 	vldr	s15, [r3, #8]
 801993c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	edd3 6a03 	vldr	s13, [r3, #12]
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	edd3 7a03 	vldr	s15, [r3, #12]
 8019950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019958:	edc7 7a06 	vstr	s15, [r7, #24]
	result.x = this->w*other.x + this->x*other.w + this->y*other.z - this->z*other.y;
 801995c:	697b      	ldr	r3, [r7, #20]
 801995e:	ed93 7a00 	vldr	s14, [r3]
 8019962:	693b      	ldr	r3, [r7, #16]
 8019964:	edd3 7a01 	vldr	s15, [r3, #4]
 8019968:	ee27 7a27 	vmul.f32	s14, s14, s15
 801996c:	697b      	ldr	r3, [r7, #20]
 801996e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	edd3 7a00 	vldr	s15, [r3]
 8019978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801997c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	edd3 6a02 	vldr	s13, [r3, #8]
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	edd3 7a03 	vldr	s15, [r3, #12]
 801998c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	edd3 6a03 	vldr	s13, [r3, #12]
 801999a:	693b      	ldr	r3, [r7, #16]
 801999c:	edd3 7a02 	vldr	s15, [r3, #8]
 80199a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80199a8:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y = this->w*other.y - this->x*other.z + this->y*other.w + this->z*other.x;
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	ed93 7a00 	vldr	s14, [r3]
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80199b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199bc:	697b      	ldr	r3, [r7, #20]
 80199be:	edd3 6a01 	vldr	s13, [r3, #4]
 80199c2:	693b      	ldr	r3, [r7, #16]
 80199c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80199c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80199d6:	693b      	ldr	r3, [r7, #16]
 80199d8:	edd3 7a00 	vldr	s15, [r3]
 80199dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80199ea:	693b      	ldr	r3, [r7, #16]
 80199ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80199f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80199f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199f8:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z = this->w*other.z + this->x*other.y - this->y*other.x + this->z*other.w;
 80199fc:	697b      	ldr	r3, [r7, #20]
 80199fe:	ed93 7a00 	vldr	s14, [r3]
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8019a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	edd3 6a01 	vldr	s13, [r3, #4]
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8019a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a20:	697b      	ldr	r3, [r7, #20]
 8019a22:	edd3 6a02 	vldr	s13, [r3, #8]
 8019a26:	693b      	ldr	r3, [r7, #16]
 8019a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	edd3 6a03 	vldr	s13, [r3, #12]
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	edd3 7a00 	vldr	s15, [r3]
 8019a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019a48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8019a4c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019a50:	f107 0318 	add.w	r3, r7, #24
 8019a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a62:	ee06 0a10 	vmov	s12, r0
 8019a66:	ee06 1a90 	vmov	s13, r1
 8019a6a:	ee07 2a10 	vmov	s14, r2
 8019a6e:	ee07 3a90 	vmov	s15, r3
}
 8019a72:	eeb0 0a46 	vmov.f32	s0, s12
 8019a76:	eef0 0a66 	vmov.f32	s1, s13
 8019a7a:	eeb0 1a47 	vmov.f32	s2, s14
 8019a7e:	eef0 1a67 	vmov.f32	s3, s15
 8019a82:	3738      	adds	r7, #56	; 0x38
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bc90      	pop	{r4, r7}
 8019a88:	4770      	bx	lr

08019a8a <_ZNK3Mat10QuaternionmlEf>:

Quaternion Quaternion::operator*(float f) const
{
 8019a8a:	b590      	push	{r4, r7, lr}
 8019a8c:	b08f      	sub	sp, #60	; 0x3c
 8019a8e:	af00      	add	r7, sp, #0
 8019a90:	6178      	str	r0, [r7, #20]
 8019a92:	ed87 0a04 	vstr	s0, [r7, #16]
	Quaternion result = *this;
 8019a96:	697b      	ldr	r3, [r7, #20]
 8019a98:	f107 0418 	add.w	r4, r7, #24
 8019a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= f;
 8019aa2:	f107 0318 	add.w	r3, r7, #24
 8019aa6:	ed97 0a04 	vldr	s0, [r7, #16]
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f7ff fe9e 	bl	80197ec <_ZN3Mat10QuaternionmLEf>
	return result;
 8019ab0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019ab4:	f107 0318 	add.w	r3, r7, #24
 8019ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ac6:	ee06 0a10 	vmov	s12, r0
 8019aca:	ee06 1a90 	vmov	s13, r1
 8019ace:	ee07 2a10 	vmov	s14, r2
 8019ad2:	ee07 3a90 	vmov	s15, r3
}
 8019ad6:	eeb0 0a46 	vmov.f32	s0, s12
 8019ada:	eef0 0a66 	vmov.f32	s1, s13
 8019ade:	eeb0 1a47 	vmov.f32	s2, s14
 8019ae2:	eef0 1a67 	vmov.f32	s3, s15
 8019ae6:	373c      	adds	r7, #60	; 0x3c
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd90      	pop	{r4, r7, pc}

08019aec <_ZNK3Mat10Quaternion9ConjugateEv>:

Quaternion Quaternion::Conjugate() const
{
 8019aec:	b490      	push	{r4, r7}
 8019aee:	b08e      	sub	sp, #56	; 0x38
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6178      	str	r0, [r7, #20]
	Quaternion result = *this;
 8019af4:	697b      	ldr	r3, [r7, #20]
 8019af6:	f107 0418 	add.w	r4, r7, #24
 8019afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x*= -1.0f;
 8019b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8019b04:	eef1 7a67 	vneg.f32	s15, s15
 8019b08:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y*= -1.0f;
 8019b0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8019b10:	eef1 7a67 	vneg.f32	s15, s15
 8019b14:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z*= -1.0f;
 8019b18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019b1c:	eef1 7a67 	vneg.f32	s15, s15
 8019b20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8019b24:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019b28:	f107 0318 	add.w	r3, r7, #24
 8019b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b3a:	ee06 0a10 	vmov	s12, r0
 8019b3e:	ee06 1a90 	vmov	s13, r1
 8019b42:	ee07 2a10 	vmov	s14, r2
 8019b46:	ee07 3a90 	vmov	s15, r3
}
 8019b4a:	eeb0 0a46 	vmov.f32	s0, s12
 8019b4e:	eef0 0a66 	vmov.f32	s1, s13
 8019b52:	eeb0 1a47 	vmov.f32	s2, s14
 8019b56:	eef0 1a67 	vmov.f32	s3, s15
 8019b5a:	3738      	adds	r7, #56	; 0x38
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bc90      	pop	{r4, r7}
 8019b60:	4770      	bx	lr

08019b62 <_ZNK3Mat10Quaternion10NormalisedEv>:

Quaternion Quaternion::Normalised() const
{
 8019b62:	b590      	push	{r4, r7, lr}
 8019b64:	b08f      	sub	sp, #60	; 0x3c
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	6178      	str	r0, [r7, #20]
	Quaternion normalised = *this;
 8019b6a:	697b      	ldr	r3, [r7, #20]
 8019b6c:	f107 0418 	add.w	r4, r7, #24
 8019b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	normalised.Normalise();
 8019b76:	f107 0318 	add.w	r3, r7, #24
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7ff fe6b 	bl	8019856 <_ZN3Mat10Quaternion9NormaliseEv>
	return normalised;
 8019b80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019b84:	f107 0318 	add.w	r3, r7, #24
 8019b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b96:	ee06 0a10 	vmov	s12, r0
 8019b9a:	ee06 1a90 	vmov	s13, r1
 8019b9e:	ee07 2a10 	vmov	s14, r2
 8019ba2:	ee07 3a90 	vmov	s15, r3
}
 8019ba6:	eeb0 0a46 	vmov.f32	s0, s12
 8019baa:	eef0 0a66 	vmov.f32	s1, s13
 8019bae:	eeb0 1a47 	vmov.f32	s2, s14
 8019bb2:	eef0 1a67 	vmov.f32	s3, s15
 8019bb6:	373c      	adds	r7, #60	; 0x3c
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bd90      	pop	{r4, r7, pc}

08019bbc <_ZNK3Mat10Quaternion4NormEv>:
	conjugate.Normalise();
	return conjugate;
}

float Quaternion::Norm() const
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b082      	sub	sp, #8
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
	return sqrt(w*w + x*x + y*y + z*z);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	ed93 7a00 	vldr	s14, [r3]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	edd3 7a00 	vldr	s15, [r3]
 8019bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	edd3 6a01 	vldr	s13, [r3, #4]
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8019be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	edd3 6a02 	vldr	s13, [r3, #8]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8019bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	edd3 6a03 	vldr	s13, [r3, #12]
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8019c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c10:	eeb0 0a67 	vmov.f32	s0, s15
 8019c14:	f7f7 f93c 	bl	8010e90 <_ZSt4sqrtf>
 8019c18:	eef0 7a40 	vmov.f32	s15, s0
}
 8019c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8019c20:	3708      	adds	r7, #8
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}
	...

08019c28 <__NVIC_SetPriority>:
{
 8019c28:	b480      	push	{r7}
 8019c2a:	b083      	sub	sp, #12
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	4603      	mov	r3, r0
 8019c30:	6039      	str	r1, [r7, #0]
 8019c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	db0a      	blt.n	8019c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	b2da      	uxtb	r2, r3
 8019c40:	490c      	ldr	r1, [pc, #48]	; (8019c74 <__NVIC_SetPriority+0x4c>)
 8019c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c46:	0112      	lsls	r2, r2, #4
 8019c48:	b2d2      	uxtb	r2, r2
 8019c4a:	440b      	add	r3, r1
 8019c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019c50:	e00a      	b.n	8019c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019c52:	683b      	ldr	r3, [r7, #0]
 8019c54:	b2da      	uxtb	r2, r3
 8019c56:	4908      	ldr	r1, [pc, #32]	; (8019c78 <__NVIC_SetPriority+0x50>)
 8019c58:	88fb      	ldrh	r3, [r7, #6]
 8019c5a:	f003 030f 	and.w	r3, r3, #15
 8019c5e:	3b04      	subs	r3, #4
 8019c60:	0112      	lsls	r2, r2, #4
 8019c62:	b2d2      	uxtb	r2, r2
 8019c64:	440b      	add	r3, r1
 8019c66:	761a      	strb	r2, [r3, #24]
}
 8019c68:	bf00      	nop
 8019c6a:	370c      	adds	r7, #12
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c72:	4770      	bx	lr
 8019c74:	e000e100 	.word	0xe000e100
 8019c78:	e000ed00 	.word	0xe000ed00

08019c7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019c80:	4b05      	ldr	r3, [pc, #20]	; (8019c98 <SysTick_Handler+0x1c>)
 8019c82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019c84:	f001 ffa2 	bl	801bbcc <xTaskGetSchedulerState>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	2b01      	cmp	r3, #1
 8019c8c:	d001      	beq.n	8019c92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8019c8e:	f002 fe8b 	bl	801c9a8 <xPortSysTickHandler>
  }
}
 8019c92:	bf00      	nop
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	e000e010 	.word	0xe000e010

08019c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019ca0:	2100      	movs	r1, #0
 8019ca2:	f06f 0004 	mvn.w	r0, #4
 8019ca6:	f7ff ffbf 	bl	8019c28 <__NVIC_SetPriority>
#endif
}
 8019caa:	bf00      	nop
 8019cac:	bd80      	pop	{r7, pc}
	...

08019cb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019cb0:	b480      	push	{r7}
 8019cb2:	b083      	sub	sp, #12
 8019cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019cb6:	f3ef 8305 	mrs	r3, IPSR
 8019cba:	603b      	str	r3, [r7, #0]
  return(result);
 8019cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d003      	beq.n	8019cca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019cc2:	f06f 0305 	mvn.w	r3, #5
 8019cc6:	607b      	str	r3, [r7, #4]
 8019cc8:	e00c      	b.n	8019ce4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8019cca:	4b0a      	ldr	r3, [pc, #40]	; (8019cf4 <osKernelInitialize+0x44>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d105      	bne.n	8019cde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8019cd2:	4b08      	ldr	r3, [pc, #32]	; (8019cf4 <osKernelInitialize+0x44>)
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	607b      	str	r3, [r7, #4]
 8019cdc:	e002      	b.n	8019ce4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8019cde:	f04f 33ff 	mov.w	r3, #4294967295
 8019ce2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019ce4:	687b      	ldr	r3, [r7, #4]
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	370c      	adds	r7, #12
 8019cea:	46bd      	mov	sp, r7
 8019cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf0:	4770      	bx	lr
 8019cf2:	bf00      	nop
 8019cf4:	240057bc 	.word	0x240057bc

08019cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019cfe:	f3ef 8305 	mrs	r3, IPSR
 8019d02:	603b      	str	r3, [r7, #0]
  return(result);
 8019d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d003      	beq.n	8019d12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8019d0a:	f06f 0305 	mvn.w	r3, #5
 8019d0e:	607b      	str	r3, [r7, #4]
 8019d10:	e010      	b.n	8019d34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8019d12:	4b0b      	ldr	r3, [pc, #44]	; (8019d40 <osKernelStart+0x48>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	2b01      	cmp	r3, #1
 8019d18:	d109      	bne.n	8019d2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8019d1a:	f7ff ffbf 	bl	8019c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019d1e:	4b08      	ldr	r3, [pc, #32]	; (8019d40 <osKernelStart+0x48>)
 8019d20:	2202      	movs	r2, #2
 8019d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8019d24:	f001 fb42 	bl	801b3ac <vTaskStartScheduler>
      stat = osOK;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	607b      	str	r3, [r7, #4]
 8019d2c:	e002      	b.n	8019d34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019d34:	687b      	ldr	r3, [r7, #4]
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3708      	adds	r7, #8
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	240057bc 	.word	0x240057bc

08019d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08e      	sub	sp, #56	; 0x38
 8019d48:	af04      	add	r7, sp, #16
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019d50:	2300      	movs	r3, #0
 8019d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019d54:	f3ef 8305 	mrs	r3, IPSR
 8019d58:	617b      	str	r3, [r7, #20]
  return(result);
 8019d5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d17e      	bne.n	8019e5e <osThreadNew+0x11a>
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d07b      	beq.n	8019e5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8019d66:	2380      	movs	r3, #128	; 0x80
 8019d68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8019d6a:	2318      	movs	r3, #24
 8019d6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019d6e:	2300      	movs	r3, #0
 8019d70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8019d72:	f04f 33ff 	mov.w	r3, #4294967295
 8019d76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d045      	beq.n	8019e0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d002      	beq.n	8019d8c <osThreadNew+0x48>
        name = attr->name;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	699b      	ldr	r3, [r3, #24]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d002      	beq.n	8019d9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	699b      	ldr	r3, [r3, #24]
 8019d98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d008      	beq.n	8019db2 <osThreadNew+0x6e>
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	2b38      	cmp	r3, #56	; 0x38
 8019da4:	d805      	bhi.n	8019db2 <osThreadNew+0x6e>
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	685b      	ldr	r3, [r3, #4]
 8019daa:	f003 0301 	and.w	r3, r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d001      	beq.n	8019db6 <osThreadNew+0x72>
        return (NULL);
 8019db2:	2300      	movs	r3, #0
 8019db4:	e054      	b.n	8019e60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	695b      	ldr	r3, [r3, #20]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d003      	beq.n	8019dc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	695b      	ldr	r3, [r3, #20]
 8019dc2:	089b      	lsrs	r3, r3, #2
 8019dc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	689b      	ldr	r3, [r3, #8]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d00e      	beq.n	8019dec <osThreadNew+0xa8>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	68db      	ldr	r3, [r3, #12]
 8019dd2:	2b5b      	cmp	r3, #91	; 0x5b
 8019dd4:	d90a      	bls.n	8019dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d006      	beq.n	8019dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	695b      	ldr	r3, [r3, #20]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d002      	beq.n	8019dec <osThreadNew+0xa8>
        mem = 1;
 8019de6:	2301      	movs	r3, #1
 8019de8:	61bb      	str	r3, [r7, #24]
 8019dea:	e010      	b.n	8019e0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	689b      	ldr	r3, [r3, #8]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d10c      	bne.n	8019e0e <osThreadNew+0xca>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	68db      	ldr	r3, [r3, #12]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d108      	bne.n	8019e0e <osThreadNew+0xca>
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	691b      	ldr	r3, [r3, #16]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d104      	bne.n	8019e0e <osThreadNew+0xca>
          mem = 0;
 8019e04:	2300      	movs	r3, #0
 8019e06:	61bb      	str	r3, [r7, #24]
 8019e08:	e001      	b.n	8019e0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019e0e:	69bb      	ldr	r3, [r7, #24]
 8019e10:	2b01      	cmp	r3, #1
 8019e12:	d110      	bne.n	8019e36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019e18:	687a      	ldr	r2, [r7, #4]
 8019e1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019e1c:	9202      	str	r2, [sp, #8]
 8019e1e:	9301      	str	r3, [sp, #4]
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	9300      	str	r3, [sp, #0]
 8019e24:	68bb      	ldr	r3, [r7, #8]
 8019e26:	6a3a      	ldr	r2, [r7, #32]
 8019e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e2a:	68f8      	ldr	r0, [r7, #12]
 8019e2c:	f001 f8f8 	bl	801b020 <xTaskCreateStatic>
 8019e30:	4603      	mov	r3, r0
 8019e32:	613b      	str	r3, [r7, #16]
 8019e34:	e013      	b.n	8019e5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8019e36:	69bb      	ldr	r3, [r7, #24]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d110      	bne.n	8019e5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019e3c:	6a3b      	ldr	r3, [r7, #32]
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	f107 0310 	add.w	r3, r7, #16
 8019e44:	9301      	str	r3, [sp, #4]
 8019e46:	69fb      	ldr	r3, [r7, #28]
 8019e48:	9300      	str	r3, [sp, #0]
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019e4e:	68f8      	ldr	r0, [r7, #12]
 8019e50:	f001 f943 	bl	801b0da <xTaskCreate>
 8019e54:	4603      	mov	r3, r0
 8019e56:	2b01      	cmp	r3, #1
 8019e58:	d001      	beq.n	8019e5e <osThreadNew+0x11a>
            hTask = NULL;
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019e5e:	693b      	ldr	r3, [r7, #16]
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	3728      	adds	r7, #40	; 0x28
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b084      	sub	sp, #16
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019e70:	f3ef 8305 	mrs	r3, IPSR
 8019e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8019e76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d003      	beq.n	8019e84 <osDelay+0x1c>
    stat = osErrorISR;
 8019e7c:	f06f 0305 	mvn.w	r3, #5
 8019e80:	60fb      	str	r3, [r7, #12]
 8019e82:	e007      	b.n	8019e94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019e84:	2300      	movs	r3, #0
 8019e86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d002      	beq.n	8019e94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019e8e:	6878      	ldr	r0, [r7, #4]
 8019e90:	f001 fa58 	bl	801b344 <vTaskDelay>
    }
  }

  return (stat);
 8019e94:	68fb      	ldr	r3, [r7, #12]
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3710      	adds	r7, #16
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}

08019e9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8019e9e:	b580      	push	{r7, lr}
 8019ea0:	b08a      	sub	sp, #40	; 0x28
 8019ea2:	af02      	add	r7, sp, #8
 8019ea4:	60f8      	str	r0, [r7, #12]
 8019ea6:	60b9      	str	r1, [r7, #8]
 8019ea8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019eae:	f3ef 8305 	mrs	r3, IPSR
 8019eb2:	613b      	str	r3, [r7, #16]
  return(result);
 8019eb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d175      	bne.n	8019fa6 <osSemaphoreNew+0x108>
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d072      	beq.n	8019fa6 <osSemaphoreNew+0x108>
 8019ec0:	68ba      	ldr	r2, [r7, #8]
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d86e      	bhi.n	8019fa6 <osSemaphoreNew+0x108>
    mem = -1;
 8019ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ecc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d015      	beq.n	8019f00 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	689b      	ldr	r3, [r3, #8]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d006      	beq.n	8019eea <osSemaphoreNew+0x4c>
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	2b4f      	cmp	r3, #79	; 0x4f
 8019ee2:	d902      	bls.n	8019eea <osSemaphoreNew+0x4c>
        mem = 1;
 8019ee4:	2301      	movs	r3, #1
 8019ee6:	61bb      	str	r3, [r7, #24]
 8019ee8:	e00c      	b.n	8019f04 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	689b      	ldr	r3, [r3, #8]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d108      	bne.n	8019f04 <osSemaphoreNew+0x66>
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	68db      	ldr	r3, [r3, #12]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d104      	bne.n	8019f04 <osSemaphoreNew+0x66>
          mem = 0;
 8019efa:	2300      	movs	r3, #0
 8019efc:	61bb      	str	r3, [r7, #24]
 8019efe:	e001      	b.n	8019f04 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8019f00:	2300      	movs	r3, #0
 8019f02:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8019f04:	69bb      	ldr	r3, [r7, #24]
 8019f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f0a:	d04c      	beq.n	8019fa6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	2b01      	cmp	r3, #1
 8019f10:	d128      	bne.n	8019f64 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8019f12:	69bb      	ldr	r3, [r7, #24]
 8019f14:	2b01      	cmp	r3, #1
 8019f16:	d10a      	bne.n	8019f2e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	689b      	ldr	r3, [r3, #8]
 8019f1c:	2203      	movs	r2, #3
 8019f1e:	9200      	str	r2, [sp, #0]
 8019f20:	2200      	movs	r2, #0
 8019f22:	2100      	movs	r1, #0
 8019f24:	2001      	movs	r0, #1
 8019f26:	f000 f986 	bl	801a236 <xQueueGenericCreateStatic>
 8019f2a:	61f8      	str	r0, [r7, #28]
 8019f2c:	e005      	b.n	8019f3a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8019f2e:	2203      	movs	r2, #3
 8019f30:	2100      	movs	r1, #0
 8019f32:	2001      	movs	r0, #1
 8019f34:	f000 f9f7 	bl	801a326 <xQueueGenericCreate>
 8019f38:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8019f3a:	69fb      	ldr	r3, [r7, #28]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d022      	beq.n	8019f86 <osSemaphoreNew+0xe8>
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d01f      	beq.n	8019f86 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8019f46:	2300      	movs	r3, #0
 8019f48:	2200      	movs	r2, #0
 8019f4a:	2100      	movs	r1, #0
 8019f4c:	69f8      	ldr	r0, [r7, #28]
 8019f4e:	f000 fab1 	bl	801a4b4 <xQueueGenericSend>
 8019f52:	4603      	mov	r3, r0
 8019f54:	2b01      	cmp	r3, #1
 8019f56:	d016      	beq.n	8019f86 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8019f58:	69f8      	ldr	r0, [r7, #28]
 8019f5a:	f000 fe8d 	bl	801ac78 <vQueueDelete>
            hSemaphore = NULL;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	61fb      	str	r3, [r7, #28]
 8019f62:	e010      	b.n	8019f86 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8019f64:	69bb      	ldr	r3, [r7, #24]
 8019f66:	2b01      	cmp	r3, #1
 8019f68:	d108      	bne.n	8019f7c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	689b      	ldr	r3, [r3, #8]
 8019f6e:	461a      	mov	r2, r3
 8019f70:	68b9      	ldr	r1, [r7, #8]
 8019f72:	68f8      	ldr	r0, [r7, #12]
 8019f74:	f000 fa34 	bl	801a3e0 <xQueueCreateCountingSemaphoreStatic>
 8019f78:	61f8      	str	r0, [r7, #28]
 8019f7a:	e004      	b.n	8019f86 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8019f7c:	68b9      	ldr	r1, [r7, #8]
 8019f7e:	68f8      	ldr	r0, [r7, #12]
 8019f80:	f000 fa65 	bl	801a44e <xQueueCreateCountingSemaphore>
 8019f84:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8019f86:	69fb      	ldr	r3, [r7, #28]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d00c      	beq.n	8019fa6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d003      	beq.n	8019f9a <osSemaphoreNew+0xfc>
          name = attr->name;
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	617b      	str	r3, [r7, #20]
 8019f98:	e001      	b.n	8019f9e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8019f9e:	6979      	ldr	r1, [r7, #20]
 8019fa0:	69f8      	ldr	r0, [r7, #28]
 8019fa2:	f000 ffb5 	bl	801af10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8019fa6:	69fb      	ldr	r3, [r7, #28]
}
 8019fa8:	4618      	mov	r0, r3
 8019faa:	3720      	adds	r7, #32
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}

08019fb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019fb0:	b480      	push	{r7}
 8019fb2:	b085      	sub	sp, #20
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	60f8      	str	r0, [r7, #12]
 8019fb8:	60b9      	str	r1, [r7, #8]
 8019fba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	4a07      	ldr	r2, [pc, #28]	; (8019fdc <vApplicationGetIdleTaskMemory+0x2c>)
 8019fc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	4a06      	ldr	r2, [pc, #24]	; (8019fe0 <vApplicationGetIdleTaskMemory+0x30>)
 8019fc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2280      	movs	r2, #128	; 0x80
 8019fcc:	601a      	str	r2, [r3, #0]
}
 8019fce:	bf00      	nop
 8019fd0:	3714      	adds	r7, #20
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd8:	4770      	bx	lr
 8019fda:	bf00      	nop
 8019fdc:	240057c0 	.word	0x240057c0
 8019fe0:	2400581c 	.word	0x2400581c

08019fe4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019fe4:	b480      	push	{r7}
 8019fe6:	b085      	sub	sp, #20
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	60f8      	str	r0, [r7, #12]
 8019fec:	60b9      	str	r1, [r7, #8]
 8019fee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	4a07      	ldr	r2, [pc, #28]	; (801a010 <vApplicationGetTimerTaskMemory+0x2c>)
 8019ff4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019ff6:	68bb      	ldr	r3, [r7, #8]
 8019ff8:	4a06      	ldr	r2, [pc, #24]	; (801a014 <vApplicationGetTimerTaskMemory+0x30>)
 8019ffa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a002:	601a      	str	r2, [r3, #0]
}
 801a004:	bf00      	nop
 801a006:	3714      	adds	r7, #20
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr
 801a010:	24005a1c 	.word	0x24005a1c
 801a014:	24005a78 	.word	0x24005a78

0801a018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801a018:	b480      	push	{r7}
 801a01a:	b083      	sub	sp, #12
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f103 0208 	add.w	r2, r3, #8
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	f04f 32ff 	mov.w	r2, #4294967295
 801a030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f103 0208 	add.w	r2, r3, #8
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	f103 0208 	add.w	r2, r3, #8
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	2200      	movs	r2, #0
 801a04a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801a04c:	bf00      	nop
 801a04e:	370c      	adds	r7, #12
 801a050:	46bd      	mov	sp, r7
 801a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a056:	4770      	bx	lr

0801a058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801a058:	b480      	push	{r7}
 801a05a:	b083      	sub	sp, #12
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2200      	movs	r2, #0
 801a064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801a066:	bf00      	nop
 801a068:	370c      	adds	r7, #12
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr

0801a072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a072:	b480      	push	{r7}
 801a074:	b085      	sub	sp, #20
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
 801a07a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	685b      	ldr	r3, [r3, #4]
 801a080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	689a      	ldr	r2, [r3, #8]
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	689b      	ldr	r3, [r3, #8]
 801a094:	683a      	ldr	r2, [r7, #0]
 801a096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	683a      	ldr	r2, [r7, #0]
 801a09c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801a09e:	683b      	ldr	r3, [r7, #0]
 801a0a0:	687a      	ldr	r2, [r7, #4]
 801a0a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	1c5a      	adds	r2, r3, #1
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	601a      	str	r2, [r3, #0]
}
 801a0ae:	bf00      	nop
 801a0b0:	3714      	adds	r7, #20
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b8:	4770      	bx	lr

0801a0ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801a0ba:	b480      	push	{r7}
 801a0bc:	b085      	sub	sp, #20
 801a0be:	af00      	add	r7, sp, #0
 801a0c0:	6078      	str	r0, [r7, #4]
 801a0c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d0:	d103      	bne.n	801a0da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	691b      	ldr	r3, [r3, #16]
 801a0d6:	60fb      	str	r3, [r7, #12]
 801a0d8:	e00c      	b.n	801a0f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	3308      	adds	r3, #8
 801a0de:	60fb      	str	r3, [r7, #12]
 801a0e0:	e002      	b.n	801a0e8 <vListInsert+0x2e>
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	60fb      	str	r3, [r7, #12]
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	685b      	ldr	r3, [r3, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	68ba      	ldr	r2, [r7, #8]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d2f6      	bcs.n	801a0e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	685a      	ldr	r2, [r3, #4]
 801a0f8:	683b      	ldr	r3, [r7, #0]
 801a0fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	685b      	ldr	r3, [r3, #4]
 801a100:	683a      	ldr	r2, [r7, #0]
 801a102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	68fa      	ldr	r2, [r7, #12]
 801a108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	683a      	ldr	r2, [r7, #0]
 801a10e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	687a      	ldr	r2, [r7, #4]
 801a114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	1c5a      	adds	r2, r3, #1
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	601a      	str	r2, [r3, #0]
}
 801a120:	bf00      	nop
 801a122:	3714      	adds	r7, #20
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr

0801a12c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801a12c:	b480      	push	{r7}
 801a12e:	b085      	sub	sp, #20
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	691b      	ldr	r3, [r3, #16]
 801a138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	685b      	ldr	r3, [r3, #4]
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	6892      	ldr	r2, [r2, #8]
 801a142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	689b      	ldr	r3, [r3, #8]
 801a148:	687a      	ldr	r2, [r7, #4]
 801a14a:	6852      	ldr	r2, [r2, #4]
 801a14c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	685b      	ldr	r3, [r3, #4]
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	429a      	cmp	r2, r3
 801a156:	d103      	bne.n	801a160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	689a      	ldr	r2, [r3, #8]
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2200      	movs	r2, #0
 801a164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	1e5a      	subs	r2, r3, #1
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	681b      	ldr	r3, [r3, #0]
}
 801a174:	4618      	mov	r0, r3
 801a176:	3714      	adds	r7, #20
 801a178:	46bd      	mov	sp, r7
 801a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17e:	4770      	bx	lr

0801a180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b084      	sub	sp, #16
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
 801a188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	2b00      	cmp	r3, #0
 801a192:	d10a      	bne.n	801a1aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a198:	f383 8811 	msr	BASEPRI, r3
 801a19c:	f3bf 8f6f 	isb	sy
 801a1a0:	f3bf 8f4f 	dsb	sy
 801a1a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801a1a6:	bf00      	nop
 801a1a8:	e7fe      	b.n	801a1a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801a1aa:	f002 fb6b 	bl	801c884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	681a      	ldr	r2, [r3, #0]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1b6:	68f9      	ldr	r1, [r7, #12]
 801a1b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a1ba:	fb01 f303 	mul.w	r3, r1, r3
 801a1be:	441a      	add	r2, r3
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	681a      	ldr	r2, [r3, #0]
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	681a      	ldr	r2, [r3, #0]
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1da:	3b01      	subs	r3, #1
 801a1dc:	68f9      	ldr	r1, [r7, #12]
 801a1de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801a1e0:	fb01 f303 	mul.w	r3, r1, r3
 801a1e4:	441a      	add	r2, r3
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	22ff      	movs	r2, #255	; 0xff
 801a1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	22ff      	movs	r2, #255	; 0xff
 801a1f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d109      	bne.n	801a214 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	691b      	ldr	r3, [r3, #16]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d00f      	beq.n	801a228 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	3310      	adds	r3, #16
 801a20c:	4618      	mov	r0, r3
 801a20e:	f001 fb25 	bl	801b85c <xTaskRemoveFromEventList>
 801a212:	e009      	b.n	801a228 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	3310      	adds	r3, #16
 801a218:	4618      	mov	r0, r3
 801a21a:	f7ff fefd 	bl	801a018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	3324      	adds	r3, #36	; 0x24
 801a222:	4618      	mov	r0, r3
 801a224:	f7ff fef8 	bl	801a018 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a228:	f002 fb5c 	bl	801c8e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a22c:	2301      	movs	r3, #1
}
 801a22e:	4618      	mov	r0, r3
 801a230:	3710      	adds	r7, #16
 801a232:	46bd      	mov	sp, r7
 801a234:	bd80      	pop	{r7, pc}

0801a236 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a236:	b580      	push	{r7, lr}
 801a238:	b08e      	sub	sp, #56	; 0x38
 801a23a:	af02      	add	r7, sp, #8
 801a23c:	60f8      	str	r0, [r7, #12]
 801a23e:	60b9      	str	r1, [r7, #8]
 801a240:	607a      	str	r2, [r7, #4]
 801a242:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d10a      	bne.n	801a260 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a24e:	f383 8811 	msr	BASEPRI, r3
 801a252:	f3bf 8f6f 	isb	sy
 801a256:	f3bf 8f4f 	dsb	sy
 801a25a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a25c:	bf00      	nop
 801a25e:	e7fe      	b.n	801a25e <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a260:	683b      	ldr	r3, [r7, #0]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d10a      	bne.n	801a27c <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a26a:	f383 8811 	msr	BASEPRI, r3
 801a26e:	f3bf 8f6f 	isb	sy
 801a272:	f3bf 8f4f 	dsb	sy
 801a276:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a278:	bf00      	nop
 801a27a:	e7fe      	b.n	801a27a <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d002      	beq.n	801a288 <xQueueGenericCreateStatic+0x52>
 801a282:	68bb      	ldr	r3, [r7, #8]
 801a284:	2b00      	cmp	r3, #0
 801a286:	d001      	beq.n	801a28c <xQueueGenericCreateStatic+0x56>
 801a288:	2301      	movs	r3, #1
 801a28a:	e000      	b.n	801a28e <xQueueGenericCreateStatic+0x58>
 801a28c:	2300      	movs	r3, #0
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d10a      	bne.n	801a2a8 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a296:	f383 8811 	msr	BASEPRI, r3
 801a29a:	f3bf 8f6f 	isb	sy
 801a29e:	f3bf 8f4f 	dsb	sy
 801a2a2:	623b      	str	r3, [r7, #32]
}
 801a2a4:	bf00      	nop
 801a2a6:	e7fe      	b.n	801a2a6 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d102      	bne.n	801a2b4 <xQueueGenericCreateStatic+0x7e>
 801a2ae:	68bb      	ldr	r3, [r7, #8]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d101      	bne.n	801a2b8 <xQueueGenericCreateStatic+0x82>
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	e000      	b.n	801a2ba <xQueueGenericCreateStatic+0x84>
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d10a      	bne.n	801a2d4 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2c2:	f383 8811 	msr	BASEPRI, r3
 801a2c6:	f3bf 8f6f 	isb	sy
 801a2ca:	f3bf 8f4f 	dsb	sy
 801a2ce:	61fb      	str	r3, [r7, #28]
}
 801a2d0:	bf00      	nop
 801a2d2:	e7fe      	b.n	801a2d2 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a2d4:	2350      	movs	r3, #80	; 0x50
 801a2d6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a2d8:	697b      	ldr	r3, [r7, #20]
 801a2da:	2b50      	cmp	r3, #80	; 0x50
 801a2dc:	d00a      	beq.n	801a2f4 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2e2:	f383 8811 	msr	BASEPRI, r3
 801a2e6:	f3bf 8f6f 	isb	sy
 801a2ea:	f3bf 8f4f 	dsb	sy
 801a2ee:	61bb      	str	r3, [r7, #24]
}
 801a2f0:	bf00      	nop
 801a2f2:	e7fe      	b.n	801a2f2 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a2f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a2f6:	683b      	ldr	r3, [r7, #0]
 801a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d00d      	beq.n	801a31c <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a302:	2201      	movs	r2, #1
 801a304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a308:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a30e:	9300      	str	r3, [sp, #0]
 801a310:	4613      	mov	r3, r2
 801a312:	687a      	ldr	r2, [r7, #4]
 801a314:	68b9      	ldr	r1, [r7, #8]
 801a316:	68f8      	ldr	r0, [r7, #12]
 801a318:	f000 f83f 	bl	801a39a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a31e:	4618      	mov	r0, r3
 801a320:	3730      	adds	r7, #48	; 0x30
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}

0801a326 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a326:	b580      	push	{r7, lr}
 801a328:	b08a      	sub	sp, #40	; 0x28
 801a32a:	af02      	add	r7, sp, #8
 801a32c:	60f8      	str	r0, [r7, #12]
 801a32e:	60b9      	str	r1, [r7, #8]
 801a330:	4613      	mov	r3, r2
 801a332:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d10a      	bne.n	801a350 <xQueueGenericCreate+0x2a>
	__asm volatile
 801a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a33e:	f383 8811 	msr	BASEPRI, r3
 801a342:	f3bf 8f6f 	isb	sy
 801a346:	f3bf 8f4f 	dsb	sy
 801a34a:	613b      	str	r3, [r7, #16]
}
 801a34c:	bf00      	nop
 801a34e:	e7fe      	b.n	801a34e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	68ba      	ldr	r2, [r7, #8]
 801a354:	fb02 f303 	mul.w	r3, r2, r3
 801a358:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a35a:	69fb      	ldr	r3, [r7, #28]
 801a35c:	3350      	adds	r3, #80	; 0x50
 801a35e:	4618      	mov	r0, r3
 801a360:	f002 fbb2 	bl	801cac8 <pvPortMalloc>
 801a364:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a366:	69bb      	ldr	r3, [r7, #24]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d011      	beq.n	801a390 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a36c:	69bb      	ldr	r3, [r7, #24]
 801a36e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a370:	697b      	ldr	r3, [r7, #20]
 801a372:	3350      	adds	r3, #80	; 0x50
 801a374:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a376:	69bb      	ldr	r3, [r7, #24]
 801a378:	2200      	movs	r2, #0
 801a37a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a37e:	79fa      	ldrb	r2, [r7, #7]
 801a380:	69bb      	ldr	r3, [r7, #24]
 801a382:	9300      	str	r3, [sp, #0]
 801a384:	4613      	mov	r3, r2
 801a386:	697a      	ldr	r2, [r7, #20]
 801a388:	68b9      	ldr	r1, [r7, #8]
 801a38a:	68f8      	ldr	r0, [r7, #12]
 801a38c:	f000 f805 	bl	801a39a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a390:	69bb      	ldr	r3, [r7, #24]
	}
 801a392:	4618      	mov	r0, r3
 801a394:	3720      	adds	r7, #32
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}

0801a39a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b084      	sub	sp, #16
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	60f8      	str	r0, [r7, #12]
 801a3a2:	60b9      	str	r1, [r7, #8]
 801a3a4:	607a      	str	r2, [r7, #4]
 801a3a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a3a8:	68bb      	ldr	r3, [r7, #8]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d103      	bne.n	801a3b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a3ae:	69bb      	ldr	r3, [r7, #24]
 801a3b0:	69ba      	ldr	r2, [r7, #24]
 801a3b2:	601a      	str	r2, [r3, #0]
 801a3b4:	e002      	b.n	801a3bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a3b6:	69bb      	ldr	r3, [r7, #24]
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a3bc:	69bb      	ldr	r3, [r7, #24]
 801a3be:	68fa      	ldr	r2, [r7, #12]
 801a3c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a3c2:	69bb      	ldr	r3, [r7, #24]
 801a3c4:	68ba      	ldr	r2, [r7, #8]
 801a3c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a3c8:	2101      	movs	r1, #1
 801a3ca:	69b8      	ldr	r0, [r7, #24]
 801a3cc:	f7ff fed8 	bl	801a180 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801a3d0:	69bb      	ldr	r3, [r7, #24]
 801a3d2:	78fa      	ldrb	r2, [r7, #3]
 801a3d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a3d8:	bf00      	nop
 801a3da:	3710      	adds	r7, #16
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd80      	pop	{r7, pc}

0801a3e0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b08a      	sub	sp, #40	; 0x28
 801a3e4:	af02      	add	r7, sp, #8
 801a3e6:	60f8      	str	r0, [r7, #12]
 801a3e8:	60b9      	str	r1, [r7, #8]
 801a3ea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d10a      	bne.n	801a408 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3f6:	f383 8811 	msr	BASEPRI, r3
 801a3fa:	f3bf 8f6f 	isb	sy
 801a3fe:	f3bf 8f4f 	dsb	sy
 801a402:	61bb      	str	r3, [r7, #24]
}
 801a404:	bf00      	nop
 801a406:	e7fe      	b.n	801a406 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801a408:	68ba      	ldr	r2, [r7, #8]
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	429a      	cmp	r2, r3
 801a40e:	d90a      	bls.n	801a426 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a414:	f383 8811 	msr	BASEPRI, r3
 801a418:	f3bf 8f6f 	isb	sy
 801a41c:	f3bf 8f4f 	dsb	sy
 801a420:	617b      	str	r3, [r7, #20]
}
 801a422:	bf00      	nop
 801a424:	e7fe      	b.n	801a424 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801a426:	2302      	movs	r3, #2
 801a428:	9300      	str	r3, [sp, #0]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2200      	movs	r2, #0
 801a42e:	2100      	movs	r1, #0
 801a430:	68f8      	ldr	r0, [r7, #12]
 801a432:	f7ff ff00 	bl	801a236 <xQueueGenericCreateStatic>
 801a436:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801a438:	69fb      	ldr	r3, [r7, #28]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d002      	beq.n	801a444 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801a43e:	69fb      	ldr	r3, [r7, #28]
 801a440:	68ba      	ldr	r2, [r7, #8]
 801a442:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801a444:	69fb      	ldr	r3, [r7, #28]
	}
 801a446:	4618      	mov	r0, r3
 801a448:	3720      	adds	r7, #32
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}

0801a44e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801a44e:	b580      	push	{r7, lr}
 801a450:	b086      	sub	sp, #24
 801a452:	af00      	add	r7, sp, #0
 801a454:	6078      	str	r0, [r7, #4]
 801a456:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d10a      	bne.n	801a474 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a462:	f383 8811 	msr	BASEPRI, r3
 801a466:	f3bf 8f6f 	isb	sy
 801a46a:	f3bf 8f4f 	dsb	sy
 801a46e:	613b      	str	r3, [r7, #16]
}
 801a470:	bf00      	nop
 801a472:	e7fe      	b.n	801a472 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801a474:	683a      	ldr	r2, [r7, #0]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d90a      	bls.n	801a492 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a480:	f383 8811 	msr	BASEPRI, r3
 801a484:	f3bf 8f6f 	isb	sy
 801a488:	f3bf 8f4f 	dsb	sy
 801a48c:	60fb      	str	r3, [r7, #12]
}
 801a48e:	bf00      	nop
 801a490:	e7fe      	b.n	801a490 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801a492:	2202      	movs	r2, #2
 801a494:	2100      	movs	r1, #0
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f7ff ff45 	bl	801a326 <xQueueGenericCreate>
 801a49c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801a49e:	697b      	ldr	r3, [r7, #20]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d002      	beq.n	801a4aa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801a4a4:	697b      	ldr	r3, [r7, #20]
 801a4a6:	683a      	ldr	r2, [r7, #0]
 801a4a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801a4aa:	697b      	ldr	r3, [r7, #20]
	}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3718      	adds	r7, #24
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}

0801a4b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b08e      	sub	sp, #56	; 0x38
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	60f8      	str	r0, [r7, #12]
 801a4bc:	60b9      	str	r1, [r7, #8]
 801a4be:	607a      	str	r2, [r7, #4]
 801a4c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d10a      	bne.n	801a4e6 <xQueueGenericSend+0x32>
	__asm volatile
 801a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d4:	f383 8811 	msr	BASEPRI, r3
 801a4d8:	f3bf 8f6f 	isb	sy
 801a4dc:	f3bf 8f4f 	dsb	sy
 801a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a4e2:	bf00      	nop
 801a4e4:	e7fe      	b.n	801a4e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a4e6:	68bb      	ldr	r3, [r7, #8]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d103      	bne.n	801a4f4 <xQueueGenericSend+0x40>
 801a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d101      	bne.n	801a4f8 <xQueueGenericSend+0x44>
 801a4f4:	2301      	movs	r3, #1
 801a4f6:	e000      	b.n	801a4fa <xQueueGenericSend+0x46>
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d10a      	bne.n	801a514 <xQueueGenericSend+0x60>
	__asm volatile
 801a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a502:	f383 8811 	msr	BASEPRI, r3
 801a506:	f3bf 8f6f 	isb	sy
 801a50a:	f3bf 8f4f 	dsb	sy
 801a50e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a510:	bf00      	nop
 801a512:	e7fe      	b.n	801a512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a514:	683b      	ldr	r3, [r7, #0]
 801a516:	2b02      	cmp	r3, #2
 801a518:	d103      	bne.n	801a522 <xQueueGenericSend+0x6e>
 801a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a51e:	2b01      	cmp	r3, #1
 801a520:	d101      	bne.n	801a526 <xQueueGenericSend+0x72>
 801a522:	2301      	movs	r3, #1
 801a524:	e000      	b.n	801a528 <xQueueGenericSend+0x74>
 801a526:	2300      	movs	r3, #0
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d10a      	bne.n	801a542 <xQueueGenericSend+0x8e>
	__asm volatile
 801a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a530:	f383 8811 	msr	BASEPRI, r3
 801a534:	f3bf 8f6f 	isb	sy
 801a538:	f3bf 8f4f 	dsb	sy
 801a53c:	623b      	str	r3, [r7, #32]
}
 801a53e:	bf00      	nop
 801a540:	e7fe      	b.n	801a540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a542:	f001 fb43 	bl	801bbcc <xTaskGetSchedulerState>
 801a546:	4603      	mov	r3, r0
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d102      	bne.n	801a552 <xQueueGenericSend+0x9e>
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d101      	bne.n	801a556 <xQueueGenericSend+0xa2>
 801a552:	2301      	movs	r3, #1
 801a554:	e000      	b.n	801a558 <xQueueGenericSend+0xa4>
 801a556:	2300      	movs	r3, #0
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d10a      	bne.n	801a572 <xQueueGenericSend+0xbe>
	__asm volatile
 801a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a560:	f383 8811 	msr	BASEPRI, r3
 801a564:	f3bf 8f6f 	isb	sy
 801a568:	f3bf 8f4f 	dsb	sy
 801a56c:	61fb      	str	r3, [r7, #28]
}
 801a56e:	bf00      	nop
 801a570:	e7fe      	b.n	801a570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a572:	f002 f987 	bl	801c884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a57e:	429a      	cmp	r2, r3
 801a580:	d302      	bcc.n	801a588 <xQueueGenericSend+0xd4>
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	2b02      	cmp	r3, #2
 801a586:	d112      	bne.n	801a5ae <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a588:	683a      	ldr	r2, [r7, #0]
 801a58a:	68b9      	ldr	r1, [r7, #8]
 801a58c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a58e:	f000 fbae 	bl	801acee <prvCopyDataToQueue>
 801a592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d004      	beq.n	801a5a6 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a59e:	3324      	adds	r3, #36	; 0x24
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f001 f95b 	bl	801b85c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a5a6:	f002 f99d 	bl	801c8e4 <vPortExitCritical>
				return pdPASS;
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	e062      	b.n	801a674 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d103      	bne.n	801a5bc <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a5b4:	f002 f996 	bl	801c8e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	e05b      	b.n	801a674 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d106      	bne.n	801a5d0 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a5c2:	f107 0314 	add.w	r3, r7, #20
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	f001 f9ac 	bl	801b924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a5d0:	f002 f988 	bl	801c8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a5d4:	f000 ff50 	bl	801b478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a5d8:	f002 f954 	bl	801c884 <vPortEnterCritical>
 801a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a5e2:	b25b      	sxtb	r3, r3
 801a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5e8:	d103      	bne.n	801a5f2 <xQueueGenericSend+0x13e>
 801a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a5f8:	b25b      	sxtb	r3, r3
 801a5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5fe:	d103      	bne.n	801a608 <xQueueGenericSend+0x154>
 801a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a602:	2200      	movs	r2, #0
 801a604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a608:	f002 f96c 	bl	801c8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a60c:	1d3a      	adds	r2, r7, #4
 801a60e:	f107 0314 	add.w	r3, r7, #20
 801a612:	4611      	mov	r1, r2
 801a614:	4618      	mov	r0, r3
 801a616:	f001 f99b 	bl	801b950 <xTaskCheckForTimeOut>
 801a61a:	4603      	mov	r3, r0
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d123      	bne.n	801a668 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a622:	f000 fc5c 	bl	801aede <prvIsQueueFull>
 801a626:	4603      	mov	r3, r0
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d017      	beq.n	801a65c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62e:	3310      	adds	r3, #16
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	4611      	mov	r1, r2
 801a634:	4618      	mov	r0, r3
 801a636:	f001 f8c1 	bl	801b7bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a63c:	f000 fbe7 	bl	801ae0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a640:	f000 ff28 	bl	801b494 <xTaskResumeAll>
 801a644:	4603      	mov	r3, r0
 801a646:	2b00      	cmp	r3, #0
 801a648:	d193      	bne.n	801a572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a64a:	4b0c      	ldr	r3, [pc, #48]	; (801a67c <xQueueGenericSend+0x1c8>)
 801a64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a650:	601a      	str	r2, [r3, #0]
 801a652:	f3bf 8f4f 	dsb	sy
 801a656:	f3bf 8f6f 	isb	sy
 801a65a:	e78a      	b.n	801a572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a65e:	f000 fbd6 	bl	801ae0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a662:	f000 ff17 	bl	801b494 <xTaskResumeAll>
 801a666:	e784      	b.n	801a572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a66a:	f000 fbd0 	bl	801ae0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a66e:	f000 ff11 	bl	801b494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a674:	4618      	mov	r0, r3
 801a676:	3738      	adds	r7, #56	; 0x38
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	e000ed04 	.word	0xe000ed04

0801a680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b090      	sub	sp, #64	; 0x40
 801a684:	af00      	add	r7, sp, #0
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	607a      	str	r2, [r7, #4]
 801a68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a694:	2b00      	cmp	r3, #0
 801a696:	d10a      	bne.n	801a6ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a69c:	f383 8811 	msr	BASEPRI, r3
 801a6a0:	f3bf 8f6f 	isb	sy
 801a6a4:	f3bf 8f4f 	dsb	sy
 801a6a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a6aa:	bf00      	nop
 801a6ac:	e7fe      	b.n	801a6ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a6ae:	68bb      	ldr	r3, [r7, #8]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d103      	bne.n	801a6bc <xQueueGenericSendFromISR+0x3c>
 801a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d101      	bne.n	801a6c0 <xQueueGenericSendFromISR+0x40>
 801a6bc:	2301      	movs	r3, #1
 801a6be:	e000      	b.n	801a6c2 <xQueueGenericSendFromISR+0x42>
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d10a      	bne.n	801a6dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6ca:	f383 8811 	msr	BASEPRI, r3
 801a6ce:	f3bf 8f6f 	isb	sy
 801a6d2:	f3bf 8f4f 	dsb	sy
 801a6d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a6d8:	bf00      	nop
 801a6da:	e7fe      	b.n	801a6da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	2b02      	cmp	r3, #2
 801a6e0:	d103      	bne.n	801a6ea <xQueueGenericSendFromISR+0x6a>
 801a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d101      	bne.n	801a6ee <xQueueGenericSendFromISR+0x6e>
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	e000      	b.n	801a6f0 <xQueueGenericSendFromISR+0x70>
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d10a      	bne.n	801a70a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6f8:	f383 8811 	msr	BASEPRI, r3
 801a6fc:	f3bf 8f6f 	isb	sy
 801a700:	f3bf 8f4f 	dsb	sy
 801a704:	623b      	str	r3, [r7, #32]
}
 801a706:	bf00      	nop
 801a708:	e7fe      	b.n	801a708 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a70a:	f002 f99d 	bl	801ca48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a70e:	f3ef 8211 	mrs	r2, BASEPRI
 801a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a716:	f383 8811 	msr	BASEPRI, r3
 801a71a:	f3bf 8f6f 	isb	sy
 801a71e:	f3bf 8f4f 	dsb	sy
 801a722:	61fa      	str	r2, [r7, #28]
 801a724:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a726:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a728:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a732:	429a      	cmp	r2, r3
 801a734:	d302      	bcc.n	801a73c <xQueueGenericSendFromISR+0xbc>
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	2b02      	cmp	r3, #2
 801a73a:	d12f      	bne.n	801a79c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a73e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a74c:	683a      	ldr	r2, [r7, #0]
 801a74e:	68b9      	ldr	r1, [r7, #8]
 801a750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a752:	f000 facc 	bl	801acee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a75e:	d112      	bne.n	801a786 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a764:	2b00      	cmp	r3, #0
 801a766:	d016      	beq.n	801a796 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a76a:	3324      	adds	r3, #36	; 0x24
 801a76c:	4618      	mov	r0, r3
 801a76e:	f001 f875 	bl	801b85c <xTaskRemoveFromEventList>
 801a772:	4603      	mov	r3, r0
 801a774:	2b00      	cmp	r3, #0
 801a776:	d00e      	beq.n	801a796 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d00b      	beq.n	801a796 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2201      	movs	r2, #1
 801a782:	601a      	str	r2, [r3, #0]
 801a784:	e007      	b.n	801a796 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a78a:	3301      	adds	r3, #1
 801a78c:	b2db      	uxtb	r3, r3
 801a78e:	b25a      	sxtb	r2, r3
 801a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a796:	2301      	movs	r3, #1
 801a798:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a79a:	e001      	b.n	801a7a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a79c:	2300      	movs	r3, #0
 801a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a7aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	3740      	adds	r7, #64	; 0x40
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd80      	pop	{r7, pc}

0801a7b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a7b6:	b580      	push	{r7, lr}
 801a7b8:	b08e      	sub	sp, #56	; 0x38
 801a7ba:	af00      	add	r7, sp, #0
 801a7bc:	6078      	str	r0, [r7, #4]
 801a7be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d10a      	bne.n	801a7e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ce:	f383 8811 	msr	BASEPRI, r3
 801a7d2:	f3bf 8f6f 	isb	sy
 801a7d6:	f3bf 8f4f 	dsb	sy
 801a7da:	623b      	str	r3, [r7, #32]
}
 801a7dc:	bf00      	nop
 801a7de:	e7fe      	b.n	801a7de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d00a      	beq.n	801a7fe <xQueueGiveFromISR+0x48>
	__asm volatile
 801a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ec:	f383 8811 	msr	BASEPRI, r3
 801a7f0:	f3bf 8f6f 	isb	sy
 801a7f4:	f3bf 8f4f 	dsb	sy
 801a7f8:	61fb      	str	r3, [r7, #28]
}
 801a7fa:	bf00      	nop
 801a7fc:	e7fe      	b.n	801a7fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d103      	bne.n	801a80e <xQueueGiveFromISR+0x58>
 801a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a808:	689b      	ldr	r3, [r3, #8]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d101      	bne.n	801a812 <xQueueGiveFromISR+0x5c>
 801a80e:	2301      	movs	r3, #1
 801a810:	e000      	b.n	801a814 <xQueueGiveFromISR+0x5e>
 801a812:	2300      	movs	r3, #0
 801a814:	2b00      	cmp	r3, #0
 801a816:	d10a      	bne.n	801a82e <xQueueGiveFromISR+0x78>
	__asm volatile
 801a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a81c:	f383 8811 	msr	BASEPRI, r3
 801a820:	f3bf 8f6f 	isb	sy
 801a824:	f3bf 8f4f 	dsb	sy
 801a828:	61bb      	str	r3, [r7, #24]
}
 801a82a:	bf00      	nop
 801a82c:	e7fe      	b.n	801a82c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a82e:	f002 f90b 	bl	801ca48 <vPortValidateInterruptPriority>
	__asm volatile
 801a832:	f3ef 8211 	mrs	r2, BASEPRI
 801a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a83a:	f383 8811 	msr	BASEPRI, r3
 801a83e:	f3bf 8f6f 	isb	sy
 801a842:	f3bf 8f4f 	dsb	sy
 801a846:	617a      	str	r2, [r7, #20]
 801a848:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a84a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a84c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a852:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d22b      	bcs.n	801a8b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86a:	1c5a      	adds	r2, r3, #1
 801a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a86e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a878:	d112      	bne.n	801a8a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d016      	beq.n	801a8b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a884:	3324      	adds	r3, #36	; 0x24
 801a886:	4618      	mov	r0, r3
 801a888:	f000 ffe8 	bl	801b85c <xTaskRemoveFromEventList>
 801a88c:	4603      	mov	r3, r0
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d00e      	beq.n	801a8b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	2b00      	cmp	r3, #0
 801a896:	d00b      	beq.n	801a8b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a898:	683b      	ldr	r3, [r7, #0]
 801a89a:	2201      	movs	r2, #1
 801a89c:	601a      	str	r2, [r3, #0]
 801a89e:	e007      	b.n	801a8b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a8a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8a4:	3301      	adds	r3, #1
 801a8a6:	b2db      	uxtb	r3, r3
 801a8a8:	b25a      	sxtb	r2, r3
 801a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	637b      	str	r3, [r7, #52]	; 0x34
 801a8b4:	e001      	b.n	801a8ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	637b      	str	r3, [r7, #52]	; 0x34
 801a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	f383 8811 	msr	BASEPRI, r3
}
 801a8c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	3738      	adds	r7, #56	; 0x38
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}

0801a8d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b08c      	sub	sp, #48	; 0x30
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	60f8      	str	r0, [r7, #12]
 801a8d8:	60b9      	str	r1, [r7, #8]
 801a8da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a8dc:	2300      	movs	r3, #0
 801a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d10a      	bne.n	801a900 <xQueueReceive+0x30>
	__asm volatile
 801a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ee:	f383 8811 	msr	BASEPRI, r3
 801a8f2:	f3bf 8f6f 	isb	sy
 801a8f6:	f3bf 8f4f 	dsb	sy
 801a8fa:	623b      	str	r3, [r7, #32]
}
 801a8fc:	bf00      	nop
 801a8fe:	e7fe      	b.n	801a8fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d103      	bne.n	801a90e <xQueueReceive+0x3e>
 801a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d101      	bne.n	801a912 <xQueueReceive+0x42>
 801a90e:	2301      	movs	r3, #1
 801a910:	e000      	b.n	801a914 <xQueueReceive+0x44>
 801a912:	2300      	movs	r3, #0
 801a914:	2b00      	cmp	r3, #0
 801a916:	d10a      	bne.n	801a92e <xQueueReceive+0x5e>
	__asm volatile
 801a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a91c:	f383 8811 	msr	BASEPRI, r3
 801a920:	f3bf 8f6f 	isb	sy
 801a924:	f3bf 8f4f 	dsb	sy
 801a928:	61fb      	str	r3, [r7, #28]
}
 801a92a:	bf00      	nop
 801a92c:	e7fe      	b.n	801a92c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a92e:	f001 f94d 	bl	801bbcc <xTaskGetSchedulerState>
 801a932:	4603      	mov	r3, r0
 801a934:	2b00      	cmp	r3, #0
 801a936:	d102      	bne.n	801a93e <xQueueReceive+0x6e>
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d101      	bne.n	801a942 <xQueueReceive+0x72>
 801a93e:	2301      	movs	r3, #1
 801a940:	e000      	b.n	801a944 <xQueueReceive+0x74>
 801a942:	2300      	movs	r3, #0
 801a944:	2b00      	cmp	r3, #0
 801a946:	d10a      	bne.n	801a95e <xQueueReceive+0x8e>
	__asm volatile
 801a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a94c:	f383 8811 	msr	BASEPRI, r3
 801a950:	f3bf 8f6f 	isb	sy
 801a954:	f3bf 8f4f 	dsb	sy
 801a958:	61bb      	str	r3, [r7, #24]
}
 801a95a:	bf00      	nop
 801a95c:	e7fe      	b.n	801a95c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a95e:	f001 ff91 	bl	801c884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d014      	beq.n	801a998 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a96e:	68b9      	ldr	r1, [r7, #8]
 801a970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a972:	f000 fa26 	bl	801adc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a978:	1e5a      	subs	r2, r3, #1
 801a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a97c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a980:	691b      	ldr	r3, [r3, #16]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d004      	beq.n	801a990 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a988:	3310      	adds	r3, #16
 801a98a:	4618      	mov	r0, r3
 801a98c:	f000 ff66 	bl	801b85c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a990:	f001 ffa8 	bl	801c8e4 <vPortExitCritical>
				return pdPASS;
 801a994:	2301      	movs	r3, #1
 801a996:	e069      	b.n	801aa6c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d103      	bne.n	801a9a6 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a99e:	f001 ffa1 	bl	801c8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	e062      	b.n	801aa6c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d106      	bne.n	801a9ba <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a9ac:	f107 0310 	add.w	r3, r7, #16
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	f000 ffb7 	bl	801b924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a9ba:	f001 ff93 	bl	801c8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a9be:	f000 fd5b 	bl	801b478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a9c2:	f001 ff5f 	bl	801c884 <vPortEnterCritical>
 801a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a9cc:	b25b      	sxtb	r3, r3
 801a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9d2:	d103      	bne.n	801a9dc <xQueueReceive+0x10c>
 801a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a9e2:	b25b      	sxtb	r3, r3
 801a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9e8:	d103      	bne.n	801a9f2 <xQueueReceive+0x122>
 801a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a9f2:	f001 ff77 	bl	801c8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a9f6:	1d3a      	adds	r2, r7, #4
 801a9f8:	f107 0310 	add.w	r3, r7, #16
 801a9fc:	4611      	mov	r1, r2
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f000 ffa6 	bl	801b950 <xTaskCheckForTimeOut>
 801aa04:	4603      	mov	r3, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d123      	bne.n	801aa52 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa0c:	f000 fa51 	bl	801aeb2 <prvIsQueueEmpty>
 801aa10:	4603      	mov	r3, r0
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d017      	beq.n	801aa46 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa18:	3324      	adds	r3, #36	; 0x24
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	4611      	mov	r1, r2
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f000 fecc 	bl	801b7bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801aa24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa26:	f000 f9f2 	bl	801ae0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801aa2a:	f000 fd33 	bl	801b494 <xTaskResumeAll>
 801aa2e:	4603      	mov	r3, r0
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d194      	bne.n	801a95e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801aa34:	4b0f      	ldr	r3, [pc, #60]	; (801aa74 <xQueueReceive+0x1a4>)
 801aa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa3a:	601a      	str	r2, [r3, #0]
 801aa3c:	f3bf 8f4f 	dsb	sy
 801aa40:	f3bf 8f6f 	isb	sy
 801aa44:	e78b      	b.n	801a95e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801aa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa48:	f000 f9e1 	bl	801ae0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801aa4c:	f000 fd22 	bl	801b494 <xTaskResumeAll>
 801aa50:	e785      	b.n	801a95e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801aa52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa54:	f000 f9db 	bl	801ae0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801aa58:	f000 fd1c 	bl	801b494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801aa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa5e:	f000 fa28 	bl	801aeb2 <prvIsQueueEmpty>
 801aa62:	4603      	mov	r3, r0
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	f43f af7a 	beq.w	801a95e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801aa6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	3730      	adds	r7, #48	; 0x30
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	e000ed04 	.word	0xe000ed04

0801aa78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b08e      	sub	sp, #56	; 0x38
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801aa82:	2300      	movs	r3, #0
 801aa84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d10a      	bne.n	801aaaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 801aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa98:	f383 8811 	msr	BASEPRI, r3
 801aa9c:	f3bf 8f6f 	isb	sy
 801aaa0:	f3bf 8f4f 	dsb	sy
 801aaa4:	623b      	str	r3, [r7, #32]
}
 801aaa6:	bf00      	nop
 801aaa8:	e7fe      	b.n	801aaa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d00a      	beq.n	801aac8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aab6:	f383 8811 	msr	BASEPRI, r3
 801aaba:	f3bf 8f6f 	isb	sy
 801aabe:	f3bf 8f4f 	dsb	sy
 801aac2:	61fb      	str	r3, [r7, #28]
}
 801aac4:	bf00      	nop
 801aac6:	e7fe      	b.n	801aac6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801aac8:	f001 f880 	bl	801bbcc <xTaskGetSchedulerState>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d102      	bne.n	801aad8 <xQueueSemaphoreTake+0x60>
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d101      	bne.n	801aadc <xQueueSemaphoreTake+0x64>
 801aad8:	2301      	movs	r3, #1
 801aada:	e000      	b.n	801aade <xQueueSemaphoreTake+0x66>
 801aadc:	2300      	movs	r3, #0
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d10a      	bne.n	801aaf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aae6:	f383 8811 	msr	BASEPRI, r3
 801aaea:	f3bf 8f6f 	isb	sy
 801aaee:	f3bf 8f4f 	dsb	sy
 801aaf2:	61bb      	str	r3, [r7, #24]
}
 801aaf4:	bf00      	nop
 801aaf6:	e7fe      	b.n	801aaf6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801aaf8:	f001 fec4 	bl	801c884 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d019      	beq.n	801ab3c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab0a:	1e5a      	subs	r2, r3, #1
 801ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d104      	bne.n	801ab22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801ab18:	f001 f9ce 	bl	801beb8 <pvTaskIncrementMutexHeldCount>
 801ab1c:	4602      	mov	r2, r0
 801ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab24:	691b      	ldr	r3, [r3, #16]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d004      	beq.n	801ab34 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2c:	3310      	adds	r3, #16
 801ab2e:	4618      	mov	r0, r3
 801ab30:	f000 fe94 	bl	801b85c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801ab34:	f001 fed6 	bl	801c8e4 <vPortExitCritical>
				return pdPASS;
 801ab38:	2301      	movs	r3, #1
 801ab3a:	e097      	b.n	801ac6c <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d111      	bne.n	801ab66 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	d00a      	beq.n	801ab5e <xQueueSemaphoreTake+0xe6>
	__asm volatile
 801ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab4c:	f383 8811 	msr	BASEPRI, r3
 801ab50:	f3bf 8f6f 	isb	sy
 801ab54:	f3bf 8f4f 	dsb	sy
 801ab58:	617b      	str	r3, [r7, #20]
}
 801ab5a:	bf00      	nop
 801ab5c:	e7fe      	b.n	801ab5c <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801ab5e:	f001 fec1 	bl	801c8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801ab62:	2300      	movs	r3, #0
 801ab64:	e082      	b.n	801ac6c <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d106      	bne.n	801ab7a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ab6c:	f107 030c 	add.w	r3, r7, #12
 801ab70:	4618      	mov	r0, r3
 801ab72:	f000 fed7 	bl	801b924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ab76:	2301      	movs	r3, #1
 801ab78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ab7a:	f001 feb3 	bl	801c8e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ab7e:	f000 fc7b 	bl	801b478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ab82:	f001 fe7f 	bl	801c884 <vPortEnterCritical>
 801ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ab8c:	b25b      	sxtb	r3, r3
 801ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab92:	d103      	bne.n	801ab9c <xQueueSemaphoreTake+0x124>
 801ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab96:	2200      	movs	r2, #0
 801ab98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aba2:	b25b      	sxtb	r3, r3
 801aba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aba8:	d103      	bne.n	801abb2 <xQueueSemaphoreTake+0x13a>
 801abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abac:	2200      	movs	r2, #0
 801abae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801abb2:	f001 fe97 	bl	801c8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801abb6:	463a      	mov	r2, r7
 801abb8:	f107 030c 	add.w	r3, r7, #12
 801abbc:	4611      	mov	r1, r2
 801abbe:	4618      	mov	r0, r3
 801abc0:	f000 fec6 	bl	801b950 <xTaskCheckForTimeOut>
 801abc4:	4603      	mov	r3, r0
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d132      	bne.n	801ac30 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801abca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801abcc:	f000 f971 	bl	801aeb2 <prvIsQueueEmpty>
 801abd0:	4603      	mov	r3, r0
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d026      	beq.n	801ac24 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d109      	bne.n	801abf2 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 801abde:	f001 fe51 	bl	801c884 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abe4:	689b      	ldr	r3, [r3, #8]
 801abe6:	4618      	mov	r0, r3
 801abe8:	f001 f80e 	bl	801bc08 <xTaskPriorityInherit>
 801abec:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801abee:	f001 fe79 	bl	801c8e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abf4:	3324      	adds	r3, #36	; 0x24
 801abf6:	683a      	ldr	r2, [r7, #0]
 801abf8:	4611      	mov	r1, r2
 801abfa:	4618      	mov	r0, r3
 801abfc:	f000 fdde 	bl	801b7bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801ac00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac02:	f000 f904 	bl	801ae0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801ac06:	f000 fc45 	bl	801b494 <xTaskResumeAll>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	f47f af73 	bne.w	801aaf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801ac12:	4b18      	ldr	r3, [pc, #96]	; (801ac74 <xQueueSemaphoreTake+0x1fc>)
 801ac14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac18:	601a      	str	r2, [r3, #0]
 801ac1a:	f3bf 8f4f 	dsb	sy
 801ac1e:	f3bf 8f6f 	isb	sy
 801ac22:	e769      	b.n	801aaf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801ac24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac26:	f000 f8f2 	bl	801ae0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801ac2a:	f000 fc33 	bl	801b494 <xTaskResumeAll>
 801ac2e:	e763      	b.n	801aaf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801ac30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac32:	f000 f8ec 	bl	801ae0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801ac36:	f000 fc2d 	bl	801b494 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801ac3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac3c:	f000 f939 	bl	801aeb2 <prvIsQueueEmpty>
 801ac40:	4603      	mov	r3, r0
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	f43f af58 	beq.w	801aaf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d00d      	beq.n	801ac6a <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801ac4e:	f001 fe19 	bl	801c884 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801ac52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ac54:	f000 f833 	bl	801acbe <prvGetDisinheritPriorityAfterTimeout>
 801ac58:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5c:	689b      	ldr	r3, [r3, #8]
 801ac5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ac60:	4618      	mov	r0, r3
 801ac62:	f001 f8a7 	bl	801bdb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801ac66:	f001 fe3d 	bl	801c8e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801ac6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3738      	adds	r7, #56	; 0x38
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}
 801ac74:	e000ed04 	.word	0xe000ed04

0801ac78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d10a      	bne.n	801aca0 <vQueueDelete+0x28>
	__asm volatile
 801ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac8e:	f383 8811 	msr	BASEPRI, r3
 801ac92:	f3bf 8f6f 	isb	sy
 801ac96:	f3bf 8f4f 	dsb	sy
 801ac9a:	60bb      	str	r3, [r7, #8]
}
 801ac9c:	bf00      	nop
 801ac9e:	e7fe      	b.n	801ac9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801aca0:	68f8      	ldr	r0, [r7, #12]
 801aca2:	f000 f95f 	bl	801af64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801acac:	2b00      	cmp	r3, #0
 801acae:	d102      	bne.n	801acb6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801acb0:	68f8      	ldr	r0, [r7, #12]
 801acb2:	f001 ffd5 	bl	801cc60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801acb6:	bf00      	nop
 801acb8:	3710      	adds	r7, #16
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}

0801acbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801acbe:	b480      	push	{r7}
 801acc0:	b085      	sub	sp, #20
 801acc2:	af00      	add	r7, sp, #0
 801acc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acca:	2b00      	cmp	r3, #0
 801accc:	d006      	beq.n	801acdc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801acd8:	60fb      	str	r3, [r7, #12]
 801acda:	e001      	b.n	801ace0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801acdc:	2300      	movs	r3, #0
 801acde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801ace0:	68fb      	ldr	r3, [r7, #12]
	}
 801ace2:	4618      	mov	r0, r3
 801ace4:	3714      	adds	r7, #20
 801ace6:	46bd      	mov	sp, r7
 801ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acec:	4770      	bx	lr

0801acee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801acee:	b580      	push	{r7, lr}
 801acf0:	b086      	sub	sp, #24
 801acf2:	af00      	add	r7, sp, #0
 801acf4:	60f8      	str	r0, [r7, #12]
 801acf6:	60b9      	str	r1, [r7, #8]
 801acf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801acfa:	2300      	movs	r3, #0
 801acfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d10d      	bne.n	801ad28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d14d      	bne.n	801adb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	689b      	ldr	r3, [r3, #8]
 801ad18:	4618      	mov	r0, r3
 801ad1a:	f000 ffdd 	bl	801bcd8 <xTaskPriorityDisinherit>
 801ad1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	2200      	movs	r2, #0
 801ad24:	609a      	str	r2, [r3, #8]
 801ad26:	e043      	b.n	801adb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d119      	bne.n	801ad62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	6858      	ldr	r0, [r3, #4]
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad36:	461a      	mov	r2, r3
 801ad38:	68b9      	ldr	r1, [r7, #8]
 801ad3a:	f003 ff7a 	bl	801ec32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	685a      	ldr	r2, [r3, #4]
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad46:	441a      	add	r2, r3
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	685a      	ldr	r2, [r3, #4]
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	689b      	ldr	r3, [r3, #8]
 801ad54:	429a      	cmp	r2, r3
 801ad56:	d32b      	bcc.n	801adb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	681a      	ldr	r2, [r3, #0]
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	605a      	str	r2, [r3, #4]
 801ad60:	e026      	b.n	801adb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	68d8      	ldr	r0, [r3, #12]
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad6a:	461a      	mov	r2, r3
 801ad6c:	68b9      	ldr	r1, [r7, #8]
 801ad6e:	f003 ff60 	bl	801ec32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	68da      	ldr	r2, [r3, #12]
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad7a:	425b      	negs	r3, r3
 801ad7c:	441a      	add	r2, r3
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	68da      	ldr	r2, [r3, #12]
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d207      	bcs.n	801ad9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	689a      	ldr	r2, [r3, #8]
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad96:	425b      	negs	r3, r3
 801ad98:	441a      	add	r2, r3
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	2b02      	cmp	r3, #2
 801ada2:	d105      	bne.n	801adb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ada4:	693b      	ldr	r3, [r7, #16]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d002      	beq.n	801adb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	3b01      	subs	r3, #1
 801adae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801adb0:	693b      	ldr	r3, [r7, #16]
 801adb2:	1c5a      	adds	r2, r3, #1
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801adb8:	697b      	ldr	r3, [r7, #20]
}
 801adba:	4618      	mov	r0, r3
 801adbc:	3718      	adds	r7, #24
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}

0801adc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801adc2:	b580      	push	{r7, lr}
 801adc4:	b082      	sub	sp, #8
 801adc6:	af00      	add	r7, sp, #0
 801adc8:	6078      	str	r0, [r7, #4]
 801adca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801add0:	2b00      	cmp	r3, #0
 801add2:	d018      	beq.n	801ae06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	68da      	ldr	r2, [r3, #12]
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801addc:	441a      	add	r2, r3
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	68da      	ldr	r2, [r3, #12]
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	689b      	ldr	r3, [r3, #8]
 801adea:	429a      	cmp	r2, r3
 801adec:	d303      	bcc.n	801adf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681a      	ldr	r2, [r3, #0]
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	68d9      	ldr	r1, [r3, #12]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801adfe:	461a      	mov	r2, r3
 801ae00:	6838      	ldr	r0, [r7, #0]
 801ae02:	f003 ff16 	bl	801ec32 <memcpy>
	}
}
 801ae06:	bf00      	nop
 801ae08:	3708      	adds	r7, #8
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	bd80      	pop	{r7, pc}

0801ae0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801ae0e:	b580      	push	{r7, lr}
 801ae10:	b084      	sub	sp, #16
 801ae12:	af00      	add	r7, sp, #0
 801ae14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801ae16:	f001 fd35 	bl	801c884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ae20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ae22:	e011      	b.n	801ae48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d012      	beq.n	801ae52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	3324      	adds	r3, #36	; 0x24
 801ae30:	4618      	mov	r0, r3
 801ae32:	f000 fd13 	bl	801b85c <xTaskRemoveFromEventList>
 801ae36:	4603      	mov	r3, r0
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d001      	beq.n	801ae40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ae3c:	f000 fdea 	bl	801ba14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ae40:	7bfb      	ldrb	r3, [r7, #15]
 801ae42:	3b01      	subs	r3, #1
 801ae44:	b2db      	uxtb	r3, r3
 801ae46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ae48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	dce9      	bgt.n	801ae24 <prvUnlockQueue+0x16>
 801ae50:	e000      	b.n	801ae54 <prvUnlockQueue+0x46>
					break;
 801ae52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	22ff      	movs	r2, #255	; 0xff
 801ae58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801ae5c:	f001 fd42 	bl	801c8e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ae60:	f001 fd10 	bl	801c884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ae6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ae6c:	e011      	b.n	801ae92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	691b      	ldr	r3, [r3, #16]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d012      	beq.n	801ae9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	3310      	adds	r3, #16
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f000 fcee 	bl	801b85c <xTaskRemoveFromEventList>
 801ae80:	4603      	mov	r3, r0
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d001      	beq.n	801ae8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ae86:	f000 fdc5 	bl	801ba14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ae8a:	7bbb      	ldrb	r3, [r7, #14]
 801ae8c:	3b01      	subs	r3, #1
 801ae8e:	b2db      	uxtb	r3, r3
 801ae90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ae92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	dce9      	bgt.n	801ae6e <prvUnlockQueue+0x60>
 801ae9a:	e000      	b.n	801ae9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ae9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	22ff      	movs	r2, #255	; 0xff
 801aea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801aea6:	f001 fd1d 	bl	801c8e4 <vPortExitCritical>
}
 801aeaa:	bf00      	nop
 801aeac:	3710      	adds	r7, #16
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}

0801aeb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801aeb2:	b580      	push	{r7, lr}
 801aeb4:	b084      	sub	sp, #16
 801aeb6:	af00      	add	r7, sp, #0
 801aeb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aeba:	f001 fce3 	bl	801c884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d102      	bne.n	801aecc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801aec6:	2301      	movs	r3, #1
 801aec8:	60fb      	str	r3, [r7, #12]
 801aeca:	e001      	b.n	801aed0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801aecc:	2300      	movs	r3, #0
 801aece:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801aed0:	f001 fd08 	bl	801c8e4 <vPortExitCritical>

	return xReturn;
 801aed4:	68fb      	ldr	r3, [r7, #12]
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3710      	adds	r7, #16
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}

0801aede <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801aede:	b580      	push	{r7, lr}
 801aee0:	b084      	sub	sp, #16
 801aee2:	af00      	add	r7, sp, #0
 801aee4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aee6:	f001 fccd 	bl	801c884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aef2:	429a      	cmp	r2, r3
 801aef4:	d102      	bne.n	801aefc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801aef6:	2301      	movs	r3, #1
 801aef8:	60fb      	str	r3, [r7, #12]
 801aefa:	e001      	b.n	801af00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801aefc:	2300      	movs	r3, #0
 801aefe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801af00:	f001 fcf0 	bl	801c8e4 <vPortExitCritical>

	return xReturn;
 801af04:	68fb      	ldr	r3, [r7, #12]
}
 801af06:	4618      	mov	r0, r3
 801af08:	3710      	adds	r7, #16
 801af0a:	46bd      	mov	sp, r7
 801af0c:	bd80      	pop	{r7, pc}
	...

0801af10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801af10:	b480      	push	{r7}
 801af12:	b085      	sub	sp, #20
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
 801af18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801af1a:	2300      	movs	r3, #0
 801af1c:	60fb      	str	r3, [r7, #12]
 801af1e:	e014      	b.n	801af4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801af20:	4a0f      	ldr	r2, [pc, #60]	; (801af60 <vQueueAddToRegistry+0x50>)
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d10b      	bne.n	801af44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801af2c:	490c      	ldr	r1, [pc, #48]	; (801af60 <vQueueAddToRegistry+0x50>)
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	683a      	ldr	r2, [r7, #0]
 801af32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801af36:	4a0a      	ldr	r2, [pc, #40]	; (801af60 <vQueueAddToRegistry+0x50>)
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	00db      	lsls	r3, r3, #3
 801af3c:	4413      	add	r3, r2
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801af42:	e006      	b.n	801af52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	3301      	adds	r3, #1
 801af48:	60fb      	str	r3, [r7, #12]
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	2b07      	cmp	r3, #7
 801af4e:	d9e7      	bls.n	801af20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801af50:	bf00      	nop
 801af52:	bf00      	nop
 801af54:	3714      	adds	r7, #20
 801af56:	46bd      	mov	sp, r7
 801af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5c:	4770      	bx	lr
 801af5e:	bf00      	nop
 801af60:	24005e78 	.word	0x24005e78

0801af64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801af64:	b480      	push	{r7}
 801af66:	b085      	sub	sp, #20
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801af6c:	2300      	movs	r3, #0
 801af6e:	60fb      	str	r3, [r7, #12]
 801af70:	e016      	b.n	801afa0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801af72:	4a10      	ldr	r2, [pc, #64]	; (801afb4 <vQueueUnregisterQueue+0x50>)
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	00db      	lsls	r3, r3, #3
 801af78:	4413      	add	r3, r2
 801af7a:	685b      	ldr	r3, [r3, #4]
 801af7c:	687a      	ldr	r2, [r7, #4]
 801af7e:	429a      	cmp	r2, r3
 801af80:	d10b      	bne.n	801af9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801af82:	4a0c      	ldr	r2, [pc, #48]	; (801afb4 <vQueueUnregisterQueue+0x50>)
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	2100      	movs	r1, #0
 801af88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801af8c:	4a09      	ldr	r2, [pc, #36]	; (801afb4 <vQueueUnregisterQueue+0x50>)
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	00db      	lsls	r3, r3, #3
 801af92:	4413      	add	r3, r2
 801af94:	2200      	movs	r2, #0
 801af96:	605a      	str	r2, [r3, #4]
				break;
 801af98:	e006      	b.n	801afa8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	3301      	adds	r3, #1
 801af9e:	60fb      	str	r3, [r7, #12]
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	2b07      	cmp	r3, #7
 801afa4:	d9e5      	bls.n	801af72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801afa6:	bf00      	nop
 801afa8:	bf00      	nop
 801afaa:	3714      	adds	r7, #20
 801afac:	46bd      	mov	sp, r7
 801afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb2:	4770      	bx	lr
 801afb4:	24005e78 	.word	0x24005e78

0801afb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b086      	sub	sp, #24
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	60f8      	str	r0, [r7, #12]
 801afc0:	60b9      	str	r1, [r7, #8]
 801afc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801afc8:	f001 fc5c 	bl	801c884 <vPortEnterCritical>
 801afcc:	697b      	ldr	r3, [r7, #20]
 801afce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801afd2:	b25b      	sxtb	r3, r3
 801afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afd8:	d103      	bne.n	801afe2 <vQueueWaitForMessageRestricted+0x2a>
 801afda:	697b      	ldr	r3, [r7, #20]
 801afdc:	2200      	movs	r2, #0
 801afde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801afe2:	697b      	ldr	r3, [r7, #20]
 801afe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801afe8:	b25b      	sxtb	r3, r3
 801afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afee:	d103      	bne.n	801aff8 <vQueueWaitForMessageRestricted+0x40>
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	2200      	movs	r2, #0
 801aff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aff8:	f001 fc74 	bl	801c8e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801affc:	697b      	ldr	r3, [r7, #20]
 801affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b000:	2b00      	cmp	r3, #0
 801b002:	d106      	bne.n	801b012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801b004:	697b      	ldr	r3, [r7, #20]
 801b006:	3324      	adds	r3, #36	; 0x24
 801b008:	687a      	ldr	r2, [r7, #4]
 801b00a:	68b9      	ldr	r1, [r7, #8]
 801b00c:	4618      	mov	r0, r3
 801b00e:	f000 fbf9 	bl	801b804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801b012:	6978      	ldr	r0, [r7, #20]
 801b014:	f7ff fefb 	bl	801ae0e <prvUnlockQueue>
	}
 801b018:	bf00      	nop
 801b01a:	3718      	adds	r7, #24
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801b020:	b580      	push	{r7, lr}
 801b022:	b08e      	sub	sp, #56	; 0x38
 801b024:	af04      	add	r7, sp, #16
 801b026:	60f8      	str	r0, [r7, #12]
 801b028:	60b9      	str	r1, [r7, #8]
 801b02a:	607a      	str	r2, [r7, #4]
 801b02c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b030:	2b00      	cmp	r3, #0
 801b032:	d10a      	bne.n	801b04a <xTaskCreateStatic+0x2a>
	__asm volatile
 801b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b038:	f383 8811 	msr	BASEPRI, r3
 801b03c:	f3bf 8f6f 	isb	sy
 801b040:	f3bf 8f4f 	dsb	sy
 801b044:	623b      	str	r3, [r7, #32]
}
 801b046:	bf00      	nop
 801b048:	e7fe      	b.n	801b048 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d10a      	bne.n	801b066 <xTaskCreateStatic+0x46>
	__asm volatile
 801b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b054:	f383 8811 	msr	BASEPRI, r3
 801b058:	f3bf 8f6f 	isb	sy
 801b05c:	f3bf 8f4f 	dsb	sy
 801b060:	61fb      	str	r3, [r7, #28]
}
 801b062:	bf00      	nop
 801b064:	e7fe      	b.n	801b064 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801b066:	235c      	movs	r3, #92	; 0x5c
 801b068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801b06a:	693b      	ldr	r3, [r7, #16]
 801b06c:	2b5c      	cmp	r3, #92	; 0x5c
 801b06e:	d00a      	beq.n	801b086 <xTaskCreateStatic+0x66>
	__asm volatile
 801b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b074:	f383 8811 	msr	BASEPRI, r3
 801b078:	f3bf 8f6f 	isb	sy
 801b07c:	f3bf 8f4f 	dsb	sy
 801b080:	61bb      	str	r3, [r7, #24]
}
 801b082:	bf00      	nop
 801b084:	e7fe      	b.n	801b084 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801b086:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d01e      	beq.n	801b0cc <xTaskCreateStatic+0xac>
 801b08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b090:	2b00      	cmp	r3, #0
 801b092:	d01b      	beq.n	801b0cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b09a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b09c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a0:	2202      	movs	r2, #2
 801b0a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	9303      	str	r3, [sp, #12]
 801b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ac:	9302      	str	r3, [sp, #8]
 801b0ae:	f107 0314 	add.w	r3, r7, #20
 801b0b2:	9301      	str	r3, [sp, #4]
 801b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0b6:	9300      	str	r3, [sp, #0]
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	68b9      	ldr	r1, [r7, #8]
 801b0be:	68f8      	ldr	r0, [r7, #12]
 801b0c0:	f000 f850 	bl	801b164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b0c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0c6:	f000 f8dd 	bl	801b284 <prvAddNewTaskToReadyList>
 801b0ca:	e001      	b.n	801b0d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801b0d0:	697b      	ldr	r3, [r7, #20]
	}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3728      	adds	r7, #40	; 0x28
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}

0801b0da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b0da:	b580      	push	{r7, lr}
 801b0dc:	b08c      	sub	sp, #48	; 0x30
 801b0de:	af04      	add	r7, sp, #16
 801b0e0:	60f8      	str	r0, [r7, #12]
 801b0e2:	60b9      	str	r1, [r7, #8]
 801b0e4:	603b      	str	r3, [r7, #0]
 801b0e6:	4613      	mov	r3, r2
 801b0e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b0ea:	88fb      	ldrh	r3, [r7, #6]
 801b0ec:	009b      	lsls	r3, r3, #2
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f001 fcea 	bl	801cac8 <pvPortMalloc>
 801b0f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b0f6:	697b      	ldr	r3, [r7, #20]
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d00e      	beq.n	801b11a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b0fc:	205c      	movs	r0, #92	; 0x5c
 801b0fe:	f001 fce3 	bl	801cac8 <pvPortMalloc>
 801b102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b104:	69fb      	ldr	r3, [r7, #28]
 801b106:	2b00      	cmp	r3, #0
 801b108:	d003      	beq.n	801b112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b10a:	69fb      	ldr	r3, [r7, #28]
 801b10c:	697a      	ldr	r2, [r7, #20]
 801b10e:	631a      	str	r2, [r3, #48]	; 0x30
 801b110:	e005      	b.n	801b11e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b112:	6978      	ldr	r0, [r7, #20]
 801b114:	f001 fda4 	bl	801cc60 <vPortFree>
 801b118:	e001      	b.n	801b11e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b11a:	2300      	movs	r3, #0
 801b11c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b11e:	69fb      	ldr	r3, [r7, #28]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d017      	beq.n	801b154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801b124:	69fb      	ldr	r3, [r7, #28]
 801b126:	2200      	movs	r2, #0
 801b128:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b12c:	88fa      	ldrh	r2, [r7, #6]
 801b12e:	2300      	movs	r3, #0
 801b130:	9303      	str	r3, [sp, #12]
 801b132:	69fb      	ldr	r3, [r7, #28]
 801b134:	9302      	str	r3, [sp, #8]
 801b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b138:	9301      	str	r3, [sp, #4]
 801b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b13c:	9300      	str	r3, [sp, #0]
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	68b9      	ldr	r1, [r7, #8]
 801b142:	68f8      	ldr	r0, [r7, #12]
 801b144:	f000 f80e 	bl	801b164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b148:	69f8      	ldr	r0, [r7, #28]
 801b14a:	f000 f89b 	bl	801b284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b14e:	2301      	movs	r3, #1
 801b150:	61bb      	str	r3, [r7, #24]
 801b152:	e002      	b.n	801b15a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b154:	f04f 33ff 	mov.w	r3, #4294967295
 801b158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b15a:	69bb      	ldr	r3, [r7, #24]
	}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3720      	adds	r7, #32
 801b160:	46bd      	mov	sp, r7
 801b162:	bd80      	pop	{r7, pc}

0801b164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b088      	sub	sp, #32
 801b168:	af00      	add	r7, sp, #0
 801b16a:	60f8      	str	r0, [r7, #12]
 801b16c:	60b9      	str	r1, [r7, #8]
 801b16e:	607a      	str	r2, [r7, #4]
 801b170:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b174:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	009b      	lsls	r3, r3, #2
 801b17a:	461a      	mov	r2, r3
 801b17c:	21a5      	movs	r1, #165	; 0xa5
 801b17e:	f003 fcd8 	bl	801eb32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b186:	6879      	ldr	r1, [r7, #4]
 801b188:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801b18c:	440b      	add	r3, r1
 801b18e:	009b      	lsls	r3, r3, #2
 801b190:	4413      	add	r3, r2
 801b192:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b194:	69bb      	ldr	r3, [r7, #24]
 801b196:	f023 0307 	bic.w	r3, r3, #7
 801b19a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b19c:	69bb      	ldr	r3, [r7, #24]
 801b19e:	f003 0307 	and.w	r3, r3, #7
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d00a      	beq.n	801b1bc <prvInitialiseNewTask+0x58>
	__asm volatile
 801b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1aa:	f383 8811 	msr	BASEPRI, r3
 801b1ae:	f3bf 8f6f 	isb	sy
 801b1b2:	f3bf 8f4f 	dsb	sy
 801b1b6:	617b      	str	r3, [r7, #20]
}
 801b1b8:	bf00      	nop
 801b1ba:	e7fe      	b.n	801b1ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d01f      	beq.n	801b202 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	61fb      	str	r3, [r7, #28]
 801b1c6:	e012      	b.n	801b1ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b1c8:	68ba      	ldr	r2, [r7, #8]
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	4413      	add	r3, r2
 801b1ce:	7819      	ldrb	r1, [r3, #0]
 801b1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1d2:	69fb      	ldr	r3, [r7, #28]
 801b1d4:	4413      	add	r3, r2
 801b1d6:	3334      	adds	r3, #52	; 0x34
 801b1d8:	460a      	mov	r2, r1
 801b1da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b1dc:	68ba      	ldr	r2, [r7, #8]
 801b1de:	69fb      	ldr	r3, [r7, #28]
 801b1e0:	4413      	add	r3, r2
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d006      	beq.n	801b1f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b1e8:	69fb      	ldr	r3, [r7, #28]
 801b1ea:	3301      	adds	r3, #1
 801b1ec:	61fb      	str	r3, [r7, #28]
 801b1ee:	69fb      	ldr	r3, [r7, #28]
 801b1f0:	2b0f      	cmp	r3, #15
 801b1f2:	d9e9      	bls.n	801b1c8 <prvInitialiseNewTask+0x64>
 801b1f4:	e000      	b.n	801b1f8 <prvInitialiseNewTask+0x94>
			{
				break;
 801b1f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b200:	e003      	b.n	801b20a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b204:	2200      	movs	r2, #0
 801b206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b20c:	2b37      	cmp	r3, #55	; 0x37
 801b20e:	d901      	bls.n	801b214 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b210:	2337      	movs	r3, #55	; 0x37
 801b212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b21c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b21e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b222:	2200      	movs	r2, #0
 801b224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b228:	3304      	adds	r3, #4
 801b22a:	4618      	mov	r0, r3
 801b22c:	f7fe ff14 	bl	801a058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b232:	3318      	adds	r3, #24
 801b234:	4618      	mov	r0, r3
 801b236:	f7fe ff0f 	bl	801a058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b23e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b24e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b252:	2200      	movs	r2, #0
 801b254:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b258:	2200      	movs	r2, #0
 801b25a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b25e:	683a      	ldr	r2, [r7, #0]
 801b260:	68f9      	ldr	r1, [r7, #12]
 801b262:	69b8      	ldr	r0, [r7, #24]
 801b264:	f001 f9de 	bl	801c624 <pxPortInitialiseStack>
 801b268:	4602      	mov	r2, r0
 801b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b26c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b270:	2b00      	cmp	r3, #0
 801b272:	d002      	beq.n	801b27a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b27a:	bf00      	nop
 801b27c:	3720      	adds	r7, #32
 801b27e:	46bd      	mov	sp, r7
 801b280:	bd80      	pop	{r7, pc}
	...

0801b284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b082      	sub	sp, #8
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b28c:	f001 fafa 	bl	801c884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b290:	4b26      	ldr	r3, [pc, #152]	; (801b32c <prvAddNewTaskToReadyList+0xa8>)
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	3301      	adds	r3, #1
 801b296:	4a25      	ldr	r2, [pc, #148]	; (801b32c <prvAddNewTaskToReadyList+0xa8>)
 801b298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b29a:	4b25      	ldr	r3, [pc, #148]	; (801b330 <prvAddNewTaskToReadyList+0xac>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d109      	bne.n	801b2b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b2a2:	4a23      	ldr	r2, [pc, #140]	; (801b330 <prvAddNewTaskToReadyList+0xac>)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b2a8:	4b20      	ldr	r3, [pc, #128]	; (801b32c <prvAddNewTaskToReadyList+0xa8>)
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	2b01      	cmp	r3, #1
 801b2ae:	d110      	bne.n	801b2d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b2b0:	f000 fbce 	bl	801ba50 <prvInitialiseTaskLists>
 801b2b4:	e00d      	b.n	801b2d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b2b6:	4b1f      	ldr	r3, [pc, #124]	; (801b334 <prvAddNewTaskToReadyList+0xb0>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d109      	bne.n	801b2d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b2be:	4b1c      	ldr	r3, [pc, #112]	; (801b330 <prvAddNewTaskToReadyList+0xac>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2c8:	429a      	cmp	r2, r3
 801b2ca:	d802      	bhi.n	801b2d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b2cc:	4a18      	ldr	r2, [pc, #96]	; (801b330 <prvAddNewTaskToReadyList+0xac>)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b2d2:	4b19      	ldr	r3, [pc, #100]	; (801b338 <prvAddNewTaskToReadyList+0xb4>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	4a17      	ldr	r2, [pc, #92]	; (801b338 <prvAddNewTaskToReadyList+0xb4>)
 801b2da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801b2dc:	4b16      	ldr	r3, [pc, #88]	; (801b338 <prvAddNewTaskToReadyList+0xb4>)
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2e8:	4b14      	ldr	r3, [pc, #80]	; (801b33c <prvAddNewTaskToReadyList+0xb8>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	d903      	bls.n	801b2f8 <prvAddNewTaskToReadyList+0x74>
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2f4:	4a11      	ldr	r2, [pc, #68]	; (801b33c <prvAddNewTaskToReadyList+0xb8>)
 801b2f6:	6013      	str	r3, [r2, #0]
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	009b      	lsls	r3, r3, #2
 801b300:	4413      	add	r3, r2
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	4a0e      	ldr	r2, [pc, #56]	; (801b340 <prvAddNewTaskToReadyList+0xbc>)
 801b306:	441a      	add	r2, r3
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	3304      	adds	r3, #4
 801b30c:	4619      	mov	r1, r3
 801b30e:	4610      	mov	r0, r2
 801b310:	f7fe feaf 	bl	801a072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b314:	f001 fae6 	bl	801c8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b318:	4b06      	ldr	r3, [pc, #24]	; (801b334 <prvAddNewTaskToReadyList+0xb0>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d001      	beq.n	801b324 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b320:	4b03      	ldr	r3, [pc, #12]	; (801b330 <prvAddNewTaskToReadyList+0xac>)
 801b322:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b324:	bf00      	nop
 801b326:	3708      	adds	r7, #8
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}
 801b32c:	2400638c 	.word	0x2400638c
 801b330:	24005eb8 	.word	0x24005eb8
 801b334:	24006398 	.word	0x24006398
 801b338:	240063a8 	.word	0x240063a8
 801b33c:	24006394 	.word	0x24006394
 801b340:	24005ebc 	.word	0x24005ebc

0801b344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b34c:	2300      	movs	r3, #0
 801b34e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d017      	beq.n	801b386 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b356:	4b13      	ldr	r3, [pc, #76]	; (801b3a4 <vTaskDelay+0x60>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d00a      	beq.n	801b374 <vTaskDelay+0x30>
	__asm volatile
 801b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b362:	f383 8811 	msr	BASEPRI, r3
 801b366:	f3bf 8f6f 	isb	sy
 801b36a:	f3bf 8f4f 	dsb	sy
 801b36e:	60bb      	str	r3, [r7, #8]
}
 801b370:	bf00      	nop
 801b372:	e7fe      	b.n	801b372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b374:	f000 f880 	bl	801b478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b378:	2100      	movs	r1, #0
 801b37a:	6878      	ldr	r0, [r7, #4]
 801b37c:	f000 fdb0 	bl	801bee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b380:	f000 f888 	bl	801b494 <xTaskResumeAll>
 801b384:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d107      	bne.n	801b39c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b38c:	4b06      	ldr	r3, [pc, #24]	; (801b3a8 <vTaskDelay+0x64>)
 801b38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b392:	601a      	str	r2, [r3, #0]
 801b394:	f3bf 8f4f 	dsb	sy
 801b398:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b39c:	bf00      	nop
 801b39e:	3710      	adds	r7, #16
 801b3a0:	46bd      	mov	sp, r7
 801b3a2:	bd80      	pop	{r7, pc}
 801b3a4:	240063b4 	.word	0x240063b4
 801b3a8:	e000ed04 	.word	0xe000ed04

0801b3ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b08a      	sub	sp, #40	; 0x28
 801b3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b3ba:	463a      	mov	r2, r7
 801b3bc:	1d39      	adds	r1, r7, #4
 801b3be:	f107 0308 	add.w	r3, r7, #8
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	f7fe fdf4 	bl	8019fb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b3c8:	6839      	ldr	r1, [r7, #0]
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	68ba      	ldr	r2, [r7, #8]
 801b3ce:	9202      	str	r2, [sp, #8]
 801b3d0:	9301      	str	r3, [sp, #4]
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	9300      	str	r3, [sp, #0]
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	460a      	mov	r2, r1
 801b3da:	4921      	ldr	r1, [pc, #132]	; (801b460 <vTaskStartScheduler+0xb4>)
 801b3dc:	4821      	ldr	r0, [pc, #132]	; (801b464 <vTaskStartScheduler+0xb8>)
 801b3de:	f7ff fe1f 	bl	801b020 <xTaskCreateStatic>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	4a20      	ldr	r2, [pc, #128]	; (801b468 <vTaskStartScheduler+0xbc>)
 801b3e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b3e8:	4b1f      	ldr	r3, [pc, #124]	; (801b468 <vTaskStartScheduler+0xbc>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d002      	beq.n	801b3f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	617b      	str	r3, [r7, #20]
 801b3f4:	e001      	b.n	801b3fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b3f6:	2300      	movs	r3, #0
 801b3f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b3fa:	697b      	ldr	r3, [r7, #20]
 801b3fc:	2b01      	cmp	r3, #1
 801b3fe:	d102      	bne.n	801b406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b400:	f000 fdc2 	bl	801bf88 <xTimerCreateTimerTask>
 801b404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	2b01      	cmp	r3, #1
 801b40a:	d116      	bne.n	801b43a <vTaskStartScheduler+0x8e>
	__asm volatile
 801b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b410:	f383 8811 	msr	BASEPRI, r3
 801b414:	f3bf 8f6f 	isb	sy
 801b418:	f3bf 8f4f 	dsb	sy
 801b41c:	613b      	str	r3, [r7, #16]
}
 801b41e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b420:	4b12      	ldr	r3, [pc, #72]	; (801b46c <vTaskStartScheduler+0xc0>)
 801b422:	f04f 32ff 	mov.w	r2, #4294967295
 801b426:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b428:	4b11      	ldr	r3, [pc, #68]	; (801b470 <vTaskStartScheduler+0xc4>)
 801b42a:	2201      	movs	r2, #1
 801b42c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b42e:	4b11      	ldr	r3, [pc, #68]	; (801b474 <vTaskStartScheduler+0xc8>)
 801b430:	2200      	movs	r2, #0
 801b432:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b434:	f001 f984 	bl	801c740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b438:	e00e      	b.n	801b458 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b43a:	697b      	ldr	r3, [r7, #20]
 801b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b440:	d10a      	bne.n	801b458 <vTaskStartScheduler+0xac>
	__asm volatile
 801b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b446:	f383 8811 	msr	BASEPRI, r3
 801b44a:	f3bf 8f6f 	isb	sy
 801b44e:	f3bf 8f4f 	dsb	sy
 801b452:	60fb      	str	r3, [r7, #12]
}
 801b454:	bf00      	nop
 801b456:	e7fe      	b.n	801b456 <vTaskStartScheduler+0xaa>
}
 801b458:	bf00      	nop
 801b45a:	3718      	adds	r7, #24
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd80      	pop	{r7, pc}
 801b460:	08020d54 	.word	0x08020d54
 801b464:	0801ba2d 	.word	0x0801ba2d
 801b468:	240063b0 	.word	0x240063b0
 801b46c:	240063ac 	.word	0x240063ac
 801b470:	24006398 	.word	0x24006398
 801b474:	24006390 	.word	0x24006390

0801b478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b478:	b480      	push	{r7}
 801b47a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b47c:	4b04      	ldr	r3, [pc, #16]	; (801b490 <vTaskSuspendAll+0x18>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	3301      	adds	r3, #1
 801b482:	4a03      	ldr	r2, [pc, #12]	; (801b490 <vTaskSuspendAll+0x18>)
 801b484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b486:	bf00      	nop
 801b488:	46bd      	mov	sp, r7
 801b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48e:	4770      	bx	lr
 801b490:	240063b4 	.word	0x240063b4

0801b494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b494:	b580      	push	{r7, lr}
 801b496:	b084      	sub	sp, #16
 801b498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b49a:	2300      	movs	r3, #0
 801b49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b49e:	2300      	movs	r3, #0
 801b4a0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b4a2:	4b3c      	ldr	r3, [pc, #240]	; (801b594 <xTaskResumeAll+0x100>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d10a      	bne.n	801b4c0 <xTaskResumeAll+0x2c>
	__asm volatile
 801b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4ae:	f383 8811 	msr	BASEPRI, r3
 801b4b2:	f3bf 8f6f 	isb	sy
 801b4b6:	f3bf 8f4f 	dsb	sy
 801b4ba:	603b      	str	r3, [r7, #0]
}
 801b4bc:	bf00      	nop
 801b4be:	e7fe      	b.n	801b4be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b4c0:	f001 f9e0 	bl	801c884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b4c4:	4b33      	ldr	r3, [pc, #204]	; (801b594 <xTaskResumeAll+0x100>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	3b01      	subs	r3, #1
 801b4ca:	4a32      	ldr	r2, [pc, #200]	; (801b594 <xTaskResumeAll+0x100>)
 801b4cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b4ce:	4b31      	ldr	r3, [pc, #196]	; (801b594 <xTaskResumeAll+0x100>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d156      	bne.n	801b584 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b4d6:	4b30      	ldr	r3, [pc, #192]	; (801b598 <xTaskResumeAll+0x104>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d052      	beq.n	801b584 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b4de:	e02f      	b.n	801b540 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b4e0:	4b2e      	ldr	r3, [pc, #184]	; (801b59c <xTaskResumeAll+0x108>)
 801b4e2:	68db      	ldr	r3, [r3, #12]
 801b4e4:	68db      	ldr	r3, [r3, #12]
 801b4e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	3318      	adds	r3, #24
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7fe fe1d 	bl	801a12c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	3304      	adds	r3, #4
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7fe fe18 	bl	801a12c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b500:	4b27      	ldr	r3, [pc, #156]	; (801b5a0 <xTaskResumeAll+0x10c>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	429a      	cmp	r2, r3
 801b506:	d903      	bls.n	801b510 <xTaskResumeAll+0x7c>
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b50c:	4a24      	ldr	r2, [pc, #144]	; (801b5a0 <xTaskResumeAll+0x10c>)
 801b50e:	6013      	str	r3, [r2, #0]
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b514:	4613      	mov	r3, r2
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	4413      	add	r3, r2
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	4a21      	ldr	r2, [pc, #132]	; (801b5a4 <xTaskResumeAll+0x110>)
 801b51e:	441a      	add	r2, r3
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	3304      	adds	r3, #4
 801b524:	4619      	mov	r1, r3
 801b526:	4610      	mov	r0, r2
 801b528:	f7fe fda3 	bl	801a072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b530:	4b1d      	ldr	r3, [pc, #116]	; (801b5a8 <xTaskResumeAll+0x114>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b536:	429a      	cmp	r2, r3
 801b538:	d302      	bcc.n	801b540 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b53a:	4b1c      	ldr	r3, [pc, #112]	; (801b5ac <xTaskResumeAll+0x118>)
 801b53c:	2201      	movs	r2, #1
 801b53e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b540:	4b16      	ldr	r3, [pc, #88]	; (801b59c <xTaskResumeAll+0x108>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d1cb      	bne.n	801b4e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d001      	beq.n	801b552 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b54e:	f000 fb1d 	bl	801bb8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b552:	4b17      	ldr	r3, [pc, #92]	; (801b5b0 <xTaskResumeAll+0x11c>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b558:	68bb      	ldr	r3, [r7, #8]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d010      	beq.n	801b580 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b55e:	f000 f839 	bl	801b5d4 <xTaskIncrementTick>
 801b562:	4603      	mov	r3, r0
 801b564:	2b00      	cmp	r3, #0
 801b566:	d002      	beq.n	801b56e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b568:	4b10      	ldr	r3, [pc, #64]	; (801b5ac <xTaskResumeAll+0x118>)
 801b56a:	2201      	movs	r2, #1
 801b56c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b56e:	68bb      	ldr	r3, [r7, #8]
 801b570:	3b01      	subs	r3, #1
 801b572:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b574:	68bb      	ldr	r3, [r7, #8]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d1f1      	bne.n	801b55e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b57a:	4b0d      	ldr	r3, [pc, #52]	; (801b5b0 <xTaskResumeAll+0x11c>)
 801b57c:	2200      	movs	r2, #0
 801b57e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b580:	4b0a      	ldr	r3, [pc, #40]	; (801b5ac <xTaskResumeAll+0x118>)
 801b582:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b584:	f001 f9ae 	bl	801c8e4 <vPortExitCritical>

	return xAlreadyYielded;
 801b588:	687b      	ldr	r3, [r7, #4]
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
 801b592:	bf00      	nop
 801b594:	240063b4 	.word	0x240063b4
 801b598:	2400638c 	.word	0x2400638c
 801b59c:	2400634c 	.word	0x2400634c
 801b5a0:	24006394 	.word	0x24006394
 801b5a4:	24005ebc 	.word	0x24005ebc
 801b5a8:	24005eb8 	.word	0x24005eb8
 801b5ac:	240063a0 	.word	0x240063a0
 801b5b0:	2400639c 	.word	0x2400639c

0801b5b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b5b4:	b480      	push	{r7}
 801b5b6:	b083      	sub	sp, #12
 801b5b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b5ba:	4b05      	ldr	r3, [pc, #20]	; (801b5d0 <xTaskGetTickCount+0x1c>)
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b5c0:	687b      	ldr	r3, [r7, #4]
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	370c      	adds	r7, #12
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5cc:	4770      	bx	lr
 801b5ce:	bf00      	nop
 801b5d0:	24006390 	.word	0x24006390

0801b5d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b086      	sub	sp, #24
 801b5d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b5de:	4b3f      	ldr	r3, [pc, #252]	; (801b6dc <xTaskIncrementTick+0x108>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d170      	bne.n	801b6c8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b5e6:	4b3e      	ldr	r3, [pc, #248]	; (801b6e0 <xTaskIncrementTick+0x10c>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	3301      	adds	r3, #1
 801b5ec:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b5ee:	4a3c      	ldr	r2, [pc, #240]	; (801b6e0 <xTaskIncrementTick+0x10c>)
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d120      	bne.n	801b63c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801b5fa:	4b3a      	ldr	r3, [pc, #232]	; (801b6e4 <xTaskIncrementTick+0x110>)
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2b00      	cmp	r3, #0
 801b602:	d00a      	beq.n	801b61a <xTaskIncrementTick+0x46>
	__asm volatile
 801b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b608:	f383 8811 	msr	BASEPRI, r3
 801b60c:	f3bf 8f6f 	isb	sy
 801b610:	f3bf 8f4f 	dsb	sy
 801b614:	603b      	str	r3, [r7, #0]
}
 801b616:	bf00      	nop
 801b618:	e7fe      	b.n	801b618 <xTaskIncrementTick+0x44>
 801b61a:	4b32      	ldr	r3, [pc, #200]	; (801b6e4 <xTaskIncrementTick+0x110>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	60fb      	str	r3, [r7, #12]
 801b620:	4b31      	ldr	r3, [pc, #196]	; (801b6e8 <xTaskIncrementTick+0x114>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	4a2f      	ldr	r2, [pc, #188]	; (801b6e4 <xTaskIncrementTick+0x110>)
 801b626:	6013      	str	r3, [r2, #0]
 801b628:	4a2f      	ldr	r2, [pc, #188]	; (801b6e8 <xTaskIncrementTick+0x114>)
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	6013      	str	r3, [r2, #0]
 801b62e:	4b2f      	ldr	r3, [pc, #188]	; (801b6ec <xTaskIncrementTick+0x118>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	3301      	adds	r3, #1
 801b634:	4a2d      	ldr	r2, [pc, #180]	; (801b6ec <xTaskIncrementTick+0x118>)
 801b636:	6013      	str	r3, [r2, #0]
 801b638:	f000 faa8 	bl	801bb8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b63c:	4b2c      	ldr	r3, [pc, #176]	; (801b6f0 <xTaskIncrementTick+0x11c>)
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	693a      	ldr	r2, [r7, #16]
 801b642:	429a      	cmp	r2, r3
 801b644:	d345      	bcc.n	801b6d2 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b646:	4b27      	ldr	r3, [pc, #156]	; (801b6e4 <xTaskIncrementTick+0x110>)
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d104      	bne.n	801b65a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b650:	4b27      	ldr	r3, [pc, #156]	; (801b6f0 <xTaskIncrementTick+0x11c>)
 801b652:	f04f 32ff 	mov.w	r2, #4294967295
 801b656:	601a      	str	r2, [r3, #0]
					break;
 801b658:	e03b      	b.n	801b6d2 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b65a:	4b22      	ldr	r3, [pc, #136]	; (801b6e4 <xTaskIncrementTick+0x110>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	68db      	ldr	r3, [r3, #12]
 801b660:	68db      	ldr	r3, [r3, #12]
 801b662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b664:	68bb      	ldr	r3, [r7, #8]
 801b666:	685b      	ldr	r3, [r3, #4]
 801b668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b66a:	693a      	ldr	r2, [r7, #16]
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d203      	bcs.n	801b67a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b672:	4a1f      	ldr	r2, [pc, #124]	; (801b6f0 <xTaskIncrementTick+0x11c>)
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b678:	e02b      	b.n	801b6d2 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	3304      	adds	r3, #4
 801b67e:	4618      	mov	r0, r3
 801b680:	f7fe fd54 	bl	801a12c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d004      	beq.n	801b696 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	3318      	adds	r3, #24
 801b690:	4618      	mov	r0, r3
 801b692:	f7fe fd4b 	bl	801a12c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b696:	68bb      	ldr	r3, [r7, #8]
 801b698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b69a:	4b16      	ldr	r3, [pc, #88]	; (801b6f4 <xTaskIncrementTick+0x120>)
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d903      	bls.n	801b6aa <xTaskIncrementTick+0xd6>
 801b6a2:	68bb      	ldr	r3, [r7, #8]
 801b6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6a6:	4a13      	ldr	r2, [pc, #76]	; (801b6f4 <xTaskIncrementTick+0x120>)
 801b6a8:	6013      	str	r3, [r2, #0]
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6ae:	4613      	mov	r3, r2
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	4413      	add	r3, r2
 801b6b4:	009b      	lsls	r3, r3, #2
 801b6b6:	4a10      	ldr	r2, [pc, #64]	; (801b6f8 <xTaskIncrementTick+0x124>)
 801b6b8:	441a      	add	r2, r3
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	3304      	adds	r3, #4
 801b6be:	4619      	mov	r1, r3
 801b6c0:	4610      	mov	r0, r2
 801b6c2:	f7fe fcd6 	bl	801a072 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b6c6:	e7be      	b.n	801b646 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b6c8:	4b0c      	ldr	r3, [pc, #48]	; (801b6fc <xTaskIncrementTick+0x128>)
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	4a0b      	ldr	r2, [pc, #44]	; (801b6fc <xTaskIncrementTick+0x128>)
 801b6d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b6d2:	697b      	ldr	r3, [r7, #20]
}
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	3718      	adds	r7, #24
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}
 801b6dc:	240063b4 	.word	0x240063b4
 801b6e0:	24006390 	.word	0x24006390
 801b6e4:	24006344 	.word	0x24006344
 801b6e8:	24006348 	.word	0x24006348
 801b6ec:	240063a4 	.word	0x240063a4
 801b6f0:	240063ac 	.word	0x240063ac
 801b6f4:	24006394 	.word	0x24006394
 801b6f8:	24005ebc 	.word	0x24005ebc
 801b6fc:	2400639c 	.word	0x2400639c

0801b700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b700:	b480      	push	{r7}
 801b702:	b085      	sub	sp, #20
 801b704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b706:	4b28      	ldr	r3, [pc, #160]	; (801b7a8 <vTaskSwitchContext+0xa8>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d003      	beq.n	801b716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b70e:	4b27      	ldr	r3, [pc, #156]	; (801b7ac <vTaskSwitchContext+0xac>)
 801b710:	2201      	movs	r2, #1
 801b712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b714:	e041      	b.n	801b79a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801b716:	4b25      	ldr	r3, [pc, #148]	; (801b7ac <vTaskSwitchContext+0xac>)
 801b718:	2200      	movs	r2, #0
 801b71a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b71c:	4b24      	ldr	r3, [pc, #144]	; (801b7b0 <vTaskSwitchContext+0xb0>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	60fb      	str	r3, [r7, #12]
 801b722:	e010      	b.n	801b746 <vTaskSwitchContext+0x46>
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	2b00      	cmp	r3, #0
 801b728:	d10a      	bne.n	801b740 <vTaskSwitchContext+0x40>
	__asm volatile
 801b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b72e:	f383 8811 	msr	BASEPRI, r3
 801b732:	f3bf 8f6f 	isb	sy
 801b736:	f3bf 8f4f 	dsb	sy
 801b73a:	607b      	str	r3, [r7, #4]
}
 801b73c:	bf00      	nop
 801b73e:	e7fe      	b.n	801b73e <vTaskSwitchContext+0x3e>
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	3b01      	subs	r3, #1
 801b744:	60fb      	str	r3, [r7, #12]
 801b746:	491b      	ldr	r1, [pc, #108]	; (801b7b4 <vTaskSwitchContext+0xb4>)
 801b748:	68fa      	ldr	r2, [r7, #12]
 801b74a:	4613      	mov	r3, r2
 801b74c:	009b      	lsls	r3, r3, #2
 801b74e:	4413      	add	r3, r2
 801b750:	009b      	lsls	r3, r3, #2
 801b752:	440b      	add	r3, r1
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d0e4      	beq.n	801b724 <vTaskSwitchContext+0x24>
 801b75a:	68fa      	ldr	r2, [r7, #12]
 801b75c:	4613      	mov	r3, r2
 801b75e:	009b      	lsls	r3, r3, #2
 801b760:	4413      	add	r3, r2
 801b762:	009b      	lsls	r3, r3, #2
 801b764:	4a13      	ldr	r2, [pc, #76]	; (801b7b4 <vTaskSwitchContext+0xb4>)
 801b766:	4413      	add	r3, r2
 801b768:	60bb      	str	r3, [r7, #8]
 801b76a:	68bb      	ldr	r3, [r7, #8]
 801b76c:	685b      	ldr	r3, [r3, #4]
 801b76e:	685a      	ldr	r2, [r3, #4]
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	605a      	str	r2, [r3, #4]
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	685a      	ldr	r2, [r3, #4]
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	3308      	adds	r3, #8
 801b77c:	429a      	cmp	r2, r3
 801b77e:	d104      	bne.n	801b78a <vTaskSwitchContext+0x8a>
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	685a      	ldr	r2, [r3, #4]
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	605a      	str	r2, [r3, #4]
 801b78a:	68bb      	ldr	r3, [r7, #8]
 801b78c:	685b      	ldr	r3, [r3, #4]
 801b78e:	68db      	ldr	r3, [r3, #12]
 801b790:	4a09      	ldr	r2, [pc, #36]	; (801b7b8 <vTaskSwitchContext+0xb8>)
 801b792:	6013      	str	r3, [r2, #0]
 801b794:	4a06      	ldr	r2, [pc, #24]	; (801b7b0 <vTaskSwitchContext+0xb0>)
 801b796:	68fb      	ldr	r3, [r7, #12]
 801b798:	6013      	str	r3, [r2, #0]
}
 801b79a:	bf00      	nop
 801b79c:	3714      	adds	r7, #20
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a4:	4770      	bx	lr
 801b7a6:	bf00      	nop
 801b7a8:	240063b4 	.word	0x240063b4
 801b7ac:	240063a0 	.word	0x240063a0
 801b7b0:	24006394 	.word	0x24006394
 801b7b4:	24005ebc 	.word	0x24005ebc
 801b7b8:	24005eb8 	.word	0x24005eb8

0801b7bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b084      	sub	sp, #16
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
 801b7c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d10a      	bne.n	801b7e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7d0:	f383 8811 	msr	BASEPRI, r3
 801b7d4:	f3bf 8f6f 	isb	sy
 801b7d8:	f3bf 8f4f 	dsb	sy
 801b7dc:	60fb      	str	r3, [r7, #12]
}
 801b7de:	bf00      	nop
 801b7e0:	e7fe      	b.n	801b7e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b7e2:	4b07      	ldr	r3, [pc, #28]	; (801b800 <vTaskPlaceOnEventList+0x44>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	3318      	adds	r3, #24
 801b7e8:	4619      	mov	r1, r3
 801b7ea:	6878      	ldr	r0, [r7, #4]
 801b7ec:	f7fe fc65 	bl	801a0ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b7f0:	2101      	movs	r1, #1
 801b7f2:	6838      	ldr	r0, [r7, #0]
 801b7f4:	f000 fb74 	bl	801bee0 <prvAddCurrentTaskToDelayedList>
}
 801b7f8:	bf00      	nop
 801b7fa:	3710      	adds	r7, #16
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	bd80      	pop	{r7, pc}
 801b800:	24005eb8 	.word	0x24005eb8

0801b804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b804:	b580      	push	{r7, lr}
 801b806:	b086      	sub	sp, #24
 801b808:	af00      	add	r7, sp, #0
 801b80a:	60f8      	str	r0, [r7, #12]
 801b80c:	60b9      	str	r1, [r7, #8]
 801b80e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d10a      	bne.n	801b82c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b81a:	f383 8811 	msr	BASEPRI, r3
 801b81e:	f3bf 8f6f 	isb	sy
 801b822:	f3bf 8f4f 	dsb	sy
 801b826:	617b      	str	r3, [r7, #20]
}
 801b828:	bf00      	nop
 801b82a:	e7fe      	b.n	801b82a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b82c:	4b0a      	ldr	r3, [pc, #40]	; (801b858 <vTaskPlaceOnEventListRestricted+0x54>)
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	3318      	adds	r3, #24
 801b832:	4619      	mov	r1, r3
 801b834:	68f8      	ldr	r0, [r7, #12]
 801b836:	f7fe fc1c 	bl	801a072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d002      	beq.n	801b846 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b840:	f04f 33ff 	mov.w	r3, #4294967295
 801b844:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b846:	6879      	ldr	r1, [r7, #4]
 801b848:	68b8      	ldr	r0, [r7, #8]
 801b84a:	f000 fb49 	bl	801bee0 <prvAddCurrentTaskToDelayedList>
	}
 801b84e:	bf00      	nop
 801b850:	3718      	adds	r7, #24
 801b852:	46bd      	mov	sp, r7
 801b854:	bd80      	pop	{r7, pc}
 801b856:	bf00      	nop
 801b858:	24005eb8 	.word	0x24005eb8

0801b85c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b85c:	b580      	push	{r7, lr}
 801b85e:	b086      	sub	sp, #24
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	68db      	ldr	r3, [r3, #12]
 801b868:	68db      	ldr	r3, [r3, #12]
 801b86a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b86c:	693b      	ldr	r3, [r7, #16]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d10a      	bne.n	801b888 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b876:	f383 8811 	msr	BASEPRI, r3
 801b87a:	f3bf 8f6f 	isb	sy
 801b87e:	f3bf 8f4f 	dsb	sy
 801b882:	60fb      	str	r3, [r7, #12]
}
 801b884:	bf00      	nop
 801b886:	e7fe      	b.n	801b886 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b888:	693b      	ldr	r3, [r7, #16]
 801b88a:	3318      	adds	r3, #24
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7fe fc4d 	bl	801a12c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b892:	4b1e      	ldr	r3, [pc, #120]	; (801b90c <xTaskRemoveFromEventList+0xb0>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d11d      	bne.n	801b8d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	3304      	adds	r3, #4
 801b89e:	4618      	mov	r0, r3
 801b8a0:	f7fe fc44 	bl	801a12c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b8a4:	693b      	ldr	r3, [r7, #16]
 801b8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8a8:	4b19      	ldr	r3, [pc, #100]	; (801b910 <xTaskRemoveFromEventList+0xb4>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	429a      	cmp	r2, r3
 801b8ae:	d903      	bls.n	801b8b8 <xTaskRemoveFromEventList+0x5c>
 801b8b0:	693b      	ldr	r3, [r7, #16]
 801b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8b4:	4a16      	ldr	r2, [pc, #88]	; (801b910 <xTaskRemoveFromEventList+0xb4>)
 801b8b6:	6013      	str	r3, [r2, #0]
 801b8b8:	693b      	ldr	r3, [r7, #16]
 801b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8bc:	4613      	mov	r3, r2
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	4413      	add	r3, r2
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	4a13      	ldr	r2, [pc, #76]	; (801b914 <xTaskRemoveFromEventList+0xb8>)
 801b8c6:	441a      	add	r2, r3
 801b8c8:	693b      	ldr	r3, [r7, #16]
 801b8ca:	3304      	adds	r3, #4
 801b8cc:	4619      	mov	r1, r3
 801b8ce:	4610      	mov	r0, r2
 801b8d0:	f7fe fbcf 	bl	801a072 <vListInsertEnd>
 801b8d4:	e005      	b.n	801b8e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	3318      	adds	r3, #24
 801b8da:	4619      	mov	r1, r3
 801b8dc:	480e      	ldr	r0, [pc, #56]	; (801b918 <xTaskRemoveFromEventList+0xbc>)
 801b8de:	f7fe fbc8 	bl	801a072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b8e2:	693b      	ldr	r3, [r7, #16]
 801b8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8e6:	4b0d      	ldr	r3, [pc, #52]	; (801b91c <xTaskRemoveFromEventList+0xc0>)
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8ec:	429a      	cmp	r2, r3
 801b8ee:	d905      	bls.n	801b8fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b8f0:	2301      	movs	r3, #1
 801b8f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b8f4:	4b0a      	ldr	r3, [pc, #40]	; (801b920 <xTaskRemoveFromEventList+0xc4>)
 801b8f6:	2201      	movs	r2, #1
 801b8f8:	601a      	str	r2, [r3, #0]
 801b8fa:	e001      	b.n	801b900 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b900:	697b      	ldr	r3, [r7, #20]
}
 801b902:	4618      	mov	r0, r3
 801b904:	3718      	adds	r7, #24
 801b906:	46bd      	mov	sp, r7
 801b908:	bd80      	pop	{r7, pc}
 801b90a:	bf00      	nop
 801b90c:	240063b4 	.word	0x240063b4
 801b910:	24006394 	.word	0x24006394
 801b914:	24005ebc 	.word	0x24005ebc
 801b918:	2400634c 	.word	0x2400634c
 801b91c:	24005eb8 	.word	0x24005eb8
 801b920:	240063a0 	.word	0x240063a0

0801b924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b924:	b480      	push	{r7}
 801b926:	b083      	sub	sp, #12
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b92c:	4b06      	ldr	r3, [pc, #24]	; (801b948 <vTaskInternalSetTimeOutState+0x24>)
 801b92e:	681a      	ldr	r2, [r3, #0]
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b934:	4b05      	ldr	r3, [pc, #20]	; (801b94c <vTaskInternalSetTimeOutState+0x28>)
 801b936:	681a      	ldr	r2, [r3, #0]
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	605a      	str	r2, [r3, #4]
}
 801b93c:	bf00      	nop
 801b93e:	370c      	adds	r7, #12
 801b940:	46bd      	mov	sp, r7
 801b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b946:	4770      	bx	lr
 801b948:	240063a4 	.word	0x240063a4
 801b94c:	24006390 	.word	0x24006390

0801b950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b088      	sub	sp, #32
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d10a      	bne.n	801b976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b964:	f383 8811 	msr	BASEPRI, r3
 801b968:	f3bf 8f6f 	isb	sy
 801b96c:	f3bf 8f4f 	dsb	sy
 801b970:	613b      	str	r3, [r7, #16]
}
 801b972:	bf00      	nop
 801b974:	e7fe      	b.n	801b974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b976:	683b      	ldr	r3, [r7, #0]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d10a      	bne.n	801b992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b980:	f383 8811 	msr	BASEPRI, r3
 801b984:	f3bf 8f6f 	isb	sy
 801b988:	f3bf 8f4f 	dsb	sy
 801b98c:	60fb      	str	r3, [r7, #12]
}
 801b98e:	bf00      	nop
 801b990:	e7fe      	b.n	801b990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b992:	f000 ff77 	bl	801c884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b996:	4b1d      	ldr	r3, [pc, #116]	; (801ba0c <xTaskCheckForTimeOut+0xbc>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	685b      	ldr	r3, [r3, #4]
 801b9a0:	69ba      	ldr	r2, [r7, #24]
 801b9a2:	1ad3      	subs	r3, r2, r3
 801b9a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b9a6:	683b      	ldr	r3, [r7, #0]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9ae:	d102      	bne.n	801b9b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	61fb      	str	r3, [r7, #28]
 801b9b4:	e023      	b.n	801b9fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	681a      	ldr	r2, [r3, #0]
 801b9ba:	4b15      	ldr	r3, [pc, #84]	; (801ba10 <xTaskCheckForTimeOut+0xc0>)
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d007      	beq.n	801b9d2 <xTaskCheckForTimeOut+0x82>
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	685b      	ldr	r3, [r3, #4]
 801b9c6:	69ba      	ldr	r2, [r7, #24]
 801b9c8:	429a      	cmp	r2, r3
 801b9ca:	d302      	bcc.n	801b9d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b9cc:	2301      	movs	r3, #1
 801b9ce:	61fb      	str	r3, [r7, #28]
 801b9d0:	e015      	b.n	801b9fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b9d2:	683b      	ldr	r3, [r7, #0]
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	697a      	ldr	r2, [r7, #20]
 801b9d8:	429a      	cmp	r2, r3
 801b9da:	d20b      	bcs.n	801b9f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b9dc:	683b      	ldr	r3, [r7, #0]
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	1ad2      	subs	r2, r2, r3
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b9e8:	6878      	ldr	r0, [r7, #4]
 801b9ea:	f7ff ff9b 	bl	801b924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	61fb      	str	r3, [r7, #28]
 801b9f2:	e004      	b.n	801b9fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b9f4:	683b      	ldr	r3, [r7, #0]
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b9fe:	f000 ff71 	bl	801c8e4 <vPortExitCritical>

	return xReturn;
 801ba02:	69fb      	ldr	r3, [r7, #28]
}
 801ba04:	4618      	mov	r0, r3
 801ba06:	3720      	adds	r7, #32
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	bd80      	pop	{r7, pc}
 801ba0c:	24006390 	.word	0x24006390
 801ba10:	240063a4 	.word	0x240063a4

0801ba14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801ba14:	b480      	push	{r7}
 801ba16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801ba18:	4b03      	ldr	r3, [pc, #12]	; (801ba28 <vTaskMissedYield+0x14>)
 801ba1a:	2201      	movs	r2, #1
 801ba1c:	601a      	str	r2, [r3, #0]
}
 801ba1e:	bf00      	nop
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	240063a0 	.word	0x240063a0

0801ba2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b082      	sub	sp, #8
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801ba34:	f000 f84c 	bl	801bad0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 801ba38:	4b04      	ldr	r3, [pc, #16]	; (801ba4c <prvIdleTask+0x20>)
 801ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ba3e:	601a      	str	r2, [r3, #0]
 801ba40:	f3bf 8f4f 	dsb	sy
 801ba44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801ba48:	e7f4      	b.n	801ba34 <prvIdleTask+0x8>
 801ba4a:	bf00      	nop
 801ba4c:	e000ed04 	.word	0xe000ed04

0801ba50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b082      	sub	sp, #8
 801ba54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ba56:	2300      	movs	r3, #0
 801ba58:	607b      	str	r3, [r7, #4]
 801ba5a:	e00c      	b.n	801ba76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ba5c:	687a      	ldr	r2, [r7, #4]
 801ba5e:	4613      	mov	r3, r2
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	4413      	add	r3, r2
 801ba64:	009b      	lsls	r3, r3, #2
 801ba66:	4a12      	ldr	r2, [pc, #72]	; (801bab0 <prvInitialiseTaskLists+0x60>)
 801ba68:	4413      	add	r3, r2
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7fe fad4 	bl	801a018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	3301      	adds	r3, #1
 801ba74:	607b      	str	r3, [r7, #4]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	2b37      	cmp	r3, #55	; 0x37
 801ba7a:	d9ef      	bls.n	801ba5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801ba7c:	480d      	ldr	r0, [pc, #52]	; (801bab4 <prvInitialiseTaskLists+0x64>)
 801ba7e:	f7fe facb 	bl	801a018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801ba82:	480d      	ldr	r0, [pc, #52]	; (801bab8 <prvInitialiseTaskLists+0x68>)
 801ba84:	f7fe fac8 	bl	801a018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801ba88:	480c      	ldr	r0, [pc, #48]	; (801babc <prvInitialiseTaskLists+0x6c>)
 801ba8a:	f7fe fac5 	bl	801a018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801ba8e:	480c      	ldr	r0, [pc, #48]	; (801bac0 <prvInitialiseTaskLists+0x70>)
 801ba90:	f7fe fac2 	bl	801a018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801ba94:	480b      	ldr	r0, [pc, #44]	; (801bac4 <prvInitialiseTaskLists+0x74>)
 801ba96:	f7fe fabf 	bl	801a018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801ba9a:	4b0b      	ldr	r3, [pc, #44]	; (801bac8 <prvInitialiseTaskLists+0x78>)
 801ba9c:	4a05      	ldr	r2, [pc, #20]	; (801bab4 <prvInitialiseTaskLists+0x64>)
 801ba9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801baa0:	4b0a      	ldr	r3, [pc, #40]	; (801bacc <prvInitialiseTaskLists+0x7c>)
 801baa2:	4a05      	ldr	r2, [pc, #20]	; (801bab8 <prvInitialiseTaskLists+0x68>)
 801baa4:	601a      	str	r2, [r3, #0]
}
 801baa6:	bf00      	nop
 801baa8:	3708      	adds	r7, #8
 801baaa:	46bd      	mov	sp, r7
 801baac:	bd80      	pop	{r7, pc}
 801baae:	bf00      	nop
 801bab0:	24005ebc 	.word	0x24005ebc
 801bab4:	2400631c 	.word	0x2400631c
 801bab8:	24006330 	.word	0x24006330
 801babc:	2400634c 	.word	0x2400634c
 801bac0:	24006360 	.word	0x24006360
 801bac4:	24006378 	.word	0x24006378
 801bac8:	24006344 	.word	0x24006344
 801bacc:	24006348 	.word	0x24006348

0801bad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b082      	sub	sp, #8
 801bad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bad6:	e019      	b.n	801bb0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801bad8:	f000 fed4 	bl	801c884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801badc:	4b10      	ldr	r3, [pc, #64]	; (801bb20 <prvCheckTasksWaitingTermination+0x50>)
 801bade:	68db      	ldr	r3, [r3, #12]
 801bae0:	68db      	ldr	r3, [r3, #12]
 801bae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	3304      	adds	r3, #4
 801bae8:	4618      	mov	r0, r3
 801baea:	f7fe fb1f 	bl	801a12c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801baee:	4b0d      	ldr	r3, [pc, #52]	; (801bb24 <prvCheckTasksWaitingTermination+0x54>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	3b01      	subs	r3, #1
 801baf4:	4a0b      	ldr	r2, [pc, #44]	; (801bb24 <prvCheckTasksWaitingTermination+0x54>)
 801baf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801baf8:	4b0b      	ldr	r3, [pc, #44]	; (801bb28 <prvCheckTasksWaitingTermination+0x58>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	3b01      	subs	r3, #1
 801bafe:	4a0a      	ldr	r2, [pc, #40]	; (801bb28 <prvCheckTasksWaitingTermination+0x58>)
 801bb00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801bb02:	f000 feef 	bl	801c8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bb06:	6878      	ldr	r0, [r7, #4]
 801bb08:	f000 f810 	bl	801bb2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bb0c:	4b06      	ldr	r3, [pc, #24]	; (801bb28 <prvCheckTasksWaitingTermination+0x58>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d1e1      	bne.n	801bad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bb14:	bf00      	nop
 801bb16:	bf00      	nop
 801bb18:	3708      	adds	r7, #8
 801bb1a:	46bd      	mov	sp, r7
 801bb1c:	bd80      	pop	{r7, pc}
 801bb1e:	bf00      	nop
 801bb20:	24006360 	.word	0x24006360
 801bb24:	2400638c 	.word	0x2400638c
 801bb28:	24006374 	.word	0x24006374

0801bb2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b084      	sub	sp, #16
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d108      	bne.n	801bb50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb42:	4618      	mov	r0, r3
 801bb44:	f001 f88c 	bl	801cc60 <vPortFree>
				vPortFree( pxTCB );
 801bb48:	6878      	ldr	r0, [r7, #4]
 801bb4a:	f001 f889 	bl	801cc60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801bb4e:	e018      	b.n	801bb82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801bb56:	2b01      	cmp	r3, #1
 801bb58:	d103      	bne.n	801bb62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801bb5a:	6878      	ldr	r0, [r7, #4]
 801bb5c:	f001 f880 	bl	801cc60 <vPortFree>
	}
 801bb60:	e00f      	b.n	801bb82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801bb68:	2b02      	cmp	r3, #2
 801bb6a:	d00a      	beq.n	801bb82 <prvDeleteTCB+0x56>
	__asm volatile
 801bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb70:	f383 8811 	msr	BASEPRI, r3
 801bb74:	f3bf 8f6f 	isb	sy
 801bb78:	f3bf 8f4f 	dsb	sy
 801bb7c:	60fb      	str	r3, [r7, #12]
}
 801bb7e:	bf00      	nop
 801bb80:	e7fe      	b.n	801bb80 <prvDeleteTCB+0x54>
	}
 801bb82:	bf00      	nop
 801bb84:	3710      	adds	r7, #16
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd80      	pop	{r7, pc}
	...

0801bb8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801bb8c:	b480      	push	{r7}
 801bb8e:	b083      	sub	sp, #12
 801bb90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bb92:	4b0c      	ldr	r3, [pc, #48]	; (801bbc4 <prvResetNextTaskUnblockTime+0x38>)
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d104      	bne.n	801bba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801bb9c:	4b0a      	ldr	r3, [pc, #40]	; (801bbc8 <prvResetNextTaskUnblockTime+0x3c>)
 801bb9e:	f04f 32ff 	mov.w	r2, #4294967295
 801bba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801bba4:	e008      	b.n	801bbb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bba6:	4b07      	ldr	r3, [pc, #28]	; (801bbc4 <prvResetNextTaskUnblockTime+0x38>)
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	68db      	ldr	r3, [r3, #12]
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	685b      	ldr	r3, [r3, #4]
 801bbb4:	4a04      	ldr	r2, [pc, #16]	; (801bbc8 <prvResetNextTaskUnblockTime+0x3c>)
 801bbb6:	6013      	str	r3, [r2, #0]
}
 801bbb8:	bf00      	nop
 801bbba:	370c      	adds	r7, #12
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc2:	4770      	bx	lr
 801bbc4:	24006344 	.word	0x24006344
 801bbc8:	240063ac 	.word	0x240063ac

0801bbcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801bbcc:	b480      	push	{r7}
 801bbce:	b083      	sub	sp, #12
 801bbd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801bbd2:	4b0b      	ldr	r3, [pc, #44]	; (801bc00 <xTaskGetSchedulerState+0x34>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d102      	bne.n	801bbe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801bbda:	2301      	movs	r3, #1
 801bbdc:	607b      	str	r3, [r7, #4]
 801bbde:	e008      	b.n	801bbf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bbe0:	4b08      	ldr	r3, [pc, #32]	; (801bc04 <xTaskGetSchedulerState+0x38>)
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d102      	bne.n	801bbee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801bbe8:	2302      	movs	r3, #2
 801bbea:	607b      	str	r3, [r7, #4]
 801bbec:	e001      	b.n	801bbf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801bbee:	2300      	movs	r3, #0
 801bbf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801bbf2:	687b      	ldr	r3, [r7, #4]
	}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	370c      	adds	r7, #12
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbfe:	4770      	bx	lr
 801bc00:	24006398 	.word	0x24006398
 801bc04:	240063b4 	.word	0x240063b4

0801bc08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801bc14:	2300      	movs	r3, #0
 801bc16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d051      	beq.n	801bcc2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc22:	4b2a      	ldr	r3, [pc, #168]	; (801bccc <xTaskPriorityInherit+0xc4>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d241      	bcs.n	801bcb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	699b      	ldr	r3, [r3, #24]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	db06      	blt.n	801bc42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bc34:	4b25      	ldr	r3, [pc, #148]	; (801bccc <xTaskPriorityInherit+0xc4>)
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801bc3e:	68bb      	ldr	r3, [r7, #8]
 801bc40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	6959      	ldr	r1, [r3, #20]
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc4a:	4613      	mov	r3, r2
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	4413      	add	r3, r2
 801bc50:	009b      	lsls	r3, r3, #2
 801bc52:	4a1f      	ldr	r2, [pc, #124]	; (801bcd0 <xTaskPriorityInherit+0xc8>)
 801bc54:	4413      	add	r3, r2
 801bc56:	4299      	cmp	r1, r3
 801bc58:	d122      	bne.n	801bca0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	3304      	adds	r3, #4
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f7fe fa64 	bl	801a12c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bc64:	4b19      	ldr	r3, [pc, #100]	; (801bccc <xTaskPriorityInherit+0xc4>)
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801bc6e:	68bb      	ldr	r3, [r7, #8]
 801bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc72:	4b18      	ldr	r3, [pc, #96]	; (801bcd4 <xTaskPriorityInherit+0xcc>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	429a      	cmp	r2, r3
 801bc78:	d903      	bls.n	801bc82 <xTaskPriorityInherit+0x7a>
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc7e:	4a15      	ldr	r2, [pc, #84]	; (801bcd4 <xTaskPriorityInherit+0xcc>)
 801bc80:	6013      	str	r3, [r2, #0]
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc86:	4613      	mov	r3, r2
 801bc88:	009b      	lsls	r3, r3, #2
 801bc8a:	4413      	add	r3, r2
 801bc8c:	009b      	lsls	r3, r3, #2
 801bc8e:	4a10      	ldr	r2, [pc, #64]	; (801bcd0 <xTaskPriorityInherit+0xc8>)
 801bc90:	441a      	add	r2, r3
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	3304      	adds	r3, #4
 801bc96:	4619      	mov	r1, r3
 801bc98:	4610      	mov	r0, r2
 801bc9a:	f7fe f9ea 	bl	801a072 <vListInsertEnd>
 801bc9e:	e004      	b.n	801bcaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bca0:	4b0a      	ldr	r3, [pc, #40]	; (801bccc <xTaskPriorityInherit+0xc4>)
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801bcaa:	2301      	movs	r3, #1
 801bcac:	60fb      	str	r3, [r7, #12]
 801bcae:	e008      	b.n	801bcc2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bcb0:	68bb      	ldr	r3, [r7, #8]
 801bcb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bcb4:	4b05      	ldr	r3, [pc, #20]	; (801bccc <xTaskPriorityInherit+0xc4>)
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d201      	bcs.n	801bcc2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bcc2:	68fb      	ldr	r3, [r7, #12]
	}
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	3710      	adds	r7, #16
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	24005eb8 	.word	0x24005eb8
 801bcd0:	24005ebc 	.word	0x24005ebc
 801bcd4:	24006394 	.word	0x24006394

0801bcd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b086      	sub	sp, #24
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bce4:	2300      	movs	r3, #0
 801bce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d056      	beq.n	801bd9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bcee:	4b2e      	ldr	r3, [pc, #184]	; (801bda8 <xTaskPriorityDisinherit+0xd0>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	693a      	ldr	r2, [r7, #16]
 801bcf4:	429a      	cmp	r2, r3
 801bcf6:	d00a      	beq.n	801bd0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801bcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcfc:	f383 8811 	msr	BASEPRI, r3
 801bd00:	f3bf 8f6f 	isb	sy
 801bd04:	f3bf 8f4f 	dsb	sy
 801bd08:	60fb      	str	r3, [r7, #12]
}
 801bd0a:	bf00      	nop
 801bd0c:	e7fe      	b.n	801bd0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bd0e:	693b      	ldr	r3, [r7, #16]
 801bd10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d10a      	bne.n	801bd2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801bd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd1a:	f383 8811 	msr	BASEPRI, r3
 801bd1e:	f3bf 8f6f 	isb	sy
 801bd22:	f3bf 8f4f 	dsb	sy
 801bd26:	60bb      	str	r3, [r7, #8]
}
 801bd28:	bf00      	nop
 801bd2a:	e7fe      	b.n	801bd2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801bd2c:	693b      	ldr	r3, [r7, #16]
 801bd2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd30:	1e5a      	subs	r2, r3, #1
 801bd32:	693b      	ldr	r3, [r7, #16]
 801bd34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bd36:	693b      	ldr	r3, [r7, #16]
 801bd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bd3e:	429a      	cmp	r2, r3
 801bd40:	d02c      	beq.n	801bd9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d128      	bne.n	801bd9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bd4a:	693b      	ldr	r3, [r7, #16]
 801bd4c:	3304      	adds	r3, #4
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7fe f9ec 	bl	801a12c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801bd58:	693b      	ldr	r3, [r7, #16]
 801bd5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bd5c:	693b      	ldr	r3, [r7, #16]
 801bd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801bd64:	693b      	ldr	r3, [r7, #16]
 801bd66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bd68:	693b      	ldr	r3, [r7, #16]
 801bd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd6c:	4b0f      	ldr	r3, [pc, #60]	; (801bdac <xTaskPriorityDisinherit+0xd4>)
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	429a      	cmp	r2, r3
 801bd72:	d903      	bls.n	801bd7c <xTaskPriorityDisinherit+0xa4>
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd78:	4a0c      	ldr	r2, [pc, #48]	; (801bdac <xTaskPriorityDisinherit+0xd4>)
 801bd7a:	6013      	str	r3, [r2, #0]
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd80:	4613      	mov	r3, r2
 801bd82:	009b      	lsls	r3, r3, #2
 801bd84:	4413      	add	r3, r2
 801bd86:	009b      	lsls	r3, r3, #2
 801bd88:	4a09      	ldr	r2, [pc, #36]	; (801bdb0 <xTaskPriorityDisinherit+0xd8>)
 801bd8a:	441a      	add	r2, r3
 801bd8c:	693b      	ldr	r3, [r7, #16]
 801bd8e:	3304      	adds	r3, #4
 801bd90:	4619      	mov	r1, r3
 801bd92:	4610      	mov	r0, r2
 801bd94:	f7fe f96d 	bl	801a072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bd98:	2301      	movs	r3, #1
 801bd9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bd9c:	697b      	ldr	r3, [r7, #20]
	}
 801bd9e:	4618      	mov	r0, r3
 801bda0:	3718      	adds	r7, #24
 801bda2:	46bd      	mov	sp, r7
 801bda4:	bd80      	pop	{r7, pc}
 801bda6:	bf00      	nop
 801bda8:	24005eb8 	.word	0x24005eb8
 801bdac:	24006394 	.word	0x24006394
 801bdb0:	24005ebc 	.word	0x24005ebc

0801bdb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b088      	sub	sp, #32
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d06a      	beq.n	801bea2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bdcc:	69bb      	ldr	r3, [r7, #24]
 801bdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d10a      	bne.n	801bdea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdd8:	f383 8811 	msr	BASEPRI, r3
 801bddc:	f3bf 8f6f 	isb	sy
 801bde0:	f3bf 8f4f 	dsb	sy
 801bde4:	60fb      	str	r3, [r7, #12]
}
 801bde6:	bf00      	nop
 801bde8:	e7fe      	b.n	801bde8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bdea:	69bb      	ldr	r3, [r7, #24]
 801bdec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bdee:	683a      	ldr	r2, [r7, #0]
 801bdf0:	429a      	cmp	r2, r3
 801bdf2:	d902      	bls.n	801bdfa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	61fb      	str	r3, [r7, #28]
 801bdf8:	e002      	b.n	801be00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bdfa:	69bb      	ldr	r3, [r7, #24]
 801bdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bdfe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801be00:	69bb      	ldr	r3, [r7, #24]
 801be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be04:	69fa      	ldr	r2, [r7, #28]
 801be06:	429a      	cmp	r2, r3
 801be08:	d04b      	beq.n	801bea2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801be0a:	69bb      	ldr	r3, [r7, #24]
 801be0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be0e:	697a      	ldr	r2, [r7, #20]
 801be10:	429a      	cmp	r2, r3
 801be12:	d146      	bne.n	801bea2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801be14:	4b25      	ldr	r3, [pc, #148]	; (801beac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	69ba      	ldr	r2, [r7, #24]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d10a      	bne.n	801be34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be22:	f383 8811 	msr	BASEPRI, r3
 801be26:	f3bf 8f6f 	isb	sy
 801be2a:	f3bf 8f4f 	dsb	sy
 801be2e:	60bb      	str	r3, [r7, #8]
}
 801be30:	bf00      	nop
 801be32:	e7fe      	b.n	801be32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801be34:	69bb      	ldr	r3, [r7, #24]
 801be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801be3a:	69bb      	ldr	r3, [r7, #24]
 801be3c:	69fa      	ldr	r2, [r7, #28]
 801be3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801be40:	69bb      	ldr	r3, [r7, #24]
 801be42:	699b      	ldr	r3, [r3, #24]
 801be44:	2b00      	cmp	r3, #0
 801be46:	db04      	blt.n	801be52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801be48:	69fb      	ldr	r3, [r7, #28]
 801be4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801be4e:	69bb      	ldr	r3, [r7, #24]
 801be50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801be52:	69bb      	ldr	r3, [r7, #24]
 801be54:	6959      	ldr	r1, [r3, #20]
 801be56:	693a      	ldr	r2, [r7, #16]
 801be58:	4613      	mov	r3, r2
 801be5a:	009b      	lsls	r3, r3, #2
 801be5c:	4413      	add	r3, r2
 801be5e:	009b      	lsls	r3, r3, #2
 801be60:	4a13      	ldr	r2, [pc, #76]	; (801beb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801be62:	4413      	add	r3, r2
 801be64:	4299      	cmp	r1, r3
 801be66:	d11c      	bne.n	801bea2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801be68:	69bb      	ldr	r3, [r7, #24]
 801be6a:	3304      	adds	r3, #4
 801be6c:	4618      	mov	r0, r3
 801be6e:	f7fe f95d 	bl	801a12c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be76:	4b0f      	ldr	r3, [pc, #60]	; (801beb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	429a      	cmp	r2, r3
 801be7c:	d903      	bls.n	801be86 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801be7e:	69bb      	ldr	r3, [r7, #24]
 801be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be82:	4a0c      	ldr	r2, [pc, #48]	; (801beb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801be84:	6013      	str	r3, [r2, #0]
 801be86:	69bb      	ldr	r3, [r7, #24]
 801be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be8a:	4613      	mov	r3, r2
 801be8c:	009b      	lsls	r3, r3, #2
 801be8e:	4413      	add	r3, r2
 801be90:	009b      	lsls	r3, r3, #2
 801be92:	4a07      	ldr	r2, [pc, #28]	; (801beb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801be94:	441a      	add	r2, r3
 801be96:	69bb      	ldr	r3, [r7, #24]
 801be98:	3304      	adds	r3, #4
 801be9a:	4619      	mov	r1, r3
 801be9c:	4610      	mov	r0, r2
 801be9e:	f7fe f8e8 	bl	801a072 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801bea2:	bf00      	nop
 801bea4:	3720      	adds	r7, #32
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	bf00      	nop
 801beac:	24005eb8 	.word	0x24005eb8
 801beb0:	24005ebc 	.word	0x24005ebc
 801beb4:	24006394 	.word	0x24006394

0801beb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801beb8:	b480      	push	{r7}
 801beba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bebc:	4b07      	ldr	r3, [pc, #28]	; (801bedc <pvTaskIncrementMutexHeldCount+0x24>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d004      	beq.n	801bece <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bec4:	4b05      	ldr	r3, [pc, #20]	; (801bedc <pvTaskIncrementMutexHeldCount+0x24>)
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801beca:	3201      	adds	r2, #1
 801becc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801bece:	4b03      	ldr	r3, [pc, #12]	; (801bedc <pvTaskIncrementMutexHeldCount+0x24>)
 801bed0:	681b      	ldr	r3, [r3, #0]
	}
 801bed2:	4618      	mov	r0, r3
 801bed4:	46bd      	mov	sp, r7
 801bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beda:	4770      	bx	lr
 801bedc:	24005eb8 	.word	0x24005eb8

0801bee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b084      	sub	sp, #16
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
 801bee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801beea:	4b21      	ldr	r3, [pc, #132]	; (801bf70 <prvAddCurrentTaskToDelayedList+0x90>)
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bef0:	4b20      	ldr	r3, [pc, #128]	; (801bf74 <prvAddCurrentTaskToDelayedList+0x94>)
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	3304      	adds	r3, #4
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7fe f918 	bl	801a12c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf02:	d10a      	bne.n	801bf1a <prvAddCurrentTaskToDelayedList+0x3a>
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d007      	beq.n	801bf1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf0a:	4b1a      	ldr	r3, [pc, #104]	; (801bf74 <prvAddCurrentTaskToDelayedList+0x94>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	3304      	adds	r3, #4
 801bf10:	4619      	mov	r1, r3
 801bf12:	4819      	ldr	r0, [pc, #100]	; (801bf78 <prvAddCurrentTaskToDelayedList+0x98>)
 801bf14:	f7fe f8ad 	bl	801a072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bf18:	e026      	b.n	801bf68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bf1a:	68fa      	ldr	r2, [r7, #12]
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	4413      	add	r3, r2
 801bf20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bf22:	4b14      	ldr	r3, [pc, #80]	; (801bf74 <prvAddCurrentTaskToDelayedList+0x94>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	68ba      	ldr	r2, [r7, #8]
 801bf28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bf2a:	68ba      	ldr	r2, [r7, #8]
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	d209      	bcs.n	801bf46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf32:	4b12      	ldr	r3, [pc, #72]	; (801bf7c <prvAddCurrentTaskToDelayedList+0x9c>)
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	4b0f      	ldr	r3, [pc, #60]	; (801bf74 <prvAddCurrentTaskToDelayedList+0x94>)
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	3304      	adds	r3, #4
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	4610      	mov	r0, r2
 801bf40:	f7fe f8bb 	bl	801a0ba <vListInsert>
}
 801bf44:	e010      	b.n	801bf68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf46:	4b0e      	ldr	r3, [pc, #56]	; (801bf80 <prvAddCurrentTaskToDelayedList+0xa0>)
 801bf48:	681a      	ldr	r2, [r3, #0]
 801bf4a:	4b0a      	ldr	r3, [pc, #40]	; (801bf74 <prvAddCurrentTaskToDelayedList+0x94>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	3304      	adds	r3, #4
 801bf50:	4619      	mov	r1, r3
 801bf52:	4610      	mov	r0, r2
 801bf54:	f7fe f8b1 	bl	801a0ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bf58:	4b0a      	ldr	r3, [pc, #40]	; (801bf84 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	68ba      	ldr	r2, [r7, #8]
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	d202      	bcs.n	801bf68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801bf62:	4a08      	ldr	r2, [pc, #32]	; (801bf84 <prvAddCurrentTaskToDelayedList+0xa4>)
 801bf64:	68bb      	ldr	r3, [r7, #8]
 801bf66:	6013      	str	r3, [r2, #0]
}
 801bf68:	bf00      	nop
 801bf6a:	3710      	adds	r7, #16
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}
 801bf70:	24006390 	.word	0x24006390
 801bf74:	24005eb8 	.word	0x24005eb8
 801bf78:	24006378 	.word	0x24006378
 801bf7c:	24006348 	.word	0x24006348
 801bf80:	24006344 	.word	0x24006344
 801bf84:	240063ac 	.word	0x240063ac

0801bf88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b08a      	sub	sp, #40	; 0x28
 801bf8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bf8e:	2300      	movs	r3, #0
 801bf90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bf92:	f000 fb07 	bl	801c5a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bf96:	4b1c      	ldr	r3, [pc, #112]	; (801c008 <xTimerCreateTimerTask+0x80>)
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d021      	beq.n	801bfe2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bfa6:	1d3a      	adds	r2, r7, #4
 801bfa8:	f107 0108 	add.w	r1, r7, #8
 801bfac:	f107 030c 	add.w	r3, r7, #12
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7fe f817 	bl	8019fe4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bfb6:	6879      	ldr	r1, [r7, #4]
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	68fa      	ldr	r2, [r7, #12]
 801bfbc:	9202      	str	r2, [sp, #8]
 801bfbe:	9301      	str	r3, [sp, #4]
 801bfc0:	2302      	movs	r3, #2
 801bfc2:	9300      	str	r3, [sp, #0]
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	460a      	mov	r2, r1
 801bfc8:	4910      	ldr	r1, [pc, #64]	; (801c00c <xTimerCreateTimerTask+0x84>)
 801bfca:	4811      	ldr	r0, [pc, #68]	; (801c010 <xTimerCreateTimerTask+0x88>)
 801bfcc:	f7ff f828 	bl	801b020 <xTaskCreateStatic>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	4a10      	ldr	r2, [pc, #64]	; (801c014 <xTimerCreateTimerTask+0x8c>)
 801bfd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bfd6:	4b0f      	ldr	r3, [pc, #60]	; (801c014 <xTimerCreateTimerTask+0x8c>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d001      	beq.n	801bfe2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bfde:	2301      	movs	r3, #1
 801bfe0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bfe2:	697b      	ldr	r3, [r7, #20]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d10a      	bne.n	801bffe <xTimerCreateTimerTask+0x76>
	__asm volatile
 801bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfec:	f383 8811 	msr	BASEPRI, r3
 801bff0:	f3bf 8f6f 	isb	sy
 801bff4:	f3bf 8f4f 	dsb	sy
 801bff8:	613b      	str	r3, [r7, #16]
}
 801bffa:	bf00      	nop
 801bffc:	e7fe      	b.n	801bffc <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bffe:	697b      	ldr	r3, [r7, #20]
}
 801c000:	4618      	mov	r0, r3
 801c002:	3718      	adds	r7, #24
 801c004:	46bd      	mov	sp, r7
 801c006:	bd80      	pop	{r7, pc}
 801c008:	240063e8 	.word	0x240063e8
 801c00c:	08020d5c 	.word	0x08020d5c
 801c010:	0801c14d 	.word	0x0801c14d
 801c014:	240063ec 	.word	0x240063ec

0801c018 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c018:	b580      	push	{r7, lr}
 801c01a:	b08a      	sub	sp, #40	; 0x28
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	60f8      	str	r0, [r7, #12]
 801c020:	60b9      	str	r1, [r7, #8]
 801c022:	607a      	str	r2, [r7, #4]
 801c024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c026:	2300      	movs	r3, #0
 801c028:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d10a      	bne.n	801c046 <xTimerGenericCommand+0x2e>
	__asm volatile
 801c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c034:	f383 8811 	msr	BASEPRI, r3
 801c038:	f3bf 8f6f 	isb	sy
 801c03c:	f3bf 8f4f 	dsb	sy
 801c040:	623b      	str	r3, [r7, #32]
}
 801c042:	bf00      	nop
 801c044:	e7fe      	b.n	801c044 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c046:	4b1a      	ldr	r3, [pc, #104]	; (801c0b0 <xTimerGenericCommand+0x98>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d02a      	beq.n	801c0a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c04e:	68bb      	ldr	r3, [r7, #8]
 801c050:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c05a:	68bb      	ldr	r3, [r7, #8]
 801c05c:	2b05      	cmp	r3, #5
 801c05e:	dc18      	bgt.n	801c092 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c060:	f7ff fdb4 	bl	801bbcc <xTaskGetSchedulerState>
 801c064:	4603      	mov	r3, r0
 801c066:	2b02      	cmp	r3, #2
 801c068:	d109      	bne.n	801c07e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c06a:	4b11      	ldr	r3, [pc, #68]	; (801c0b0 <xTimerGenericCommand+0x98>)
 801c06c:	6818      	ldr	r0, [r3, #0]
 801c06e:	f107 0110 	add.w	r1, r7, #16
 801c072:	2300      	movs	r3, #0
 801c074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c076:	f7fe fa1d 	bl	801a4b4 <xQueueGenericSend>
 801c07a:	6278      	str	r0, [r7, #36]	; 0x24
 801c07c:	e012      	b.n	801c0a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c07e:	4b0c      	ldr	r3, [pc, #48]	; (801c0b0 <xTimerGenericCommand+0x98>)
 801c080:	6818      	ldr	r0, [r3, #0]
 801c082:	f107 0110 	add.w	r1, r7, #16
 801c086:	2300      	movs	r3, #0
 801c088:	2200      	movs	r2, #0
 801c08a:	f7fe fa13 	bl	801a4b4 <xQueueGenericSend>
 801c08e:	6278      	str	r0, [r7, #36]	; 0x24
 801c090:	e008      	b.n	801c0a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c092:	4b07      	ldr	r3, [pc, #28]	; (801c0b0 <xTimerGenericCommand+0x98>)
 801c094:	6818      	ldr	r0, [r3, #0]
 801c096:	f107 0110 	add.w	r1, r7, #16
 801c09a:	2300      	movs	r3, #0
 801c09c:	683a      	ldr	r2, [r7, #0]
 801c09e:	f7fe faef 	bl	801a680 <xQueueGenericSendFromISR>
 801c0a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	3728      	adds	r7, #40	; 0x28
 801c0aa:	46bd      	mov	sp, r7
 801c0ac:	bd80      	pop	{r7, pc}
 801c0ae:	bf00      	nop
 801c0b0:	240063e8 	.word	0x240063e8

0801c0b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b088      	sub	sp, #32
 801c0b8:	af02      	add	r7, sp, #8
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c0be:	4b22      	ldr	r3, [pc, #136]	; (801c148 <prvProcessExpiredTimer+0x94>)
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	68db      	ldr	r3, [r3, #12]
 801c0c4:	68db      	ldr	r3, [r3, #12]
 801c0c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c0c8:	697b      	ldr	r3, [r7, #20]
 801c0ca:	3304      	adds	r3, #4
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f7fe f82d 	bl	801a12c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c0d2:	697b      	ldr	r3, [r7, #20]
 801c0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c0d8:	f003 0304 	and.w	r3, r3, #4
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d022      	beq.n	801c126 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	699a      	ldr	r2, [r3, #24]
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	18d1      	adds	r1, r2, r3
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	683a      	ldr	r2, [r7, #0]
 801c0ec:	6978      	ldr	r0, [r7, #20]
 801c0ee:	f000 f8d1 	bl	801c294 <prvInsertTimerInActiveList>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d01f      	beq.n	801c138 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	9300      	str	r3, [sp, #0]
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	2100      	movs	r1, #0
 801c102:	6978      	ldr	r0, [r7, #20]
 801c104:	f7ff ff88 	bl	801c018 <xTimerGenericCommand>
 801c108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c10a:	693b      	ldr	r3, [r7, #16]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d113      	bne.n	801c138 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c114:	f383 8811 	msr	BASEPRI, r3
 801c118:	f3bf 8f6f 	isb	sy
 801c11c:	f3bf 8f4f 	dsb	sy
 801c120:	60fb      	str	r3, [r7, #12]
}
 801c122:	bf00      	nop
 801c124:	e7fe      	b.n	801c124 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c126:	697b      	ldr	r3, [r7, #20]
 801c128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c12c:	f023 0301 	bic.w	r3, r3, #1
 801c130:	b2da      	uxtb	r2, r3
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	6a1b      	ldr	r3, [r3, #32]
 801c13c:	6978      	ldr	r0, [r7, #20]
 801c13e:	4798      	blx	r3
}
 801c140:	bf00      	nop
 801c142:	3718      	adds	r7, #24
 801c144:	46bd      	mov	sp, r7
 801c146:	bd80      	pop	{r7, pc}
 801c148:	240063e0 	.word	0x240063e0

0801c14c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b084      	sub	sp, #16
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c154:	f107 0308 	add.w	r3, r7, #8
 801c158:	4618      	mov	r0, r3
 801c15a:	f000 f857 	bl	801c20c <prvGetNextExpireTime>
 801c15e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c160:	68bb      	ldr	r3, [r7, #8]
 801c162:	4619      	mov	r1, r3
 801c164:	68f8      	ldr	r0, [r7, #12]
 801c166:	f000 f803 	bl	801c170 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c16a:	f000 f8d5 	bl	801c318 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c16e:	e7f1      	b.n	801c154 <prvTimerTask+0x8>

0801c170 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
 801c178:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c17a:	f7ff f97d 	bl	801b478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c17e:	f107 0308 	add.w	r3, r7, #8
 801c182:	4618      	mov	r0, r3
 801c184:	f000 f866 	bl	801c254 <prvSampleTimeNow>
 801c188:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c18a:	68bb      	ldr	r3, [r7, #8]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d130      	bne.n	801c1f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c190:	683b      	ldr	r3, [r7, #0]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d10a      	bne.n	801c1ac <prvProcessTimerOrBlockTask+0x3c>
 801c196:	687a      	ldr	r2, [r7, #4]
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d806      	bhi.n	801c1ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c19e:	f7ff f979 	bl	801b494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c1a2:	68f9      	ldr	r1, [r7, #12]
 801c1a4:	6878      	ldr	r0, [r7, #4]
 801c1a6:	f7ff ff85 	bl	801c0b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c1aa:	e024      	b.n	801c1f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d008      	beq.n	801c1c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c1b2:	4b13      	ldr	r3, [pc, #76]	; (801c200 <prvProcessTimerOrBlockTask+0x90>)
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d101      	bne.n	801c1c0 <prvProcessTimerOrBlockTask+0x50>
 801c1bc:	2301      	movs	r3, #1
 801c1be:	e000      	b.n	801c1c2 <prvProcessTimerOrBlockTask+0x52>
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c1c4:	4b0f      	ldr	r3, [pc, #60]	; (801c204 <prvProcessTimerOrBlockTask+0x94>)
 801c1c6:	6818      	ldr	r0, [r3, #0]
 801c1c8:	687a      	ldr	r2, [r7, #4]
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	1ad3      	subs	r3, r2, r3
 801c1ce:	683a      	ldr	r2, [r7, #0]
 801c1d0:	4619      	mov	r1, r3
 801c1d2:	f7fe fef1 	bl	801afb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c1d6:	f7ff f95d 	bl	801b494 <xTaskResumeAll>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d10a      	bne.n	801c1f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c1e0:	4b09      	ldr	r3, [pc, #36]	; (801c208 <prvProcessTimerOrBlockTask+0x98>)
 801c1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c1e6:	601a      	str	r2, [r3, #0]
 801c1e8:	f3bf 8f4f 	dsb	sy
 801c1ec:	f3bf 8f6f 	isb	sy
}
 801c1f0:	e001      	b.n	801c1f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c1f2:	f7ff f94f 	bl	801b494 <xTaskResumeAll>
}
 801c1f6:	bf00      	nop
 801c1f8:	3710      	adds	r7, #16
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	240063e4 	.word	0x240063e4
 801c204:	240063e8 	.word	0x240063e8
 801c208:	e000ed04 	.word	0xe000ed04

0801c20c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c20c:	b480      	push	{r7}
 801c20e:	b085      	sub	sp, #20
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c214:	4b0e      	ldr	r3, [pc, #56]	; (801c250 <prvGetNextExpireTime+0x44>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d101      	bne.n	801c222 <prvGetNextExpireTime+0x16>
 801c21e:	2201      	movs	r2, #1
 801c220:	e000      	b.n	801c224 <prvGetNextExpireTime+0x18>
 801c222:	2200      	movs	r2, #0
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d105      	bne.n	801c23c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c230:	4b07      	ldr	r3, [pc, #28]	; (801c250 <prvGetNextExpireTime+0x44>)
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	68db      	ldr	r3, [r3, #12]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	60fb      	str	r3, [r7, #12]
 801c23a:	e001      	b.n	801c240 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c23c:	2300      	movs	r3, #0
 801c23e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c240:	68fb      	ldr	r3, [r7, #12]
}
 801c242:	4618      	mov	r0, r3
 801c244:	3714      	adds	r7, #20
 801c246:	46bd      	mov	sp, r7
 801c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c24c:	4770      	bx	lr
 801c24e:	bf00      	nop
 801c250:	240063e0 	.word	0x240063e0

0801c254 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c254:	b580      	push	{r7, lr}
 801c256:	b084      	sub	sp, #16
 801c258:	af00      	add	r7, sp, #0
 801c25a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c25c:	f7ff f9aa 	bl	801b5b4 <xTaskGetTickCount>
 801c260:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c262:	4b0b      	ldr	r3, [pc, #44]	; (801c290 <prvSampleTimeNow+0x3c>)
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	68fa      	ldr	r2, [r7, #12]
 801c268:	429a      	cmp	r2, r3
 801c26a:	d205      	bcs.n	801c278 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c26c:	f000 f936 	bl	801c4dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	2201      	movs	r2, #1
 801c274:	601a      	str	r2, [r3, #0]
 801c276:	e002      	b.n	801c27e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2200      	movs	r2, #0
 801c27c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c27e:	4a04      	ldr	r2, [pc, #16]	; (801c290 <prvSampleTimeNow+0x3c>)
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c284:	68fb      	ldr	r3, [r7, #12]
}
 801c286:	4618      	mov	r0, r3
 801c288:	3710      	adds	r7, #16
 801c28a:	46bd      	mov	sp, r7
 801c28c:	bd80      	pop	{r7, pc}
 801c28e:	bf00      	nop
 801c290:	240063f0 	.word	0x240063f0

0801c294 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b086      	sub	sp, #24
 801c298:	af00      	add	r7, sp, #0
 801c29a:	60f8      	str	r0, [r7, #12]
 801c29c:	60b9      	str	r1, [r7, #8]
 801c29e:	607a      	str	r2, [r7, #4]
 801c2a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	68ba      	ldr	r2, [r7, #8]
 801c2aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	68fa      	ldr	r2, [r7, #12]
 801c2b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c2b2:	68ba      	ldr	r2, [r7, #8]
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d812      	bhi.n	801c2e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c2ba:	687a      	ldr	r2, [r7, #4]
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	1ad2      	subs	r2, r2, r3
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	699b      	ldr	r3, [r3, #24]
 801c2c4:	429a      	cmp	r2, r3
 801c2c6:	d302      	bcc.n	801c2ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c2c8:	2301      	movs	r3, #1
 801c2ca:	617b      	str	r3, [r7, #20]
 801c2cc:	e01b      	b.n	801c306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c2ce:	4b10      	ldr	r3, [pc, #64]	; (801c310 <prvInsertTimerInActiveList+0x7c>)
 801c2d0:	681a      	ldr	r2, [r3, #0]
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	3304      	adds	r3, #4
 801c2d6:	4619      	mov	r1, r3
 801c2d8:	4610      	mov	r0, r2
 801c2da:	f7fd feee 	bl	801a0ba <vListInsert>
 801c2de:	e012      	b.n	801c306 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c2e0:	687a      	ldr	r2, [r7, #4]
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	429a      	cmp	r2, r3
 801c2e6:	d206      	bcs.n	801c2f6 <prvInsertTimerInActiveList+0x62>
 801c2e8:	68ba      	ldr	r2, [r7, #8]
 801c2ea:	683b      	ldr	r3, [r7, #0]
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d302      	bcc.n	801c2f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c2f0:	2301      	movs	r3, #1
 801c2f2:	617b      	str	r3, [r7, #20]
 801c2f4:	e007      	b.n	801c306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c2f6:	4b07      	ldr	r3, [pc, #28]	; (801c314 <prvInsertTimerInActiveList+0x80>)
 801c2f8:	681a      	ldr	r2, [r3, #0]
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	3304      	adds	r3, #4
 801c2fe:	4619      	mov	r1, r3
 801c300:	4610      	mov	r0, r2
 801c302:	f7fd feda 	bl	801a0ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c306:	697b      	ldr	r3, [r7, #20]
}
 801c308:	4618      	mov	r0, r3
 801c30a:	3718      	adds	r7, #24
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}
 801c310:	240063e4 	.word	0x240063e4
 801c314:	240063e0 	.word	0x240063e0

0801c318 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b08e      	sub	sp, #56	; 0x38
 801c31c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c31e:	e0ca      	b.n	801c4b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	2b00      	cmp	r3, #0
 801c324:	da18      	bge.n	801c358 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801c326:	1d3b      	adds	r3, r7, #4
 801c328:	3304      	adds	r3, #4
 801c32a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d10a      	bne.n	801c348 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c336:	f383 8811 	msr	BASEPRI, r3
 801c33a:	f3bf 8f6f 	isb	sy
 801c33e:	f3bf 8f4f 	dsb	sy
 801c342:	61fb      	str	r3, [r7, #28]
}
 801c344:	bf00      	nop
 801c346:	e7fe      	b.n	801c346 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c34e:	6850      	ldr	r0, [r2, #4]
 801c350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c352:	6892      	ldr	r2, [r2, #8]
 801c354:	4611      	mov	r1, r2
 801c356:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f2c0 80ab 	blt.w	801c4b6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c366:	695b      	ldr	r3, [r3, #20]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d004      	beq.n	801c376 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c36e:	3304      	adds	r3, #4
 801c370:	4618      	mov	r0, r3
 801c372:	f7fd fedb 	bl	801a12c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c376:	463b      	mov	r3, r7
 801c378:	4618      	mov	r0, r3
 801c37a:	f7ff ff6b 	bl	801c254 <prvSampleTimeNow>
 801c37e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	2b09      	cmp	r3, #9
 801c384:	f200 8096 	bhi.w	801c4b4 <prvProcessReceivedCommands+0x19c>
 801c388:	a201      	add	r2, pc, #4	; (adr r2, 801c390 <prvProcessReceivedCommands+0x78>)
 801c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c38e:	bf00      	nop
 801c390:	0801c3b9 	.word	0x0801c3b9
 801c394:	0801c3b9 	.word	0x0801c3b9
 801c398:	0801c3b9 	.word	0x0801c3b9
 801c39c:	0801c42d 	.word	0x0801c42d
 801c3a0:	0801c441 	.word	0x0801c441
 801c3a4:	0801c48b 	.word	0x0801c48b
 801c3a8:	0801c3b9 	.word	0x0801c3b9
 801c3ac:	0801c3b9 	.word	0x0801c3b9
 801c3b0:	0801c42d 	.word	0x0801c42d
 801c3b4:	0801c441 	.word	0x0801c441
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c3be:	f043 0301 	orr.w	r3, r3, #1
 801c3c2:	b2da      	uxtb	r2, r3
 801c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c3ca:	68ba      	ldr	r2, [r7, #8]
 801c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3ce:	699b      	ldr	r3, [r3, #24]
 801c3d0:	18d1      	adds	r1, r2, r3
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c3d8:	f7ff ff5c 	bl	801c294 <prvInsertTimerInActiveList>
 801c3dc:	4603      	mov	r3, r0
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d069      	beq.n	801c4b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3e4:	6a1b      	ldr	r3, [r3, #32]
 801c3e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c3e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c3f0:	f003 0304 	and.w	r3, r3, #4
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d05e      	beq.n	801c4b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c3f8:	68ba      	ldr	r2, [r7, #8]
 801c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3fc:	699b      	ldr	r3, [r3, #24]
 801c3fe:	441a      	add	r2, r3
 801c400:	2300      	movs	r3, #0
 801c402:	9300      	str	r3, [sp, #0]
 801c404:	2300      	movs	r3, #0
 801c406:	2100      	movs	r1, #0
 801c408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c40a:	f7ff fe05 	bl	801c018 <xTimerGenericCommand>
 801c40e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801c410:	6a3b      	ldr	r3, [r7, #32]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d14f      	bne.n	801c4b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c41a:	f383 8811 	msr	BASEPRI, r3
 801c41e:	f3bf 8f6f 	isb	sy
 801c422:	f3bf 8f4f 	dsb	sy
 801c426:	61bb      	str	r3, [r7, #24]
}
 801c428:	bf00      	nop
 801c42a:	e7fe      	b.n	801c42a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c432:	f023 0301 	bic.w	r3, r3, #1
 801c436:	b2da      	uxtb	r2, r3
 801c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801c43e:	e03a      	b.n	801c4b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c446:	f043 0301 	orr.w	r3, r3, #1
 801c44a:	b2da      	uxtb	r2, r3
 801c44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c44e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c452:	68ba      	ldr	r2, [r7, #8]
 801c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c456:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c45a:	699b      	ldr	r3, [r3, #24]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d10a      	bne.n	801c476 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c464:	f383 8811 	msr	BASEPRI, r3
 801c468:	f3bf 8f6f 	isb	sy
 801c46c:	f3bf 8f4f 	dsb	sy
 801c470:	617b      	str	r3, [r7, #20]
}
 801c472:	bf00      	nop
 801c474:	e7fe      	b.n	801c474 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c478:	699a      	ldr	r2, [r3, #24]
 801c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c47c:	18d1      	adds	r1, r2, r3
 801c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c484:	f7ff ff06 	bl	801c294 <prvInsertTimerInActiveList>
					break;
 801c488:	e015      	b.n	801c4b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c48c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c490:	f003 0302 	and.w	r3, r3, #2
 801c494:	2b00      	cmp	r3, #0
 801c496:	d103      	bne.n	801c4a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801c498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c49a:	f000 fbe1 	bl	801cc60 <vPortFree>
 801c49e:	e00a      	b.n	801c4b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c4a6:	f023 0301 	bic.w	r3, r3, #1
 801c4aa:	b2da      	uxtb	r2, r3
 801c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c4b2:	e000      	b.n	801c4b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801c4b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c4b6:	4b08      	ldr	r3, [pc, #32]	; (801c4d8 <prvProcessReceivedCommands+0x1c0>)
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	1d39      	adds	r1, r7, #4
 801c4bc:	2200      	movs	r2, #0
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7fe fa06 	bl	801a8d0 <xQueueReceive>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	f47f af2a 	bne.w	801c320 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801c4cc:	bf00      	nop
 801c4ce:	bf00      	nop
 801c4d0:	3730      	adds	r7, #48	; 0x30
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
 801c4d6:	bf00      	nop
 801c4d8:	240063e8 	.word	0x240063e8

0801c4dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b088      	sub	sp, #32
 801c4e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c4e2:	e048      	b.n	801c576 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c4e4:	4b2d      	ldr	r3, [pc, #180]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	68db      	ldr	r3, [r3, #12]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c4ee:	4b2b      	ldr	r3, [pc, #172]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	68db      	ldr	r3, [r3, #12]
 801c4f4:	68db      	ldr	r3, [r3, #12]
 801c4f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	3304      	adds	r3, #4
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	f7fd fe15 	bl	801a12c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	6a1b      	ldr	r3, [r3, #32]
 801c506:	68f8      	ldr	r0, [r7, #12]
 801c508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801c510:	f003 0304 	and.w	r3, r3, #4
 801c514:	2b00      	cmp	r3, #0
 801c516:	d02e      	beq.n	801c576 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	699b      	ldr	r3, [r3, #24]
 801c51c:	693a      	ldr	r2, [r7, #16]
 801c51e:	4413      	add	r3, r2
 801c520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c522:	68ba      	ldr	r2, [r7, #8]
 801c524:	693b      	ldr	r3, [r7, #16]
 801c526:	429a      	cmp	r2, r3
 801c528:	d90e      	bls.n	801c548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	68ba      	ldr	r2, [r7, #8]
 801c52e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	68fa      	ldr	r2, [r7, #12]
 801c534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c536:	4b19      	ldr	r3, [pc, #100]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c538:	681a      	ldr	r2, [r3, #0]
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	3304      	adds	r3, #4
 801c53e:	4619      	mov	r1, r3
 801c540:	4610      	mov	r0, r2
 801c542:	f7fd fdba 	bl	801a0ba <vListInsert>
 801c546:	e016      	b.n	801c576 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c548:	2300      	movs	r3, #0
 801c54a:	9300      	str	r3, [sp, #0]
 801c54c:	2300      	movs	r3, #0
 801c54e:	693a      	ldr	r2, [r7, #16]
 801c550:	2100      	movs	r1, #0
 801c552:	68f8      	ldr	r0, [r7, #12]
 801c554:	f7ff fd60 	bl	801c018 <xTimerGenericCommand>
 801c558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d10a      	bne.n	801c576 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c564:	f383 8811 	msr	BASEPRI, r3
 801c568:	f3bf 8f6f 	isb	sy
 801c56c:	f3bf 8f4f 	dsb	sy
 801c570:	603b      	str	r3, [r7, #0]
}
 801c572:	bf00      	nop
 801c574:	e7fe      	b.n	801c574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c576:	4b09      	ldr	r3, [pc, #36]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d1b1      	bne.n	801c4e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c580:	4b06      	ldr	r3, [pc, #24]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c586:	4b06      	ldr	r3, [pc, #24]	; (801c5a0 <prvSwitchTimerLists+0xc4>)
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	4a04      	ldr	r2, [pc, #16]	; (801c59c <prvSwitchTimerLists+0xc0>)
 801c58c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c58e:	4a04      	ldr	r2, [pc, #16]	; (801c5a0 <prvSwitchTimerLists+0xc4>)
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	6013      	str	r3, [r2, #0]
}
 801c594:	bf00      	nop
 801c596:	3718      	adds	r7, #24
 801c598:	46bd      	mov	sp, r7
 801c59a:	bd80      	pop	{r7, pc}
 801c59c:	240063e0 	.word	0x240063e0
 801c5a0:	240063e4 	.word	0x240063e4

0801c5a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b082      	sub	sp, #8
 801c5a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c5aa:	f000 f96b 	bl	801c884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c5ae:	4b15      	ldr	r3, [pc, #84]	; (801c604 <prvCheckForValidListAndQueue+0x60>)
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d120      	bne.n	801c5f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c5b6:	4814      	ldr	r0, [pc, #80]	; (801c608 <prvCheckForValidListAndQueue+0x64>)
 801c5b8:	f7fd fd2e 	bl	801a018 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c5bc:	4813      	ldr	r0, [pc, #76]	; (801c60c <prvCheckForValidListAndQueue+0x68>)
 801c5be:	f7fd fd2b 	bl	801a018 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c5c2:	4b13      	ldr	r3, [pc, #76]	; (801c610 <prvCheckForValidListAndQueue+0x6c>)
 801c5c4:	4a10      	ldr	r2, [pc, #64]	; (801c608 <prvCheckForValidListAndQueue+0x64>)
 801c5c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c5c8:	4b12      	ldr	r3, [pc, #72]	; (801c614 <prvCheckForValidListAndQueue+0x70>)
 801c5ca:	4a10      	ldr	r2, [pc, #64]	; (801c60c <prvCheckForValidListAndQueue+0x68>)
 801c5cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	9300      	str	r3, [sp, #0]
 801c5d2:	4b11      	ldr	r3, [pc, #68]	; (801c618 <prvCheckForValidListAndQueue+0x74>)
 801c5d4:	4a11      	ldr	r2, [pc, #68]	; (801c61c <prvCheckForValidListAndQueue+0x78>)
 801c5d6:	2110      	movs	r1, #16
 801c5d8:	200a      	movs	r0, #10
 801c5da:	f7fd fe2c 	bl	801a236 <xQueueGenericCreateStatic>
 801c5de:	4603      	mov	r3, r0
 801c5e0:	4a08      	ldr	r2, [pc, #32]	; (801c604 <prvCheckForValidListAndQueue+0x60>)
 801c5e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c5e4:	4b07      	ldr	r3, [pc, #28]	; (801c604 <prvCheckForValidListAndQueue+0x60>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d005      	beq.n	801c5f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c5ec:	4b05      	ldr	r3, [pc, #20]	; (801c604 <prvCheckForValidListAndQueue+0x60>)
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	490b      	ldr	r1, [pc, #44]	; (801c620 <prvCheckForValidListAndQueue+0x7c>)
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f7fe fc8c 	bl	801af10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c5f8:	f000 f974 	bl	801c8e4 <vPortExitCritical>
}
 801c5fc:	bf00      	nop
 801c5fe:	46bd      	mov	sp, r7
 801c600:	bd80      	pop	{r7, pc}
 801c602:	bf00      	nop
 801c604:	240063e8 	.word	0x240063e8
 801c608:	240063b8 	.word	0x240063b8
 801c60c:	240063cc 	.word	0x240063cc
 801c610:	240063e0 	.word	0x240063e0
 801c614:	240063e4 	.word	0x240063e4
 801c618:	24006494 	.word	0x24006494
 801c61c:	240063f4 	.word	0x240063f4
 801c620:	08020d64 	.word	0x08020d64

0801c624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c624:	b480      	push	{r7}
 801c626:	b085      	sub	sp, #20
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	60b9      	str	r1, [r7, #8]
 801c62e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	3b04      	subs	r3, #4
 801c634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c63c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	3b04      	subs	r3, #4
 801c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c644:	68bb      	ldr	r3, [r7, #8]
 801c646:	f023 0201 	bic.w	r2, r3, #1
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	3b04      	subs	r3, #4
 801c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c654:	4a0c      	ldr	r2, [pc, #48]	; (801c688 <pxPortInitialiseStack+0x64>)
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	3b14      	subs	r3, #20
 801c65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c660:	687a      	ldr	r2, [r7, #4]
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	3b04      	subs	r3, #4
 801c66a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	f06f 0202 	mvn.w	r2, #2
 801c672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	3b20      	subs	r3, #32
 801c678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c67a:	68fb      	ldr	r3, [r7, #12]
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3714      	adds	r7, #20
 801c680:	46bd      	mov	sp, r7
 801c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c686:	4770      	bx	lr
 801c688:	0801c68d 	.word	0x0801c68d

0801c68c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c68c:	b480      	push	{r7}
 801c68e:	b085      	sub	sp, #20
 801c690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c692:	2300      	movs	r3, #0
 801c694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c696:	4b12      	ldr	r3, [pc, #72]	; (801c6e0 <prvTaskExitError+0x54>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c69e:	d00a      	beq.n	801c6b6 <prvTaskExitError+0x2a>
	__asm volatile
 801c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6a4:	f383 8811 	msr	BASEPRI, r3
 801c6a8:	f3bf 8f6f 	isb	sy
 801c6ac:	f3bf 8f4f 	dsb	sy
 801c6b0:	60fb      	str	r3, [r7, #12]
}
 801c6b2:	bf00      	nop
 801c6b4:	e7fe      	b.n	801c6b4 <prvTaskExitError+0x28>
	__asm volatile
 801c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6ba:	f383 8811 	msr	BASEPRI, r3
 801c6be:	f3bf 8f6f 	isb	sy
 801c6c2:	f3bf 8f4f 	dsb	sy
 801c6c6:	60bb      	str	r3, [r7, #8]
}
 801c6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c6ca:	bf00      	nop
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d0fc      	beq.n	801c6cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c6d2:	bf00      	nop
 801c6d4:	bf00      	nop
 801c6d6:	3714      	adds	r7, #20
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6de:	4770      	bx	lr
 801c6e0:	24000010 	.word	0x24000010
	...

0801c6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c6f0:	4b07      	ldr	r3, [pc, #28]	; (801c710 <pxCurrentTCBConst2>)
 801c6f2:	6819      	ldr	r1, [r3, #0]
 801c6f4:	6808      	ldr	r0, [r1, #0]
 801c6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6fa:	f380 8809 	msr	PSP, r0
 801c6fe:	f3bf 8f6f 	isb	sy
 801c702:	f04f 0000 	mov.w	r0, #0
 801c706:	f380 8811 	msr	BASEPRI, r0
 801c70a:	4770      	bx	lr
 801c70c:	f3af 8000 	nop.w

0801c710 <pxCurrentTCBConst2>:
 801c710:	24005eb8 	.word	0x24005eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c714:	bf00      	nop
 801c716:	bf00      	nop

0801c718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c718:	4808      	ldr	r0, [pc, #32]	; (801c73c <prvPortStartFirstTask+0x24>)
 801c71a:	6800      	ldr	r0, [r0, #0]
 801c71c:	6800      	ldr	r0, [r0, #0]
 801c71e:	f380 8808 	msr	MSP, r0
 801c722:	f04f 0000 	mov.w	r0, #0
 801c726:	f380 8814 	msr	CONTROL, r0
 801c72a:	b662      	cpsie	i
 801c72c:	b661      	cpsie	f
 801c72e:	f3bf 8f4f 	dsb	sy
 801c732:	f3bf 8f6f 	isb	sy
 801c736:	df00      	svc	0
 801c738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c73a:	bf00      	nop
 801c73c:	e000ed08 	.word	0xe000ed08

0801c740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b086      	sub	sp, #24
 801c744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c746:	4b46      	ldr	r3, [pc, #280]	; (801c860 <xPortStartScheduler+0x120>)
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	4a46      	ldr	r2, [pc, #280]	; (801c864 <xPortStartScheduler+0x124>)
 801c74c:	4293      	cmp	r3, r2
 801c74e:	d10a      	bne.n	801c766 <xPortStartScheduler+0x26>
	__asm volatile
 801c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c754:	f383 8811 	msr	BASEPRI, r3
 801c758:	f3bf 8f6f 	isb	sy
 801c75c:	f3bf 8f4f 	dsb	sy
 801c760:	613b      	str	r3, [r7, #16]
}
 801c762:	bf00      	nop
 801c764:	e7fe      	b.n	801c764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c766:	4b3e      	ldr	r3, [pc, #248]	; (801c860 <xPortStartScheduler+0x120>)
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	4a3f      	ldr	r2, [pc, #252]	; (801c868 <xPortStartScheduler+0x128>)
 801c76c:	4293      	cmp	r3, r2
 801c76e:	d10a      	bne.n	801c786 <xPortStartScheduler+0x46>
	__asm volatile
 801c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c774:	f383 8811 	msr	BASEPRI, r3
 801c778:	f3bf 8f6f 	isb	sy
 801c77c:	f3bf 8f4f 	dsb	sy
 801c780:	60fb      	str	r3, [r7, #12]
}
 801c782:	bf00      	nop
 801c784:	e7fe      	b.n	801c784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c786:	4b39      	ldr	r3, [pc, #228]	; (801c86c <xPortStartScheduler+0x12c>)
 801c788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c78a:	697b      	ldr	r3, [r7, #20]
 801c78c:	781b      	ldrb	r3, [r3, #0]
 801c78e:	b2db      	uxtb	r3, r3
 801c790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	22ff      	movs	r2, #255	; 0xff
 801c796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c798:	697b      	ldr	r3, [r7, #20]
 801c79a:	781b      	ldrb	r3, [r3, #0]
 801c79c:	b2db      	uxtb	r3, r3
 801c79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c7a0:	78fb      	ldrb	r3, [r7, #3]
 801c7a2:	b2db      	uxtb	r3, r3
 801c7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c7a8:	b2da      	uxtb	r2, r3
 801c7aa:	4b31      	ldr	r3, [pc, #196]	; (801c870 <xPortStartScheduler+0x130>)
 801c7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c7ae:	4b31      	ldr	r3, [pc, #196]	; (801c874 <xPortStartScheduler+0x134>)
 801c7b0:	2207      	movs	r2, #7
 801c7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c7b4:	e009      	b.n	801c7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c7b6:	4b2f      	ldr	r3, [pc, #188]	; (801c874 <xPortStartScheduler+0x134>)
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	3b01      	subs	r3, #1
 801c7bc:	4a2d      	ldr	r2, [pc, #180]	; (801c874 <xPortStartScheduler+0x134>)
 801c7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c7c0:	78fb      	ldrb	r3, [r7, #3]
 801c7c2:	b2db      	uxtb	r3, r3
 801c7c4:	005b      	lsls	r3, r3, #1
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c7ca:	78fb      	ldrb	r3, [r7, #3]
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c7d2:	2b80      	cmp	r3, #128	; 0x80
 801c7d4:	d0ef      	beq.n	801c7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c7d6:	4b27      	ldr	r3, [pc, #156]	; (801c874 <xPortStartScheduler+0x134>)
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	f1c3 0307 	rsb	r3, r3, #7
 801c7de:	2b04      	cmp	r3, #4
 801c7e0:	d00a      	beq.n	801c7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 801c7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7e6:	f383 8811 	msr	BASEPRI, r3
 801c7ea:	f3bf 8f6f 	isb	sy
 801c7ee:	f3bf 8f4f 	dsb	sy
 801c7f2:	60bb      	str	r3, [r7, #8]
}
 801c7f4:	bf00      	nop
 801c7f6:	e7fe      	b.n	801c7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c7f8:	4b1e      	ldr	r3, [pc, #120]	; (801c874 <xPortStartScheduler+0x134>)
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	021b      	lsls	r3, r3, #8
 801c7fe:	4a1d      	ldr	r2, [pc, #116]	; (801c874 <xPortStartScheduler+0x134>)
 801c800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c802:	4b1c      	ldr	r3, [pc, #112]	; (801c874 <xPortStartScheduler+0x134>)
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c80a:	4a1a      	ldr	r2, [pc, #104]	; (801c874 <xPortStartScheduler+0x134>)
 801c80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	b2da      	uxtb	r2, r3
 801c812:	697b      	ldr	r3, [r7, #20]
 801c814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c816:	4b18      	ldr	r3, [pc, #96]	; (801c878 <xPortStartScheduler+0x138>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	4a17      	ldr	r2, [pc, #92]	; (801c878 <xPortStartScheduler+0x138>)
 801c81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c822:	4b15      	ldr	r3, [pc, #84]	; (801c878 <xPortStartScheduler+0x138>)
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	4a14      	ldr	r2, [pc, #80]	; (801c878 <xPortStartScheduler+0x138>)
 801c828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c82e:	f000 f8dd 	bl	801c9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c832:	4b12      	ldr	r3, [pc, #72]	; (801c87c <xPortStartScheduler+0x13c>)
 801c834:	2200      	movs	r2, #0
 801c836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c838:	f000 f8fc 	bl	801ca34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c83c:	4b10      	ldr	r3, [pc, #64]	; (801c880 <xPortStartScheduler+0x140>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4a0f      	ldr	r2, [pc, #60]	; (801c880 <xPortStartScheduler+0x140>)
 801c842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c848:	f7ff ff66 	bl	801c718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c84c:	f7fe ff58 	bl	801b700 <vTaskSwitchContext>
	prvTaskExitError();
 801c850:	f7ff ff1c 	bl	801c68c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c854:	2300      	movs	r3, #0
}
 801c856:	4618      	mov	r0, r3
 801c858:	3718      	adds	r7, #24
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
 801c85e:	bf00      	nop
 801c860:	e000ed00 	.word	0xe000ed00
 801c864:	410fc271 	.word	0x410fc271
 801c868:	410fc270 	.word	0x410fc270
 801c86c:	e000e400 	.word	0xe000e400
 801c870:	240064e4 	.word	0x240064e4
 801c874:	240064e8 	.word	0x240064e8
 801c878:	e000ed20 	.word	0xe000ed20
 801c87c:	24000010 	.word	0x24000010
 801c880:	e000ef34 	.word	0xe000ef34

0801c884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c884:	b480      	push	{r7}
 801c886:	b083      	sub	sp, #12
 801c888:	af00      	add	r7, sp, #0
	__asm volatile
 801c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c88e:	f383 8811 	msr	BASEPRI, r3
 801c892:	f3bf 8f6f 	isb	sy
 801c896:	f3bf 8f4f 	dsb	sy
 801c89a:	607b      	str	r3, [r7, #4]
}
 801c89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c89e:	4b0f      	ldr	r3, [pc, #60]	; (801c8dc <vPortEnterCritical+0x58>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	3301      	adds	r3, #1
 801c8a4:	4a0d      	ldr	r2, [pc, #52]	; (801c8dc <vPortEnterCritical+0x58>)
 801c8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c8a8:	4b0c      	ldr	r3, [pc, #48]	; (801c8dc <vPortEnterCritical+0x58>)
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	2b01      	cmp	r3, #1
 801c8ae:	d10f      	bne.n	801c8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c8b0:	4b0b      	ldr	r3, [pc, #44]	; (801c8e0 <vPortEnterCritical+0x5c>)
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	b2db      	uxtb	r3, r3
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d00a      	beq.n	801c8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 801c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8be:	f383 8811 	msr	BASEPRI, r3
 801c8c2:	f3bf 8f6f 	isb	sy
 801c8c6:	f3bf 8f4f 	dsb	sy
 801c8ca:	603b      	str	r3, [r7, #0]
}
 801c8cc:	bf00      	nop
 801c8ce:	e7fe      	b.n	801c8ce <vPortEnterCritical+0x4a>
	}
}
 801c8d0:	bf00      	nop
 801c8d2:	370c      	adds	r7, #12
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8da:	4770      	bx	lr
 801c8dc:	24000010 	.word	0x24000010
 801c8e0:	e000ed04 	.word	0xe000ed04

0801c8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c8e4:	b480      	push	{r7}
 801c8e6:	b083      	sub	sp, #12
 801c8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c8ea:	4b12      	ldr	r3, [pc, #72]	; (801c934 <vPortExitCritical+0x50>)
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d10a      	bne.n	801c908 <vPortExitCritical+0x24>
	__asm volatile
 801c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8f6:	f383 8811 	msr	BASEPRI, r3
 801c8fa:	f3bf 8f6f 	isb	sy
 801c8fe:	f3bf 8f4f 	dsb	sy
 801c902:	607b      	str	r3, [r7, #4]
}
 801c904:	bf00      	nop
 801c906:	e7fe      	b.n	801c906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c908:	4b0a      	ldr	r3, [pc, #40]	; (801c934 <vPortExitCritical+0x50>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	3b01      	subs	r3, #1
 801c90e:	4a09      	ldr	r2, [pc, #36]	; (801c934 <vPortExitCritical+0x50>)
 801c910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c912:	4b08      	ldr	r3, [pc, #32]	; (801c934 <vPortExitCritical+0x50>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d105      	bne.n	801c926 <vPortExitCritical+0x42>
 801c91a:	2300      	movs	r3, #0
 801c91c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	f383 8811 	msr	BASEPRI, r3
}
 801c924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c926:	bf00      	nop
 801c928:	370c      	adds	r7, #12
 801c92a:	46bd      	mov	sp, r7
 801c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c930:	4770      	bx	lr
 801c932:	bf00      	nop
 801c934:	24000010 	.word	0x24000010
	...

0801c940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c940:	f3ef 8009 	mrs	r0, PSP
 801c944:	f3bf 8f6f 	isb	sy
 801c948:	4b15      	ldr	r3, [pc, #84]	; (801c9a0 <pxCurrentTCBConst>)
 801c94a:	681a      	ldr	r2, [r3, #0]
 801c94c:	f01e 0f10 	tst.w	lr, #16
 801c950:	bf08      	it	eq
 801c952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c95a:	6010      	str	r0, [r2, #0]
 801c95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c960:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c964:	f380 8811 	msr	BASEPRI, r0
 801c968:	f3bf 8f4f 	dsb	sy
 801c96c:	f3bf 8f6f 	isb	sy
 801c970:	f7fe fec6 	bl	801b700 <vTaskSwitchContext>
 801c974:	f04f 0000 	mov.w	r0, #0
 801c978:	f380 8811 	msr	BASEPRI, r0
 801c97c:	bc09      	pop	{r0, r3}
 801c97e:	6819      	ldr	r1, [r3, #0]
 801c980:	6808      	ldr	r0, [r1, #0]
 801c982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c986:	f01e 0f10 	tst.w	lr, #16
 801c98a:	bf08      	it	eq
 801c98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c990:	f380 8809 	msr	PSP, r0
 801c994:	f3bf 8f6f 	isb	sy
 801c998:	4770      	bx	lr
 801c99a:	bf00      	nop
 801c99c:	f3af 8000 	nop.w

0801c9a0 <pxCurrentTCBConst>:
 801c9a0:	24005eb8 	.word	0x24005eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c9a4:	bf00      	nop
 801c9a6:	bf00      	nop

0801c9a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c9a8:	b580      	push	{r7, lr}
 801c9aa:	b082      	sub	sp, #8
 801c9ac:	af00      	add	r7, sp, #0
	__asm volatile
 801c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9b2:	f383 8811 	msr	BASEPRI, r3
 801c9b6:	f3bf 8f6f 	isb	sy
 801c9ba:	f3bf 8f4f 	dsb	sy
 801c9be:	607b      	str	r3, [r7, #4]
}
 801c9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c9c2:	f7fe fe07 	bl	801b5d4 <xTaskIncrementTick>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d003      	beq.n	801c9d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c9cc:	4b06      	ldr	r3, [pc, #24]	; (801c9e8 <xPortSysTickHandler+0x40>)
 801c9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c9d2:	601a      	str	r2, [r3, #0]
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	f383 8811 	msr	BASEPRI, r3
}
 801c9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c9e0:	bf00      	nop
 801c9e2:	3708      	adds	r7, #8
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	bd80      	pop	{r7, pc}
 801c9e8:	e000ed04 	.word	0xe000ed04

0801c9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c9ec:	b480      	push	{r7}
 801c9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c9f0:	4b0b      	ldr	r3, [pc, #44]	; (801ca20 <vPortSetupTimerInterrupt+0x34>)
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c9f6:	4b0b      	ldr	r3, [pc, #44]	; (801ca24 <vPortSetupTimerInterrupt+0x38>)
 801c9f8:	2200      	movs	r2, #0
 801c9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c9fc:	4b0a      	ldr	r3, [pc, #40]	; (801ca28 <vPortSetupTimerInterrupt+0x3c>)
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	4a0a      	ldr	r2, [pc, #40]	; (801ca2c <vPortSetupTimerInterrupt+0x40>)
 801ca02:	fba2 2303 	umull	r2, r3, r2, r3
 801ca06:	099b      	lsrs	r3, r3, #6
 801ca08:	4a09      	ldr	r2, [pc, #36]	; (801ca30 <vPortSetupTimerInterrupt+0x44>)
 801ca0a:	3b01      	subs	r3, #1
 801ca0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ca0e:	4b04      	ldr	r3, [pc, #16]	; (801ca20 <vPortSetupTimerInterrupt+0x34>)
 801ca10:	2207      	movs	r2, #7
 801ca12:	601a      	str	r2, [r3, #0]
}
 801ca14:	bf00      	nop
 801ca16:	46bd      	mov	sp, r7
 801ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1c:	4770      	bx	lr
 801ca1e:	bf00      	nop
 801ca20:	e000e010 	.word	0xe000e010
 801ca24:	e000e018 	.word	0xe000e018
 801ca28:	24000000 	.word	0x24000000
 801ca2c:	10624dd3 	.word	0x10624dd3
 801ca30:	e000e014 	.word	0xe000e014

0801ca34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ca34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ca44 <vPortEnableVFP+0x10>
 801ca38:	6801      	ldr	r1, [r0, #0]
 801ca3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ca3e:	6001      	str	r1, [r0, #0]
 801ca40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ca42:	bf00      	nop
 801ca44:	e000ed88 	.word	0xe000ed88

0801ca48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ca48:	b480      	push	{r7}
 801ca4a:	b085      	sub	sp, #20
 801ca4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ca4e:	f3ef 8305 	mrs	r3, IPSR
 801ca52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	2b0f      	cmp	r3, #15
 801ca58:	d914      	bls.n	801ca84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ca5a:	4a17      	ldr	r2, [pc, #92]	; (801cab8 <vPortValidateInterruptPriority+0x70>)
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	4413      	add	r3, r2
 801ca60:	781b      	ldrb	r3, [r3, #0]
 801ca62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ca64:	4b15      	ldr	r3, [pc, #84]	; (801cabc <vPortValidateInterruptPriority+0x74>)
 801ca66:	781b      	ldrb	r3, [r3, #0]
 801ca68:	7afa      	ldrb	r2, [r7, #11]
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d20a      	bcs.n	801ca84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca72:	f383 8811 	msr	BASEPRI, r3
 801ca76:	f3bf 8f6f 	isb	sy
 801ca7a:	f3bf 8f4f 	dsb	sy
 801ca7e:	607b      	str	r3, [r7, #4]
}
 801ca80:	bf00      	nop
 801ca82:	e7fe      	b.n	801ca82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ca84:	4b0e      	ldr	r3, [pc, #56]	; (801cac0 <vPortValidateInterruptPriority+0x78>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ca8c:	4b0d      	ldr	r3, [pc, #52]	; (801cac4 <vPortValidateInterruptPriority+0x7c>)
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	429a      	cmp	r2, r3
 801ca92:	d90a      	bls.n	801caaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca98:	f383 8811 	msr	BASEPRI, r3
 801ca9c:	f3bf 8f6f 	isb	sy
 801caa0:	f3bf 8f4f 	dsb	sy
 801caa4:	603b      	str	r3, [r7, #0]
}
 801caa6:	bf00      	nop
 801caa8:	e7fe      	b.n	801caa8 <vPortValidateInterruptPriority+0x60>
	}
 801caaa:	bf00      	nop
 801caac:	3714      	adds	r7, #20
 801caae:	46bd      	mov	sp, r7
 801cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab4:	4770      	bx	lr
 801cab6:	bf00      	nop
 801cab8:	e000e3f0 	.word	0xe000e3f0
 801cabc:	240064e4 	.word	0x240064e4
 801cac0:	e000ed0c 	.word	0xe000ed0c
 801cac4:	240064e8 	.word	0x240064e8

0801cac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b08a      	sub	sp, #40	; 0x28
 801cacc:	af00      	add	r7, sp, #0
 801cace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801cad0:	2300      	movs	r3, #0
 801cad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801cad4:	f7fe fcd0 	bl	801b478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801cad8:	4b5b      	ldr	r3, [pc, #364]	; (801cc48 <pvPortMalloc+0x180>)
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d101      	bne.n	801cae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801cae0:	f000 f920 	bl	801cd24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801cae4:	4b59      	ldr	r3, [pc, #356]	; (801cc4c <pvPortMalloc+0x184>)
 801cae6:	681a      	ldr	r2, [r3, #0]
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	4013      	ands	r3, r2
 801caec:	2b00      	cmp	r3, #0
 801caee:	f040 8093 	bne.w	801cc18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d01d      	beq.n	801cb34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801caf8:	2208      	movs	r2, #8
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	4413      	add	r3, r2
 801cafe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	f003 0307 	and.w	r3, r3, #7
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d014      	beq.n	801cb34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	f023 0307 	bic.w	r3, r3, #7
 801cb10:	3308      	adds	r3, #8
 801cb12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	f003 0307 	and.w	r3, r3, #7
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d00a      	beq.n	801cb34 <pvPortMalloc+0x6c>
	__asm volatile
 801cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb22:	f383 8811 	msr	BASEPRI, r3
 801cb26:	f3bf 8f6f 	isb	sy
 801cb2a:	f3bf 8f4f 	dsb	sy
 801cb2e:	617b      	str	r3, [r7, #20]
}
 801cb30:	bf00      	nop
 801cb32:	e7fe      	b.n	801cb32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d06e      	beq.n	801cc18 <pvPortMalloc+0x150>
 801cb3a:	4b45      	ldr	r3, [pc, #276]	; (801cc50 <pvPortMalloc+0x188>)
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	687a      	ldr	r2, [r7, #4]
 801cb40:	429a      	cmp	r2, r3
 801cb42:	d869      	bhi.n	801cc18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801cb44:	4b43      	ldr	r3, [pc, #268]	; (801cc54 <pvPortMalloc+0x18c>)
 801cb46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801cb48:	4b42      	ldr	r3, [pc, #264]	; (801cc54 <pvPortMalloc+0x18c>)
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cb4e:	e004      	b.n	801cb5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb5c:	685b      	ldr	r3, [r3, #4]
 801cb5e:	687a      	ldr	r2, [r7, #4]
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d903      	bls.n	801cb6c <pvPortMalloc+0xa4>
 801cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d1f1      	bne.n	801cb50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801cb6c:	4b36      	ldr	r3, [pc, #216]	; (801cc48 <pvPortMalloc+0x180>)
 801cb6e:	681b      	ldr	r3, [r3, #0]
 801cb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb72:	429a      	cmp	r2, r3
 801cb74:	d050      	beq.n	801cc18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801cb76:	6a3b      	ldr	r3, [r7, #32]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2208      	movs	r2, #8
 801cb7c:	4413      	add	r3, r2
 801cb7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb82:	681a      	ldr	r2, [r3, #0]
 801cb84:	6a3b      	ldr	r3, [r7, #32]
 801cb86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb8a:	685a      	ldr	r2, [r3, #4]
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	1ad2      	subs	r2, r2, r3
 801cb90:	2308      	movs	r3, #8
 801cb92:	005b      	lsls	r3, r3, #1
 801cb94:	429a      	cmp	r2, r3
 801cb96:	d91f      	bls.n	801cbd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801cb98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	4413      	add	r3, r2
 801cb9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cba0:	69bb      	ldr	r3, [r7, #24]
 801cba2:	f003 0307 	and.w	r3, r3, #7
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d00a      	beq.n	801cbc0 <pvPortMalloc+0xf8>
	__asm volatile
 801cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cbae:	f383 8811 	msr	BASEPRI, r3
 801cbb2:	f3bf 8f6f 	isb	sy
 801cbb6:	f3bf 8f4f 	dsb	sy
 801cbba:	613b      	str	r3, [r7, #16]
}
 801cbbc:	bf00      	nop
 801cbbe:	e7fe      	b.n	801cbbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbc2:	685a      	ldr	r2, [r3, #4]
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	1ad2      	subs	r2, r2, r3
 801cbc8:	69bb      	ldr	r3, [r7, #24]
 801cbca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbce:	687a      	ldr	r2, [r7, #4]
 801cbd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801cbd2:	69b8      	ldr	r0, [r7, #24]
 801cbd4:	f000 f908 	bl	801cde8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801cbd8:	4b1d      	ldr	r3, [pc, #116]	; (801cc50 <pvPortMalloc+0x188>)
 801cbda:	681a      	ldr	r2, [r3, #0]
 801cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbde:	685b      	ldr	r3, [r3, #4]
 801cbe0:	1ad3      	subs	r3, r2, r3
 801cbe2:	4a1b      	ldr	r2, [pc, #108]	; (801cc50 <pvPortMalloc+0x188>)
 801cbe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801cbe6:	4b1a      	ldr	r3, [pc, #104]	; (801cc50 <pvPortMalloc+0x188>)
 801cbe8:	681a      	ldr	r2, [r3, #0]
 801cbea:	4b1b      	ldr	r3, [pc, #108]	; (801cc58 <pvPortMalloc+0x190>)
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	429a      	cmp	r2, r3
 801cbf0:	d203      	bcs.n	801cbfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801cbf2:	4b17      	ldr	r3, [pc, #92]	; (801cc50 <pvPortMalloc+0x188>)
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	4a18      	ldr	r2, [pc, #96]	; (801cc58 <pvPortMalloc+0x190>)
 801cbf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbfc:	685a      	ldr	r2, [r3, #4]
 801cbfe:	4b13      	ldr	r3, [pc, #76]	; (801cc4c <pvPortMalloc+0x184>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	431a      	orrs	r2, r3
 801cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801cc0e:	4b13      	ldr	r3, [pc, #76]	; (801cc5c <pvPortMalloc+0x194>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	3301      	adds	r3, #1
 801cc14:	4a11      	ldr	r2, [pc, #68]	; (801cc5c <pvPortMalloc+0x194>)
 801cc16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801cc18:	f7fe fc3c 	bl	801b494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801cc1c:	69fb      	ldr	r3, [r7, #28]
 801cc1e:	f003 0307 	and.w	r3, r3, #7
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d00a      	beq.n	801cc3c <pvPortMalloc+0x174>
	__asm volatile
 801cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc2a:	f383 8811 	msr	BASEPRI, r3
 801cc2e:	f3bf 8f6f 	isb	sy
 801cc32:	f3bf 8f4f 	dsb	sy
 801cc36:	60fb      	str	r3, [r7, #12]
}
 801cc38:	bf00      	nop
 801cc3a:	e7fe      	b.n	801cc3a <pvPortMalloc+0x172>
	return pvReturn;
 801cc3c:	69fb      	ldr	r3, [r7, #28]
}
 801cc3e:	4618      	mov	r0, r3
 801cc40:	3728      	adds	r7, #40	; 0x28
 801cc42:	46bd      	mov	sp, r7
 801cc44:	bd80      	pop	{r7, pc}
 801cc46:	bf00      	nop
 801cc48:	2400a0f4 	.word	0x2400a0f4
 801cc4c:	2400a108 	.word	0x2400a108
 801cc50:	2400a0f8 	.word	0x2400a0f8
 801cc54:	2400a0ec 	.word	0x2400a0ec
 801cc58:	2400a0fc 	.word	0x2400a0fc
 801cc5c:	2400a100 	.word	0x2400a100

0801cc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b086      	sub	sp, #24
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d04d      	beq.n	801cd0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801cc72:	2308      	movs	r3, #8
 801cc74:	425b      	negs	r3, r3
 801cc76:	697a      	ldr	r2, [r7, #20]
 801cc78:	4413      	add	r3, r2
 801cc7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801cc7c:	697b      	ldr	r3, [r7, #20]
 801cc7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801cc80:	693b      	ldr	r3, [r7, #16]
 801cc82:	685a      	ldr	r2, [r3, #4]
 801cc84:	4b24      	ldr	r3, [pc, #144]	; (801cd18 <vPortFree+0xb8>)
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	4013      	ands	r3, r2
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d10a      	bne.n	801cca4 <vPortFree+0x44>
	__asm volatile
 801cc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc92:	f383 8811 	msr	BASEPRI, r3
 801cc96:	f3bf 8f6f 	isb	sy
 801cc9a:	f3bf 8f4f 	dsb	sy
 801cc9e:	60fb      	str	r3, [r7, #12]
}
 801cca0:	bf00      	nop
 801cca2:	e7fe      	b.n	801cca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cca4:	693b      	ldr	r3, [r7, #16]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d00a      	beq.n	801ccc2 <vPortFree+0x62>
	__asm volatile
 801ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ccb0:	f383 8811 	msr	BASEPRI, r3
 801ccb4:	f3bf 8f6f 	isb	sy
 801ccb8:	f3bf 8f4f 	dsb	sy
 801ccbc:	60bb      	str	r3, [r7, #8]
}
 801ccbe:	bf00      	nop
 801ccc0:	e7fe      	b.n	801ccc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ccc2:	693b      	ldr	r3, [r7, #16]
 801ccc4:	685a      	ldr	r2, [r3, #4]
 801ccc6:	4b14      	ldr	r3, [pc, #80]	; (801cd18 <vPortFree+0xb8>)
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	4013      	ands	r3, r2
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d01e      	beq.n	801cd0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ccd0:	693b      	ldr	r3, [r7, #16]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d11a      	bne.n	801cd0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ccd8:	693b      	ldr	r3, [r7, #16]
 801ccda:	685a      	ldr	r2, [r3, #4]
 801ccdc:	4b0e      	ldr	r3, [pc, #56]	; (801cd18 <vPortFree+0xb8>)
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	43db      	mvns	r3, r3
 801cce2:	401a      	ands	r2, r3
 801cce4:	693b      	ldr	r3, [r7, #16]
 801cce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801cce8:	f7fe fbc6 	bl	801b478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ccec:	693b      	ldr	r3, [r7, #16]
 801ccee:	685a      	ldr	r2, [r3, #4]
 801ccf0:	4b0a      	ldr	r3, [pc, #40]	; (801cd1c <vPortFree+0xbc>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	4413      	add	r3, r2
 801ccf6:	4a09      	ldr	r2, [pc, #36]	; (801cd1c <vPortFree+0xbc>)
 801ccf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ccfa:	6938      	ldr	r0, [r7, #16]
 801ccfc:	f000 f874 	bl	801cde8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801cd00:	4b07      	ldr	r3, [pc, #28]	; (801cd20 <vPortFree+0xc0>)
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	3301      	adds	r3, #1
 801cd06:	4a06      	ldr	r2, [pc, #24]	; (801cd20 <vPortFree+0xc0>)
 801cd08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801cd0a:	f7fe fbc3 	bl	801b494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801cd0e:	bf00      	nop
 801cd10:	3718      	adds	r7, #24
 801cd12:	46bd      	mov	sp, r7
 801cd14:	bd80      	pop	{r7, pc}
 801cd16:	bf00      	nop
 801cd18:	2400a108 	.word	0x2400a108
 801cd1c:	2400a0f8 	.word	0x2400a0f8
 801cd20:	2400a104 	.word	0x2400a104

0801cd24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cd24:	b480      	push	{r7}
 801cd26:	b085      	sub	sp, #20
 801cd28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cd2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801cd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cd30:	4b27      	ldr	r3, [pc, #156]	; (801cdd0 <prvHeapInit+0xac>)
 801cd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	f003 0307 	and.w	r3, r3, #7
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d00c      	beq.n	801cd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	3307      	adds	r3, #7
 801cd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	f023 0307 	bic.w	r3, r3, #7
 801cd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cd4c:	68ba      	ldr	r2, [r7, #8]
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	1ad3      	subs	r3, r2, r3
 801cd52:	4a1f      	ldr	r2, [pc, #124]	; (801cdd0 <prvHeapInit+0xac>)
 801cd54:	4413      	add	r3, r2
 801cd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801cd5c:	4a1d      	ldr	r2, [pc, #116]	; (801cdd4 <prvHeapInit+0xb0>)
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801cd62:	4b1c      	ldr	r3, [pc, #112]	; (801cdd4 <prvHeapInit+0xb0>)
 801cd64:	2200      	movs	r2, #0
 801cd66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	68ba      	ldr	r2, [r7, #8]
 801cd6c:	4413      	add	r3, r2
 801cd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cd70:	2208      	movs	r2, #8
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	1a9b      	subs	r3, r3, r2
 801cd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	f023 0307 	bic.w	r3, r3, #7
 801cd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	4a15      	ldr	r2, [pc, #84]	; (801cdd8 <prvHeapInit+0xb4>)
 801cd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cd86:	4b14      	ldr	r3, [pc, #80]	; (801cdd8 <prvHeapInit+0xb4>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cd8e:	4b12      	ldr	r3, [pc, #72]	; (801cdd8 <prvHeapInit+0xb4>)
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	2200      	movs	r2, #0
 801cd94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	68fa      	ldr	r2, [r7, #12]
 801cd9e:	1ad2      	subs	r2, r2, r3
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801cda4:	4b0c      	ldr	r3, [pc, #48]	; (801cdd8 <prvHeapInit+0xb4>)
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	683b      	ldr	r3, [r7, #0]
 801cdaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	685b      	ldr	r3, [r3, #4]
 801cdb0:	4a0a      	ldr	r2, [pc, #40]	; (801cddc <prvHeapInit+0xb8>)
 801cdb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cdb4:	683b      	ldr	r3, [r7, #0]
 801cdb6:	685b      	ldr	r3, [r3, #4]
 801cdb8:	4a09      	ldr	r2, [pc, #36]	; (801cde0 <prvHeapInit+0xbc>)
 801cdba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cdbc:	4b09      	ldr	r3, [pc, #36]	; (801cde4 <prvHeapInit+0xc0>)
 801cdbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801cdc2:	601a      	str	r2, [r3, #0]
}
 801cdc4:	bf00      	nop
 801cdc6:	3714      	adds	r7, #20
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdce:	4770      	bx	lr
 801cdd0:	240064ec 	.word	0x240064ec
 801cdd4:	2400a0ec 	.word	0x2400a0ec
 801cdd8:	2400a0f4 	.word	0x2400a0f4
 801cddc:	2400a0fc 	.word	0x2400a0fc
 801cde0:	2400a0f8 	.word	0x2400a0f8
 801cde4:	2400a108 	.word	0x2400a108

0801cde8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801cde8:	b480      	push	{r7}
 801cdea:	b085      	sub	sp, #20
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cdf0:	4b28      	ldr	r3, [pc, #160]	; (801ce94 <prvInsertBlockIntoFreeList+0xac>)
 801cdf2:	60fb      	str	r3, [r7, #12]
 801cdf4:	e002      	b.n	801cdfc <prvInsertBlockIntoFreeList+0x14>
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	60fb      	str	r3, [r7, #12]
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	687a      	ldr	r2, [r7, #4]
 801ce02:	429a      	cmp	r2, r3
 801ce04:	d8f7      	bhi.n	801cdf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	685b      	ldr	r3, [r3, #4]
 801ce0e:	68ba      	ldr	r2, [r7, #8]
 801ce10:	4413      	add	r3, r2
 801ce12:	687a      	ldr	r2, [r7, #4]
 801ce14:	429a      	cmp	r2, r3
 801ce16:	d108      	bne.n	801ce2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	685a      	ldr	r2, [r3, #4]
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	685b      	ldr	r3, [r3, #4]
 801ce20:	441a      	add	r2, r3
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	685b      	ldr	r3, [r3, #4]
 801ce32:	68ba      	ldr	r2, [r7, #8]
 801ce34:	441a      	add	r2, r3
 801ce36:	68fb      	ldr	r3, [r7, #12]
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	429a      	cmp	r2, r3
 801ce3c:	d118      	bne.n	801ce70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	681a      	ldr	r2, [r3, #0]
 801ce42:	4b15      	ldr	r3, [pc, #84]	; (801ce98 <prvInsertBlockIntoFreeList+0xb0>)
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	429a      	cmp	r2, r3
 801ce48:	d00d      	beq.n	801ce66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	685a      	ldr	r2, [r3, #4]
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	685b      	ldr	r3, [r3, #4]
 801ce54:	441a      	add	r2, r3
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	681a      	ldr	r2, [r3, #0]
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	601a      	str	r2, [r3, #0]
 801ce64:	e008      	b.n	801ce78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ce66:	4b0c      	ldr	r3, [pc, #48]	; (801ce98 <prvInsertBlockIntoFreeList+0xb0>)
 801ce68:	681a      	ldr	r2, [r3, #0]
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	601a      	str	r2, [r3, #0]
 801ce6e:	e003      	b.n	801ce78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	681a      	ldr	r2, [r3, #0]
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ce78:	68fa      	ldr	r2, [r7, #12]
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	429a      	cmp	r2, r3
 801ce7e:	d002      	beq.n	801ce86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	687a      	ldr	r2, [r7, #4]
 801ce84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ce86:	bf00      	nop
 801ce88:	3714      	adds	r7, #20
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce90:	4770      	bx	lr
 801ce92:	bf00      	nop
 801ce94:	2400a0ec 	.word	0x2400a0ec
 801ce98:	2400a0f4 	.word	0x2400a0f4

0801ce9c <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 801ce9c:	b580      	push	{r7, lr}
 801ce9e:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 801cea0:	4b04      	ldr	r3, [pc, #16]	; (801ceb4 <Bmx160_init+0x18>)
 801cea2:	4a05      	ldr	r2, [pc, #20]	; (801ceb8 <Bmx160_init+0x1c>)
 801cea4:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 801cea6:	f000 f809 	bl	801cebc <Bmx160_begin>
    DelayUs(100);
 801ceaa:	2064      	movs	r0, #100	; 0x64
 801ceac:	f000 fa2a 	bl	801d304 <DelayUs>
}
 801ceb0:	bf00      	nop
 801ceb2:	bd80      	pop	{r7, pc}
 801ceb4:	2400a10c 	.word	0x2400a10c
 801ceb8:	08002281 	.word	0x08002281

0801cebc <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 801cec0:	f000 fa17 	bl	801d2f2 <Bmx160_scan>
 801cec4:	4603      	mov	r3, r0
 801cec6:	2b01      	cmp	r3, #1
 801cec8:	d11d      	bne.n	801cf06 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 801ceca:	f000 f821 	bl	801cf10 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 801cece:	2111      	movs	r1, #17
 801ced0:	207e      	movs	r0, #126	; 0x7e
 801ced2:	f000 f9d5 	bl	801d280 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 801ced6:	4b0d      	ldr	r3, [pc, #52]	; (801cf0c <Bmx160_begin+0x50>)
 801ced8:	6a1b      	ldr	r3, [r3, #32]
 801ceda:	2032      	movs	r0, #50	; 0x32
 801cedc:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 801cede:	2115      	movs	r1, #21
 801cee0:	207e      	movs	r0, #126	; 0x7e
 801cee2:	f000 f9cd 	bl	801d280 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 801cee6:	4b09      	ldr	r3, [pc, #36]	; (801cf0c <Bmx160_begin+0x50>)
 801cee8:	6a1b      	ldr	r3, [r3, #32]
 801ceea:	2064      	movs	r0, #100	; 0x64
 801ceec:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 801ceee:	2119      	movs	r1, #25
 801cef0:	207e      	movs	r0, #126	; 0x7e
 801cef2:	f000 f9c5 	bl	801d280 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 801cef6:	4b05      	ldr	r3, [pc, #20]	; (801cf0c <Bmx160_begin+0x50>)
 801cef8:	6a1b      	ldr	r3, [r3, #32]
 801cefa:	200a      	movs	r0, #10
 801cefc:	4798      	blx	r3
        Bmx160_setMagnConf();
 801cefe:	f000 f873 	bl	801cfe8 <Bmx160_setMagnConf>
        return TRUE;
 801cf02:	2301      	movs	r3, #1
 801cf04:	e000      	b.n	801cf08 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 801cf06:	2300      	movs	r3, #0
}
 801cf08:	4618      	mov	r0, r3
 801cf0a:	bd80      	pop	{r7, pc}
 801cf0c:	2400a10c 	.word	0x2400a10c

0801cf10 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b082      	sub	sp, #8
 801cf14:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 801cf16:	2300      	movs	r3, #0
 801cf18:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 801cf1a:	4808      	ldr	r0, [pc, #32]	; (801cf3c <Bmx160_softReset_+0x2c>)
 801cf1c:	f000 f810 	bl	801cf40 <Bmx160_softReset>
 801cf20:	4603      	mov	r3, r0
 801cf22:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 801cf24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d101      	bne.n	801cf30 <Bmx160_softReset_+0x20>
    return TRUE;
 801cf2c:	2301      	movs	r3, #1
 801cf2e:	e000      	b.n	801cf32 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 801cf30:	2300      	movs	r3, #0
}
 801cf32:	4618      	mov	r0, r3
 801cf34:	3708      	adds	r7, #8
 801cf36:	46bd      	mov	sp, r7
 801cf38:	bd80      	pop	{r7, pc}
 801cf3a:	bf00      	nop
 801cf3c:	2400a10c 	.word	0x2400a10c

0801cf40 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b084      	sub	sp, #16
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 801cf48:	2300      	movs	r3, #0
 801cf4a:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 801cf4c:	23b6      	movs	r3, #182	; 0xb6
 801cf4e:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d101      	bne.n	801cf5a <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 801cf56:	23ff      	movs	r3, #255	; 0xff
 801cf58:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 801cf5a:	7bbb      	ldrb	r3, [r7, #14]
 801cf5c:	4619      	mov	r1, r3
 801cf5e:	207e      	movs	r0, #126	; 0x7e
 801cf60:	f000 f98e 	bl	801d280 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 801cf64:	4b08      	ldr	r3, [pc, #32]	; (801cf88 <Bmx160_softReset+0x48>)
 801cf66:	6a1b      	ldr	r3, [r3, #32]
 801cf68:	200f      	movs	r0, #15
 801cf6a:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 801cf6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d102      	bne.n	801cf7a <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f000 f809 	bl	801cf8c <Bmx160_defaultParamSettg>
  }
  return rslt;
 801cf7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cf7e:	4618      	mov	r0, r3
 801cf80:	3710      	adds	r7, #16
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bd80      	pop	{r7, pc}
 801cf86:	bf00      	nop
 801cf88:	2400a10c 	.word	0x2400a10c

0801cf8c <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 801cf8c:	b480      	push	{r7}
 801cf8e:	b083      	sub	sp, #12
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	2202      	movs	r2, #2
 801cf98:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_200HZ;
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	2209      	movs	r2, #9
 801cf9e:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	2214      	movs	r2, #20
 801cfa4:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	2203      	movs	r2, #3
 801cfaa:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	2202      	movs	r2, #2
 801cfb0:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_200HZ;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2209      	movs	r2, #9
 801cfb6:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2210      	movs	r2, #16
 801cfbc:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2203      	movs	r2, #3
 801cfc2:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	687a      	ldr	r2, [r7, #4]
 801cfc8:	6852      	ldr	r2, [r2, #4]
 801cfca:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	687a      	ldr	r2, [r7, #4]
 801cfd0:	6952      	ldr	r2, [r2, #20]
 801cfd2:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	687a      	ldr	r2, [r7, #4]
 801cfd8:	68d2      	ldr	r2, [r2, #12]
 801cfda:	611a      	str	r2, [r3, #16]
}
 801cfdc:	bf00      	nop
 801cfde:	370c      	adds	r7, #12
 801cfe0:	46bd      	mov	sp, r7
 801cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe6:	4770      	bx	lr

0801cfe8 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 801cfec:	2180      	movs	r1, #128	; 0x80
 801cfee:	204c      	movs	r0, #76	; 0x4c
 801cff0:	f000 f946 	bl	801d280 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 801cff4:	4b1a      	ldr	r3, [pc, #104]	; (801d060 <Bmx160_setMagnConf+0x78>)
 801cff6:	6a1b      	ldr	r3, [r3, #32]
 801cff8:	2032      	movs	r0, #50	; 0x32
 801cffa:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 801cffc:	2101      	movs	r1, #1
 801cffe:	204f      	movs	r0, #79	; 0x4f
 801d000:	f000 f93e 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 801d004:	214b      	movs	r1, #75	; 0x4b
 801d006:	204e      	movs	r0, #78	; 0x4e
 801d008:	f000 f93a 	bl	801d280 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 801d00c:	2104      	movs	r1, #4
 801d00e:	204f      	movs	r0, #79	; 0x4f
 801d010:	f000 f936 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 801d014:	2151      	movs	r1, #81	; 0x51
 801d016:	204e      	movs	r0, #78	; 0x4e
 801d018:	f000 f932 	bl	801d280 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 801d01c:	210e      	movs	r1, #14
 801d01e:	204f      	movs	r0, #79	; 0x4f
 801d020:	f000 f92e 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 801d024:	2152      	movs	r1, #82	; 0x52
 801d026:	204e      	movs	r0, #78	; 0x4e
 801d028:	f000 f92a 	bl	801d280 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 801d02c:	2102      	movs	r1, #2
 801d02e:	204f      	movs	r0, #79	; 0x4f
 801d030:	f000 f926 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 801d034:	214c      	movs	r1, #76	; 0x4c
 801d036:	204e      	movs	r0, #78	; 0x4e
 801d038:	f000 f922 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 801d03c:	2142      	movs	r1, #66	; 0x42
 801d03e:	204d      	movs	r0, #77	; 0x4d
 801d040:	f000 f91e 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, 0x08);
 801d044:	2108      	movs	r1, #8
 801d046:	2044      	movs	r0, #68	; 0x44
 801d048:	f000 f91a 	bl	801d280 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 801d04c:	2103      	movs	r1, #3
 801d04e:	204c      	movs	r0, #76	; 0x4c
 801d050:	f000 f916 	bl	801d280 <Bmx160_writeBmxReg>
    Obmx160.delayMs(50);
 801d054:	4b02      	ldr	r3, [pc, #8]	; (801d060 <Bmx160_setMagnConf+0x78>)
 801d056:	6a1b      	ldr	r3, [r3, #32]
 801d058:	2032      	movs	r0, #50	; 0x32
 801d05a:	4798      	blx	r3
}
 801d05c:	bf00      	nop
 801d05e:	bd80      	pop	{r7, pc}
 801d060:	2400a10c 	.word	0x2400a10c

0801d064 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 801d064:	b580      	push	{r7, lr}
 801d066:	b08e      	sub	sp, #56	; 0x38
 801d068:	af00      	add	r7, sp, #0
 801d06a:	60f8      	str	r0, [r7, #12]
 801d06c:	60b9      	str	r1, [r7, #8]
 801d06e:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 801d070:	2300      	movs	r3, #0
 801d072:	613b      	str	r3, [r7, #16]
 801d074:	f107 0314 	add.w	r3, r7, #20
 801d078:	2200      	movs	r2, #0
 801d07a:	601a      	str	r2, [r3, #0]
 801d07c:	605a      	str	r2, [r3, #4]
 801d07e:	609a      	str	r2, [r3, #8]
 801d080:	60da      	str	r2, [r3, #12]
 801d082:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 801d086:	2300      	movs	r3, #0
 801d088:	86fb      	strh	r3, [r7, #54]	; 0x36
 801d08a:	2300      	movs	r3, #0
 801d08c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801d08e:	2300      	movs	r3, #0
 801d090:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t time = 0;
 801d092:	2300      	movs	r3, #0
 801d094:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 801d096:	f107 0310 	add.w	r3, r7, #16
 801d09a:	2217      	movs	r2, #23
 801d09c:	4619      	mov	r1, r3
 801d09e:	2004      	movs	r0, #4
 801d0a0:	f000 f915 	bl	801d2ce <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 801d0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801d0a8:	021b      	lsls	r3, r3, #8
 801d0aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801d0ae:	4313      	orrs	r3, r2
 801d0b0:	021b      	lsls	r3, r3, #8
 801d0b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801d0b6:	4313      	orrs	r3, r2
 801d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 801d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0bc:	ee07 3a90 	vmov	s15, r3
 801d0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d0c4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 801d26c <Bmx160_getAllData+0x208>
 801d0c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d0cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d03e      	beq.n	801d154 <Bmx160_getAllData+0xf0>
        x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 801d0d6:	7c7b      	ldrb	r3, [r7, #17]
 801d0d8:	021b      	lsls	r3, r3, #8
 801d0da:	b21a      	sxth	r2, r3
 801d0dc:	7c3b      	ldrb	r3, [r7, #16]
 801d0de:	b21b      	sxth	r3, r3
 801d0e0:	4313      	orrs	r3, r2
 801d0e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 801d0e4:	7cfb      	ldrb	r3, [r7, #19]
 801d0e6:	021b      	lsls	r3, r3, #8
 801d0e8:	b21a      	sxth	r2, r3
 801d0ea:	7cbb      	ldrb	r3, [r7, #18]
 801d0ec:	b21b      	sxth	r3, r3
 801d0ee:	4313      	orrs	r3, r2
 801d0f0:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 801d0f2:	7d7b      	ldrb	r3, [r7, #21]
 801d0f4:	021b      	lsls	r3, r3, #8
 801d0f6:	b21a      	sxth	r2, r3
 801d0f8:	7d3b      	ldrb	r3, [r7, #20]
 801d0fa:	b21b      	sxth	r3, r3
 801d0fc:	4313      	orrs	r3, r2
 801d0fe:	867b      	strh	r3, [r7, #50]	; 0x32
        //LOG("X: %d, Y: %d, Z: %d", x, y, z);
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 801d100:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d104:	ee07 3a90 	vmov	s15, r3
 801d108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d10c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801d270 <Bmx160_getAllData+0x20c>
 801d110:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	edc3 7a00 	vstr	s15, [r3]
        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 801d11a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d11e:	ee07 3a90 	vmov	s15, r3
 801d122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d126:	ed9f 7a52 	vldr	s14, [pc, #328]	; 801d270 <Bmx160_getAllData+0x20c>
 801d12a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	edc3 7a01 	vstr	s15, [r3, #4]
        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 801d134:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d138:	ee07 3a90 	vmov	s15, r3
 801d13c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d140:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801d274 <Bmx160_getAllData+0x210>
 801d144:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	edc3 7a02 	vstr	s15, [r3, #8]
//        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
//		magn->y = y * Bmx160_MAGN_UT_LSB_XY;
//		magn->z = z * Bmx160_MAGN_UT_LSB_XY;
        magn->sensortime = time_f;
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d152:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 801d154:	68bb      	ldr	r3, [r7, #8]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d03e      	beq.n	801d1d8 <Bmx160_getAllData+0x174>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 801d15a:	7e7b      	ldrb	r3, [r7, #25]
 801d15c:	021b      	lsls	r3, r3, #8
 801d15e:	b21a      	sxth	r2, r3
 801d160:	7e3b      	ldrb	r3, [r7, #24]
 801d162:	b21b      	sxth	r3, r3
 801d164:	4313      	orrs	r3, r2
 801d166:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 801d168:	7efb      	ldrb	r3, [r7, #27]
 801d16a:	021b      	lsls	r3, r3, #8
 801d16c:	b21a      	sxth	r2, r3
 801d16e:	7ebb      	ldrb	r3, [r7, #26]
 801d170:	b21b      	sxth	r3, r3
 801d172:	4313      	orrs	r3, r2
 801d174:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 801d176:	7f7b      	ldrb	r3, [r7, #29]
 801d178:	021b      	lsls	r3, r3, #8
 801d17a:	b21a      	sxth	r2, r3
 801d17c:	7f3b      	ldrb	r3, [r7, #28]
 801d17e:	b21b      	sxth	r3, r3
 801d180:	4313      	orrs	r3, r2
 801d182:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 801d184:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d188:	ee07 3a90 	vmov	s15, r3
 801d18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d190:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801d278 <Bmx160_getAllData+0x214>
 801d194:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d198:	68bb      	ldr	r3, [r7, #8]
 801d19a:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 801d19e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d1a2:	ee07 3a90 	vmov	s15, r3
 801d1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1aa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801d278 <Bmx160_getAllData+0x214>
 801d1ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1b2:	68bb      	ldr	r3, [r7, #8]
 801d1b4:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 801d1b8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d1bc:	ee07 3a90 	vmov	s15, r3
 801d1c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801d278 <Bmx160_getAllData+0x214>
 801d1c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d1cc:	68bb      	ldr	r3, [r7, #8]
 801d1ce:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 801d1d2:	68bb      	ldr	r3, [r7, #8]
 801d1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d1d6:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d042      	beq.n	801d264 <Bmx160_getAllData+0x200>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 801d1de:	7ffb      	ldrb	r3, [r7, #31]
 801d1e0:	021b      	lsls	r3, r3, #8
 801d1e2:	b21a      	sxth	r2, r3
 801d1e4:	7fbb      	ldrb	r3, [r7, #30]
 801d1e6:	b21b      	sxth	r3, r3
 801d1e8:	4313      	orrs	r3, r2
 801d1ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 801d1ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d1f0:	021b      	lsls	r3, r3, #8
 801d1f2:	b21a      	sxth	r2, r3
 801d1f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d1f8:	b21b      	sxth	r3, r3
 801d1fa:	4313      	orrs	r3, r2
 801d1fc:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 801d1fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d202:	021b      	lsls	r3, r3, #8
 801d204:	b21a      	sxth	r2, r3
 801d206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d20a:	b21b      	sxth	r3, r3
 801d20c:	4313      	orrs	r3, r2
 801d20e:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 801d210:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801d214:	ee07 3a90 	vmov	s15, r3
 801d218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d21c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801d27c <Bmx160_getAllData+0x218>
 801d220:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 801d22a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801d22e:	ee07 3a90 	vmov	s15, r3
 801d232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d236:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801d27c <Bmx160_getAllData+0x218>
 801d23a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 801d244:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801d248:	ee07 3a90 	vmov	s15, r3
 801d24c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d250:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801d27c <Bmx160_getAllData+0x218>
 801d254:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d262:	60da      	str	r2, [r3, #12]
    }
}
 801d264:	bf00      	nop
 801d266:	3738      	adds	r7, #56	; 0x38
 801d268:	46bd      	mov	sp, r7
 801d26a:	bd80      	pop	{r7, pc}
 801d26c:	3d1fbe77 	.word	0x3d1fbe77
 801d270:	3d0fc0d3 	.word	0x3d0fc0d3
 801d274:	3e02363b 	.word	0x3e02363b
 801d278:	3bf9c1f8 	.word	0x3bf9c1f8
 801d27c:	3a1ce7f0 	.word	0x3a1ce7f0

0801d280 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 801d280:	b580      	push	{r7, lr}
 801d282:	b084      	sub	sp, #16
 801d284:	af00      	add	r7, sp, #0
 801d286:	4603      	mov	r3, r0
 801d288:	460a      	mov	r2, r1
 801d28a:	71fb      	strb	r3, [r7, #7]
 801d28c:	4613      	mov	r3, r2
 801d28e:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 801d290:	79bb      	ldrb	r3, [r7, #6]
 801d292:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 801d294:	f107 010c 	add.w	r1, r7, #12
 801d298:	79fb      	ldrb	r3, [r7, #7]
 801d29a:	2201      	movs	r2, #1
 801d29c:	4618      	mov	r0, r3
 801d29e:	f000 f804 	bl	801d2aa <Bmx160_writeReg>
}
 801d2a2:	bf00      	nop
 801d2a4:	3710      	adds	r7, #16
 801d2a6:	46bd      	mov	sp, r7
 801d2a8:	bd80      	pop	{r7, pc}

0801d2aa <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801d2aa:	b580      	push	{r7, lr}
 801d2ac:	b082      	sub	sp, #8
 801d2ae:	af00      	add	r7, sp, #0
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	6039      	str	r1, [r7, #0]
 801d2b4:	71fb      	strb	r3, [r7, #7]
 801d2b6:	4613      	mov	r3, r2
 801d2b8:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 801d2ba:	88bb      	ldrh	r3, [r7, #4]
 801d2bc:	79f9      	ldrb	r1, [r7, #7]
 801d2be:	683a      	ldr	r2, [r7, #0]
 801d2c0:	2000      	movs	r0, #0
 801d2c2:	f000 f85f 	bl	801d384 <SensorAPI_I2Cx_Write>
}
 801d2c6:	bf00      	nop
 801d2c8:	3708      	adds	r7, #8
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	bd80      	pop	{r7, pc}

0801d2ce <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801d2ce:	b580      	push	{r7, lr}
 801d2d0:	b082      	sub	sp, #8
 801d2d2:	af00      	add	r7, sp, #0
 801d2d4:	4603      	mov	r3, r0
 801d2d6:	6039      	str	r1, [r7, #0]
 801d2d8:	71fb      	strb	r3, [r7, #7]
 801d2da:	4613      	mov	r3, r2
 801d2dc:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 801d2de:	88bb      	ldrh	r3, [r7, #4]
 801d2e0:	79f9      	ldrb	r1, [r7, #7]
 801d2e2:	683a      	ldr	r2, [r7, #0]
 801d2e4:	2000      	movs	r0, #0
 801d2e6:	f000 f82b 	bl	801d340 <SensorAPI_I2Cx_Read>
}
 801d2ea:	bf00      	nop
 801d2ec:	3708      	adds	r7, #8
 801d2ee:	46bd      	mov	sp, r7
 801d2f0:	bd80      	pop	{r7, pc}

0801d2f2 <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 801d2f2:	b480      	push	{r7}
 801d2f4:	af00      	add	r7, sp, #0
    return TRUE;
 801d2f6:	2301      	movs	r3, #1
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	46bd      	mov	sp, r7
 801d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d300:	4770      	bx	lr
	...

0801d304 <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 801d304:	b480      	push	{r7}
 801d306:	b085      	sub	sp, #20
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 801d30c:	e009      	b.n	801d322 <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 801d30e:	2300      	movs	r3, #0
 801d310:	60fb      	str	r3, [r7, #12]
 801d312:	e002      	b.n	801d31a <DelayUs+0x16>
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	3301      	adds	r3, #1
 801d318:	60fb      	str	r3, [r7, #12]
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	4a07      	ldr	r2, [pc, #28]	; (801d33c <DelayUs+0x38>)
 801d31e:	4293      	cmp	r3, r2
 801d320:	d9f8      	bls.n	801d314 <DelayUs+0x10>
	while(--Delay)
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	3b01      	subs	r3, #1
 801d326:	607b      	str	r3, [r7, #4]
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d1ef      	bne.n	801d30e <DelayUs+0xa>
		{
			;
		}
	}
}
 801d32e:	bf00      	nop
 801d330:	bf00      	nop
 801d332:	3714      	adds	r7, #20
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr
 801d33c:	0001481f 	.word	0x0001481f

0801d340 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b084      	sub	sp, #16
 801d344:	af02      	add	r7, sp, #8
 801d346:	603a      	str	r2, [r7, #0]
 801d348:	461a      	mov	r2, r3
 801d34a:	4603      	mov	r3, r0
 801d34c:	71fb      	strb	r3, [r7, #7]
 801d34e:	460b      	mov	r3, r1
 801d350:	71bb      	strb	r3, [r7, #6]
 801d352:	4613      	mov	r3, r2
 801d354:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 801d356:	1dba      	adds	r2, r7, #6
 801d358:	2364      	movs	r3, #100	; 0x64
 801d35a:	9300      	str	r3, [sp, #0]
 801d35c:	2301      	movs	r3, #1
 801d35e:	21d0      	movs	r1, #208	; 0xd0
 801d360:	4807      	ldr	r0, [pc, #28]	; (801d380 <SensorAPI_I2Cx_Read+0x40>)
 801d362:	f7e8 fd83 	bl	8005e6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 801d366:	88bb      	ldrh	r3, [r7, #4]
 801d368:	2264      	movs	r2, #100	; 0x64
 801d36a:	9200      	str	r2, [sp, #0]
 801d36c:	683a      	ldr	r2, [r7, #0]
 801d36e:	21d0      	movs	r1, #208	; 0xd0
 801d370:	4803      	ldr	r0, [pc, #12]	; (801d380 <SensorAPI_I2Cx_Read+0x40>)
 801d372:	f7e8 fe6f 	bl	8006054 <HAL_I2C_Master_Receive>
	return 0;
 801d376:	2300      	movs	r3, #0
}
 801d378:	4618      	mov	r0, r3
 801d37a:	3708      	adds	r7, #8
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd80      	pop	{r7, pc}
 801d380:	24004528 	.word	0x24004528

0801d384 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 801d384:	b580      	push	{r7, lr}
 801d386:	b084      	sub	sp, #16
 801d388:	af02      	add	r7, sp, #8
 801d38a:	603a      	str	r2, [r7, #0]
 801d38c:	461a      	mov	r2, r3
 801d38e:	4603      	mov	r3, r0
 801d390:	71fb      	strb	r3, [r7, #7]
 801d392:	460b      	mov	r3, r1
 801d394:	71bb      	strb	r3, [r7, #6]
 801d396:	4613      	mov	r3, r2
 801d398:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 801d39a:	4a0c      	ldr	r2, [pc, #48]	; (801d3cc <SensorAPI_I2Cx_Write+0x48>)
 801d39c:	79bb      	ldrb	r3, [r7, #6]
 801d39e:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 801d3a0:	88bb      	ldrh	r3, [r7, #4]
 801d3a2:	461a      	mov	r2, r3
 801d3a4:	6839      	ldr	r1, [r7, #0]
 801d3a6:	480a      	ldr	r0, [pc, #40]	; (801d3d0 <SensorAPI_I2Cx_Write+0x4c>)
 801d3a8:	f001 fc43 	bl	801ec32 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 801d3ac:	88bb      	ldrh	r3, [r7, #4]
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	b29b      	uxth	r3, r3
 801d3b2:	2264      	movs	r2, #100	; 0x64
 801d3b4:	9200      	str	r2, [sp, #0]
 801d3b6:	4a05      	ldr	r2, [pc, #20]	; (801d3cc <SensorAPI_I2Cx_Write+0x48>)
 801d3b8:	21d0      	movs	r1, #208	; 0xd0
 801d3ba:	4806      	ldr	r0, [pc, #24]	; (801d3d4 <SensorAPI_I2Cx_Write+0x50>)
 801d3bc:	f7e8 fd56 	bl	8005e6c <HAL_I2C_Master_Transmit>
	return 0;
 801d3c0:	2300      	movs	r3, #0
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	3708      	adds	r7, #8
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}
 801d3ca:	bf00      	nop
 801d3cc:	2400a130 	.word	0x2400a130
 801d3d0:	2400a131 	.word	0x2400a131
 801d3d4:	24004528 	.word	0x24004528

0801d3d8 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart, DelayFunc delayFunc) {
 801d3d8:	b480      	push	{r7}
 801d3da:	b085      	sub	sp, #20
 801d3dc:	af00      	add	r7, sp, #0
 801d3de:	60f8      	str	r0, [r7, #12]
 801d3e0:	60b9      	str	r1, [r7, #8]
 801d3e2:	607a      	str	r2, [r7, #4]
	GNSS->huart = huart;
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	68ba      	ldr	r2, [r7, #8]
 801d3e8:	601a      	str	r2, [r3, #0]
	GNSS->delayFunc = delayFunc;
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	687a      	ldr	r2, [r7, #4]
 801d3ee:	605a      	str	r2, [r3, #4]
	GNSS->year = 0;
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	2200      	movs	r2, #0
 801d3f4:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	GNSS->month = 0;
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
	GNSS->day = 0;
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	2200      	movs	r2, #0
 801d404:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
	GNSS->hour = 0;
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	2200      	movs	r2, #0
 801d40c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
	GNSS->min = 0;
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	2200      	movs	r2, #0
 801d414:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
	GNSS->sec = 0;
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	2200      	movs	r2, #0
 801d41c:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	GNSS->fixType = 0;
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	2200      	movs	r2, #0
 801d424:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
	GNSS->lon = 0;
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	2200      	movs	r2, #0
 801d42c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->lat = 0;
 801d430:	68fb      	ldr	r3, [r7, #12]
 801d432:	2200      	movs	r2, #0
 801d434:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->height = 0;
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	2200      	movs	r2, #0
 801d43c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	GNSS->hMSL = 0;
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	2200      	movs	r2, #0
 801d444:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	GNSS->hAcc = 0;
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	2200      	movs	r2, #0
 801d44c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
	GNSS->vAcc = 0;
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	2200      	movs	r2, #0
 801d454:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	GNSS->gSpeed = 0;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	2200      	movs	r2, #0
 801d45c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	GNSS->headMot = 0;
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	2200      	movs	r2, #0
 801d464:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}
 801d468:	bf00      	nop
 801d46a:	3714      	adds	r7, #20
 801d46c:	46bd      	mov	sp, r7
 801d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d472:	4770      	bx	lr
 801d474:	0000      	movs	r0, r0
	...

0801d478 <GNSS_ParsePVTDataPTR>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTDataPTR(GNSS_StateHandle *GNSS) {
 801d478:	b480      	push	{r7}
 801d47a:	b091      	sub	sp, #68	; 0x44
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
	uint8_t* bufferPtr = GNSS_Handle.uartWorkingBuffer + UBX_MESSAGE_OFFSET;
 801d480:	4ba1      	ldr	r3, [pc, #644]	; (801d708 <GNSS_ParsePVTDataPTR+0x290>)
 801d482:	60fb      	str	r3, [r7, #12]

	for (int var = 0; var < 4; ++var) {
 801d484:	2300      	movs	r3, #0
 801d486:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d488:	e018      	b.n	801d4bc <GNSS_ParsePVTDataPTR+0x44>
		iLong.bytes[var] = bufferPtr[var + 24];
 801d48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d48c:	3318      	adds	r3, #24
 801d48e:	68fa      	ldr	r2, [r7, #12]
 801d490:	4413      	add	r3, r2
 801d492:	7819      	ldrb	r1, [r3, #0]
 801d494:	4a9d      	ldr	r2, [pc, #628]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d498:	4413      	add	r3, r2
 801d49a:	460a      	mov	r2, r1
 801d49c:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= bufferPtr[var + 24];
 801d49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4a0:	3318      	adds	r3, #24
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	4413      	add	r3, r2
 801d4a6:	7819      	ldrb	r1, [r3, #0]
 801d4a8:	687a      	ldr	r2, [r7, #4]
 801d4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4ac:	4413      	add	r3, r2
 801d4ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801d4b2:	460a      	mov	r2, r1
 801d4b4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4b8:	3301      	adds	r3, #1
 801d4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4be:	2b03      	cmp	r3, #3
 801d4c0:	dde3      	ble.n	801d48a <GNSS_ParsePVTDataPTR+0x12>
	}
	GNSS->lon = iLong.iLong;
 801d4c2:	4b92      	ldr	r3, [pc, #584]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d4c4:	681a      	ldr	r2, [r3, #0]
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->fLon=((float)iLong.iLong)/10000000.0;
 801d4cc:	4b8f      	ldr	r3, [pc, #572]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	ee07 3a90 	vmov	s15, r3
 801d4d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d4d8:	eddf 6a8d 	vldr	s13, [pc, #564]	; 801d710 <GNSS_ParsePVTDataPTR+0x298>
 801d4dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801d4e6:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	63bb      	str	r3, [r7, #56]	; 0x38
 801d4ee:	e018      	b.n	801d522 <GNSS_ParsePVTDataPTR+0xaa>
		iLong.bytes[var] = bufferPtr[var + 28];
 801d4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f2:	331c      	adds	r3, #28
 801d4f4:	68fa      	ldr	r2, [r7, #12]
 801d4f6:	4413      	add	r3, r2
 801d4f8:	7819      	ldrb	r1, [r3, #0]
 801d4fa:	4a84      	ldr	r2, [pc, #528]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4fe:	4413      	add	r3, r2
 801d500:	460a      	mov	r2, r1
 801d502:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]= bufferPtr[var + 28];
 801d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d506:	331c      	adds	r3, #28
 801d508:	68fa      	ldr	r2, [r7, #12]
 801d50a:	4413      	add	r3, r2
 801d50c:	7819      	ldrb	r1, [r3, #0]
 801d50e:	687a      	ldr	r2, [r7, #4]
 801d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d512:	4413      	add	r3, r2
 801d514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801d518:	460a      	mov	r2, r1
 801d51a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d51e:	3301      	adds	r3, #1
 801d520:	63bb      	str	r3, [r7, #56]	; 0x38
 801d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d524:	2b03      	cmp	r3, #3
 801d526:	dde3      	ble.n	801d4f0 <GNSS_ParsePVTDataPTR+0x78>
	}
	GNSS->lat = iLong.iLong;
 801d528:	4b78      	ldr	r3, [pc, #480]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d52a:	681a      	ldr	r2, [r3, #0]
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->fLat=((float)iLong.iLong)/10000000.0;
 801d532:	4b76      	ldr	r3, [pc, #472]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	ee07 3a90 	vmov	s15, r3
 801d53a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d53e:	eddf 6a74 	vldr	s13, [pc, #464]	; 801d710 <GNSS_ParsePVTDataPTR+0x298>
 801d542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801d54c:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 801d550:	2300      	movs	r3, #0
 801d552:	637b      	str	r3, [r7, #52]	; 0x34
 801d554:	e00c      	b.n	801d570 <GNSS_ParsePVTDataPTR+0xf8>
		iLong.bytes[var] = bufferPtr[var + 32];
 801d556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d558:	3320      	adds	r3, #32
 801d55a:	68fa      	ldr	r2, [r7, #12]
 801d55c:	4413      	add	r3, r2
 801d55e:	7819      	ldrb	r1, [r3, #0]
 801d560:	4a6a      	ldr	r2, [pc, #424]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d564:	4413      	add	r3, r2
 801d566:	460a      	mov	r2, r1
 801d568:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d56c:	3301      	adds	r3, #1
 801d56e:	637b      	str	r3, [r7, #52]	; 0x34
 801d570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d572:	2b03      	cmp	r3, #3
 801d574:	ddef      	ble.n	801d556 <GNSS_ParsePVTDataPTR+0xde>
	}
	GNSS->height = iLong.iLong;
 801d576:	4b65      	ldr	r3, [pc, #404]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d578:	681a      	ldr	r2, [r3, #0]
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	for (int var = 0; var < 4; ++var) {
 801d580:	2300      	movs	r3, #0
 801d582:	633b      	str	r3, [r7, #48]	; 0x30
 801d584:	e018      	b.n	801d5b8 <GNSS_ParsePVTDataPTR+0x140>
		iLong.bytes[var] = bufferPtr[var + 36];
 801d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d588:	3324      	adds	r3, #36	; 0x24
 801d58a:	68fa      	ldr	r2, [r7, #12]
 801d58c:	4413      	add	r3, r2
 801d58e:	7819      	ldrb	r1, [r3, #0]
 801d590:	4a5e      	ldr	r2, [pc, #376]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d594:	4413      	add	r3, r2
 801d596:	460a      	mov	r2, r1
 801d598:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = bufferPtr[var + 36];
 801d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d59c:	3324      	adds	r3, #36	; 0x24
 801d59e:	68fa      	ldr	r2, [r7, #12]
 801d5a0:	4413      	add	r3, r2
 801d5a2:	7819      	ldrb	r1, [r3, #0]
 801d5a4:	687a      	ldr	r2, [r7, #4]
 801d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5a8:	4413      	add	r3, r2
 801d5aa:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801d5ae:	460a      	mov	r2, r1
 801d5b0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b4:	3301      	adds	r3, #1
 801d5b6:	633b      	str	r3, [r7, #48]	; 0x30
 801d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ba:	2b03      	cmp	r3, #3
 801d5bc:	dde3      	ble.n	801d586 <GNSS_ParsePVTDataPTR+0x10e>
	}
	GNSS->hMSL = iLong.iLong;
 801d5be:	4b53      	ldr	r3, [pc, #332]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d5c0:	681a      	ldr	r2, [r3, #0]
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	for (int var = 0; var < 4; ++var) {
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d5cc:	e00c      	b.n	801d5e8 <GNSS_ParsePVTDataPTR+0x170>
		uLong.bytes[var] = bufferPtr[var + 40];
 801d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5d0:	3328      	adds	r3, #40	; 0x28
 801d5d2:	68fa      	ldr	r2, [r7, #12]
 801d5d4:	4413      	add	r3, r2
 801d5d6:	7819      	ldrb	r1, [r3, #0]
 801d5d8:	4a4e      	ldr	r2, [pc, #312]	; (801d714 <GNSS_ParsePVTDataPTR+0x29c>)
 801d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5dc:	4413      	add	r3, r2
 801d5de:	460a      	mov	r2, r1
 801d5e0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5ea:	2b03      	cmp	r3, #3
 801d5ec:	ddef      	ble.n	801d5ce <GNSS_ParsePVTDataPTR+0x156>
	}
	GNSS->hAcc = uLong.uLong;
 801d5ee:	4b49      	ldr	r3, [pc, #292]	; (801d714 <GNSS_ParsePVTDataPTR+0x29c>)
 801d5f0:	681a      	ldr	r2, [r3, #0]
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424

	for (int var = 0; var < 4; ++var) {
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 801d5fc:	e00c      	b.n	801d618 <GNSS_ParsePVTDataPTR+0x1a0>
		uLong.bytes[var] = bufferPtr[var + 44];
 801d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d600:	332c      	adds	r3, #44	; 0x2c
 801d602:	68fa      	ldr	r2, [r7, #12]
 801d604:	4413      	add	r3, r2
 801d606:	7819      	ldrb	r1, [r3, #0]
 801d608:	4a42      	ldr	r2, [pc, #264]	; (801d714 <GNSS_ParsePVTDataPTR+0x29c>)
 801d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d60c:	4413      	add	r3, r2
 801d60e:	460a      	mov	r2, r1
 801d610:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d614:	3301      	adds	r3, #1
 801d616:	62bb      	str	r3, [r7, #40]	; 0x28
 801d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d61a:	2b03      	cmp	r3, #3
 801d61c:	ddef      	ble.n	801d5fe <GNSS_ParsePVTDataPTR+0x186>
	}
	GNSS->vAcc = uLong.uLong;
 801d61e:	4b3d      	ldr	r3, [pc, #244]	; (801d714 <GNSS_ParsePVTDataPTR+0x29c>)
 801d620:	681a      	ldr	r2, [r3, #0]
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

	for (int var = 0; var < 4; ++var) {
 801d628:	2300      	movs	r3, #0
 801d62a:	627b      	str	r3, [r7, #36]	; 0x24
 801d62c:	e00c      	b.n	801d648 <GNSS_ParsePVTDataPTR+0x1d0>
		iLong.bytes[var] = bufferPtr[var + 48];
 801d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d630:	3330      	adds	r3, #48	; 0x30
 801d632:	68fa      	ldr	r2, [r7, #12]
 801d634:	4413      	add	r3, r2
 801d636:	7819      	ldrb	r1, [r3, #0]
 801d638:	4a34      	ldr	r2, [pc, #208]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d63c:	4413      	add	r3, r2
 801d63e:	460a      	mov	r2, r1
 801d640:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d644:	3301      	adds	r3, #1
 801d646:	627b      	str	r3, [r7, #36]	; 0x24
 801d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d64a:	2b03      	cmp	r3, #3
 801d64c:	ddef      	ble.n	801d62e <GNSS_ParsePVTDataPTR+0x1b6>
	}
	GNSS->velN = iLong.iLong;
 801d64e:	4b2f      	ldr	r3, [pc, #188]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d650:	681a      	ldr	r2, [r3, #0]
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c

	for (int var = 0; var < 4; ++var) {
 801d658:	2300      	movs	r3, #0
 801d65a:	623b      	str	r3, [r7, #32]
 801d65c:	e00c      	b.n	801d678 <GNSS_ParsePVTDataPTR+0x200>
		iLong.bytes[var] = bufferPtr[var + 52];
 801d65e:	6a3b      	ldr	r3, [r7, #32]
 801d660:	3334      	adds	r3, #52	; 0x34
 801d662:	68fa      	ldr	r2, [r7, #12]
 801d664:	4413      	add	r3, r2
 801d666:	7819      	ldrb	r1, [r3, #0]
 801d668:	4a28      	ldr	r2, [pc, #160]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d66a:	6a3b      	ldr	r3, [r7, #32]
 801d66c:	4413      	add	r3, r2
 801d66e:	460a      	mov	r2, r1
 801d670:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d672:	6a3b      	ldr	r3, [r7, #32]
 801d674:	3301      	adds	r3, #1
 801d676:	623b      	str	r3, [r7, #32]
 801d678:	6a3b      	ldr	r3, [r7, #32]
 801d67a:	2b03      	cmp	r3, #3
 801d67c:	ddef      	ble.n	801d65e <GNSS_ParsePVTDataPTR+0x1e6>
	}
	GNSS->velE = iLong.iLong;
 801d67e:	4b23      	ldr	r3, [pc, #140]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d680:	681a      	ldr	r2, [r3, #0]
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

	for (int var = 0; var < 4; ++var) {
 801d688:	2300      	movs	r3, #0
 801d68a:	61fb      	str	r3, [r7, #28]
 801d68c:	e00c      	b.n	801d6a8 <GNSS_ParsePVTDataPTR+0x230>
		iLong.bytes[var] = bufferPtr[var + 56];
 801d68e:	69fb      	ldr	r3, [r7, #28]
 801d690:	3338      	adds	r3, #56	; 0x38
 801d692:	68fa      	ldr	r2, [r7, #12]
 801d694:	4413      	add	r3, r2
 801d696:	7819      	ldrb	r1, [r3, #0]
 801d698:	4a1c      	ldr	r2, [pc, #112]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d69a:	69fb      	ldr	r3, [r7, #28]
 801d69c:	4413      	add	r3, r2
 801d69e:	460a      	mov	r2, r1
 801d6a0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d6a2:	69fb      	ldr	r3, [r7, #28]
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	61fb      	str	r3, [r7, #28]
 801d6a8:	69fb      	ldr	r3, [r7, #28]
 801d6aa:	2b03      	cmp	r3, #3
 801d6ac:	ddef      	ble.n	801d68e <GNSS_ParsePVTDataPTR+0x216>
	}
	GNSS->velD = iLong.iLong;
 801d6ae:	4b17      	ldr	r3, [pc, #92]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d6b0:	681a      	ldr	r2, [r3, #0]
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434


	for (int var = 0; var < 4; ++var) {
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	61bb      	str	r3, [r7, #24]
 801d6bc:	e018      	b.n	801d6f0 <GNSS_ParsePVTDataPTR+0x278>
		iLong.bytes[var] = bufferPtr[var + 60];
 801d6be:	69bb      	ldr	r3, [r7, #24]
 801d6c0:	333c      	adds	r3, #60	; 0x3c
 801d6c2:	68fa      	ldr	r2, [r7, #12]
 801d6c4:	4413      	add	r3, r2
 801d6c6:	7819      	ldrb	r1, [r3, #0]
 801d6c8:	4a10      	ldr	r2, [pc, #64]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d6ca:	69bb      	ldr	r3, [r7, #24]
 801d6cc:	4413      	add	r3, r2
 801d6ce:	460a      	mov	r2, r1
 801d6d0:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = bufferPtr[var + 60];
 801d6d2:	69bb      	ldr	r3, [r7, #24]
 801d6d4:	333c      	adds	r3, #60	; 0x3c
 801d6d6:	68fa      	ldr	r2, [r7, #12]
 801d6d8:	4413      	add	r3, r2
 801d6da:	7819      	ldrb	r1, [r3, #0]
 801d6dc:	687a      	ldr	r2, [r7, #4]
 801d6de:	69bb      	ldr	r3, [r7, #24]
 801d6e0:	4413      	add	r3, r2
 801d6e2:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801d6e6:	460a      	mov	r2, r1
 801d6e8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d6ea:	69bb      	ldr	r3, [r7, #24]
 801d6ec:	3301      	adds	r3, #1
 801d6ee:	61bb      	str	r3, [r7, #24]
 801d6f0:	69bb      	ldr	r3, [r7, #24]
 801d6f2:	2b03      	cmp	r3, #3
 801d6f4:	dde3      	ble.n	801d6be <GNSS_ParsePVTDataPTR+0x246>
	}
	GNSS->gSpeed = iLong.iLong;
 801d6f6:	4b05      	ldr	r3, [pc, #20]	; (801d70c <GNSS_ParsePVTDataPTR+0x294>)
 801d6f8:	681a      	ldr	r2, [r3, #0]
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

	for (int var = 0; var < 4; ++var) {
 801d700:	2300      	movs	r3, #0
 801d702:	617b      	str	r3, [r7, #20]
 801d704:	e015      	b.n	801d732 <GNSS_ParsePVTDataPTR+0x2ba>
 801d706:	bf00      	nop
 801d708:	2400a34a 	.word	0x2400a34a
 801d70c:	2400a334 	.word	0x2400a334
 801d710:	4b189680 	.word	0x4b189680
 801d714:	2400a330 	.word	0x2400a330
		iLong.bytes[var] = bufferPtr[var + 64];
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	3340      	adds	r3, #64	; 0x40
 801d71c:	68fa      	ldr	r2, [r7, #12]
 801d71e:	4413      	add	r3, r2
 801d720:	7819      	ldrb	r1, [r3, #0]
 801d722:	4a1f      	ldr	r2, [pc, #124]	; (801d7a0 <GNSS_ParsePVTDataPTR+0x328>)
 801d724:	697b      	ldr	r3, [r7, #20]
 801d726:	4413      	add	r3, r2
 801d728:	460a      	mov	r2, r1
 801d72a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d72c:	697b      	ldr	r3, [r7, #20]
 801d72e:	3301      	adds	r3, #1
 801d730:	617b      	str	r3, [r7, #20]
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	2b03      	cmp	r3, #3
 801d736:	ddef      	ble.n	801d718 <GNSS_ParsePVTDataPTR+0x2a0>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 801d738:	4b19      	ldr	r3, [pc, #100]	; (801d7a0 <GNSS_ParsePVTDataPTR+0x328>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	ee07 3a90 	vmov	s15, r3
 801d740:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d744:	ed9f 6b14 	vldr	d6, [pc, #80]	; 801d798 <GNSS_ParsePVTDataPTR+0x320>
 801d748:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d74c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d750:	ee17 2a90 	vmov	r2, s15
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

	for (int var = 0; var < 4; ++var) {
 801d75a:	2300      	movs	r3, #0
 801d75c:	613b      	str	r3, [r7, #16]
 801d75e:	e00c      	b.n	801d77a <GNSS_ParsePVTDataPTR+0x302>
		uLong.bytes[var] = bufferPtr[var + 68];
 801d760:	693b      	ldr	r3, [r7, #16]
 801d762:	3344      	adds	r3, #68	; 0x44
 801d764:	68fa      	ldr	r2, [r7, #12]
 801d766:	4413      	add	r3, r2
 801d768:	7819      	ldrb	r1, [r3, #0]
 801d76a:	4a0e      	ldr	r2, [pc, #56]	; (801d7a4 <GNSS_ParsePVTDataPTR+0x32c>)
 801d76c:	693b      	ldr	r3, [r7, #16]
 801d76e:	4413      	add	r3, r2
 801d770:	460a      	mov	r2, r1
 801d772:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d774:	693b      	ldr	r3, [r7, #16]
 801d776:	3301      	adds	r3, #1
 801d778:	613b      	str	r3, [r7, #16]
 801d77a:	693b      	ldr	r3, [r7, #16]
 801d77c:	2b03      	cmp	r3, #3
 801d77e:	ddef      	ble.n	801d760 <GNSS_ParsePVTDataPTR+0x2e8>
	}
	GNSS->sAcc = uLong.uLong;
 801d780:	4b08      	ldr	r3, [pc, #32]	; (801d7a4 <GNSS_ParsePVTDataPTR+0x32c>)
 801d782:	681a      	ldr	r2, [r3, #0]
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
}
 801d78a:	bf00      	nop
 801d78c:	3744      	adds	r7, #68	; 0x44
 801d78e:	46bd      	mov	sp, r7
 801d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d794:	4770      	bx	lr
 801d796:	bf00      	nop
 801d798:	88e368f1 	.word	0x88e368f1
 801d79c:	3ee4f8b5 	.word	0x3ee4f8b5
 801d7a0:	2400a334 	.word	0x2400a334
 801d7a4:	2400a330 	.word	0x2400a330

0801d7a8 <__cxa_guard_acquire>:
 801d7a8:	6803      	ldr	r3, [r0, #0]
 801d7aa:	07db      	lsls	r3, r3, #31
 801d7ac:	d406      	bmi.n	801d7bc <__cxa_guard_acquire+0x14>
 801d7ae:	7843      	ldrb	r3, [r0, #1]
 801d7b0:	b103      	cbz	r3, 801d7b4 <__cxa_guard_acquire+0xc>
 801d7b2:	deff      	udf	#255	; 0xff
 801d7b4:	2301      	movs	r3, #1
 801d7b6:	7043      	strb	r3, [r0, #1]
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	4770      	bx	lr
 801d7bc:	2000      	movs	r0, #0
 801d7be:	4770      	bx	lr

0801d7c0 <__cxa_guard_release>:
 801d7c0:	2301      	movs	r3, #1
 801d7c2:	6003      	str	r3, [r0, #0]
 801d7c4:	4770      	bx	lr
	...

0801d7c8 <asinf>:
 801d7c8:	b508      	push	{r3, lr}
 801d7ca:	ed2d 8b02 	vpush	{d8}
 801d7ce:	eeb0 8a40 	vmov.f32	s16, s0
 801d7d2:	f000 fa03 	bl	801dbdc <__ieee754_asinf>
 801d7d6:	eeb4 8a48 	vcmp.f32	s16, s16
 801d7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7de:	eef0 8a40 	vmov.f32	s17, s0
 801d7e2:	d615      	bvs.n	801d810 <asinf+0x48>
 801d7e4:	eeb0 0a48 	vmov.f32	s0, s16
 801d7e8:	f000 f83a 	bl	801d860 <fabsf>
 801d7ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d7f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7f8:	dd0a      	ble.n	801d810 <asinf+0x48>
 801d7fa:	f001 f9ed 	bl	801ebd8 <__errno>
 801d7fe:	ecbd 8b02 	vpop	{d8}
 801d802:	2321      	movs	r3, #33	; 0x21
 801d804:	6003      	str	r3, [r0, #0]
 801d806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d80a:	4804      	ldr	r0, [pc, #16]	; (801d81c <asinf+0x54>)
 801d80c:	f000 b830 	b.w	801d870 <nanf>
 801d810:	eeb0 0a68 	vmov.f32	s0, s17
 801d814:	ecbd 8b02 	vpop	{d8}
 801d818:	bd08      	pop	{r3, pc}
 801d81a:	bf00      	nop
 801d81c:	08021352 	.word	0x08021352

0801d820 <atan2f>:
 801d820:	f000 bac2 	b.w	801dda8 <__ieee754_atan2f>

0801d824 <sqrtf>:
 801d824:	b508      	push	{r3, lr}
 801d826:	ed2d 8b02 	vpush	{d8}
 801d82a:	eeb0 8a40 	vmov.f32	s16, s0
 801d82e:	f000 f9d1 	bl	801dbd4 <__ieee754_sqrtf>
 801d832:	eeb4 8a48 	vcmp.f32	s16, s16
 801d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d83a:	d60c      	bvs.n	801d856 <sqrtf+0x32>
 801d83c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d85c <sqrtf+0x38>
 801d840:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d848:	d505      	bpl.n	801d856 <sqrtf+0x32>
 801d84a:	f001 f9c5 	bl	801ebd8 <__errno>
 801d84e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d852:	2321      	movs	r3, #33	; 0x21
 801d854:	6003      	str	r3, [r0, #0]
 801d856:	ecbd 8b02 	vpop	{d8}
 801d85a:	bd08      	pop	{r3, pc}
 801d85c:	00000000 	.word	0x00000000

0801d860 <fabsf>:
 801d860:	ee10 3a10 	vmov	r3, s0
 801d864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d868:	ee00 3a10 	vmov	s0, r3
 801d86c:	4770      	bx	lr
	...

0801d870 <nanf>:
 801d870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d878 <nanf+0x8>
 801d874:	4770      	bx	lr
 801d876:	bf00      	nop
 801d878:	7fc00000 	.word	0x7fc00000

0801d87c <sinf_poly>:
 801d87c:	07cb      	lsls	r3, r1, #31
 801d87e:	d412      	bmi.n	801d8a6 <sinf_poly+0x2a>
 801d880:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d884:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801d888:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801d88c:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d890:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801d894:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d898:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d89c:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d8a0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d8a4:	4770      	bx	lr
 801d8a6:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801d8aa:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d8ae:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801d8b2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801d8b6:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d8ba:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801d8be:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d8c2:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801d8c6:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d8ca:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d8ce:	e7e5      	b.n	801d89c <sinf_poly+0x20>

0801d8d0 <sinf>:
 801d8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d8d2:	ee10 4a10 	vmov	r4, s0
 801d8d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d8da:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801d8de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d8e2:	eef0 7a40 	vmov.f32	s15, s0
 801d8e6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801d8ea:	d218      	bcs.n	801d91e <sinf+0x4e>
 801d8ec:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d8f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801d8f4:	d20a      	bcs.n	801d90c <sinf+0x3c>
 801d8f6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801d8fa:	d103      	bne.n	801d904 <sinf+0x34>
 801d8fc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801d900:	ed8d 1a01 	vstr	s2, [sp, #4]
 801d904:	eeb0 0a67 	vmov.f32	s0, s15
 801d908:	b003      	add	sp, #12
 801d90a:	bd30      	pop	{r4, r5, pc}
 801d90c:	483a      	ldr	r0, [pc, #232]	; (801d9f8 <sinf+0x128>)
 801d90e:	eeb0 0b46 	vmov.f64	d0, d6
 801d912:	2100      	movs	r1, #0
 801d914:	b003      	add	sp, #12
 801d916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d91a:	f7ff bfaf 	b.w	801d87c <sinf_poly>
 801d91e:	f240 422e 	movw	r2, #1070	; 0x42e
 801d922:	4293      	cmp	r3, r2
 801d924:	d824      	bhi.n	801d970 <sinf+0xa0>
 801d926:	4b34      	ldr	r3, [pc, #208]	; (801d9f8 <sinf+0x128>)
 801d928:	ed93 7b08 	vldr	d7, [r3, #32]
 801d92c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d930:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d934:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d938:	ee17 1a90 	vmov	r1, s15
 801d93c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801d940:	1609      	asrs	r1, r1, #24
 801d942:	ee07 1a90 	vmov	s15, r1
 801d946:	f001 0203 	and.w	r2, r1, #3
 801d94a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d94e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d952:	ed92 0b00 	vldr	d0, [r2]
 801d956:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801d95a:	f011 0f02 	tst.w	r1, #2
 801d95e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801d962:	bf08      	it	eq
 801d964:	4618      	moveq	r0, r3
 801d966:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d96a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d96e:	e7d1      	b.n	801d914 <sinf+0x44>
 801d970:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d974:	d237      	bcs.n	801d9e6 <sinf+0x116>
 801d976:	4a21      	ldr	r2, [pc, #132]	; (801d9fc <sinf+0x12c>)
 801d978:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801d97c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801d980:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d984:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801d988:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d98c:	6a2a      	ldr	r2, [r5, #32]
 801d98e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d992:	4083      	lsls	r3, r0
 801d994:	fba3 2002 	umull	r2, r0, r3, r2
 801d998:	692a      	ldr	r2, [r5, #16]
 801d99a:	4359      	muls	r1, r3
 801d99c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d9a0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801d9a4:	0f9d      	lsrs	r5, r3, #30
 801d9a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d9aa:	1ac9      	subs	r1, r1, r3
 801d9ac:	f7e2 fe7e 	bl	80006ac <__aeabi_l2d>
 801d9b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d9b4:	4b10      	ldr	r3, [pc, #64]	; (801d9f8 <sinf+0x128>)
 801d9b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801d9f0 <sinf+0x120>
 801d9ba:	ec41 0b17 	vmov	d7, r0, r1
 801d9be:	f004 0203 	and.w	r2, r4, #3
 801d9c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d9c6:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d9ca:	ed92 7b00 	vldr	d7, [r2]
 801d9ce:	ee20 1b00 	vmul.f64	d1, d0, d0
 801d9d2:	f014 0f02 	tst.w	r4, #2
 801d9d6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d9da:	4629      	mov	r1, r5
 801d9dc:	bf08      	it	eq
 801d9de:	4618      	moveq	r0, r3
 801d9e0:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d9e4:	e796      	b.n	801d914 <sinf+0x44>
 801d9e6:	b003      	add	sp, #12
 801d9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9ec:	f000 b8e3 	b.w	801dbb6 <__math_invalidf>
 801d9f0:	54442d18 	.word	0x54442d18
 801d9f4:	3c1921fb 	.word	0x3c1921fb
 801d9f8:	08020fc8 	.word	0x08020fc8
 801d9fc:	08020f64 	.word	0x08020f64

0801da00 <sinf_poly>:
 801da00:	07cb      	lsls	r3, r1, #31
 801da02:	d412      	bmi.n	801da2a <sinf_poly+0x2a>
 801da04:	ee21 5b00 	vmul.f64	d5, d1, d0
 801da08:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801da0c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801da10:	eea6 7b01 	vfma.f64	d7, d6, d1
 801da14:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801da18:	ee21 1b05 	vmul.f64	d1, d1, d5
 801da1c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801da20:	eea7 0b01 	vfma.f64	d0, d7, d1
 801da24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801da28:	4770      	bx	lr
 801da2a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801da2e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801da32:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801da36:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801da3a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801da3e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801da42:	eea1 0b06 	vfma.f64	d0, d1, d6
 801da46:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801da4a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801da4e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801da52:	e7e5      	b.n	801da20 <sinf_poly+0x20>
 801da54:	0000      	movs	r0, r0
	...

0801da58 <cosf>:
 801da58:	b538      	push	{r3, r4, r5, lr}
 801da5a:	ee10 4a10 	vmov	r4, s0
 801da5e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801da62:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801da66:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801da6a:	d21f      	bcs.n	801daac <cosf+0x54>
 801da6c:	ee27 7b07 	vmul.f64	d7, d7, d7
 801da70:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801da74:	f0c0 8086 	bcc.w	801db84 <cosf+0x12c>
 801da78:	ee27 4b07 	vmul.f64	d4, d7, d7
 801da7c:	4b46      	ldr	r3, [pc, #280]	; (801db98 <cosf+0x140>)
 801da7e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801da82:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801da86:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 801da8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801da8e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801da92:	eea7 0b05 	vfma.f64	d0, d7, d5
 801da96:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801da9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801da9e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801daa2:	eea6 0b07 	vfma.f64	d0, d6, d7
 801daa6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801daaa:	bd38      	pop	{r3, r4, r5, pc}
 801daac:	f240 422e 	movw	r2, #1070	; 0x42e
 801dab0:	4293      	cmp	r3, r2
 801dab2:	d829      	bhi.n	801db08 <cosf+0xb0>
 801dab4:	4b38      	ldr	r3, [pc, #224]	; (801db98 <cosf+0x140>)
 801dab6:	ed93 6b08 	vldr	d6, [r3, #32]
 801daba:	ee27 6b06 	vmul.f64	d6, d7, d6
 801dabe:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801dac2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801dac6:	ee16 1a90 	vmov	r1, s13
 801daca:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801dace:	1609      	asrs	r1, r1, #24
 801dad0:	ee06 1a90 	vmov	s13, r1
 801dad4:	f001 0203 	and.w	r2, r1, #3
 801dad8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801dadc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801dae0:	ed92 0b00 	vldr	d0, [r2]
 801dae4:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 801dae8:	f011 0f02 	tst.w	r1, #2
 801daec:	bf08      	it	eq
 801daee:	4618      	moveq	r0, r3
 801daf0:	f081 0101 	eor.w	r1, r1, #1
 801daf4:	eea5 7b46 	vfms.f64	d7, d5, d6
 801daf8:	ee27 1b07 	vmul.f64	d1, d7, d7
 801dafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db00:	ee27 0b00 	vmul.f64	d0, d7, d0
 801db04:	f7ff bf7c 	b.w	801da00 <sinf_poly>
 801db08:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801db0c:	d236      	bcs.n	801db7c <cosf+0x124>
 801db0e:	4a23      	ldr	r2, [pc, #140]	; (801db9c <cosf+0x144>)
 801db10:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801db14:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801db18:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801db1c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801db20:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801db24:	6a2a      	ldr	r2, [r5, #32]
 801db26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801db2a:	4083      	lsls	r3, r0
 801db2c:	fba3 2002 	umull	r2, r0, r3, r2
 801db30:	692a      	ldr	r2, [r5, #16]
 801db32:	4359      	muls	r1, r3
 801db34:	fbe3 0102 	umlal	r0, r1, r3, r2
 801db38:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801db3c:	0f9d      	lsrs	r5, r3, #30
 801db3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801db42:	1ac9      	subs	r1, r1, r3
 801db44:	f7e2 fdb2 	bl	80006ac <__aeabi_l2d>
 801db48:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801db4c:	4b12      	ldr	r3, [pc, #72]	; (801db98 <cosf+0x140>)
 801db4e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801db90 <cosf+0x138>
 801db52:	ec41 0b17 	vmov	d7, r0, r1
 801db56:	f004 0203 	and.w	r2, r4, #3
 801db5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801db5e:	f014 0f02 	tst.w	r4, #2
 801db62:	ee27 0b00 	vmul.f64	d0, d7, d0
 801db66:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801db6a:	ed92 7b00 	vldr	d7, [r2]
 801db6e:	ee20 1b00 	vmul.f64	d1, d0, d0
 801db72:	f085 0101 	eor.w	r1, r5, #1
 801db76:	bf08      	it	eq
 801db78:	4618      	moveq	r0, r3
 801db7a:	e7bf      	b.n	801dafc <cosf+0xa4>
 801db7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db80:	f000 b819 	b.w	801dbb6 <__math_invalidf>
 801db84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801db88:	e78f      	b.n	801daaa <cosf+0x52>
 801db8a:	bf00      	nop
 801db8c:	f3af 8000 	nop.w
 801db90:	54442d18 	.word	0x54442d18
 801db94:	3c1921fb 	.word	0x3c1921fb
 801db98:	08020fc8 	.word	0x08020fc8
 801db9c:	08020f64 	.word	0x08020f64

0801dba0 <with_errnof>:
 801dba0:	b513      	push	{r0, r1, r4, lr}
 801dba2:	4604      	mov	r4, r0
 801dba4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801dba8:	f001 f816 	bl	801ebd8 <__errno>
 801dbac:	ed9d 0a01 	vldr	s0, [sp, #4]
 801dbb0:	6004      	str	r4, [r0, #0]
 801dbb2:	b002      	add	sp, #8
 801dbb4:	bd10      	pop	{r4, pc}

0801dbb6 <__math_invalidf>:
 801dbb6:	eef0 7a40 	vmov.f32	s15, s0
 801dbba:	ee30 7a40 	vsub.f32	s14, s0, s0
 801dbbe:	eef4 7a67 	vcmp.f32	s15, s15
 801dbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbc6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801dbca:	d602      	bvs.n	801dbd2 <__math_invalidf+0x1c>
 801dbcc:	2021      	movs	r0, #33	; 0x21
 801dbce:	f7ff bfe7 	b.w	801dba0 <with_errnof>
 801dbd2:	4770      	bx	lr

0801dbd4 <__ieee754_sqrtf>:
 801dbd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801dbd8:	4770      	bx	lr
	...

0801dbdc <__ieee754_asinf>:
 801dbdc:	b538      	push	{r3, r4, r5, lr}
 801dbde:	ee10 5a10 	vmov	r5, s0
 801dbe2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801dbe6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801dbea:	ed2d 8b04 	vpush	{d8-d9}
 801dbee:	d10c      	bne.n	801dc0a <__ieee754_asinf+0x2e>
 801dbf0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801dd68 <__ieee754_asinf+0x18c>
 801dbf4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801dd6c <__ieee754_asinf+0x190>
 801dbf8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801dbfc:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dc00:	eeb0 0a67 	vmov.f32	s0, s15
 801dc04:	ecbd 8b04 	vpop	{d8-d9}
 801dc08:	bd38      	pop	{r3, r4, r5, pc}
 801dc0a:	dd04      	ble.n	801dc16 <__ieee754_asinf+0x3a>
 801dc0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dc10:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801dc14:	e7f6      	b.n	801dc04 <__ieee754_asinf+0x28>
 801dc16:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801dc1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801dc1e:	da0b      	bge.n	801dc38 <__ieee754_asinf+0x5c>
 801dc20:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801dc24:	da52      	bge.n	801dccc <__ieee754_asinf+0xf0>
 801dc26:	eddf 7a52 	vldr	s15, [pc, #328]	; 801dd70 <__ieee754_asinf+0x194>
 801dc2a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801dc2e:	eef4 7ae8 	vcmpe.f32	s15, s17
 801dc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc36:	dce5      	bgt.n	801dc04 <__ieee754_asinf+0x28>
 801dc38:	f7ff fe12 	bl	801d860 <fabsf>
 801dc3c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801dc40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dc44:	ee20 8a27 	vmul.f32	s16, s0, s15
 801dc48:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801dd74 <__ieee754_asinf+0x198>
 801dc4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801dd78 <__ieee754_asinf+0x19c>
 801dc50:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801dd7c <__ieee754_asinf+0x1a0>
 801dc54:	eea8 7a27 	vfma.f32	s14, s16, s15
 801dc58:	eddf 7a49 	vldr	s15, [pc, #292]	; 801dd80 <__ieee754_asinf+0x1a4>
 801dc5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dc60:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801dd84 <__ieee754_asinf+0x1a8>
 801dc64:	eea7 7a88 	vfma.f32	s14, s15, s16
 801dc68:	eddf 7a47 	vldr	s15, [pc, #284]	; 801dd88 <__ieee754_asinf+0x1ac>
 801dc6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dc70:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801dd8c <__ieee754_asinf+0x1b0>
 801dc74:	eea7 9a88 	vfma.f32	s18, s15, s16
 801dc78:	eddf 7a45 	vldr	s15, [pc, #276]	; 801dd90 <__ieee754_asinf+0x1b4>
 801dc7c:	eee8 7a07 	vfma.f32	s15, s16, s14
 801dc80:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801dd94 <__ieee754_asinf+0x1b8>
 801dc84:	eea7 7a88 	vfma.f32	s14, s15, s16
 801dc88:	eddf 7a43 	vldr	s15, [pc, #268]	; 801dd98 <__ieee754_asinf+0x1bc>
 801dc8c:	eee7 7a08 	vfma.f32	s15, s14, s16
 801dc90:	eeb0 0a48 	vmov.f32	s0, s16
 801dc94:	eee7 8a88 	vfma.f32	s17, s15, s16
 801dc98:	f7ff ff9c 	bl	801dbd4 <__ieee754_sqrtf>
 801dc9c:	4b3f      	ldr	r3, [pc, #252]	; (801dd9c <__ieee754_asinf+0x1c0>)
 801dc9e:	ee29 9a08 	vmul.f32	s18, s18, s16
 801dca2:	429c      	cmp	r4, r3
 801dca4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801dca8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801dcac:	dd3d      	ble.n	801dd2a <__ieee754_asinf+0x14e>
 801dcae:	eea0 0a06 	vfma.f32	s0, s0, s12
 801dcb2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801dda0 <__ieee754_asinf+0x1c4>
 801dcb6:	eee0 7a26 	vfma.f32	s15, s0, s13
 801dcba:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801dd6c <__ieee754_asinf+0x190>
 801dcbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dcc2:	2d00      	cmp	r5, #0
 801dcc4:	bfd8      	it	le
 801dcc6:	eeb1 0a40 	vnegle.f32	s0, s0
 801dcca:	e79b      	b.n	801dc04 <__ieee754_asinf+0x28>
 801dccc:	ee60 7a00 	vmul.f32	s15, s0, s0
 801dcd0:	eddf 6a29 	vldr	s13, [pc, #164]	; 801dd78 <__ieee754_asinf+0x19c>
 801dcd4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801dd74 <__ieee754_asinf+0x198>
 801dcd8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801dd8c <__ieee754_asinf+0x1b0>
 801dcdc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801dce0:	eddf 6a27 	vldr	s13, [pc, #156]	; 801dd80 <__ieee754_asinf+0x1a4>
 801dce4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dce8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801dd84 <__ieee754_asinf+0x1a8>
 801dcec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dcf0:	eddf 6a25 	vldr	s13, [pc, #148]	; 801dd88 <__ieee754_asinf+0x1ac>
 801dcf4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dcf8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801dd7c <__ieee754_asinf+0x1a0>
 801dcfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dd00:	eddf 6a23 	vldr	s13, [pc, #140]	; 801dd90 <__ieee754_asinf+0x1b4>
 801dd04:	eee7 6a86 	vfma.f32	s13, s15, s12
 801dd08:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801dd94 <__ieee754_asinf+0x1b8>
 801dd0c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dd10:	eddf 6a21 	vldr	s13, [pc, #132]	; 801dd98 <__ieee754_asinf+0x1bc>
 801dd14:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dd18:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dd1c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801dd20:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801dd24:	eea0 0a27 	vfma.f32	s0, s0, s15
 801dd28:	e76c      	b.n	801dc04 <__ieee754_asinf+0x28>
 801dd2a:	ee10 3a10 	vmov	r3, s0
 801dd2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801dd32:	f023 030f 	bic.w	r3, r3, #15
 801dd36:	ee07 3a10 	vmov	s14, r3
 801dd3a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801dd3e:	ee70 7a07 	vadd.f32	s15, s0, s14
 801dd42:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dd46:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801dd4a:	eddf 7a07 	vldr	s15, [pc, #28]	; 801dd68 <__ieee754_asinf+0x18c>
 801dd4e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801dd52:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801dd56:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801dda4 <__ieee754_asinf+0x1c8>
 801dd5a:	eeb0 6a40 	vmov.f32	s12, s0
 801dd5e:	eea7 6a66 	vfms.f32	s12, s14, s13
 801dd62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801dd66:	e7aa      	b.n	801dcbe <__ieee754_asinf+0xe2>
 801dd68:	b33bbd2e 	.word	0xb33bbd2e
 801dd6c:	3fc90fdb 	.word	0x3fc90fdb
 801dd70:	7149f2ca 	.word	0x7149f2ca
 801dd74:	3a4f7f04 	.word	0x3a4f7f04
 801dd78:	3811ef08 	.word	0x3811ef08
 801dd7c:	3e2aaaab 	.word	0x3e2aaaab
 801dd80:	bd241146 	.word	0xbd241146
 801dd84:	3e4e0aa8 	.word	0x3e4e0aa8
 801dd88:	bea6b090 	.word	0xbea6b090
 801dd8c:	3d9dc62e 	.word	0x3d9dc62e
 801dd90:	bf303361 	.word	0xbf303361
 801dd94:	4001572d 	.word	0x4001572d
 801dd98:	c019d139 	.word	0xc019d139
 801dd9c:	3f799999 	.word	0x3f799999
 801dda0:	333bbd2e 	.word	0x333bbd2e
 801dda4:	3f490fdb 	.word	0x3f490fdb

0801dda8 <__ieee754_atan2f>:
 801dda8:	ee10 2a90 	vmov	r2, s1
 801ddac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801ddb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ddb4:	b510      	push	{r4, lr}
 801ddb6:	eef0 7a40 	vmov.f32	s15, s0
 801ddba:	dc06      	bgt.n	801ddca <__ieee754_atan2f+0x22>
 801ddbc:	ee10 0a10 	vmov	r0, s0
 801ddc0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801ddc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ddc8:	dd04      	ble.n	801ddd4 <__ieee754_atan2f+0x2c>
 801ddca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ddce:	eeb0 0a67 	vmov.f32	s0, s15
 801ddd2:	bd10      	pop	{r4, pc}
 801ddd4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801ddd8:	d103      	bne.n	801dde2 <__ieee754_atan2f+0x3a>
 801ddda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddde:	f000 b881 	b.w	801dee4 <atanf>
 801dde2:	1794      	asrs	r4, r2, #30
 801dde4:	f004 0402 	and.w	r4, r4, #2
 801dde8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801ddec:	b93b      	cbnz	r3, 801ddfe <__ieee754_atan2f+0x56>
 801ddee:	2c02      	cmp	r4, #2
 801ddf0:	d05c      	beq.n	801deac <__ieee754_atan2f+0x104>
 801ddf2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801dec0 <__ieee754_atan2f+0x118>
 801ddf6:	2c03      	cmp	r4, #3
 801ddf8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801ddfc:	e7e7      	b.n	801ddce <__ieee754_atan2f+0x26>
 801ddfe:	b939      	cbnz	r1, 801de10 <__ieee754_atan2f+0x68>
 801de00:	eddf 7a30 	vldr	s15, [pc, #192]	; 801dec4 <__ieee754_atan2f+0x11c>
 801de04:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801dec8 <__ieee754_atan2f+0x120>
 801de08:	2800      	cmp	r0, #0
 801de0a:	fe67 7a87 	vselge.f32	s15, s15, s14
 801de0e:	e7de      	b.n	801ddce <__ieee754_atan2f+0x26>
 801de10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801de14:	d110      	bne.n	801de38 <__ieee754_atan2f+0x90>
 801de16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801de1a:	f104 34ff 	add.w	r4, r4, #4294967295
 801de1e:	d107      	bne.n	801de30 <__ieee754_atan2f+0x88>
 801de20:	2c02      	cmp	r4, #2
 801de22:	d846      	bhi.n	801deb2 <__ieee754_atan2f+0x10a>
 801de24:	4b29      	ldr	r3, [pc, #164]	; (801decc <__ieee754_atan2f+0x124>)
 801de26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801de2a:	edd3 7a00 	vldr	s15, [r3]
 801de2e:	e7ce      	b.n	801ddce <__ieee754_atan2f+0x26>
 801de30:	2c02      	cmp	r4, #2
 801de32:	d841      	bhi.n	801deb8 <__ieee754_atan2f+0x110>
 801de34:	4b26      	ldr	r3, [pc, #152]	; (801ded0 <__ieee754_atan2f+0x128>)
 801de36:	e7f6      	b.n	801de26 <__ieee754_atan2f+0x7e>
 801de38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801de3c:	d0e0      	beq.n	801de00 <__ieee754_atan2f+0x58>
 801de3e:	1a5b      	subs	r3, r3, r1
 801de40:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801de44:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801de48:	da1a      	bge.n	801de80 <__ieee754_atan2f+0xd8>
 801de4a:	2a00      	cmp	r2, #0
 801de4c:	da01      	bge.n	801de52 <__ieee754_atan2f+0xaa>
 801de4e:	313c      	adds	r1, #60	; 0x3c
 801de50:	db19      	blt.n	801de86 <__ieee754_atan2f+0xde>
 801de52:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801de56:	f7ff fd03 	bl	801d860 <fabsf>
 801de5a:	f000 f843 	bl	801dee4 <atanf>
 801de5e:	eef0 7a40 	vmov.f32	s15, s0
 801de62:	2c01      	cmp	r4, #1
 801de64:	d012      	beq.n	801de8c <__ieee754_atan2f+0xe4>
 801de66:	2c02      	cmp	r4, #2
 801de68:	d017      	beq.n	801de9a <__ieee754_atan2f+0xf2>
 801de6a:	2c00      	cmp	r4, #0
 801de6c:	d0af      	beq.n	801ddce <__ieee754_atan2f+0x26>
 801de6e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801ded4 <__ieee754_atan2f+0x12c>
 801de72:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de76:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801ded8 <__ieee754_atan2f+0x130>
 801de7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801de7e:	e7a6      	b.n	801ddce <__ieee754_atan2f+0x26>
 801de80:	eddf 7a10 	vldr	s15, [pc, #64]	; 801dec4 <__ieee754_atan2f+0x11c>
 801de84:	e7ed      	b.n	801de62 <__ieee754_atan2f+0xba>
 801de86:	eddf 7a15 	vldr	s15, [pc, #84]	; 801dedc <__ieee754_atan2f+0x134>
 801de8a:	e7ea      	b.n	801de62 <__ieee754_atan2f+0xba>
 801de8c:	ee17 3a90 	vmov	r3, s15
 801de90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801de94:	ee07 3a90 	vmov	s15, r3
 801de98:	e799      	b.n	801ddce <__ieee754_atan2f+0x26>
 801de9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801ded4 <__ieee754_atan2f+0x12c>
 801de9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dea2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801ded8 <__ieee754_atan2f+0x130>
 801dea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801deaa:	e790      	b.n	801ddce <__ieee754_atan2f+0x26>
 801deac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801ded8 <__ieee754_atan2f+0x130>
 801deb0:	e78d      	b.n	801ddce <__ieee754_atan2f+0x26>
 801deb2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801dee0 <__ieee754_atan2f+0x138>
 801deb6:	e78a      	b.n	801ddce <__ieee754_atan2f+0x26>
 801deb8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801dedc <__ieee754_atan2f+0x134>
 801debc:	e787      	b.n	801ddce <__ieee754_atan2f+0x26>
 801debe:	bf00      	nop
 801dec0:	c0490fdb 	.word	0xc0490fdb
 801dec4:	3fc90fdb 	.word	0x3fc90fdb
 801dec8:	bfc90fdb 	.word	0xbfc90fdb
 801decc:	080210a8 	.word	0x080210a8
 801ded0:	080210b4 	.word	0x080210b4
 801ded4:	33bbbd2e 	.word	0x33bbbd2e
 801ded8:	40490fdb 	.word	0x40490fdb
 801dedc:	00000000 	.word	0x00000000
 801dee0:	3f490fdb 	.word	0x3f490fdb

0801dee4 <atanf>:
 801dee4:	b538      	push	{r3, r4, r5, lr}
 801dee6:	ee10 5a10 	vmov	r5, s0
 801deea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801deee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801def2:	eef0 7a40 	vmov.f32	s15, s0
 801def6:	db0f      	blt.n	801df18 <atanf+0x34>
 801def8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801defc:	dd04      	ble.n	801df08 <atanf+0x24>
 801defe:	ee70 7a00 	vadd.f32	s15, s0, s0
 801df02:	eeb0 0a67 	vmov.f32	s0, s15
 801df06:	bd38      	pop	{r3, r4, r5, pc}
 801df08:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e040 <atanf+0x15c>
 801df0c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801e044 <atanf+0x160>
 801df10:	2d00      	cmp	r5, #0
 801df12:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801df16:	e7f4      	b.n	801df02 <atanf+0x1e>
 801df18:	4b4b      	ldr	r3, [pc, #300]	; (801e048 <atanf+0x164>)
 801df1a:	429c      	cmp	r4, r3
 801df1c:	dc10      	bgt.n	801df40 <atanf+0x5c>
 801df1e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801df22:	da0a      	bge.n	801df3a <atanf+0x56>
 801df24:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e04c <atanf+0x168>
 801df28:	ee30 7a07 	vadd.f32	s14, s0, s14
 801df2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df30:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801df34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df38:	dce3      	bgt.n	801df02 <atanf+0x1e>
 801df3a:	f04f 33ff 	mov.w	r3, #4294967295
 801df3e:	e013      	b.n	801df68 <atanf+0x84>
 801df40:	f7ff fc8e 	bl	801d860 <fabsf>
 801df44:	4b42      	ldr	r3, [pc, #264]	; (801e050 <atanf+0x16c>)
 801df46:	429c      	cmp	r4, r3
 801df48:	dc4f      	bgt.n	801dfea <atanf+0x106>
 801df4a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801df4e:	429c      	cmp	r4, r3
 801df50:	dc41      	bgt.n	801dfd6 <atanf+0xf2>
 801df52:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801df56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801df5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801df5e:	2300      	movs	r3, #0
 801df60:	ee30 0a27 	vadd.f32	s0, s0, s15
 801df64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df68:	1c5a      	adds	r2, r3, #1
 801df6a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801df6e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801e054 <atanf+0x170>
 801df72:	eddf 5a39 	vldr	s11, [pc, #228]	; 801e058 <atanf+0x174>
 801df76:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801e05c <atanf+0x178>
 801df7a:	ee66 6a06 	vmul.f32	s13, s12, s12
 801df7e:	eee6 5a87 	vfma.f32	s11, s13, s14
 801df82:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801e060 <atanf+0x17c>
 801df86:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801df8a:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e064 <atanf+0x180>
 801df8e:	eee7 5a26 	vfma.f32	s11, s14, s13
 801df92:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801e068 <atanf+0x184>
 801df96:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801df9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e06c <atanf+0x188>
 801df9e:	eee7 5a26 	vfma.f32	s11, s14, s13
 801dfa2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801e070 <atanf+0x18c>
 801dfa6:	eea6 5a87 	vfma.f32	s10, s13, s14
 801dfaa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801e074 <atanf+0x190>
 801dfae:	eea5 7a26 	vfma.f32	s14, s10, s13
 801dfb2:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e078 <atanf+0x194>
 801dfb6:	eea7 5a26 	vfma.f32	s10, s14, s13
 801dfba:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801e07c <atanf+0x198>
 801dfbe:	eea5 7a26 	vfma.f32	s14, s10, s13
 801dfc2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801dfc6:	eea5 7a86 	vfma.f32	s14, s11, s12
 801dfca:	ee27 7a87 	vmul.f32	s14, s15, s14
 801dfce:	d121      	bne.n	801e014 <atanf+0x130>
 801dfd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dfd4:	e795      	b.n	801df02 <atanf+0x1e>
 801dfd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801dfda:	ee30 7a67 	vsub.f32	s14, s0, s15
 801dfde:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dfe2:	2301      	movs	r3, #1
 801dfe4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dfe8:	e7be      	b.n	801df68 <atanf+0x84>
 801dfea:	4b25      	ldr	r3, [pc, #148]	; (801e080 <atanf+0x19c>)
 801dfec:	429c      	cmp	r4, r3
 801dfee:	dc0b      	bgt.n	801e008 <atanf+0x124>
 801dff0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801dff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dff8:	eea0 7a27 	vfma.f32	s14, s0, s15
 801dffc:	2302      	movs	r3, #2
 801dffe:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e006:	e7af      	b.n	801df68 <atanf+0x84>
 801e008:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e00c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e010:	2303      	movs	r3, #3
 801e012:	e7a9      	b.n	801df68 <atanf+0x84>
 801e014:	4a1b      	ldr	r2, [pc, #108]	; (801e084 <atanf+0x1a0>)
 801e016:	491c      	ldr	r1, [pc, #112]	; (801e088 <atanf+0x1a4>)
 801e018:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e01c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e020:	edd3 6a00 	vldr	s13, [r3]
 801e024:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e028:	2d00      	cmp	r5, #0
 801e02a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e02e:	edd2 7a00 	vldr	s15, [r2]
 801e032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e036:	bfb8      	it	lt
 801e038:	eef1 7a67 	vneglt.f32	s15, s15
 801e03c:	e761      	b.n	801df02 <atanf+0x1e>
 801e03e:	bf00      	nop
 801e040:	3fc90fdb 	.word	0x3fc90fdb
 801e044:	bfc90fdb 	.word	0xbfc90fdb
 801e048:	3edfffff 	.word	0x3edfffff
 801e04c:	7149f2ca 	.word	0x7149f2ca
 801e050:	3f97ffff 	.word	0x3f97ffff
 801e054:	3c8569d7 	.word	0x3c8569d7
 801e058:	3d4bda59 	.word	0x3d4bda59
 801e05c:	bd6ef16b 	.word	0xbd6ef16b
 801e060:	3d886b35 	.word	0x3d886b35
 801e064:	3dba2e6e 	.word	0x3dba2e6e
 801e068:	3e124925 	.word	0x3e124925
 801e06c:	3eaaaaab 	.word	0x3eaaaaab
 801e070:	bd15a221 	.word	0xbd15a221
 801e074:	bd9d8795 	.word	0xbd9d8795
 801e078:	bde38e38 	.word	0xbde38e38
 801e07c:	be4ccccd 	.word	0xbe4ccccd
 801e080:	401bffff 	.word	0x401bffff
 801e084:	080210c0 	.word	0x080210c0
 801e088:	080210d0 	.word	0x080210d0

0801e08c <__cvt>:
 801e08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e08e:	ed2d 8b02 	vpush	{d8}
 801e092:	eeb0 8b40 	vmov.f64	d8, d0
 801e096:	b085      	sub	sp, #20
 801e098:	4617      	mov	r7, r2
 801e09a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e09c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e09e:	ee18 2a90 	vmov	r2, s17
 801e0a2:	f025 0520 	bic.w	r5, r5, #32
 801e0a6:	2a00      	cmp	r2, #0
 801e0a8:	bfb6      	itet	lt
 801e0aa:	222d      	movlt	r2, #45	; 0x2d
 801e0ac:	2200      	movge	r2, #0
 801e0ae:	eeb1 8b40 	vneglt.f64	d8, d0
 801e0b2:	2d46      	cmp	r5, #70	; 0x46
 801e0b4:	460c      	mov	r4, r1
 801e0b6:	701a      	strb	r2, [r3, #0]
 801e0b8:	d004      	beq.n	801e0c4 <__cvt+0x38>
 801e0ba:	2d45      	cmp	r5, #69	; 0x45
 801e0bc:	d100      	bne.n	801e0c0 <__cvt+0x34>
 801e0be:	3401      	adds	r4, #1
 801e0c0:	2102      	movs	r1, #2
 801e0c2:	e000      	b.n	801e0c6 <__cvt+0x3a>
 801e0c4:	2103      	movs	r1, #3
 801e0c6:	ab03      	add	r3, sp, #12
 801e0c8:	9301      	str	r3, [sp, #4]
 801e0ca:	ab02      	add	r3, sp, #8
 801e0cc:	9300      	str	r3, [sp, #0]
 801e0ce:	4622      	mov	r2, r4
 801e0d0:	4633      	mov	r3, r6
 801e0d2:	eeb0 0b48 	vmov.f64	d0, d8
 801e0d6:	f000 fe43 	bl	801ed60 <_dtoa_r>
 801e0da:	2d47      	cmp	r5, #71	; 0x47
 801e0dc:	d101      	bne.n	801e0e2 <__cvt+0x56>
 801e0de:	07fb      	lsls	r3, r7, #31
 801e0e0:	d51a      	bpl.n	801e118 <__cvt+0x8c>
 801e0e2:	2d46      	cmp	r5, #70	; 0x46
 801e0e4:	eb00 0204 	add.w	r2, r0, r4
 801e0e8:	d10c      	bne.n	801e104 <__cvt+0x78>
 801e0ea:	7803      	ldrb	r3, [r0, #0]
 801e0ec:	2b30      	cmp	r3, #48	; 0x30
 801e0ee:	d107      	bne.n	801e100 <__cvt+0x74>
 801e0f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f8:	bf1c      	itt	ne
 801e0fa:	f1c4 0401 	rsbne	r4, r4, #1
 801e0fe:	6034      	strne	r4, [r6, #0]
 801e100:	6833      	ldr	r3, [r6, #0]
 801e102:	441a      	add	r2, r3
 801e104:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e10c:	bf08      	it	eq
 801e10e:	9203      	streq	r2, [sp, #12]
 801e110:	2130      	movs	r1, #48	; 0x30
 801e112:	9b03      	ldr	r3, [sp, #12]
 801e114:	4293      	cmp	r3, r2
 801e116:	d307      	bcc.n	801e128 <__cvt+0x9c>
 801e118:	9b03      	ldr	r3, [sp, #12]
 801e11a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e11c:	1a1b      	subs	r3, r3, r0
 801e11e:	6013      	str	r3, [r2, #0]
 801e120:	b005      	add	sp, #20
 801e122:	ecbd 8b02 	vpop	{d8}
 801e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e128:	1c5c      	adds	r4, r3, #1
 801e12a:	9403      	str	r4, [sp, #12]
 801e12c:	7019      	strb	r1, [r3, #0]
 801e12e:	e7f0      	b.n	801e112 <__cvt+0x86>

0801e130 <__exponent>:
 801e130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e132:	4603      	mov	r3, r0
 801e134:	2900      	cmp	r1, #0
 801e136:	bfb8      	it	lt
 801e138:	4249      	neglt	r1, r1
 801e13a:	f803 2b02 	strb.w	r2, [r3], #2
 801e13e:	bfb4      	ite	lt
 801e140:	222d      	movlt	r2, #45	; 0x2d
 801e142:	222b      	movge	r2, #43	; 0x2b
 801e144:	2909      	cmp	r1, #9
 801e146:	7042      	strb	r2, [r0, #1]
 801e148:	dd2a      	ble.n	801e1a0 <__exponent+0x70>
 801e14a:	f10d 0207 	add.w	r2, sp, #7
 801e14e:	4617      	mov	r7, r2
 801e150:	260a      	movs	r6, #10
 801e152:	4694      	mov	ip, r2
 801e154:	fb91 f5f6 	sdiv	r5, r1, r6
 801e158:	fb06 1415 	mls	r4, r6, r5, r1
 801e15c:	3430      	adds	r4, #48	; 0x30
 801e15e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801e162:	460c      	mov	r4, r1
 801e164:	2c63      	cmp	r4, #99	; 0x63
 801e166:	f102 32ff 	add.w	r2, r2, #4294967295
 801e16a:	4629      	mov	r1, r5
 801e16c:	dcf1      	bgt.n	801e152 <__exponent+0x22>
 801e16e:	3130      	adds	r1, #48	; 0x30
 801e170:	f1ac 0402 	sub.w	r4, ip, #2
 801e174:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e178:	1c41      	adds	r1, r0, #1
 801e17a:	4622      	mov	r2, r4
 801e17c:	42ba      	cmp	r2, r7
 801e17e:	d30a      	bcc.n	801e196 <__exponent+0x66>
 801e180:	f10d 0209 	add.w	r2, sp, #9
 801e184:	eba2 020c 	sub.w	r2, r2, ip
 801e188:	42bc      	cmp	r4, r7
 801e18a:	bf88      	it	hi
 801e18c:	2200      	movhi	r2, #0
 801e18e:	4413      	add	r3, r2
 801e190:	1a18      	subs	r0, r3, r0
 801e192:	b003      	add	sp, #12
 801e194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e196:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e19a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801e19e:	e7ed      	b.n	801e17c <__exponent+0x4c>
 801e1a0:	2330      	movs	r3, #48	; 0x30
 801e1a2:	3130      	adds	r1, #48	; 0x30
 801e1a4:	7083      	strb	r3, [r0, #2]
 801e1a6:	70c1      	strb	r1, [r0, #3]
 801e1a8:	1d03      	adds	r3, r0, #4
 801e1aa:	e7f1      	b.n	801e190 <__exponent+0x60>
 801e1ac:	0000      	movs	r0, r0
	...

0801e1b0 <_printf_float>:
 801e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1b4:	b08b      	sub	sp, #44	; 0x2c
 801e1b6:	460c      	mov	r4, r1
 801e1b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801e1bc:	4616      	mov	r6, r2
 801e1be:	461f      	mov	r7, r3
 801e1c0:	4605      	mov	r5, r0
 801e1c2:	f000 fcbf 	bl	801eb44 <_localeconv_r>
 801e1c6:	f8d0 b000 	ldr.w	fp, [r0]
 801e1ca:	4658      	mov	r0, fp
 801e1cc:	f7e2 f8d8 	bl	8000380 <strlen>
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	9308      	str	r3, [sp, #32]
 801e1d4:	f8d8 3000 	ldr.w	r3, [r8]
 801e1d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e1dc:	6822      	ldr	r2, [r4, #0]
 801e1de:	3307      	adds	r3, #7
 801e1e0:	f023 0307 	bic.w	r3, r3, #7
 801e1e4:	f103 0108 	add.w	r1, r3, #8
 801e1e8:	f8c8 1000 	str.w	r1, [r8]
 801e1ec:	ed93 0b00 	vldr	d0, [r3]
 801e1f0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801e450 <_printf_float+0x2a0>
 801e1f4:	eeb0 7bc0 	vabs.f64	d7, d0
 801e1f8:	eeb4 7b46 	vcmp.f64	d7, d6
 801e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e200:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801e204:	4682      	mov	sl, r0
 801e206:	dd24      	ble.n	801e252 <_printf_float+0xa2>
 801e208:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e210:	d502      	bpl.n	801e218 <_printf_float+0x68>
 801e212:	232d      	movs	r3, #45	; 0x2d
 801e214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e218:	498f      	ldr	r1, [pc, #572]	; (801e458 <_printf_float+0x2a8>)
 801e21a:	4b90      	ldr	r3, [pc, #576]	; (801e45c <_printf_float+0x2ac>)
 801e21c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e220:	bf94      	ite	ls
 801e222:	4688      	movls	r8, r1
 801e224:	4698      	movhi	r8, r3
 801e226:	2303      	movs	r3, #3
 801e228:	6123      	str	r3, [r4, #16]
 801e22a:	f022 0204 	bic.w	r2, r2, #4
 801e22e:	2300      	movs	r3, #0
 801e230:	6022      	str	r2, [r4, #0]
 801e232:	9304      	str	r3, [sp, #16]
 801e234:	9700      	str	r7, [sp, #0]
 801e236:	4633      	mov	r3, r6
 801e238:	aa09      	add	r2, sp, #36	; 0x24
 801e23a:	4621      	mov	r1, r4
 801e23c:	4628      	mov	r0, r5
 801e23e:	f000 f9d1 	bl	801e5e4 <_printf_common>
 801e242:	3001      	adds	r0, #1
 801e244:	f040 808a 	bne.w	801e35c <_printf_float+0x1ac>
 801e248:	f04f 30ff 	mov.w	r0, #4294967295
 801e24c:	b00b      	add	sp, #44	; 0x2c
 801e24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e252:	eeb4 0b40 	vcmp.f64	d0, d0
 801e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e25a:	d709      	bvc.n	801e270 <_printf_float+0xc0>
 801e25c:	ee10 3a90 	vmov	r3, s1
 801e260:	2b00      	cmp	r3, #0
 801e262:	bfbc      	itt	lt
 801e264:	232d      	movlt	r3, #45	; 0x2d
 801e266:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e26a:	497d      	ldr	r1, [pc, #500]	; (801e460 <_printf_float+0x2b0>)
 801e26c:	4b7d      	ldr	r3, [pc, #500]	; (801e464 <_printf_float+0x2b4>)
 801e26e:	e7d5      	b.n	801e21c <_printf_float+0x6c>
 801e270:	6863      	ldr	r3, [r4, #4]
 801e272:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801e276:	9104      	str	r1, [sp, #16]
 801e278:	1c59      	adds	r1, r3, #1
 801e27a:	d13c      	bne.n	801e2f6 <_printf_float+0x146>
 801e27c:	2306      	movs	r3, #6
 801e27e:	6063      	str	r3, [r4, #4]
 801e280:	2300      	movs	r3, #0
 801e282:	9303      	str	r3, [sp, #12]
 801e284:	ab08      	add	r3, sp, #32
 801e286:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e28a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e28e:	ab07      	add	r3, sp, #28
 801e290:	6861      	ldr	r1, [r4, #4]
 801e292:	9300      	str	r3, [sp, #0]
 801e294:	6022      	str	r2, [r4, #0]
 801e296:	f10d 031b 	add.w	r3, sp, #27
 801e29a:	4628      	mov	r0, r5
 801e29c:	f7ff fef6 	bl	801e08c <__cvt>
 801e2a0:	9b04      	ldr	r3, [sp, #16]
 801e2a2:	9907      	ldr	r1, [sp, #28]
 801e2a4:	2b47      	cmp	r3, #71	; 0x47
 801e2a6:	4680      	mov	r8, r0
 801e2a8:	d108      	bne.n	801e2bc <_printf_float+0x10c>
 801e2aa:	1cc8      	adds	r0, r1, #3
 801e2ac:	db02      	blt.n	801e2b4 <_printf_float+0x104>
 801e2ae:	6863      	ldr	r3, [r4, #4]
 801e2b0:	4299      	cmp	r1, r3
 801e2b2:	dd41      	ble.n	801e338 <_printf_float+0x188>
 801e2b4:	f1a9 0902 	sub.w	r9, r9, #2
 801e2b8:	fa5f f989 	uxtb.w	r9, r9
 801e2bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e2c0:	d820      	bhi.n	801e304 <_printf_float+0x154>
 801e2c2:	3901      	subs	r1, #1
 801e2c4:	464a      	mov	r2, r9
 801e2c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e2ca:	9107      	str	r1, [sp, #28]
 801e2cc:	f7ff ff30 	bl	801e130 <__exponent>
 801e2d0:	9a08      	ldr	r2, [sp, #32]
 801e2d2:	9004      	str	r0, [sp, #16]
 801e2d4:	1813      	adds	r3, r2, r0
 801e2d6:	2a01      	cmp	r2, #1
 801e2d8:	6123      	str	r3, [r4, #16]
 801e2da:	dc02      	bgt.n	801e2e2 <_printf_float+0x132>
 801e2dc:	6822      	ldr	r2, [r4, #0]
 801e2de:	07d2      	lsls	r2, r2, #31
 801e2e0:	d501      	bpl.n	801e2e6 <_printf_float+0x136>
 801e2e2:	3301      	adds	r3, #1
 801e2e4:	6123      	str	r3, [r4, #16]
 801e2e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d0a2      	beq.n	801e234 <_printf_float+0x84>
 801e2ee:	232d      	movs	r3, #45	; 0x2d
 801e2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e2f4:	e79e      	b.n	801e234 <_printf_float+0x84>
 801e2f6:	9904      	ldr	r1, [sp, #16]
 801e2f8:	2947      	cmp	r1, #71	; 0x47
 801e2fa:	d1c1      	bne.n	801e280 <_printf_float+0xd0>
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d1bf      	bne.n	801e280 <_printf_float+0xd0>
 801e300:	2301      	movs	r3, #1
 801e302:	e7bc      	b.n	801e27e <_printf_float+0xce>
 801e304:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e308:	d118      	bne.n	801e33c <_printf_float+0x18c>
 801e30a:	2900      	cmp	r1, #0
 801e30c:	6863      	ldr	r3, [r4, #4]
 801e30e:	dd0b      	ble.n	801e328 <_printf_float+0x178>
 801e310:	6121      	str	r1, [r4, #16]
 801e312:	b913      	cbnz	r3, 801e31a <_printf_float+0x16a>
 801e314:	6822      	ldr	r2, [r4, #0]
 801e316:	07d0      	lsls	r0, r2, #31
 801e318:	d502      	bpl.n	801e320 <_printf_float+0x170>
 801e31a:	3301      	adds	r3, #1
 801e31c:	440b      	add	r3, r1
 801e31e:	6123      	str	r3, [r4, #16]
 801e320:	2300      	movs	r3, #0
 801e322:	65a1      	str	r1, [r4, #88]	; 0x58
 801e324:	9304      	str	r3, [sp, #16]
 801e326:	e7de      	b.n	801e2e6 <_printf_float+0x136>
 801e328:	b913      	cbnz	r3, 801e330 <_printf_float+0x180>
 801e32a:	6822      	ldr	r2, [r4, #0]
 801e32c:	07d2      	lsls	r2, r2, #31
 801e32e:	d501      	bpl.n	801e334 <_printf_float+0x184>
 801e330:	3302      	adds	r3, #2
 801e332:	e7f4      	b.n	801e31e <_printf_float+0x16e>
 801e334:	2301      	movs	r3, #1
 801e336:	e7f2      	b.n	801e31e <_printf_float+0x16e>
 801e338:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e33c:	9b08      	ldr	r3, [sp, #32]
 801e33e:	4299      	cmp	r1, r3
 801e340:	db05      	blt.n	801e34e <_printf_float+0x19e>
 801e342:	6823      	ldr	r3, [r4, #0]
 801e344:	6121      	str	r1, [r4, #16]
 801e346:	07d8      	lsls	r0, r3, #31
 801e348:	d5ea      	bpl.n	801e320 <_printf_float+0x170>
 801e34a:	1c4b      	adds	r3, r1, #1
 801e34c:	e7e7      	b.n	801e31e <_printf_float+0x16e>
 801e34e:	2900      	cmp	r1, #0
 801e350:	bfd4      	ite	le
 801e352:	f1c1 0202 	rsble	r2, r1, #2
 801e356:	2201      	movgt	r2, #1
 801e358:	4413      	add	r3, r2
 801e35a:	e7e0      	b.n	801e31e <_printf_float+0x16e>
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	055a      	lsls	r2, r3, #21
 801e360:	d407      	bmi.n	801e372 <_printf_float+0x1c2>
 801e362:	6923      	ldr	r3, [r4, #16]
 801e364:	4642      	mov	r2, r8
 801e366:	4631      	mov	r1, r6
 801e368:	4628      	mov	r0, r5
 801e36a:	47b8      	blx	r7
 801e36c:	3001      	adds	r0, #1
 801e36e:	d12a      	bne.n	801e3c6 <_printf_float+0x216>
 801e370:	e76a      	b.n	801e248 <_printf_float+0x98>
 801e372:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e376:	f240 80e0 	bls.w	801e53a <_printf_float+0x38a>
 801e37a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e37e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e386:	d133      	bne.n	801e3f0 <_printf_float+0x240>
 801e388:	4a37      	ldr	r2, [pc, #220]	; (801e468 <_printf_float+0x2b8>)
 801e38a:	2301      	movs	r3, #1
 801e38c:	4631      	mov	r1, r6
 801e38e:	4628      	mov	r0, r5
 801e390:	47b8      	blx	r7
 801e392:	3001      	adds	r0, #1
 801e394:	f43f af58 	beq.w	801e248 <_printf_float+0x98>
 801e398:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e39c:	429a      	cmp	r2, r3
 801e39e:	db02      	blt.n	801e3a6 <_printf_float+0x1f6>
 801e3a0:	6823      	ldr	r3, [r4, #0]
 801e3a2:	07d8      	lsls	r0, r3, #31
 801e3a4:	d50f      	bpl.n	801e3c6 <_printf_float+0x216>
 801e3a6:	4653      	mov	r3, sl
 801e3a8:	465a      	mov	r2, fp
 801e3aa:	4631      	mov	r1, r6
 801e3ac:	4628      	mov	r0, r5
 801e3ae:	47b8      	blx	r7
 801e3b0:	3001      	adds	r0, #1
 801e3b2:	f43f af49 	beq.w	801e248 <_printf_float+0x98>
 801e3b6:	f04f 0800 	mov.w	r8, #0
 801e3ba:	f104 091a 	add.w	r9, r4, #26
 801e3be:	9b08      	ldr	r3, [sp, #32]
 801e3c0:	3b01      	subs	r3, #1
 801e3c2:	4543      	cmp	r3, r8
 801e3c4:	dc09      	bgt.n	801e3da <_printf_float+0x22a>
 801e3c6:	6823      	ldr	r3, [r4, #0]
 801e3c8:	079b      	lsls	r3, r3, #30
 801e3ca:	f100 8106 	bmi.w	801e5da <_printf_float+0x42a>
 801e3ce:	68e0      	ldr	r0, [r4, #12]
 801e3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3d2:	4298      	cmp	r0, r3
 801e3d4:	bfb8      	it	lt
 801e3d6:	4618      	movlt	r0, r3
 801e3d8:	e738      	b.n	801e24c <_printf_float+0x9c>
 801e3da:	2301      	movs	r3, #1
 801e3dc:	464a      	mov	r2, r9
 801e3de:	4631      	mov	r1, r6
 801e3e0:	4628      	mov	r0, r5
 801e3e2:	47b8      	blx	r7
 801e3e4:	3001      	adds	r0, #1
 801e3e6:	f43f af2f 	beq.w	801e248 <_printf_float+0x98>
 801e3ea:	f108 0801 	add.w	r8, r8, #1
 801e3ee:	e7e6      	b.n	801e3be <_printf_float+0x20e>
 801e3f0:	9b07      	ldr	r3, [sp, #28]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	dc3a      	bgt.n	801e46c <_printf_float+0x2bc>
 801e3f6:	4a1c      	ldr	r2, [pc, #112]	; (801e468 <_printf_float+0x2b8>)
 801e3f8:	2301      	movs	r3, #1
 801e3fa:	4631      	mov	r1, r6
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	47b8      	blx	r7
 801e400:	3001      	adds	r0, #1
 801e402:	f43f af21 	beq.w	801e248 <_printf_float+0x98>
 801e406:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801e40a:	4313      	orrs	r3, r2
 801e40c:	d102      	bne.n	801e414 <_printf_float+0x264>
 801e40e:	6823      	ldr	r3, [r4, #0]
 801e410:	07d9      	lsls	r1, r3, #31
 801e412:	d5d8      	bpl.n	801e3c6 <_printf_float+0x216>
 801e414:	4653      	mov	r3, sl
 801e416:	465a      	mov	r2, fp
 801e418:	4631      	mov	r1, r6
 801e41a:	4628      	mov	r0, r5
 801e41c:	47b8      	blx	r7
 801e41e:	3001      	adds	r0, #1
 801e420:	f43f af12 	beq.w	801e248 <_printf_float+0x98>
 801e424:	f04f 0900 	mov.w	r9, #0
 801e428:	f104 0a1a 	add.w	sl, r4, #26
 801e42c:	9b07      	ldr	r3, [sp, #28]
 801e42e:	425b      	negs	r3, r3
 801e430:	454b      	cmp	r3, r9
 801e432:	dc01      	bgt.n	801e438 <_printf_float+0x288>
 801e434:	9b08      	ldr	r3, [sp, #32]
 801e436:	e795      	b.n	801e364 <_printf_float+0x1b4>
 801e438:	2301      	movs	r3, #1
 801e43a:	4652      	mov	r2, sl
 801e43c:	4631      	mov	r1, r6
 801e43e:	4628      	mov	r0, r5
 801e440:	47b8      	blx	r7
 801e442:	3001      	adds	r0, #1
 801e444:	f43f af00 	beq.w	801e248 <_printf_float+0x98>
 801e448:	f109 0901 	add.w	r9, r9, #1
 801e44c:	e7ee      	b.n	801e42c <_printf_float+0x27c>
 801e44e:	bf00      	nop
 801e450:	ffffffff 	.word	0xffffffff
 801e454:	7fefffff 	.word	0x7fefffff
 801e458:	080210e0 	.word	0x080210e0
 801e45c:	080210e4 	.word	0x080210e4
 801e460:	080210e8 	.word	0x080210e8
 801e464:	080210ec 	.word	0x080210ec
 801e468:	080210f0 	.word	0x080210f0
 801e46c:	9a08      	ldr	r2, [sp, #32]
 801e46e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e470:	429a      	cmp	r2, r3
 801e472:	bfa8      	it	ge
 801e474:	461a      	movge	r2, r3
 801e476:	2a00      	cmp	r2, #0
 801e478:	4691      	mov	r9, r2
 801e47a:	dc38      	bgt.n	801e4ee <_printf_float+0x33e>
 801e47c:	2300      	movs	r3, #0
 801e47e:	9305      	str	r3, [sp, #20]
 801e480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e484:	f104 021a 	add.w	r2, r4, #26
 801e488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e48a:	9905      	ldr	r1, [sp, #20]
 801e48c:	9304      	str	r3, [sp, #16]
 801e48e:	eba3 0309 	sub.w	r3, r3, r9
 801e492:	428b      	cmp	r3, r1
 801e494:	dc33      	bgt.n	801e4fe <_printf_float+0x34e>
 801e496:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e49a:	429a      	cmp	r2, r3
 801e49c:	db3c      	blt.n	801e518 <_printf_float+0x368>
 801e49e:	6823      	ldr	r3, [r4, #0]
 801e4a0:	07da      	lsls	r2, r3, #31
 801e4a2:	d439      	bmi.n	801e518 <_printf_float+0x368>
 801e4a4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801e4a8:	eba2 0903 	sub.w	r9, r2, r3
 801e4ac:	9b04      	ldr	r3, [sp, #16]
 801e4ae:	1ad2      	subs	r2, r2, r3
 801e4b0:	4591      	cmp	r9, r2
 801e4b2:	bfa8      	it	ge
 801e4b4:	4691      	movge	r9, r2
 801e4b6:	f1b9 0f00 	cmp.w	r9, #0
 801e4ba:	dc35      	bgt.n	801e528 <_printf_float+0x378>
 801e4bc:	f04f 0800 	mov.w	r8, #0
 801e4c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e4c4:	f104 0a1a 	add.w	sl, r4, #26
 801e4c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e4cc:	1a9b      	subs	r3, r3, r2
 801e4ce:	eba3 0309 	sub.w	r3, r3, r9
 801e4d2:	4543      	cmp	r3, r8
 801e4d4:	f77f af77 	ble.w	801e3c6 <_printf_float+0x216>
 801e4d8:	2301      	movs	r3, #1
 801e4da:	4652      	mov	r2, sl
 801e4dc:	4631      	mov	r1, r6
 801e4de:	4628      	mov	r0, r5
 801e4e0:	47b8      	blx	r7
 801e4e2:	3001      	adds	r0, #1
 801e4e4:	f43f aeb0 	beq.w	801e248 <_printf_float+0x98>
 801e4e8:	f108 0801 	add.w	r8, r8, #1
 801e4ec:	e7ec      	b.n	801e4c8 <_printf_float+0x318>
 801e4ee:	4613      	mov	r3, r2
 801e4f0:	4631      	mov	r1, r6
 801e4f2:	4642      	mov	r2, r8
 801e4f4:	4628      	mov	r0, r5
 801e4f6:	47b8      	blx	r7
 801e4f8:	3001      	adds	r0, #1
 801e4fa:	d1bf      	bne.n	801e47c <_printf_float+0x2cc>
 801e4fc:	e6a4      	b.n	801e248 <_printf_float+0x98>
 801e4fe:	2301      	movs	r3, #1
 801e500:	4631      	mov	r1, r6
 801e502:	4628      	mov	r0, r5
 801e504:	9204      	str	r2, [sp, #16]
 801e506:	47b8      	blx	r7
 801e508:	3001      	adds	r0, #1
 801e50a:	f43f ae9d 	beq.w	801e248 <_printf_float+0x98>
 801e50e:	9b05      	ldr	r3, [sp, #20]
 801e510:	9a04      	ldr	r2, [sp, #16]
 801e512:	3301      	adds	r3, #1
 801e514:	9305      	str	r3, [sp, #20]
 801e516:	e7b7      	b.n	801e488 <_printf_float+0x2d8>
 801e518:	4653      	mov	r3, sl
 801e51a:	465a      	mov	r2, fp
 801e51c:	4631      	mov	r1, r6
 801e51e:	4628      	mov	r0, r5
 801e520:	47b8      	blx	r7
 801e522:	3001      	adds	r0, #1
 801e524:	d1be      	bne.n	801e4a4 <_printf_float+0x2f4>
 801e526:	e68f      	b.n	801e248 <_printf_float+0x98>
 801e528:	9a04      	ldr	r2, [sp, #16]
 801e52a:	464b      	mov	r3, r9
 801e52c:	4442      	add	r2, r8
 801e52e:	4631      	mov	r1, r6
 801e530:	4628      	mov	r0, r5
 801e532:	47b8      	blx	r7
 801e534:	3001      	adds	r0, #1
 801e536:	d1c1      	bne.n	801e4bc <_printf_float+0x30c>
 801e538:	e686      	b.n	801e248 <_printf_float+0x98>
 801e53a:	9a08      	ldr	r2, [sp, #32]
 801e53c:	2a01      	cmp	r2, #1
 801e53e:	dc01      	bgt.n	801e544 <_printf_float+0x394>
 801e540:	07db      	lsls	r3, r3, #31
 801e542:	d537      	bpl.n	801e5b4 <_printf_float+0x404>
 801e544:	2301      	movs	r3, #1
 801e546:	4642      	mov	r2, r8
 801e548:	4631      	mov	r1, r6
 801e54a:	4628      	mov	r0, r5
 801e54c:	47b8      	blx	r7
 801e54e:	3001      	adds	r0, #1
 801e550:	f43f ae7a 	beq.w	801e248 <_printf_float+0x98>
 801e554:	4653      	mov	r3, sl
 801e556:	465a      	mov	r2, fp
 801e558:	4631      	mov	r1, r6
 801e55a:	4628      	mov	r0, r5
 801e55c:	47b8      	blx	r7
 801e55e:	3001      	adds	r0, #1
 801e560:	f43f ae72 	beq.w	801e248 <_printf_float+0x98>
 801e564:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e568:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e570:	9b08      	ldr	r3, [sp, #32]
 801e572:	d01a      	beq.n	801e5aa <_printf_float+0x3fa>
 801e574:	3b01      	subs	r3, #1
 801e576:	f108 0201 	add.w	r2, r8, #1
 801e57a:	4631      	mov	r1, r6
 801e57c:	4628      	mov	r0, r5
 801e57e:	47b8      	blx	r7
 801e580:	3001      	adds	r0, #1
 801e582:	d10e      	bne.n	801e5a2 <_printf_float+0x3f2>
 801e584:	e660      	b.n	801e248 <_printf_float+0x98>
 801e586:	2301      	movs	r3, #1
 801e588:	464a      	mov	r2, r9
 801e58a:	4631      	mov	r1, r6
 801e58c:	4628      	mov	r0, r5
 801e58e:	47b8      	blx	r7
 801e590:	3001      	adds	r0, #1
 801e592:	f43f ae59 	beq.w	801e248 <_printf_float+0x98>
 801e596:	f108 0801 	add.w	r8, r8, #1
 801e59a:	9b08      	ldr	r3, [sp, #32]
 801e59c:	3b01      	subs	r3, #1
 801e59e:	4543      	cmp	r3, r8
 801e5a0:	dcf1      	bgt.n	801e586 <_printf_float+0x3d6>
 801e5a2:	9b04      	ldr	r3, [sp, #16]
 801e5a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e5a8:	e6dd      	b.n	801e366 <_printf_float+0x1b6>
 801e5aa:	f04f 0800 	mov.w	r8, #0
 801e5ae:	f104 091a 	add.w	r9, r4, #26
 801e5b2:	e7f2      	b.n	801e59a <_printf_float+0x3ea>
 801e5b4:	2301      	movs	r3, #1
 801e5b6:	4642      	mov	r2, r8
 801e5b8:	e7df      	b.n	801e57a <_printf_float+0x3ca>
 801e5ba:	2301      	movs	r3, #1
 801e5bc:	464a      	mov	r2, r9
 801e5be:	4631      	mov	r1, r6
 801e5c0:	4628      	mov	r0, r5
 801e5c2:	47b8      	blx	r7
 801e5c4:	3001      	adds	r0, #1
 801e5c6:	f43f ae3f 	beq.w	801e248 <_printf_float+0x98>
 801e5ca:	f108 0801 	add.w	r8, r8, #1
 801e5ce:	68e3      	ldr	r3, [r4, #12]
 801e5d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e5d2:	1a5b      	subs	r3, r3, r1
 801e5d4:	4543      	cmp	r3, r8
 801e5d6:	dcf0      	bgt.n	801e5ba <_printf_float+0x40a>
 801e5d8:	e6f9      	b.n	801e3ce <_printf_float+0x21e>
 801e5da:	f04f 0800 	mov.w	r8, #0
 801e5de:	f104 0919 	add.w	r9, r4, #25
 801e5e2:	e7f4      	b.n	801e5ce <_printf_float+0x41e>

0801e5e4 <_printf_common>:
 801e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5e8:	4616      	mov	r6, r2
 801e5ea:	4699      	mov	r9, r3
 801e5ec:	688a      	ldr	r2, [r1, #8]
 801e5ee:	690b      	ldr	r3, [r1, #16]
 801e5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e5f4:	4293      	cmp	r3, r2
 801e5f6:	bfb8      	it	lt
 801e5f8:	4613      	movlt	r3, r2
 801e5fa:	6033      	str	r3, [r6, #0]
 801e5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e600:	4607      	mov	r7, r0
 801e602:	460c      	mov	r4, r1
 801e604:	b10a      	cbz	r2, 801e60a <_printf_common+0x26>
 801e606:	3301      	adds	r3, #1
 801e608:	6033      	str	r3, [r6, #0]
 801e60a:	6823      	ldr	r3, [r4, #0]
 801e60c:	0699      	lsls	r1, r3, #26
 801e60e:	bf42      	ittt	mi
 801e610:	6833      	ldrmi	r3, [r6, #0]
 801e612:	3302      	addmi	r3, #2
 801e614:	6033      	strmi	r3, [r6, #0]
 801e616:	6825      	ldr	r5, [r4, #0]
 801e618:	f015 0506 	ands.w	r5, r5, #6
 801e61c:	d106      	bne.n	801e62c <_printf_common+0x48>
 801e61e:	f104 0a19 	add.w	sl, r4, #25
 801e622:	68e3      	ldr	r3, [r4, #12]
 801e624:	6832      	ldr	r2, [r6, #0]
 801e626:	1a9b      	subs	r3, r3, r2
 801e628:	42ab      	cmp	r3, r5
 801e62a:	dc26      	bgt.n	801e67a <_printf_common+0x96>
 801e62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e630:	1e13      	subs	r3, r2, #0
 801e632:	6822      	ldr	r2, [r4, #0]
 801e634:	bf18      	it	ne
 801e636:	2301      	movne	r3, #1
 801e638:	0692      	lsls	r2, r2, #26
 801e63a:	d42b      	bmi.n	801e694 <_printf_common+0xb0>
 801e63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e640:	4649      	mov	r1, r9
 801e642:	4638      	mov	r0, r7
 801e644:	47c0      	blx	r8
 801e646:	3001      	adds	r0, #1
 801e648:	d01e      	beq.n	801e688 <_printf_common+0xa4>
 801e64a:	6823      	ldr	r3, [r4, #0]
 801e64c:	6922      	ldr	r2, [r4, #16]
 801e64e:	f003 0306 	and.w	r3, r3, #6
 801e652:	2b04      	cmp	r3, #4
 801e654:	bf02      	ittt	eq
 801e656:	68e5      	ldreq	r5, [r4, #12]
 801e658:	6833      	ldreq	r3, [r6, #0]
 801e65a:	1aed      	subeq	r5, r5, r3
 801e65c:	68a3      	ldr	r3, [r4, #8]
 801e65e:	bf0c      	ite	eq
 801e660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e664:	2500      	movne	r5, #0
 801e666:	4293      	cmp	r3, r2
 801e668:	bfc4      	itt	gt
 801e66a:	1a9b      	subgt	r3, r3, r2
 801e66c:	18ed      	addgt	r5, r5, r3
 801e66e:	2600      	movs	r6, #0
 801e670:	341a      	adds	r4, #26
 801e672:	42b5      	cmp	r5, r6
 801e674:	d11a      	bne.n	801e6ac <_printf_common+0xc8>
 801e676:	2000      	movs	r0, #0
 801e678:	e008      	b.n	801e68c <_printf_common+0xa8>
 801e67a:	2301      	movs	r3, #1
 801e67c:	4652      	mov	r2, sl
 801e67e:	4649      	mov	r1, r9
 801e680:	4638      	mov	r0, r7
 801e682:	47c0      	blx	r8
 801e684:	3001      	adds	r0, #1
 801e686:	d103      	bne.n	801e690 <_printf_common+0xac>
 801e688:	f04f 30ff 	mov.w	r0, #4294967295
 801e68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e690:	3501      	adds	r5, #1
 801e692:	e7c6      	b.n	801e622 <_printf_common+0x3e>
 801e694:	18e1      	adds	r1, r4, r3
 801e696:	1c5a      	adds	r2, r3, #1
 801e698:	2030      	movs	r0, #48	; 0x30
 801e69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e69e:	4422      	add	r2, r4
 801e6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e6a8:	3302      	adds	r3, #2
 801e6aa:	e7c7      	b.n	801e63c <_printf_common+0x58>
 801e6ac:	2301      	movs	r3, #1
 801e6ae:	4622      	mov	r2, r4
 801e6b0:	4649      	mov	r1, r9
 801e6b2:	4638      	mov	r0, r7
 801e6b4:	47c0      	blx	r8
 801e6b6:	3001      	adds	r0, #1
 801e6b8:	d0e6      	beq.n	801e688 <_printf_common+0xa4>
 801e6ba:	3601      	adds	r6, #1
 801e6bc:	e7d9      	b.n	801e672 <_printf_common+0x8e>
	...

0801e6c0 <_printf_i>:
 801e6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e6c4:	7e0f      	ldrb	r7, [r1, #24]
 801e6c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e6c8:	2f78      	cmp	r7, #120	; 0x78
 801e6ca:	4691      	mov	r9, r2
 801e6cc:	4680      	mov	r8, r0
 801e6ce:	460c      	mov	r4, r1
 801e6d0:	469a      	mov	sl, r3
 801e6d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e6d6:	d807      	bhi.n	801e6e8 <_printf_i+0x28>
 801e6d8:	2f62      	cmp	r7, #98	; 0x62
 801e6da:	d80a      	bhi.n	801e6f2 <_printf_i+0x32>
 801e6dc:	2f00      	cmp	r7, #0
 801e6de:	f000 80d4 	beq.w	801e88a <_printf_i+0x1ca>
 801e6e2:	2f58      	cmp	r7, #88	; 0x58
 801e6e4:	f000 80c0 	beq.w	801e868 <_printf_i+0x1a8>
 801e6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e6f0:	e03a      	b.n	801e768 <_printf_i+0xa8>
 801e6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e6f6:	2b15      	cmp	r3, #21
 801e6f8:	d8f6      	bhi.n	801e6e8 <_printf_i+0x28>
 801e6fa:	a101      	add	r1, pc, #4	; (adr r1, 801e700 <_printf_i+0x40>)
 801e6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e700:	0801e759 	.word	0x0801e759
 801e704:	0801e76d 	.word	0x0801e76d
 801e708:	0801e6e9 	.word	0x0801e6e9
 801e70c:	0801e6e9 	.word	0x0801e6e9
 801e710:	0801e6e9 	.word	0x0801e6e9
 801e714:	0801e6e9 	.word	0x0801e6e9
 801e718:	0801e76d 	.word	0x0801e76d
 801e71c:	0801e6e9 	.word	0x0801e6e9
 801e720:	0801e6e9 	.word	0x0801e6e9
 801e724:	0801e6e9 	.word	0x0801e6e9
 801e728:	0801e6e9 	.word	0x0801e6e9
 801e72c:	0801e871 	.word	0x0801e871
 801e730:	0801e799 	.word	0x0801e799
 801e734:	0801e82b 	.word	0x0801e82b
 801e738:	0801e6e9 	.word	0x0801e6e9
 801e73c:	0801e6e9 	.word	0x0801e6e9
 801e740:	0801e893 	.word	0x0801e893
 801e744:	0801e6e9 	.word	0x0801e6e9
 801e748:	0801e799 	.word	0x0801e799
 801e74c:	0801e6e9 	.word	0x0801e6e9
 801e750:	0801e6e9 	.word	0x0801e6e9
 801e754:	0801e833 	.word	0x0801e833
 801e758:	682b      	ldr	r3, [r5, #0]
 801e75a:	1d1a      	adds	r2, r3, #4
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	602a      	str	r2, [r5, #0]
 801e760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e768:	2301      	movs	r3, #1
 801e76a:	e09f      	b.n	801e8ac <_printf_i+0x1ec>
 801e76c:	6820      	ldr	r0, [r4, #0]
 801e76e:	682b      	ldr	r3, [r5, #0]
 801e770:	0607      	lsls	r7, r0, #24
 801e772:	f103 0104 	add.w	r1, r3, #4
 801e776:	6029      	str	r1, [r5, #0]
 801e778:	d501      	bpl.n	801e77e <_printf_i+0xbe>
 801e77a:	681e      	ldr	r6, [r3, #0]
 801e77c:	e003      	b.n	801e786 <_printf_i+0xc6>
 801e77e:	0646      	lsls	r6, r0, #25
 801e780:	d5fb      	bpl.n	801e77a <_printf_i+0xba>
 801e782:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e786:	2e00      	cmp	r6, #0
 801e788:	da03      	bge.n	801e792 <_printf_i+0xd2>
 801e78a:	232d      	movs	r3, #45	; 0x2d
 801e78c:	4276      	negs	r6, r6
 801e78e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e792:	485a      	ldr	r0, [pc, #360]	; (801e8fc <_printf_i+0x23c>)
 801e794:	230a      	movs	r3, #10
 801e796:	e012      	b.n	801e7be <_printf_i+0xfe>
 801e798:	682b      	ldr	r3, [r5, #0]
 801e79a:	6820      	ldr	r0, [r4, #0]
 801e79c:	1d19      	adds	r1, r3, #4
 801e79e:	6029      	str	r1, [r5, #0]
 801e7a0:	0605      	lsls	r5, r0, #24
 801e7a2:	d501      	bpl.n	801e7a8 <_printf_i+0xe8>
 801e7a4:	681e      	ldr	r6, [r3, #0]
 801e7a6:	e002      	b.n	801e7ae <_printf_i+0xee>
 801e7a8:	0641      	lsls	r1, r0, #25
 801e7aa:	d5fb      	bpl.n	801e7a4 <_printf_i+0xe4>
 801e7ac:	881e      	ldrh	r6, [r3, #0]
 801e7ae:	4853      	ldr	r0, [pc, #332]	; (801e8fc <_printf_i+0x23c>)
 801e7b0:	2f6f      	cmp	r7, #111	; 0x6f
 801e7b2:	bf0c      	ite	eq
 801e7b4:	2308      	moveq	r3, #8
 801e7b6:	230a      	movne	r3, #10
 801e7b8:	2100      	movs	r1, #0
 801e7ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e7be:	6865      	ldr	r5, [r4, #4]
 801e7c0:	60a5      	str	r5, [r4, #8]
 801e7c2:	2d00      	cmp	r5, #0
 801e7c4:	bfa2      	ittt	ge
 801e7c6:	6821      	ldrge	r1, [r4, #0]
 801e7c8:	f021 0104 	bicge.w	r1, r1, #4
 801e7cc:	6021      	strge	r1, [r4, #0]
 801e7ce:	b90e      	cbnz	r6, 801e7d4 <_printf_i+0x114>
 801e7d0:	2d00      	cmp	r5, #0
 801e7d2:	d04b      	beq.n	801e86c <_printf_i+0x1ac>
 801e7d4:	4615      	mov	r5, r2
 801e7d6:	fbb6 f1f3 	udiv	r1, r6, r3
 801e7da:	fb03 6711 	mls	r7, r3, r1, r6
 801e7de:	5dc7      	ldrb	r7, [r0, r7]
 801e7e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e7e4:	4637      	mov	r7, r6
 801e7e6:	42bb      	cmp	r3, r7
 801e7e8:	460e      	mov	r6, r1
 801e7ea:	d9f4      	bls.n	801e7d6 <_printf_i+0x116>
 801e7ec:	2b08      	cmp	r3, #8
 801e7ee:	d10b      	bne.n	801e808 <_printf_i+0x148>
 801e7f0:	6823      	ldr	r3, [r4, #0]
 801e7f2:	07de      	lsls	r6, r3, #31
 801e7f4:	d508      	bpl.n	801e808 <_printf_i+0x148>
 801e7f6:	6923      	ldr	r3, [r4, #16]
 801e7f8:	6861      	ldr	r1, [r4, #4]
 801e7fa:	4299      	cmp	r1, r3
 801e7fc:	bfde      	ittt	le
 801e7fe:	2330      	movle	r3, #48	; 0x30
 801e800:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e804:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e808:	1b52      	subs	r2, r2, r5
 801e80a:	6122      	str	r2, [r4, #16]
 801e80c:	f8cd a000 	str.w	sl, [sp]
 801e810:	464b      	mov	r3, r9
 801e812:	aa03      	add	r2, sp, #12
 801e814:	4621      	mov	r1, r4
 801e816:	4640      	mov	r0, r8
 801e818:	f7ff fee4 	bl	801e5e4 <_printf_common>
 801e81c:	3001      	adds	r0, #1
 801e81e:	d14a      	bne.n	801e8b6 <_printf_i+0x1f6>
 801e820:	f04f 30ff 	mov.w	r0, #4294967295
 801e824:	b004      	add	sp, #16
 801e826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e82a:	6823      	ldr	r3, [r4, #0]
 801e82c:	f043 0320 	orr.w	r3, r3, #32
 801e830:	6023      	str	r3, [r4, #0]
 801e832:	4833      	ldr	r0, [pc, #204]	; (801e900 <_printf_i+0x240>)
 801e834:	2778      	movs	r7, #120	; 0x78
 801e836:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e83a:	6823      	ldr	r3, [r4, #0]
 801e83c:	6829      	ldr	r1, [r5, #0]
 801e83e:	061f      	lsls	r7, r3, #24
 801e840:	f851 6b04 	ldr.w	r6, [r1], #4
 801e844:	d402      	bmi.n	801e84c <_printf_i+0x18c>
 801e846:	065f      	lsls	r7, r3, #25
 801e848:	bf48      	it	mi
 801e84a:	b2b6      	uxthmi	r6, r6
 801e84c:	07df      	lsls	r7, r3, #31
 801e84e:	bf48      	it	mi
 801e850:	f043 0320 	orrmi.w	r3, r3, #32
 801e854:	6029      	str	r1, [r5, #0]
 801e856:	bf48      	it	mi
 801e858:	6023      	strmi	r3, [r4, #0]
 801e85a:	b91e      	cbnz	r6, 801e864 <_printf_i+0x1a4>
 801e85c:	6823      	ldr	r3, [r4, #0]
 801e85e:	f023 0320 	bic.w	r3, r3, #32
 801e862:	6023      	str	r3, [r4, #0]
 801e864:	2310      	movs	r3, #16
 801e866:	e7a7      	b.n	801e7b8 <_printf_i+0xf8>
 801e868:	4824      	ldr	r0, [pc, #144]	; (801e8fc <_printf_i+0x23c>)
 801e86a:	e7e4      	b.n	801e836 <_printf_i+0x176>
 801e86c:	4615      	mov	r5, r2
 801e86e:	e7bd      	b.n	801e7ec <_printf_i+0x12c>
 801e870:	682b      	ldr	r3, [r5, #0]
 801e872:	6826      	ldr	r6, [r4, #0]
 801e874:	6961      	ldr	r1, [r4, #20]
 801e876:	1d18      	adds	r0, r3, #4
 801e878:	6028      	str	r0, [r5, #0]
 801e87a:	0635      	lsls	r5, r6, #24
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	d501      	bpl.n	801e884 <_printf_i+0x1c4>
 801e880:	6019      	str	r1, [r3, #0]
 801e882:	e002      	b.n	801e88a <_printf_i+0x1ca>
 801e884:	0670      	lsls	r0, r6, #25
 801e886:	d5fb      	bpl.n	801e880 <_printf_i+0x1c0>
 801e888:	8019      	strh	r1, [r3, #0]
 801e88a:	2300      	movs	r3, #0
 801e88c:	6123      	str	r3, [r4, #16]
 801e88e:	4615      	mov	r5, r2
 801e890:	e7bc      	b.n	801e80c <_printf_i+0x14c>
 801e892:	682b      	ldr	r3, [r5, #0]
 801e894:	1d1a      	adds	r2, r3, #4
 801e896:	602a      	str	r2, [r5, #0]
 801e898:	681d      	ldr	r5, [r3, #0]
 801e89a:	6862      	ldr	r2, [r4, #4]
 801e89c:	2100      	movs	r1, #0
 801e89e:	4628      	mov	r0, r5
 801e8a0:	f7e1 fd1e 	bl	80002e0 <memchr>
 801e8a4:	b108      	cbz	r0, 801e8aa <_printf_i+0x1ea>
 801e8a6:	1b40      	subs	r0, r0, r5
 801e8a8:	6060      	str	r0, [r4, #4]
 801e8aa:	6863      	ldr	r3, [r4, #4]
 801e8ac:	6123      	str	r3, [r4, #16]
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e8b4:	e7aa      	b.n	801e80c <_printf_i+0x14c>
 801e8b6:	6923      	ldr	r3, [r4, #16]
 801e8b8:	462a      	mov	r2, r5
 801e8ba:	4649      	mov	r1, r9
 801e8bc:	4640      	mov	r0, r8
 801e8be:	47d0      	blx	sl
 801e8c0:	3001      	adds	r0, #1
 801e8c2:	d0ad      	beq.n	801e820 <_printf_i+0x160>
 801e8c4:	6823      	ldr	r3, [r4, #0]
 801e8c6:	079b      	lsls	r3, r3, #30
 801e8c8:	d413      	bmi.n	801e8f2 <_printf_i+0x232>
 801e8ca:	68e0      	ldr	r0, [r4, #12]
 801e8cc:	9b03      	ldr	r3, [sp, #12]
 801e8ce:	4298      	cmp	r0, r3
 801e8d0:	bfb8      	it	lt
 801e8d2:	4618      	movlt	r0, r3
 801e8d4:	e7a6      	b.n	801e824 <_printf_i+0x164>
 801e8d6:	2301      	movs	r3, #1
 801e8d8:	4632      	mov	r2, r6
 801e8da:	4649      	mov	r1, r9
 801e8dc:	4640      	mov	r0, r8
 801e8de:	47d0      	blx	sl
 801e8e0:	3001      	adds	r0, #1
 801e8e2:	d09d      	beq.n	801e820 <_printf_i+0x160>
 801e8e4:	3501      	adds	r5, #1
 801e8e6:	68e3      	ldr	r3, [r4, #12]
 801e8e8:	9903      	ldr	r1, [sp, #12]
 801e8ea:	1a5b      	subs	r3, r3, r1
 801e8ec:	42ab      	cmp	r3, r5
 801e8ee:	dcf2      	bgt.n	801e8d6 <_printf_i+0x216>
 801e8f0:	e7eb      	b.n	801e8ca <_printf_i+0x20a>
 801e8f2:	2500      	movs	r5, #0
 801e8f4:	f104 0619 	add.w	r6, r4, #25
 801e8f8:	e7f5      	b.n	801e8e6 <_printf_i+0x226>
 801e8fa:	bf00      	nop
 801e8fc:	080210f2 	.word	0x080210f2
 801e900:	08021103 	.word	0x08021103

0801e904 <std>:
 801e904:	2300      	movs	r3, #0
 801e906:	b510      	push	{r4, lr}
 801e908:	4604      	mov	r4, r0
 801e90a:	e9c0 3300 	strd	r3, r3, [r0]
 801e90e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e912:	6083      	str	r3, [r0, #8]
 801e914:	8181      	strh	r1, [r0, #12]
 801e916:	6643      	str	r3, [r0, #100]	; 0x64
 801e918:	81c2      	strh	r2, [r0, #14]
 801e91a:	6183      	str	r3, [r0, #24]
 801e91c:	4619      	mov	r1, r3
 801e91e:	2208      	movs	r2, #8
 801e920:	305c      	adds	r0, #92	; 0x5c
 801e922:	f000 f906 	bl	801eb32 <memset>
 801e926:	4b0d      	ldr	r3, [pc, #52]	; (801e95c <std+0x58>)
 801e928:	6263      	str	r3, [r4, #36]	; 0x24
 801e92a:	4b0d      	ldr	r3, [pc, #52]	; (801e960 <std+0x5c>)
 801e92c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e92e:	4b0d      	ldr	r3, [pc, #52]	; (801e964 <std+0x60>)
 801e930:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e932:	4b0d      	ldr	r3, [pc, #52]	; (801e968 <std+0x64>)
 801e934:	6323      	str	r3, [r4, #48]	; 0x30
 801e936:	4b0d      	ldr	r3, [pc, #52]	; (801e96c <std+0x68>)
 801e938:	6224      	str	r4, [r4, #32]
 801e93a:	429c      	cmp	r4, r3
 801e93c:	d006      	beq.n	801e94c <std+0x48>
 801e93e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801e942:	4294      	cmp	r4, r2
 801e944:	d002      	beq.n	801e94c <std+0x48>
 801e946:	33d0      	adds	r3, #208	; 0xd0
 801e948:	429c      	cmp	r4, r3
 801e94a:	d105      	bne.n	801e958 <std+0x54>
 801e94c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e954:	f000 b96a 	b.w	801ec2c <__retarget_lock_init_recursive>
 801e958:	bd10      	pop	{r4, pc}
 801e95a:	bf00      	nop
 801e95c:	0801eaad 	.word	0x0801eaad
 801e960:	0801eacf 	.word	0x0801eacf
 801e964:	0801eb07 	.word	0x0801eb07
 801e968:	0801eb2b 	.word	0x0801eb2b
 801e96c:	2400a780 	.word	0x2400a780

0801e970 <stdio_exit_handler>:
 801e970:	4a02      	ldr	r2, [pc, #8]	; (801e97c <stdio_exit_handler+0xc>)
 801e972:	4903      	ldr	r1, [pc, #12]	; (801e980 <stdio_exit_handler+0x10>)
 801e974:	4803      	ldr	r0, [pc, #12]	; (801e984 <stdio_exit_handler+0x14>)
 801e976:	f000 b869 	b.w	801ea4c <_fwalk_sglue>
 801e97a:	bf00      	nop
 801e97c:	24000014 	.word	0x24000014
 801e980:	080204c5 	.word	0x080204c5
 801e984:	24000020 	.word	0x24000020

0801e988 <cleanup_stdio>:
 801e988:	6841      	ldr	r1, [r0, #4]
 801e98a:	4b0c      	ldr	r3, [pc, #48]	; (801e9bc <cleanup_stdio+0x34>)
 801e98c:	4299      	cmp	r1, r3
 801e98e:	b510      	push	{r4, lr}
 801e990:	4604      	mov	r4, r0
 801e992:	d001      	beq.n	801e998 <cleanup_stdio+0x10>
 801e994:	f001 fd96 	bl	80204c4 <_fflush_r>
 801e998:	68a1      	ldr	r1, [r4, #8]
 801e99a:	4b09      	ldr	r3, [pc, #36]	; (801e9c0 <cleanup_stdio+0x38>)
 801e99c:	4299      	cmp	r1, r3
 801e99e:	d002      	beq.n	801e9a6 <cleanup_stdio+0x1e>
 801e9a0:	4620      	mov	r0, r4
 801e9a2:	f001 fd8f 	bl	80204c4 <_fflush_r>
 801e9a6:	68e1      	ldr	r1, [r4, #12]
 801e9a8:	4b06      	ldr	r3, [pc, #24]	; (801e9c4 <cleanup_stdio+0x3c>)
 801e9aa:	4299      	cmp	r1, r3
 801e9ac:	d004      	beq.n	801e9b8 <cleanup_stdio+0x30>
 801e9ae:	4620      	mov	r0, r4
 801e9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9b4:	f001 bd86 	b.w	80204c4 <_fflush_r>
 801e9b8:	bd10      	pop	{r4, pc}
 801e9ba:	bf00      	nop
 801e9bc:	2400a780 	.word	0x2400a780
 801e9c0:	2400a7e8 	.word	0x2400a7e8
 801e9c4:	2400a850 	.word	0x2400a850

0801e9c8 <global_stdio_init.part.0>:
 801e9c8:	b510      	push	{r4, lr}
 801e9ca:	4b0b      	ldr	r3, [pc, #44]	; (801e9f8 <global_stdio_init.part.0+0x30>)
 801e9cc:	4c0b      	ldr	r4, [pc, #44]	; (801e9fc <global_stdio_init.part.0+0x34>)
 801e9ce:	4a0c      	ldr	r2, [pc, #48]	; (801ea00 <global_stdio_init.part.0+0x38>)
 801e9d0:	601a      	str	r2, [r3, #0]
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	2200      	movs	r2, #0
 801e9d6:	2104      	movs	r1, #4
 801e9d8:	f7ff ff94 	bl	801e904 <std>
 801e9dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e9e0:	2201      	movs	r2, #1
 801e9e2:	2109      	movs	r1, #9
 801e9e4:	f7ff ff8e 	bl	801e904 <std>
 801e9e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e9ec:	2202      	movs	r2, #2
 801e9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e9f2:	2112      	movs	r1, #18
 801e9f4:	f7ff bf86 	b.w	801e904 <std>
 801e9f8:	2400a8b8 	.word	0x2400a8b8
 801e9fc:	2400a780 	.word	0x2400a780
 801ea00:	0801e971 	.word	0x0801e971

0801ea04 <__sfp_lock_acquire>:
 801ea04:	4801      	ldr	r0, [pc, #4]	; (801ea0c <__sfp_lock_acquire+0x8>)
 801ea06:	f000 b912 	b.w	801ec2e <__retarget_lock_acquire_recursive>
 801ea0a:	bf00      	nop
 801ea0c:	2400a8c1 	.word	0x2400a8c1

0801ea10 <__sfp_lock_release>:
 801ea10:	4801      	ldr	r0, [pc, #4]	; (801ea18 <__sfp_lock_release+0x8>)
 801ea12:	f000 b90d 	b.w	801ec30 <__retarget_lock_release_recursive>
 801ea16:	bf00      	nop
 801ea18:	2400a8c1 	.word	0x2400a8c1

0801ea1c <__sinit>:
 801ea1c:	b510      	push	{r4, lr}
 801ea1e:	4604      	mov	r4, r0
 801ea20:	f7ff fff0 	bl	801ea04 <__sfp_lock_acquire>
 801ea24:	6a23      	ldr	r3, [r4, #32]
 801ea26:	b11b      	cbz	r3, 801ea30 <__sinit+0x14>
 801ea28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea2c:	f7ff bff0 	b.w	801ea10 <__sfp_lock_release>
 801ea30:	4b04      	ldr	r3, [pc, #16]	; (801ea44 <__sinit+0x28>)
 801ea32:	6223      	str	r3, [r4, #32]
 801ea34:	4b04      	ldr	r3, [pc, #16]	; (801ea48 <__sinit+0x2c>)
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d1f5      	bne.n	801ea28 <__sinit+0xc>
 801ea3c:	f7ff ffc4 	bl	801e9c8 <global_stdio_init.part.0>
 801ea40:	e7f2      	b.n	801ea28 <__sinit+0xc>
 801ea42:	bf00      	nop
 801ea44:	0801e989 	.word	0x0801e989
 801ea48:	2400a8b8 	.word	0x2400a8b8

0801ea4c <_fwalk_sglue>:
 801ea4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea50:	4607      	mov	r7, r0
 801ea52:	4688      	mov	r8, r1
 801ea54:	4614      	mov	r4, r2
 801ea56:	2600      	movs	r6, #0
 801ea58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ea5c:	f1b9 0901 	subs.w	r9, r9, #1
 801ea60:	d505      	bpl.n	801ea6e <_fwalk_sglue+0x22>
 801ea62:	6824      	ldr	r4, [r4, #0]
 801ea64:	2c00      	cmp	r4, #0
 801ea66:	d1f7      	bne.n	801ea58 <_fwalk_sglue+0xc>
 801ea68:	4630      	mov	r0, r6
 801ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea6e:	89ab      	ldrh	r3, [r5, #12]
 801ea70:	2b01      	cmp	r3, #1
 801ea72:	d907      	bls.n	801ea84 <_fwalk_sglue+0x38>
 801ea74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ea78:	3301      	adds	r3, #1
 801ea7a:	d003      	beq.n	801ea84 <_fwalk_sglue+0x38>
 801ea7c:	4629      	mov	r1, r5
 801ea7e:	4638      	mov	r0, r7
 801ea80:	47c0      	blx	r8
 801ea82:	4306      	orrs	r6, r0
 801ea84:	3568      	adds	r5, #104	; 0x68
 801ea86:	e7e9      	b.n	801ea5c <_fwalk_sglue+0x10>

0801ea88 <iprintf>:
 801ea88:	b40f      	push	{r0, r1, r2, r3}
 801ea8a:	b507      	push	{r0, r1, r2, lr}
 801ea8c:	4906      	ldr	r1, [pc, #24]	; (801eaa8 <iprintf+0x20>)
 801ea8e:	ab04      	add	r3, sp, #16
 801ea90:	6808      	ldr	r0, [r1, #0]
 801ea92:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea96:	6881      	ldr	r1, [r0, #8]
 801ea98:	9301      	str	r3, [sp, #4]
 801ea9a:	f001 fb73 	bl	8020184 <_vfiprintf_r>
 801ea9e:	b003      	add	sp, #12
 801eaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 801eaa4:	b004      	add	sp, #16
 801eaa6:	4770      	bx	lr
 801eaa8:	2400006c 	.word	0x2400006c

0801eaac <__sread>:
 801eaac:	b510      	push	{r4, lr}
 801eaae:	460c      	mov	r4, r1
 801eab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eab4:	f000 f86c 	bl	801eb90 <_read_r>
 801eab8:	2800      	cmp	r0, #0
 801eaba:	bfab      	itete	ge
 801eabc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eabe:	89a3      	ldrhlt	r3, [r4, #12]
 801eac0:	181b      	addge	r3, r3, r0
 801eac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eac6:	bfac      	ite	ge
 801eac8:	6563      	strge	r3, [r4, #84]	; 0x54
 801eaca:	81a3      	strhlt	r3, [r4, #12]
 801eacc:	bd10      	pop	{r4, pc}

0801eace <__swrite>:
 801eace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ead2:	461f      	mov	r7, r3
 801ead4:	898b      	ldrh	r3, [r1, #12]
 801ead6:	05db      	lsls	r3, r3, #23
 801ead8:	4605      	mov	r5, r0
 801eada:	460c      	mov	r4, r1
 801eadc:	4616      	mov	r6, r2
 801eade:	d505      	bpl.n	801eaec <__swrite+0x1e>
 801eae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eae4:	2302      	movs	r3, #2
 801eae6:	2200      	movs	r2, #0
 801eae8:	f000 f840 	bl	801eb6c <_lseek_r>
 801eaec:	89a3      	ldrh	r3, [r4, #12]
 801eaee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eaf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eaf6:	81a3      	strh	r3, [r4, #12]
 801eaf8:	4632      	mov	r2, r6
 801eafa:	463b      	mov	r3, r7
 801eafc:	4628      	mov	r0, r5
 801eafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb02:	f000 b857 	b.w	801ebb4 <_write_r>

0801eb06 <__sseek>:
 801eb06:	b510      	push	{r4, lr}
 801eb08:	460c      	mov	r4, r1
 801eb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb0e:	f000 f82d 	bl	801eb6c <_lseek_r>
 801eb12:	1c43      	adds	r3, r0, #1
 801eb14:	89a3      	ldrh	r3, [r4, #12]
 801eb16:	bf15      	itete	ne
 801eb18:	6560      	strne	r0, [r4, #84]	; 0x54
 801eb1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eb1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eb22:	81a3      	strheq	r3, [r4, #12]
 801eb24:	bf18      	it	ne
 801eb26:	81a3      	strhne	r3, [r4, #12]
 801eb28:	bd10      	pop	{r4, pc}

0801eb2a <__sclose>:
 801eb2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb2e:	f000 b80d 	b.w	801eb4c <_close_r>

0801eb32 <memset>:
 801eb32:	4402      	add	r2, r0
 801eb34:	4603      	mov	r3, r0
 801eb36:	4293      	cmp	r3, r2
 801eb38:	d100      	bne.n	801eb3c <memset+0xa>
 801eb3a:	4770      	bx	lr
 801eb3c:	f803 1b01 	strb.w	r1, [r3], #1
 801eb40:	e7f9      	b.n	801eb36 <memset+0x4>
	...

0801eb44 <_localeconv_r>:
 801eb44:	4800      	ldr	r0, [pc, #0]	; (801eb48 <_localeconv_r+0x4>)
 801eb46:	4770      	bx	lr
 801eb48:	24000160 	.word	0x24000160

0801eb4c <_close_r>:
 801eb4c:	b538      	push	{r3, r4, r5, lr}
 801eb4e:	4d06      	ldr	r5, [pc, #24]	; (801eb68 <_close_r+0x1c>)
 801eb50:	2300      	movs	r3, #0
 801eb52:	4604      	mov	r4, r0
 801eb54:	4608      	mov	r0, r1
 801eb56:	602b      	str	r3, [r5, #0]
 801eb58:	f7e2 ffad 	bl	8001ab6 <_close>
 801eb5c:	1c43      	adds	r3, r0, #1
 801eb5e:	d102      	bne.n	801eb66 <_close_r+0x1a>
 801eb60:	682b      	ldr	r3, [r5, #0]
 801eb62:	b103      	cbz	r3, 801eb66 <_close_r+0x1a>
 801eb64:	6023      	str	r3, [r4, #0]
 801eb66:	bd38      	pop	{r3, r4, r5, pc}
 801eb68:	2400a8bc 	.word	0x2400a8bc

0801eb6c <_lseek_r>:
 801eb6c:	b538      	push	{r3, r4, r5, lr}
 801eb6e:	4d07      	ldr	r5, [pc, #28]	; (801eb8c <_lseek_r+0x20>)
 801eb70:	4604      	mov	r4, r0
 801eb72:	4608      	mov	r0, r1
 801eb74:	4611      	mov	r1, r2
 801eb76:	2200      	movs	r2, #0
 801eb78:	602a      	str	r2, [r5, #0]
 801eb7a:	461a      	mov	r2, r3
 801eb7c:	f7e2 ffc2 	bl	8001b04 <_lseek>
 801eb80:	1c43      	adds	r3, r0, #1
 801eb82:	d102      	bne.n	801eb8a <_lseek_r+0x1e>
 801eb84:	682b      	ldr	r3, [r5, #0]
 801eb86:	b103      	cbz	r3, 801eb8a <_lseek_r+0x1e>
 801eb88:	6023      	str	r3, [r4, #0]
 801eb8a:	bd38      	pop	{r3, r4, r5, pc}
 801eb8c:	2400a8bc 	.word	0x2400a8bc

0801eb90 <_read_r>:
 801eb90:	b538      	push	{r3, r4, r5, lr}
 801eb92:	4d07      	ldr	r5, [pc, #28]	; (801ebb0 <_read_r+0x20>)
 801eb94:	4604      	mov	r4, r0
 801eb96:	4608      	mov	r0, r1
 801eb98:	4611      	mov	r1, r2
 801eb9a:	2200      	movs	r2, #0
 801eb9c:	602a      	str	r2, [r5, #0]
 801eb9e:	461a      	mov	r2, r3
 801eba0:	f7e2 ff50 	bl	8001a44 <_read>
 801eba4:	1c43      	adds	r3, r0, #1
 801eba6:	d102      	bne.n	801ebae <_read_r+0x1e>
 801eba8:	682b      	ldr	r3, [r5, #0]
 801ebaa:	b103      	cbz	r3, 801ebae <_read_r+0x1e>
 801ebac:	6023      	str	r3, [r4, #0]
 801ebae:	bd38      	pop	{r3, r4, r5, pc}
 801ebb0:	2400a8bc 	.word	0x2400a8bc

0801ebb4 <_write_r>:
 801ebb4:	b538      	push	{r3, r4, r5, lr}
 801ebb6:	4d07      	ldr	r5, [pc, #28]	; (801ebd4 <_write_r+0x20>)
 801ebb8:	4604      	mov	r4, r0
 801ebba:	4608      	mov	r0, r1
 801ebbc:	4611      	mov	r1, r2
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	602a      	str	r2, [r5, #0]
 801ebc2:	461a      	mov	r2, r3
 801ebc4:	f7e2 ff5b 	bl	8001a7e <_write>
 801ebc8:	1c43      	adds	r3, r0, #1
 801ebca:	d102      	bne.n	801ebd2 <_write_r+0x1e>
 801ebcc:	682b      	ldr	r3, [r5, #0]
 801ebce:	b103      	cbz	r3, 801ebd2 <_write_r+0x1e>
 801ebd0:	6023      	str	r3, [r4, #0]
 801ebd2:	bd38      	pop	{r3, r4, r5, pc}
 801ebd4:	2400a8bc 	.word	0x2400a8bc

0801ebd8 <__errno>:
 801ebd8:	4b01      	ldr	r3, [pc, #4]	; (801ebe0 <__errno+0x8>)
 801ebda:	6818      	ldr	r0, [r3, #0]
 801ebdc:	4770      	bx	lr
 801ebde:	bf00      	nop
 801ebe0:	2400006c 	.word	0x2400006c

0801ebe4 <__libc_init_array>:
 801ebe4:	b570      	push	{r4, r5, r6, lr}
 801ebe6:	4d0d      	ldr	r5, [pc, #52]	; (801ec1c <__libc_init_array+0x38>)
 801ebe8:	4c0d      	ldr	r4, [pc, #52]	; (801ec20 <__libc_init_array+0x3c>)
 801ebea:	1b64      	subs	r4, r4, r5
 801ebec:	10a4      	asrs	r4, r4, #2
 801ebee:	2600      	movs	r6, #0
 801ebf0:	42a6      	cmp	r6, r4
 801ebf2:	d109      	bne.n	801ec08 <__libc_init_array+0x24>
 801ebf4:	4d0b      	ldr	r5, [pc, #44]	; (801ec24 <__libc_init_array+0x40>)
 801ebf6:	4c0c      	ldr	r4, [pc, #48]	; (801ec28 <__libc_init_array+0x44>)
 801ebf8:	f001 fe68 	bl	80208cc <_init>
 801ebfc:	1b64      	subs	r4, r4, r5
 801ebfe:	10a4      	asrs	r4, r4, #2
 801ec00:	2600      	movs	r6, #0
 801ec02:	42a6      	cmp	r6, r4
 801ec04:	d105      	bne.n	801ec12 <__libc_init_array+0x2e>
 801ec06:	bd70      	pop	{r4, r5, r6, pc}
 801ec08:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec0c:	4798      	blx	r3
 801ec0e:	3601      	adds	r6, #1
 801ec10:	e7ee      	b.n	801ebf0 <__libc_init_array+0xc>
 801ec12:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec16:	4798      	blx	r3
 801ec18:	3601      	adds	r6, #1
 801ec1a:	e7f2      	b.n	801ec02 <__libc_init_array+0x1e>
 801ec1c:	0802145c 	.word	0x0802145c
 801ec20:	0802145c 	.word	0x0802145c
 801ec24:	0802145c 	.word	0x0802145c
 801ec28:	0802146c 	.word	0x0802146c

0801ec2c <__retarget_lock_init_recursive>:
 801ec2c:	4770      	bx	lr

0801ec2e <__retarget_lock_acquire_recursive>:
 801ec2e:	4770      	bx	lr

0801ec30 <__retarget_lock_release_recursive>:
 801ec30:	4770      	bx	lr

0801ec32 <memcpy>:
 801ec32:	440a      	add	r2, r1
 801ec34:	4291      	cmp	r1, r2
 801ec36:	f100 33ff 	add.w	r3, r0, #4294967295
 801ec3a:	d100      	bne.n	801ec3e <memcpy+0xc>
 801ec3c:	4770      	bx	lr
 801ec3e:	b510      	push	{r4, lr}
 801ec40:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec44:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec48:	4291      	cmp	r1, r2
 801ec4a:	d1f9      	bne.n	801ec40 <memcpy+0xe>
 801ec4c:	bd10      	pop	{r4, pc}

0801ec4e <quorem>:
 801ec4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec52:	6903      	ldr	r3, [r0, #16]
 801ec54:	690c      	ldr	r4, [r1, #16]
 801ec56:	42a3      	cmp	r3, r4
 801ec58:	4607      	mov	r7, r0
 801ec5a:	db7e      	blt.n	801ed5a <quorem+0x10c>
 801ec5c:	3c01      	subs	r4, #1
 801ec5e:	f101 0814 	add.w	r8, r1, #20
 801ec62:	f100 0514 	add.w	r5, r0, #20
 801ec66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ec6a:	9301      	str	r3, [sp, #4]
 801ec6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ec70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ec74:	3301      	adds	r3, #1
 801ec76:	429a      	cmp	r2, r3
 801ec78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ec7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ec80:	fbb2 f6f3 	udiv	r6, r2, r3
 801ec84:	d331      	bcc.n	801ecea <quorem+0x9c>
 801ec86:	f04f 0e00 	mov.w	lr, #0
 801ec8a:	4640      	mov	r0, r8
 801ec8c:	46ac      	mov	ip, r5
 801ec8e:	46f2      	mov	sl, lr
 801ec90:	f850 2b04 	ldr.w	r2, [r0], #4
 801ec94:	b293      	uxth	r3, r2
 801ec96:	fb06 e303 	mla	r3, r6, r3, lr
 801ec9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ec9e:	0c1a      	lsrs	r2, r3, #16
 801eca0:	b29b      	uxth	r3, r3
 801eca2:	ebaa 0303 	sub.w	r3, sl, r3
 801eca6:	f8dc a000 	ldr.w	sl, [ip]
 801ecaa:	fa13 f38a 	uxtah	r3, r3, sl
 801ecae:	fb06 220e 	mla	r2, r6, lr, r2
 801ecb2:	9300      	str	r3, [sp, #0]
 801ecb4:	9b00      	ldr	r3, [sp, #0]
 801ecb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ecba:	b292      	uxth	r2, r2
 801ecbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801ecc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ecc4:	f8bd 3000 	ldrh.w	r3, [sp]
 801ecc8:	4581      	cmp	r9, r0
 801ecca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ecce:	f84c 3b04 	str.w	r3, [ip], #4
 801ecd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ecd6:	d2db      	bcs.n	801ec90 <quorem+0x42>
 801ecd8:	f855 300b 	ldr.w	r3, [r5, fp]
 801ecdc:	b92b      	cbnz	r3, 801ecea <quorem+0x9c>
 801ecde:	9b01      	ldr	r3, [sp, #4]
 801ece0:	3b04      	subs	r3, #4
 801ece2:	429d      	cmp	r5, r3
 801ece4:	461a      	mov	r2, r3
 801ece6:	d32c      	bcc.n	801ed42 <quorem+0xf4>
 801ece8:	613c      	str	r4, [r7, #16]
 801ecea:	4638      	mov	r0, r7
 801ecec:	f001 f920 	bl	801ff30 <__mcmp>
 801ecf0:	2800      	cmp	r0, #0
 801ecf2:	db22      	blt.n	801ed3a <quorem+0xec>
 801ecf4:	3601      	adds	r6, #1
 801ecf6:	4629      	mov	r1, r5
 801ecf8:	2000      	movs	r0, #0
 801ecfa:	f858 2b04 	ldr.w	r2, [r8], #4
 801ecfe:	f8d1 c000 	ldr.w	ip, [r1]
 801ed02:	b293      	uxth	r3, r2
 801ed04:	1ac3      	subs	r3, r0, r3
 801ed06:	0c12      	lsrs	r2, r2, #16
 801ed08:	fa13 f38c 	uxtah	r3, r3, ip
 801ed0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ed10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed14:	b29b      	uxth	r3, r3
 801ed16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed1a:	45c1      	cmp	r9, r8
 801ed1c:	f841 3b04 	str.w	r3, [r1], #4
 801ed20:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ed24:	d2e9      	bcs.n	801ecfa <quorem+0xac>
 801ed26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed2e:	b922      	cbnz	r2, 801ed3a <quorem+0xec>
 801ed30:	3b04      	subs	r3, #4
 801ed32:	429d      	cmp	r5, r3
 801ed34:	461a      	mov	r2, r3
 801ed36:	d30a      	bcc.n	801ed4e <quorem+0x100>
 801ed38:	613c      	str	r4, [r7, #16]
 801ed3a:	4630      	mov	r0, r6
 801ed3c:	b003      	add	sp, #12
 801ed3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed42:	6812      	ldr	r2, [r2, #0]
 801ed44:	3b04      	subs	r3, #4
 801ed46:	2a00      	cmp	r2, #0
 801ed48:	d1ce      	bne.n	801ece8 <quorem+0x9a>
 801ed4a:	3c01      	subs	r4, #1
 801ed4c:	e7c9      	b.n	801ece2 <quorem+0x94>
 801ed4e:	6812      	ldr	r2, [r2, #0]
 801ed50:	3b04      	subs	r3, #4
 801ed52:	2a00      	cmp	r2, #0
 801ed54:	d1f0      	bne.n	801ed38 <quorem+0xea>
 801ed56:	3c01      	subs	r4, #1
 801ed58:	e7eb      	b.n	801ed32 <quorem+0xe4>
 801ed5a:	2000      	movs	r0, #0
 801ed5c:	e7ee      	b.n	801ed3c <quorem+0xee>
	...

0801ed60 <_dtoa_r>:
 801ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed64:	ed2d 8b02 	vpush	{d8}
 801ed68:	69c5      	ldr	r5, [r0, #28]
 801ed6a:	b091      	sub	sp, #68	; 0x44
 801ed6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ed70:	ec59 8b10 	vmov	r8, r9, d0
 801ed74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ed76:	9106      	str	r1, [sp, #24]
 801ed78:	4606      	mov	r6, r0
 801ed7a:	9208      	str	r2, [sp, #32]
 801ed7c:	930c      	str	r3, [sp, #48]	; 0x30
 801ed7e:	b975      	cbnz	r5, 801ed9e <_dtoa_r+0x3e>
 801ed80:	2010      	movs	r0, #16
 801ed82:	f000 fda5 	bl	801f8d0 <malloc>
 801ed86:	4602      	mov	r2, r0
 801ed88:	61f0      	str	r0, [r6, #28]
 801ed8a:	b920      	cbnz	r0, 801ed96 <_dtoa_r+0x36>
 801ed8c:	4ba6      	ldr	r3, [pc, #664]	; (801f028 <_dtoa_r+0x2c8>)
 801ed8e:	21ef      	movs	r1, #239	; 0xef
 801ed90:	48a6      	ldr	r0, [pc, #664]	; (801f02c <_dtoa_r+0x2cc>)
 801ed92:	f001 fc65 	bl	8020660 <__assert_func>
 801ed96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ed9a:	6005      	str	r5, [r0, #0]
 801ed9c:	60c5      	str	r5, [r0, #12]
 801ed9e:	69f3      	ldr	r3, [r6, #28]
 801eda0:	6819      	ldr	r1, [r3, #0]
 801eda2:	b151      	cbz	r1, 801edba <_dtoa_r+0x5a>
 801eda4:	685a      	ldr	r2, [r3, #4]
 801eda6:	604a      	str	r2, [r1, #4]
 801eda8:	2301      	movs	r3, #1
 801edaa:	4093      	lsls	r3, r2
 801edac:	608b      	str	r3, [r1, #8]
 801edae:	4630      	mov	r0, r6
 801edb0:	f000 fe82 	bl	801fab8 <_Bfree>
 801edb4:	69f3      	ldr	r3, [r6, #28]
 801edb6:	2200      	movs	r2, #0
 801edb8:	601a      	str	r2, [r3, #0]
 801edba:	f1b9 0300 	subs.w	r3, r9, #0
 801edbe:	bfbb      	ittet	lt
 801edc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801edc4:	9303      	strlt	r3, [sp, #12]
 801edc6:	2300      	movge	r3, #0
 801edc8:	2201      	movlt	r2, #1
 801edca:	bfac      	ite	ge
 801edcc:	6023      	strge	r3, [r4, #0]
 801edce:	6022      	strlt	r2, [r4, #0]
 801edd0:	4b97      	ldr	r3, [pc, #604]	; (801f030 <_dtoa_r+0x2d0>)
 801edd2:	9c03      	ldr	r4, [sp, #12]
 801edd4:	43a3      	bics	r3, r4
 801edd6:	d11c      	bne.n	801ee12 <_dtoa_r+0xb2>
 801edd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801edda:	f242 730f 	movw	r3, #9999	; 0x270f
 801edde:	6013      	str	r3, [r2, #0]
 801ede0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801ede4:	ea53 0308 	orrs.w	r3, r3, r8
 801ede8:	f000 84fb 	beq.w	801f7e2 <_dtoa_r+0xa82>
 801edec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801edee:	b963      	cbnz	r3, 801ee0a <_dtoa_r+0xaa>
 801edf0:	4b90      	ldr	r3, [pc, #576]	; (801f034 <_dtoa_r+0x2d4>)
 801edf2:	e020      	b.n	801ee36 <_dtoa_r+0xd6>
 801edf4:	4b90      	ldr	r3, [pc, #576]	; (801f038 <_dtoa_r+0x2d8>)
 801edf6:	9301      	str	r3, [sp, #4]
 801edf8:	3308      	adds	r3, #8
 801edfa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801edfc:	6013      	str	r3, [r2, #0]
 801edfe:	9801      	ldr	r0, [sp, #4]
 801ee00:	b011      	add	sp, #68	; 0x44
 801ee02:	ecbd 8b02 	vpop	{d8}
 801ee06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee0a:	4b8a      	ldr	r3, [pc, #552]	; (801f034 <_dtoa_r+0x2d4>)
 801ee0c:	9301      	str	r3, [sp, #4]
 801ee0e:	3303      	adds	r3, #3
 801ee10:	e7f3      	b.n	801edfa <_dtoa_r+0x9a>
 801ee12:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ee16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ee1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee1e:	d10c      	bne.n	801ee3a <_dtoa_r+0xda>
 801ee20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee22:	2301      	movs	r3, #1
 801ee24:	6013      	str	r3, [r2, #0]
 801ee26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	f000 84d7 	beq.w	801f7dc <_dtoa_r+0xa7c>
 801ee2e:	4b83      	ldr	r3, [pc, #524]	; (801f03c <_dtoa_r+0x2dc>)
 801ee30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ee32:	6013      	str	r3, [r2, #0]
 801ee34:	3b01      	subs	r3, #1
 801ee36:	9301      	str	r3, [sp, #4]
 801ee38:	e7e1      	b.n	801edfe <_dtoa_r+0x9e>
 801ee3a:	aa0e      	add	r2, sp, #56	; 0x38
 801ee3c:	a90f      	add	r1, sp, #60	; 0x3c
 801ee3e:	4630      	mov	r0, r6
 801ee40:	eeb0 0b48 	vmov.f64	d0, d8
 801ee44:	f001 f91a 	bl	802007c <__d2b>
 801ee48:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ee4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ee4e:	4605      	mov	r5, r0
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d046      	beq.n	801eee2 <_dtoa_r+0x182>
 801ee54:	eeb0 7b48 	vmov.f64	d7, d8
 801ee58:	ee18 1a90 	vmov	r1, s17
 801ee5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ee60:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801ee64:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801ee68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ee6c:	2000      	movs	r0, #0
 801ee6e:	ee07 1a90 	vmov	s15, r1
 801ee72:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801ee76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801f010 <_dtoa_r+0x2b0>
 801ee7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ee7e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801f018 <_dtoa_r+0x2b8>
 801ee82:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ee86:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801f020 <_dtoa_r+0x2c0>
 801ee8a:	ee07 3a90 	vmov	s15, r3
 801ee8e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ee92:	eeb0 7b46 	vmov.f64	d7, d6
 801ee96:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ee9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ee9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801eea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eea6:	ee16 ba90 	vmov	fp, s13
 801eeaa:	9009      	str	r0, [sp, #36]	; 0x24
 801eeac:	d508      	bpl.n	801eec0 <_dtoa_r+0x160>
 801eeae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801eeb2:	eeb4 6b47 	vcmp.f64	d6, d7
 801eeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeba:	bf18      	it	ne
 801eebc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801eec0:	f1bb 0f16 	cmp.w	fp, #22
 801eec4:	d82b      	bhi.n	801ef1e <_dtoa_r+0x1be>
 801eec6:	495e      	ldr	r1, [pc, #376]	; (801f040 <_dtoa_r+0x2e0>)
 801eec8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801eecc:	ed91 7b00 	vldr	d7, [r1]
 801eed0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eed8:	d501      	bpl.n	801eede <_dtoa_r+0x17e>
 801eeda:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eede:	2100      	movs	r1, #0
 801eee0:	e01e      	b.n	801ef20 <_dtoa_r+0x1c0>
 801eee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eee4:	4413      	add	r3, r2
 801eee6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801eeea:	2920      	cmp	r1, #32
 801eeec:	bfc1      	itttt	gt
 801eeee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801eef2:	408c      	lslgt	r4, r1
 801eef4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801eef8:	fa28 f101 	lsrgt.w	r1, r8, r1
 801eefc:	bfd6      	itet	le
 801eefe:	f1c1 0120 	rsble	r1, r1, #32
 801ef02:	4321      	orrgt	r1, r4
 801ef04:	fa08 f101 	lslle.w	r1, r8, r1
 801ef08:	ee07 1a90 	vmov	s15, r1
 801ef0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ef10:	3b01      	subs	r3, #1
 801ef12:	ee17 1a90 	vmov	r1, s15
 801ef16:	2001      	movs	r0, #1
 801ef18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801ef1c:	e7a7      	b.n	801ee6e <_dtoa_r+0x10e>
 801ef1e:	2101      	movs	r1, #1
 801ef20:	1ad2      	subs	r2, r2, r3
 801ef22:	1e53      	subs	r3, r2, #1
 801ef24:	9305      	str	r3, [sp, #20]
 801ef26:	bf45      	ittet	mi
 801ef28:	f1c2 0301 	rsbmi	r3, r2, #1
 801ef2c:	9304      	strmi	r3, [sp, #16]
 801ef2e:	2300      	movpl	r3, #0
 801ef30:	2300      	movmi	r3, #0
 801ef32:	bf4c      	ite	mi
 801ef34:	9305      	strmi	r3, [sp, #20]
 801ef36:	9304      	strpl	r3, [sp, #16]
 801ef38:	f1bb 0f00 	cmp.w	fp, #0
 801ef3c:	910b      	str	r1, [sp, #44]	; 0x2c
 801ef3e:	db18      	blt.n	801ef72 <_dtoa_r+0x212>
 801ef40:	9b05      	ldr	r3, [sp, #20]
 801ef42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ef46:	445b      	add	r3, fp
 801ef48:	9305      	str	r3, [sp, #20]
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	9a06      	ldr	r2, [sp, #24]
 801ef4e:	2a09      	cmp	r2, #9
 801ef50:	d848      	bhi.n	801efe4 <_dtoa_r+0x284>
 801ef52:	2a05      	cmp	r2, #5
 801ef54:	bfc4      	itt	gt
 801ef56:	3a04      	subgt	r2, #4
 801ef58:	9206      	strgt	r2, [sp, #24]
 801ef5a:	9a06      	ldr	r2, [sp, #24]
 801ef5c:	f1a2 0202 	sub.w	r2, r2, #2
 801ef60:	bfcc      	ite	gt
 801ef62:	2400      	movgt	r4, #0
 801ef64:	2401      	movle	r4, #1
 801ef66:	2a03      	cmp	r2, #3
 801ef68:	d847      	bhi.n	801effa <_dtoa_r+0x29a>
 801ef6a:	e8df f002 	tbb	[pc, r2]
 801ef6e:	2d0b      	.short	0x2d0b
 801ef70:	392b      	.short	0x392b
 801ef72:	9b04      	ldr	r3, [sp, #16]
 801ef74:	2200      	movs	r2, #0
 801ef76:	eba3 030b 	sub.w	r3, r3, fp
 801ef7a:	9304      	str	r3, [sp, #16]
 801ef7c:	920a      	str	r2, [sp, #40]	; 0x28
 801ef7e:	f1cb 0300 	rsb	r3, fp, #0
 801ef82:	e7e3      	b.n	801ef4c <_dtoa_r+0x1ec>
 801ef84:	2200      	movs	r2, #0
 801ef86:	9207      	str	r2, [sp, #28]
 801ef88:	9a08      	ldr	r2, [sp, #32]
 801ef8a:	2a00      	cmp	r2, #0
 801ef8c:	dc38      	bgt.n	801f000 <_dtoa_r+0x2a0>
 801ef8e:	f04f 0a01 	mov.w	sl, #1
 801ef92:	46d1      	mov	r9, sl
 801ef94:	4652      	mov	r2, sl
 801ef96:	f8cd a020 	str.w	sl, [sp, #32]
 801ef9a:	69f7      	ldr	r7, [r6, #28]
 801ef9c:	2100      	movs	r1, #0
 801ef9e:	2004      	movs	r0, #4
 801efa0:	f100 0c14 	add.w	ip, r0, #20
 801efa4:	4594      	cmp	ip, r2
 801efa6:	d930      	bls.n	801f00a <_dtoa_r+0x2aa>
 801efa8:	6079      	str	r1, [r7, #4]
 801efaa:	4630      	mov	r0, r6
 801efac:	930d      	str	r3, [sp, #52]	; 0x34
 801efae:	f000 fd43 	bl	801fa38 <_Balloc>
 801efb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efb4:	9001      	str	r0, [sp, #4]
 801efb6:	4602      	mov	r2, r0
 801efb8:	2800      	cmp	r0, #0
 801efba:	d145      	bne.n	801f048 <_dtoa_r+0x2e8>
 801efbc:	4b21      	ldr	r3, [pc, #132]	; (801f044 <_dtoa_r+0x2e4>)
 801efbe:	f240 11af 	movw	r1, #431	; 0x1af
 801efc2:	e6e5      	b.n	801ed90 <_dtoa_r+0x30>
 801efc4:	2201      	movs	r2, #1
 801efc6:	e7de      	b.n	801ef86 <_dtoa_r+0x226>
 801efc8:	2200      	movs	r2, #0
 801efca:	9207      	str	r2, [sp, #28]
 801efcc:	9a08      	ldr	r2, [sp, #32]
 801efce:	eb0b 0a02 	add.w	sl, fp, r2
 801efd2:	f10a 0901 	add.w	r9, sl, #1
 801efd6:	464a      	mov	r2, r9
 801efd8:	2a01      	cmp	r2, #1
 801efda:	bfb8      	it	lt
 801efdc:	2201      	movlt	r2, #1
 801efde:	e7dc      	b.n	801ef9a <_dtoa_r+0x23a>
 801efe0:	2201      	movs	r2, #1
 801efe2:	e7f2      	b.n	801efca <_dtoa_r+0x26a>
 801efe4:	2401      	movs	r4, #1
 801efe6:	2200      	movs	r2, #0
 801efe8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801efec:	f04f 3aff 	mov.w	sl, #4294967295
 801eff0:	2100      	movs	r1, #0
 801eff2:	46d1      	mov	r9, sl
 801eff4:	2212      	movs	r2, #18
 801eff6:	9108      	str	r1, [sp, #32]
 801eff8:	e7cf      	b.n	801ef9a <_dtoa_r+0x23a>
 801effa:	2201      	movs	r2, #1
 801effc:	9207      	str	r2, [sp, #28]
 801effe:	e7f5      	b.n	801efec <_dtoa_r+0x28c>
 801f000:	f8dd a020 	ldr.w	sl, [sp, #32]
 801f004:	46d1      	mov	r9, sl
 801f006:	4652      	mov	r2, sl
 801f008:	e7c7      	b.n	801ef9a <_dtoa_r+0x23a>
 801f00a:	3101      	adds	r1, #1
 801f00c:	0040      	lsls	r0, r0, #1
 801f00e:	e7c7      	b.n	801efa0 <_dtoa_r+0x240>
 801f010:	636f4361 	.word	0x636f4361
 801f014:	3fd287a7 	.word	0x3fd287a7
 801f018:	8b60c8b3 	.word	0x8b60c8b3
 801f01c:	3fc68a28 	.word	0x3fc68a28
 801f020:	509f79fb 	.word	0x509f79fb
 801f024:	3fd34413 	.word	0x3fd34413
 801f028:	08021121 	.word	0x08021121
 801f02c:	08021138 	.word	0x08021138
 801f030:	7ff00000 	.word	0x7ff00000
 801f034:	0802111d 	.word	0x0802111d
 801f038:	08021114 	.word	0x08021114
 801f03c:	080210f1 	.word	0x080210f1
 801f040:	08021228 	.word	0x08021228
 801f044:	08021190 	.word	0x08021190
 801f048:	69f2      	ldr	r2, [r6, #28]
 801f04a:	9901      	ldr	r1, [sp, #4]
 801f04c:	6011      	str	r1, [r2, #0]
 801f04e:	f1b9 0f0e 	cmp.w	r9, #14
 801f052:	d86c      	bhi.n	801f12e <_dtoa_r+0x3ce>
 801f054:	2c00      	cmp	r4, #0
 801f056:	d06a      	beq.n	801f12e <_dtoa_r+0x3ce>
 801f058:	f1bb 0f00 	cmp.w	fp, #0
 801f05c:	f340 80a0 	ble.w	801f1a0 <_dtoa_r+0x440>
 801f060:	4ac1      	ldr	r2, [pc, #772]	; (801f368 <_dtoa_r+0x608>)
 801f062:	f00b 010f 	and.w	r1, fp, #15
 801f066:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801f06a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801f06e:	ed92 7b00 	vldr	d7, [r2]
 801f072:	ea4f 122b 	mov.w	r2, fp, asr #4
 801f076:	f000 8087 	beq.w	801f188 <_dtoa_r+0x428>
 801f07a:	49bc      	ldr	r1, [pc, #752]	; (801f36c <_dtoa_r+0x60c>)
 801f07c:	ed91 6b08 	vldr	d6, [r1, #32]
 801f080:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801f084:	ed8d 6b02 	vstr	d6, [sp, #8]
 801f088:	f002 020f 	and.w	r2, r2, #15
 801f08c:	2103      	movs	r1, #3
 801f08e:	48b7      	ldr	r0, [pc, #732]	; (801f36c <_dtoa_r+0x60c>)
 801f090:	2a00      	cmp	r2, #0
 801f092:	d17b      	bne.n	801f18c <_dtoa_r+0x42c>
 801f094:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f098:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f09c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f0a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f0a6:	2a00      	cmp	r2, #0
 801f0a8:	f000 80a0 	beq.w	801f1ec <_dtoa_r+0x48c>
 801f0ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801f0b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0b8:	f140 8098 	bpl.w	801f1ec <_dtoa_r+0x48c>
 801f0bc:	f1b9 0f00 	cmp.w	r9, #0
 801f0c0:	f000 8094 	beq.w	801f1ec <_dtoa_r+0x48c>
 801f0c4:	f1ba 0f00 	cmp.w	sl, #0
 801f0c8:	dd2f      	ble.n	801f12a <_dtoa_r+0x3ca>
 801f0ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801f0ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f0d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f0d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801f0da:	3101      	adds	r1, #1
 801f0dc:	4654      	mov	r4, sl
 801f0de:	ed9d 6b02 	vldr	d6, [sp, #8]
 801f0e2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801f0e6:	ee07 1a90 	vmov	s15, r1
 801f0ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f0ee:	eea7 5b06 	vfma.f64	d5, d7, d6
 801f0f2:	ee15 7a90 	vmov	r7, s11
 801f0f6:	ec51 0b15 	vmov	r0, r1, d5
 801f0fa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801f0fe:	2c00      	cmp	r4, #0
 801f100:	d177      	bne.n	801f1f2 <_dtoa_r+0x492>
 801f102:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f106:	ee36 6b47 	vsub.f64	d6, d6, d7
 801f10a:	ec41 0b17 	vmov	d7, r0, r1
 801f10e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f116:	f300 826a 	bgt.w	801f5ee <_dtoa_r+0x88e>
 801f11a:	eeb1 7b47 	vneg.f64	d7, d7
 801f11e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f126:	f100 8260 	bmi.w	801f5ea <_dtoa_r+0x88a>
 801f12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801f12e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f130:	2a00      	cmp	r2, #0
 801f132:	f2c0 811d 	blt.w	801f370 <_dtoa_r+0x610>
 801f136:	f1bb 0f0e 	cmp.w	fp, #14
 801f13a:	f300 8119 	bgt.w	801f370 <_dtoa_r+0x610>
 801f13e:	4b8a      	ldr	r3, [pc, #552]	; (801f368 <_dtoa_r+0x608>)
 801f140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f144:	ed93 6b00 	vldr	d6, [r3]
 801f148:	9b08      	ldr	r3, [sp, #32]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	f280 80b7 	bge.w	801f2be <_dtoa_r+0x55e>
 801f150:	f1b9 0f00 	cmp.w	r9, #0
 801f154:	f300 80b3 	bgt.w	801f2be <_dtoa_r+0x55e>
 801f158:	f040 8246 	bne.w	801f5e8 <_dtoa_r+0x888>
 801f15c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801f160:	ee26 6b07 	vmul.f64	d6, d6, d7
 801f164:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f168:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f170:	464c      	mov	r4, r9
 801f172:	464f      	mov	r7, r9
 801f174:	f280 821c 	bge.w	801f5b0 <_dtoa_r+0x850>
 801f178:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f17c:	2331      	movs	r3, #49	; 0x31
 801f17e:	f808 3b01 	strb.w	r3, [r8], #1
 801f182:	f10b 0b01 	add.w	fp, fp, #1
 801f186:	e218      	b.n	801f5ba <_dtoa_r+0x85a>
 801f188:	2102      	movs	r1, #2
 801f18a:	e780      	b.n	801f08e <_dtoa_r+0x32e>
 801f18c:	07d4      	lsls	r4, r2, #31
 801f18e:	d504      	bpl.n	801f19a <_dtoa_r+0x43a>
 801f190:	ed90 6b00 	vldr	d6, [r0]
 801f194:	3101      	adds	r1, #1
 801f196:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f19a:	1052      	asrs	r2, r2, #1
 801f19c:	3008      	adds	r0, #8
 801f19e:	e777      	b.n	801f090 <_dtoa_r+0x330>
 801f1a0:	d022      	beq.n	801f1e8 <_dtoa_r+0x488>
 801f1a2:	f1cb 0200 	rsb	r2, fp, #0
 801f1a6:	4970      	ldr	r1, [pc, #448]	; (801f368 <_dtoa_r+0x608>)
 801f1a8:	f002 000f 	and.w	r0, r2, #15
 801f1ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801f1b0:	ed91 7b00 	vldr	d7, [r1]
 801f1b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801f1b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f1bc:	486b      	ldr	r0, [pc, #428]	; (801f36c <_dtoa_r+0x60c>)
 801f1be:	1112      	asrs	r2, r2, #4
 801f1c0:	2400      	movs	r4, #0
 801f1c2:	2102      	movs	r1, #2
 801f1c4:	b92a      	cbnz	r2, 801f1d2 <_dtoa_r+0x472>
 801f1c6:	2c00      	cmp	r4, #0
 801f1c8:	f43f af6a 	beq.w	801f0a0 <_dtoa_r+0x340>
 801f1cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f1d0:	e766      	b.n	801f0a0 <_dtoa_r+0x340>
 801f1d2:	07d7      	lsls	r7, r2, #31
 801f1d4:	d505      	bpl.n	801f1e2 <_dtoa_r+0x482>
 801f1d6:	ed90 6b00 	vldr	d6, [r0]
 801f1da:	3101      	adds	r1, #1
 801f1dc:	2401      	movs	r4, #1
 801f1de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f1e2:	1052      	asrs	r2, r2, #1
 801f1e4:	3008      	adds	r0, #8
 801f1e6:	e7ed      	b.n	801f1c4 <_dtoa_r+0x464>
 801f1e8:	2102      	movs	r1, #2
 801f1ea:	e759      	b.n	801f0a0 <_dtoa_r+0x340>
 801f1ec:	465a      	mov	r2, fp
 801f1ee:	464c      	mov	r4, r9
 801f1f0:	e775      	b.n	801f0de <_dtoa_r+0x37e>
 801f1f2:	ec41 0b17 	vmov	d7, r0, r1
 801f1f6:	495c      	ldr	r1, [pc, #368]	; (801f368 <_dtoa_r+0x608>)
 801f1f8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801f1fc:	ed11 4b02 	vldr	d4, [r1, #-8]
 801f200:	9901      	ldr	r1, [sp, #4]
 801f202:	440c      	add	r4, r1
 801f204:	9907      	ldr	r1, [sp, #28]
 801f206:	b351      	cbz	r1, 801f25e <_dtoa_r+0x4fe>
 801f208:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801f20c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801f210:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f214:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801f218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f21c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801f220:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f224:	ee14 1a90 	vmov	r1, s9
 801f228:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f22c:	3130      	adds	r1, #48	; 0x30
 801f22e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f232:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f23a:	f808 1b01 	strb.w	r1, [r8], #1
 801f23e:	d439      	bmi.n	801f2b4 <_dtoa_r+0x554>
 801f240:	ee32 5b46 	vsub.f64	d5, d2, d6
 801f244:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801f248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f24c:	d472      	bmi.n	801f334 <_dtoa_r+0x5d4>
 801f24e:	45a0      	cmp	r8, r4
 801f250:	f43f af6b 	beq.w	801f12a <_dtoa_r+0x3ca>
 801f254:	ee27 7b03 	vmul.f64	d7, d7, d3
 801f258:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f25c:	e7e0      	b.n	801f220 <_dtoa_r+0x4c0>
 801f25e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f262:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f266:	4620      	mov	r0, r4
 801f268:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801f26c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801f270:	ee14 1a90 	vmov	r1, s9
 801f274:	3130      	adds	r1, #48	; 0x30
 801f276:	f808 1b01 	strb.w	r1, [r8], #1
 801f27a:	45a0      	cmp	r8, r4
 801f27c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801f280:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f284:	d118      	bne.n	801f2b8 <_dtoa_r+0x558>
 801f286:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801f28a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801f28e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f296:	dc4d      	bgt.n	801f334 <_dtoa_r+0x5d4>
 801f298:	ee35 5b47 	vsub.f64	d5, d5, d7
 801f29c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801f2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2a4:	f57f af41 	bpl.w	801f12a <_dtoa_r+0x3ca>
 801f2a8:	4680      	mov	r8, r0
 801f2aa:	3801      	subs	r0, #1
 801f2ac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801f2b0:	2b30      	cmp	r3, #48	; 0x30
 801f2b2:	d0f9      	beq.n	801f2a8 <_dtoa_r+0x548>
 801f2b4:	4693      	mov	fp, r2
 801f2b6:	e02a      	b.n	801f30e <_dtoa_r+0x5ae>
 801f2b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801f2bc:	e7d6      	b.n	801f26c <_dtoa_r+0x50c>
 801f2be:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801f2c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f2ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801f2ce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801f2d2:	ee15 3a10 	vmov	r3, s10
 801f2d6:	3330      	adds	r3, #48	; 0x30
 801f2d8:	f808 3b01 	strb.w	r3, [r8], #1
 801f2dc:	9b01      	ldr	r3, [sp, #4]
 801f2de:	eba8 0303 	sub.w	r3, r8, r3
 801f2e2:	4599      	cmp	r9, r3
 801f2e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801f2e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801f2ec:	d133      	bne.n	801f356 <_dtoa_r+0x5f6>
 801f2ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f2f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801f2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2fa:	dc1a      	bgt.n	801f332 <_dtoa_r+0x5d2>
 801f2fc:	eeb4 7b46 	vcmp.f64	d7, d6
 801f300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f304:	d103      	bne.n	801f30e <_dtoa_r+0x5ae>
 801f306:	ee15 3a10 	vmov	r3, s10
 801f30a:	07d9      	lsls	r1, r3, #31
 801f30c:	d411      	bmi.n	801f332 <_dtoa_r+0x5d2>
 801f30e:	4629      	mov	r1, r5
 801f310:	4630      	mov	r0, r6
 801f312:	f000 fbd1 	bl	801fab8 <_Bfree>
 801f316:	2300      	movs	r3, #0
 801f318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f31a:	f888 3000 	strb.w	r3, [r8]
 801f31e:	f10b 0301 	add.w	r3, fp, #1
 801f322:	6013      	str	r3, [r2, #0]
 801f324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f326:	2b00      	cmp	r3, #0
 801f328:	f43f ad69 	beq.w	801edfe <_dtoa_r+0x9e>
 801f32c:	f8c3 8000 	str.w	r8, [r3]
 801f330:	e565      	b.n	801edfe <_dtoa_r+0x9e>
 801f332:	465a      	mov	r2, fp
 801f334:	4643      	mov	r3, r8
 801f336:	4698      	mov	r8, r3
 801f338:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801f33c:	2939      	cmp	r1, #57	; 0x39
 801f33e:	d106      	bne.n	801f34e <_dtoa_r+0x5ee>
 801f340:	9901      	ldr	r1, [sp, #4]
 801f342:	4299      	cmp	r1, r3
 801f344:	d1f7      	bne.n	801f336 <_dtoa_r+0x5d6>
 801f346:	9801      	ldr	r0, [sp, #4]
 801f348:	2130      	movs	r1, #48	; 0x30
 801f34a:	3201      	adds	r2, #1
 801f34c:	7001      	strb	r1, [r0, #0]
 801f34e:	7819      	ldrb	r1, [r3, #0]
 801f350:	3101      	adds	r1, #1
 801f352:	7019      	strb	r1, [r3, #0]
 801f354:	e7ae      	b.n	801f2b4 <_dtoa_r+0x554>
 801f356:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f35a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f362:	d1b2      	bne.n	801f2ca <_dtoa_r+0x56a>
 801f364:	e7d3      	b.n	801f30e <_dtoa_r+0x5ae>
 801f366:	bf00      	nop
 801f368:	08021228 	.word	0x08021228
 801f36c:	08021200 	.word	0x08021200
 801f370:	9907      	ldr	r1, [sp, #28]
 801f372:	2900      	cmp	r1, #0
 801f374:	f000 80d0 	beq.w	801f518 <_dtoa_r+0x7b8>
 801f378:	9906      	ldr	r1, [sp, #24]
 801f37a:	2901      	cmp	r1, #1
 801f37c:	f300 80b4 	bgt.w	801f4e8 <_dtoa_r+0x788>
 801f380:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f382:	2900      	cmp	r1, #0
 801f384:	f000 80ac 	beq.w	801f4e0 <_dtoa_r+0x780>
 801f388:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f38c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f390:	461c      	mov	r4, r3
 801f392:	9309      	str	r3, [sp, #36]	; 0x24
 801f394:	9b04      	ldr	r3, [sp, #16]
 801f396:	4413      	add	r3, r2
 801f398:	9304      	str	r3, [sp, #16]
 801f39a:	9b05      	ldr	r3, [sp, #20]
 801f39c:	2101      	movs	r1, #1
 801f39e:	4413      	add	r3, r2
 801f3a0:	4630      	mov	r0, r6
 801f3a2:	9305      	str	r3, [sp, #20]
 801f3a4:	f000 fc3e 	bl	801fc24 <__i2b>
 801f3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3aa:	4607      	mov	r7, r0
 801f3ac:	f1b8 0f00 	cmp.w	r8, #0
 801f3b0:	d00d      	beq.n	801f3ce <_dtoa_r+0x66e>
 801f3b2:	9a05      	ldr	r2, [sp, #20]
 801f3b4:	2a00      	cmp	r2, #0
 801f3b6:	dd0a      	ble.n	801f3ce <_dtoa_r+0x66e>
 801f3b8:	4542      	cmp	r2, r8
 801f3ba:	9904      	ldr	r1, [sp, #16]
 801f3bc:	bfa8      	it	ge
 801f3be:	4642      	movge	r2, r8
 801f3c0:	1a89      	subs	r1, r1, r2
 801f3c2:	9104      	str	r1, [sp, #16]
 801f3c4:	9905      	ldr	r1, [sp, #20]
 801f3c6:	eba8 0802 	sub.w	r8, r8, r2
 801f3ca:	1a8a      	subs	r2, r1, r2
 801f3cc:	9205      	str	r2, [sp, #20]
 801f3ce:	b303      	cbz	r3, 801f412 <_dtoa_r+0x6b2>
 801f3d0:	9a07      	ldr	r2, [sp, #28]
 801f3d2:	2a00      	cmp	r2, #0
 801f3d4:	f000 80a5 	beq.w	801f522 <_dtoa_r+0x7c2>
 801f3d8:	2c00      	cmp	r4, #0
 801f3da:	dd13      	ble.n	801f404 <_dtoa_r+0x6a4>
 801f3dc:	4639      	mov	r1, r7
 801f3de:	4622      	mov	r2, r4
 801f3e0:	4630      	mov	r0, r6
 801f3e2:	930d      	str	r3, [sp, #52]	; 0x34
 801f3e4:	f000 fcde 	bl	801fda4 <__pow5mult>
 801f3e8:	462a      	mov	r2, r5
 801f3ea:	4601      	mov	r1, r0
 801f3ec:	4607      	mov	r7, r0
 801f3ee:	4630      	mov	r0, r6
 801f3f0:	f000 fc2e 	bl	801fc50 <__multiply>
 801f3f4:	4629      	mov	r1, r5
 801f3f6:	9009      	str	r0, [sp, #36]	; 0x24
 801f3f8:	4630      	mov	r0, r6
 801f3fa:	f000 fb5d 	bl	801fab8 <_Bfree>
 801f3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f402:	4615      	mov	r5, r2
 801f404:	1b1a      	subs	r2, r3, r4
 801f406:	d004      	beq.n	801f412 <_dtoa_r+0x6b2>
 801f408:	4629      	mov	r1, r5
 801f40a:	4630      	mov	r0, r6
 801f40c:	f000 fcca 	bl	801fda4 <__pow5mult>
 801f410:	4605      	mov	r5, r0
 801f412:	2101      	movs	r1, #1
 801f414:	4630      	mov	r0, r6
 801f416:	f000 fc05 	bl	801fc24 <__i2b>
 801f41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	4604      	mov	r4, r0
 801f420:	f340 8081 	ble.w	801f526 <_dtoa_r+0x7c6>
 801f424:	461a      	mov	r2, r3
 801f426:	4601      	mov	r1, r0
 801f428:	4630      	mov	r0, r6
 801f42a:	f000 fcbb 	bl	801fda4 <__pow5mult>
 801f42e:	9b06      	ldr	r3, [sp, #24]
 801f430:	2b01      	cmp	r3, #1
 801f432:	4604      	mov	r4, r0
 801f434:	dd7a      	ble.n	801f52c <_dtoa_r+0x7cc>
 801f436:	2300      	movs	r3, #0
 801f438:	9309      	str	r3, [sp, #36]	; 0x24
 801f43a:	6922      	ldr	r2, [r4, #16]
 801f43c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f440:	6910      	ldr	r0, [r2, #16]
 801f442:	f000 fba1 	bl	801fb88 <__hi0bits>
 801f446:	f1c0 0020 	rsb	r0, r0, #32
 801f44a:	9b05      	ldr	r3, [sp, #20]
 801f44c:	4418      	add	r0, r3
 801f44e:	f010 001f 	ands.w	r0, r0, #31
 801f452:	f000 8093 	beq.w	801f57c <_dtoa_r+0x81c>
 801f456:	f1c0 0220 	rsb	r2, r0, #32
 801f45a:	2a04      	cmp	r2, #4
 801f45c:	f340 8085 	ble.w	801f56a <_dtoa_r+0x80a>
 801f460:	9b04      	ldr	r3, [sp, #16]
 801f462:	f1c0 001c 	rsb	r0, r0, #28
 801f466:	4403      	add	r3, r0
 801f468:	9304      	str	r3, [sp, #16]
 801f46a:	9b05      	ldr	r3, [sp, #20]
 801f46c:	4480      	add	r8, r0
 801f46e:	4403      	add	r3, r0
 801f470:	9305      	str	r3, [sp, #20]
 801f472:	9b04      	ldr	r3, [sp, #16]
 801f474:	2b00      	cmp	r3, #0
 801f476:	dd05      	ble.n	801f484 <_dtoa_r+0x724>
 801f478:	4629      	mov	r1, r5
 801f47a:	461a      	mov	r2, r3
 801f47c:	4630      	mov	r0, r6
 801f47e:	f000 fceb 	bl	801fe58 <__lshift>
 801f482:	4605      	mov	r5, r0
 801f484:	9b05      	ldr	r3, [sp, #20]
 801f486:	2b00      	cmp	r3, #0
 801f488:	dd05      	ble.n	801f496 <_dtoa_r+0x736>
 801f48a:	4621      	mov	r1, r4
 801f48c:	461a      	mov	r2, r3
 801f48e:	4630      	mov	r0, r6
 801f490:	f000 fce2 	bl	801fe58 <__lshift>
 801f494:	4604      	mov	r4, r0
 801f496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d071      	beq.n	801f580 <_dtoa_r+0x820>
 801f49c:	4621      	mov	r1, r4
 801f49e:	4628      	mov	r0, r5
 801f4a0:	f000 fd46 	bl	801ff30 <__mcmp>
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	da6b      	bge.n	801f580 <_dtoa_r+0x820>
 801f4a8:	2300      	movs	r3, #0
 801f4aa:	4629      	mov	r1, r5
 801f4ac:	220a      	movs	r2, #10
 801f4ae:	4630      	mov	r0, r6
 801f4b0:	f000 fb24 	bl	801fafc <__multadd>
 801f4b4:	9b07      	ldr	r3, [sp, #28]
 801f4b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f4ba:	4605      	mov	r5, r0
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	f000 8197 	beq.w	801f7f0 <_dtoa_r+0xa90>
 801f4c2:	4639      	mov	r1, r7
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	220a      	movs	r2, #10
 801f4c8:	4630      	mov	r0, r6
 801f4ca:	f000 fb17 	bl	801fafc <__multadd>
 801f4ce:	f1ba 0f00 	cmp.w	sl, #0
 801f4d2:	4607      	mov	r7, r0
 801f4d4:	f300 8093 	bgt.w	801f5fe <_dtoa_r+0x89e>
 801f4d8:	9b06      	ldr	r3, [sp, #24]
 801f4da:	2b02      	cmp	r3, #2
 801f4dc:	dc57      	bgt.n	801f58e <_dtoa_r+0x82e>
 801f4de:	e08e      	b.n	801f5fe <_dtoa_r+0x89e>
 801f4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f4e6:	e751      	b.n	801f38c <_dtoa_r+0x62c>
 801f4e8:	f109 34ff 	add.w	r4, r9, #4294967295
 801f4ec:	42a3      	cmp	r3, r4
 801f4ee:	bfbf      	itttt	lt
 801f4f0:	1ae2      	sublt	r2, r4, r3
 801f4f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801f4f4:	189b      	addlt	r3, r3, r2
 801f4f6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801f4f8:	bfae      	itee	ge
 801f4fa:	1b1c      	subge	r4, r3, r4
 801f4fc:	4623      	movlt	r3, r4
 801f4fe:	2400      	movlt	r4, #0
 801f500:	f1b9 0f00 	cmp.w	r9, #0
 801f504:	bfb5      	itete	lt
 801f506:	9a04      	ldrlt	r2, [sp, #16]
 801f508:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801f50c:	eba2 0809 	sublt.w	r8, r2, r9
 801f510:	464a      	movge	r2, r9
 801f512:	bfb8      	it	lt
 801f514:	2200      	movlt	r2, #0
 801f516:	e73c      	b.n	801f392 <_dtoa_r+0x632>
 801f518:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f51c:	9f07      	ldr	r7, [sp, #28]
 801f51e:	461c      	mov	r4, r3
 801f520:	e744      	b.n	801f3ac <_dtoa_r+0x64c>
 801f522:	461a      	mov	r2, r3
 801f524:	e770      	b.n	801f408 <_dtoa_r+0x6a8>
 801f526:	9b06      	ldr	r3, [sp, #24]
 801f528:	2b01      	cmp	r3, #1
 801f52a:	dc18      	bgt.n	801f55e <_dtoa_r+0x7fe>
 801f52c:	9b02      	ldr	r3, [sp, #8]
 801f52e:	b9b3      	cbnz	r3, 801f55e <_dtoa_r+0x7fe>
 801f530:	9b03      	ldr	r3, [sp, #12]
 801f532:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801f536:	b9a2      	cbnz	r2, 801f562 <_dtoa_r+0x802>
 801f538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f53c:	0d12      	lsrs	r2, r2, #20
 801f53e:	0512      	lsls	r2, r2, #20
 801f540:	b18a      	cbz	r2, 801f566 <_dtoa_r+0x806>
 801f542:	9b04      	ldr	r3, [sp, #16]
 801f544:	3301      	adds	r3, #1
 801f546:	9304      	str	r3, [sp, #16]
 801f548:	9b05      	ldr	r3, [sp, #20]
 801f54a:	3301      	adds	r3, #1
 801f54c:	9305      	str	r3, [sp, #20]
 801f54e:	2301      	movs	r3, #1
 801f550:	9309      	str	r3, [sp, #36]	; 0x24
 801f552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f554:	2b00      	cmp	r3, #0
 801f556:	f47f af70 	bne.w	801f43a <_dtoa_r+0x6da>
 801f55a:	2001      	movs	r0, #1
 801f55c:	e775      	b.n	801f44a <_dtoa_r+0x6ea>
 801f55e:	2300      	movs	r3, #0
 801f560:	e7f6      	b.n	801f550 <_dtoa_r+0x7f0>
 801f562:	9b02      	ldr	r3, [sp, #8]
 801f564:	e7f4      	b.n	801f550 <_dtoa_r+0x7f0>
 801f566:	9209      	str	r2, [sp, #36]	; 0x24
 801f568:	e7f3      	b.n	801f552 <_dtoa_r+0x7f2>
 801f56a:	d082      	beq.n	801f472 <_dtoa_r+0x712>
 801f56c:	9b04      	ldr	r3, [sp, #16]
 801f56e:	321c      	adds	r2, #28
 801f570:	4413      	add	r3, r2
 801f572:	9304      	str	r3, [sp, #16]
 801f574:	9b05      	ldr	r3, [sp, #20]
 801f576:	4490      	add	r8, r2
 801f578:	4413      	add	r3, r2
 801f57a:	e779      	b.n	801f470 <_dtoa_r+0x710>
 801f57c:	4602      	mov	r2, r0
 801f57e:	e7f5      	b.n	801f56c <_dtoa_r+0x80c>
 801f580:	f1b9 0f00 	cmp.w	r9, #0
 801f584:	dc36      	bgt.n	801f5f4 <_dtoa_r+0x894>
 801f586:	9b06      	ldr	r3, [sp, #24]
 801f588:	2b02      	cmp	r3, #2
 801f58a:	dd33      	ble.n	801f5f4 <_dtoa_r+0x894>
 801f58c:	46ca      	mov	sl, r9
 801f58e:	f1ba 0f00 	cmp.w	sl, #0
 801f592:	d10d      	bne.n	801f5b0 <_dtoa_r+0x850>
 801f594:	4621      	mov	r1, r4
 801f596:	4653      	mov	r3, sl
 801f598:	2205      	movs	r2, #5
 801f59a:	4630      	mov	r0, r6
 801f59c:	f000 faae 	bl	801fafc <__multadd>
 801f5a0:	4601      	mov	r1, r0
 801f5a2:	4604      	mov	r4, r0
 801f5a4:	4628      	mov	r0, r5
 801f5a6:	f000 fcc3 	bl	801ff30 <__mcmp>
 801f5aa:	2800      	cmp	r0, #0
 801f5ac:	f73f ade4 	bgt.w	801f178 <_dtoa_r+0x418>
 801f5b0:	9b08      	ldr	r3, [sp, #32]
 801f5b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f5b6:	ea6f 0b03 	mvn.w	fp, r3
 801f5ba:	f04f 0900 	mov.w	r9, #0
 801f5be:	4621      	mov	r1, r4
 801f5c0:	4630      	mov	r0, r6
 801f5c2:	f000 fa79 	bl	801fab8 <_Bfree>
 801f5c6:	2f00      	cmp	r7, #0
 801f5c8:	f43f aea1 	beq.w	801f30e <_dtoa_r+0x5ae>
 801f5cc:	f1b9 0f00 	cmp.w	r9, #0
 801f5d0:	d005      	beq.n	801f5de <_dtoa_r+0x87e>
 801f5d2:	45b9      	cmp	r9, r7
 801f5d4:	d003      	beq.n	801f5de <_dtoa_r+0x87e>
 801f5d6:	4649      	mov	r1, r9
 801f5d8:	4630      	mov	r0, r6
 801f5da:	f000 fa6d 	bl	801fab8 <_Bfree>
 801f5de:	4639      	mov	r1, r7
 801f5e0:	4630      	mov	r0, r6
 801f5e2:	f000 fa69 	bl	801fab8 <_Bfree>
 801f5e6:	e692      	b.n	801f30e <_dtoa_r+0x5ae>
 801f5e8:	2400      	movs	r4, #0
 801f5ea:	4627      	mov	r7, r4
 801f5ec:	e7e0      	b.n	801f5b0 <_dtoa_r+0x850>
 801f5ee:	4693      	mov	fp, r2
 801f5f0:	4627      	mov	r7, r4
 801f5f2:	e5c1      	b.n	801f178 <_dtoa_r+0x418>
 801f5f4:	9b07      	ldr	r3, [sp, #28]
 801f5f6:	46ca      	mov	sl, r9
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	f000 8100 	beq.w	801f7fe <_dtoa_r+0xa9e>
 801f5fe:	f1b8 0f00 	cmp.w	r8, #0
 801f602:	dd05      	ble.n	801f610 <_dtoa_r+0x8b0>
 801f604:	4639      	mov	r1, r7
 801f606:	4642      	mov	r2, r8
 801f608:	4630      	mov	r0, r6
 801f60a:	f000 fc25 	bl	801fe58 <__lshift>
 801f60e:	4607      	mov	r7, r0
 801f610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f612:	2b00      	cmp	r3, #0
 801f614:	d05d      	beq.n	801f6d2 <_dtoa_r+0x972>
 801f616:	6879      	ldr	r1, [r7, #4]
 801f618:	4630      	mov	r0, r6
 801f61a:	f000 fa0d 	bl	801fa38 <_Balloc>
 801f61e:	4680      	mov	r8, r0
 801f620:	b928      	cbnz	r0, 801f62e <_dtoa_r+0x8ce>
 801f622:	4b82      	ldr	r3, [pc, #520]	; (801f82c <_dtoa_r+0xacc>)
 801f624:	4602      	mov	r2, r0
 801f626:	f240 21ef 	movw	r1, #751	; 0x2ef
 801f62a:	f7ff bbb1 	b.w	801ed90 <_dtoa_r+0x30>
 801f62e:	693a      	ldr	r2, [r7, #16]
 801f630:	3202      	adds	r2, #2
 801f632:	0092      	lsls	r2, r2, #2
 801f634:	f107 010c 	add.w	r1, r7, #12
 801f638:	300c      	adds	r0, #12
 801f63a:	f7ff fafa 	bl	801ec32 <memcpy>
 801f63e:	2201      	movs	r2, #1
 801f640:	4641      	mov	r1, r8
 801f642:	4630      	mov	r0, r6
 801f644:	f000 fc08 	bl	801fe58 <__lshift>
 801f648:	9b01      	ldr	r3, [sp, #4]
 801f64a:	3301      	adds	r3, #1
 801f64c:	9304      	str	r3, [sp, #16]
 801f64e:	9b01      	ldr	r3, [sp, #4]
 801f650:	4453      	add	r3, sl
 801f652:	9308      	str	r3, [sp, #32]
 801f654:	9b02      	ldr	r3, [sp, #8]
 801f656:	f003 0301 	and.w	r3, r3, #1
 801f65a:	46b9      	mov	r9, r7
 801f65c:	9307      	str	r3, [sp, #28]
 801f65e:	4607      	mov	r7, r0
 801f660:	9b04      	ldr	r3, [sp, #16]
 801f662:	4621      	mov	r1, r4
 801f664:	3b01      	subs	r3, #1
 801f666:	4628      	mov	r0, r5
 801f668:	9302      	str	r3, [sp, #8]
 801f66a:	f7ff faf0 	bl	801ec4e <quorem>
 801f66e:	4603      	mov	r3, r0
 801f670:	3330      	adds	r3, #48	; 0x30
 801f672:	9005      	str	r0, [sp, #20]
 801f674:	4649      	mov	r1, r9
 801f676:	4628      	mov	r0, r5
 801f678:	9309      	str	r3, [sp, #36]	; 0x24
 801f67a:	f000 fc59 	bl	801ff30 <__mcmp>
 801f67e:	463a      	mov	r2, r7
 801f680:	4682      	mov	sl, r0
 801f682:	4621      	mov	r1, r4
 801f684:	4630      	mov	r0, r6
 801f686:	f000 fc6f 	bl	801ff68 <__mdiff>
 801f68a:	68c2      	ldr	r2, [r0, #12]
 801f68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f68e:	4680      	mov	r8, r0
 801f690:	bb0a      	cbnz	r2, 801f6d6 <_dtoa_r+0x976>
 801f692:	4601      	mov	r1, r0
 801f694:	4628      	mov	r0, r5
 801f696:	f000 fc4b 	bl	801ff30 <__mcmp>
 801f69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f69c:	4602      	mov	r2, r0
 801f69e:	4641      	mov	r1, r8
 801f6a0:	4630      	mov	r0, r6
 801f6a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801f6a6:	f000 fa07 	bl	801fab8 <_Bfree>
 801f6aa:	9b06      	ldr	r3, [sp, #24]
 801f6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f6b2:	ea43 0102 	orr.w	r1, r3, r2
 801f6b6:	9b07      	ldr	r3, [sp, #28]
 801f6b8:	4319      	orrs	r1, r3
 801f6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6bc:	d10d      	bne.n	801f6da <_dtoa_r+0x97a>
 801f6be:	2b39      	cmp	r3, #57	; 0x39
 801f6c0:	d029      	beq.n	801f716 <_dtoa_r+0x9b6>
 801f6c2:	f1ba 0f00 	cmp.w	sl, #0
 801f6c6:	dd01      	ble.n	801f6cc <_dtoa_r+0x96c>
 801f6c8:	9b05      	ldr	r3, [sp, #20]
 801f6ca:	3331      	adds	r3, #49	; 0x31
 801f6cc:	9a02      	ldr	r2, [sp, #8]
 801f6ce:	7013      	strb	r3, [r2, #0]
 801f6d0:	e775      	b.n	801f5be <_dtoa_r+0x85e>
 801f6d2:	4638      	mov	r0, r7
 801f6d4:	e7b8      	b.n	801f648 <_dtoa_r+0x8e8>
 801f6d6:	2201      	movs	r2, #1
 801f6d8:	e7e1      	b.n	801f69e <_dtoa_r+0x93e>
 801f6da:	f1ba 0f00 	cmp.w	sl, #0
 801f6de:	db06      	blt.n	801f6ee <_dtoa_r+0x98e>
 801f6e0:	9906      	ldr	r1, [sp, #24]
 801f6e2:	ea41 0a0a 	orr.w	sl, r1, sl
 801f6e6:	9907      	ldr	r1, [sp, #28]
 801f6e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801f6ec:	d120      	bne.n	801f730 <_dtoa_r+0x9d0>
 801f6ee:	2a00      	cmp	r2, #0
 801f6f0:	ddec      	ble.n	801f6cc <_dtoa_r+0x96c>
 801f6f2:	4629      	mov	r1, r5
 801f6f4:	2201      	movs	r2, #1
 801f6f6:	4630      	mov	r0, r6
 801f6f8:	9304      	str	r3, [sp, #16]
 801f6fa:	f000 fbad 	bl	801fe58 <__lshift>
 801f6fe:	4621      	mov	r1, r4
 801f700:	4605      	mov	r5, r0
 801f702:	f000 fc15 	bl	801ff30 <__mcmp>
 801f706:	2800      	cmp	r0, #0
 801f708:	9b04      	ldr	r3, [sp, #16]
 801f70a:	dc02      	bgt.n	801f712 <_dtoa_r+0x9b2>
 801f70c:	d1de      	bne.n	801f6cc <_dtoa_r+0x96c>
 801f70e:	07da      	lsls	r2, r3, #31
 801f710:	d5dc      	bpl.n	801f6cc <_dtoa_r+0x96c>
 801f712:	2b39      	cmp	r3, #57	; 0x39
 801f714:	d1d8      	bne.n	801f6c8 <_dtoa_r+0x968>
 801f716:	9a02      	ldr	r2, [sp, #8]
 801f718:	2339      	movs	r3, #57	; 0x39
 801f71a:	7013      	strb	r3, [r2, #0]
 801f71c:	4643      	mov	r3, r8
 801f71e:	4698      	mov	r8, r3
 801f720:	3b01      	subs	r3, #1
 801f722:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801f726:	2a39      	cmp	r2, #57	; 0x39
 801f728:	d051      	beq.n	801f7ce <_dtoa_r+0xa6e>
 801f72a:	3201      	adds	r2, #1
 801f72c:	701a      	strb	r2, [r3, #0]
 801f72e:	e746      	b.n	801f5be <_dtoa_r+0x85e>
 801f730:	2a00      	cmp	r2, #0
 801f732:	dd03      	ble.n	801f73c <_dtoa_r+0x9dc>
 801f734:	2b39      	cmp	r3, #57	; 0x39
 801f736:	d0ee      	beq.n	801f716 <_dtoa_r+0x9b6>
 801f738:	3301      	adds	r3, #1
 801f73a:	e7c7      	b.n	801f6cc <_dtoa_r+0x96c>
 801f73c:	9a04      	ldr	r2, [sp, #16]
 801f73e:	9908      	ldr	r1, [sp, #32]
 801f740:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f744:	428a      	cmp	r2, r1
 801f746:	d02b      	beq.n	801f7a0 <_dtoa_r+0xa40>
 801f748:	4629      	mov	r1, r5
 801f74a:	2300      	movs	r3, #0
 801f74c:	220a      	movs	r2, #10
 801f74e:	4630      	mov	r0, r6
 801f750:	f000 f9d4 	bl	801fafc <__multadd>
 801f754:	45b9      	cmp	r9, r7
 801f756:	4605      	mov	r5, r0
 801f758:	f04f 0300 	mov.w	r3, #0
 801f75c:	f04f 020a 	mov.w	r2, #10
 801f760:	4649      	mov	r1, r9
 801f762:	4630      	mov	r0, r6
 801f764:	d107      	bne.n	801f776 <_dtoa_r+0xa16>
 801f766:	f000 f9c9 	bl	801fafc <__multadd>
 801f76a:	4681      	mov	r9, r0
 801f76c:	4607      	mov	r7, r0
 801f76e:	9b04      	ldr	r3, [sp, #16]
 801f770:	3301      	adds	r3, #1
 801f772:	9304      	str	r3, [sp, #16]
 801f774:	e774      	b.n	801f660 <_dtoa_r+0x900>
 801f776:	f000 f9c1 	bl	801fafc <__multadd>
 801f77a:	4639      	mov	r1, r7
 801f77c:	4681      	mov	r9, r0
 801f77e:	2300      	movs	r3, #0
 801f780:	220a      	movs	r2, #10
 801f782:	4630      	mov	r0, r6
 801f784:	f000 f9ba 	bl	801fafc <__multadd>
 801f788:	4607      	mov	r7, r0
 801f78a:	e7f0      	b.n	801f76e <_dtoa_r+0xa0e>
 801f78c:	f1ba 0f00 	cmp.w	sl, #0
 801f790:	9a01      	ldr	r2, [sp, #4]
 801f792:	bfcc      	ite	gt
 801f794:	46d0      	movgt	r8, sl
 801f796:	f04f 0801 	movle.w	r8, #1
 801f79a:	4490      	add	r8, r2
 801f79c:	f04f 0900 	mov.w	r9, #0
 801f7a0:	4629      	mov	r1, r5
 801f7a2:	2201      	movs	r2, #1
 801f7a4:	4630      	mov	r0, r6
 801f7a6:	9302      	str	r3, [sp, #8]
 801f7a8:	f000 fb56 	bl	801fe58 <__lshift>
 801f7ac:	4621      	mov	r1, r4
 801f7ae:	4605      	mov	r5, r0
 801f7b0:	f000 fbbe 	bl	801ff30 <__mcmp>
 801f7b4:	2800      	cmp	r0, #0
 801f7b6:	dcb1      	bgt.n	801f71c <_dtoa_r+0x9bc>
 801f7b8:	d102      	bne.n	801f7c0 <_dtoa_r+0xa60>
 801f7ba:	9b02      	ldr	r3, [sp, #8]
 801f7bc:	07db      	lsls	r3, r3, #31
 801f7be:	d4ad      	bmi.n	801f71c <_dtoa_r+0x9bc>
 801f7c0:	4643      	mov	r3, r8
 801f7c2:	4698      	mov	r8, r3
 801f7c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f7c8:	2a30      	cmp	r2, #48	; 0x30
 801f7ca:	d0fa      	beq.n	801f7c2 <_dtoa_r+0xa62>
 801f7cc:	e6f7      	b.n	801f5be <_dtoa_r+0x85e>
 801f7ce:	9a01      	ldr	r2, [sp, #4]
 801f7d0:	429a      	cmp	r2, r3
 801f7d2:	d1a4      	bne.n	801f71e <_dtoa_r+0x9be>
 801f7d4:	f10b 0b01 	add.w	fp, fp, #1
 801f7d8:	2331      	movs	r3, #49	; 0x31
 801f7da:	e778      	b.n	801f6ce <_dtoa_r+0x96e>
 801f7dc:	4b14      	ldr	r3, [pc, #80]	; (801f830 <_dtoa_r+0xad0>)
 801f7de:	f7ff bb2a 	b.w	801ee36 <_dtoa_r+0xd6>
 801f7e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	f47f ab05 	bne.w	801edf4 <_dtoa_r+0x94>
 801f7ea:	4b12      	ldr	r3, [pc, #72]	; (801f834 <_dtoa_r+0xad4>)
 801f7ec:	f7ff bb23 	b.w	801ee36 <_dtoa_r+0xd6>
 801f7f0:	f1ba 0f00 	cmp.w	sl, #0
 801f7f4:	dc03      	bgt.n	801f7fe <_dtoa_r+0xa9e>
 801f7f6:	9b06      	ldr	r3, [sp, #24]
 801f7f8:	2b02      	cmp	r3, #2
 801f7fa:	f73f aec8 	bgt.w	801f58e <_dtoa_r+0x82e>
 801f7fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f802:	4621      	mov	r1, r4
 801f804:	4628      	mov	r0, r5
 801f806:	f7ff fa22 	bl	801ec4e <quorem>
 801f80a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f80e:	f808 3b01 	strb.w	r3, [r8], #1
 801f812:	9a01      	ldr	r2, [sp, #4]
 801f814:	eba8 0202 	sub.w	r2, r8, r2
 801f818:	4592      	cmp	sl, r2
 801f81a:	ddb7      	ble.n	801f78c <_dtoa_r+0xa2c>
 801f81c:	4629      	mov	r1, r5
 801f81e:	2300      	movs	r3, #0
 801f820:	220a      	movs	r2, #10
 801f822:	4630      	mov	r0, r6
 801f824:	f000 f96a 	bl	801fafc <__multadd>
 801f828:	4605      	mov	r5, r0
 801f82a:	e7ea      	b.n	801f802 <_dtoa_r+0xaa2>
 801f82c:	08021190 	.word	0x08021190
 801f830:	080210f0 	.word	0x080210f0
 801f834:	08021114 	.word	0x08021114

0801f838 <_free_r>:
 801f838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f83a:	2900      	cmp	r1, #0
 801f83c:	d044      	beq.n	801f8c8 <_free_r+0x90>
 801f83e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f842:	9001      	str	r0, [sp, #4]
 801f844:	2b00      	cmp	r3, #0
 801f846:	f1a1 0404 	sub.w	r4, r1, #4
 801f84a:	bfb8      	it	lt
 801f84c:	18e4      	addlt	r4, r4, r3
 801f84e:	f000 f8e7 	bl	801fa20 <__malloc_lock>
 801f852:	4a1e      	ldr	r2, [pc, #120]	; (801f8cc <_free_r+0x94>)
 801f854:	9801      	ldr	r0, [sp, #4]
 801f856:	6813      	ldr	r3, [r2, #0]
 801f858:	b933      	cbnz	r3, 801f868 <_free_r+0x30>
 801f85a:	6063      	str	r3, [r4, #4]
 801f85c:	6014      	str	r4, [r2, #0]
 801f85e:	b003      	add	sp, #12
 801f860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f864:	f000 b8e2 	b.w	801fa2c <__malloc_unlock>
 801f868:	42a3      	cmp	r3, r4
 801f86a:	d908      	bls.n	801f87e <_free_r+0x46>
 801f86c:	6825      	ldr	r5, [r4, #0]
 801f86e:	1961      	adds	r1, r4, r5
 801f870:	428b      	cmp	r3, r1
 801f872:	bf01      	itttt	eq
 801f874:	6819      	ldreq	r1, [r3, #0]
 801f876:	685b      	ldreq	r3, [r3, #4]
 801f878:	1949      	addeq	r1, r1, r5
 801f87a:	6021      	streq	r1, [r4, #0]
 801f87c:	e7ed      	b.n	801f85a <_free_r+0x22>
 801f87e:	461a      	mov	r2, r3
 801f880:	685b      	ldr	r3, [r3, #4]
 801f882:	b10b      	cbz	r3, 801f888 <_free_r+0x50>
 801f884:	42a3      	cmp	r3, r4
 801f886:	d9fa      	bls.n	801f87e <_free_r+0x46>
 801f888:	6811      	ldr	r1, [r2, #0]
 801f88a:	1855      	adds	r5, r2, r1
 801f88c:	42a5      	cmp	r5, r4
 801f88e:	d10b      	bne.n	801f8a8 <_free_r+0x70>
 801f890:	6824      	ldr	r4, [r4, #0]
 801f892:	4421      	add	r1, r4
 801f894:	1854      	adds	r4, r2, r1
 801f896:	42a3      	cmp	r3, r4
 801f898:	6011      	str	r1, [r2, #0]
 801f89a:	d1e0      	bne.n	801f85e <_free_r+0x26>
 801f89c:	681c      	ldr	r4, [r3, #0]
 801f89e:	685b      	ldr	r3, [r3, #4]
 801f8a0:	6053      	str	r3, [r2, #4]
 801f8a2:	440c      	add	r4, r1
 801f8a4:	6014      	str	r4, [r2, #0]
 801f8a6:	e7da      	b.n	801f85e <_free_r+0x26>
 801f8a8:	d902      	bls.n	801f8b0 <_free_r+0x78>
 801f8aa:	230c      	movs	r3, #12
 801f8ac:	6003      	str	r3, [r0, #0]
 801f8ae:	e7d6      	b.n	801f85e <_free_r+0x26>
 801f8b0:	6825      	ldr	r5, [r4, #0]
 801f8b2:	1961      	adds	r1, r4, r5
 801f8b4:	428b      	cmp	r3, r1
 801f8b6:	bf04      	itt	eq
 801f8b8:	6819      	ldreq	r1, [r3, #0]
 801f8ba:	685b      	ldreq	r3, [r3, #4]
 801f8bc:	6063      	str	r3, [r4, #4]
 801f8be:	bf04      	itt	eq
 801f8c0:	1949      	addeq	r1, r1, r5
 801f8c2:	6021      	streq	r1, [r4, #0]
 801f8c4:	6054      	str	r4, [r2, #4]
 801f8c6:	e7ca      	b.n	801f85e <_free_r+0x26>
 801f8c8:	b003      	add	sp, #12
 801f8ca:	bd30      	pop	{r4, r5, pc}
 801f8cc:	2400a8c4 	.word	0x2400a8c4

0801f8d0 <malloc>:
 801f8d0:	4b02      	ldr	r3, [pc, #8]	; (801f8dc <malloc+0xc>)
 801f8d2:	4601      	mov	r1, r0
 801f8d4:	6818      	ldr	r0, [r3, #0]
 801f8d6:	f000 b823 	b.w	801f920 <_malloc_r>
 801f8da:	bf00      	nop
 801f8dc:	2400006c 	.word	0x2400006c

0801f8e0 <sbrk_aligned>:
 801f8e0:	b570      	push	{r4, r5, r6, lr}
 801f8e2:	4e0e      	ldr	r6, [pc, #56]	; (801f91c <sbrk_aligned+0x3c>)
 801f8e4:	460c      	mov	r4, r1
 801f8e6:	6831      	ldr	r1, [r6, #0]
 801f8e8:	4605      	mov	r5, r0
 801f8ea:	b911      	cbnz	r1, 801f8f2 <sbrk_aligned+0x12>
 801f8ec:	f000 fea8 	bl	8020640 <_sbrk_r>
 801f8f0:	6030      	str	r0, [r6, #0]
 801f8f2:	4621      	mov	r1, r4
 801f8f4:	4628      	mov	r0, r5
 801f8f6:	f000 fea3 	bl	8020640 <_sbrk_r>
 801f8fa:	1c43      	adds	r3, r0, #1
 801f8fc:	d00a      	beq.n	801f914 <sbrk_aligned+0x34>
 801f8fe:	1cc4      	adds	r4, r0, #3
 801f900:	f024 0403 	bic.w	r4, r4, #3
 801f904:	42a0      	cmp	r0, r4
 801f906:	d007      	beq.n	801f918 <sbrk_aligned+0x38>
 801f908:	1a21      	subs	r1, r4, r0
 801f90a:	4628      	mov	r0, r5
 801f90c:	f000 fe98 	bl	8020640 <_sbrk_r>
 801f910:	3001      	adds	r0, #1
 801f912:	d101      	bne.n	801f918 <sbrk_aligned+0x38>
 801f914:	f04f 34ff 	mov.w	r4, #4294967295
 801f918:	4620      	mov	r0, r4
 801f91a:	bd70      	pop	{r4, r5, r6, pc}
 801f91c:	2400a8c8 	.word	0x2400a8c8

0801f920 <_malloc_r>:
 801f920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f924:	1ccd      	adds	r5, r1, #3
 801f926:	f025 0503 	bic.w	r5, r5, #3
 801f92a:	3508      	adds	r5, #8
 801f92c:	2d0c      	cmp	r5, #12
 801f92e:	bf38      	it	cc
 801f930:	250c      	movcc	r5, #12
 801f932:	2d00      	cmp	r5, #0
 801f934:	4607      	mov	r7, r0
 801f936:	db01      	blt.n	801f93c <_malloc_r+0x1c>
 801f938:	42a9      	cmp	r1, r5
 801f93a:	d905      	bls.n	801f948 <_malloc_r+0x28>
 801f93c:	230c      	movs	r3, #12
 801f93e:	603b      	str	r3, [r7, #0]
 801f940:	2600      	movs	r6, #0
 801f942:	4630      	mov	r0, r6
 801f944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f948:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801fa1c <_malloc_r+0xfc>
 801f94c:	f000 f868 	bl	801fa20 <__malloc_lock>
 801f950:	f8d8 3000 	ldr.w	r3, [r8]
 801f954:	461c      	mov	r4, r3
 801f956:	bb5c      	cbnz	r4, 801f9b0 <_malloc_r+0x90>
 801f958:	4629      	mov	r1, r5
 801f95a:	4638      	mov	r0, r7
 801f95c:	f7ff ffc0 	bl	801f8e0 <sbrk_aligned>
 801f960:	1c43      	adds	r3, r0, #1
 801f962:	4604      	mov	r4, r0
 801f964:	d155      	bne.n	801fa12 <_malloc_r+0xf2>
 801f966:	f8d8 4000 	ldr.w	r4, [r8]
 801f96a:	4626      	mov	r6, r4
 801f96c:	2e00      	cmp	r6, #0
 801f96e:	d145      	bne.n	801f9fc <_malloc_r+0xdc>
 801f970:	2c00      	cmp	r4, #0
 801f972:	d048      	beq.n	801fa06 <_malloc_r+0xe6>
 801f974:	6823      	ldr	r3, [r4, #0]
 801f976:	4631      	mov	r1, r6
 801f978:	4638      	mov	r0, r7
 801f97a:	eb04 0903 	add.w	r9, r4, r3
 801f97e:	f000 fe5f 	bl	8020640 <_sbrk_r>
 801f982:	4581      	cmp	r9, r0
 801f984:	d13f      	bne.n	801fa06 <_malloc_r+0xe6>
 801f986:	6821      	ldr	r1, [r4, #0]
 801f988:	1a6d      	subs	r5, r5, r1
 801f98a:	4629      	mov	r1, r5
 801f98c:	4638      	mov	r0, r7
 801f98e:	f7ff ffa7 	bl	801f8e0 <sbrk_aligned>
 801f992:	3001      	adds	r0, #1
 801f994:	d037      	beq.n	801fa06 <_malloc_r+0xe6>
 801f996:	6823      	ldr	r3, [r4, #0]
 801f998:	442b      	add	r3, r5
 801f99a:	6023      	str	r3, [r4, #0]
 801f99c:	f8d8 3000 	ldr.w	r3, [r8]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d038      	beq.n	801fa16 <_malloc_r+0xf6>
 801f9a4:	685a      	ldr	r2, [r3, #4]
 801f9a6:	42a2      	cmp	r2, r4
 801f9a8:	d12b      	bne.n	801fa02 <_malloc_r+0xe2>
 801f9aa:	2200      	movs	r2, #0
 801f9ac:	605a      	str	r2, [r3, #4]
 801f9ae:	e00f      	b.n	801f9d0 <_malloc_r+0xb0>
 801f9b0:	6822      	ldr	r2, [r4, #0]
 801f9b2:	1b52      	subs	r2, r2, r5
 801f9b4:	d41f      	bmi.n	801f9f6 <_malloc_r+0xd6>
 801f9b6:	2a0b      	cmp	r2, #11
 801f9b8:	d917      	bls.n	801f9ea <_malloc_r+0xca>
 801f9ba:	1961      	adds	r1, r4, r5
 801f9bc:	42a3      	cmp	r3, r4
 801f9be:	6025      	str	r5, [r4, #0]
 801f9c0:	bf18      	it	ne
 801f9c2:	6059      	strne	r1, [r3, #4]
 801f9c4:	6863      	ldr	r3, [r4, #4]
 801f9c6:	bf08      	it	eq
 801f9c8:	f8c8 1000 	streq.w	r1, [r8]
 801f9cc:	5162      	str	r2, [r4, r5]
 801f9ce:	604b      	str	r3, [r1, #4]
 801f9d0:	4638      	mov	r0, r7
 801f9d2:	f104 060b 	add.w	r6, r4, #11
 801f9d6:	f000 f829 	bl	801fa2c <__malloc_unlock>
 801f9da:	f026 0607 	bic.w	r6, r6, #7
 801f9de:	1d23      	adds	r3, r4, #4
 801f9e0:	1af2      	subs	r2, r6, r3
 801f9e2:	d0ae      	beq.n	801f942 <_malloc_r+0x22>
 801f9e4:	1b9b      	subs	r3, r3, r6
 801f9e6:	50a3      	str	r3, [r4, r2]
 801f9e8:	e7ab      	b.n	801f942 <_malloc_r+0x22>
 801f9ea:	42a3      	cmp	r3, r4
 801f9ec:	6862      	ldr	r2, [r4, #4]
 801f9ee:	d1dd      	bne.n	801f9ac <_malloc_r+0x8c>
 801f9f0:	f8c8 2000 	str.w	r2, [r8]
 801f9f4:	e7ec      	b.n	801f9d0 <_malloc_r+0xb0>
 801f9f6:	4623      	mov	r3, r4
 801f9f8:	6864      	ldr	r4, [r4, #4]
 801f9fa:	e7ac      	b.n	801f956 <_malloc_r+0x36>
 801f9fc:	4634      	mov	r4, r6
 801f9fe:	6876      	ldr	r6, [r6, #4]
 801fa00:	e7b4      	b.n	801f96c <_malloc_r+0x4c>
 801fa02:	4613      	mov	r3, r2
 801fa04:	e7cc      	b.n	801f9a0 <_malloc_r+0x80>
 801fa06:	230c      	movs	r3, #12
 801fa08:	603b      	str	r3, [r7, #0]
 801fa0a:	4638      	mov	r0, r7
 801fa0c:	f000 f80e 	bl	801fa2c <__malloc_unlock>
 801fa10:	e797      	b.n	801f942 <_malloc_r+0x22>
 801fa12:	6025      	str	r5, [r4, #0]
 801fa14:	e7dc      	b.n	801f9d0 <_malloc_r+0xb0>
 801fa16:	605b      	str	r3, [r3, #4]
 801fa18:	deff      	udf	#255	; 0xff
 801fa1a:	bf00      	nop
 801fa1c:	2400a8c4 	.word	0x2400a8c4

0801fa20 <__malloc_lock>:
 801fa20:	4801      	ldr	r0, [pc, #4]	; (801fa28 <__malloc_lock+0x8>)
 801fa22:	f7ff b904 	b.w	801ec2e <__retarget_lock_acquire_recursive>
 801fa26:	bf00      	nop
 801fa28:	2400a8c0 	.word	0x2400a8c0

0801fa2c <__malloc_unlock>:
 801fa2c:	4801      	ldr	r0, [pc, #4]	; (801fa34 <__malloc_unlock+0x8>)
 801fa2e:	f7ff b8ff 	b.w	801ec30 <__retarget_lock_release_recursive>
 801fa32:	bf00      	nop
 801fa34:	2400a8c0 	.word	0x2400a8c0

0801fa38 <_Balloc>:
 801fa38:	b570      	push	{r4, r5, r6, lr}
 801fa3a:	69c6      	ldr	r6, [r0, #28]
 801fa3c:	4604      	mov	r4, r0
 801fa3e:	460d      	mov	r5, r1
 801fa40:	b976      	cbnz	r6, 801fa60 <_Balloc+0x28>
 801fa42:	2010      	movs	r0, #16
 801fa44:	f7ff ff44 	bl	801f8d0 <malloc>
 801fa48:	4602      	mov	r2, r0
 801fa4a:	61e0      	str	r0, [r4, #28]
 801fa4c:	b920      	cbnz	r0, 801fa58 <_Balloc+0x20>
 801fa4e:	4b18      	ldr	r3, [pc, #96]	; (801fab0 <_Balloc+0x78>)
 801fa50:	4818      	ldr	r0, [pc, #96]	; (801fab4 <_Balloc+0x7c>)
 801fa52:	216b      	movs	r1, #107	; 0x6b
 801fa54:	f000 fe04 	bl	8020660 <__assert_func>
 801fa58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fa5c:	6006      	str	r6, [r0, #0]
 801fa5e:	60c6      	str	r6, [r0, #12]
 801fa60:	69e6      	ldr	r6, [r4, #28]
 801fa62:	68f3      	ldr	r3, [r6, #12]
 801fa64:	b183      	cbz	r3, 801fa88 <_Balloc+0x50>
 801fa66:	69e3      	ldr	r3, [r4, #28]
 801fa68:	68db      	ldr	r3, [r3, #12]
 801fa6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fa6e:	b9b8      	cbnz	r0, 801faa0 <_Balloc+0x68>
 801fa70:	2101      	movs	r1, #1
 801fa72:	fa01 f605 	lsl.w	r6, r1, r5
 801fa76:	1d72      	adds	r2, r6, #5
 801fa78:	0092      	lsls	r2, r2, #2
 801fa7a:	4620      	mov	r0, r4
 801fa7c:	f000 fe0e 	bl	802069c <_calloc_r>
 801fa80:	b160      	cbz	r0, 801fa9c <_Balloc+0x64>
 801fa82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fa86:	e00e      	b.n	801faa6 <_Balloc+0x6e>
 801fa88:	2221      	movs	r2, #33	; 0x21
 801fa8a:	2104      	movs	r1, #4
 801fa8c:	4620      	mov	r0, r4
 801fa8e:	f000 fe05 	bl	802069c <_calloc_r>
 801fa92:	69e3      	ldr	r3, [r4, #28]
 801fa94:	60f0      	str	r0, [r6, #12]
 801fa96:	68db      	ldr	r3, [r3, #12]
 801fa98:	2b00      	cmp	r3, #0
 801fa9a:	d1e4      	bne.n	801fa66 <_Balloc+0x2e>
 801fa9c:	2000      	movs	r0, #0
 801fa9e:	bd70      	pop	{r4, r5, r6, pc}
 801faa0:	6802      	ldr	r2, [r0, #0]
 801faa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801faa6:	2300      	movs	r3, #0
 801faa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801faac:	e7f7      	b.n	801fa9e <_Balloc+0x66>
 801faae:	bf00      	nop
 801fab0:	08021121 	.word	0x08021121
 801fab4:	080211a1 	.word	0x080211a1

0801fab8 <_Bfree>:
 801fab8:	b570      	push	{r4, r5, r6, lr}
 801faba:	69c6      	ldr	r6, [r0, #28]
 801fabc:	4605      	mov	r5, r0
 801fabe:	460c      	mov	r4, r1
 801fac0:	b976      	cbnz	r6, 801fae0 <_Bfree+0x28>
 801fac2:	2010      	movs	r0, #16
 801fac4:	f7ff ff04 	bl	801f8d0 <malloc>
 801fac8:	4602      	mov	r2, r0
 801faca:	61e8      	str	r0, [r5, #28]
 801facc:	b920      	cbnz	r0, 801fad8 <_Bfree+0x20>
 801face:	4b09      	ldr	r3, [pc, #36]	; (801faf4 <_Bfree+0x3c>)
 801fad0:	4809      	ldr	r0, [pc, #36]	; (801faf8 <_Bfree+0x40>)
 801fad2:	218f      	movs	r1, #143	; 0x8f
 801fad4:	f000 fdc4 	bl	8020660 <__assert_func>
 801fad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fadc:	6006      	str	r6, [r0, #0]
 801fade:	60c6      	str	r6, [r0, #12]
 801fae0:	b13c      	cbz	r4, 801faf2 <_Bfree+0x3a>
 801fae2:	69eb      	ldr	r3, [r5, #28]
 801fae4:	6862      	ldr	r2, [r4, #4]
 801fae6:	68db      	ldr	r3, [r3, #12]
 801fae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801faec:	6021      	str	r1, [r4, #0]
 801faee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801faf2:	bd70      	pop	{r4, r5, r6, pc}
 801faf4:	08021121 	.word	0x08021121
 801faf8:	080211a1 	.word	0x080211a1

0801fafc <__multadd>:
 801fafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb00:	690d      	ldr	r5, [r1, #16]
 801fb02:	4607      	mov	r7, r0
 801fb04:	460c      	mov	r4, r1
 801fb06:	461e      	mov	r6, r3
 801fb08:	f101 0c14 	add.w	ip, r1, #20
 801fb0c:	2000      	movs	r0, #0
 801fb0e:	f8dc 3000 	ldr.w	r3, [ip]
 801fb12:	b299      	uxth	r1, r3
 801fb14:	fb02 6101 	mla	r1, r2, r1, r6
 801fb18:	0c1e      	lsrs	r6, r3, #16
 801fb1a:	0c0b      	lsrs	r3, r1, #16
 801fb1c:	fb02 3306 	mla	r3, r2, r6, r3
 801fb20:	b289      	uxth	r1, r1
 801fb22:	3001      	adds	r0, #1
 801fb24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fb28:	4285      	cmp	r5, r0
 801fb2a:	f84c 1b04 	str.w	r1, [ip], #4
 801fb2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fb32:	dcec      	bgt.n	801fb0e <__multadd+0x12>
 801fb34:	b30e      	cbz	r6, 801fb7a <__multadd+0x7e>
 801fb36:	68a3      	ldr	r3, [r4, #8]
 801fb38:	42ab      	cmp	r3, r5
 801fb3a:	dc19      	bgt.n	801fb70 <__multadd+0x74>
 801fb3c:	6861      	ldr	r1, [r4, #4]
 801fb3e:	4638      	mov	r0, r7
 801fb40:	3101      	adds	r1, #1
 801fb42:	f7ff ff79 	bl	801fa38 <_Balloc>
 801fb46:	4680      	mov	r8, r0
 801fb48:	b928      	cbnz	r0, 801fb56 <__multadd+0x5a>
 801fb4a:	4602      	mov	r2, r0
 801fb4c:	4b0c      	ldr	r3, [pc, #48]	; (801fb80 <__multadd+0x84>)
 801fb4e:	480d      	ldr	r0, [pc, #52]	; (801fb84 <__multadd+0x88>)
 801fb50:	21ba      	movs	r1, #186	; 0xba
 801fb52:	f000 fd85 	bl	8020660 <__assert_func>
 801fb56:	6922      	ldr	r2, [r4, #16]
 801fb58:	3202      	adds	r2, #2
 801fb5a:	f104 010c 	add.w	r1, r4, #12
 801fb5e:	0092      	lsls	r2, r2, #2
 801fb60:	300c      	adds	r0, #12
 801fb62:	f7ff f866 	bl	801ec32 <memcpy>
 801fb66:	4621      	mov	r1, r4
 801fb68:	4638      	mov	r0, r7
 801fb6a:	f7ff ffa5 	bl	801fab8 <_Bfree>
 801fb6e:	4644      	mov	r4, r8
 801fb70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fb74:	3501      	adds	r5, #1
 801fb76:	615e      	str	r6, [r3, #20]
 801fb78:	6125      	str	r5, [r4, #16]
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb80:	08021190 	.word	0x08021190
 801fb84:	080211a1 	.word	0x080211a1

0801fb88 <__hi0bits>:
 801fb88:	0c03      	lsrs	r3, r0, #16
 801fb8a:	041b      	lsls	r3, r3, #16
 801fb8c:	b9d3      	cbnz	r3, 801fbc4 <__hi0bits+0x3c>
 801fb8e:	0400      	lsls	r0, r0, #16
 801fb90:	2310      	movs	r3, #16
 801fb92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fb96:	bf04      	itt	eq
 801fb98:	0200      	lsleq	r0, r0, #8
 801fb9a:	3308      	addeq	r3, #8
 801fb9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fba0:	bf04      	itt	eq
 801fba2:	0100      	lsleq	r0, r0, #4
 801fba4:	3304      	addeq	r3, #4
 801fba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fbaa:	bf04      	itt	eq
 801fbac:	0080      	lsleq	r0, r0, #2
 801fbae:	3302      	addeq	r3, #2
 801fbb0:	2800      	cmp	r0, #0
 801fbb2:	db05      	blt.n	801fbc0 <__hi0bits+0x38>
 801fbb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fbb8:	f103 0301 	add.w	r3, r3, #1
 801fbbc:	bf08      	it	eq
 801fbbe:	2320      	moveq	r3, #32
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	4770      	bx	lr
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	e7e4      	b.n	801fb92 <__hi0bits+0xa>

0801fbc8 <__lo0bits>:
 801fbc8:	6803      	ldr	r3, [r0, #0]
 801fbca:	f013 0207 	ands.w	r2, r3, #7
 801fbce:	d00c      	beq.n	801fbea <__lo0bits+0x22>
 801fbd0:	07d9      	lsls	r1, r3, #31
 801fbd2:	d422      	bmi.n	801fc1a <__lo0bits+0x52>
 801fbd4:	079a      	lsls	r2, r3, #30
 801fbd6:	bf49      	itett	mi
 801fbd8:	085b      	lsrmi	r3, r3, #1
 801fbda:	089b      	lsrpl	r3, r3, #2
 801fbdc:	6003      	strmi	r3, [r0, #0]
 801fbde:	2201      	movmi	r2, #1
 801fbe0:	bf5c      	itt	pl
 801fbe2:	6003      	strpl	r3, [r0, #0]
 801fbe4:	2202      	movpl	r2, #2
 801fbe6:	4610      	mov	r0, r2
 801fbe8:	4770      	bx	lr
 801fbea:	b299      	uxth	r1, r3
 801fbec:	b909      	cbnz	r1, 801fbf2 <__lo0bits+0x2a>
 801fbee:	0c1b      	lsrs	r3, r3, #16
 801fbf0:	2210      	movs	r2, #16
 801fbf2:	b2d9      	uxtb	r1, r3
 801fbf4:	b909      	cbnz	r1, 801fbfa <__lo0bits+0x32>
 801fbf6:	3208      	adds	r2, #8
 801fbf8:	0a1b      	lsrs	r3, r3, #8
 801fbfa:	0719      	lsls	r1, r3, #28
 801fbfc:	bf04      	itt	eq
 801fbfe:	091b      	lsreq	r3, r3, #4
 801fc00:	3204      	addeq	r2, #4
 801fc02:	0799      	lsls	r1, r3, #30
 801fc04:	bf04      	itt	eq
 801fc06:	089b      	lsreq	r3, r3, #2
 801fc08:	3202      	addeq	r2, #2
 801fc0a:	07d9      	lsls	r1, r3, #31
 801fc0c:	d403      	bmi.n	801fc16 <__lo0bits+0x4e>
 801fc0e:	085b      	lsrs	r3, r3, #1
 801fc10:	f102 0201 	add.w	r2, r2, #1
 801fc14:	d003      	beq.n	801fc1e <__lo0bits+0x56>
 801fc16:	6003      	str	r3, [r0, #0]
 801fc18:	e7e5      	b.n	801fbe6 <__lo0bits+0x1e>
 801fc1a:	2200      	movs	r2, #0
 801fc1c:	e7e3      	b.n	801fbe6 <__lo0bits+0x1e>
 801fc1e:	2220      	movs	r2, #32
 801fc20:	e7e1      	b.n	801fbe6 <__lo0bits+0x1e>
	...

0801fc24 <__i2b>:
 801fc24:	b510      	push	{r4, lr}
 801fc26:	460c      	mov	r4, r1
 801fc28:	2101      	movs	r1, #1
 801fc2a:	f7ff ff05 	bl	801fa38 <_Balloc>
 801fc2e:	4602      	mov	r2, r0
 801fc30:	b928      	cbnz	r0, 801fc3e <__i2b+0x1a>
 801fc32:	4b05      	ldr	r3, [pc, #20]	; (801fc48 <__i2b+0x24>)
 801fc34:	4805      	ldr	r0, [pc, #20]	; (801fc4c <__i2b+0x28>)
 801fc36:	f240 1145 	movw	r1, #325	; 0x145
 801fc3a:	f000 fd11 	bl	8020660 <__assert_func>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	6144      	str	r4, [r0, #20]
 801fc42:	6103      	str	r3, [r0, #16]
 801fc44:	bd10      	pop	{r4, pc}
 801fc46:	bf00      	nop
 801fc48:	08021190 	.word	0x08021190
 801fc4c:	080211a1 	.word	0x080211a1

0801fc50 <__multiply>:
 801fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc54:	4691      	mov	r9, r2
 801fc56:	690a      	ldr	r2, [r1, #16]
 801fc58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fc5c:	429a      	cmp	r2, r3
 801fc5e:	bfb8      	it	lt
 801fc60:	460b      	movlt	r3, r1
 801fc62:	460c      	mov	r4, r1
 801fc64:	bfbc      	itt	lt
 801fc66:	464c      	movlt	r4, r9
 801fc68:	4699      	movlt	r9, r3
 801fc6a:	6927      	ldr	r7, [r4, #16]
 801fc6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801fc70:	68a3      	ldr	r3, [r4, #8]
 801fc72:	6861      	ldr	r1, [r4, #4]
 801fc74:	eb07 060a 	add.w	r6, r7, sl
 801fc78:	42b3      	cmp	r3, r6
 801fc7a:	b085      	sub	sp, #20
 801fc7c:	bfb8      	it	lt
 801fc7e:	3101      	addlt	r1, #1
 801fc80:	f7ff feda 	bl	801fa38 <_Balloc>
 801fc84:	b930      	cbnz	r0, 801fc94 <__multiply+0x44>
 801fc86:	4602      	mov	r2, r0
 801fc88:	4b44      	ldr	r3, [pc, #272]	; (801fd9c <__multiply+0x14c>)
 801fc8a:	4845      	ldr	r0, [pc, #276]	; (801fda0 <__multiply+0x150>)
 801fc8c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801fc90:	f000 fce6 	bl	8020660 <__assert_func>
 801fc94:	f100 0514 	add.w	r5, r0, #20
 801fc98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fc9c:	462b      	mov	r3, r5
 801fc9e:	2200      	movs	r2, #0
 801fca0:	4543      	cmp	r3, r8
 801fca2:	d321      	bcc.n	801fce8 <__multiply+0x98>
 801fca4:	f104 0314 	add.w	r3, r4, #20
 801fca8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fcac:	f109 0314 	add.w	r3, r9, #20
 801fcb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801fcb4:	9202      	str	r2, [sp, #8]
 801fcb6:	1b3a      	subs	r2, r7, r4
 801fcb8:	3a15      	subs	r2, #21
 801fcba:	f022 0203 	bic.w	r2, r2, #3
 801fcbe:	3204      	adds	r2, #4
 801fcc0:	f104 0115 	add.w	r1, r4, #21
 801fcc4:	428f      	cmp	r7, r1
 801fcc6:	bf38      	it	cc
 801fcc8:	2204      	movcc	r2, #4
 801fcca:	9201      	str	r2, [sp, #4]
 801fccc:	9a02      	ldr	r2, [sp, #8]
 801fcce:	9303      	str	r3, [sp, #12]
 801fcd0:	429a      	cmp	r2, r3
 801fcd2:	d80c      	bhi.n	801fcee <__multiply+0x9e>
 801fcd4:	2e00      	cmp	r6, #0
 801fcd6:	dd03      	ble.n	801fce0 <__multiply+0x90>
 801fcd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d05b      	beq.n	801fd98 <__multiply+0x148>
 801fce0:	6106      	str	r6, [r0, #16]
 801fce2:	b005      	add	sp, #20
 801fce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fce8:	f843 2b04 	str.w	r2, [r3], #4
 801fcec:	e7d8      	b.n	801fca0 <__multiply+0x50>
 801fcee:	f8b3 a000 	ldrh.w	sl, [r3]
 801fcf2:	f1ba 0f00 	cmp.w	sl, #0
 801fcf6:	d024      	beq.n	801fd42 <__multiply+0xf2>
 801fcf8:	f104 0e14 	add.w	lr, r4, #20
 801fcfc:	46a9      	mov	r9, r5
 801fcfe:	f04f 0c00 	mov.w	ip, #0
 801fd02:	f85e 2b04 	ldr.w	r2, [lr], #4
 801fd06:	f8d9 1000 	ldr.w	r1, [r9]
 801fd0a:	fa1f fb82 	uxth.w	fp, r2
 801fd0e:	b289      	uxth	r1, r1
 801fd10:	fb0a 110b 	mla	r1, sl, fp, r1
 801fd14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801fd18:	f8d9 2000 	ldr.w	r2, [r9]
 801fd1c:	4461      	add	r1, ip
 801fd1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801fd22:	fb0a c20b 	mla	r2, sl, fp, ip
 801fd26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801fd2a:	b289      	uxth	r1, r1
 801fd2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801fd30:	4577      	cmp	r7, lr
 801fd32:	f849 1b04 	str.w	r1, [r9], #4
 801fd36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801fd3a:	d8e2      	bhi.n	801fd02 <__multiply+0xb2>
 801fd3c:	9a01      	ldr	r2, [sp, #4]
 801fd3e:	f845 c002 	str.w	ip, [r5, r2]
 801fd42:	9a03      	ldr	r2, [sp, #12]
 801fd44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fd48:	3304      	adds	r3, #4
 801fd4a:	f1b9 0f00 	cmp.w	r9, #0
 801fd4e:	d021      	beq.n	801fd94 <__multiply+0x144>
 801fd50:	6829      	ldr	r1, [r5, #0]
 801fd52:	f104 0c14 	add.w	ip, r4, #20
 801fd56:	46ae      	mov	lr, r5
 801fd58:	f04f 0a00 	mov.w	sl, #0
 801fd5c:	f8bc b000 	ldrh.w	fp, [ip]
 801fd60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801fd64:	fb09 220b 	mla	r2, r9, fp, r2
 801fd68:	4452      	add	r2, sl
 801fd6a:	b289      	uxth	r1, r1
 801fd6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801fd70:	f84e 1b04 	str.w	r1, [lr], #4
 801fd74:	f85c 1b04 	ldr.w	r1, [ip], #4
 801fd78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801fd7c:	f8be 1000 	ldrh.w	r1, [lr]
 801fd80:	fb09 110a 	mla	r1, r9, sl, r1
 801fd84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801fd88:	4567      	cmp	r7, ip
 801fd8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801fd8e:	d8e5      	bhi.n	801fd5c <__multiply+0x10c>
 801fd90:	9a01      	ldr	r2, [sp, #4]
 801fd92:	50a9      	str	r1, [r5, r2]
 801fd94:	3504      	adds	r5, #4
 801fd96:	e799      	b.n	801fccc <__multiply+0x7c>
 801fd98:	3e01      	subs	r6, #1
 801fd9a:	e79b      	b.n	801fcd4 <__multiply+0x84>
 801fd9c:	08021190 	.word	0x08021190
 801fda0:	080211a1 	.word	0x080211a1

0801fda4 <__pow5mult>:
 801fda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fda8:	4615      	mov	r5, r2
 801fdaa:	f012 0203 	ands.w	r2, r2, #3
 801fdae:	4606      	mov	r6, r0
 801fdb0:	460f      	mov	r7, r1
 801fdb2:	d007      	beq.n	801fdc4 <__pow5mult+0x20>
 801fdb4:	4c25      	ldr	r4, [pc, #148]	; (801fe4c <__pow5mult+0xa8>)
 801fdb6:	3a01      	subs	r2, #1
 801fdb8:	2300      	movs	r3, #0
 801fdba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fdbe:	f7ff fe9d 	bl	801fafc <__multadd>
 801fdc2:	4607      	mov	r7, r0
 801fdc4:	10ad      	asrs	r5, r5, #2
 801fdc6:	d03d      	beq.n	801fe44 <__pow5mult+0xa0>
 801fdc8:	69f4      	ldr	r4, [r6, #28]
 801fdca:	b97c      	cbnz	r4, 801fdec <__pow5mult+0x48>
 801fdcc:	2010      	movs	r0, #16
 801fdce:	f7ff fd7f 	bl	801f8d0 <malloc>
 801fdd2:	4602      	mov	r2, r0
 801fdd4:	61f0      	str	r0, [r6, #28]
 801fdd6:	b928      	cbnz	r0, 801fde4 <__pow5mult+0x40>
 801fdd8:	4b1d      	ldr	r3, [pc, #116]	; (801fe50 <__pow5mult+0xac>)
 801fdda:	481e      	ldr	r0, [pc, #120]	; (801fe54 <__pow5mult+0xb0>)
 801fddc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801fde0:	f000 fc3e 	bl	8020660 <__assert_func>
 801fde4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fde8:	6004      	str	r4, [r0, #0]
 801fdea:	60c4      	str	r4, [r0, #12]
 801fdec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801fdf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fdf4:	b94c      	cbnz	r4, 801fe0a <__pow5mult+0x66>
 801fdf6:	f240 2171 	movw	r1, #625	; 0x271
 801fdfa:	4630      	mov	r0, r6
 801fdfc:	f7ff ff12 	bl	801fc24 <__i2b>
 801fe00:	2300      	movs	r3, #0
 801fe02:	f8c8 0008 	str.w	r0, [r8, #8]
 801fe06:	4604      	mov	r4, r0
 801fe08:	6003      	str	r3, [r0, #0]
 801fe0a:	f04f 0900 	mov.w	r9, #0
 801fe0e:	07eb      	lsls	r3, r5, #31
 801fe10:	d50a      	bpl.n	801fe28 <__pow5mult+0x84>
 801fe12:	4639      	mov	r1, r7
 801fe14:	4622      	mov	r2, r4
 801fe16:	4630      	mov	r0, r6
 801fe18:	f7ff ff1a 	bl	801fc50 <__multiply>
 801fe1c:	4639      	mov	r1, r7
 801fe1e:	4680      	mov	r8, r0
 801fe20:	4630      	mov	r0, r6
 801fe22:	f7ff fe49 	bl	801fab8 <_Bfree>
 801fe26:	4647      	mov	r7, r8
 801fe28:	106d      	asrs	r5, r5, #1
 801fe2a:	d00b      	beq.n	801fe44 <__pow5mult+0xa0>
 801fe2c:	6820      	ldr	r0, [r4, #0]
 801fe2e:	b938      	cbnz	r0, 801fe40 <__pow5mult+0x9c>
 801fe30:	4622      	mov	r2, r4
 801fe32:	4621      	mov	r1, r4
 801fe34:	4630      	mov	r0, r6
 801fe36:	f7ff ff0b 	bl	801fc50 <__multiply>
 801fe3a:	6020      	str	r0, [r4, #0]
 801fe3c:	f8c0 9000 	str.w	r9, [r0]
 801fe40:	4604      	mov	r4, r0
 801fe42:	e7e4      	b.n	801fe0e <__pow5mult+0x6a>
 801fe44:	4638      	mov	r0, r7
 801fe46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe4a:	bf00      	nop
 801fe4c:	080212f0 	.word	0x080212f0
 801fe50:	08021121 	.word	0x08021121
 801fe54:	080211a1 	.word	0x080211a1

0801fe58 <__lshift>:
 801fe58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe5c:	460c      	mov	r4, r1
 801fe5e:	6849      	ldr	r1, [r1, #4]
 801fe60:	6923      	ldr	r3, [r4, #16]
 801fe62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fe66:	68a3      	ldr	r3, [r4, #8]
 801fe68:	4607      	mov	r7, r0
 801fe6a:	4691      	mov	r9, r2
 801fe6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fe70:	f108 0601 	add.w	r6, r8, #1
 801fe74:	42b3      	cmp	r3, r6
 801fe76:	db0b      	blt.n	801fe90 <__lshift+0x38>
 801fe78:	4638      	mov	r0, r7
 801fe7a:	f7ff fddd 	bl	801fa38 <_Balloc>
 801fe7e:	4605      	mov	r5, r0
 801fe80:	b948      	cbnz	r0, 801fe96 <__lshift+0x3e>
 801fe82:	4602      	mov	r2, r0
 801fe84:	4b28      	ldr	r3, [pc, #160]	; (801ff28 <__lshift+0xd0>)
 801fe86:	4829      	ldr	r0, [pc, #164]	; (801ff2c <__lshift+0xd4>)
 801fe88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801fe8c:	f000 fbe8 	bl	8020660 <__assert_func>
 801fe90:	3101      	adds	r1, #1
 801fe92:	005b      	lsls	r3, r3, #1
 801fe94:	e7ee      	b.n	801fe74 <__lshift+0x1c>
 801fe96:	2300      	movs	r3, #0
 801fe98:	f100 0114 	add.w	r1, r0, #20
 801fe9c:	f100 0210 	add.w	r2, r0, #16
 801fea0:	4618      	mov	r0, r3
 801fea2:	4553      	cmp	r3, sl
 801fea4:	db33      	blt.n	801ff0e <__lshift+0xb6>
 801fea6:	6920      	ldr	r0, [r4, #16]
 801fea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801feac:	f104 0314 	add.w	r3, r4, #20
 801feb0:	f019 091f 	ands.w	r9, r9, #31
 801feb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801feb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801febc:	d02b      	beq.n	801ff16 <__lshift+0xbe>
 801febe:	f1c9 0e20 	rsb	lr, r9, #32
 801fec2:	468a      	mov	sl, r1
 801fec4:	2200      	movs	r2, #0
 801fec6:	6818      	ldr	r0, [r3, #0]
 801fec8:	fa00 f009 	lsl.w	r0, r0, r9
 801fecc:	4310      	orrs	r0, r2
 801fece:	f84a 0b04 	str.w	r0, [sl], #4
 801fed2:	f853 2b04 	ldr.w	r2, [r3], #4
 801fed6:	459c      	cmp	ip, r3
 801fed8:	fa22 f20e 	lsr.w	r2, r2, lr
 801fedc:	d8f3      	bhi.n	801fec6 <__lshift+0x6e>
 801fede:	ebac 0304 	sub.w	r3, ip, r4
 801fee2:	3b15      	subs	r3, #21
 801fee4:	f023 0303 	bic.w	r3, r3, #3
 801fee8:	3304      	adds	r3, #4
 801feea:	f104 0015 	add.w	r0, r4, #21
 801feee:	4584      	cmp	ip, r0
 801fef0:	bf38      	it	cc
 801fef2:	2304      	movcc	r3, #4
 801fef4:	50ca      	str	r2, [r1, r3]
 801fef6:	b10a      	cbz	r2, 801fefc <__lshift+0xa4>
 801fef8:	f108 0602 	add.w	r6, r8, #2
 801fefc:	3e01      	subs	r6, #1
 801fefe:	4638      	mov	r0, r7
 801ff00:	612e      	str	r6, [r5, #16]
 801ff02:	4621      	mov	r1, r4
 801ff04:	f7ff fdd8 	bl	801fab8 <_Bfree>
 801ff08:	4628      	mov	r0, r5
 801ff0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff0e:	f842 0f04 	str.w	r0, [r2, #4]!
 801ff12:	3301      	adds	r3, #1
 801ff14:	e7c5      	b.n	801fea2 <__lshift+0x4a>
 801ff16:	3904      	subs	r1, #4
 801ff18:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff1c:	f841 2f04 	str.w	r2, [r1, #4]!
 801ff20:	459c      	cmp	ip, r3
 801ff22:	d8f9      	bhi.n	801ff18 <__lshift+0xc0>
 801ff24:	e7ea      	b.n	801fefc <__lshift+0xa4>
 801ff26:	bf00      	nop
 801ff28:	08021190 	.word	0x08021190
 801ff2c:	080211a1 	.word	0x080211a1

0801ff30 <__mcmp>:
 801ff30:	b530      	push	{r4, r5, lr}
 801ff32:	6902      	ldr	r2, [r0, #16]
 801ff34:	690c      	ldr	r4, [r1, #16]
 801ff36:	1b12      	subs	r2, r2, r4
 801ff38:	d10e      	bne.n	801ff58 <__mcmp+0x28>
 801ff3a:	f100 0314 	add.w	r3, r0, #20
 801ff3e:	3114      	adds	r1, #20
 801ff40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ff44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ff48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ff4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ff50:	42a5      	cmp	r5, r4
 801ff52:	d003      	beq.n	801ff5c <__mcmp+0x2c>
 801ff54:	d305      	bcc.n	801ff62 <__mcmp+0x32>
 801ff56:	2201      	movs	r2, #1
 801ff58:	4610      	mov	r0, r2
 801ff5a:	bd30      	pop	{r4, r5, pc}
 801ff5c:	4283      	cmp	r3, r0
 801ff5e:	d3f3      	bcc.n	801ff48 <__mcmp+0x18>
 801ff60:	e7fa      	b.n	801ff58 <__mcmp+0x28>
 801ff62:	f04f 32ff 	mov.w	r2, #4294967295
 801ff66:	e7f7      	b.n	801ff58 <__mcmp+0x28>

0801ff68 <__mdiff>:
 801ff68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff6c:	460c      	mov	r4, r1
 801ff6e:	4606      	mov	r6, r0
 801ff70:	4611      	mov	r1, r2
 801ff72:	4620      	mov	r0, r4
 801ff74:	4690      	mov	r8, r2
 801ff76:	f7ff ffdb 	bl	801ff30 <__mcmp>
 801ff7a:	1e05      	subs	r5, r0, #0
 801ff7c:	d110      	bne.n	801ffa0 <__mdiff+0x38>
 801ff7e:	4629      	mov	r1, r5
 801ff80:	4630      	mov	r0, r6
 801ff82:	f7ff fd59 	bl	801fa38 <_Balloc>
 801ff86:	b930      	cbnz	r0, 801ff96 <__mdiff+0x2e>
 801ff88:	4b3a      	ldr	r3, [pc, #232]	; (8020074 <__mdiff+0x10c>)
 801ff8a:	4602      	mov	r2, r0
 801ff8c:	f240 2137 	movw	r1, #567	; 0x237
 801ff90:	4839      	ldr	r0, [pc, #228]	; (8020078 <__mdiff+0x110>)
 801ff92:	f000 fb65 	bl	8020660 <__assert_func>
 801ff96:	2301      	movs	r3, #1
 801ff98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ff9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffa0:	bfa4      	itt	ge
 801ffa2:	4643      	movge	r3, r8
 801ffa4:	46a0      	movge	r8, r4
 801ffa6:	4630      	mov	r0, r6
 801ffa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ffac:	bfa6      	itte	ge
 801ffae:	461c      	movge	r4, r3
 801ffb0:	2500      	movge	r5, #0
 801ffb2:	2501      	movlt	r5, #1
 801ffb4:	f7ff fd40 	bl	801fa38 <_Balloc>
 801ffb8:	b920      	cbnz	r0, 801ffc4 <__mdiff+0x5c>
 801ffba:	4b2e      	ldr	r3, [pc, #184]	; (8020074 <__mdiff+0x10c>)
 801ffbc:	4602      	mov	r2, r0
 801ffbe:	f240 2145 	movw	r1, #581	; 0x245
 801ffc2:	e7e5      	b.n	801ff90 <__mdiff+0x28>
 801ffc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ffc8:	6926      	ldr	r6, [r4, #16]
 801ffca:	60c5      	str	r5, [r0, #12]
 801ffcc:	f104 0914 	add.w	r9, r4, #20
 801ffd0:	f108 0514 	add.w	r5, r8, #20
 801ffd4:	f100 0e14 	add.w	lr, r0, #20
 801ffd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ffdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ffe0:	f108 0210 	add.w	r2, r8, #16
 801ffe4:	46f2      	mov	sl, lr
 801ffe6:	2100      	movs	r1, #0
 801ffe8:	f859 3b04 	ldr.w	r3, [r9], #4
 801ffec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fff0:	fa11 f88b 	uxtah	r8, r1, fp
 801fff4:	b299      	uxth	r1, r3
 801fff6:	0c1b      	lsrs	r3, r3, #16
 801fff8:	eba8 0801 	sub.w	r8, r8, r1
 801fffc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020000:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020004:	fa1f f888 	uxth.w	r8, r8
 8020008:	1419      	asrs	r1, r3, #16
 802000a:	454e      	cmp	r6, r9
 802000c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020010:	f84a 3b04 	str.w	r3, [sl], #4
 8020014:	d8e8      	bhi.n	801ffe8 <__mdiff+0x80>
 8020016:	1b33      	subs	r3, r6, r4
 8020018:	3b15      	subs	r3, #21
 802001a:	f023 0303 	bic.w	r3, r3, #3
 802001e:	3304      	adds	r3, #4
 8020020:	3415      	adds	r4, #21
 8020022:	42a6      	cmp	r6, r4
 8020024:	bf38      	it	cc
 8020026:	2304      	movcc	r3, #4
 8020028:	441d      	add	r5, r3
 802002a:	4473      	add	r3, lr
 802002c:	469e      	mov	lr, r3
 802002e:	462e      	mov	r6, r5
 8020030:	4566      	cmp	r6, ip
 8020032:	d30e      	bcc.n	8020052 <__mdiff+0xea>
 8020034:	f10c 0203 	add.w	r2, ip, #3
 8020038:	1b52      	subs	r2, r2, r5
 802003a:	f022 0203 	bic.w	r2, r2, #3
 802003e:	3d03      	subs	r5, #3
 8020040:	45ac      	cmp	ip, r5
 8020042:	bf38      	it	cc
 8020044:	2200      	movcc	r2, #0
 8020046:	4413      	add	r3, r2
 8020048:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802004c:	b17a      	cbz	r2, 802006e <__mdiff+0x106>
 802004e:	6107      	str	r7, [r0, #16]
 8020050:	e7a4      	b.n	801ff9c <__mdiff+0x34>
 8020052:	f856 8b04 	ldr.w	r8, [r6], #4
 8020056:	fa11 f288 	uxtah	r2, r1, r8
 802005a:	1414      	asrs	r4, r2, #16
 802005c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8020060:	b292      	uxth	r2, r2
 8020062:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8020066:	f84e 2b04 	str.w	r2, [lr], #4
 802006a:	1421      	asrs	r1, r4, #16
 802006c:	e7e0      	b.n	8020030 <__mdiff+0xc8>
 802006e:	3f01      	subs	r7, #1
 8020070:	e7ea      	b.n	8020048 <__mdiff+0xe0>
 8020072:	bf00      	nop
 8020074:	08021190 	.word	0x08021190
 8020078:	080211a1 	.word	0x080211a1

0802007c <__d2b>:
 802007c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020080:	460f      	mov	r7, r1
 8020082:	2101      	movs	r1, #1
 8020084:	ec59 8b10 	vmov	r8, r9, d0
 8020088:	4616      	mov	r6, r2
 802008a:	f7ff fcd5 	bl	801fa38 <_Balloc>
 802008e:	4604      	mov	r4, r0
 8020090:	b930      	cbnz	r0, 80200a0 <__d2b+0x24>
 8020092:	4602      	mov	r2, r0
 8020094:	4b24      	ldr	r3, [pc, #144]	; (8020128 <__d2b+0xac>)
 8020096:	4825      	ldr	r0, [pc, #148]	; (802012c <__d2b+0xb0>)
 8020098:	f240 310f 	movw	r1, #783	; 0x30f
 802009c:	f000 fae0 	bl	8020660 <__assert_func>
 80200a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80200a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80200a8:	bb2d      	cbnz	r5, 80200f6 <__d2b+0x7a>
 80200aa:	9301      	str	r3, [sp, #4]
 80200ac:	f1b8 0300 	subs.w	r3, r8, #0
 80200b0:	d026      	beq.n	8020100 <__d2b+0x84>
 80200b2:	4668      	mov	r0, sp
 80200b4:	9300      	str	r3, [sp, #0]
 80200b6:	f7ff fd87 	bl	801fbc8 <__lo0bits>
 80200ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80200be:	b1e8      	cbz	r0, 80200fc <__d2b+0x80>
 80200c0:	f1c0 0320 	rsb	r3, r0, #32
 80200c4:	fa02 f303 	lsl.w	r3, r2, r3
 80200c8:	430b      	orrs	r3, r1
 80200ca:	40c2      	lsrs	r2, r0
 80200cc:	6163      	str	r3, [r4, #20]
 80200ce:	9201      	str	r2, [sp, #4]
 80200d0:	9b01      	ldr	r3, [sp, #4]
 80200d2:	61a3      	str	r3, [r4, #24]
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	bf14      	ite	ne
 80200d8:	2202      	movne	r2, #2
 80200da:	2201      	moveq	r2, #1
 80200dc:	6122      	str	r2, [r4, #16]
 80200de:	b1bd      	cbz	r5, 8020110 <__d2b+0x94>
 80200e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80200e4:	4405      	add	r5, r0
 80200e6:	603d      	str	r5, [r7, #0]
 80200e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80200ec:	6030      	str	r0, [r6, #0]
 80200ee:	4620      	mov	r0, r4
 80200f0:	b003      	add	sp, #12
 80200f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80200f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80200fa:	e7d6      	b.n	80200aa <__d2b+0x2e>
 80200fc:	6161      	str	r1, [r4, #20]
 80200fe:	e7e7      	b.n	80200d0 <__d2b+0x54>
 8020100:	a801      	add	r0, sp, #4
 8020102:	f7ff fd61 	bl	801fbc8 <__lo0bits>
 8020106:	9b01      	ldr	r3, [sp, #4]
 8020108:	6163      	str	r3, [r4, #20]
 802010a:	3020      	adds	r0, #32
 802010c:	2201      	movs	r2, #1
 802010e:	e7e5      	b.n	80200dc <__d2b+0x60>
 8020110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020118:	6038      	str	r0, [r7, #0]
 802011a:	6918      	ldr	r0, [r3, #16]
 802011c:	f7ff fd34 	bl	801fb88 <__hi0bits>
 8020120:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020124:	e7e2      	b.n	80200ec <__d2b+0x70>
 8020126:	bf00      	nop
 8020128:	08021190 	.word	0x08021190
 802012c:	080211a1 	.word	0x080211a1

08020130 <__sfputc_r>:
 8020130:	6893      	ldr	r3, [r2, #8]
 8020132:	3b01      	subs	r3, #1
 8020134:	2b00      	cmp	r3, #0
 8020136:	b410      	push	{r4}
 8020138:	6093      	str	r3, [r2, #8]
 802013a:	da08      	bge.n	802014e <__sfputc_r+0x1e>
 802013c:	6994      	ldr	r4, [r2, #24]
 802013e:	42a3      	cmp	r3, r4
 8020140:	db01      	blt.n	8020146 <__sfputc_r+0x16>
 8020142:	290a      	cmp	r1, #10
 8020144:	d103      	bne.n	802014e <__sfputc_r+0x1e>
 8020146:	f85d 4b04 	ldr.w	r4, [sp], #4
 802014a:	f000 b9e3 	b.w	8020514 <__swbuf_r>
 802014e:	6813      	ldr	r3, [r2, #0]
 8020150:	1c58      	adds	r0, r3, #1
 8020152:	6010      	str	r0, [r2, #0]
 8020154:	7019      	strb	r1, [r3, #0]
 8020156:	4608      	mov	r0, r1
 8020158:	f85d 4b04 	ldr.w	r4, [sp], #4
 802015c:	4770      	bx	lr

0802015e <__sfputs_r>:
 802015e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020160:	4606      	mov	r6, r0
 8020162:	460f      	mov	r7, r1
 8020164:	4614      	mov	r4, r2
 8020166:	18d5      	adds	r5, r2, r3
 8020168:	42ac      	cmp	r4, r5
 802016a:	d101      	bne.n	8020170 <__sfputs_r+0x12>
 802016c:	2000      	movs	r0, #0
 802016e:	e007      	b.n	8020180 <__sfputs_r+0x22>
 8020170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020174:	463a      	mov	r2, r7
 8020176:	4630      	mov	r0, r6
 8020178:	f7ff ffda 	bl	8020130 <__sfputc_r>
 802017c:	1c43      	adds	r3, r0, #1
 802017e:	d1f3      	bne.n	8020168 <__sfputs_r+0xa>
 8020180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020184 <_vfiprintf_r>:
 8020184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020188:	460d      	mov	r5, r1
 802018a:	b09d      	sub	sp, #116	; 0x74
 802018c:	4614      	mov	r4, r2
 802018e:	4698      	mov	r8, r3
 8020190:	4606      	mov	r6, r0
 8020192:	b118      	cbz	r0, 802019c <_vfiprintf_r+0x18>
 8020194:	6a03      	ldr	r3, [r0, #32]
 8020196:	b90b      	cbnz	r3, 802019c <_vfiprintf_r+0x18>
 8020198:	f7fe fc40 	bl	801ea1c <__sinit>
 802019c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802019e:	07d9      	lsls	r1, r3, #31
 80201a0:	d405      	bmi.n	80201ae <_vfiprintf_r+0x2a>
 80201a2:	89ab      	ldrh	r3, [r5, #12]
 80201a4:	059a      	lsls	r2, r3, #22
 80201a6:	d402      	bmi.n	80201ae <_vfiprintf_r+0x2a>
 80201a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201aa:	f7fe fd40 	bl	801ec2e <__retarget_lock_acquire_recursive>
 80201ae:	89ab      	ldrh	r3, [r5, #12]
 80201b0:	071b      	lsls	r3, r3, #28
 80201b2:	d501      	bpl.n	80201b8 <_vfiprintf_r+0x34>
 80201b4:	692b      	ldr	r3, [r5, #16]
 80201b6:	b99b      	cbnz	r3, 80201e0 <_vfiprintf_r+0x5c>
 80201b8:	4629      	mov	r1, r5
 80201ba:	4630      	mov	r0, r6
 80201bc:	f000 f9e8 	bl	8020590 <__swsetup_r>
 80201c0:	b170      	cbz	r0, 80201e0 <_vfiprintf_r+0x5c>
 80201c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201c4:	07dc      	lsls	r4, r3, #31
 80201c6:	d504      	bpl.n	80201d2 <_vfiprintf_r+0x4e>
 80201c8:	f04f 30ff 	mov.w	r0, #4294967295
 80201cc:	b01d      	add	sp, #116	; 0x74
 80201ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201d2:	89ab      	ldrh	r3, [r5, #12]
 80201d4:	0598      	lsls	r0, r3, #22
 80201d6:	d4f7      	bmi.n	80201c8 <_vfiprintf_r+0x44>
 80201d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201da:	f7fe fd29 	bl	801ec30 <__retarget_lock_release_recursive>
 80201de:	e7f3      	b.n	80201c8 <_vfiprintf_r+0x44>
 80201e0:	2300      	movs	r3, #0
 80201e2:	9309      	str	r3, [sp, #36]	; 0x24
 80201e4:	2320      	movs	r3, #32
 80201e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80201ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80201ee:	2330      	movs	r3, #48	; 0x30
 80201f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80203a4 <_vfiprintf_r+0x220>
 80201f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80201f8:	f04f 0901 	mov.w	r9, #1
 80201fc:	4623      	mov	r3, r4
 80201fe:	469a      	mov	sl, r3
 8020200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020204:	b10a      	cbz	r2, 802020a <_vfiprintf_r+0x86>
 8020206:	2a25      	cmp	r2, #37	; 0x25
 8020208:	d1f9      	bne.n	80201fe <_vfiprintf_r+0x7a>
 802020a:	ebba 0b04 	subs.w	fp, sl, r4
 802020e:	d00b      	beq.n	8020228 <_vfiprintf_r+0xa4>
 8020210:	465b      	mov	r3, fp
 8020212:	4622      	mov	r2, r4
 8020214:	4629      	mov	r1, r5
 8020216:	4630      	mov	r0, r6
 8020218:	f7ff ffa1 	bl	802015e <__sfputs_r>
 802021c:	3001      	adds	r0, #1
 802021e:	f000 80a9 	beq.w	8020374 <_vfiprintf_r+0x1f0>
 8020222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020224:	445a      	add	r2, fp
 8020226:	9209      	str	r2, [sp, #36]	; 0x24
 8020228:	f89a 3000 	ldrb.w	r3, [sl]
 802022c:	2b00      	cmp	r3, #0
 802022e:	f000 80a1 	beq.w	8020374 <_vfiprintf_r+0x1f0>
 8020232:	2300      	movs	r3, #0
 8020234:	f04f 32ff 	mov.w	r2, #4294967295
 8020238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802023c:	f10a 0a01 	add.w	sl, sl, #1
 8020240:	9304      	str	r3, [sp, #16]
 8020242:	9307      	str	r3, [sp, #28]
 8020244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020248:	931a      	str	r3, [sp, #104]	; 0x68
 802024a:	4654      	mov	r4, sl
 802024c:	2205      	movs	r2, #5
 802024e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020252:	4854      	ldr	r0, [pc, #336]	; (80203a4 <_vfiprintf_r+0x220>)
 8020254:	f7e0 f844 	bl	80002e0 <memchr>
 8020258:	9a04      	ldr	r2, [sp, #16]
 802025a:	b9d8      	cbnz	r0, 8020294 <_vfiprintf_r+0x110>
 802025c:	06d1      	lsls	r1, r2, #27
 802025e:	bf44      	itt	mi
 8020260:	2320      	movmi	r3, #32
 8020262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020266:	0713      	lsls	r3, r2, #28
 8020268:	bf44      	itt	mi
 802026a:	232b      	movmi	r3, #43	; 0x2b
 802026c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020270:	f89a 3000 	ldrb.w	r3, [sl]
 8020274:	2b2a      	cmp	r3, #42	; 0x2a
 8020276:	d015      	beq.n	80202a4 <_vfiprintf_r+0x120>
 8020278:	9a07      	ldr	r2, [sp, #28]
 802027a:	4654      	mov	r4, sl
 802027c:	2000      	movs	r0, #0
 802027e:	f04f 0c0a 	mov.w	ip, #10
 8020282:	4621      	mov	r1, r4
 8020284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020288:	3b30      	subs	r3, #48	; 0x30
 802028a:	2b09      	cmp	r3, #9
 802028c:	d94d      	bls.n	802032a <_vfiprintf_r+0x1a6>
 802028e:	b1b0      	cbz	r0, 80202be <_vfiprintf_r+0x13a>
 8020290:	9207      	str	r2, [sp, #28]
 8020292:	e014      	b.n	80202be <_vfiprintf_r+0x13a>
 8020294:	eba0 0308 	sub.w	r3, r0, r8
 8020298:	fa09 f303 	lsl.w	r3, r9, r3
 802029c:	4313      	orrs	r3, r2
 802029e:	9304      	str	r3, [sp, #16]
 80202a0:	46a2      	mov	sl, r4
 80202a2:	e7d2      	b.n	802024a <_vfiprintf_r+0xc6>
 80202a4:	9b03      	ldr	r3, [sp, #12]
 80202a6:	1d19      	adds	r1, r3, #4
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	9103      	str	r1, [sp, #12]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	bfbb      	ittet	lt
 80202b0:	425b      	neglt	r3, r3
 80202b2:	f042 0202 	orrlt.w	r2, r2, #2
 80202b6:	9307      	strge	r3, [sp, #28]
 80202b8:	9307      	strlt	r3, [sp, #28]
 80202ba:	bfb8      	it	lt
 80202bc:	9204      	strlt	r2, [sp, #16]
 80202be:	7823      	ldrb	r3, [r4, #0]
 80202c0:	2b2e      	cmp	r3, #46	; 0x2e
 80202c2:	d10c      	bne.n	80202de <_vfiprintf_r+0x15a>
 80202c4:	7863      	ldrb	r3, [r4, #1]
 80202c6:	2b2a      	cmp	r3, #42	; 0x2a
 80202c8:	d134      	bne.n	8020334 <_vfiprintf_r+0x1b0>
 80202ca:	9b03      	ldr	r3, [sp, #12]
 80202cc:	1d1a      	adds	r2, r3, #4
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	9203      	str	r2, [sp, #12]
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	bfb8      	it	lt
 80202d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80202da:	3402      	adds	r4, #2
 80202dc:	9305      	str	r3, [sp, #20]
 80202de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80203b4 <_vfiprintf_r+0x230>
 80202e2:	7821      	ldrb	r1, [r4, #0]
 80202e4:	2203      	movs	r2, #3
 80202e6:	4650      	mov	r0, sl
 80202e8:	f7df fffa 	bl	80002e0 <memchr>
 80202ec:	b138      	cbz	r0, 80202fe <_vfiprintf_r+0x17a>
 80202ee:	9b04      	ldr	r3, [sp, #16]
 80202f0:	eba0 000a 	sub.w	r0, r0, sl
 80202f4:	2240      	movs	r2, #64	; 0x40
 80202f6:	4082      	lsls	r2, r0
 80202f8:	4313      	orrs	r3, r2
 80202fa:	3401      	adds	r4, #1
 80202fc:	9304      	str	r3, [sp, #16]
 80202fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020302:	4829      	ldr	r0, [pc, #164]	; (80203a8 <_vfiprintf_r+0x224>)
 8020304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020308:	2206      	movs	r2, #6
 802030a:	f7df ffe9 	bl	80002e0 <memchr>
 802030e:	2800      	cmp	r0, #0
 8020310:	d03f      	beq.n	8020392 <_vfiprintf_r+0x20e>
 8020312:	4b26      	ldr	r3, [pc, #152]	; (80203ac <_vfiprintf_r+0x228>)
 8020314:	bb1b      	cbnz	r3, 802035e <_vfiprintf_r+0x1da>
 8020316:	9b03      	ldr	r3, [sp, #12]
 8020318:	3307      	adds	r3, #7
 802031a:	f023 0307 	bic.w	r3, r3, #7
 802031e:	3308      	adds	r3, #8
 8020320:	9303      	str	r3, [sp, #12]
 8020322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020324:	443b      	add	r3, r7
 8020326:	9309      	str	r3, [sp, #36]	; 0x24
 8020328:	e768      	b.n	80201fc <_vfiprintf_r+0x78>
 802032a:	fb0c 3202 	mla	r2, ip, r2, r3
 802032e:	460c      	mov	r4, r1
 8020330:	2001      	movs	r0, #1
 8020332:	e7a6      	b.n	8020282 <_vfiprintf_r+0xfe>
 8020334:	2300      	movs	r3, #0
 8020336:	3401      	adds	r4, #1
 8020338:	9305      	str	r3, [sp, #20]
 802033a:	4619      	mov	r1, r3
 802033c:	f04f 0c0a 	mov.w	ip, #10
 8020340:	4620      	mov	r0, r4
 8020342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020346:	3a30      	subs	r2, #48	; 0x30
 8020348:	2a09      	cmp	r2, #9
 802034a:	d903      	bls.n	8020354 <_vfiprintf_r+0x1d0>
 802034c:	2b00      	cmp	r3, #0
 802034e:	d0c6      	beq.n	80202de <_vfiprintf_r+0x15a>
 8020350:	9105      	str	r1, [sp, #20]
 8020352:	e7c4      	b.n	80202de <_vfiprintf_r+0x15a>
 8020354:	fb0c 2101 	mla	r1, ip, r1, r2
 8020358:	4604      	mov	r4, r0
 802035a:	2301      	movs	r3, #1
 802035c:	e7f0      	b.n	8020340 <_vfiprintf_r+0x1bc>
 802035e:	ab03      	add	r3, sp, #12
 8020360:	9300      	str	r3, [sp, #0]
 8020362:	462a      	mov	r2, r5
 8020364:	4b12      	ldr	r3, [pc, #72]	; (80203b0 <_vfiprintf_r+0x22c>)
 8020366:	a904      	add	r1, sp, #16
 8020368:	4630      	mov	r0, r6
 802036a:	f7fd ff21 	bl	801e1b0 <_printf_float>
 802036e:	4607      	mov	r7, r0
 8020370:	1c78      	adds	r0, r7, #1
 8020372:	d1d6      	bne.n	8020322 <_vfiprintf_r+0x19e>
 8020374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020376:	07d9      	lsls	r1, r3, #31
 8020378:	d405      	bmi.n	8020386 <_vfiprintf_r+0x202>
 802037a:	89ab      	ldrh	r3, [r5, #12]
 802037c:	059a      	lsls	r2, r3, #22
 802037e:	d402      	bmi.n	8020386 <_vfiprintf_r+0x202>
 8020380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020382:	f7fe fc55 	bl	801ec30 <__retarget_lock_release_recursive>
 8020386:	89ab      	ldrh	r3, [r5, #12]
 8020388:	065b      	lsls	r3, r3, #25
 802038a:	f53f af1d 	bmi.w	80201c8 <_vfiprintf_r+0x44>
 802038e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020390:	e71c      	b.n	80201cc <_vfiprintf_r+0x48>
 8020392:	ab03      	add	r3, sp, #12
 8020394:	9300      	str	r3, [sp, #0]
 8020396:	462a      	mov	r2, r5
 8020398:	4b05      	ldr	r3, [pc, #20]	; (80203b0 <_vfiprintf_r+0x22c>)
 802039a:	a904      	add	r1, sp, #16
 802039c:	4630      	mov	r0, r6
 802039e:	f7fe f98f 	bl	801e6c0 <_printf_i>
 80203a2:	e7e4      	b.n	802036e <_vfiprintf_r+0x1ea>
 80203a4:	080212fc 	.word	0x080212fc
 80203a8:	08021306 	.word	0x08021306
 80203ac:	0801e1b1 	.word	0x0801e1b1
 80203b0:	0802015f 	.word	0x0802015f
 80203b4:	08021302 	.word	0x08021302

080203b8 <__sflush_r>:
 80203b8:	898a      	ldrh	r2, [r1, #12]
 80203ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203be:	4605      	mov	r5, r0
 80203c0:	0710      	lsls	r0, r2, #28
 80203c2:	460c      	mov	r4, r1
 80203c4:	d458      	bmi.n	8020478 <__sflush_r+0xc0>
 80203c6:	684b      	ldr	r3, [r1, #4]
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	dc05      	bgt.n	80203d8 <__sflush_r+0x20>
 80203cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	dc02      	bgt.n	80203d8 <__sflush_r+0x20>
 80203d2:	2000      	movs	r0, #0
 80203d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80203da:	2e00      	cmp	r6, #0
 80203dc:	d0f9      	beq.n	80203d2 <__sflush_r+0x1a>
 80203de:	2300      	movs	r3, #0
 80203e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80203e4:	682f      	ldr	r7, [r5, #0]
 80203e6:	6a21      	ldr	r1, [r4, #32]
 80203e8:	602b      	str	r3, [r5, #0]
 80203ea:	d032      	beq.n	8020452 <__sflush_r+0x9a>
 80203ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80203ee:	89a3      	ldrh	r3, [r4, #12]
 80203f0:	075a      	lsls	r2, r3, #29
 80203f2:	d505      	bpl.n	8020400 <__sflush_r+0x48>
 80203f4:	6863      	ldr	r3, [r4, #4]
 80203f6:	1ac0      	subs	r0, r0, r3
 80203f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80203fa:	b10b      	cbz	r3, 8020400 <__sflush_r+0x48>
 80203fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80203fe:	1ac0      	subs	r0, r0, r3
 8020400:	2300      	movs	r3, #0
 8020402:	4602      	mov	r2, r0
 8020404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020406:	6a21      	ldr	r1, [r4, #32]
 8020408:	4628      	mov	r0, r5
 802040a:	47b0      	blx	r6
 802040c:	1c43      	adds	r3, r0, #1
 802040e:	89a3      	ldrh	r3, [r4, #12]
 8020410:	d106      	bne.n	8020420 <__sflush_r+0x68>
 8020412:	6829      	ldr	r1, [r5, #0]
 8020414:	291d      	cmp	r1, #29
 8020416:	d82b      	bhi.n	8020470 <__sflush_r+0xb8>
 8020418:	4a29      	ldr	r2, [pc, #164]	; (80204c0 <__sflush_r+0x108>)
 802041a:	410a      	asrs	r2, r1
 802041c:	07d6      	lsls	r6, r2, #31
 802041e:	d427      	bmi.n	8020470 <__sflush_r+0xb8>
 8020420:	2200      	movs	r2, #0
 8020422:	6062      	str	r2, [r4, #4]
 8020424:	04d9      	lsls	r1, r3, #19
 8020426:	6922      	ldr	r2, [r4, #16]
 8020428:	6022      	str	r2, [r4, #0]
 802042a:	d504      	bpl.n	8020436 <__sflush_r+0x7e>
 802042c:	1c42      	adds	r2, r0, #1
 802042e:	d101      	bne.n	8020434 <__sflush_r+0x7c>
 8020430:	682b      	ldr	r3, [r5, #0]
 8020432:	b903      	cbnz	r3, 8020436 <__sflush_r+0x7e>
 8020434:	6560      	str	r0, [r4, #84]	; 0x54
 8020436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020438:	602f      	str	r7, [r5, #0]
 802043a:	2900      	cmp	r1, #0
 802043c:	d0c9      	beq.n	80203d2 <__sflush_r+0x1a>
 802043e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020442:	4299      	cmp	r1, r3
 8020444:	d002      	beq.n	802044c <__sflush_r+0x94>
 8020446:	4628      	mov	r0, r5
 8020448:	f7ff f9f6 	bl	801f838 <_free_r>
 802044c:	2000      	movs	r0, #0
 802044e:	6360      	str	r0, [r4, #52]	; 0x34
 8020450:	e7c0      	b.n	80203d4 <__sflush_r+0x1c>
 8020452:	2301      	movs	r3, #1
 8020454:	4628      	mov	r0, r5
 8020456:	47b0      	blx	r6
 8020458:	1c41      	adds	r1, r0, #1
 802045a:	d1c8      	bne.n	80203ee <__sflush_r+0x36>
 802045c:	682b      	ldr	r3, [r5, #0]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d0c5      	beq.n	80203ee <__sflush_r+0x36>
 8020462:	2b1d      	cmp	r3, #29
 8020464:	d001      	beq.n	802046a <__sflush_r+0xb2>
 8020466:	2b16      	cmp	r3, #22
 8020468:	d101      	bne.n	802046e <__sflush_r+0xb6>
 802046a:	602f      	str	r7, [r5, #0]
 802046c:	e7b1      	b.n	80203d2 <__sflush_r+0x1a>
 802046e:	89a3      	ldrh	r3, [r4, #12]
 8020470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020474:	81a3      	strh	r3, [r4, #12]
 8020476:	e7ad      	b.n	80203d4 <__sflush_r+0x1c>
 8020478:	690f      	ldr	r7, [r1, #16]
 802047a:	2f00      	cmp	r7, #0
 802047c:	d0a9      	beq.n	80203d2 <__sflush_r+0x1a>
 802047e:	0793      	lsls	r3, r2, #30
 8020480:	680e      	ldr	r6, [r1, #0]
 8020482:	bf08      	it	eq
 8020484:	694b      	ldreq	r3, [r1, #20]
 8020486:	600f      	str	r7, [r1, #0]
 8020488:	bf18      	it	ne
 802048a:	2300      	movne	r3, #0
 802048c:	eba6 0807 	sub.w	r8, r6, r7
 8020490:	608b      	str	r3, [r1, #8]
 8020492:	f1b8 0f00 	cmp.w	r8, #0
 8020496:	dd9c      	ble.n	80203d2 <__sflush_r+0x1a>
 8020498:	6a21      	ldr	r1, [r4, #32]
 802049a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802049c:	4643      	mov	r3, r8
 802049e:	463a      	mov	r2, r7
 80204a0:	4628      	mov	r0, r5
 80204a2:	47b0      	blx	r6
 80204a4:	2800      	cmp	r0, #0
 80204a6:	dc06      	bgt.n	80204b6 <__sflush_r+0xfe>
 80204a8:	89a3      	ldrh	r3, [r4, #12]
 80204aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204ae:	81a3      	strh	r3, [r4, #12]
 80204b0:	f04f 30ff 	mov.w	r0, #4294967295
 80204b4:	e78e      	b.n	80203d4 <__sflush_r+0x1c>
 80204b6:	4407      	add	r7, r0
 80204b8:	eba8 0800 	sub.w	r8, r8, r0
 80204bc:	e7e9      	b.n	8020492 <__sflush_r+0xda>
 80204be:	bf00      	nop
 80204c0:	dfbffffe 	.word	0xdfbffffe

080204c4 <_fflush_r>:
 80204c4:	b538      	push	{r3, r4, r5, lr}
 80204c6:	690b      	ldr	r3, [r1, #16]
 80204c8:	4605      	mov	r5, r0
 80204ca:	460c      	mov	r4, r1
 80204cc:	b913      	cbnz	r3, 80204d4 <_fflush_r+0x10>
 80204ce:	2500      	movs	r5, #0
 80204d0:	4628      	mov	r0, r5
 80204d2:	bd38      	pop	{r3, r4, r5, pc}
 80204d4:	b118      	cbz	r0, 80204de <_fflush_r+0x1a>
 80204d6:	6a03      	ldr	r3, [r0, #32]
 80204d8:	b90b      	cbnz	r3, 80204de <_fflush_r+0x1a>
 80204da:	f7fe fa9f 	bl	801ea1c <__sinit>
 80204de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d0f3      	beq.n	80204ce <_fflush_r+0xa>
 80204e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80204e8:	07d0      	lsls	r0, r2, #31
 80204ea:	d404      	bmi.n	80204f6 <_fflush_r+0x32>
 80204ec:	0599      	lsls	r1, r3, #22
 80204ee:	d402      	bmi.n	80204f6 <_fflush_r+0x32>
 80204f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204f2:	f7fe fb9c 	bl	801ec2e <__retarget_lock_acquire_recursive>
 80204f6:	4628      	mov	r0, r5
 80204f8:	4621      	mov	r1, r4
 80204fa:	f7ff ff5d 	bl	80203b8 <__sflush_r>
 80204fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020500:	07da      	lsls	r2, r3, #31
 8020502:	4605      	mov	r5, r0
 8020504:	d4e4      	bmi.n	80204d0 <_fflush_r+0xc>
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	059b      	lsls	r3, r3, #22
 802050a:	d4e1      	bmi.n	80204d0 <_fflush_r+0xc>
 802050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802050e:	f7fe fb8f 	bl	801ec30 <__retarget_lock_release_recursive>
 8020512:	e7dd      	b.n	80204d0 <_fflush_r+0xc>

08020514 <__swbuf_r>:
 8020514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020516:	460e      	mov	r6, r1
 8020518:	4614      	mov	r4, r2
 802051a:	4605      	mov	r5, r0
 802051c:	b118      	cbz	r0, 8020526 <__swbuf_r+0x12>
 802051e:	6a03      	ldr	r3, [r0, #32]
 8020520:	b90b      	cbnz	r3, 8020526 <__swbuf_r+0x12>
 8020522:	f7fe fa7b 	bl	801ea1c <__sinit>
 8020526:	69a3      	ldr	r3, [r4, #24]
 8020528:	60a3      	str	r3, [r4, #8]
 802052a:	89a3      	ldrh	r3, [r4, #12]
 802052c:	071a      	lsls	r2, r3, #28
 802052e:	d525      	bpl.n	802057c <__swbuf_r+0x68>
 8020530:	6923      	ldr	r3, [r4, #16]
 8020532:	b31b      	cbz	r3, 802057c <__swbuf_r+0x68>
 8020534:	6823      	ldr	r3, [r4, #0]
 8020536:	6922      	ldr	r2, [r4, #16]
 8020538:	1a98      	subs	r0, r3, r2
 802053a:	6963      	ldr	r3, [r4, #20]
 802053c:	b2f6      	uxtb	r6, r6
 802053e:	4283      	cmp	r3, r0
 8020540:	4637      	mov	r7, r6
 8020542:	dc04      	bgt.n	802054e <__swbuf_r+0x3a>
 8020544:	4621      	mov	r1, r4
 8020546:	4628      	mov	r0, r5
 8020548:	f7ff ffbc 	bl	80204c4 <_fflush_r>
 802054c:	b9e0      	cbnz	r0, 8020588 <__swbuf_r+0x74>
 802054e:	68a3      	ldr	r3, [r4, #8]
 8020550:	3b01      	subs	r3, #1
 8020552:	60a3      	str	r3, [r4, #8]
 8020554:	6823      	ldr	r3, [r4, #0]
 8020556:	1c5a      	adds	r2, r3, #1
 8020558:	6022      	str	r2, [r4, #0]
 802055a:	701e      	strb	r6, [r3, #0]
 802055c:	6962      	ldr	r2, [r4, #20]
 802055e:	1c43      	adds	r3, r0, #1
 8020560:	429a      	cmp	r2, r3
 8020562:	d004      	beq.n	802056e <__swbuf_r+0x5a>
 8020564:	89a3      	ldrh	r3, [r4, #12]
 8020566:	07db      	lsls	r3, r3, #31
 8020568:	d506      	bpl.n	8020578 <__swbuf_r+0x64>
 802056a:	2e0a      	cmp	r6, #10
 802056c:	d104      	bne.n	8020578 <__swbuf_r+0x64>
 802056e:	4621      	mov	r1, r4
 8020570:	4628      	mov	r0, r5
 8020572:	f7ff ffa7 	bl	80204c4 <_fflush_r>
 8020576:	b938      	cbnz	r0, 8020588 <__swbuf_r+0x74>
 8020578:	4638      	mov	r0, r7
 802057a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802057c:	4621      	mov	r1, r4
 802057e:	4628      	mov	r0, r5
 8020580:	f000 f806 	bl	8020590 <__swsetup_r>
 8020584:	2800      	cmp	r0, #0
 8020586:	d0d5      	beq.n	8020534 <__swbuf_r+0x20>
 8020588:	f04f 37ff 	mov.w	r7, #4294967295
 802058c:	e7f4      	b.n	8020578 <__swbuf_r+0x64>
	...

08020590 <__swsetup_r>:
 8020590:	b538      	push	{r3, r4, r5, lr}
 8020592:	4b2a      	ldr	r3, [pc, #168]	; (802063c <__swsetup_r+0xac>)
 8020594:	4605      	mov	r5, r0
 8020596:	6818      	ldr	r0, [r3, #0]
 8020598:	460c      	mov	r4, r1
 802059a:	b118      	cbz	r0, 80205a4 <__swsetup_r+0x14>
 802059c:	6a03      	ldr	r3, [r0, #32]
 802059e:	b90b      	cbnz	r3, 80205a4 <__swsetup_r+0x14>
 80205a0:	f7fe fa3c 	bl	801ea1c <__sinit>
 80205a4:	89a3      	ldrh	r3, [r4, #12]
 80205a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80205aa:	0718      	lsls	r0, r3, #28
 80205ac:	d422      	bmi.n	80205f4 <__swsetup_r+0x64>
 80205ae:	06d9      	lsls	r1, r3, #27
 80205b0:	d407      	bmi.n	80205c2 <__swsetup_r+0x32>
 80205b2:	2309      	movs	r3, #9
 80205b4:	602b      	str	r3, [r5, #0]
 80205b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80205ba:	81a3      	strh	r3, [r4, #12]
 80205bc:	f04f 30ff 	mov.w	r0, #4294967295
 80205c0:	e034      	b.n	802062c <__swsetup_r+0x9c>
 80205c2:	0758      	lsls	r0, r3, #29
 80205c4:	d512      	bpl.n	80205ec <__swsetup_r+0x5c>
 80205c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80205c8:	b141      	cbz	r1, 80205dc <__swsetup_r+0x4c>
 80205ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80205ce:	4299      	cmp	r1, r3
 80205d0:	d002      	beq.n	80205d8 <__swsetup_r+0x48>
 80205d2:	4628      	mov	r0, r5
 80205d4:	f7ff f930 	bl	801f838 <_free_r>
 80205d8:	2300      	movs	r3, #0
 80205da:	6363      	str	r3, [r4, #52]	; 0x34
 80205dc:	89a3      	ldrh	r3, [r4, #12]
 80205de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80205e2:	81a3      	strh	r3, [r4, #12]
 80205e4:	2300      	movs	r3, #0
 80205e6:	6063      	str	r3, [r4, #4]
 80205e8:	6923      	ldr	r3, [r4, #16]
 80205ea:	6023      	str	r3, [r4, #0]
 80205ec:	89a3      	ldrh	r3, [r4, #12]
 80205ee:	f043 0308 	orr.w	r3, r3, #8
 80205f2:	81a3      	strh	r3, [r4, #12]
 80205f4:	6923      	ldr	r3, [r4, #16]
 80205f6:	b94b      	cbnz	r3, 802060c <__swsetup_r+0x7c>
 80205f8:	89a3      	ldrh	r3, [r4, #12]
 80205fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80205fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020602:	d003      	beq.n	802060c <__swsetup_r+0x7c>
 8020604:	4621      	mov	r1, r4
 8020606:	4628      	mov	r0, r5
 8020608:	f000 f8b6 	bl	8020778 <__smakebuf_r>
 802060c:	89a0      	ldrh	r0, [r4, #12]
 802060e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020612:	f010 0301 	ands.w	r3, r0, #1
 8020616:	d00a      	beq.n	802062e <__swsetup_r+0x9e>
 8020618:	2300      	movs	r3, #0
 802061a:	60a3      	str	r3, [r4, #8]
 802061c:	6963      	ldr	r3, [r4, #20]
 802061e:	425b      	negs	r3, r3
 8020620:	61a3      	str	r3, [r4, #24]
 8020622:	6923      	ldr	r3, [r4, #16]
 8020624:	b943      	cbnz	r3, 8020638 <__swsetup_r+0xa8>
 8020626:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802062a:	d1c4      	bne.n	80205b6 <__swsetup_r+0x26>
 802062c:	bd38      	pop	{r3, r4, r5, pc}
 802062e:	0781      	lsls	r1, r0, #30
 8020630:	bf58      	it	pl
 8020632:	6963      	ldrpl	r3, [r4, #20]
 8020634:	60a3      	str	r3, [r4, #8]
 8020636:	e7f4      	b.n	8020622 <__swsetup_r+0x92>
 8020638:	2000      	movs	r0, #0
 802063a:	e7f7      	b.n	802062c <__swsetup_r+0x9c>
 802063c:	2400006c 	.word	0x2400006c

08020640 <_sbrk_r>:
 8020640:	b538      	push	{r3, r4, r5, lr}
 8020642:	4d06      	ldr	r5, [pc, #24]	; (802065c <_sbrk_r+0x1c>)
 8020644:	2300      	movs	r3, #0
 8020646:	4604      	mov	r4, r0
 8020648:	4608      	mov	r0, r1
 802064a:	602b      	str	r3, [r5, #0]
 802064c:	f7e1 fa68 	bl	8001b20 <_sbrk>
 8020650:	1c43      	adds	r3, r0, #1
 8020652:	d102      	bne.n	802065a <_sbrk_r+0x1a>
 8020654:	682b      	ldr	r3, [r5, #0]
 8020656:	b103      	cbz	r3, 802065a <_sbrk_r+0x1a>
 8020658:	6023      	str	r3, [r4, #0]
 802065a:	bd38      	pop	{r3, r4, r5, pc}
 802065c:	2400a8bc 	.word	0x2400a8bc

08020660 <__assert_func>:
 8020660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020662:	4614      	mov	r4, r2
 8020664:	461a      	mov	r2, r3
 8020666:	4b09      	ldr	r3, [pc, #36]	; (802068c <__assert_func+0x2c>)
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	4605      	mov	r5, r0
 802066c:	68d8      	ldr	r0, [r3, #12]
 802066e:	b14c      	cbz	r4, 8020684 <__assert_func+0x24>
 8020670:	4b07      	ldr	r3, [pc, #28]	; (8020690 <__assert_func+0x30>)
 8020672:	9100      	str	r1, [sp, #0]
 8020674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020678:	4906      	ldr	r1, [pc, #24]	; (8020694 <__assert_func+0x34>)
 802067a:	462b      	mov	r3, r5
 802067c:	f000 f844 	bl	8020708 <fiprintf>
 8020680:	f000 f8d8 	bl	8020834 <abort>
 8020684:	4b04      	ldr	r3, [pc, #16]	; (8020698 <__assert_func+0x38>)
 8020686:	461c      	mov	r4, r3
 8020688:	e7f3      	b.n	8020672 <__assert_func+0x12>
 802068a:	bf00      	nop
 802068c:	2400006c 	.word	0x2400006c
 8020690:	08021317 	.word	0x08021317
 8020694:	08021324 	.word	0x08021324
 8020698:	08021352 	.word	0x08021352

0802069c <_calloc_r>:
 802069c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802069e:	fba1 2402 	umull	r2, r4, r1, r2
 80206a2:	b94c      	cbnz	r4, 80206b8 <_calloc_r+0x1c>
 80206a4:	4611      	mov	r1, r2
 80206a6:	9201      	str	r2, [sp, #4]
 80206a8:	f7ff f93a 	bl	801f920 <_malloc_r>
 80206ac:	9a01      	ldr	r2, [sp, #4]
 80206ae:	4605      	mov	r5, r0
 80206b0:	b930      	cbnz	r0, 80206c0 <_calloc_r+0x24>
 80206b2:	4628      	mov	r0, r5
 80206b4:	b003      	add	sp, #12
 80206b6:	bd30      	pop	{r4, r5, pc}
 80206b8:	220c      	movs	r2, #12
 80206ba:	6002      	str	r2, [r0, #0]
 80206bc:	2500      	movs	r5, #0
 80206be:	e7f8      	b.n	80206b2 <_calloc_r+0x16>
 80206c0:	4621      	mov	r1, r4
 80206c2:	f7fe fa36 	bl	801eb32 <memset>
 80206c6:	e7f4      	b.n	80206b2 <_calloc_r+0x16>

080206c8 <__ascii_mbtowc>:
 80206c8:	b082      	sub	sp, #8
 80206ca:	b901      	cbnz	r1, 80206ce <__ascii_mbtowc+0x6>
 80206cc:	a901      	add	r1, sp, #4
 80206ce:	b142      	cbz	r2, 80206e2 <__ascii_mbtowc+0x1a>
 80206d0:	b14b      	cbz	r3, 80206e6 <__ascii_mbtowc+0x1e>
 80206d2:	7813      	ldrb	r3, [r2, #0]
 80206d4:	600b      	str	r3, [r1, #0]
 80206d6:	7812      	ldrb	r2, [r2, #0]
 80206d8:	1e10      	subs	r0, r2, #0
 80206da:	bf18      	it	ne
 80206dc:	2001      	movne	r0, #1
 80206de:	b002      	add	sp, #8
 80206e0:	4770      	bx	lr
 80206e2:	4610      	mov	r0, r2
 80206e4:	e7fb      	b.n	80206de <__ascii_mbtowc+0x16>
 80206e6:	f06f 0001 	mvn.w	r0, #1
 80206ea:	e7f8      	b.n	80206de <__ascii_mbtowc+0x16>

080206ec <__ascii_wctomb>:
 80206ec:	b149      	cbz	r1, 8020702 <__ascii_wctomb+0x16>
 80206ee:	2aff      	cmp	r2, #255	; 0xff
 80206f0:	bf85      	ittet	hi
 80206f2:	238a      	movhi	r3, #138	; 0x8a
 80206f4:	6003      	strhi	r3, [r0, #0]
 80206f6:	700a      	strbls	r2, [r1, #0]
 80206f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80206fc:	bf98      	it	ls
 80206fe:	2001      	movls	r0, #1
 8020700:	4770      	bx	lr
 8020702:	4608      	mov	r0, r1
 8020704:	4770      	bx	lr
	...

08020708 <fiprintf>:
 8020708:	b40e      	push	{r1, r2, r3}
 802070a:	b503      	push	{r0, r1, lr}
 802070c:	4601      	mov	r1, r0
 802070e:	ab03      	add	r3, sp, #12
 8020710:	4805      	ldr	r0, [pc, #20]	; (8020728 <fiprintf+0x20>)
 8020712:	f853 2b04 	ldr.w	r2, [r3], #4
 8020716:	6800      	ldr	r0, [r0, #0]
 8020718:	9301      	str	r3, [sp, #4]
 802071a:	f7ff fd33 	bl	8020184 <_vfiprintf_r>
 802071e:	b002      	add	sp, #8
 8020720:	f85d eb04 	ldr.w	lr, [sp], #4
 8020724:	b003      	add	sp, #12
 8020726:	4770      	bx	lr
 8020728:	2400006c 	.word	0x2400006c

0802072c <__swhatbuf_r>:
 802072c:	b570      	push	{r4, r5, r6, lr}
 802072e:	460c      	mov	r4, r1
 8020730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020734:	2900      	cmp	r1, #0
 8020736:	b096      	sub	sp, #88	; 0x58
 8020738:	4615      	mov	r5, r2
 802073a:	461e      	mov	r6, r3
 802073c:	da0d      	bge.n	802075a <__swhatbuf_r+0x2e>
 802073e:	89a3      	ldrh	r3, [r4, #12]
 8020740:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020744:	f04f 0100 	mov.w	r1, #0
 8020748:	bf0c      	ite	eq
 802074a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802074e:	2340      	movne	r3, #64	; 0x40
 8020750:	2000      	movs	r0, #0
 8020752:	6031      	str	r1, [r6, #0]
 8020754:	602b      	str	r3, [r5, #0]
 8020756:	b016      	add	sp, #88	; 0x58
 8020758:	bd70      	pop	{r4, r5, r6, pc}
 802075a:	466a      	mov	r2, sp
 802075c:	f000 f848 	bl	80207f0 <_fstat_r>
 8020760:	2800      	cmp	r0, #0
 8020762:	dbec      	blt.n	802073e <__swhatbuf_r+0x12>
 8020764:	9901      	ldr	r1, [sp, #4]
 8020766:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802076a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802076e:	4259      	negs	r1, r3
 8020770:	4159      	adcs	r1, r3
 8020772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020776:	e7eb      	b.n	8020750 <__swhatbuf_r+0x24>

08020778 <__smakebuf_r>:
 8020778:	898b      	ldrh	r3, [r1, #12]
 802077a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802077c:	079d      	lsls	r5, r3, #30
 802077e:	4606      	mov	r6, r0
 8020780:	460c      	mov	r4, r1
 8020782:	d507      	bpl.n	8020794 <__smakebuf_r+0x1c>
 8020784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020788:	6023      	str	r3, [r4, #0]
 802078a:	6123      	str	r3, [r4, #16]
 802078c:	2301      	movs	r3, #1
 802078e:	6163      	str	r3, [r4, #20]
 8020790:	b002      	add	sp, #8
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	ab01      	add	r3, sp, #4
 8020796:	466a      	mov	r2, sp
 8020798:	f7ff ffc8 	bl	802072c <__swhatbuf_r>
 802079c:	9900      	ldr	r1, [sp, #0]
 802079e:	4605      	mov	r5, r0
 80207a0:	4630      	mov	r0, r6
 80207a2:	f7ff f8bd 	bl	801f920 <_malloc_r>
 80207a6:	b948      	cbnz	r0, 80207bc <__smakebuf_r+0x44>
 80207a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207ac:	059a      	lsls	r2, r3, #22
 80207ae:	d4ef      	bmi.n	8020790 <__smakebuf_r+0x18>
 80207b0:	f023 0303 	bic.w	r3, r3, #3
 80207b4:	f043 0302 	orr.w	r3, r3, #2
 80207b8:	81a3      	strh	r3, [r4, #12]
 80207ba:	e7e3      	b.n	8020784 <__smakebuf_r+0xc>
 80207bc:	89a3      	ldrh	r3, [r4, #12]
 80207be:	6020      	str	r0, [r4, #0]
 80207c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80207c4:	81a3      	strh	r3, [r4, #12]
 80207c6:	9b00      	ldr	r3, [sp, #0]
 80207c8:	6163      	str	r3, [r4, #20]
 80207ca:	9b01      	ldr	r3, [sp, #4]
 80207cc:	6120      	str	r0, [r4, #16]
 80207ce:	b15b      	cbz	r3, 80207e8 <__smakebuf_r+0x70>
 80207d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80207d4:	4630      	mov	r0, r6
 80207d6:	f000 f81d 	bl	8020814 <_isatty_r>
 80207da:	b128      	cbz	r0, 80207e8 <__smakebuf_r+0x70>
 80207dc:	89a3      	ldrh	r3, [r4, #12]
 80207de:	f023 0303 	bic.w	r3, r3, #3
 80207e2:	f043 0301 	orr.w	r3, r3, #1
 80207e6:	81a3      	strh	r3, [r4, #12]
 80207e8:	89a3      	ldrh	r3, [r4, #12]
 80207ea:	431d      	orrs	r5, r3
 80207ec:	81a5      	strh	r5, [r4, #12]
 80207ee:	e7cf      	b.n	8020790 <__smakebuf_r+0x18>

080207f0 <_fstat_r>:
 80207f0:	b538      	push	{r3, r4, r5, lr}
 80207f2:	4d07      	ldr	r5, [pc, #28]	; (8020810 <_fstat_r+0x20>)
 80207f4:	2300      	movs	r3, #0
 80207f6:	4604      	mov	r4, r0
 80207f8:	4608      	mov	r0, r1
 80207fa:	4611      	mov	r1, r2
 80207fc:	602b      	str	r3, [r5, #0]
 80207fe:	f7e1 f966 	bl	8001ace <_fstat>
 8020802:	1c43      	adds	r3, r0, #1
 8020804:	d102      	bne.n	802080c <_fstat_r+0x1c>
 8020806:	682b      	ldr	r3, [r5, #0]
 8020808:	b103      	cbz	r3, 802080c <_fstat_r+0x1c>
 802080a:	6023      	str	r3, [r4, #0]
 802080c:	bd38      	pop	{r3, r4, r5, pc}
 802080e:	bf00      	nop
 8020810:	2400a8bc 	.word	0x2400a8bc

08020814 <_isatty_r>:
 8020814:	b538      	push	{r3, r4, r5, lr}
 8020816:	4d06      	ldr	r5, [pc, #24]	; (8020830 <_isatty_r+0x1c>)
 8020818:	2300      	movs	r3, #0
 802081a:	4604      	mov	r4, r0
 802081c:	4608      	mov	r0, r1
 802081e:	602b      	str	r3, [r5, #0]
 8020820:	f7e1 f965 	bl	8001aee <_isatty>
 8020824:	1c43      	adds	r3, r0, #1
 8020826:	d102      	bne.n	802082e <_isatty_r+0x1a>
 8020828:	682b      	ldr	r3, [r5, #0]
 802082a:	b103      	cbz	r3, 802082e <_isatty_r+0x1a>
 802082c:	6023      	str	r3, [r4, #0]
 802082e:	bd38      	pop	{r3, r4, r5, pc}
 8020830:	2400a8bc 	.word	0x2400a8bc

08020834 <abort>:
 8020834:	b508      	push	{r3, lr}
 8020836:	2006      	movs	r0, #6
 8020838:	f000 f82c 	bl	8020894 <raise>
 802083c:	2001      	movs	r0, #1
 802083e:	f7e1 f8f7 	bl	8001a30 <_exit>

08020842 <_raise_r>:
 8020842:	291f      	cmp	r1, #31
 8020844:	b538      	push	{r3, r4, r5, lr}
 8020846:	4604      	mov	r4, r0
 8020848:	460d      	mov	r5, r1
 802084a:	d904      	bls.n	8020856 <_raise_r+0x14>
 802084c:	2316      	movs	r3, #22
 802084e:	6003      	str	r3, [r0, #0]
 8020850:	f04f 30ff 	mov.w	r0, #4294967295
 8020854:	bd38      	pop	{r3, r4, r5, pc}
 8020856:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020858:	b112      	cbz	r2, 8020860 <_raise_r+0x1e>
 802085a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802085e:	b94b      	cbnz	r3, 8020874 <_raise_r+0x32>
 8020860:	4620      	mov	r0, r4
 8020862:	f000 f831 	bl	80208c8 <_getpid_r>
 8020866:	462a      	mov	r2, r5
 8020868:	4601      	mov	r1, r0
 802086a:	4620      	mov	r0, r4
 802086c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020870:	f000 b818 	b.w	80208a4 <_kill_r>
 8020874:	2b01      	cmp	r3, #1
 8020876:	d00a      	beq.n	802088e <_raise_r+0x4c>
 8020878:	1c59      	adds	r1, r3, #1
 802087a:	d103      	bne.n	8020884 <_raise_r+0x42>
 802087c:	2316      	movs	r3, #22
 802087e:	6003      	str	r3, [r0, #0]
 8020880:	2001      	movs	r0, #1
 8020882:	e7e7      	b.n	8020854 <_raise_r+0x12>
 8020884:	2400      	movs	r4, #0
 8020886:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802088a:	4628      	mov	r0, r5
 802088c:	4798      	blx	r3
 802088e:	2000      	movs	r0, #0
 8020890:	e7e0      	b.n	8020854 <_raise_r+0x12>
	...

08020894 <raise>:
 8020894:	4b02      	ldr	r3, [pc, #8]	; (80208a0 <raise+0xc>)
 8020896:	4601      	mov	r1, r0
 8020898:	6818      	ldr	r0, [r3, #0]
 802089a:	f7ff bfd2 	b.w	8020842 <_raise_r>
 802089e:	bf00      	nop
 80208a0:	2400006c 	.word	0x2400006c

080208a4 <_kill_r>:
 80208a4:	b538      	push	{r3, r4, r5, lr}
 80208a6:	4d07      	ldr	r5, [pc, #28]	; (80208c4 <_kill_r+0x20>)
 80208a8:	2300      	movs	r3, #0
 80208aa:	4604      	mov	r4, r0
 80208ac:	4608      	mov	r0, r1
 80208ae:	4611      	mov	r1, r2
 80208b0:	602b      	str	r3, [r5, #0]
 80208b2:	f7e1 f8ad 	bl	8001a10 <_kill>
 80208b6:	1c43      	adds	r3, r0, #1
 80208b8:	d102      	bne.n	80208c0 <_kill_r+0x1c>
 80208ba:	682b      	ldr	r3, [r5, #0]
 80208bc:	b103      	cbz	r3, 80208c0 <_kill_r+0x1c>
 80208be:	6023      	str	r3, [r4, #0]
 80208c0:	bd38      	pop	{r3, r4, r5, pc}
 80208c2:	bf00      	nop
 80208c4:	2400a8bc 	.word	0x2400a8bc

080208c8 <_getpid_r>:
 80208c8:	f7e1 b89a 	b.w	8001a00 <_getpid>

080208cc <_init>:
 80208cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208ce:	bf00      	nop
 80208d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80208d2:	bc08      	pop	{r3}
 80208d4:	469e      	mov	lr, r3
 80208d6:	4770      	bx	lr

080208d8 <_fini>:
 80208d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208da:	bf00      	nop
 80208dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80208de:	bc08      	pop	{r3}
 80208e0:	469e      	mov	lr, r3
 80208e2:	4770      	bx	lr
