
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fc6c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  0801ff10  0801ff10  0002ff10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020a5c  08020a5c  00030a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  08020a64  08020a64  00030a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020a74  08020a74  00030a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  08020a78  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  08020c54  000401dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  08020cb4  0004023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e638  2400029c  08020d14  0004029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400e8d4  08020d14  0004e8d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000402ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006ae5e  00000000  00000000  0004030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009285  00000000  00000000  000ab16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000039c0  00000000  00000000  000b43f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c5f  00000000  00000000  000b7db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000459b3  00000000  00000000  000baa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004306c  00000000  00000000  001003c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018c2f8  00000000  00000000  0014342e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00011190  00000000  00000000  002cf728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  002e08b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400029c 	.word	0x2400029c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801fef4 	.word	0x0801fef4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a0 	.word	0x240002a0
 80002dc:	0801fef4 	.word	0x0801fef4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b970 	b.w	8000a00 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9e08      	ldr	r6, [sp, #32]
 800073e:	460d      	mov	r5, r1
 8000740:	4604      	mov	r4, r0
 8000742:	460f      	mov	r7, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4694      	mov	ip, r2
 800074c:	d965      	bls.n	800081a <__udivmoddi4+0xe2>
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	b143      	cbz	r3, 8000766 <__udivmoddi4+0x2e>
 8000754:	fa02 fc03 	lsl.w	ip, r2, r3
 8000758:	f1c3 0220 	rsb	r2, r3, #32
 800075c:	409f      	lsls	r7, r3
 800075e:	fa20 f202 	lsr.w	r2, r0, r2
 8000762:	4317      	orrs	r7, r2
 8000764:	409c      	lsls	r4, r3
 8000766:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800076a:	fa1f f58c 	uxth.w	r5, ip
 800076e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000772:	0c22      	lsrs	r2, r4, #16
 8000774:	fb0e 7711 	mls	r7, lr, r1, r7
 8000778:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800077c:	fb01 f005 	mul.w	r0, r1, r5
 8000780:	4290      	cmp	r0, r2
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x62>
 8000784:	eb1c 0202 	adds.w	r2, ip, r2
 8000788:	f101 37ff 	add.w	r7, r1, #4294967295
 800078c:	f080 811c 	bcs.w	80009c8 <__udivmoddi4+0x290>
 8000790:	4290      	cmp	r0, r2
 8000792:	f240 8119 	bls.w	80009c8 <__udivmoddi4+0x290>
 8000796:	3902      	subs	r1, #2
 8000798:	4462      	add	r2, ip
 800079a:	1a12      	subs	r2, r2, r0
 800079c:	b2a4      	uxth	r4, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007aa:	fb00 f505 	mul.w	r5, r0, r5
 80007ae:	42a5      	cmp	r5, r4
 80007b0:	d90a      	bls.n	80007c8 <__udivmoddi4+0x90>
 80007b2:	eb1c 0404 	adds.w	r4, ip, r4
 80007b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ba:	f080 8107 	bcs.w	80009cc <__udivmoddi4+0x294>
 80007be:	42a5      	cmp	r5, r4
 80007c0:	f240 8104 	bls.w	80009cc <__udivmoddi4+0x294>
 80007c4:	4464      	add	r4, ip
 80007c6:	3802      	subs	r0, #2
 80007c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11e      	cbz	r6, 80007da <__udivmoddi4+0xa2>
 80007d2:	40dc      	lsrs	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	e9c6 4300 	strd	r4, r3, [r6]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0xbc>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f000 80ed 	beq.w	80009c2 <__udivmoddi4+0x28a>
 80007e8:	2100      	movs	r1, #0
 80007ea:	e9c6 0500 	strd	r0, r5, [r6]
 80007ee:	4608      	mov	r0, r1
 80007f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f4:	fab3 f183 	clz	r1, r3
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d149      	bne.n	8000890 <__udivmoddi4+0x158>
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d302      	bcc.n	8000806 <__udivmoddi4+0xce>
 8000800:	4282      	cmp	r2, r0
 8000802:	f200 80f8 	bhi.w	80009f6 <__udivmoddi4+0x2be>
 8000806:	1a84      	subs	r4, r0, r2
 8000808:	eb65 0203 	sbc.w	r2, r5, r3
 800080c:	2001      	movs	r0, #1
 800080e:	4617      	mov	r7, r2
 8000810:	2e00      	cmp	r6, #0
 8000812:	d0e2      	beq.n	80007da <__udivmoddi4+0xa2>
 8000814:	e9c6 4700 	strd	r4, r7, [r6]
 8000818:	e7df      	b.n	80007da <__udivmoddi4+0xa2>
 800081a:	b902      	cbnz	r2, 800081e <__udivmoddi4+0xe6>
 800081c:	deff      	udf	#255	; 0xff
 800081e:	fab2 f382 	clz	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	f040 8090 	bne.w	8000948 <__udivmoddi4+0x210>
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082e:	fa1f fe8c 	uxth.w	lr, ip
 8000832:	2101      	movs	r1, #1
 8000834:	fbb2 f5f7 	udiv	r5, r2, r7
 8000838:	fb07 2015 	mls	r0, r7, r5, r2
 800083c:	0c22      	lsrs	r2, r4, #16
 800083e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000842:	fb0e f005 	mul.w	r0, lr, r5
 8000846:	4290      	cmp	r0, r2
 8000848:	d908      	bls.n	800085c <__udivmoddi4+0x124>
 800084a:	eb1c 0202 	adds.w	r2, ip, r2
 800084e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000852:	d202      	bcs.n	800085a <__udivmoddi4+0x122>
 8000854:	4290      	cmp	r0, r2
 8000856:	f200 80cb 	bhi.w	80009f0 <__udivmoddi4+0x2b8>
 800085a:	4645      	mov	r5, r8
 800085c:	1a12      	subs	r2, r2, r0
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb2 f0f7 	udiv	r0, r2, r7
 8000864:	fb07 2210 	mls	r2, r7, r0, r2
 8000868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086c:	fb0e fe00 	mul.w	lr, lr, r0
 8000870:	45a6      	cmp	lr, r4
 8000872:	d908      	bls.n	8000886 <__udivmoddi4+0x14e>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 32ff 	add.w	r2, r0, #4294967295
 800087c:	d202      	bcs.n	8000884 <__udivmoddi4+0x14c>
 800087e:	45a6      	cmp	lr, r4
 8000880:	f200 80bb 	bhi.w	80009fa <__udivmoddi4+0x2c2>
 8000884:	4610      	mov	r0, r2
 8000886:	eba4 040e 	sub.w	r4, r4, lr
 800088a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800088e:	e79f      	b.n	80007d0 <__udivmoddi4+0x98>
 8000890:	f1c1 0720 	rsb	r7, r1, #32
 8000894:	408b      	lsls	r3, r1
 8000896:	fa22 fc07 	lsr.w	ip, r2, r7
 800089a:	ea4c 0c03 	orr.w	ip, ip, r3
 800089e:	fa05 f401 	lsl.w	r4, r5, r1
 80008a2:	fa20 f307 	lsr.w	r3, r0, r7
 80008a6:	40fd      	lsrs	r5, r7
 80008a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ac:	4323      	orrs	r3, r4
 80008ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80008b2:	fa1f fe8c 	uxth.w	lr, ip
 80008b6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ba:	0c1c      	lsrs	r4, r3, #16
 80008bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008c0:	fb08 f50e 	mul.w	r5, r8, lr
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	fa02 f201 	lsl.w	r2, r2, r1
 80008ca:	fa00 f001 	lsl.w	r0, r0, r1
 80008ce:	d90b      	bls.n	80008e8 <__udivmoddi4+0x1b0>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d8:	f080 8088 	bcs.w	80009ec <__udivmoddi4+0x2b4>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	f240 8085 	bls.w	80009ec <__udivmoddi4+0x2b4>
 80008e2:	f1a8 0802 	sub.w	r8, r8, #2
 80008e6:	4464      	add	r4, ip
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	b29d      	uxth	r5, r3
 80008ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80008f0:	fb09 4413 	mls	r4, r9, r3, r4
 80008f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x1da>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f103 35ff 	add.w	r5, r3, #4294967295
 8000908:	d26c      	bcs.n	80009e4 <__udivmoddi4+0x2ac>
 800090a:	45a6      	cmp	lr, r4
 800090c:	d96a      	bls.n	80009e4 <__udivmoddi4+0x2ac>
 800090e:	3b02      	subs	r3, #2
 8000910:	4464      	add	r4, ip
 8000912:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000916:	fba3 9502 	umull	r9, r5, r3, r2
 800091a:	eba4 040e 	sub.w	r4, r4, lr
 800091e:	42ac      	cmp	r4, r5
 8000920:	46c8      	mov	r8, r9
 8000922:	46ae      	mov	lr, r5
 8000924:	d356      	bcc.n	80009d4 <__udivmoddi4+0x29c>
 8000926:	d053      	beq.n	80009d0 <__udivmoddi4+0x298>
 8000928:	b156      	cbz	r6, 8000940 <__udivmoddi4+0x208>
 800092a:	ebb0 0208 	subs.w	r2, r0, r8
 800092e:	eb64 040e 	sbc.w	r4, r4, lr
 8000932:	fa04 f707 	lsl.w	r7, r4, r7
 8000936:	40ca      	lsrs	r2, r1
 8000938:	40cc      	lsrs	r4, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	e9c6 7400 	strd	r7, r4, [r6]
 8000940:	4618      	mov	r0, r3
 8000942:	2100      	movs	r1, #0
 8000944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000948:	f1c3 0120 	rsb	r1, r3, #32
 800094c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000950:	fa20 f201 	lsr.w	r2, r0, r1
 8000954:	fa25 f101 	lsr.w	r1, r5, r1
 8000958:	409d      	lsls	r5, r3
 800095a:	432a      	orrs	r2, r5
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb1 f0f7 	udiv	r0, r1, r7
 8000968:	fb07 1510 	mls	r5, r7, r0, r1
 800096c:	0c11      	lsrs	r1, r2, #16
 800096e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000972:	fb00 f50e 	mul.w	r5, r0, lr
 8000976:	428d      	cmp	r5, r1
 8000978:	fa04 f403 	lsl.w	r4, r4, r3
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x258>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f100 38ff 	add.w	r8, r0, #4294967295
 8000986:	d22f      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 8000988:	428d      	cmp	r5, r1
 800098a:	d92d      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 800098c:	3802      	subs	r0, #2
 800098e:	4461      	add	r1, ip
 8000990:	1b49      	subs	r1, r1, r5
 8000992:	b292      	uxth	r2, r2
 8000994:	fbb1 f5f7 	udiv	r5, r1, r7
 8000998:	fb07 1115 	mls	r1, r7, r5, r1
 800099c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009a0:	fb05 f10e 	mul.w	r1, r5, lr
 80009a4:	4291      	cmp	r1, r2
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x282>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b0:	d216      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 80009b2:	4291      	cmp	r1, r2
 80009b4:	d914      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 80009b6:	3d02      	subs	r5, #2
 80009b8:	4462      	add	r2, ip
 80009ba:	1a52      	subs	r2, r2, r1
 80009bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009c0:	e738      	b.n	8000834 <__udivmoddi4+0xfc>
 80009c2:	4631      	mov	r1, r6
 80009c4:	4630      	mov	r0, r6
 80009c6:	e708      	b.n	80007da <__udivmoddi4+0xa2>
 80009c8:	4639      	mov	r1, r7
 80009ca:	e6e6      	b.n	800079a <__udivmoddi4+0x62>
 80009cc:	4610      	mov	r0, r2
 80009ce:	e6fb      	b.n	80007c8 <__udivmoddi4+0x90>
 80009d0:	4548      	cmp	r0, r9
 80009d2:	d2a9      	bcs.n	8000928 <__udivmoddi4+0x1f0>
 80009d4:	ebb9 0802 	subs.w	r8, r9, r2
 80009d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009dc:	3b01      	subs	r3, #1
 80009de:	e7a3      	b.n	8000928 <__udivmoddi4+0x1f0>
 80009e0:	4645      	mov	r5, r8
 80009e2:	e7ea      	b.n	80009ba <__udivmoddi4+0x282>
 80009e4:	462b      	mov	r3, r5
 80009e6:	e794      	b.n	8000912 <__udivmoddi4+0x1da>
 80009e8:	4640      	mov	r0, r8
 80009ea:	e7d1      	b.n	8000990 <__udivmoddi4+0x258>
 80009ec:	46d0      	mov	r8, sl
 80009ee:	e77b      	b.n	80008e8 <__udivmoddi4+0x1b0>
 80009f0:	3d02      	subs	r5, #2
 80009f2:	4462      	add	r2, ip
 80009f4:	e732      	b.n	800085c <__udivmoddi4+0x124>
 80009f6:	4608      	mov	r0, r1
 80009f8:	e70a      	b.n	8000810 <__udivmoddi4+0xd8>
 80009fa:	4464      	add	r4, ip
 80009fc:	3802      	subs	r0, #2
 80009fe:	e742      	b.n	8000886 <__udivmoddi4+0x14e>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a10:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DMA_Init+0x4c>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f001 fd27 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	200b      	movs	r0, #11
 8000a34:	f001 fd3e 	bl	80024b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	200c      	movs	r0, #12
 8000a3e:	f001 fd1f 	bl	8002480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a42:	200c      	movs	r0, #12
 8000a44:	f001 fd36 	bl	80024b4 <HAL_NVIC_EnableIRQ>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	58024400 	.word	0x58024400

08000a54 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <MX_ETH_Init+0x84>)
 8000a5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_ETH_Init+0x88>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ETH_Init+0x88>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ETH_Init+0x88>)
 8000a6c:	22e1      	movs	r2, #225	; 0xe1
 8000a6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_ETH_Init+0x88>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ETH_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ETH_Init+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a84:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_ETH_Init+0x88>)
 8000a86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <MX_ETH_Init+0x8c>)
 8000a92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_ETH_Init+0x90>)
 8000a98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000a9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000aa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ETH_Init+0x80>)
 8000aa4:	f004 fb50 	bl	8005148 <HAL_ETH_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 fee9 	bl	8001884 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ab2:	2238      	movs	r2, #56	; 0x38
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ab8:	f01d fb4f 	bl	801e15a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000abe:	2221      	movs	r2, #33	; 0x21
 8000ac0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ac8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_ETH_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	240002f0 	.word	0x240002f0
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	240003a0 	.word	0x240003a0
 8000ae0:	2400023c 	.word	0x2400023c
 8000ae4:	240001dc 	.word	0x240001dc
 8000ae8:	240002b8 	.word	0x240002b8

08000aec <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <HAL_ETH_MspInit+0x184>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	f040 80ab 	bne.w	8000c66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b16:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a39      	ldr	r2, [pc, #228]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be2:	2332      	movs	r3, #50	; 0x32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481e      	ldr	r0, [pc, #120]	; (8000c78 <HAL_ETH_MspInit+0x18c>)
 8000bfe:	f004 fec7 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c02:	2386      	movs	r3, #134	; 0x86
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c12:	230b      	movs	r3, #11
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <HAL_ETH_MspInit+0x190>)
 8000c1e:	f004 feb7 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4810      	ldr	r0, [pc, #64]	; (8000c80 <HAL_ETH_MspInit+0x194>)
 8000c40:	f004 fea6 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_ETH_MspInit+0x198>)
 8000c62:	f004 fe95 	bl	8005990 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40028000 	.word	0x40028000
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020800 	.word	0x58020800
 8000c7c:	58020000 	.word	0x58020000
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58021800 	.word	0x58021800

08000c88 <DelayFunction>:
//	GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
//	GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);
//}

void DelayFunction(uint16_t ms)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	osDelay(ms);
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f018 fe51 	bl	801993c <osDelay>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	inter_flag = 0;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_UART_RxCpltCallback+0x2c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
	++INTERRUPTS;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x30>)
 8000cba:	6013      	str	r3, [r2, #0]
	//HAL_UART_Receive_DMA(&huart2, GNSS_Handle.uartWorkingBuffer, 10);
	//xTaskResumeFromISR(ReceiveGNSSDataHandle);
	xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_UART_RxCpltCallback+0x34>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <HAL_UART_RxCpltCallback+0x38>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f019 fae1 	bl	801a28a <xQueueGiveFromISR>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000400 	.word	0x24000400
 8000cd4:	24000404 	.word	0x24000404
 8000cd8:	240084d4 	.word	0x240084d4
 8000cdc:	24000408 	.word	0x24000408

08000ce0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_UARTEx_RxEventCallback+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_UARTEx_RxEventCallback+0x32>
	{
		inter_flag = Size;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cfa:	6013      	str	r3, [r2, #0]
		++INTERRUPTS;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x44>)
 8000d04:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR(GNNS_UART_INTERRUPTHandle, &GiveSemaphoreResult);
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_UARTEx_RxEventCallback+0x48>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4908      	ldr	r1, [pc, #32]	; (8000d2c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f019 fabc 	bl	801a28a <xQueueGiveFromISR>
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	24000400 	.word	0x24000400
 8000d24:	24000404 	.word	0x24000404
 8000d28:	240084d4 	.word	0x240084d4
 8000d2c:	24000408 	.word	0x24000408

08000d30 <Receive_IT>:

void Receive_IT()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 421);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <Receive_IT+0x4c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f240 12a5 	movw	r2, #421	; 0x1a5
 8000d3c:	4910      	ldr	r1, [pc, #64]	; (8000d80 <Receive_IT+0x50>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f009 f96e 	bl	800a020 <HAL_UART_Receive_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <Receive_IT+0x54>)
 8000d4a:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT Status: %d", uart_result);
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <Receive_IT+0x54>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d010      	beq.n	8000d76 <Receive_IT+0x46>
 8000d54:	f001 fa8c 	bl	8002270 <HAL_GetTick>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	23a5      	movs	r3, #165	; 0xa5
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <Receive_IT+0x58>)
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <Receive_IT+0x5c>)
 8000d60:	f01d f9a6 	bl	801e0b0 <iprintf>
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <Receive_IT+0x54>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <Receive_IT+0x60>)
 8000d6c:	f01d f9a0 	bl	801e0b0 <iprintf>
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <Receive_IT+0x64>)
 8000d72:	f01d f99d 	bl	801e0b0 <iprintf>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400e340 	.word	0x2400e340
 8000d80:	2400e34c 	.word	0x2400e34c
 8000d84:	2400040c 	.word	0x2400040c
 8000d88:	08020420 	.word	0x08020420
 8000d8c:	0801ff4c 	.word	0x0801ff4c
 8000d90:	0801ff5c 	.word	0x0801ff5c
 8000d94:	0801ff74 	.word	0x0801ff74

08000d98 <Receive_IT_IDLE>:

void Receive_IT_IDLE()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, sizeof(GNSS_Handle.uartWorkingBuffer));
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <Receive_IT_IDLE+0x4c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da4:	4910      	ldr	r1, [pc, #64]	; (8000de8 <Receive_IT_IDLE+0x50>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00b ff3d 	bl	800cc26 <HAL_UARTEx_ReceiveToIdle_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000db2:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d010      	beq.n	8000dde <Receive_IT_IDLE+0x46>
 8000dbc:	f001 fa58 	bl	8002270 <HAL_GetTick>
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	23ab      	movs	r3, #171	; 0xab
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <Receive_IT_IDLE+0x58>)
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <Receive_IT_IDLE+0x5c>)
 8000dc8:	f01d f972 	bl	801e0b0 <iprintf>
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <Receive_IT_IDLE+0x54>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Receive_IT_IDLE+0x60>)
 8000dd4:	f01d f96c 	bl	801e0b0 <iprintf>
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <Receive_IT_IDLE+0x64>)
 8000dda:	f01d f969 	bl	801e0b0 <iprintf>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2400e340 	.word	0x2400e340
 8000de8:	2400e34c 	.word	0x2400e34c
 8000dec:	2400040c 	.word	0x2400040c
 8000df0:	0802042c 	.word	0x0802042c
 8000df4:	0801ff4c 	.word	0x0801ff4c
 8000df8:	0801ff78 	.word	0x0801ff78
 8000dfc:	0801ff74 	.word	0x0801ff74

08000e00 <Receive_DMA>:
	uart_result = HAL_UARTEx_ReceiveToIdle_IT(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 100);
	if(uart_result != 0) LOG("Receive_IT_IDLE Status: %d", uart_result);
}

void Receive_DMA()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	uart_result = HAL_UART_Receive_DMA(GNSS_Handle.huart, GNSS_Handle.uartWorkingBuffer, 10);
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <Receive_DMA+0x48>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	220a      	movs	r2, #10
 8000e0a:	4910      	ldr	r1, [pc, #64]	; (8000e4c <Receive_DMA+0x4c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f009 f9d3 	bl	800a1b8 <HAL_UART_Receive_DMA>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <Receive_DMA+0x50>)
 8000e18:	701a      	strb	r2, [r3, #0]
	if(uart_result != 0) LOG("Receive_DMA Status: %d", uart_result);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <Receive_DMA+0x50>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d010      	beq.n	8000e44 <Receive_DMA+0x44>
 8000e22:	f001 fa25 	bl	8002270 <HAL_GetTick>
 8000e26:	4601      	mov	r1, r0
 8000e28:	23bb      	movs	r3, #187	; 0xbb
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <Receive_DMA+0x54>)
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <Receive_DMA+0x58>)
 8000e2e:	f01d f93f 	bl	801e0b0 <iprintf>
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <Receive_DMA+0x50>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <Receive_DMA+0x5c>)
 8000e3a:	f01d f939 	bl	801e0b0 <iprintf>
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <Receive_DMA+0x60>)
 8000e40:	f01d f936 	bl	801e0b0 <iprintf>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2400e340 	.word	0x2400e340
 8000e4c:	2400e34c 	.word	0x2400e34c
 8000e50:	2400040c 	.word	0x2400040c
 8000e54:	0802043c 	.word	0x0802043c
 8000e58:	0801ff4c 	.word	0x0801ff4c
 8000e5c:	0801ffdc 	.word	0x0801ffdc
 8000e60:	0801ff74 	.word	0x0801ff74

08000e64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//		Bmx160_init();
	LOG("BMX INIT");
 8000e68:	f001 fa02 	bl	8002270 <HAL_GetTick>
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	23d9      	movs	r3, #217	; 0xd9
 8000e70:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_FREERTOS_Init+0x64>)
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_FREERTOS_Init+0x68>)
 8000e74:	f01d f91c 	bl	801e0b0 <iprintf>
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <MX_FREERTOS_Init+0x6c>)
 8000e7a:	f01d f919 	bl	801e0b0 <iprintf>
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_FREERTOS_Init+0x70>)
 8000e80:	f01d f916 	bl	801e0b0 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of GNNS_UART_INTERRUPT */
  GNNS_UART_INTERRUPTHandle = osSemaphoreNew(1, 1, &GNNS_UART_INTERRUPT_attributes);
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <MX_FREERTOS_Init+0x74>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f018 fd72 	bl	8019972 <osSemaphoreNew>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_FREERTOS_Init+0x78>)
 8000e92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_FREERTOS_Init+0x7c>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <MX_FREERTOS_Init+0x80>)
 8000e9a:	f018 fcbd 	bl	8019818 <osThreadNew>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <MX_FREERTOS_Init+0x84>)
 8000ea2:	6013      	str	r3, [r2, #0]

  /* creation of AccMeassure */
  AccMeassureHandle = osThreadNew(StartAccMeassureTask, NULL, &AccMeassure_attributes);
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <MX_FREERTOS_Init+0x88>)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_FREERTOS_Init+0x8c>)
 8000eaa:	f018 fcb5 	bl	8019818 <osThreadNew>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <MX_FREERTOS_Init+0x90>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveGNSSData */
  ReceiveGNSSDataHandle = osThreadNew(StartReceiveGNSSDataTask, NULL, &ReceiveGNSSData_attributes);
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <MX_FREERTOS_Init+0x94>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_FREERTOS_Init+0x98>)
 8000eba:	f018 fcad 	bl	8019818 <osThreadNew>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_FREERTOS_Init+0x9c>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	08020448 	.word	0x08020448
 8000ecc:	0801ff4c 	.word	0x0801ff4c
 8000ed0:	08020010 	.word	0x08020010
 8000ed4:	0801ff74 	.word	0x0801ff74
 8000ed8:	08020410 	.word	0x08020410
 8000edc:	240084d4 	.word	0x240084d4
 8000ee0:	080203a4 	.word	0x080203a4
 8000ee4:	08000f05 	.word	0x08000f05
 8000ee8:	24000410 	.word	0x24000410
 8000eec:	080203c8 	.word	0x080203c8
 8000ef0:	08000fb9 	.word	0x08000fb9
 8000ef4:	24000414 	.word	0x24000414
 8000ef8:	080203ec 	.word	0x080203ec
 8000efc:	080010d1 	.word	0x080010d1
 8000f00:	24004474 	.word	0x24004474

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	Vec3 Pos, Acc, Vel;
	int flag = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4821      	ldr	r0, [pc, #132]	; (8000f9c <StartDefaultTask+0x98>)
 8000f16:	f004 feeb 	bl	8005cf0 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d038      	beq.n	8000f92 <StartDefaultTask+0x8e>
	{
		LOG("PUSHED BUTTON");
 8000f20:	f001 f9a6 	bl	8002270 <HAL_GetTick>
 8000f24:	4601      	mov	r1, r0
 8000f26:	f240 1315 	movw	r3, #277	; 0x115
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f2c:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f2e:	f01d f8bf 	bl	801e0b0 <iprintf>
 8000f32:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <StartDefaultTask+0xa4>)
 8000f34:	f01d f8bc 	bl	801e0b0 <iprintf>
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <StartDefaultTask+0xa8>)
 8000f3a:	f01d f8b9 	bl	801e0b0 <iprintf>
		//GNSS_GetUniqID(&GNSS_Handle);
		if(flag == 0)
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d113      	bne.n	8000f6c <StartDefaultTask+0x68>
		{
			LOG("Receive DMA");
 8000f44:	f001 f994 	bl	8002270 <HAL_GetTick>
 8000f48:	4601      	mov	r1, r0
 8000f4a:	f240 1319 	movw	r3, #281	; 0x119
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f52:	f01d f8ad 	bl	801e0b0 <iprintf>
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <StartDefaultTask+0xac>)
 8000f58:	f01d f8aa 	bl	801e0b0 <iprintf>
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <StartDefaultTask+0xa8>)
 8000f5e:	f01d f8a7 	bl	801e0b0 <iprintf>
			Receive_DMA();
 8000f62:	f7ff ff4d 	bl	8000e00 <Receive_DMA>
			flag = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6a:	e012      	b.n	8000f92 <StartDefaultTask+0x8e>
		}
		else
		{
			LOG("Receive IT");
 8000f6c:	f001 f980 	bl	8002270 <HAL_GetTick>
 8000f70:	4601      	mov	r1, r0
 8000f72:	f240 131f 	movw	r3, #287	; 0x11f
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <StartDefaultTask+0x9c>)
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <StartDefaultTask+0xa0>)
 8000f7a:	f01d f899 	bl	801e0b0 <iprintf>
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <StartDefaultTask+0xb0>)
 8000f80:	f01d f896 	bl	801e0b0 <iprintf>
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <StartDefaultTask+0xa8>)
 8000f86:	f01d f893 	bl	801e0b0 <iprintf>
			Receive_IT();
 8000f8a:	f7ff fed1 	bl	8000d30 <Receive_IT>
			flag = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
//	Vel = GetVelocity();
	//LOG("Vel: %f, \t%f, \t%f\tPos: %f, \t%f, \t%f", Vel.x, Vel.y, Vel.z, Pos.x, Pos.y, Pos.z);
	//LOG("INTERRUPTS: %d, inter_flag: %d, UART state: %d", INTERRUPTS, inter_flag, GNSS_Handle.huart->RxState);
	//GNSS_GetPVTData(&GNSS_Handle);
	//GNSS_GetPVTData(&GNSS_Handle);
    osDelay(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f018 fcd1 	bl	801993c <osDelay>
	if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin))
 8000f9a:	e7b9      	b.n	8000f10 <StartDefaultTask+0xc>
 8000f9c:	58020800 	.word	0x58020800
 8000fa0:	0802045c 	.word	0x0802045c
 8000fa4:	0801ff4c 	.word	0x0801ff4c
 8000fa8:	0802001c 	.word	0x0802001c
 8000fac:	0801ff74 	.word	0x0801ff74
 8000fb0:	0802002c 	.word	0x0802002c
 8000fb4:	08020038 	.word	0x08020038

08000fb8 <StartAccMeassureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccMeassureTask */
void StartAccMeassureTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	//static float x = 0.0f, y = 0.0f, z = 0.0f, step = 0.005;
  /* USER CODE BEGIN StartAccMeassureTask */
  /* Infinite loop */
	Bmx160_init();
 8000fc0:	f01b fcd4 	bl	801c96c <Bmx160_init>
	LOG("After INIT");
 8000fc4:	f001 f954 	bl	8002270 <HAL_GetTick>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	f240 1355 	movw	r3, #341	; 0x155
 8000fce:	4a37      	ldr	r2, [pc, #220]	; (80010ac <StartAccMeassureTask+0xf4>)
 8000fd0:	4837      	ldr	r0, [pc, #220]	; (80010b0 <StartAccMeassureTask+0xf8>)
 8000fd2:	f01d f86d 	bl	801e0b0 <iprintf>
 8000fd6:	4837      	ldr	r0, [pc, #220]	; (80010b4 <StartAccMeassureTask+0xfc>)
 8000fd8:	f01d f86a 	bl	801e0b0 <iprintf>
 8000fdc:	4836      	ldr	r0, [pc, #216]	; (80010b8 <StartAccMeassureTask+0x100>)
 8000fde:	f01d f867 	bl	801e0b0 <iprintf>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8000fe2:	4a36      	ldr	r2, [pc, #216]	; (80010bc <StartAccMeassureTask+0x104>)
 8000fe4:	4936      	ldr	r1, [pc, #216]	; (80010c0 <StartAccMeassureTask+0x108>)
 8000fe6:	4837      	ldr	r0, [pc, #220]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8000fe8:	f01b fda4 	bl	801cb34 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <StartAccMeassureTask+0x104>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <StartAccMeassureTask+0x110>)
 8000ff2:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <StartAccMeassureTask+0x104>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <StartAccMeassureTask+0x110>)
 8000ffa:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <StartAccMeassureTask+0x104>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001002:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <StartAccMeassureTask+0x110>)
 800100a:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <StartAccMeassureTask+0x108>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001012:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <StartAccMeassureTask+0x110>)
 800101a:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001022:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <StartAccMeassureTask+0x110>)
 800102a:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001032:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <StartAccMeassureTask+0x110>)
 800103a:	6253      	str	r3, [r2, #36]	; 0x24
	InitAlgorithms(&SensorData);
 800103c:	4822      	ldr	r0, [pc, #136]	; (80010c8 <StartAccMeassureTask+0x110>)
 800103e:	f00c fabf 	bl	800d5c0 <InitAlgorithms>
//			osDelay(5);
//		}
//		printf("%f %f %f\n\r", (sum_x/((float)(steps))), (sum_y/((float)(steps))), (sum_z/((float)(steps))));
//		sum_x = 0.0f; sum_y = 0.0f; sum_z = 0.0f;
//	}
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <StartAccMeassureTask+0x104>)
 8001044:	491e      	ldr	r1, [pc, #120]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001048:	f01b fd74 	bl	801cb34 <Bmx160_getAllData>
	SensorData.Acc.x = Oaccel.x;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <StartAccMeassureTask+0x104>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001052:	60d3      	str	r3, [r2, #12]
	SensorData.Acc.y = Oaccel.y;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <StartAccMeassureTask+0x104>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <StartAccMeassureTask+0x110>)
 800105a:	6113      	str	r3, [r2, #16]
	SensorData.Acc.z = Oaccel.z;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <StartAccMeassureTask+0x104>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001062:	6153      	str	r3, [r2, #20]
	SensorData.Gyro.x = Ogyro.x;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <StartAccMeassureTask+0x110>)
 800106a:	6193      	str	r3, [r2, #24]
	SensorData.Gyro.y = Ogyro.y;
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <StartAccMeassureTask+0x108>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001072:	61d3      	str	r3, [r2, #28]
	SensorData.Gyro.z = Ogyro.z;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <StartAccMeassureTask+0x108>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <StartAccMeassureTask+0x110>)
 800107a:	6213      	str	r3, [r2, #32]
	SensorData.Mag.x = Omagn.x;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001082:	6013      	str	r3, [r2, #0]
	SensorData.Mag.y = Omagn.y;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <StartAccMeassureTask+0x110>)
 800108a:	6053      	str	r3, [r2, #4]
	SensorData.Mag.z = Omagn.z;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <StartAccMeassureTask+0x10c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <StartAccMeassureTask+0x110>)
 8001092:	6093      	str	r3, [r2, #8]
	SensorData.SensorTime = Omagn.sensortime;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <StartAccMeassureTask+0x10c>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <StartAccMeassureTask+0x110>)
 800109a:	6253      	str	r3, [r2, #36]	; 0x24
	MadgwickUpdate(&SensorData);
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <StartAccMeassureTask+0x110>)
 800109e:	f00c fb23 	bl	800d6e8 <MadgwickUpdate>
//	//LOG("Raw:0,0,0,0,0,0,%d,%d,%d\n\r", mx, my, mz);
//	LOG("Raw:%f,%f,%f,%f,%f,%f,%f,%f,%f\n\r",
//			SensorData.Acc.x, SensorData.Acc.y, SensorData.Acc.z,
//			SensorData.Gyro.x, SensorData.Gyro.y, SensorData.Gyro.z,
//			SensorData.Mag.x, SensorData.Mag.y, SensorData.Mag.z);
	osDelay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f018 fc4a 	bl	801993c <osDelay>
	Bmx160_getAllData(&Omagn, &Ogyro, &Oaccel);
 80010a8:	e7cb      	b.n	8001042 <StartAccMeassureTask+0x8a>
 80010aa:	bf00      	nop
 80010ac:	08020470 	.word	0x08020470
 80010b0:	0801ff4c 	.word	0x0801ff4c
 80010b4:	08020044 	.word	0x08020044
 80010b8:	0801ff74 	.word	0x0801ff74
 80010bc:	240003b8 	.word	0x240003b8
 80010c0:	240003c8 	.word	0x240003c8
 80010c4:	240003a8 	.word	0x240003a8
 80010c8:	240003d8 	.word	0x240003d8
 80010cc:	00000000 	.word	0x00000000

080010d0 <StartReceiveGNSSDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveGNSSDataTask */
void StartReceiveGNSSDataTask(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveGNSSDataTask */
  /* Infinite loop */
	osDelay(10000);
 80010d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80010dc:	f018 fc2e 	bl	801993c <osDelay>
	LOG("GNSS INIT");
 80010e0:	f001 f8c6 	bl	8002270 <HAL_GetTick>
 80010e4:	4601      	mov	r1, r0
 80010e6:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80010ea:	4ab9      	ldr	r2, [pc, #740]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80010ec:	48b9      	ldr	r0, [pc, #740]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80010ee:	f01c ffdf 	bl	801e0b0 <iprintf>
 80010f2:	48b9      	ldr	r0, [pc, #740]	; (80013d8 <StartReceiveGNSSDataTask+0x308>)
 80010f4:	f01c ffdc 	bl	801e0b0 <iprintf>
 80010f8:	48b8      	ldr	r0, [pc, #736]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80010fa:	f01c ffd9 	bl	801e0b0 <iprintf>
	GNSS_Init(&GNSS_Handle, &huart1, DelayFunction);
 80010fe:	4ab8      	ldr	r2, [pc, #736]	; (80013e0 <StartReceiveGNSSDataTask+0x310>)
 8001100:	49b8      	ldr	r1, [pc, #736]	; (80013e4 <StartReceiveGNSSDataTask+0x314>)
 8001102:	48b9      	ldr	r0, [pc, #740]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001104:	f01b ff10 	bl	801cf28 <GNSS_Init>
	osDelay(100);
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f018 fc17 	bl	801993c <osDelay>
	LOG("GNSS LOAD CONFIG");
 800110e:	f001 f8af 	bl	8002270 <HAL_GetTick>
 8001112:	4601      	mov	r1, r0
 8001114:	f240 13a5 	movw	r3, #421	; 0x1a5
 8001118:	4aad      	ldr	r2, [pc, #692]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 800111a:	48ae      	ldr	r0, [pc, #696]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800111c:	f01c ffc8 	bl	801e0b0 <iprintf>
 8001120:	48b2      	ldr	r0, [pc, #712]	; (80013ec <StartReceiveGNSSDataTask+0x31c>)
 8001122:	f01c ffc5 	bl	801e0b0 <iprintf>
 8001126:	48ad      	ldr	r0, [pc, #692]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001128:	f01c ffc2 	bl	801e0b0 <iprintf>
	//GNSS_LoadConfig(&GNSS_Handle);
	LOG("GNSS CONFIG LOADED!!!");
 800112c:	f001 f8a0 	bl	8002270 <HAL_GetTick>
 8001130:	4601      	mov	r1, r0
 8001132:	f240 13a7 	movw	r3, #423	; 0x1a7
 8001136:	4aa6      	ldr	r2, [pc, #664]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001138:	48a6      	ldr	r0, [pc, #664]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800113a:	f01c ffb9 	bl	801e0b0 <iprintf>
 800113e:	48ac      	ldr	r0, [pc, #688]	; (80013f0 <StartReceiveGNSSDataTask+0x320>)
 8001140:	f01c ffb6 	bl	801e0b0 <iprintf>
 8001144:	48a5      	ldr	r0, [pc, #660]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001146:	f01c ffb3 	bl	801e0b0 <iprintf>
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portMAX_DELAY);
 800114a:	4baa      	ldr	r3, [pc, #680]	; (80013f4 <StartReceiveGNSSDataTask+0x324>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f04f 31ff 	mov.w	r1, #4294967295
 8001152:	4618      	mov	r0, r3
 8001154:	f019 f9fa 	bl	801a54c <xQueueSemaphoreTake>
  for(;;)
  {
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 8001158:	4ba3      	ldr	r3, [pc, #652]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2208      	movs	r2, #8
 800115e:	49a6      	ldr	r1, [pc, #664]	; (80013f8 <StartReceiveGNSSDataTask+0x328>)
 8001160:	4618      	mov	r0, r3
 8001162:	f008 ffa9 	bl	800a0b8 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
    Receive_IT_IDLE();
 8001166:	f7ff fe17 	bl	8000d98 <Receive_IT_IDLE>
	//AskPvtReceive_IT_IDLE();
	LOG("Waiting for semaphore...");
 800116a:	f001 f881 	bl	8002270 <HAL_GetTick>
 800116e:	4601      	mov	r1, r0
 8001170:	f240 13af 	movw	r3, #431	; 0x1af
 8001174:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001176:	4897      	ldr	r0, [pc, #604]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001178:	f01c ff9a 	bl	801e0b0 <iprintf>
 800117c:	489f      	ldr	r0, [pc, #636]	; (80013fc <StartReceiveGNSSDataTask+0x32c>)
 800117e:	f01c ff97 	bl	801e0b0 <iprintf>
 8001182:	4896      	ldr	r0, [pc, #600]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001184:	f01c ff94 	bl	801e0b0 <iprintf>
	xSemaphoreTake(GNNS_UART_INTERRUPTHandle, portTICK_PERIOD_MS*3000);
 8001188:	4b9a      	ldr	r3, [pc, #616]	; (80013f4 <StartReceiveGNSSDataTask+0x324>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001190:	4618      	mov	r0, r3
 8001192:	f019 f9db 	bl	801a54c <xQueueSemaphoreTake>
	LOG("Got into loop, no.%d", INTERRUPTS);
 8001196:	f001 f86b 	bl	8002270 <HAL_GetTick>
 800119a:	4601      	mov	r1, r0
 800119c:	f240 13b1 	movw	r3, #433	; 0x1b1
 80011a0:	4a8b      	ldr	r2, [pc, #556]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80011a2:	488c      	ldr	r0, [pc, #560]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80011a4:	f01c ff84 	bl	801e0b0 <iprintf>
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <StartReceiveGNSSDataTask+0x330>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4895      	ldr	r0, [pc, #596]	; (8001404 <StartReceiveGNSSDataTask+0x334>)
 80011b0:	f01c ff7e 	bl	801e0b0 <iprintf>
 80011b4:	4889      	ldr	r0, [pc, #548]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80011b6:	f01c ff7b 	bl	801e0b0 <iprintf>
	if(inter_flag == 0)
 80011ba:	4b93      	ldr	r3, [pc, #588]	; (8001408 <StartReceiveGNSSDataTask+0x338>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d112      	bne.n	80011e8 <StartReceiveGNSSDataTask+0x118>
	{
		LOG("NORMAL GNSS INTERRUPT[%d]!!!", INTERRUPTS);
 80011c2:	f001 f855 	bl	8002270 <HAL_GetTick>
 80011c6:	4601      	mov	r1, r0
 80011c8:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80011cc:	4a80      	ldr	r2, [pc, #512]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80011ce:	4881      	ldr	r0, [pc, #516]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80011d0:	f01c ff6e 	bl	801e0b0 <iprintf>
 80011d4:	4b8a      	ldr	r3, [pc, #552]	; (8001400 <StartReceiveGNSSDataTask+0x330>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	488c      	ldr	r0, [pc, #560]	; (800140c <StartReceiveGNSSDataTask+0x33c>)
 80011dc:	f01c ff68 	bl	801e0b0 <iprintf>
 80011e0:	487e      	ldr	r0, [pc, #504]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80011e2:	f01c ff65 	bl	801e0b0 <iprintf>
 80011e6:	e013      	b.n	8001210 <StartReceiveGNSSDataTask+0x140>
	}
	else
	{
		LOG("IDLE GNSS INTERRUPT[%d], SIZE: %d", INTERRUPTS, inter_flag);
 80011e8:	f001 f842 	bl	8002270 <HAL_GetTick>
 80011ec:	4601      	mov	r1, r0
 80011ee:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80011f2:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80011f4:	4877      	ldr	r0, [pc, #476]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80011f6:	f01c ff5b 	bl	801e0b0 <iprintf>
 80011fa:	4b81      	ldr	r3, [pc, #516]	; (8001400 <StartReceiveGNSSDataTask+0x330>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a82      	ldr	r2, [pc, #520]	; (8001408 <StartReceiveGNSSDataTask+0x338>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4882      	ldr	r0, [pc, #520]	; (8001410 <StartReceiveGNSSDataTask+0x340>)
 8001206:	f01c ff53 	bl	801e0b0 <iprintf>
 800120a:	4874      	ldr	r0, [pc, #464]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 800120c:	f01c ff50 	bl	801e0b0 <iprintf>
//	for(uint16_t size = 0; size < sizeofTable; ++size)
//		printf("%x ", GNSS_Handle.uartWorkingBuffer[size]);
//	printf("\n\n\r");
    //printf("%s \n\r", GNSS_Handle.uartWorkingBuffer);
	//GNSS_ParsePVTData(&GNSS_Handle);
	GNSS_ParsePVTDataPTR(&GNSS_Handle);
 8001210:	4875      	ldr	r0, [pc, #468]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001212:	f01b fed9 	bl	801cfc8 <GNSS_ParsePVTDataPTR>
	LOG("Buffer: %d", GNSS_Handle.uartWorkingBuffer[0]);
 8001216:	f001 f82b 	bl	8002270 <HAL_GetTick>
 800121a:	4601      	mov	r1, r0
 800121c:	f240 13c3 	movw	r3, #451	; 0x1c3
 8001220:	4a6b      	ldr	r2, [pc, #428]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001222:	486c      	ldr	r0, [pc, #432]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001224:	f01c ff44 	bl	801e0b0 <iprintf>
 8001228:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800122a:	7b1b      	ldrb	r3, [r3, #12]
 800122c:	4619      	mov	r1, r3
 800122e:	4879      	ldr	r0, [pc, #484]	; (8001414 <StartReceiveGNSSDataTask+0x344>)
 8001230:	f01c ff3e 	bl	801e0b0 <iprintf>
 8001234:	4869      	ldr	r0, [pc, #420]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001236:	f01c ff3b 	bl	801e0b0 <iprintf>
	LOG("Day: %d-%d-%d \r\n", GNSS_Handle.day, GNSS_Handle.month,GNSS_Handle.year);
 800123a:	f001 f819 	bl	8002270 <HAL_GetTick>
 800123e:	4601      	mov	r1, r0
 8001240:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 8001244:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001246:	4863      	ldr	r0, [pc, #396]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001248:	f01c ff32 	bl	801e0b0 <iprintf>
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800124e:	f893 33f9 	ldrb.w	r3, [r3, #1017]	; 0x3f9
 8001252:	4619      	mov	r1, r3
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001256:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 800125a:	461a      	mov	r2, r3
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800125e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8001262:	486d      	ldr	r0, [pc, #436]	; (8001418 <StartReceiveGNSSDataTask+0x348>)
 8001264:	f01c ff24 	bl	801e0b0 <iprintf>
 8001268:	485c      	ldr	r0, [pc, #368]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 800126a:	f01c ff21 	bl	801e0b0 <iprintf>
	LOG("Time: %d:%d:%d \r\n", GNSS_Handle.hour, GNSS_Handle.min,GNSS_Handle.sec);
 800126e:	f000 ffff 	bl	8002270 <HAL_GetTick>
 8001272:	4601      	mov	r1, r0
 8001274:	f240 13c5 	movw	r3, #453	; 0x1c5
 8001278:	4a55      	ldr	r2, [pc, #340]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 800127a:	4856      	ldr	r0, [pc, #344]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800127c:	f01c ff18 	bl	801e0b0 <iprintf>
 8001280:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001282:	f893 33fa 	ldrb.w	r3, [r3, #1018]	; 0x3fa
 8001286:	4619      	mov	r1, r3
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800128a:	f893 33fb 	ldrb.w	r3, [r3, #1019]	; 0x3fb
 800128e:	461a      	mov	r2, r3
 8001290:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001292:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8001296:	4861      	ldr	r0, [pc, #388]	; (800141c <StartReceiveGNSSDataTask+0x34c>)
 8001298:	f01c ff0a 	bl	801e0b0 <iprintf>
 800129c:	484f      	ldr	r0, [pc, #316]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 800129e:	f01c ff07 	bl	801e0b0 <iprintf>
	LOG("Status of fix: %d \r\n", GNSS_Handle.fixType);
 80012a2:	f000 ffe5 	bl	8002270 <HAL_GetTick>
 80012a6:	4601      	mov	r1, r0
 80012a8:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80012ae:	4849      	ldr	r0, [pc, #292]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80012b0:	f01c fefe 	bl	801e0b0 <iprintf>
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 80012b6:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 80012ba:	4619      	mov	r1, r3
 80012bc:	4858      	ldr	r0, [pc, #352]	; (8001420 <StartReceiveGNSSDataTask+0x350>)
 80012be:	f01c fef7 	bl	801e0b0 <iprintf>
 80012c2:	4846      	ldr	r0, [pc, #280]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80012c4:	f01c fef4 	bl	801e0b0 <iprintf>
	LOG("Latitude: %f \r\n", GNSS_Handle.fLat);
 80012c8:	f000 ffd2 	bl	8002270 <HAL_GetTick>
 80012cc:	4601      	mov	r1, r0
 80012ce:	f240 13c7 	movw	r3, #455	; 0x1c7
 80012d2:	4a3f      	ldr	r2, [pc, #252]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80012d4:	483f      	ldr	r0, [pc, #252]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80012d6:	f01c feeb 	bl	801e0b0 <iprintf>
 80012da:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 80012dc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e8:	ec53 2b17 	vmov	r2, r3, d7
 80012ec:	484d      	ldr	r0, [pc, #308]	; (8001424 <StartReceiveGNSSDataTask+0x354>)
 80012ee:	f01c fedf 	bl	801e0b0 <iprintf>
 80012f2:	483a      	ldr	r0, [pc, #232]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80012f4:	f01c fedc 	bl	801e0b0 <iprintf>
	LOG("Longitude: %f \r\n",(float) GNSS_Handle.lon / 10000000.0);
 80012f8:	f000 ffba 	bl	8002270 <HAL_GetTick>
 80012fc:	4601      	mov	r1, r0
 80012fe:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001304:	4833      	ldr	r0, [pc, #204]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001306:	f01c fed3 	bl	801e0b0 <iprintf>
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800130c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800131c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80013c8 <StartReceiveGNSSDataTask+0x2f8>
 8001320:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001324:	ec53 2b15 	vmov	r2, r3, d5
 8001328:	483f      	ldr	r0, [pc, #252]	; (8001428 <StartReceiveGNSSDataTask+0x358>)
 800132a:	f01c fec1 	bl	801e0b0 <iprintf>
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001330:	f01c febe 	bl	801e0b0 <iprintf>
	LOG("Height above ellipsoid: %d \r\n", GNSS_Handle.height);
 8001334:	f000 ff9c 	bl	8002270 <HAL_GetTick>
 8001338:	4601      	mov	r1, r0
 800133a:	f240 13c9 	movw	r3, #457	; 0x1c9
 800133e:	4a24      	ldr	r2, [pc, #144]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001340:	4824      	ldr	r0, [pc, #144]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001342:	f01c feb5 	bl	801e0b0 <iprintf>
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001348:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800134c:	4619      	mov	r1, r3
 800134e:	4837      	ldr	r0, [pc, #220]	; (800142c <StartReceiveGNSSDataTask+0x35c>)
 8001350:	f01c feae 	bl	801e0b0 <iprintf>
 8001354:	4821      	ldr	r0, [pc, #132]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 8001356:	f01c feab 	bl	801e0b0 <iprintf>
	LOG("Height above mean sea level: %d \r\n", GNSS_Handle.hMSL);
 800135a:	f000 ff89 	bl	8002270 <HAL_GetTick>
 800135e:	4601      	mov	r1, r0
 8001360:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 8001366:	481b      	ldr	r0, [pc, #108]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 8001368:	f01c fea2 	bl	801e0b0 <iprintf>
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 800136e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8001372:	4619      	mov	r1, r3
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <StartReceiveGNSSDataTask+0x360>)
 8001376:	f01c fe9b 	bl	801e0b0 <iprintf>
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 800137c:	f01c fe98 	bl	801e0b0 <iprintf>
	LOG("Ground Speed (2-D): %d \r\n", GNSS_Handle.gSpeed);
 8001380:	f000 ff76 	bl	8002270 <HAL_GetTick>
 8001384:	4601      	mov	r1, r0
 8001386:	f240 13cb 	movw	r3, #459	; 0x1cb
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 800138e:	f01c fe8f 	bl	801e0b0 <iprintf>
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 8001394:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8001398:	4619      	mov	r1, r3
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <StartReceiveGNSSDataTask+0x364>)
 800139c:	f01c fe88 	bl	801e0b0 <iprintf>
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80013a2:	f01c fe85 	bl	801e0b0 <iprintf>
	LOG("");
 80013a6:	f000 ff63 	bl	8002270 <HAL_GetTick>
 80013aa:	4601      	mov	r1, r0
 80013ac:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <StartReceiveGNSSDataTask+0x300>)
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <StartReceiveGNSSDataTask+0x304>)
 80013b4:	f01c fe7c 	bl	801e0b0 <iprintf>
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <StartReceiveGNSSDataTask+0x30c>)
 80013ba:	f01c fe79 	bl	801e0b0 <iprintf>
	OnGNSSData(&GNSS_Handle);
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <StartReceiveGNSSDataTask+0x318>)
 80013c0:	f00c fbc2 	bl	800db48 <OnGNSSData>
	HAL_UART_Transmit_DMA(GNSS_Handle.huart, getPVTData,
 80013c4:	e6c8      	b.n	8001158 <StartReceiveGNSSDataTask+0x88>
 80013c6:	bf00      	nop
 80013c8:	00000000 	.word	0x00000000
 80013cc:	416312d0 	.word	0x416312d0
 80013d0:	08020488 	.word	0x08020488
 80013d4:	0801ff4c 	.word	0x0801ff4c
 80013d8:	08020050 	.word	0x08020050
 80013dc:	0801ff74 	.word	0x0801ff74
 80013e0:	08000c89 	.word	0x08000c89
 80013e4:	240085cc 	.word	0x240085cc
 80013e8:	2400e340 	.word	0x2400e340
 80013ec:	0802005c 	.word	0x0802005c
 80013f0:	08020070 	.word	0x08020070
 80013f4:	240084d4 	.word	0x240084d4
 80013f8:	0802039c 	.word	0x0802039c
 80013fc:	08020088 	.word	0x08020088
 8001400:	24000404 	.word	0x24000404
 8001404:	080200a4 	.word	0x080200a4
 8001408:	24000400 	.word	0x24000400
 800140c:	080200bc 	.word	0x080200bc
 8001410:	080200dc 	.word	0x080200dc
 8001414:	08020100 	.word	0x08020100
 8001418:	0802010c 	.word	0x0802010c
 800141c:	08020120 	.word	0x08020120
 8001420:	08020134 	.word	0x08020134
 8001424:	0802014c 	.word	0x0802014c
 8001428:	0802015c 	.word	0x0802015c
 800142c:	08020170 	.word	0x08020170
 8001430:	08020190 	.word	0x08020190
 8001434:	080201b4 	.word	0x080201b4

08001438 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <MX_GPIO_Init+0x174>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a55      	ldr	r2, [pc, #340]	; (80015ac <MX_GPIO_Init+0x174>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <MX_GPIO_Init+0x174>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <MX_GPIO_Init+0x174>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <MX_GPIO_Init+0x174>)
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <MX_GPIO_Init+0x174>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	4b48      	ldr	r3, [pc, #288]	; (80015ac <MX_GPIO_Init+0x174>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a46      	ldr	r2, [pc, #280]	; (80015ac <MX_GPIO_Init+0x174>)
 8001492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <MX_GPIO_Init+0x174>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <MX_GPIO_Init+0x174>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a3f      	ldr	r2, [pc, #252]	; (80015ac <MX_GPIO_Init+0x174>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <MX_GPIO_Init+0x174>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <MX_GPIO_Init+0x174>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4a37      	ldr	r2, [pc, #220]	; (80015ac <MX_GPIO_Init+0x174>)
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <MX_GPIO_Init+0x174>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <MX_GPIO_Init+0x174>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <MX_GPIO_Init+0x174>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <MX_GPIO_Init+0x174>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <MX_GPIO_Init+0x174>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <MX_GPIO_Init+0x174>)
 800150a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <MX_GPIO_Init+0x174>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED3_GPIO_Port, USR_LED3_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_GPIO_Init+0x178>)
 8001528:	f004 fbfa 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	4820      	ldr	r0, [pc, #128]	; (80015b4 <MX_GPIO_Init+0x17c>)
 8001532:	f004 fbf5 	bl	8005d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	481b      	ldr	r0, [pc, #108]	; (80015b8 <MX_GPIO_Init+0x180>)
 800154c:	f004 fa20 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED3_Pin;
 8001550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED3_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_GPIO_Init+0x178>)
 800156a:	f004 fa11 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <MX_GPIO_Init+0x17c>)
 8001586:	f004 fa03 	bl	8005990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0x17c>)
 800159e:	f004 f9f7 	bl	8005990 <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	; 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020400 	.word	0x58020400
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58020800 	.word	0x58020800

080015bc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_I2C2_Init+0x78>)
 80015c2:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <MX_I2C2_Init+0x7c>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0040163A;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_I2C2_Init+0x78>)
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <MX_I2C2_Init+0x80>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_I2C2_Init+0x78>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_I2C2_Init+0x78>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_I2C2_Init+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_I2C2_Init+0x78>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_I2C2_Init+0x78>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_I2C2_Init+0x78>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_I2C2_Init+0x78>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_I2C2_Init+0x78>)
 80015f8:	f004 fbac 	bl	8005d54 <HAL_I2C_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001602:	f000 f93f 	bl	8001884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	480a      	ldr	r0, [pc, #40]	; (8001634 <MX_I2C2_Init+0x78>)
 800160a:	f005 f8af 	bl	800676c <HAL_I2CEx_ConfigAnalogFilter>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001614:	f000 f936 	bl	8001884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_I2C2_Init+0x78>)
 800161c:	f005 f8f1 	bl	8006802 <HAL_I2CEx_ConfigDigitalFilter>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 f92d 	bl	8001884 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800162a:	2002      	movs	r0, #2
 800162c:	f005 f936 	bl	800689c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24008528 	.word	0x24008528
 8001638:	40005800 	.word	0x40005800
 800163c:	0040163a 	.word	0x0040163a

08001640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ba      	sub	sp, #232	; 0xe8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	22c0      	movs	r2, #192	; 0xc0
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f01c fd7a 	bl	801e15a <memset>
  if(i2cHandle->Instance==I2C2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <HAL_I2C_MspInit+0xc4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d145      	bne.n	80016fc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001670:	f04f 0208 	mov.w	r2, #8
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f006 fae6 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001692:	f000 f8f7 	bl	8001884 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_I2C_MspInit+0xcc>)
 80016da:	f004 f959 	bl	8005990 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 80016e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_I2C_MspInit+0xc8>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016fc:	bf00      	nop
 80016fe:	37e8      	adds	r7, #232	; 0xe8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005800 	.word	0x40005800
 8001708:	58024400 	.word	0x58024400
 800170c:	58021400 	.word	0x58021400

08001710 <__io_putchar>:
 */
#include "logger.h"

#ifdef DEBUG
PUTCHAR_PROTOTYPE
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001718:	1d39      	adds	r1, r7, #4
 800171a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171e:	2201      	movs	r2, #1
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <__io_putchar+0x20>)
 8001722:	f008 fbef 	bl	8009f04 <HAL_UART_Transmit>

  return ch;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24008660 	.word	0x24008660

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001738:	f000 fd4a 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173c:	f000 f816 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f7ff fe7a 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8001744:	f7ff f95e 	bl	8000a04 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001748:	f000 fc6a 	bl	8002020 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800174c:	f7ff ff36 	bl	80015bc <MX_I2C2_Init>
  MX_ETH_Init();
 8001750:	f7ff f980 	bl	8000a54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001754:	f000 faf2 	bl	8001d3c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001758:	f000 faa4 	bl	8001ca4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800175c:	f018 f812 	bl	8019784 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001760:	f7ff fb80 	bl	8000e64 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001764:	f018 f832 	bl	80197cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001768:	e7fe      	b.n	8001768 <main+0x34>
	...

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09c      	sub	sp, #112	; 0x70
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	224c      	movs	r2, #76	; 0x4c
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f01c fced 	bl	801e15a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f01c fce7 	bl	801e15a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800178c:	2002      	movs	r0, #2
 800178e:	f005 f9f1 	bl	8006b74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <SystemClock_Config+0xec>)
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <SystemClock_Config+0xec>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <SystemClock_Config+0xec>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <SystemClock_Config+0xf0>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <SystemClock_Config+0xf0>)
 80017b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <SystemClock_Config+0xf0>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017c4:	bf00      	nop
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <SystemClock_Config+0xf0>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	d1f8      	bne.n	80017c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d4:	2301      	movs	r3, #1
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017de:	2302      	movs	r3, #2
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017ea:	2318      	movs	r3, #24
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f2:	2304      	movs	r3, #4
 80017f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f6:	2302      	movs	r3, #2
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017fa:	230c      	movs	r3, #12
 80017fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017fe:	2300      	movs	r3, #0
 8001800:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4618      	mov	r0, r3
 800180c:	f005 f9fc 	bl	8006c08 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001816:	f000 f835 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	233f      	movs	r3, #63	; 0x3f
 800181c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2101      	movs	r1, #1
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fe3c 	bl	80074bc <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800184a:	f000 f81b 	bl	8001884 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3770      	adds	r7, #112	; 0x70
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	58000400 	.word	0x58000400
 800185c:	58024800 	.word	0x58024800

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001872:	f000 fce9 	bl	8002248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40014800 	.word	0x40014800

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x38>)
 8001898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_MspInit+0x38>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_MspInit+0x38>)
 80018a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	210f      	movs	r1, #15
 80018b8:	f06f 0001 	mvn.w	r0, #1
 80018bc:	f000 fde0 	bl	8002480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	58024400 	.word	0x58024400

080018cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d842      	bhi.n	8001960 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80018da:	2200      	movs	r2, #0
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	2076      	movs	r0, #118	; 0x76
 80018e0:	f000 fdce 	bl	8002480 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80018e4:	2076      	movs	r0, #118	; 0x76
 80018e6:	f000 fde5 	bl	80024b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <HAL_InitTick+0xac>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_InitTick+0xb0>)
 80018f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_InitTick+0xb0>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_InitTick+0xb0>)
 8001902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f006 f95b 	bl	8007bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800191e:	f006 f943 	bl	8007ba8 <HAL_RCC_GetPCLK2Freq>
 8001922:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_InitTick+0xb4>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	3b01      	subs	r3, #1
 8001930:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_InitTick+0xb8>)
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_InitTick+0xbc>)
 8001936:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0xb8>)
 800193a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001940:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_InitTick+0xb8>)
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_InitTick+0xb8>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_InitTick+0xb8>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <HAL_InitTick+0xb8>)
 8001954:	f007 ffac 	bl	80098b0 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <HAL_InitTick+0xa2>
 800195e:	e001      	b.n	8001964 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e005      	b.n	8001970 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <HAL_InitTick+0xb8>)
 8001966:	f008 f805 	bl	8009974 <HAL_TIM_Base_Start_IT>
 800196a:	4603      	mov	r3, r0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3738      	adds	r7, #56	; 0x38
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24000008 	.word	0x24000008
 800197c:	58024400 	.word	0x58024400
 8001980:	431bde83 	.word	0x431bde83
 8001984:	2400857c 	.word	0x2400857c
 8001988:	40014800 	.word	0x40014800

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <DMA1_Stream0_IRQHandler+0x10>)
 80019be:	f002 f8b1 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	240086f4 	.word	0x240086f4

080019cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <DMA1_Stream1_IRQHandler+0x10>)
 80019d2:	f002 f8a7 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2400876c 	.word	0x2400876c

080019e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <USART1_IRQHandler+0x10>)
 80019e6:	f008 fc33 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	240085cc 	.word	0x240085cc

080019f4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM17_IRQHandler+0x10>)
 80019fa:	f008 f833 	bl	8009a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2400857c 	.word	0x2400857c

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a22:	f01c fbed 	bl	801e200 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2216      	movs	r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
  }

  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe35 	bl	8001710 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
  }
  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f01c fb52 	bl	801e200 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	24080000 	.word	0x24080000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	240085c8 	.word	0x240085c8
 8001b90:	2400e8d8 	.word	0x2400e8d8

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <SystemInit+0xe4>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a36      	ldr	r2, [pc, #216]	; (8001c78 <SystemInit+0xe4>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <SystemInit+0xe8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d807      	bhi.n	8001bc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <SystemInit+0xe8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 030f 	bic.w	r3, r3, #15
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <SystemInit+0xe8>)
 8001bbe:	f043 0307 	orr.w	r3, r3, #7
 8001bc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <SystemInit+0xec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <SystemInit+0xec>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <SystemInit+0xec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <SystemInit+0xec>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4929      	ldr	r1, [pc, #164]	; (8001c80 <SystemInit+0xec>)
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <SystemInit+0xf0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <SystemInit+0xe8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemInit+0xe8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 030f 	bic.w	r3, r3, #15
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <SystemInit+0xe8>)
 8001bf8:	f043 0307 	orr.w	r3, r3, #7
 8001bfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <SystemInit+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <SystemInit+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <SystemInit+0xec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <SystemInit+0xec>)
 8001c12:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <SystemInit+0xf4>)
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <SystemInit+0xec>)
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <SystemInit+0xf8>)
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <SystemInit+0xec>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <SystemInit+0xfc>)
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <SystemInit+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <SystemInit+0xec>)
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <SystemInit+0xfc>)
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <SystemInit+0xec>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <SystemInit+0xec>)
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <SystemInit+0xfc>)
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <SystemInit+0xec>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <SystemInit+0xec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <SystemInit+0xec>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <SystemInit+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <SystemInit+0x100>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <SystemInit+0x104>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c5e:	d202      	bcs.n	8001c66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <SystemInit+0x108>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <SystemInit+0x10c>)
 8001c68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	52002000 	.word	0x52002000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c88:	02020200 	.word	0x02020200
 8001c8c:	01ff0000 	.word	0x01ff0000
 8001c90:	01010280 	.word	0x01010280
 8001c94:	5c001000 	.word	0x5c001000
 8001c98:	ffff0000 	.word	0xffff0000
 8001c9c:	51008108 	.word	0x51008108
 8001ca0:	52004000 	.word	0x52004000

08001ca4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001caa:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <MX_USART1_UART_Init+0x94>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cec:	4811      	ldr	r0, [pc, #68]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cee:	f008 f8b9 	bl	8009e64 <HAL_UART_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f7ff fdc4 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d00:	f00a ff15 	bl	800cb2e <HAL_UARTEx_SetTxFifoThreshold>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d0a:	f7ff fdbb 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d12:	f00a ff4a 	bl	800cbaa <HAL_UARTEx_SetRxFifoThreshold>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f7ff fdb2 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d22:	f00a fecb 	bl	800cabc <HAL_UARTEx_DisableFifoMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d2c:	f7ff fdaa 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	240085cc 	.word	0x240085cc
 8001d38:	40011000 	.word	0x40011000

08001d3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <MX_USART3_UART_Init+0x94>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d86:	f008 f86d 	bl	8009e64 <HAL_UART_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d90:	f7ff fd78 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d94:	2100      	movs	r1, #0
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001d98:	f00a fec9 	bl	800cb2e <HAL_UARTEx_SetTxFifoThreshold>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001da2:	f7ff fd6f 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001daa:	f00a fefe 	bl	800cbaa <HAL_UARTEx_SetRxFifoThreshold>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001db4:	f7ff fd66 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_USART3_UART_Init+0x90>)
 8001dba:	f00a fe7f 	bl	800cabc <HAL_UARTEx_DisableFifoMode>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc4:	f7ff fd5e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	24008660 	.word	0x24008660
 8001dd0:	40004800 	.word	0x40004800

08001dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0bc      	sub	sp, #240	; 0xf0
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	22c0      	movs	r2, #192	; 0xc0
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f01c f9b0 	bl	801e15a <memset>
  if(uartHandle->Instance==USART1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7f      	ldr	r2, [pc, #508]	; (8001ffc <HAL_UART_MspInit+0x228>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f040 80aa 	bne.w	8001f5a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e06:	f04f 0201 	mov.w	r2, #1
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 ff1b 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001e28:	f7ff fd2c 	bl	8001884 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2c:	4b74      	ldr	r3, [pc, #464]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e32:	4a73      	ldr	r2, [pc, #460]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5a:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	485d      	ldr	r0, [pc, #372]	; (8002004 <HAL_UART_MspInit+0x230>)
 8001e8e:	f003 fd7f 	bl	8005990 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001e94:	4a5d      	ldr	r2, [pc, #372]	; (800200c <HAL_UART_MspInit+0x238>)
 8001e96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e98:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001e9a:	2229      	movs	r2, #41	; 0x29
 8001e9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea4:	4b58      	ldr	r3, [pc, #352]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb2:	4b55      	ldr	r3, [pc, #340]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ebe:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eca:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ed0:	484d      	ldr	r0, [pc, #308]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ed2:	f000 fafd 	bl	80024d0 <HAL_DMA_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001edc:	f7ff fcd2 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a49      	ldr	r2, [pc, #292]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ee8:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_UART_MspInit+0x234>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_UART_MspInit+0x240>)
 8001ef2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001ef6:	222a      	movs	r2, #42	; 0x2a
 8001ef8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efa:	4b45      	ldr	r3, [pc, #276]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f00:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f0e:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f2c:	4838      	ldr	r0, [pc, #224]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f2e:	f000 facf 	bl	80024d0 <HAL_DMA_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001f38:	f7ff fca4 	bl	8001884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f40:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f42:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_UART_MspInit+0x23c>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	2025      	movs	r0, #37	; 0x25
 8001f4e:	f000 fa97 	bl	8002480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f52:	2025      	movs	r0, #37	; 0x25
 8001f54:	f000 faae 	bl	80024b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f58:	e04b      	b.n	8001ff2 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_UART_MspInit+0x244>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d146      	bne.n	8001ff2 <HAL_UART_MspInit+0x21e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f64:	f04f 0202 	mov.w	r2, #2
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 fe6c 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8001f86:	f7ff fc7d 	bl	8001884 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_UART_MspInit+0x22c>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fea:	4619      	mov	r1, r3
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <HAL_UART_MspInit+0x248>)
 8001fee:	f003 fccf 	bl	8005990 <HAL_GPIO_Init>
}
 8001ff2:	bf00      	nop
 8001ff4:	37f0      	adds	r7, #240	; 0xf0
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40011000 	.word	0x40011000
 8002000:	58024400 	.word	0x58024400
 8002004:	58020400 	.word	0x58020400
 8002008:	240086f4 	.word	0x240086f4
 800200c:	40020010 	.word	0x40020010
 8002010:	2400876c 	.word	0x2400876c
 8002014:	40020028 	.word	0x40020028
 8002018:	40004800 	.word	0x40004800
 800201c:	58020c00 	.word	0x58020c00

08002020 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002028:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800202c:	2209      	movs	r2, #9
 800202e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002032:	2202      	movs	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800203e:	2202      	movs	r2, #2
 8002040:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002044:	2201      	movs	r2, #1
 8002046:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002056:	2201      	movs	r2, #1
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800205c:	2201      	movs	r2, #1
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002068:	f004 fc3c 	bl	80068e4 <HAL_PCD_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002072:	f7ff fc07 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	240087e4 	.word	0x240087e4
 8002080:	40080000 	.word	0x40080000

08002084 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ba      	sub	sp, #232	; 0xe8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	22c0      	movs	r2, #192	; 0xc0
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f01c f858 	bl	801e15a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_PCD_MspInit+0xec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d159      	bne.n	8002168 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80020c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 fdc3 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80020d8:	f7ff fbd4 	bl	8001884 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80020dc:	f004 fd84 	bl	8006be8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020fe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002118:	230a      	movs	r3, #10
 800211a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002122:	4619      	mov	r1, r3
 8002124:	4814      	ldr	r0, [pc, #80]	; (8002178 <HAL_PCD_MspInit+0xf4>)
 8002126:	f003 fc33 	bl	8005990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800212a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_PCD_MspInit+0xf4>)
 8002146:	f003 fc23 	bl	8005990 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 800214c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002150:	4a08      	ldr	r2, [pc, #32]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 8002152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002156:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_PCD_MspInit+0xf0>)
 800215c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002168:	bf00      	nop
 800216a:	37e8      	adds	r7, #232	; 0xe8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40080000 	.word	0x40080000
 8002174:	58024400 	.word	0x58024400
 8002178:	58020000 	.word	0x58020000

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002180:	f7ff fd08 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f01c f82f 	bl	801e20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff fac1 	bl	8001734 <main>
  bx  lr
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021bc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80021c0:	08020a78 	.word	0x08020a78
  ldr r2, =_sbss
 80021c4:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 80021c8:	2400e8d4 	.word	0x2400e8d4

080021cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC3_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d6:	2003      	movs	r0, #3
 80021d8:	f000 f947 	bl	800246a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021dc:	f005 fb24 	bl	8007828 <HAL_RCC_GetSysClockFreq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_Init+0x68>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	4913      	ldr	r1, [pc, #76]	; (800223c <HAL_Init+0x6c>)
 80021ee:	5ccb      	ldrb	r3, [r1, r3]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
 80021f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_Init+0x68>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_Init+0x6c>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_Init+0x70>)
 8002212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002214:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <HAL_Init+0x74>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800221a:	200f      	movs	r0, #15
 800221c:	f7ff fb56 	bl	80018cc <HAL_InitTick>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e002      	b.n	8002230 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800222a:	f7ff fb31 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58024400 	.word	0x58024400
 800223c:	080204a4 	.word	0x080204a4
 8002240:	24000004 	.word	0x24000004
 8002244:	24000000 	.word	0x24000000

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2400000c 	.word	0x2400000c
 800226c:	24008cf0 	.word	0x24008cf0

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	24008cf0 	.word	0x24008cf0

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2400000c 	.word	0x2400000c

080022d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetREVID+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0c1b      	lsrs	r3, r3, #16
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	5c001000 	.word	0x5c001000

080022e8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022f8:	4904      	ldr	r1, [pc, #16]	; (800230c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	58000400 	.word	0x58000400

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <__NVIC_SetPriorityGrouping+0x40>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	4313      	orrs	r3, r2
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <__NVIC_SetPriorityGrouping+0x40>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	05fa0000 	.word	0x05fa0000

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff4c 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800248e:	f7ff ff63 	bl	8002358 <__NVIC_GetPriorityGrouping>
 8002492:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7ff ffb3 	bl	8002404 <NVIC_EncodePriority>
 800249e:	4602      	mov	r2, r0
 80024a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff82 	bl	80023b0 <__NVIC_SetPriority>
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff56 	bl	8002374 <__NVIC_EnableIRQ>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff feca 	bl	8002270 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e316      	b.n	8002b16 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a66      	ldr	r2, [pc, #408]	; (8002688 <HAL_DMA_Init+0x1b8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_DMA_Init+0x1bc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d045      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_DMA_Init+0x1c0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d040      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a62      	ldr	r2, [pc, #392]	; (8002694 <HAL_DMA_Init+0x1c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d03b      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_DMA_Init+0x1c8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d036      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a5f      	ldr	r2, [pc, #380]	; (800269c <HAL_DMA_Init+0x1cc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d031      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_DMA_Init+0x1d0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02c      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a5c      	ldr	r2, [pc, #368]	; (80026a4 <HAL_DMA_Init+0x1d4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d027      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_DMA_Init+0x1d8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a59      	ldr	r2, [pc, #356]	; (80026ac <HAL_DMA_Init+0x1dc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01d      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_DMA_Init+0x1e0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <HAL_DMA_Init+0x1e4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_DMA_Init+0x1e8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_DMA_Init+0x1ec>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_DMA_Init+0x1f0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_DMA_Init+0x1f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_DMA_Init+0xbc>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_DMA_Init+0xbe>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 813b 	beq.w	800280a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a37      	ldr	r2, [pc, #220]	; (8002688 <HAL_DMA_Init+0x1b8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d04a      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a36      	ldr	r2, [pc, #216]	; (800268c <HAL_DMA_Init+0x1bc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d045      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a34      	ldr	r2, [pc, #208]	; (8002690 <HAL_DMA_Init+0x1c0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d040      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a33      	ldr	r2, [pc, #204]	; (8002694 <HAL_DMA_Init+0x1c4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d03b      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_DMA_Init+0x1c8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d036      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_DMA_Init+0x1cc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d031      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <HAL_DMA_Init+0x1d0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02c      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <HAL_DMA_Init+0x1d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d027      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_DMA_Init+0x1d8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_DMA_Init+0x1dc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d01d      	beq.n	8002644 <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <HAL_DMA_Init+0x1e0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d018      	beq.n	8002644 <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_DMA_Init+0x1e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d013      	beq.n	8002644 <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_DMA_Init+0x1e8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00e      	beq.n	8002644 <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_DMA_Init+0x1ec>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d009      	beq.n	8002644 <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <HAL_DMA_Init+0x1f0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <HAL_DMA_Init+0x1f4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d108      	bne.n	8002656 <HAL_DMA_Init+0x186>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e007      	b.n	8002666 <HAL_DMA_Init+0x196>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002666:	e02f      	b.n	80026c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002668:	f7ff fe02 	bl	8002270 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b05      	cmp	r3, #5
 8002674:	d928      	bls.n	80026c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e246      	b.n	8002b16 <HAL_DMA_Init+0x646>
 8002688:	40020010 	.word	0x40020010
 800268c:	40020028 	.word	0x40020028
 8002690:	40020040 	.word	0x40020040
 8002694:	40020058 	.word	0x40020058
 8002698:	40020070 	.word	0x40020070
 800269c:	40020088 	.word	0x40020088
 80026a0:	400200a0 	.word	0x400200a0
 80026a4:	400200b8 	.word	0x400200b8
 80026a8:	40020410 	.word	0x40020410
 80026ac:	40020428 	.word	0x40020428
 80026b0:	40020440 	.word	0x40020440
 80026b4:	40020458 	.word	0x40020458
 80026b8:	40020470 	.word	0x40020470
 80026bc:	40020488 	.word	0x40020488
 80026c0:	400204a0 	.word	0x400204a0
 80026c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c8      	bne.n	8002668 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4b83      	ldr	r3, [pc, #524]	; (80028f0 <HAL_DMA_Init+0x420>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800272c:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <HAL_DMA_Init+0x424>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b71      	ldr	r3, [pc, #452]	; (80028f8 <HAL_DMA_Init+0x428>)
 8002732:	4013      	ands	r3, r2
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d328      	bcc.n	800278c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b28      	cmp	r3, #40	; 0x28
 8002740:	d903      	bls.n	800274a <HAL_DMA_Init+0x27a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b2e      	cmp	r3, #46	; 0x2e
 8002748:	d917      	bls.n	800277a <HAL_DMA_Init+0x2aa>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b3e      	cmp	r3, #62	; 0x3e
 8002750:	d903      	bls.n	800275a <HAL_DMA_Init+0x28a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b42      	cmp	r3, #66	; 0x42
 8002758:	d90f      	bls.n	800277a <HAL_DMA_Init+0x2aa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b46      	cmp	r3, #70	; 0x46
 8002760:	d903      	bls.n	800276a <HAL_DMA_Init+0x29a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b48      	cmp	r3, #72	; 0x48
 8002768:	d907      	bls.n	800277a <HAL_DMA_Init+0x2aa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b4e      	cmp	r3, #78	; 0x4e
 8002770:	d905      	bls.n	800277e <HAL_DMA_Init+0x2ae>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b52      	cmp	r3, #82	; 0x52
 8002778:	d801      	bhi.n	800277e <HAL_DMA_Init+0x2ae>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_DMA_Init+0x2b0>
 800277e:	2300      	movs	r3, #0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0307 	bic.w	r3, r3, #7
 80027a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d117      	bne.n	80027e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f002 fb33 	bl	8004e34 <DMA_CheckFifoParam>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e197      	b.n	8002b16 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f002 fa6e 	bl	8004cd0 <DMA_CalcBaseAndBitshift>
 80027f4:	4603      	mov	r3, r0
 80027f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	e0cd      	b.n	80029a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <HAL_DMA_Init+0x42c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_Init+0x38a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_DMA_Init+0x430>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01d      	beq.n	800285a <HAL_DMA_Init+0x38a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_DMA_Init+0x434>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_DMA_Init+0x38a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a36      	ldr	r2, [pc, #216]	; (8002908 <HAL_DMA_Init+0x438>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_DMA_Init+0x38a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a35      	ldr	r2, [pc, #212]	; (800290c <HAL_DMA_Init+0x43c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_DMA_Init+0x38a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a33      	ldr	r2, [pc, #204]	; (8002910 <HAL_DMA_Init+0x440>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_DMA_Init+0x38a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a32      	ldr	r2, [pc, #200]	; (8002914 <HAL_DMA_Init+0x444>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_DMA_Init+0x38a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a30      	ldr	r2, [pc, #192]	; (8002918 <HAL_DMA_Init+0x448>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_DMA_Init+0x38e>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_DMA_Init+0x390>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8097 	beq.w	8002994 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_DMA_Init+0x42c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d021      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <HAL_DMA_Init+0x430>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01c      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_DMA_Init+0x434>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d017      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_DMA_Init+0x438>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d012      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_DMA_Init+0x43c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00d      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_DMA_Init+0x440>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d008      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_DMA_Init+0x444>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <HAL_DMA_Init+0x3e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	; (8002918 <HAL_DMA_Init+0x448>)
 80028b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_DMA_Init+0x44c>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d021      	beq.n	8002920 <HAL_DMA_Init+0x450>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d102      	bne.n	80028ea <HAL_DMA_Init+0x41a>
 80028e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e8:	e01b      	b.n	8002922 <HAL_DMA_Init+0x452>
 80028ea:	2300      	movs	r3, #0
 80028ec:	e019      	b.n	8002922 <HAL_DMA_Init+0x452>
 80028ee:	bf00      	nop
 80028f0:	fe10803f 	.word	0xfe10803f
 80028f4:	5c001000 	.word	0x5c001000
 80028f8:	ffff0000 	.word	0xffff0000
 80028fc:	58025408 	.word	0x58025408
 8002900:	5802541c 	.word	0x5802541c
 8002904:	58025430 	.word	0x58025430
 8002908:	58025444 	.word	0x58025444
 800290c:	58025458 	.word	0x58025458
 8002910:	5802546c 	.word	0x5802546c
 8002914:	58025480 	.word	0x58025480
 8002918:	58025494 	.word	0x58025494
 800291c:	fffe000f 	.word	0xfffe000f
 8002920:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002950:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b6e      	ldr	r3, [pc, #440]	; (8002b20 <HAL_DMA_Init+0x650>)
 8002968:	4413      	add	r3, r2
 800296a:	4a6e      	ldr	r2, [pc, #440]	; (8002b24 <HAL_DMA_Init+0x654>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	009a      	lsls	r2, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f002 f9a9 	bl	8004cd0 <DMA_CalcBaseAndBitshift>
 800297e:	4603      	mov	r3, r0
 8002980:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	e008      	b.n	80029a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2240      	movs	r2, #64	; 0x40
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2203      	movs	r2, #3
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0b7      	b.n	8002b16 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_DMA_Init+0x658>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d072      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5d      	ldr	r2, [pc, #372]	; (8002b2c <HAL_DMA_Init+0x65c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d06d      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5c      	ldr	r2, [pc, #368]	; (8002b30 <HAL_DMA_Init+0x660>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d068      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a5a      	ldr	r2, [pc, #360]	; (8002b34 <HAL_DMA_Init+0x664>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d063      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <HAL_DMA_Init+0x668>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d05e      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_DMA_Init+0x66c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d059      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_DMA_Init+0x670>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d054      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a54      	ldr	r2, [pc, #336]	; (8002b44 <HAL_DMA_Init+0x674>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d04f      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a53      	ldr	r2, [pc, #332]	; (8002b48 <HAL_DMA_Init+0x678>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d04a      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a51      	ldr	r2, [pc, #324]	; (8002b4c <HAL_DMA_Init+0x67c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d045      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a50      	ldr	r2, [pc, #320]	; (8002b50 <HAL_DMA_Init+0x680>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d040      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <HAL_DMA_Init+0x684>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d03b      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_DMA_Init+0x688>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d036      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	; (8002b5c <HAL_DMA_Init+0x68c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4a      	ldr	r2, [pc, #296]	; (8002b60 <HAL_DMA_Init+0x690>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d02c      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_DMA_Init+0x694>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d027      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_DMA_Init+0x698>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d022      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a45      	ldr	r2, [pc, #276]	; (8002b6c <HAL_DMA_Init+0x69c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <HAL_DMA_Init+0x6a0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <HAL_DMA_Init+0x6a4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a41      	ldr	r2, [pc, #260]	; (8002b78 <HAL_DMA_Init+0x6a8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_DMA_Init+0x6ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <HAL_DMA_Init+0x6b0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <HAL_DMA_Init+0x6b4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Init+0x5ca>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_Init+0x5cc>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f002 fa43 	bl	8004f2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d102      	bne.n	8002ab4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ac8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_DMA_Init+0x624>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d80c      	bhi.n	8002af4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f002 fac0 	bl	8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	e008      	b.n	8002b06 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	a7fdabf8 	.word	0xa7fdabf8
 8002b24:	cccccccd 	.word	0xcccccccd
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
 8002b68:	58025408 	.word	0x58025408
 8002b6c:	5802541c 	.word	0x5802541c
 8002b70:	58025430 	.word	0x58025430
 8002b74:	58025444 	.word	0x58025444
 8002b78:	58025458 	.word	0x58025458
 8002b7c:	5802546c 	.word	0x5802546c
 8002b80:	58025480 	.word	0x58025480
 8002b84:	58025494 	.word	0x58025494

08002b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e226      	b.n	8002ff2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Start_IT+0x2a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e21f      	b.n	8002ff2 <HAL_DMA_Start_IT+0x46a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 820a 	bne.w	8002fdc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_DMA_Start_IT+0x1f4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d04a      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a66      	ldr	r2, [pc, #408]	; (8002d80 <HAL_DMA_Start_IT+0x1f8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d045      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a65      	ldr	r2, [pc, #404]	; (8002d84 <HAL_DMA_Start_IT+0x1fc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d040      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_DMA_Start_IT+0x200>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d03b      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a62      	ldr	r2, [pc, #392]	; (8002d8c <HAL_DMA_Start_IT+0x204>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d036      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a60      	ldr	r2, [pc, #384]	; (8002d90 <HAL_DMA_Start_IT+0x208>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d031      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <HAL_DMA_Start_IT+0x20c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02c      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_DMA_Start_IT+0x210>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	; (8002d9c <HAL_DMA_Start_IT+0x214>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5a      	ldr	r2, [pc, #360]	; (8002da0 <HAL_DMA_Start_IT+0x218>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a59      	ldr	r2, [pc, #356]	; (8002da4 <HAL_DMA_Start_IT+0x21c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a57      	ldr	r2, [pc, #348]	; (8002da8 <HAL_DMA_Start_IT+0x220>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a56      	ldr	r2, [pc, #344]	; (8002dac <HAL_DMA_Start_IT+0x224>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	; (8002db0 <HAL_DMA_Start_IT+0x228>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a53      	ldr	r2, [pc, #332]	; (8002db4 <HAL_DMA_Start_IT+0x22c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_DMA_Start_IT+0x230>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d108      	bne.n	8002c88 <HAL_DMA_Start_IT+0x100>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e007      	b.n	8002c98 <HAL_DMA_Start_IT+0x110>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f001 fe6a 	bl	8004978 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_DMA_Start_IT+0x1f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_DMA_Start_IT+0x1f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d045      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a31      	ldr	r2, [pc, #196]	; (8002d84 <HAL_DMA_Start_IT+0x1fc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a30      	ldr	r2, [pc, #192]	; (8002d88 <HAL_DMA_Start_IT+0x200>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d03b      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <HAL_DMA_Start_IT+0x204>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d036      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <HAL_DMA_Start_IT+0x208>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_DMA_Start_IT+0x20c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_DMA_Start_IT+0x210>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d027      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_DMA_Start_IT+0x214>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d022      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_DMA_Start_IT+0x218>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01d      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_DMA_Start_IT+0x21c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d018      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <HAL_DMA_Start_IT+0x220>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_DMA_Start_IT+0x224>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00e      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <HAL_DMA_Start_IT+0x228>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_DMA_Start_IT+0x22c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_DMA_Start_IT+0x230>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Start_IT+0x1c0>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_Start_IT+0x1c2>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d036      	beq.n	8002dbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 021e 	bic.w	r2, r3, #30
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0216 	orr.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03e      	beq.n	8002de8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0208 	orr.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e035      	b.n	8002de8 <HAL_DMA_Start_IT+0x260>
 8002d7c:	40020010 	.word	0x40020010
 8002d80:	40020028 	.word	0x40020028
 8002d84:	40020040 	.word	0x40020040
 8002d88:	40020058 	.word	0x40020058
 8002d8c:	40020070 	.word	0x40020070
 8002d90:	40020088 	.word	0x40020088
 8002d94:	400200a0 	.word	0x400200a0
 8002d98:	400200b8 	.word	0x400200b8
 8002d9c:	40020410 	.word	0x40020410
 8002da0:	40020428 	.word	0x40020428
 8002da4:	40020440 	.word	0x40020440
 8002da8:	40020458 	.word	0x40020458
 8002dac:	40020470 	.word	0x40020470
 8002db0:	40020488 	.word	0x40020488
 8002db4:	400204a0 	.word	0x400204a0
 8002db8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 020e 	bic.w	r2, r3, #14
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 020a 	orr.w	r2, r2, #10
 8002dce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0204 	orr.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a83      	ldr	r2, [pc, #524]	; (8002ffc <HAL_DMA_Start_IT+0x474>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d072      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a82      	ldr	r2, [pc, #520]	; (8003000 <HAL_DMA_Start_IT+0x478>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d06d      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a80      	ldr	r2, [pc, #512]	; (8003004 <HAL_DMA_Start_IT+0x47c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d068      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7f      	ldr	r2, [pc, #508]	; (8003008 <HAL_DMA_Start_IT+0x480>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d063      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a7d      	ldr	r2, [pc, #500]	; (800300c <HAL_DMA_Start_IT+0x484>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d05e      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7c      	ldr	r2, [pc, #496]	; (8003010 <HAL_DMA_Start_IT+0x488>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d059      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <HAL_DMA_Start_IT+0x48c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d054      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a79      	ldr	r2, [pc, #484]	; (8003018 <HAL_DMA_Start_IT+0x490>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04f      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a77      	ldr	r2, [pc, #476]	; (800301c <HAL_DMA_Start_IT+0x494>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a76      	ldr	r2, [pc, #472]	; (8003020 <HAL_DMA_Start_IT+0x498>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a74      	ldr	r2, [pc, #464]	; (8003024 <HAL_DMA_Start_IT+0x49c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	; (8003028 <HAL_DMA_Start_IT+0x4a0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a71      	ldr	r2, [pc, #452]	; (800302c <HAL_DMA_Start_IT+0x4a4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_DMA_Start_IT+0x4a8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_DMA_Start_IT+0x4ac>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_DMA_Start_IT+0x4b0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_DMA_Start_IT+0x4b4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_DMA_Start_IT+0x4b8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_DMA_Start_IT+0x4bc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_DMA_Start_IT+0x4c0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_DMA_Start_IT+0x4c4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_DMA_Start_IT+0x4c8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a62      	ldr	r2, [pc, #392]	; (8003054 <HAL_DMA_Start_IT+0x4cc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	; (8003058 <HAL_DMA_Start_IT+0x4d0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Start_IT+0x354>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_DMA_Start_IT+0x356>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01a      	beq.n	8002f18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002efe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <HAL_DMA_Start_IT+0x474>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d04a      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <HAL_DMA_Start_IT+0x478>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d045      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a34      	ldr	r2, [pc, #208]	; (8003004 <HAL_DMA_Start_IT+0x47c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d040      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a33      	ldr	r2, [pc, #204]	; (8003008 <HAL_DMA_Start_IT+0x480>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d03b      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a31      	ldr	r2, [pc, #196]	; (800300c <HAL_DMA_Start_IT+0x484>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d036      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a30      	ldr	r2, [pc, #192]	; (8003010 <HAL_DMA_Start_IT+0x488>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d031      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2e      	ldr	r2, [pc, #184]	; (8003014 <HAL_DMA_Start_IT+0x48c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02c      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <HAL_DMA_Start_IT+0x490>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d027      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_DMA_Start_IT+0x494>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d022      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_DMA_Start_IT+0x498>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a28      	ldr	r2, [pc, #160]	; (8003024 <HAL_DMA_Start_IT+0x49c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_DMA_Start_IT+0x4a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_DMA_Start_IT+0x4a4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_DMA_Start_IT+0x4a8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_DMA_Start_IT+0x4ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_DMA_Start_IT+0x4b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d108      	bne.n	8002fca <HAL_DMA_Start_IT+0x442>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e012      	b.n	8002ff0 <HAL_DMA_Start_IT+0x468>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e009      	b.n	8002ff0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494

0800305c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003064:	f7ff f904 	bl	8002270 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e2dc      	b.n	800362e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d008      	beq.n	8003092 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e2cd      	b.n	800362e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a76      	ldr	r2, [pc, #472]	; (8003270 <HAL_DMA_Abort+0x214>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d04a      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a74      	ldr	r2, [pc, #464]	; (8003274 <HAL_DMA_Abort+0x218>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d045      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_DMA_Abort+0x21c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d040      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a71      	ldr	r2, [pc, #452]	; (800327c <HAL_DMA_Abort+0x220>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d03b      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a70      	ldr	r2, [pc, #448]	; (8003280 <HAL_DMA_Abort+0x224>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d036      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_DMA_Abort+0x228>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d031      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6d      	ldr	r2, [pc, #436]	; (8003288 <HAL_DMA_Abort+0x22c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d02c      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_DMA_Abort+0x230>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d027      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_DMA_Abort+0x234>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a68      	ldr	r2, [pc, #416]	; (8003294 <HAL_DMA_Abort+0x238>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a67      	ldr	r2, [pc, #412]	; (8003298 <HAL_DMA_Abort+0x23c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_DMA_Abort+0x240>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a64      	ldr	r2, [pc, #400]	; (80032a0 <HAL_DMA_Abort+0x244>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a62      	ldr	r2, [pc, #392]	; (80032a4 <HAL_DMA_Abort+0x248>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a61      	ldr	r2, [pc, #388]	; (80032a8 <HAL_DMA_Abort+0x24c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <HAL_DMA_Abort+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_DMA_Abort+0xda>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_DMA_Abort+0xdc>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 021e 	bic.w	r2, r2, #30
 800314a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e00a      	b.n	800317a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 020e 	bic.w	r2, r2, #14
 8003172:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a3c      	ldr	r2, [pc, #240]	; (8003270 <HAL_DMA_Abort+0x214>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d072      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3a      	ldr	r2, [pc, #232]	; (8003274 <HAL_DMA_Abort+0x218>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d06d      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a39      	ldr	r2, [pc, #228]	; (8003278 <HAL_DMA_Abort+0x21c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d068      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a37      	ldr	r2, [pc, #220]	; (800327c <HAL_DMA_Abort+0x220>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d063      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a36      	ldr	r2, [pc, #216]	; (8003280 <HAL_DMA_Abort+0x224>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d05e      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_DMA_Abort+0x228>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d059      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a33      	ldr	r2, [pc, #204]	; (8003288 <HAL_DMA_Abort+0x22c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d054      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a31      	ldr	r2, [pc, #196]	; (800328c <HAL_DMA_Abort+0x230>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d04f      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_DMA_Abort+0x234>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_DMA_Abort+0x238>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <HAL_DMA_Abort+0x23c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <HAL_DMA_Abort+0x240>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_DMA_Abort+0x244>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <HAL_DMA_Abort+0x248>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_DMA_Abort+0x24c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <HAL_DMA_Abort+0x250>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_DMA_Abort+0x254>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_DMA_Abort+0x258>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_DMA_Abort+0x25c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_DMA_Abort+0x260>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_DMA_Abort+0x264>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_DMA_Abort+0x268>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_DMA_Abort+0x26c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_DMA_Abort+0x270>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d132      	bne.n	80032d0 <HAL_DMA_Abort+0x274>
 800326a:	2301      	movs	r3, #1
 800326c:	e031      	b.n	80032d2 <HAL_DMA_Abort+0x276>
 800326e:	bf00      	nop
 8003270:	40020010 	.word	0x40020010
 8003274:	40020028 	.word	0x40020028
 8003278:	40020040 	.word	0x40020040
 800327c:	40020058 	.word	0x40020058
 8003280:	40020070 	.word	0x40020070
 8003284:	40020088 	.word	0x40020088
 8003288:	400200a0 	.word	0x400200a0
 800328c:	400200b8 	.word	0x400200b8
 8003290:	40020410 	.word	0x40020410
 8003294:	40020428 	.word	0x40020428
 8003298:	40020440 	.word	0x40020440
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020470 	.word	0x40020470
 80032a4:	40020488 	.word	0x40020488
 80032a8:	400204a0 	.word	0x400204a0
 80032ac:	400204b8 	.word	0x400204b8
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6d      	ldr	r2, [pc, #436]	; (80034a0 <HAL_DMA_Abort+0x444>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6b      	ldr	r2, [pc, #428]	; (80034a4 <HAL_DMA_Abort+0x448>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6a      	ldr	r2, [pc, #424]	; (80034a8 <HAL_DMA_Abort+0x44c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a68      	ldr	r2, [pc, #416]	; (80034ac <HAL_DMA_Abort+0x450>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_DMA_Abort+0x454>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_DMA_Abort+0x458>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a64      	ldr	r2, [pc, #400]	; (80034b8 <HAL_DMA_Abort+0x45c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a62      	ldr	r2, [pc, #392]	; (80034bc <HAL_DMA_Abort+0x460>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_DMA_Abort+0x464>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5f      	ldr	r2, [pc, #380]	; (80034c4 <HAL_DMA_Abort+0x468>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5e      	ldr	r2, [pc, #376]	; (80034c8 <HAL_DMA_Abort+0x46c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <HAL_DMA_Abort+0x470>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_DMA_Abort+0x474>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a59      	ldr	r2, [pc, #356]	; (80034d4 <HAL_DMA_Abort+0x478>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_DMA_Abort+0x47c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a56      	ldr	r2, [pc, #344]	; (80034dc <HAL_DMA_Abort+0x480>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <HAL_DMA_Abort+0x33c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_DMA_Abort+0x34c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033a8:	e013      	b.n	80033d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033aa:	f7fe ff61 	bl	8002270 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d90c      	bls.n	80033d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e12d      	b.n	800362e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <HAL_DMA_Abort+0x444>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d04a      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <HAL_DMA_Abort+0x448>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d045      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <HAL_DMA_Abort+0x44c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d040      	beq.n	800347e <HAL_DMA_Abort+0x422>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_DMA_Abort+0x450>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d03b      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <HAL_DMA_Abort+0x454>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d036      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_DMA_Abort+0x458>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <HAL_DMA_Abort+0x45c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02c      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <HAL_DMA_Abort+0x460>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d027      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_DMA_Abort+0x464>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_DMA_Abort+0x468>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01d      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_DMA_Abort+0x46c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_DMA_Abort+0x470>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_DMA_Abort+0x474>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_DMA_Abort+0x478>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_DMA_Abort+0x47c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_DMA_Abort+0x480>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_DMA_Abort+0x426>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_DMA_Abort+0x428>
 8003482:	2300      	movs	r3, #0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d02b      	beq.n	80034e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	223f      	movs	r2, #63	; 0x3f
 8003498:	409a      	lsls	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	e02a      	b.n	80034f6 <HAL_DMA_Abort+0x49a>
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4f      	ldr	r2, [pc, #316]	; (8003638 <HAL_DMA_Abort+0x5dc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d072      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_DMA_Abort+0x5e0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d06d      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_DMA_Abort+0x5e4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d068      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <HAL_DMA_Abort+0x5e8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d063      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_DMA_Abort+0x5ec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d05e      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a47      	ldr	r2, [pc, #284]	; (800364c <HAL_DMA_Abort+0x5f0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d059      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <HAL_DMA_Abort+0x5f4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d054      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a44      	ldr	r2, [pc, #272]	; (8003654 <HAL_DMA_Abort+0x5f8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04f      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a43      	ldr	r2, [pc, #268]	; (8003658 <HAL_DMA_Abort+0x5fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a41      	ldr	r2, [pc, #260]	; (800365c <HAL_DMA_Abort+0x600>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d045      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a40      	ldr	r2, [pc, #256]	; (8003660 <HAL_DMA_Abort+0x604>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d040      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a3e      	ldr	r2, [pc, #248]	; (8003664 <HAL_DMA_Abort+0x608>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d03b      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3d      	ldr	r2, [pc, #244]	; (8003668 <HAL_DMA_Abort+0x60c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d036      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3b      	ldr	r2, [pc, #236]	; (800366c <HAL_DMA_Abort+0x610>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_DMA_Abort+0x614>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d02c      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a38      	ldr	r2, [pc, #224]	; (8003674 <HAL_DMA_Abort+0x618>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d027      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a37      	ldr	r2, [pc, #220]	; (8003678 <HAL_DMA_Abort+0x61c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a35      	ldr	r2, [pc, #212]	; (800367c <HAL_DMA_Abort+0x620>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a34      	ldr	r2, [pc, #208]	; (8003680 <HAL_DMA_Abort+0x624>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a32      	ldr	r2, [pc, #200]	; (8003684 <HAL_DMA_Abort+0x628>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a31      	ldr	r2, [pc, #196]	; (8003688 <HAL_DMA_Abort+0x62c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_DMA_Abort+0x630>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_DMA_Abort+0x634>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <HAL_DMA_Abort+0x638>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Abort+0x58e>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_DMA_Abort+0x590>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003610:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800361a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
 8003678:	58025408 	.word	0x58025408
 800367c:	5802541c 	.word	0x5802541c
 8003680:	58025430 	.word	0x58025430
 8003684:	58025444 	.word	0x58025444
 8003688:	58025458 	.word	0x58025458
 800368c:	5802546c 	.word	0x5802546c
 8003690:	58025480 	.word	0x58025480
 8003694:	58025494 	.word	0x58025494

08003698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e237      	b.n	8003b1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e22c      	b.n	8003b1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5c      	ldr	r2, [pc, #368]	; (8003838 <HAL_DMA_Abort_IT+0x1a0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d04a      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_DMA_Abort_IT+0x1a4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d045      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a59      	ldr	r2, [pc, #356]	; (8003840 <HAL_DMA_Abort_IT+0x1a8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d040      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_DMA_Abort_IT+0x1ac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d03b      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a56      	ldr	r2, [pc, #344]	; (8003848 <HAL_DMA_Abort_IT+0x1b0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d036      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a55      	ldr	r2, [pc, #340]	; (800384c <HAL_DMA_Abort_IT+0x1b4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d031      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_DMA_Abort_IT+0x1b8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d02c      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_DMA_Abort_IT+0x1bc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d027      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a50      	ldr	r2, [pc, #320]	; (8003858 <HAL_DMA_Abort_IT+0x1c0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4f      	ldr	r2, [pc, #316]	; (800385c <HAL_DMA_Abort_IT+0x1c4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d01d      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4d      	ldr	r2, [pc, #308]	; (8003860 <HAL_DMA_Abort_IT+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4c      	ldr	r2, [pc, #304]	; (8003864 <HAL_DMA_Abort_IT+0x1cc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_DMA_Abort_IT+0x1d0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a49      	ldr	r2, [pc, #292]	; (800386c <HAL_DMA_Abort_IT+0x1d4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a47      	ldr	r2, [pc, #284]	; (8003870 <HAL_DMA_Abort_IT+0x1d8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a46      	ldr	r2, [pc, #280]	; (8003874 <HAL_DMA_Abort_IT+0x1dc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_DMA_Abort_IT+0xcc>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_DMA_Abort_IT+0xce>
 8003764:	2300      	movs	r3, #0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8086 	beq.w	8003878 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2204      	movs	r2, #4
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <HAL_DMA_Abort_IT+0x1a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_DMA_Abort_IT+0x1a4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d045      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <HAL_DMA_Abort_IT+0x1a8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d040      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_DMA_Abort_IT+0x1ac>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d03b      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <HAL_DMA_Abort_IT+0x1b0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d036      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a28      	ldr	r2, [pc, #160]	; (800384c <HAL_DMA_Abort_IT+0x1b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d031      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a26      	ldr	r2, [pc, #152]	; (8003850 <HAL_DMA_Abort_IT+0x1b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a25      	ldr	r2, [pc, #148]	; (8003854 <HAL_DMA_Abort_IT+0x1bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a23      	ldr	r2, [pc, #140]	; (8003858 <HAL_DMA_Abort_IT+0x1c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a22      	ldr	r2, [pc, #136]	; (800385c <HAL_DMA_Abort_IT+0x1c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <HAL_DMA_Abort_IT+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_DMA_Abort_IT+0x1cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_DMA_Abort_IT+0x1d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_DMA_Abort_IT+0x1d4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_DMA_Abort_IT+0x1d8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_DMA_Abort_IT+0x1dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <HAL_DMA_Abort_IT+0x18e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e178      	b.n	8003b18 <HAL_DMA_Abort_IT+0x480>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e16f      	b.n	8003b18 <HAL_DMA_Abort_IT+0x480>
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020e 	bic.w	r2, r2, #14
 8003886:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a6c      	ldr	r2, [pc, #432]	; (8003a40 <HAL_DMA_Abort_IT+0x3a8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6b      	ldr	r2, [pc, #428]	; (8003a44 <HAL_DMA_Abort_IT+0x3ac>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d045      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a69      	ldr	r2, [pc, #420]	; (8003a48 <HAL_DMA_Abort_IT+0x3b0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d040      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a68      	ldr	r2, [pc, #416]	; (8003a4c <HAL_DMA_Abort_IT+0x3b4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d03b      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a66      	ldr	r2, [pc, #408]	; (8003a50 <HAL_DMA_Abort_IT+0x3b8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d036      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a65      	ldr	r2, [pc, #404]	; (8003a54 <HAL_DMA_Abort_IT+0x3bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a63      	ldr	r2, [pc, #396]	; (8003a58 <HAL_DMA_Abort_IT+0x3c0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02c      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a62      	ldr	r2, [pc, #392]	; (8003a5c <HAL_DMA_Abort_IT+0x3c4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d027      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a60      	ldr	r2, [pc, #384]	; (8003a60 <HAL_DMA_Abort_IT+0x3c8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d022      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5f      	ldr	r2, [pc, #380]	; (8003a64 <HAL_DMA_Abort_IT+0x3cc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01d      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	; (8003a68 <HAL_DMA_Abort_IT+0x3d0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d018      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	; (8003a6c <HAL_DMA_Abort_IT+0x3d4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5a      	ldr	r2, [pc, #360]	; (8003a70 <HAL_DMA_Abort_IT+0x3d8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a59      	ldr	r2, [pc, #356]	; (8003a74 <HAL_DMA_Abort_IT+0x3dc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d009      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a57      	ldr	r2, [pc, #348]	; (8003a78 <HAL_DMA_Abort_IT+0x3e0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a56      	ldr	r2, [pc, #344]	; (8003a7c <HAL_DMA_Abort_IT+0x3e4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <HAL_DMA_Abort_IT+0x2a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e007      	b.n	800394a <HAL_DMA_Abort_IT+0x2b2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <HAL_DMA_Abort_IT+0x3a8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d072      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_DMA_Abort_IT+0x3ac>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d06d      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_DMA_Abort_IT+0x3b0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d068      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a37      	ldr	r2, [pc, #220]	; (8003a4c <HAL_DMA_Abort_IT+0x3b4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d063      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a36      	ldr	r2, [pc, #216]	; (8003a50 <HAL_DMA_Abort_IT+0x3b8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d05e      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <HAL_DMA_Abort_IT+0x3bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d059      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a33      	ldr	r2, [pc, #204]	; (8003a58 <HAL_DMA_Abort_IT+0x3c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d054      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <HAL_DMA_Abort_IT+0x3c4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d04f      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a30      	ldr	r2, [pc, #192]	; (8003a60 <HAL_DMA_Abort_IT+0x3c8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d04a      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2e      	ldr	r2, [pc, #184]	; (8003a64 <HAL_DMA_Abort_IT+0x3cc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d045      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <HAL_DMA_Abort_IT+0x3d0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d040      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	; (8003a6c <HAL_DMA_Abort_IT+0x3d4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d03b      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <HAL_DMA_Abort_IT+0x3d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d036      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	; (8003a74 <HAL_DMA_Abort_IT+0x3dc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <HAL_DMA_Abort_IT+0x3e0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d02c      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <HAL_DMA_Abort_IT+0x3e4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d027      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <HAL_DMA_Abort_IT+0x3e8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_DMA_Abort_IT+0x3ec>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_DMA_Abort_IT+0x3f0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_DMA_Abort_IT+0x3f4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_DMA_Abort_IT+0x3f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <HAL_DMA_Abort_IT+0x3fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <HAL_DMA_Abort_IT+0x400>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <HAL_DMA_Abort_IT+0x404>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d132      	bne.n	8003aa0 <HAL_DMA_Abort_IT+0x408>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e031      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x40a>
 8003a3e:	bf00      	nop
 8003a40:	40020010 	.word	0x40020010
 8003a44:	40020028 	.word	0x40020028
 8003a48:	40020040 	.word	0x40020040
 8003a4c:	40020058 	.word	0x40020058
 8003a50:	40020070 	.word	0x40020070
 8003a54:	40020088 	.word	0x40020088
 8003a58:	400200a0 	.word	0x400200a0
 8003a5c:	400200b8 	.word	0x400200b8
 8003a60:	40020410 	.word	0x40020410
 8003a64:	40020428 	.word	0x40020428
 8003a68:	40020440 	.word	0x40020440
 8003a6c:	40020458 	.word	0x40020458
 8003a70:	40020470 	.word	0x40020470
 8003a74:	40020488 	.word	0x40020488
 8003a78:	400204a0 	.word	0x400204a0
 8003a7c:	400204b8 	.word	0x400204b8
 8003a80:	58025408 	.word	0x58025408
 8003a84:	5802541c 	.word	0x5802541c
 8003a88:	58025430 	.word	0x58025430
 8003a8c:	58025444 	.word	0x58025444
 8003a90:	58025458 	.word	0x58025458
 8003a94:	5802546c 	.word	0x5802546c
 8003a98:	58025480 	.word	0x58025480
 8003a9c:	58025494 	.word	0x58025494
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d028      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ad4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003af6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop

08003b24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b30:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <HAL_DMA_IRQHandler+0x1ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a67      	ldr	r2, [pc, #412]	; (8003cd4 <HAL_DMA_IRQHandler+0x1b0>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5f      	ldr	r2, [pc, #380]	; (8003cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5d      	ldr	r2, [pc, #372]	; (8003cdc <HAL_DMA_IRQHandler+0x1b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a59      	ldr	r2, [pc, #356]	; (8003ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a57      	ldr	r2, [pc, #348]	; (8003cec <HAL_DMA_IRQHandler+0x1c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a56      	ldr	r2, [pc, #344]	; (8003cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a54      	ldr	r2, [pc, #336]	; (8003cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a53      	ldr	r2, [pc, #332]	; (8003cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a51      	ldr	r2, [pc, #324]	; (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a50      	ldr	r2, [pc, #320]	; (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4e      	ldr	r2, [pc, #312]	; (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a4d      	ldr	r2, [pc, #308]	; (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a4b      	ldr	r2, [pc, #300]	; (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4a      	ldr	r2, [pc, #296]	; (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a48      	ldr	r2, [pc, #288]	; (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_DMA_IRQHandler+0xd6>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_IRQHandler+0xd8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 842b 	beq.w	8004458 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a2 	beq.w	8003d5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2e      	ldr	r2, [pc, #184]	; (8003cd8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d04a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2d      	ldr	r2, [pc, #180]	; (8003cdc <HAL_DMA_IRQHandler+0x1b8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d045      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d040      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03b      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d036      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a27      	ldr	r2, [pc, #156]	; (8003cec <HAL_DMA_IRQHandler+0x1c8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d031      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02c      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d027      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <HAL_DMA_IRQHandler+0x1d8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_DMA_IRQHandler+0x1dc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_DMA_IRQHandler+0x1e0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_DMA_IRQHandler+0x1e4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_DMA_IRQHandler+0x1e8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_DMA_IRQHandler+0x1ec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_DMA_IRQHandler+0x1f0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d12f      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x1f4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e02e      	b.n	8003d2c <HAL_DMA_IRQHandler+0x208>
 8003cce:	bf00      	nop
 8003cd0:	24000000 	.word	0x24000000
 8003cd4:	1b4e81b5 	.word	0x1b4e81b5
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2208      	movs	r2, #8
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d06e      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <HAL_DMA_IRQHandler+0x3f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d04a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_DMA_IRQHandler+0x3fc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d045      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a66      	ldr	r2, [pc, #408]	; (8003f24 <HAL_DMA_IRQHandler+0x400>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d040      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <HAL_DMA_IRQHandler+0x404>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d03b      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_DMA_IRQHandler+0x408>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d036      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a61      	ldr	r2, [pc, #388]	; (8003f30 <HAL_DMA_IRQHandler+0x40c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d031      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a60      	ldr	r2, [pc, #384]	; (8003f34 <HAL_DMA_IRQHandler+0x410>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d02c      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	; (8003f38 <HAL_DMA_IRQHandler+0x414>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	; (8003f3c <HAL_DMA_IRQHandler+0x418>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a5b      	ldr	r2, [pc, #364]	; (8003f40 <HAL_DMA_IRQHandler+0x41c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01d      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5a      	ldr	r2, [pc, #360]	; (8003f44 <HAL_DMA_IRQHandler+0x420>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a58      	ldr	r2, [pc, #352]	; (8003f48 <HAL_DMA_IRQHandler+0x424>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a57      	ldr	r2, [pc, #348]	; (8003f4c <HAL_DMA_IRQHandler+0x428>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a55      	ldr	r2, [pc, #340]	; (8003f50 <HAL_DMA_IRQHandler+0x42c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a54      	ldr	r2, [pc, #336]	; (8003f54 <HAL_DMA_IRQHandler+0x430>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_DMA_IRQHandler+0x434>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10a      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x304>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e003      	b.n	8003e30 <HAL_DMA_IRQHandler+0x30c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0202 	orr.w	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2204      	movs	r2, #4
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808f 	beq.w	8003f84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <HAL_DMA_IRQHandler+0x3f8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d04a      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <HAL_DMA_IRQHandler+0x3fc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d045      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <HAL_DMA_IRQHandler+0x400>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d040      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <HAL_DMA_IRQHandler+0x404>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d03b      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <HAL_DMA_IRQHandler+0x408>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d036      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_DMA_IRQHandler+0x40c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d031      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_DMA_IRQHandler+0x410>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d02c      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_DMA_IRQHandler+0x414>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d027      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a20      	ldr	r2, [pc, #128]	; (8003f3c <HAL_DMA_IRQHandler+0x418>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_DMA_IRQHandler+0x41c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01d      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <HAL_DMA_IRQHandler+0x420>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_DMA_IRQHandler+0x424>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_DMA_IRQHandler+0x428>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_DMA_IRQHandler+0x42c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_DMA_IRQHandler+0x430>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_DMA_IRQHandler+0x434>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12a      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x438>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e023      	b.n	8003f64 <HAL_DMA_IRQHandler+0x440>
 8003f1c:	40020010 	.word	0x40020010
 8003f20:	40020028 	.word	0x40020028
 8003f24:	40020040 	.word	0x40020040
 8003f28:	40020058 	.word	0x40020058
 8003f2c:	40020070 	.word	0x40020070
 8003f30:	40020088 	.word	0x40020088
 8003f34:	400200a0 	.word	0x400200a0
 8003f38:	400200b8 	.word	0x400200b8
 8003f3c:	40020410 	.word	0x40020410
 8003f40:	40020428 	.word	0x40020428
 8003f44:	40020440 	.word	0x40020440
 8003f48:	40020458 	.word	0x40020458
 8003f4c:	40020470 	.word	0x40020470
 8003f50:	40020488 	.word	0x40020488
 8003f54:	400204a0 	.word	0x400204a0
 8003f58:	400204b8 	.word	0x400204b8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2204      	movs	r2, #4
 8003f72:	409a      	lsls	r2, r3
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a6 	beq.w	80040e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a85      	ldr	r2, [pc, #532]	; (80041b4 <HAL_DMA_IRQHandler+0x690>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d04a      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <HAL_DMA_IRQHandler+0x694>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d045      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a82      	ldr	r2, [pc, #520]	; (80041bc <HAL_DMA_IRQHandler+0x698>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d040      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a80      	ldr	r2, [pc, #512]	; (80041c0 <HAL_DMA_IRQHandler+0x69c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03b      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7f      	ldr	r2, [pc, #508]	; (80041c4 <HAL_DMA_IRQHandler+0x6a0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d036      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a7d      	ldr	r2, [pc, #500]	; (80041c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7c      	ldr	r2, [pc, #496]	; (80041cc <HAL_DMA_IRQHandler+0x6a8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d02c      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a7a      	ldr	r2, [pc, #488]	; (80041d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d027      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a79      	ldr	r2, [pc, #484]	; (80041d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a77      	ldr	r2, [pc, #476]	; (80041d8 <HAL_DMA_IRQHandler+0x6b4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a76      	ldr	r2, [pc, #472]	; (80041dc <HAL_DMA_IRQHandler+0x6b8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a74      	ldr	r2, [pc, #464]	; (80041e0 <HAL_DMA_IRQHandler+0x6bc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a73      	ldr	r2, [pc, #460]	; (80041e4 <HAL_DMA_IRQHandler+0x6c0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a71      	ldr	r2, [pc, #452]	; (80041e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a70      	ldr	r2, [pc, #448]	; (80041ec <HAL_DMA_IRQHandler+0x6c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a6e      	ldr	r2, [pc, #440]	; (80041f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10a      	bne.n	8004050 <HAL_DMA_IRQHandler+0x52c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e009      	b.n	8004064 <HAL_DMA_IRQHandler+0x540>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03e      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2210      	movs	r2, #16
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d024      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
 80040a4:	e01f      	b.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e016      	b.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0208 	bic.w	r2, r2, #8
 80040d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2220      	movs	r2, #32
 80040f0:	409a      	lsls	r2, r3
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8110 	beq.w	800431c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <HAL_DMA_IRQHandler+0x690>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d04a      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <HAL_DMA_IRQHandler+0x694>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d045      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <HAL_DMA_IRQHandler+0x698>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d040      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <HAL_DMA_IRQHandler+0x69c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d03b      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_DMA_IRQHandler+0x6a0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d036      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <HAL_DMA_IRQHandler+0x6a4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d031      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a23      	ldr	r2, [pc, #140]	; (80041cc <HAL_DMA_IRQHandler+0x6a8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d02c      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_DMA_IRQHandler+0x6ac>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_DMA_IRQHandler+0x6b0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d022      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_DMA_IRQHandler+0x6b4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d01d      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <HAL_DMA_IRQHandler+0x6b8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d018      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <HAL_DMA_IRQHandler+0x6bc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_DMA_IRQHandler+0x6c0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00e      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_DMA_IRQHandler+0x6c4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a17      	ldr	r2, [pc, #92]	; (80041ec <HAL_DMA_IRQHandler+0x6c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <HAL_DMA_IRQHandler+0x6cc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d12b      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x6d0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e02a      	b.n	8004208 <HAL_DMA_IRQHandler+0x6e4>
 80041b2:	bf00      	nop
 80041b4:	40020010 	.word	0x40020010
 80041b8:	40020028 	.word	0x40020028
 80041bc:	40020040 	.word	0x40020040
 80041c0:	40020058 	.word	0x40020058
 80041c4:	40020070 	.word	0x40020070
 80041c8:	40020088 	.word	0x40020088
 80041cc:	400200a0 	.word	0x400200a0
 80041d0:	400200b8 	.word	0x400200b8
 80041d4:	40020410 	.word	0x40020410
 80041d8:	40020428 	.word	0x40020428
 80041dc:	40020440 	.word	0x40020440
 80041e0:	40020458 	.word	0x40020458
 80041e4:	40020470 	.word	0x40020470
 80041e8:	40020488 	.word	0x40020488
 80041ec:	400204a0 	.word	0x400204a0
 80041f0:	400204b8 	.word	0x400204b8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8087 	beq.w	800431c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2220      	movs	r2, #32
 8004218:	409a      	lsls	r2, r3
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b04      	cmp	r3, #4
 8004228:	d139      	bne.n	800429e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0216 	bic.w	r2, r2, #22
 8004238:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004248:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <HAL_DMA_IRQHandler+0x736>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0208 	bic.w	r2, r2, #8
 8004268:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 834a 	beq.w	8004928 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
          }
          return;
 800429c:	e344      	b.n	8004928 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d018      	beq.n	80042de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e027      	b.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d023      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e01e      	b.n	800431c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0210 	bic.w	r2, r2, #16
 80042fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8306 	beq.w	8004932 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8088 	beq.w	8004444 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a7a      	ldr	r2, [pc, #488]	; (800452c <HAL_DMA_IRQHandler+0xa08>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a79      	ldr	r2, [pc, #484]	; (8004530 <HAL_DMA_IRQHandler+0xa0c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d045      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a77      	ldr	r2, [pc, #476]	; (8004534 <HAL_DMA_IRQHandler+0xa10>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d040      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a76      	ldr	r2, [pc, #472]	; (8004538 <HAL_DMA_IRQHandler+0xa14>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d03b      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a74      	ldr	r2, [pc, #464]	; (800453c <HAL_DMA_IRQHandler+0xa18>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d036      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a73      	ldr	r2, [pc, #460]	; (8004540 <HAL_DMA_IRQHandler+0xa1c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d031      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a71      	ldr	r2, [pc, #452]	; (8004544 <HAL_DMA_IRQHandler+0xa20>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02c      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a70      	ldr	r2, [pc, #448]	; (8004548 <HAL_DMA_IRQHandler+0xa24>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d027      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6e      	ldr	r2, [pc, #440]	; (800454c <HAL_DMA_IRQHandler+0xa28>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d022      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6d      	ldr	r2, [pc, #436]	; (8004550 <HAL_DMA_IRQHandler+0xa2c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01d      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6b      	ldr	r2, [pc, #428]	; (8004554 <HAL_DMA_IRQHandler+0xa30>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d018      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6a      	ldr	r2, [pc, #424]	; (8004558 <HAL_DMA_IRQHandler+0xa34>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a68      	ldr	r2, [pc, #416]	; (800455c <HAL_DMA_IRQHandler+0xa38>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00e      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a67      	ldr	r2, [pc, #412]	; (8004560 <HAL_DMA_IRQHandler+0xa3c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d009      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_DMA_IRQHandler+0xa40>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a64      	ldr	r2, [pc, #400]	; (8004568 <HAL_DMA_IRQHandler+0xa44>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_DMA_IRQHandler+0x8ca>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_DMA_IRQHandler+0x8da>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	429a      	cmp	r2, r3
 8004408:	d307      	bcc.n	800441a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f2      	bne.n	80043fe <HAL_DMA_IRQHandler+0x8da>
 8004418:	e000      	b.n	800441c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800441a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004432:	e003      	b.n	800443c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8272 	beq.w	8004932 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
 8004456:	e26c      	b.n	8004932 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a43      	ldr	r2, [pc, #268]	; (800456c <HAL_DMA_IRQHandler+0xa48>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a42      	ldr	r2, [pc, #264]	; (8004570 <HAL_DMA_IRQHandler+0xa4c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a40      	ldr	r2, [pc, #256]	; (8004574 <HAL_DMA_IRQHandler+0xa50>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3f      	ldr	r2, [pc, #252]	; (8004578 <HAL_DMA_IRQHandler+0xa54>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a3d      	ldr	r2, [pc, #244]	; (800457c <HAL_DMA_IRQHandler+0xa58>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <HAL_DMA_IRQHandler+0xa5c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3a      	ldr	r2, [pc, #232]	; (8004584 <HAL_DMA_IRQHandler+0xa60>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x984>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_DMA_IRQHandler+0xa64>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_DMA_IRQHandler+0x988>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_DMA_IRQHandler+0x98a>
 80044ac:	2300      	movs	r3, #0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 823f 	beq.w	8004932 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2204      	movs	r2, #4
 80044c6:	409a      	lsls	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80cd 	beq.w	800466c <HAL_DMA_IRQHandler+0xb48>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80c7 	beq.w	800466c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2204      	movs	r2, #4
 80044e8:	409a      	lsls	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d049      	beq.n	800458c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8210 	beq.w	800492c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004514:	e20a      	b.n	800492c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8206 	beq.w	800492c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004528:	e200      	b.n	800492c <HAL_DMA_IRQHandler+0xe08>
 800452a:	bf00      	nop
 800452c:	40020010 	.word	0x40020010
 8004530:	40020028 	.word	0x40020028
 8004534:	40020040 	.word	0x40020040
 8004538:	40020058 	.word	0x40020058
 800453c:	40020070 	.word	0x40020070
 8004540:	40020088 	.word	0x40020088
 8004544:	400200a0 	.word	0x400200a0
 8004548:	400200b8 	.word	0x400200b8
 800454c:	40020410 	.word	0x40020410
 8004550:	40020428 	.word	0x40020428
 8004554:	40020440 	.word	0x40020440
 8004558:	40020458 	.word	0x40020458
 800455c:	40020470 	.word	0x40020470
 8004560:	40020488 	.word	0x40020488
 8004564:	400204a0 	.word	0x400204a0
 8004568:	400204b8 	.word	0x400204b8
 800456c:	58025408 	.word	0x58025408
 8004570:	5802541c 	.word	0x5802541c
 8004574:	58025430 	.word	0x58025430
 8004578:	58025444 	.word	0x58025444
 800457c:	58025458 	.word	0x58025458
 8004580:	5802546c 	.word	0x5802546c
 8004584:	58025480 	.word	0x58025480
 8004588:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d160      	bne.n	8004658 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a7f      	ldr	r2, [pc, #508]	; (8004798 <HAL_DMA_IRQHandler+0xc74>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_DMA_IRQHandler+0xc78>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a7c      	ldr	r2, [pc, #496]	; (80047a0 <HAL_DMA_IRQHandler+0xc7c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a7a      	ldr	r2, [pc, #488]	; (80047a4 <HAL_DMA_IRQHandler+0xc80>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a79      	ldr	r2, [pc, #484]	; (80047a8 <HAL_DMA_IRQHandler+0xc84>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a77      	ldr	r2, [pc, #476]	; (80047ac <HAL_DMA_IRQHandler+0xc88>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a76      	ldr	r2, [pc, #472]	; (80047b0 <HAL_DMA_IRQHandler+0xc8c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a74      	ldr	r2, [pc, #464]	; (80047b4 <HAL_DMA_IRQHandler+0xc90>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <HAL_DMA_IRQHandler+0xc94>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a71      	ldr	r2, [pc, #452]	; (80047bc <HAL_DMA_IRQHandler+0xc98>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a70      	ldr	r2, [pc, #448]	; (80047c0 <HAL_DMA_IRQHandler+0xc9c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a6e      	ldr	r2, [pc, #440]	; (80047c4 <HAL_DMA_IRQHandler+0xca0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6d      	ldr	r2, [pc, #436]	; (80047c8 <HAL_DMA_IRQHandler+0xca4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6b      	ldr	r2, [pc, #428]	; (80047cc <HAL_DMA_IRQHandler+0xca8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6a      	ldr	r2, [pc, #424]	; (80047d0 <HAL_DMA_IRQHandler+0xcac>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a68      	ldr	r2, [pc, #416]	; (80047d4 <HAL_DMA_IRQHandler+0xcb0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <HAL_DMA_IRQHandler+0xb24>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0208 	bic.w	r2, r2, #8
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e007      	b.n	8004658 <HAL_DMA_IRQHandler+0xb34>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8165 	beq.w	800492c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800466a:	e15f      	b.n	800492c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2202      	movs	r2, #2
 8004676:	409a      	lsls	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80c5 	beq.w	800480c <HAL_DMA_IRQHandler+0xce8>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80bf 	beq.w	800480c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2202      	movs	r2, #2
 8004698:	409a      	lsls	r2, r3
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d018      	beq.n	80046da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 813a 	beq.w	8004930 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c4:	e134      	b.n	8004930 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8130 	beq.w	8004930 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d8:	e12a      	b.n	8004930 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 8089 	bne.w	80047f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <HAL_DMA_IRQHandler+0xc74>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d04a      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a29      	ldr	r2, [pc, #164]	; (800479c <HAL_DMA_IRQHandler+0xc78>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d045      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a28      	ldr	r2, [pc, #160]	; (80047a0 <HAL_DMA_IRQHandler+0xc7c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d040      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <HAL_DMA_IRQHandler+0xc80>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d03b      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <HAL_DMA_IRQHandler+0xc84>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d036      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <HAL_DMA_IRQHandler+0xc88>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d031      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_DMA_IRQHandler+0xc8c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d02c      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <HAL_DMA_IRQHandler+0xc90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d027      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <HAL_DMA_IRQHandler+0xc94>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d022      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_DMA_IRQHandler+0xc98>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01d      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_DMA_IRQHandler+0xc9c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d018      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_DMA_IRQHandler+0xca0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_DMA_IRQHandler+0xca4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_DMA_IRQHandler+0xca8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_DMA_IRQHandler+0xcac>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_DMA_IRQHandler+0xc62>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_DMA_IRQHandler+0xcb0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d128      	bne.n	80047d8 <HAL_DMA_IRQHandler+0xcb4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0214 	bic.w	r2, r2, #20
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e027      	b.n	80047e8 <HAL_DMA_IRQHandler+0xcc4>
 8004798:	40020010 	.word	0x40020010
 800479c:	40020028 	.word	0x40020028
 80047a0:	40020040 	.word	0x40020040
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40020070 	.word	0x40020070
 80047ac:	40020088 	.word	0x40020088
 80047b0:	400200a0 	.word	0x400200a0
 80047b4:	400200b8 	.word	0x400200b8
 80047b8:	40020410 	.word	0x40020410
 80047bc:	40020428 	.word	0x40020428
 80047c0:	40020440 	.word	0x40020440
 80047c4:	40020458 	.word	0x40020458
 80047c8:	40020470 	.word	0x40020470
 80047cc:	40020488 	.word	0x40020488
 80047d0:	400204a0 	.word	0x400204a0
 80047d4:	400204b8 	.word	0x400204b8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 020a 	bic.w	r2, r2, #10
 80047e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8097 	beq.w	8004930 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800480a:	e091      	b.n	8004930 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2208      	movs	r2, #8
 8004816:	409a      	lsls	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8088 	beq.w	8004932 <HAL_DMA_IRQHandler+0xe0e>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8082 	beq.w	8004932 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a41      	ldr	r2, [pc, #260]	; (8004938 <HAL_DMA_IRQHandler+0xe14>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3f      	ldr	r2, [pc, #252]	; (800493c <HAL_DMA_IRQHandler+0xe18>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3e      	ldr	r2, [pc, #248]	; (8004940 <HAL_DMA_IRQHandler+0xe1c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <HAL_DMA_IRQHandler+0xe20>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a3b      	ldr	r2, [pc, #236]	; (8004948 <HAL_DMA_IRQHandler+0xe24>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a39      	ldr	r2, [pc, #228]	; (800494c <HAL_DMA_IRQHandler+0xe28>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a38      	ldr	r2, [pc, #224]	; (8004950 <HAL_DMA_IRQHandler+0xe2c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a36      	ldr	r2, [pc, #216]	; (8004954 <HAL_DMA_IRQHandler+0xe30>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a35      	ldr	r2, [pc, #212]	; (8004958 <HAL_DMA_IRQHandler+0xe34>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a33      	ldr	r2, [pc, #204]	; (800495c <HAL_DMA_IRQHandler+0xe38>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a32      	ldr	r2, [pc, #200]	; (8004960 <HAL_DMA_IRQHandler+0xe3c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_DMA_IRQHandler+0xe40>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <HAL_DMA_IRQHandler+0xe44>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2d      	ldr	r2, [pc, #180]	; (800496c <HAL_DMA_IRQHandler+0xe48>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2c      	ldr	r2, [pc, #176]	; (8004970 <HAL_DMA_IRQHandler+0xe4c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <HAL_DMA_IRQHandler+0xe50>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <HAL_DMA_IRQHandler+0xdbc>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 021c 	bic.w	r2, r2, #28
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e007      	b.n	80048f0 <HAL_DMA_IRQHandler+0xdcc>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020e 	bic.w	r2, r2, #14
 80048ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e004      	b.n	8004932 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004930:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004932:	3728      	adds	r7, #40	; 0x28
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8

08004978 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7f      	ldr	r2, [pc, #508]	; (8004b94 <DMA_SetConfig+0x21c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d072      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a7d      	ldr	r2, [pc, #500]	; (8004b98 <DMA_SetConfig+0x220>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d06d      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7c      	ldr	r2, [pc, #496]	; (8004b9c <DMA_SetConfig+0x224>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d068      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7a      	ldr	r2, [pc, #488]	; (8004ba0 <DMA_SetConfig+0x228>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d063      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a79      	ldr	r2, [pc, #484]	; (8004ba4 <DMA_SetConfig+0x22c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d05e      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a77      	ldr	r2, [pc, #476]	; (8004ba8 <DMA_SetConfig+0x230>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d059      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a76      	ldr	r2, [pc, #472]	; (8004bac <DMA_SetConfig+0x234>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d054      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a74      	ldr	r2, [pc, #464]	; (8004bb0 <DMA_SetConfig+0x238>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d04f      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a73      	ldr	r2, [pc, #460]	; (8004bb4 <DMA_SetConfig+0x23c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04a      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <DMA_SetConfig+0x240>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d045      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a70      	ldr	r2, [pc, #448]	; (8004bbc <DMA_SetConfig+0x244>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d040      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6e      	ldr	r2, [pc, #440]	; (8004bc0 <DMA_SetConfig+0x248>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d03b      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a6d      	ldr	r2, [pc, #436]	; (8004bc4 <DMA_SetConfig+0x24c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d036      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a6b      	ldr	r2, [pc, #428]	; (8004bc8 <DMA_SetConfig+0x250>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d031      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6a      	ldr	r2, [pc, #424]	; (8004bcc <DMA_SetConfig+0x254>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d02c      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <DMA_SetConfig+0x258>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d027      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a67      	ldr	r2, [pc, #412]	; (8004bd4 <DMA_SetConfig+0x25c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d022      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a65      	ldr	r2, [pc, #404]	; (8004bd8 <DMA_SetConfig+0x260>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a64      	ldr	r2, [pc, #400]	; (8004bdc <DMA_SetConfig+0x264>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d018      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a62      	ldr	r2, [pc, #392]	; (8004be0 <DMA_SetConfig+0x268>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <DMA_SetConfig+0x26c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a5f      	ldr	r2, [pc, #380]	; (8004be8 <DMA_SetConfig+0x270>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <DMA_SetConfig+0x274>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <DMA_SetConfig+0x10a>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a5c      	ldr	r2, [pc, #368]	; (8004bf0 <DMA_SetConfig+0x278>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <DMA_SetConfig+0x10e>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <DMA_SetConfig+0x110>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aa6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a39      	ldr	r2, [pc, #228]	; (8004b94 <DMA_SetConfig+0x21c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d04a      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <DMA_SetConfig+0x220>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d045      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <DMA_SetConfig+0x224>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d040      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <DMA_SetConfig+0x228>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d03b      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a33      	ldr	r2, [pc, #204]	; (8004ba4 <DMA_SetConfig+0x22c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d036      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <DMA_SetConfig+0x230>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d031      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <DMA_SetConfig+0x234>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02c      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <DMA_SetConfig+0x238>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d027      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <DMA_SetConfig+0x23c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d022      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <DMA_SetConfig+0x240>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d01d      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <DMA_SetConfig+0x244>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d018      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <DMA_SetConfig+0x248>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <DMA_SetConfig+0x24c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <DMA_SetConfig+0x250>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d009      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <DMA_SetConfig+0x254>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <DMA_SetConfig+0x1d0>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <DMA_SetConfig+0x258>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d101      	bne.n	8004b4c <DMA_SetConfig+0x1d4>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <DMA_SetConfig+0x1d6>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d059      	beq.n	8004c06 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	223f      	movs	r2, #63	; 0x3f
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b70:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d138      	bne.n	8004bf4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b92:	e086      	b.n	8004ca2 <DMA_SetConfig+0x32a>
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	58025408 	.word	0x58025408
 8004bd8:	5802541c 	.word	0x5802541c
 8004bdc:	58025430 	.word	0x58025430
 8004be0:	58025444 	.word	0x58025444
 8004be4:	58025458 	.word	0x58025458
 8004be8:	5802546c 	.word	0x5802546c
 8004bec:	58025480 	.word	0x58025480
 8004bf0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]
}
 8004c04:	e04d      	b.n	8004ca2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <DMA_SetConfig+0x338>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <DMA_SetConfig+0x33c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <DMA_SetConfig+0x340>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <DMA_SetConfig+0x344>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <DMA_SetConfig+0x348>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a21      	ldr	r2, [pc, #132]	; (8004cc4 <DMA_SetConfig+0x34c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a20      	ldr	r2, [pc, #128]	; (8004cc8 <DMA_SetConfig+0x350>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <DMA_SetConfig+0x2de>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <DMA_SetConfig+0x354>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <DMA_SetConfig+0x2e2>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <DMA_SetConfig+0x2e4>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d108      	bne.n	8004c92 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
}
 8004c90:	e007      	b.n	8004ca2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	58025408 	.word	0x58025408
 8004cb4:	5802541c 	.word	0x5802541c
 8004cb8:	58025430 	.word	0x58025430
 8004cbc:	58025444 	.word	0x58025444
 8004cc0:	58025458 	.word	0x58025458
 8004cc4:	5802546c 	.word	0x5802546c
 8004cc8:	58025480 	.word	0x58025480
 8004ccc:	58025494 	.word	0x58025494

08004cd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a42      	ldr	r2, [pc, #264]	; (8004de8 <DMA_CalcBaseAndBitshift+0x118>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <DMA_CalcBaseAndBitshift+0x11c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3f      	ldr	r2, [pc, #252]	; (8004df0 <DMA_CalcBaseAndBitshift+0x120>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a3e      	ldr	r2, [pc, #248]	; (8004df4 <DMA_CalcBaseAndBitshift+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <DMA_CalcBaseAndBitshift+0x128>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <DMA_CalcBaseAndBitshift+0x12c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a39      	ldr	r2, [pc, #228]	; (8004e00 <DMA_CalcBaseAndBitshift+0x130>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <DMA_CalcBaseAndBitshift+0x134>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a36      	ldr	r2, [pc, #216]	; (8004e08 <DMA_CalcBaseAndBitshift+0x138>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <DMA_CalcBaseAndBitshift+0x13c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <DMA_CalcBaseAndBitshift+0x140>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a32      	ldr	r2, [pc, #200]	; (8004e14 <DMA_CalcBaseAndBitshift+0x144>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <DMA_CalcBaseAndBitshift+0x148>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <DMA_CalcBaseAndBitshift+0x14c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <DMA_CalcBaseAndBitshift+0x150>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <DMA_CalcBaseAndBitshift+0x154>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <DMA_CalcBaseAndBitshift+0xac>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <DMA_CalcBaseAndBitshift+0xae>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d024      	beq.n	8004dcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3b10      	subs	r3, #16
 8004d8a:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <DMA_CalcBaseAndBitshift+0x158>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	4a24      	ldr	r2, [pc, #144]	; (8004e2c <DMA_CalcBaseAndBitshift+0x15c>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d908      	bls.n	8004dbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <DMA_CalcBaseAndBitshift+0x160>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dba:	e00d      	b.n	8004dd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <DMA_CalcBaseAndBitshift+0x160>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dca:	e005      	b.n	8004dd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40020010 	.word	0x40020010
 8004dec:	40020028 	.word	0x40020028
 8004df0:	40020040 	.word	0x40020040
 8004df4:	40020058 	.word	0x40020058
 8004df8:	40020070 	.word	0x40020070
 8004dfc:	40020088 	.word	0x40020088
 8004e00:	400200a0 	.word	0x400200a0
 8004e04:	400200b8 	.word	0x400200b8
 8004e08:	40020410 	.word	0x40020410
 8004e0c:	40020428 	.word	0x40020428
 8004e10:	40020440 	.word	0x40020440
 8004e14:	40020458 	.word	0x40020458
 8004e18:	40020470 	.word	0x40020470
 8004e1c:	40020488 	.word	0x40020488
 8004e20:	400204a0 	.word	0x400204a0
 8004e24:	400204b8 	.word	0x400204b8
 8004e28:	aaaaaaab 	.word	0xaaaaaaab
 8004e2c:	080204b4 	.word	0x080204b4
 8004e30:	fffffc00 	.word	0xfffffc00

08004e34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d120      	bne.n	8004e8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d858      	bhi.n	8004f02 <DMA_CheckFifoParam+0xce>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <DMA_CheckFifoParam+0x24>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e7b 	.word	0x08004e7b
 8004e60:	08004e69 	.word	0x08004e69
 8004e64:	08004f03 	.word	0x08004f03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d048      	beq.n	8004f06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e78:	e045      	b.n	8004f06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e82:	d142      	bne.n	8004f0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e88:	e03f      	b.n	8004f0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e92:	d123      	bne.n	8004edc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d838      	bhi.n	8004f0e <DMA_CheckFifoParam+0xda>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <DMA_CheckFifoParam+0x70>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ebb 	.word	0x08004ebb
 8004eac:	08004eb5 	.word	0x08004eb5
 8004eb0:	08004ecd 	.word	0x08004ecd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb8:	e030      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d025      	beq.n	8004f12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eca:	e022      	b.n	8004f12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed4:	d11f      	bne.n	8004f16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eda:	e01c      	b.n	8004f16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <DMA_CheckFifoParam+0xb6>
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d003      	beq.n	8004ef0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ee8:	e018      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
        break;
 8004eee:	e015      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00e      	beq.n	8004f1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
    break;
 8004f00:	e00b      	b.n	8004f1a <DMA_CheckFifoParam+0xe6>
        break;
 8004f02:	bf00      	nop
 8004f04:	e00a      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e008      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e006      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
        break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
    break;
 8004f1a:	bf00      	nop
    }
  }

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a38      	ldr	r2, [pc, #224]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a36      	ldr	r2, [pc, #216]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a35      	ldr	r2, [pc, #212]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d018      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a33      	ldr	r2, [pc, #204]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a32      	ldr	r2, [pc, #200]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00e      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a30      	ldr	r2, [pc, #192]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d009      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	3b08      	subs	r3, #8
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4b26      	ldr	r3, [pc, #152]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a24      	ldr	r2, [pc, #144]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fc8:	e024      	b.n	8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	3b10      	subs	r3, #16
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d806      	bhi.n	8004ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d902      	bls.n	8004ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4b18      	ldr	r3, [pc, #96]	; (8005058 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005004:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	58025408 	.word	0x58025408
 8005024:	5802541c 	.word	0x5802541c
 8005028:	58025430 	.word	0x58025430
 800502c:	58025444 	.word	0x58025444
 8005030:	58025458 	.word	0x58025458
 8005034:	5802546c 	.word	0x5802546c
 8005038:	58025480 	.word	0x58025480
 800503c:	58025494 	.word	0x58025494
 8005040:	cccccccd 	.word	0xcccccccd
 8005044:	16009600 	.word	0x16009600
 8005048:	58025880 	.word	0x58025880
 800504c:	aaaaaaab 	.word	0xaaaaaaab
 8005050:	400204b8 	.word	0x400204b8
 8005054:	4002040f 	.word	0x4002040f
 8005058:	10008200 	.word	0x10008200
 800505c:	40020880 	.word	0x40020880

08005060 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04a      	beq.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d847      	bhi.n	800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a24      	ldr	r2, [pc, #144]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a22      	ldr	r2, [pc, #136]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1c      	ldr	r2, [pc, #112]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a15      	ldr	r2, [pc, #84]	; (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050e8:	671a      	str	r2, [r3, #112]	; 0x70
 80050ea:	e009      	b.n	8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494
 8005138:	1600963f 	.word	0x1600963f
 800513c:	58025940 	.word	0x58025940
 8005140:	1000823f 	.word	0x1000823f
 8005144:	40020940 	.word	0x40020940

08005148 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0cf      	b.n	80052fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2223      	movs	r2, #35	; 0x23
 8005168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fb fcbd 	bl	8000aec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005172:	4b64      	ldr	r3, [pc, #400]	; (8005304 <HAL_ETH_Init+0x1bc>)
 8005174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005178:	4a62      	ldr	r2, [pc, #392]	; (8005304 <HAL_ETH_Init+0x1bc>)
 800517a:	f043 0302 	orr.w	r3, r3, #2
 800517e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005182:	4b60      	ldr	r3, [pc, #384]	; (8005304 <HAL_ETH_Init+0x1bc>)
 8005184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7a1b      	ldrb	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005198:	2000      	movs	r0, #0
 800519a:	f7fd f8a5 	bl	80022e8 <HAL_SYSCFG_ETHInterfaceSelect>
 800519e:	e003      	b.n	80051a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80051a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80051a4:	f7fd f8a0 	bl	80022e8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80051a8:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_ETH_Init+0x1c0>)
 80051aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c4:	f7fd f854 	bl	8002270 <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051ca:	e011      	b.n	80051f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051cc:	f7fd f850 	bl	8002270 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051da:	d909      	bls.n	80051f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	22e0      	movs	r2, #224	; 0xe0
 80051e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e084      	b.n	80052fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e4      	bne.n	80051cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f886 	bl	8005314 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005208:	f002 fc88 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 800520c:	4603      	mov	r3, r0
 800520e:	4a3f      	ldr	r2, [pc, #252]	; (800530c <HAL_ETH_Init+0x1c4>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	0c9a      	lsrs	r2, r3, #18
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3a01      	subs	r2, #1
 800521c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fa71 	bl	8005708 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005232:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800523e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005242:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d009      	beq.n	8005266 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	22e0      	movs	r2, #224	; 0xe0
 800525e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e049      	b.n	80052fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_ETH_Init+0x1c8>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6952      	ldr	r2, [r2, #20]
 800527a:	0051      	lsls	r1, r2, #1
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005286:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fad9 	bl	8005842 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb1f 	bl	80058d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	3305      	adds	r3, #5
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	3303      	adds	r3, #3
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	061a      	lsls	r2, r3, #24
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	3302      	adds	r3, #2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	3301      	adds	r3, #1
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2210      	movs	r2, #16
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	58000400 	.word	0x58000400
 800530c:	431bde83 	.word	0x431bde83
 8005310:	ffff8001 	.word	0xffff8001

08005314 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005324:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800532c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800532e:	f002 fbf5 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 8005332:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d908      	bls.n	800534e <HAL_ETH_SetMDIOClockRange+0x3a>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d804      	bhi.n	800534e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e027      	b.n	800539e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d908      	bls.n	8005368 <HAL_ETH_SetMDIOClockRange+0x54>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d204      	bcs.n	8005368 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e01a      	b.n	800539e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d303      	bcc.n	8005378 <HAL_ETH_SetMDIOClockRange+0x64>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a12      	ldr	r2, [pc, #72]	; (80053bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d911      	bls.n	800539c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d908      	bls.n	8005392 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d804      	bhi.n	8005392 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e005      	b.n	800539e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e000      	b.n	800539e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800539c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	01312cff 	.word	0x01312cff
 80053b4:	02160ebf 	.word	0x02160ebf
 80053b8:	03938700 	.word	0x03938700
 80053bc:	05f5e0ff 	.word	0x05f5e0ff
 80053c0:	08f0d17f 	.word	0x08f0d17f

080053c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	791b      	ldrb	r3, [r3, #4]
 80053dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	7b1b      	ldrb	r3, [r3, #12]
 80053e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b5b      	ldrb	r3, [r3, #13]
 80053ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	7b9b      	ldrb	r3, [r3, #14]
 80053f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	7bdb      	ldrb	r3, [r3, #15]
 80053fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	7c12      	ldrb	r2, [r2, #16]
 8005404:	2a00      	cmp	r2, #0
 8005406:	d102      	bne.n	800540e <ETH_SetMACConfig+0x4a>
 8005408:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800540c:	e000      	b.n	8005410 <ETH_SetMACConfig+0x4c>
 800540e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005410:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	7c52      	ldrb	r2, [r2, #17]
 8005416:	2a00      	cmp	r2, #0
 8005418:	d102      	bne.n	8005420 <ETH_SetMACConfig+0x5c>
 800541a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800541e:	e000      	b.n	8005422 <ETH_SetMACConfig+0x5e>
 8005420:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	7c9b      	ldrb	r3, [r3, #18]
 8005428:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800542a:	431a      	orrs	r2, r3
               macconf->Speed |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005430:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	7f1b      	ldrb	r3, [r3, #28]
 800543c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800543e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	7f5b      	ldrb	r3, [r3, #29]
 8005444:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005446:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	7f92      	ldrb	r2, [r2, #30]
 800544c:	2a00      	cmp	r2, #0
 800544e:	d102      	bne.n	8005456 <ETH_SetMACConfig+0x92>
 8005450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005454:	e000      	b.n	8005458 <ETH_SetMACConfig+0x94>
 8005456:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005458:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7fdb      	ldrb	r3, [r3, #31]
 800545e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005460:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005468:	2a00      	cmp	r2, #0
 800546a:	d102      	bne.n	8005472 <ETH_SetMACConfig+0xae>
 800546c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005470:	e000      	b.n	8005474 <ETH_SetMACConfig+0xb0>
 8005472:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005474:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800547a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005482:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005484:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <ETH_SetMACConfig+0x22c>)
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	68f9      	ldr	r1, [r7, #12]
 800549e:	430b      	orrs	r3, r1
 80054a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d102      	bne.n	80054d6 <ETH_SetMACConfig+0x112>
 80054d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054d4:	e000      	b.n	80054d8 <ETH_SetMACConfig+0x114>
 80054d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <ETH_SetMACConfig+0x230>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6812      	ldr	r2, [r2, #0]
 80054f0:	68f9      	ldr	r1, [r7, #12]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <ETH_SetMACConfig+0x234>)
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	430b      	orrs	r3, r1
 8005518:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005520:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005526:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800552e:	2a00      	cmp	r2, #0
 8005530:	d101      	bne.n	8005536 <ETH_SetMACConfig+0x172>
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	e000      	b.n	8005538 <ETH_SetMACConfig+0x174>
 8005536:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005538:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800554a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800554e:	4013      	ands	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	430b      	orrs	r3, r1
 8005558:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005560:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005568:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f023 0103 	bic.w	r1, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	430a      	orrs	r2, r1
 8005582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800558e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	d101      	bne.n	80055b2 <ETH_SetMACConfig+0x1ee>
 80055ae:	2240      	movs	r2, #64	; 0x40
 80055b0:	e000      	b.n	80055b4 <ETH_SetMACConfig+0x1f0>
 80055b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055d4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	430a      	orrs	r2, r1
 80055e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	00048083 	.word	0x00048083
 80055f4:	c0f88000 	.word	0xc0f88000
 80055f8:	fffffef0 	.word	0xfffffef0

080055fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <ETH_SetDMAConfig+0xf8>)
 8005612:	4013      	ands	r3, r2
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	6811      	ldr	r1, [r2, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	430b      	orrs	r3, r1
 800561e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005622:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	791b      	ldrb	r3, [r3, #4]
 8005628:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800562e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	7b1b      	ldrb	r3, [r3, #12]
 8005634:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	4b2c      	ldr	r3, [pc, #176]	; (80056f8 <ETH_SetDMAConfig+0xfc>)
 8005646:	4013      	ands	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	68f9      	ldr	r1, [r7, #12]
 800564e:	430b      	orrs	r3, r1
 8005650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005654:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	7b5b      	ldrb	r3, [r3, #13]
 800565a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <ETH_SetDMAConfig+0x100>)
 8005672:	4013      	ands	r3, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	430b      	orrs	r3, r1
 800567c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005680:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	7d1b      	ldrb	r3, [r3, #20]
 800568c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800568e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7f5b      	ldrb	r3, [r3, #29]
 8005694:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80056a6:	4b16      	ldr	r3, [pc, #88]	; (8005700 <ETH_SetDMAConfig+0x104>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	430b      	orrs	r3, r1
 80056b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	7f1b      	ldrb	r3, [r3, #28]
 80056be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <ETH_SetDMAConfig+0x108>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	430b      	orrs	r3, r1
 80056e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	ffff87fd 	.word	0xffff87fd
 80056f8:	ffff2ffe 	.word	0xffff2ffe
 80056fc:	fffec000 	.word	0xfffec000
 8005700:	ffc0efef 	.word	0xffc0efef
 8005704:	7fc0ffff 	.word	0x7fc0ffff

08005708 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0a4      	sub	sp, #144	; 0x90
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005716:	2300      	movs	r3, #0
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005750:	2300      	movs	r3, #0
 8005752:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005760:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005764:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800576c:	2300      	movs	r3, #0
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005782:	2300      	movs	r3, #0
 8005784:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005786:	2300      	movs	r3, #0
 8005788:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800578a:	2300      	movs	r3, #0
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80057a0:	2320      	movs	r3, #32
 80057a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057b2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057bc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057c4:	2302      	movs	r3, #2
 80057c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057e2:	2300      	movs	r3, #0
 80057e4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fde6 	bl	80053c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057fc:	2301      	movs	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800580a:	2300      	movs	r3, #0
 800580c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800580e:	2300      	movs	r3, #0
 8005810:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005812:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005816:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800581c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005820:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005828:	f44f 7306 	mov.w	r3, #536	; 0x218
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fee1 	bl	80055fc <ETH_SetDMAConfig>
}
 800583a:	bf00      	nop
 800583c:	3790      	adds	r7, #144	; 0x90
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e01d      	b.n	800588c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68d9      	ldr	r1, [r3, #12]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4613      	mov	r3, r2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	3206      	adds	r2, #6
 8005882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d9de      	bls.n	8005850 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a0:	461a      	mov	r2, r3
 80058a2:	2303      	movs	r3, #3
 80058a4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e023      	b.n	800592a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6919      	ldr	r1, [r3, #16]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4613      	mov	r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	3212      	adds	r2, #18
 8005920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d9d8      	bls.n	80058e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	461a      	mov	r2, r3
 8005958:	2303      	movs	r3, #3
 800595a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800599e:	4b89      	ldr	r3, [pc, #548]	; (8005bc4 <HAL_GPIO_Init+0x234>)
 80059a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059a2:	e194      	b.n	8005cce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	2101      	movs	r1, #1
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	4013      	ands	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8186 	beq.w	8005cc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d005      	beq.n	80059d4 <HAL_GPIO_Init+0x44>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d130      	bne.n	8005a36 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 0201 	and.w	r2, r3, #1
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d017      	beq.n	8005a72 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d123      	bne.n	8005ac6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	08da      	lsrs	r2, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3208      	adds	r2, #8
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	220f      	movs	r2, #15
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	08da      	lsrs	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3208      	adds	r2, #8
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 0203 	and.w	r2, r3, #3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80e0 	beq.w	8005cc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b08:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_GPIO_Init+0x238>)
 8005b0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b0e:	4a2e      	ldr	r2, [pc, #184]	; (8005bc8 <HAL_GPIO_Init+0x238>)
 8005b10:	f043 0302 	orr.w	r3, r3, #2
 8005b14:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_GPIO_Init+0x238>)
 8005b1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b26:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <HAL_GPIO_Init+0x23c>)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <HAL_GPIO_Init+0x240>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d052      	beq.n	8005bf8 <HAL_GPIO_Init+0x268>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <HAL_GPIO_Init+0x244>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_GPIO_Init+0x22e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <HAL_GPIO_Init+0x248>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <HAL_GPIO_Init+0x22a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_GPIO_Init+0x24c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d025      	beq.n	8005bb6 <HAL_GPIO_Init+0x226>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_GPIO_Init+0x250>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <HAL_GPIO_Init+0x222>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <HAL_GPIO_Init+0x254>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d019      	beq.n	8005bae <HAL_GPIO_Init+0x21e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1a      	ldr	r2, [pc, #104]	; (8005be8 <HAL_GPIO_Init+0x258>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_GPIO_Init+0x21a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <HAL_GPIO_Init+0x25c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00d      	beq.n	8005ba6 <HAL_GPIO_Init+0x216>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <HAL_GPIO_Init+0x260>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_GPIO_Init+0x264>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_GPIO_Init+0x20e>
 8005b9a:	2309      	movs	r3, #9
 8005b9c:	e02d      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	e02b      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	e029      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005ba6:	2307      	movs	r3, #7
 8005ba8:	e027      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005baa:	2306      	movs	r3, #6
 8005bac:	e025      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bae:	2305      	movs	r3, #5
 8005bb0:	e023      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bb2:	2304      	movs	r3, #4
 8005bb4:	e021      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e01f      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e01d      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e01b      	b.n	8005bfa <HAL_GPIO_Init+0x26a>
 8005bc2:	bf00      	nop
 8005bc4:	58000080 	.word	0x58000080
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	58000400 	.word	0x58000400
 8005bd0:	58020000 	.word	0x58020000
 8005bd4:	58020400 	.word	0x58020400
 8005bd8:	58020800 	.word	0x58020800
 8005bdc:	58020c00 	.word	0x58020c00
 8005be0:	58021000 	.word	0x58021000
 8005be4:	58021400 	.word	0x58021400
 8005be8:	58021800 	.word	0x58021800
 8005bec:	58021c00 	.word	0x58021c00
 8005bf0:	58022000 	.word	0x58022000
 8005bf4:	58022400 	.word	0x58022400
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	f002 0203 	and.w	r2, r2, #3
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	4093      	lsls	r3, r2
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c0a:	4938      	ldr	r1, [pc, #224]	; (8005cec <HAL_GPIO_Init+0x35c>)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f ae63 	bne.w	80059a4 <HAL_GPIO_Init+0x14>
  }
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	3724      	adds	r7, #36	; 0x24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	58000400 	.word	0x58000400

08005cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
 8005d0c:	e001      	b.n	8005d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	807b      	strh	r3, [r7, #2]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d30:	787b      	ldrb	r3, [r7, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d3c:	e003      	b.n	8005d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	041a      	lsls	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	619a      	str	r2, [r3, #24]
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e07f      	b.n	8005e66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb fc60 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	; 0x24
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d107      	bne.n	8005dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e006      	b.n	8005ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d104      	bne.n	8005dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6859      	ldr	r1, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <HAL_I2C_Init+0x11c>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	02008000 	.word	0x02008000

08005e74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	460b      	mov	r3, r1
 8005e82:	817b      	strh	r3, [r7, #10]
 8005e84:	4613      	mov	r3, r2
 8005e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f040 80da 	bne.w	800604a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_I2C_Master_Transmit+0x30>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0d3      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eac:	f7fc f9e0 	bl	8002270 <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2319      	movs	r3, #25
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f9e6 	bl	8006290 <I2C_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e0be      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2221      	movs	r2, #33	; 0x21
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	893a      	ldrh	r2, [r7, #8]
 8005eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2bff      	cmp	r3, #255	; 0xff
 8005efe:	d90e      	bls.n	8005f1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	8979      	ldrh	r1, [r7, #10]
 8005f0e:	4b51      	ldr	r3, [pc, #324]	; (8006054 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fbf6 	bl	8006708 <I2C_TransferConfig>
 8005f1c:	e06c      	b.n	8005ff8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	8979      	ldrh	r1, [r7, #10]
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 fbe5 	bl	8006708 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f3e:	e05b      	b.n	8005ff8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6a39      	ldr	r1, [r7, #32]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f9f2 	bl	800632e <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e07b      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d034      	beq.n	8005ff8 <HAL_I2C_Master_Transmit+0x184>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d130      	bne.n	8005ff8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2180      	movs	r1, #128	; 0x80
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f975 	bl	8006290 <I2C_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e04d      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2bff      	cmp	r3, #255	; 0xff
 8005fb8:	d90e      	bls.n	8005fd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fb99 	bl	8006708 <I2C_TransferConfig>
 8005fd6:	e00f      	b.n	8005ff8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	8979      	ldrh	r1, [r7, #10]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fb88 	bl	8006708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d19e      	bne.n	8005f40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6a39      	ldr	r1, [r7, #32]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f9d8 	bl	80063bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e01a      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2220      	movs	r2, #32
 800601c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6859      	ldr	r1, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <HAL_I2C_Master_Transmit+0x1e4>)
 800602a:	400b      	ands	r3, r1
 800602c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e000      	b.n	800604c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800604a:	2302      	movs	r3, #2
  }
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	80002000 	.word	0x80002000
 8006058:	fe00e800 	.word	0xfe00e800

0800605c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	607a      	str	r2, [r7, #4]
 8006066:	461a      	mov	r2, r3
 8006068:	460b      	mov	r3, r1
 800606a:	817b      	strh	r3, [r7, #10]
 800606c:	4613      	mov	r3, r2
 800606e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b20      	cmp	r3, #32
 800607a:	f040 80db 	bne.w	8006234 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_I2C_Master_Receive+0x30>
 8006088:	2302      	movs	r3, #2
 800608a:	e0d4      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006094:	f7fc f8ec 	bl	8002270 <HAL_GetTick>
 8006098:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	2319      	movs	r3, #25
 80060a0:	2201      	movs	r2, #1
 80060a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f8f2 	bl	8006290 <I2C_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e0bf      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2222      	movs	r2, #34	; 0x22
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2210      	movs	r2, #16
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	893a      	ldrh	r2, [r7, #8]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2bff      	cmp	r3, #255	; 0xff
 80060e6:	d90e      	bls.n	8006106 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	22ff      	movs	r2, #255	; 0xff
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	8979      	ldrh	r1, [r7, #10]
 80060f6:	4b52      	ldr	r3, [pc, #328]	; (8006240 <HAL_I2C_Master_Receive+0x1e4>)
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fb02 	bl	8006708 <I2C_TransferConfig>
 8006104:	e06d      	b.n	80061e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006114:	b2da      	uxtb	r2, r3
 8006116:	8979      	ldrh	r1, [r7, #10]
 8006118:	4b49      	ldr	r3, [pc, #292]	; (8006240 <HAL_I2C_Master_Receive+0x1e4>)
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 faf1 	bl	8006708 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006126:	e05c      	b.n	80061e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	6a39      	ldr	r1, [r7, #32]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f989 	bl	8006444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e07c      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d034      	beq.n	80061e2 <HAL_I2C_Master_Receive+0x186>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	2b00      	cmp	r3, #0
 800617e:	d130      	bne.n	80061e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2200      	movs	r2, #0
 8006188:	2180      	movs	r1, #128	; 0x80
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f880 	bl	8006290 <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e04d      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2bff      	cmp	r3, #255	; 0xff
 80061a2:	d90e      	bls.n	80061c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	22ff      	movs	r2, #255	; 0xff
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	8979      	ldrh	r1, [r7, #10]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 faa4 	bl	8006708 <I2C_TransferConfig>
 80061c0:	e00f      	b.n	80061e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	8979      	ldrh	r1, [r7, #10]
 80061d4:	2300      	movs	r3, #0
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fa93 	bl	8006708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d19d      	bne.n	8006128 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	6a39      	ldr	r1, [r7, #32]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f8e3 	bl	80063bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e01a      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2220      	movs	r2, #32
 8006206:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6859      	ldr	r1, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <HAL_I2C_Master_Receive+0x1e8>)
 8006214:	400b      	ands	r3, r1
 8006216:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	80002400 	.word	0x80002400
 8006244:	fe00e800 	.word	0xfe00e800

08006248 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d103      	bne.n	8006266 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d007      	beq.n	8006284 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	619a      	str	r2, [r3, #24]
  }
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a0:	e031      	b.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d02d      	beq.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062aa:	f7fb ffe1 	bl	8002270 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d302      	bcc.n	80062c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d122      	bne.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d113      	bne.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e00f      	b.n	8006326 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4013      	ands	r3, r2
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	bf0c      	ite	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	2300      	movne	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	429a      	cmp	r2, r3
 8006322:	d0be      	beq.n	80062a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800633a:	e033      	b.n	80063a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f901 	bl	8006548 <I2C_IsErrorOccurred>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e031      	b.n	80063b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d025      	beq.n	80063a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006358:	f7fb ff8a 	bl	8002270 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	d302      	bcc.n	800636e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11a      	bne.n	80063a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d013      	beq.n	80063a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e007      	b.n	80063b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d1c4      	bne.n	800633c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063c8:	e02f      	b.n	800642a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f8ba 	bl	8006548 <I2C_IsErrorOccurred>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e02d      	b.n	800643a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fb ff47 	bl	8002270 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11a      	bne.n	800642a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d013      	beq.n	800642a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e007      	b.n	800643a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b20      	cmp	r3, #32
 8006436:	d1c8      	bne.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006450:	e06b      	b.n	800652a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f876 	bl	8006548 <I2C_IsErrorOccurred>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e069      	b.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b20      	cmp	r3, #32
 8006472:	d138      	bne.n	80064e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d105      	bne.n	800648e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e055      	b.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b10      	cmp	r3, #16
 800649a:	d107      	bne.n	80064ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2210      	movs	r2, #16
 80064a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2204      	movs	r2, #4
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44
 80064aa:	e002      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80064c6:	400b      	ands	r3, r1
 80064c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e029      	b.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e6:	f7fb fec3 	bl	8002270 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d116      	bne.n	800652a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d00f      	beq.n	800652a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e007      	b.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d18c      	bne.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	fe00e800 	.word	0xfe00e800

08006548 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d068      	beq.n	8006646 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2210      	movs	r2, #16
 800657a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800657c:	e049      	b.n	8006612 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d045      	beq.n	8006612 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7fb fe73 	bl	8002270 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <I2C_IsErrorOccurred+0x54>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d13a      	bne.n	8006612 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	d121      	bne.n	8006604 <I2C_IsErrorOccurred+0xbc>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c6:	d01d      	beq.n	8006604 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d01a      	beq.n	8006604 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065de:	f7fb fe47 	bl	8002270 <HAL_GetTick>
 80065e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065e4:	e00e      	b.n	8006604 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065e6:	f7fb fe43 	bl	8002270 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b19      	cmp	r3, #25
 80065f2:	d907      	bls.n	8006604 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	f043 0320 	orr.w	r3, r3, #32
 80065fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006602:	e006      	b.n	8006612 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b20      	cmp	r3, #32
 8006610:	d1e9      	bne.n	80065e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b20      	cmp	r3, #32
 800661e:	d003      	beq.n	8006628 <I2C_IsErrorOccurred+0xe0>
 8006620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0aa      	beq.n	800657e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2220      	movs	r2, #32
 8006636:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f043 0304 	orr.w	r3, r3, #4
 800663e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800668a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01c      	beq.n	80066f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fdc3 	bl	8006248 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b0d      	ldr	r3, [pc, #52]	; (8006704 <I2C_IsErrorOccurred+0x1bc>)
 80066ce:	400b      	ands	r3, r1
 80066d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80066f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	; 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	fe00e800 	.word	0xfe00e800

08006708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	817b      	strh	r3, [r7, #10]
 8006716:	4613      	mov	r3, r2
 8006718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006720:	7a7b      	ldrb	r3, [r7, #9]
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006728:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	4313      	orrs	r3, r2
 8006732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006736:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	0d5b      	lsrs	r3, r3, #21
 8006742:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006746:	4b08      	ldr	r3, [pc, #32]	; (8006768 <I2C_TransferConfig+0x60>)
 8006748:	430b      	orrs	r3, r1
 800674a:	43db      	mvns	r3, r3
 800674c:	ea02 0103 	and.w	r1, r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	03ff63ff 	.word	0x03ff63ff

0800676c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b20      	cmp	r3, #32
 8006780:	d138      	bne.n	80067f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800678c:	2302      	movs	r3, #2
 800678e:	e032      	b.n	80067f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6819      	ldr	r1, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b20      	cmp	r3, #32
 8006816:	d139      	bne.n	800688c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006822:	2302      	movs	r3, #2
 8006824:	e033      	b.n	800688e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2224      	movs	r2, #36	; 0x24
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e000      	b.n	800688e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a4:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80068a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068aa:	4a0c      	ldr	r2, [pc, #48]	; (80068dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068b4:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_I2CEx_EnableFastModePlus+0x40>)
 80068b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4906      	ldr	r1, [pc, #24]	; (80068e0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	604b      	str	r3, [r1, #4]
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	58024400 	.word	0x58024400
 80068e0:	58000400 	.word	0x58000400

080068e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b08f      	sub	sp, #60	; 0x3c
 80068e8:	af0a      	add	r7, sp, #40	; 0x28
 80068ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e116      	b.n	8006b24 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fb fbb7 	bl	8002084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2203      	movs	r2, #3
 800691a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f006 fa87 	bl	800ce48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	687e      	ldr	r6, [r7, #4]
 8006942:	466d      	mov	r5, sp
 8006944:	f106 0410 	add.w	r4, r6, #16
 8006948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800694a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800694c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800694e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006950:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006954:	e885 0003 	stmia.w	r5, {r0, r1}
 8006958:	1d33      	adds	r3, r6, #4
 800695a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800695c:	6838      	ldr	r0, [r7, #0]
 800695e:	f006 fa05 	bl	800cd6c <USB_CoreInit>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0d7      	b.n	8006b24 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2100      	movs	r1, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f006 fa75 	bl	800ce6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	e04a      	b.n	8006a1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006986:	7bfa      	ldrb	r2, [r7, #15]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	333d      	adds	r3, #61	; 0x3d
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800699a:	7bfa      	ldrb	r2, [r7, #15]
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	333c      	adds	r3, #60	; 0x3c
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069ae:	7bfa      	ldrb	r2, [r7, #15]
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	b298      	uxth	r0, r3
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3356      	adds	r3, #86	; 0x56
 80069c2:	4602      	mov	r2, r0
 80069c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3340      	adds	r3, #64	; 0x40
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069da:	7bfa      	ldrb	r2, [r7, #15]
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	3344      	adds	r3, #68	; 0x44
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3348      	adds	r3, #72	; 0x48
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a02:	7bfa      	ldrb	r2, [r7, #15]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	334c      	adds	r3, #76	; 0x4c
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	7bfa      	ldrb	r2, [r7, #15]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d3af      	bcc.n	8006986 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e044      	b.n	8006ab6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a2c:	7bfa      	ldrb	r2, [r7, #15]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a42:	7bfa      	ldrb	r2, [r7, #15]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006a54:	7bfa      	ldrb	r2, [r7, #15]
 8006a56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a58:	7bfa      	ldrb	r2, [r7, #15]
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a6e:	7bfa      	ldrb	r2, [r7, #15]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a84:	7bfa      	ldrb	r2, [r7, #15]
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a9a:	7bfa      	ldrb	r2, [r7, #15]
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
 8006ab6:	7bfa      	ldrb	r2, [r7, #15]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3b5      	bcc.n	8006a2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	687e      	ldr	r6, [r7, #4]
 8006ac8:	466d      	mov	r5, sp
 8006aca:	f106 0410 	add.w	r4, r6, #16
 8006ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ade:	1d33      	adds	r3, r6, #4
 8006ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ae2:	6838      	ldr	r0, [r7, #0]
 8006ae4:	f006 fa0e 	bl	800cf04 <USB_DevInit>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e014      	b.n	8006b24 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d102      	bne.n	8006b18 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f80a 	bl	8006b2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f006 fbcc 	bl	800d2ba <USB_DevDisconnect>

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	10000003 	.word	0x10000003

08006b74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b7c:	4b19      	ldr	r3, [pc, #100]	; (8006be4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d00a      	beq.n	8006b9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b88:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <HAL_PWREx_ConfigSupply+0x70>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d001      	beq.n	8006b9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e01f      	b.n	8006bda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e01d      	b.n	8006bda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f023 0207 	bic.w	r2, r3, #7
 8006ba6:	490f      	ldr	r1, [pc, #60]	; (8006be4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006bae:	f7fb fb5f 	bl	8002270 <HAL_GetTick>
 8006bb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bb4:	e009      	b.n	8006bca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bb6:	f7fb fb5b 	bl	8002270 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc4:	d901      	bls.n	8006bca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e007      	b.n	8006bda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_PWREx_ConfigSupply+0x70>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd6:	d1ee      	bne.n	8006bb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	58024800 	.word	0x58024800

08006be8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	60d3      	str	r3, [r2, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	58024800 	.word	0x58024800

08006c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d102      	bne.n	8006c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f000 bc48 	b.w	80074ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8088 	beq.w	8006d3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c2a:	4b99      	ldr	r3, [pc, #612]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c34:	4b96      	ldr	r3, [pc, #600]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d007      	beq.n	8006c50 <HAL_RCC_OscConfig+0x48>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2b18      	cmp	r3, #24
 8006c44:	d111      	bne.n	8006c6a <HAL_RCC_OscConfig+0x62>
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d10c      	bne.n	8006c6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c50:	4b8f      	ldr	r3, [pc, #572]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d06d      	beq.n	8006d38 <HAL_RCC_OscConfig+0x130>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d169      	bne.n	8006d38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f000 bc21 	b.w	80074ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x7a>
 8006c74:	4b86      	ldr	r3, [pc, #536]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a85      	ldr	r2, [pc, #532]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e02e      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x9c>
 8006c8a:	4b81      	ldr	r3, [pc, #516]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a80      	ldr	r2, [pc, #512]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	4b7e      	ldr	r3, [pc, #504]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a7d      	ldr	r2, [pc, #500]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e01d      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0xc0>
 8006cae:	4b78      	ldr	r3, [pc, #480]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a77      	ldr	r2, [pc, #476]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4b75      	ldr	r3, [pc, #468]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a74      	ldr	r2, [pc, #464]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006cc8:	4b71      	ldr	r3, [pc, #452]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a70      	ldr	r2, [pc, #448]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4b6e      	ldr	r3, [pc, #440]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6d      	ldr	r2, [pc, #436]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fb fac2 	bl	8002270 <HAL_GetTick>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf0:	f7fb fabe 	bl	8002270 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	; 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e3d4      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d02:	4b63      	ldr	r3, [pc, #396]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xe8>
 8006d0e:	e014      	b.n	8006d3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fb faae 	bl	8002270 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d18:	f7fb faaa 	bl	8002270 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b64      	cmp	r3, #100	; 0x64
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e3c0      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d2a:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x110>
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80ca 	beq.w	8006edc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d48:	4b51      	ldr	r3, [pc, #324]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d52:	4b4f      	ldr	r3, [pc, #316]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <HAL_RCC_OscConfig+0x166>
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2b18      	cmp	r3, #24
 8006d62:	d156      	bne.n	8006e12 <HAL_RCC_OscConfig+0x20a>
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d151      	bne.n	8006e12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d6e:	4b48      	ldr	r3, [pc, #288]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <HAL_RCC_OscConfig+0x17e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e392      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d86:	4b42      	ldr	r3, [pc, #264]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f023 0219 	bic.w	r2, r3, #25
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	493f      	ldr	r1, [pc, #252]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fb fa6a 	bl	8002270 <HAL_GetTick>
 8006d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da0:	f7fb fa66 	bl	8002270 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e37c      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dbe:	f7fb fa87 	bl	80022d0 <HAL_GetREVID>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d817      	bhi.n	8006dfc <HAL_RCC_OscConfig+0x1f4>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d108      	bne.n	8006de6 <HAL_RCC_OscConfig+0x1de>
 8006dd4:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ddc:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006de4:	e07a      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de6:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	031b      	lsls	r3, r3, #12
 8006df4:	4926      	ldr	r1, [pc, #152]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dfa:	e06f      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfc:	4b24      	ldr	r3, [pc, #144]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	4921      	ldr	r1, [pc, #132]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e10:	e064      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d047      	beq.n	8006eaa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e1a:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 0219 	bic.w	r2, r3, #25
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	491a      	ldr	r1, [pc, #104]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fb fa20 	bl	8002270 <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e34:	f7fb fa1c 	bl	8002270 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e332      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e52:	f7fb fa3d 	bl	80022d0 <HAL_GetREVID>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d819      	bhi.n	8006e94 <HAL_RCC_OscConfig+0x28c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b40      	cmp	r3, #64	; 0x40
 8006e66:	d108      	bne.n	8006e7a <HAL_RCC_OscConfig+0x272>
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e70:	4a07      	ldr	r2, [pc, #28]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e76:	6053      	str	r3, [r2, #4]
 8006e78:	e030      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	031b      	lsls	r3, r3, #12
 8006e88:	4901      	ldr	r1, [pc, #4]	; (8006e90 <HAL_RCC_OscConfig+0x288>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	604b      	str	r3, [r1, #4]
 8006e8e:	e025      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
 8006e90:	58024400 	.word	0x58024400
 8006e94:	4b9a      	ldr	r3, [pc, #616]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	4997      	ldr	r1, [pc, #604]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
 8006ea8:	e018      	b.n	8006edc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eaa:	4b95      	ldr	r3, [pc, #596]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a94      	ldr	r2, [pc, #592]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006eb0:	f023 0301 	bic.w	r3, r3, #1
 8006eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb6:	f7fb f9db 	bl	8002270 <HAL_GetTick>
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ebe:	f7fb f9d7 	bl	8002270 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e2ed      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ed0:	4b8b      	ldr	r3, [pc, #556]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80a9 	beq.w	800703c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eea:	4b85      	ldr	r3, [pc, #532]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ef2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ef4:	4b82      	ldr	r3, [pc, #520]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d007      	beq.n	8006f10 <HAL_RCC_OscConfig+0x308>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b18      	cmp	r3, #24
 8006f04:	d13a      	bne.n	8006f7c <HAL_RCC_OscConfig+0x374>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d135      	bne.n	8006f7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f10:	4b7b      	ldr	r3, [pc, #492]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_OscConfig+0x320>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	2b80      	cmp	r3, #128	; 0x80
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e2c1      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f28:	f7fb f9d2 	bl	80022d0 <HAL_GetREVID>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d817      	bhi.n	8006f66 <HAL_RCC_OscConfig+0x35e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d108      	bne.n	8006f50 <HAL_RCC_OscConfig+0x348>
 8006f3e:	4b70      	ldr	r3, [pc, #448]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006f46:	4a6e      	ldr	r2, [pc, #440]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f4e:	e075      	b.n	800703c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f50:	4b6b      	ldr	r3, [pc, #428]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1b      	ldr	r3, [r3, #32]
 8006f5c:	069b      	lsls	r3, r3, #26
 8006f5e:	4968      	ldr	r1, [pc, #416]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f64:	e06a      	b.n	800703c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f66:	4b66      	ldr	r3, [pc, #408]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	4962      	ldr	r1, [pc, #392]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f7a:	e05f      	b.n	800703c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d042      	beq.n	800700a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f84:	4b5e      	ldr	r3, [pc, #376]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a5d      	ldr	r2, [pc, #372]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fb f96e 	bl	8002270 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f98:	f7fb f96a 	bl	8002270 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e280      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006faa:	4b55      	ldr	r3, [pc, #340]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fb6:	f7fb f98b 	bl	80022d0 <HAL_GetREVID>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d817      	bhi.n	8006ff4 <HAL_RCC_OscConfig+0x3ec>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d108      	bne.n	8006fde <HAL_RCC_OscConfig+0x3d6>
 8006fcc:	4b4c      	ldr	r3, [pc, #304]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fd4:	4a4a      	ldr	r2, [pc, #296]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fda:	6053      	str	r3, [r2, #4]
 8006fdc:	e02e      	b.n	800703c <HAL_RCC_OscConfig+0x434>
 8006fde:	4b48      	ldr	r3, [pc, #288]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	069b      	lsls	r3, r3, #26
 8006fec:	4944      	ldr	r1, [pc, #272]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	604b      	str	r3, [r1, #4]
 8006ff2:	e023      	b.n	800703c <HAL_RCC_OscConfig+0x434>
 8006ff4:	4b42      	ldr	r3, [pc, #264]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	061b      	lsls	r3, r3, #24
 8007002:	493f      	ldr	r1, [pc, #252]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007004:	4313      	orrs	r3, r2
 8007006:	60cb      	str	r3, [r1, #12]
 8007008:	e018      	b.n	800703c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800700a:	4b3d      	ldr	r3, [pc, #244]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a3c      	ldr	r2, [pc, #240]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007016:	f7fb f92b 	bl	8002270 <HAL_GetTick>
 800701a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800701e:	f7fb f927 	bl	8002270 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e23d      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007030:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1f0      	bne.n	800701e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d036      	beq.n	80070b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d019      	beq.n	8007084 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007050:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705c:	f7fb f908 	bl	8002270 <HAL_GetTick>
 8007060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007064:	f7fb f904 	bl	8002270 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e21a      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0f0      	beq.n	8007064 <HAL_RCC_OscConfig+0x45c>
 8007082:	e018      	b.n	80070b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 8007086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007088:	4a1d      	ldr	r2, [pc, #116]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007090:	f7fb f8ee 	bl	8002270 <HAL_GetTick>
 8007094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007098:	f7fb f8ea 	bl	8002270 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e200      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 80070ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f0      	bne.n	8007098 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d039      	beq.n	8007136 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01c      	beq.n	8007104 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 80070d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80070d6:	f7fb f8cb 	bl	8002270 <HAL_GetTick>
 80070da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070dc:	e008      	b.n	80070f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070de:	f7fb f8c7 	bl	8002270 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e1dd      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80070f0:	4b03      	ldr	r3, [pc, #12]	; (8007100 <HAL_RCC_OscConfig+0x4f8>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <HAL_RCC_OscConfig+0x4d6>
 80070fc:	e01b      	b.n	8007136 <HAL_RCC_OscConfig+0x52e>
 80070fe:	bf00      	nop
 8007100:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007104:	4b9b      	ldr	r3, [pc, #620]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a9a      	ldr	r2, [pc, #616]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800710a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800710e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007110:	f7fb f8ae 	bl	8002270 <HAL_GetTick>
 8007114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007118:	f7fb f8aa 	bl	8002270 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e1c0      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800712a:	4b92      	ldr	r3, [pc, #584]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8081 	beq.w	8007246 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007144:	4b8c      	ldr	r3, [pc, #560]	; (8007378 <HAL_RCC_OscConfig+0x770>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a8b      	ldr	r2, [pc, #556]	; (8007378 <HAL_RCC_OscConfig+0x770>)
 800714a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007150:	f7fb f88e 	bl	8002270 <HAL_GetTick>
 8007154:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007158:	f7fb f88a 	bl	8002270 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b64      	cmp	r3, #100	; 0x64
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e1a0      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800716a:	4b83      	ldr	r3, [pc, #524]	; (8007378 <HAL_RCC_OscConfig+0x770>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d106      	bne.n	800718c <HAL_RCC_OscConfig+0x584>
 800717e:	4b7d      	ldr	r3, [pc, #500]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	4a7c      	ldr	r2, [pc, #496]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	6713      	str	r3, [r2, #112]	; 0x70
 800718a:	e02d      	b.n	80071e8 <HAL_RCC_OscConfig+0x5e0>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10c      	bne.n	80071ae <HAL_RCC_OscConfig+0x5a6>
 8007194:	4b77      	ldr	r3, [pc, #476]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	4a76      	ldr	r2, [pc, #472]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6713      	str	r3, [r2, #112]	; 0x70
 80071a0:	4b74      	ldr	r3, [pc, #464]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a73      	ldr	r2, [pc, #460]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071a6:	f023 0304 	bic.w	r3, r3, #4
 80071aa:	6713      	str	r3, [r2, #112]	; 0x70
 80071ac:	e01c      	b.n	80071e8 <HAL_RCC_OscConfig+0x5e0>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d10c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x5c8>
 80071b6:	4b6f      	ldr	r3, [pc, #444]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4a6e      	ldr	r2, [pc, #440]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071bc:	f043 0304 	orr.w	r3, r3, #4
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70
 80071c2:	4b6c      	ldr	r3, [pc, #432]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	4a6b      	ldr	r2, [pc, #428]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071c8:	f043 0301 	orr.w	r3, r3, #1
 80071cc:	6713      	str	r3, [r2, #112]	; 0x70
 80071ce:	e00b      	b.n	80071e8 <HAL_RCC_OscConfig+0x5e0>
 80071d0:	4b68      	ldr	r3, [pc, #416]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	4a67      	ldr	r2, [pc, #412]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	6713      	str	r3, [r2, #112]	; 0x70
 80071dc:	4b65      	ldr	r3, [pc, #404]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a64      	ldr	r2, [pc, #400]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80071e2:	f023 0304 	bic.w	r3, r3, #4
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f0:	f7fb f83e 	bl	8002270 <HAL_GetTick>
 80071f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071f6:	e00a      	b.n	800720e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f8:	f7fb f83a 	bl	8002270 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	f241 3288 	movw	r2, #5000	; 0x1388
 8007206:	4293      	cmp	r3, r2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e14e      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800720e:	4b59      	ldr	r3, [pc, #356]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ee      	beq.n	80071f8 <HAL_RCC_OscConfig+0x5f0>
 800721a:	e014      	b.n	8007246 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721c:	f7fb f828 	bl	8002270 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007222:	e00a      	b.n	800723a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007224:	f7fb f824 	bl	8002270 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e138      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800723a:	4b4e      	ldr	r3, [pc, #312]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1ee      	bne.n	8007224 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 812d 	beq.w	80074aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007250:	4b48      	ldr	r3, [pc, #288]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007258:	2b18      	cmp	r3, #24
 800725a:	f000 80bd 	beq.w	80073d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b02      	cmp	r3, #2
 8007264:	f040 809e 	bne.w	80073a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007268:	4b42      	ldr	r3, [pc, #264]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a41      	ldr	r2, [pc, #260]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800726e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007274:	f7fa fffc 	bl	8002270 <HAL_GetTick>
 8007278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727c:	f7fa fff8 	bl	8002270 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e10e      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800728e:	4b39      	ldr	r3, [pc, #228]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f0      	bne.n	800727c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800729a:	4b36      	ldr	r3, [pc, #216]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800729c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729e:	4b37      	ldr	r3, [pc, #220]	; (800737c <HAL_RCC_OscConfig+0x774>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072aa:	0112      	lsls	r2, r2, #4
 80072ac:	430a      	orrs	r2, r1
 80072ae:	4931      	ldr	r1, [pc, #196]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	628b      	str	r3, [r1, #40]	; 0x28
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c2:	3b01      	subs	r3, #1
 80072c4:	025b      	lsls	r3, r3, #9
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	3b01      	subs	r3, #1
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072dc:	3b01      	subs	r3, #1
 80072de:	061b      	lsls	r3, r3, #24
 80072e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072e4:	4923      	ldr	r1, [pc, #140]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80072ea:	4b22      	ldr	r3, [pc, #136]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80072f6:	4b1f      	ldr	r3, [pc, #124]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 80072f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072fa:	4b21      	ldr	r3, [pc, #132]	; (8007380 <HAL_RCC_OscConfig+0x778>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007302:	00d2      	lsls	r2, r2, #3
 8007304:	491b      	ldr	r1, [pc, #108]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007306:	4313      	orrs	r3, r2
 8007308:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	f023 020c 	bic.w	r2, r3, #12
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	4917      	ldr	r1, [pc, #92]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007318:	4313      	orrs	r3, r2
 800731a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f023 0202 	bic.w	r2, r3, #2
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	4912      	ldr	r1, [pc, #72]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	4a10      	ldr	r2, [pc, #64]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007346:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 800734c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a07      	ldr	r2, [pc, #28]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a04      	ldr	r2, [pc, #16]	; (8007374 <HAL_RCC_OscConfig+0x76c>)
 8007364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fa ff81 	bl	8002270 <HAL_GetTick>
 800736e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007370:	e011      	b.n	8007396 <HAL_RCC_OscConfig+0x78e>
 8007372:	bf00      	nop
 8007374:	58024400 	.word	0x58024400
 8007378:	58024800 	.word	0x58024800
 800737c:	fffffc0c 	.word	0xfffffc0c
 8007380:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007384:	f7fa ff74 	bl	8002270 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e08a      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007396:	4b47      	ldr	r3, [pc, #284]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f0      	beq.n	8007384 <HAL_RCC_OscConfig+0x77c>
 80073a2:	e082      	b.n	80074aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a4:	4b43      	ldr	r3, [pc, #268]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a42      	ldr	r2, [pc, #264]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80073aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b0:	f7fa ff5e 	bl	8002270 <HAL_GetTick>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fa ff5a 	bl	8002270 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e070      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073ca:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x7b0>
 80073d6:	e068      	b.n	80074aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80073d8:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80073de:	4b35      	ldr	r3, [pc, #212]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d031      	beq.n	8007450 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f003 0203 	and.w	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d12a      	bne.n	8007450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007406:	429a      	cmp	r2, r3
 8007408:	d122      	bne.n	8007450 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007416:	429a      	cmp	r2, r3
 8007418:	d11a      	bne.n	8007450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	0a5b      	lsrs	r3, r3, #9
 800741e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007426:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d111      	bne.n	8007450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	0c1b      	lsrs	r3, r3, #16
 8007430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800743a:	429a      	cmp	r2, r3
 800743c:	d108      	bne.n	8007450 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	0e1b      	lsrs	r3, r3, #24
 8007442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e02b      	b.n	80074ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007454:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 8007456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d01f      	beq.n	80074aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800746a:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	4a11      	ldr	r2, [pc, #68]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007476:	f7fa fefb 	bl	8002270 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800747c:	bf00      	nop
 800747e:	f7fa fef7 	bl	8002270 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	4293      	cmp	r3, r2
 8007488:	d0f9      	beq.n	800747e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 800748c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <HAL_RCC_OscConfig+0x8b0>)
 8007490:	4013      	ands	r3, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007496:	00d2      	lsls	r2, r2, #3
 8007498:	4906      	ldr	r1, [pc, #24]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 800749a:	4313      	orrs	r3, r2
 800749c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <HAL_RCC_OscConfig+0x8ac>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3730      	adds	r7, #48	; 0x30
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	58024400 	.word	0x58024400
 80074b8:	ffff0007 	.word	0xffff0007

080074bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e19c      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074d0:	4b8a      	ldr	r3, [pc, #552]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d910      	bls.n	8007500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074de:	4b87      	ldr	r3, [pc, #540]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 020f 	bic.w	r2, r3, #15
 80074e6:	4985      	ldr	r1, [pc, #532]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b83      	ldr	r3, [pc, #524]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e184      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d010      	beq.n	800752e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	4b7b      	ldr	r3, [pc, #492]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007518:	429a      	cmp	r2, r3
 800751a:	d908      	bls.n	800752e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800751c:	4b78      	ldr	r3, [pc, #480]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	4975      	ldr	r1, [pc, #468]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800752a:	4313      	orrs	r3, r2
 800752c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d010      	beq.n	800755c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	4b70      	ldr	r3, [pc, #448]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007546:	429a      	cmp	r2, r3
 8007548:	d908      	bls.n	800755c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800754a:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	496a      	ldr	r1, [pc, #424]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007558:	4313      	orrs	r3, r2
 800755a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	d010      	beq.n	800758a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	4b64      	ldr	r3, [pc, #400]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007574:	429a      	cmp	r2, r3
 8007576:	d908      	bls.n	800758a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007578:	4b61      	ldr	r3, [pc, #388]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	495e      	ldr	r1, [pc, #376]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007586:	4313      	orrs	r3, r2
 8007588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	4b59      	ldr	r3, [pc, #356]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d908      	bls.n	80075b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80075a6:	4b56      	ldr	r3, [pc, #344]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	4953      	ldr	r1, [pc, #332]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d908      	bls.n	80075e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d4:	4b4a      	ldr	r3, [pc, #296]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f023 020f 	bic.w	r2, r3, #15
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	4947      	ldr	r1, [pc, #284]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d055      	beq.n	800769e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80075f2:	4b43      	ldr	r3, [pc, #268]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	4940      	ldr	r1, [pc, #256]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007600:	4313      	orrs	r3, r2
 8007602:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d107      	bne.n	800761c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800760c:	4b3c      	ldr	r3, [pc, #240]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d121      	bne.n	800765c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e0f6      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b03      	cmp	r3, #3
 8007622:	d107      	bne.n	8007634 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007624:	4b36      	ldr	r3, [pc, #216]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d115      	bne.n	800765c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0ea      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d107      	bne.n	800764c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800763c:	4b30      	ldr	r3, [pc, #192]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0de      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800764c:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0d6      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f023 0207 	bic.w	r2, r3, #7
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4925      	ldr	r1, [pc, #148]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7fa fdff 	bl	8002270 <HAL_GetTick>
 8007672:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007674:	e00a      	b.n	800768c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007676:	f7fa fdfb 	bl	8002270 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f241 3288 	movw	r2, #5000	; 0x1388
 8007684:	4293      	cmp	r3, r2
 8007686:	d901      	bls.n	800768c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e0be      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768c:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	429a      	cmp	r2, r3
 800769c:	d1eb      	bne.n	8007676 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d010      	beq.n	80076cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	4b14      	ldr	r3, [pc, #80]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d208      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f023 020f 	bic.w	r2, r3, #15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	490e      	ldr	r1, [pc, #56]	; (8007700 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d214      	bcs.n	8007704 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076da:	4b08      	ldr	r3, [pc, #32]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 020f 	bic.w	r2, r3, #15
 80076e2:	4906      	ldr	r1, [pc, #24]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ea:	4b04      	ldr	r3, [pc, #16]	; (80076fc <HAL_RCC_ClockConfig+0x240>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d005      	beq.n	8007704 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e086      	b.n	800780a <HAL_RCC_ClockConfig+0x34e>
 80076fc:	52002000 	.word	0x52002000
 8007700:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d010      	beq.n	8007732 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800771c:	429a      	cmp	r2, r3
 800771e:	d208      	bcs.n	8007732 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007720:	4b3c      	ldr	r3, [pc, #240]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	4939      	ldr	r1, [pc, #228]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 800772e:	4313      	orrs	r3, r2
 8007730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d010      	beq.n	8007760 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695a      	ldr	r2, [r3, #20]
 8007742:	4b34      	ldr	r3, [pc, #208]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800774a:	429a      	cmp	r2, r3
 800774c:	d208      	bcs.n	8007760 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800774e:	4b31      	ldr	r3, [pc, #196]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	492e      	ldr	r1, [pc, #184]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 800775c:	4313      	orrs	r3, r2
 800775e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	4b28      	ldr	r3, [pc, #160]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007778:	429a      	cmp	r2, r3
 800777a:	d208      	bcs.n	800778e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800777c:	4b25      	ldr	r3, [pc, #148]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	4922      	ldr	r1, [pc, #136]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 800778a:	4313      	orrs	r3, r2
 800778c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d010      	beq.n	80077bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69da      	ldr	r2, [r3, #28]
 800779e:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d208      	bcs.n	80077bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077aa:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	4917      	ldr	r1, [pc, #92]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077bc:	f000 f834 	bl	8007828 <HAL_RCC_GetSysClockFreq>
 80077c0:	4602      	mov	r2, r0
 80077c2:	4b14      	ldr	r3, [pc, #80]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	4912      	ldr	r1, [pc, #72]	; (8007818 <HAL_RCC_ClockConfig+0x35c>)
 80077ce:	5ccb      	ldrb	r3, [r1, r3]
 80077d0:	f003 031f 	and.w	r3, r3, #31
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077da:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <HAL_RCC_ClockConfig+0x358>)
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	4a0d      	ldr	r2, [pc, #52]	; (8007818 <HAL_RCC_ClockConfig+0x35c>)
 80077e4:	5cd3      	ldrb	r3, [r2, r3]
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	4a0a      	ldr	r2, [pc, #40]	; (800781c <HAL_RCC_ClockConfig+0x360>)
 80077f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077f4:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <HAL_RCC_ClockConfig+0x364>)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <HAL_RCC_ClockConfig+0x368>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fa f864 	bl	80018cc <HAL_InitTick>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
 8007818:	080204a4 	.word	0x080204a4
 800781c:	24000004 	.word	0x24000004
 8007820:	24000000 	.word	0x24000000
 8007824:	24000008 	.word	0x24000008

08007828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007828:	b480      	push	{r7}
 800782a:	b089      	sub	sp, #36	; 0x24
 800782c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800782e:	4bb3      	ldr	r3, [pc, #716]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007836:	2b18      	cmp	r3, #24
 8007838:	f200 8155 	bhi.w	8007ae6 <HAL_RCC_GetSysClockFreq+0x2be>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <HAL_RCC_GetSysClockFreq+0x1c>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	080078a9 	.word	0x080078a9
 8007848:	08007ae7 	.word	0x08007ae7
 800784c:	08007ae7 	.word	0x08007ae7
 8007850:	08007ae7 	.word	0x08007ae7
 8007854:	08007ae7 	.word	0x08007ae7
 8007858:	08007ae7 	.word	0x08007ae7
 800785c:	08007ae7 	.word	0x08007ae7
 8007860:	08007ae7 	.word	0x08007ae7
 8007864:	080078cf 	.word	0x080078cf
 8007868:	08007ae7 	.word	0x08007ae7
 800786c:	08007ae7 	.word	0x08007ae7
 8007870:	08007ae7 	.word	0x08007ae7
 8007874:	08007ae7 	.word	0x08007ae7
 8007878:	08007ae7 	.word	0x08007ae7
 800787c:	08007ae7 	.word	0x08007ae7
 8007880:	08007ae7 	.word	0x08007ae7
 8007884:	080078d5 	.word	0x080078d5
 8007888:	08007ae7 	.word	0x08007ae7
 800788c:	08007ae7 	.word	0x08007ae7
 8007890:	08007ae7 	.word	0x08007ae7
 8007894:	08007ae7 	.word	0x08007ae7
 8007898:	08007ae7 	.word	0x08007ae7
 800789c:	08007ae7 	.word	0x08007ae7
 80078a0:	08007ae7 	.word	0x08007ae7
 80078a4:	080078db 	.word	0x080078db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078a8:	4b94      	ldr	r3, [pc, #592]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078b4:	4b91      	ldr	r3, [pc, #580]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	08db      	lsrs	r3, r3, #3
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	4a90      	ldr	r2, [pc, #576]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
 80078c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80078c6:	e111      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078c8:	4b8d      	ldr	r3, [pc, #564]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078ca:	61bb      	str	r3, [r7, #24]
      break;
 80078cc:	e10e      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80078ce:	4b8d      	ldr	r3, [pc, #564]	; (8007b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078d0:	61bb      	str	r3, [r7, #24]
      break;
 80078d2:	e10b      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80078d4:	4b8c      	ldr	r3, [pc, #560]	; (8007b08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078d6:	61bb      	str	r3, [r7, #24]
      break;
 80078d8:	e108      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078da:	4b88      	ldr	r3, [pc, #544]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80078e4:	4b85      	ldr	r3, [pc, #532]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078f0:	4b82      	ldr	r3, [pc, #520]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078fa:	4b80      	ldr	r3, [pc, #512]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	08db      	lsrs	r3, r3, #3
 8007900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80e1 	beq.w	8007ae0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b02      	cmp	r3, #2
 8007922:	f000 8083 	beq.w	8007a2c <HAL_RCC_GetSysClockFreq+0x204>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b02      	cmp	r3, #2
 800792a:	f200 80a1 	bhi.w	8007a70 <HAL_RCC_GetSysClockFreq+0x248>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_RCC_GetSysClockFreq+0x114>
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d056      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800793a:	e099      	b.n	8007a70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800793c:	4b6f      	ldr	r3, [pc, #444]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d02d      	beq.n	80079a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007948:	4b6c      	ldr	r3, [pc, #432]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	08db      	lsrs	r3, r3, #3
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	4a6b      	ldr	r2, [pc, #428]	; (8007b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
 8007958:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007972:	4b62      	ldr	r3, [pc, #392]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007982:	ed97 6a02 	vldr	s12, [r7, #8]
 8007986:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800798a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80079a2:	e087      	b.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80079b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b6:	4b51      	ldr	r3, [pc, #324]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80079ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80079ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079e6:	e065      	b.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fa:	4b40      	ldr	r3, [pc, #256]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a2a:	e043      	b.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3e:	4b2f      	ldr	r3, [pc, #188]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a6e:	e021      	b.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ab2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	0a5b      	lsrs	r3, r3, #9
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	3301      	adds	r3, #1
 8007ac0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ad8:	ee17 3a90 	vmov	r3, s15
 8007adc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007ade:	e005      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61bb      	str	r3, [r7, #24]
      break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ae6:	4b07      	ldr	r3, [pc, #28]	; (8007b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ae8:	61bb      	str	r3, [r7, #24]
      break;
 8007aea:	bf00      	nop
  }

  return sysclockfreq;
 8007aec:	69bb      	ldr	r3, [r7, #24]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3724      	adds	r7, #36	; 0x24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	58024400 	.word	0x58024400
 8007b00:	03d09000 	.word	0x03d09000
 8007b04:	003d0900 	.word	0x003d0900
 8007b08:	007a1200 	.word	0x007a1200
 8007b0c:	46000000 	.word	0x46000000
 8007b10:	4c742400 	.word	0x4c742400
 8007b14:	4a742400 	.word	0x4a742400
 8007b18:	4af42400 	.word	0x4af42400

08007b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b22:	f7ff fe81 	bl	8007828 <HAL_RCC_GetSysClockFreq>
 8007b26:	4602      	mov	r2, r0
 8007b28:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	490f      	ldr	r1, [pc, #60]	; (8007b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b34:	5ccb      	ldrb	r3, [r1, r3]
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b4a:	5cd3      	ldrb	r3, [r2, r3]
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	4a07      	ldr	r2, [pc, #28]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8007b62:	681b      	ldr	r3, [r3, #0]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	58024400 	.word	0x58024400
 8007b70:	080204a4 	.word	0x080204a4
 8007b74:	24000004 	.word	0x24000004
 8007b78:	24000000 	.word	0x24000000

08007b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b80:	f7ff ffcc 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 8007b84:	4602      	mov	r2, r0
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	091b      	lsrs	r3, r3, #4
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b92:	5ccb      	ldrb	r3, [r1, r3]
 8007b94:	f003 031f 	and.w	r3, r3, #31
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	080204a4 	.word	0x080204a4

08007ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007bac:	f7ff ffb6 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	f003 0307 	and.w	r3, r3, #7
 8007bbc:	4904      	ldr	r1, [pc, #16]	; (8007bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bbe:	5ccb      	ldrb	r3, [r1, r3]
 8007bc0:	f003 031f 	and.w	r3, r3, #31
 8007bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	080204a4 	.word	0x080204a4

08007bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	223f      	movs	r2, #63	; 0x3f
 8007be2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f003 0207 	and.w	r2, r3, #7
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007bf0:	4b17      	ldr	r3, [pc, #92]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c14:	4b0e      	ldr	r3, [pc, #56]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c2c:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <HAL_RCC_GetClockConfig+0x7c>)
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <HAL_RCC_GetClockConfig+0x80>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	58024400 	.word	0x58024400
 8007c54:	52002000 	.word	0x52002000

08007c58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c5c:	b0ca      	sub	sp, #296	; 0x128
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	ea54 0305 	orrs.w	r3, r4, r5
 8007c82:	d049      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c8e:	d02f      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007c90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c94:	d828      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c9a:	d01a      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca0:	d822      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007caa:	d007      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cac:	e01c      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cae:	4bb8      	ldr	r3, [pc, #736]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	4ab7      	ldr	r2, [pc, #732]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cba:	e01a      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	2102      	movs	r1, #2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 fc8f 	bl	80095e8 <RCCEx_PLL2_Config>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007cd0:	e00f      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd6:	3328      	adds	r3, #40	; 0x28
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fd36 	bl	800974c <RCCEx_PLL3_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ce6:	e004      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cee:	e000      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cfa:	4ba5      	ldr	r3, [pc, #660]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d08:	4aa1      	ldr	r2, [pc, #644]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	6513      	str	r3, [r2, #80]	; 0x50
 8007d0e:	e003      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007d24:	f04f 0900 	mov.w	r9, #0
 8007d28:	ea58 0309 	orrs.w	r3, r8, r9
 8007d2c:	d047      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d82a      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d55 	.word	0x08007d55
 8007d44:	08007d63 	.word	0x08007d63
 8007d48:	08007d79 	.word	0x08007d79
 8007d4c:	08007d97 	.word	0x08007d97
 8007d50:	08007d97 	.word	0x08007d97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4b8e      	ldr	r3, [pc, #568]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a8d      	ldr	r2, [pc, #564]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d60:	e01a      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d66:	3308      	adds	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fc3c 	bl	80095e8 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d76:	e00f      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7c:	3328      	adds	r3, #40	; 0x28
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fce3 	bl	800974c <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d8c:	e004      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d94:	e000      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007da0:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	f023 0107 	bic.w	r1, r3, #7
 8007da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dae:	4a78      	ldr	r2, [pc, #480]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6513      	str	r3, [r2, #80]	; 0x50
 8007db4:	e003      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007dca:	f04f 0b00 	mov.w	fp, #0
 8007dce:	ea5a 030b 	orrs.w	r3, sl, fp
 8007dd2:	d04c      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dde:	d030      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007de4:	d829      	bhi.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007de6:	2bc0      	cmp	r3, #192	; 0xc0
 8007de8:	d02d      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007dea:	2bc0      	cmp	r3, #192	; 0xc0
 8007dec:	d825      	bhi.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d018      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d821      	bhi.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007dfa:	2b40      	cmp	r3, #64	; 0x40
 8007dfc:	d007      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007dfe:	e01c      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e00:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	4a62      	ldr	r2, [pc, #392]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e0c:	e01c      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	3308      	adds	r3, #8
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fbe6 	bl	80095e8 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e22:	e011      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e28:	3328      	adds	r3, #40	; 0x28
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fc8d 	bl	800974c <RCCEx_PLL3_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e40:	e002      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e50:	4b4f      	ldr	r3, [pc, #316]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5e:	4a4c      	ldr	r2, [pc, #304]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6513      	str	r3, [r2, #80]	; 0x50
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007e7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d053      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e9a:	d035      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007e9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ea0:	d82e      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007ea2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ea6:	d031      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007ea8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eac:	d828      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb2:	d01a      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb8:	d822      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec2:	d007      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007ec4:	e01c      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec6:	4b32      	ldr	r3, [pc, #200]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a31      	ldr	r2, [pc, #196]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ed2:	e01c      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed8:	3308      	adds	r3, #8
 8007eda:	2100      	movs	r1, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fb83 	bl	80095e8 <RCCEx_PLL2_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ee8:	e011      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eee:	3328      	adds	r3, #40	; 0x28
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 fc2a 	bl	800974c <RCCEx_PLL3_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007efe:	e006      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f06:	e002      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f26:	4a1a      	ldr	r2, [pc, #104]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8007f2c:	e003      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007f42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007f50:	460b      	mov	r3, r1
 8007f52:	4313      	orrs	r3, r2
 8007f54:	d056      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f62:	d038      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f68:	d831      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f6e:	d034      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007f70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f74:	d82b      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f7a:	d01d      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f80:	d825      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d006      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f8a:	d00a      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f8c:	e01f      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007f8e:	bf00      	nop
 8007f90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f94:	4ba2      	ldr	r3, [pc, #648]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	4aa1      	ldr	r2, [pc, #644]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fa0:	e01c      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 fb1c 	bl	80095e8 <RCCEx_PLL2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fb6:	e011      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fbc:	3328      	adds	r3, #40	; 0x28
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fbc3 	bl	800974c <RCCEx_PLL3_Config>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fcc:	e006      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fd6:	bf00      	nop
 8007fd8:	e000      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fe4:	4b8e      	ldr	r3, [pc, #568]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ff4:	4a8a      	ldr	r2, [pc, #552]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff6:	430b      	orrs	r3, r1
 8007ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8007ffa:	e003      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008000:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008014:	2300      	movs	r3, #0
 8008016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800801a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800801e:	460b      	mov	r3, r1
 8008020:	4313      	orrs	r3, r2
 8008022:	d03a      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	2b30      	cmp	r3, #48	; 0x30
 800802c:	d01f      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800802e:	2b30      	cmp	r3, #48	; 0x30
 8008030:	d819      	bhi.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008032:	2b20      	cmp	r3, #32
 8008034:	d00c      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008036:	2b20      	cmp	r3, #32
 8008038:	d815      	bhi.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d019      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800803e:	2b10      	cmp	r3, #16
 8008040:	d111      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008042:	4b77      	ldr	r3, [pc, #476]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	4a76      	ldr	r2, [pc, #472]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800804c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800804e:	e011      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008054:	3308      	adds	r3, #8
 8008056:	2102      	movs	r1, #2
 8008058:	4618      	mov	r0, r3
 800805a:	f001 fac5 	bl	80095e8 <RCCEx_PLL2_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008064:	e006      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800807c:	4b68      	ldr	r3, [pc, #416]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800807e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008080:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808a:	4a65      	ldr	r2, [pc, #404]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800808c:	430b      	orrs	r3, r1
 800808e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80080a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80080aa:	2300      	movs	r3, #0
 80080ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4313      	orrs	r3, r2
 80080b8:	d051      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080c4:	d035      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80080c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ca:	d82e      	bhi.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080d0:	d031      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80080d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080d6:	d828      	bhi.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080dc:	d01a      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80080de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e2:	d822      	bhi.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ec:	d007      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80080ee:	e01c      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f0:	4b4b      	ldr	r3, [pc, #300]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	4a4a      	ldr	r2, [pc, #296]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80080fc:	e01c      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008102:	3308      	adds	r3, #8
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f001 fa6e 	bl	80095e8 <RCCEx_PLL2_Config>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008112:	e011      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008118:	3328      	adds	r3, #40	; 0x28
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f001 fb15 	bl	800974c <RCCEx_PLL3_Config>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008128:	e006      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008130:	e002      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008140:	4b37      	ldr	r3, [pc, #220]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008144:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800814e:	4a34      	ldr	r2, [pc, #208]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008150:	430b      	orrs	r3, r1
 8008152:	6513      	str	r3, [r2, #80]	; 0x50
 8008154:	e003      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800815a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800816a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800816e:	2300      	movs	r3, #0
 8008170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008174:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d056      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008188:	d033      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800818a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800818e:	d82c      	bhi.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008194:	d02f      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008196:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800819a:	d826      	bhi.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800819c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a0:	d02b      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80081a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a6:	d820      	bhi.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ac:	d012      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80081ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b2:	d81a      	bhi.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d022      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d115      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c2:	3308      	adds	r3, #8
 80081c4:	2101      	movs	r1, #1
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fa0e 	bl	80095e8 <RCCEx_PLL2_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081d2:	e015      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d8:	3328      	adds	r3, #40	; 0x28
 80081da:	2101      	movs	r1, #1
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 fab5 	bl	800974c <RCCEx_PLL3_Config>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081e8:	e00a      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081f0:	e006      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081f2:	bf00      	nop
 80081f4:	e004      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081f6:	bf00      	nop
 80081f8:	e002      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80081fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10d      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008208:	4b05      	ldr	r3, [pc, #20]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008216:	4a02      	ldr	r2, [pc, #8]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008218:	430b      	orrs	r3, r1
 800821a:	6513      	str	r3, [r2, #80]	; 0x50
 800821c:	e006      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008242:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d055      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008258:	d033      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800825a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800825e:	d82c      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008264:	d02f      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d826      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 800826c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008270:	d02b      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008276:	d820      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827c:	d012      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d81a      	bhi.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d022      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800828c:	d115      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800828e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008292:	3308      	adds	r3, #8
 8008294:	2101      	movs	r1, #1
 8008296:	4618      	mov	r0, r3
 8008298:	f001 f9a6 	bl	80095e8 <RCCEx_PLL2_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082a2:	e015      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a8:	3328      	adds	r3, #40	; 0x28
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fa4d 	bl	800974c <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082b8:	e00a      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082c0:	e006      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082c2:	bf00      	nop
 80082c4:	e004      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80082ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082d8:	4ba3      	ldr	r3, [pc, #652]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082e8:	4a9f      	ldr	r2, [pc, #636]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082ea:	430b      	orrs	r3, r1
 80082ec:	6593      	str	r3, [r2, #88]	; 0x58
 80082ee:	e003      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008308:	2300      	movs	r3, #0
 800830a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800830e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008312:	460b      	mov	r3, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	d037      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008322:	d00e      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008328:	d816      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d018      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800832e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008332:	d111      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008334:	4b8c      	ldr	r3, [pc, #560]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	4a8b      	ldr	r2, [pc, #556]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800833a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800833e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008340:	e00f      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008346:	3308      	adds	r3, #8
 8008348:	2101      	movs	r1, #1
 800834a:	4618      	mov	r0, r3
 800834c:	f001 f94c 	bl	80095e8 <RCCEx_PLL2_Config>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008356:	e004      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800835e:	e000      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800836a:	4b7f      	ldr	r3, [pc, #508]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800836c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008378:	4a7b      	ldr	r2, [pc, #492]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800837a:	430b      	orrs	r3, r1
 800837c:	6513      	str	r3, [r2, #80]	; 0x50
 800837e:	e003      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800839e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d039      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80083a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d81c      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80083b2:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80083b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b8:	080083f5 	.word	0x080083f5
 80083bc:	080083c9 	.word	0x080083c9
 80083c0:	080083d7 	.word	0x080083d7
 80083c4:	080083f5 	.word	0x080083f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c8:	4b67      	ldr	r3, [pc, #412]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083cc:	4a66      	ldr	r2, [pc, #408]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083d4:	e00f      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083da:	3308      	adds	r3, #8
 80083dc:	2102      	movs	r1, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 f902 	bl	80095e8 <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083ea:	e004      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083f2:	e000      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80083f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083fe:	4b5a      	ldr	r3, [pc, #360]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008402:	f023 0103 	bic.w	r1, r3, #3
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840c:	4a56      	ldr	r2, [pc, #344]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800840e:	430b      	orrs	r3, r1
 8008410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008432:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	f000 809f 	beq.w	800857c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800843e:	4b4b      	ldr	r3, [pc, #300]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a4a      	ldr	r2, [pc, #296]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008448:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800844a:	f7f9 ff11 	bl	8002270 <HAL_GetTick>
 800844e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008452:	e00b      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008454:	f7f9 ff0c 	bl	8002270 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b64      	cmp	r3, #100	; 0x64
 8008462:	d903      	bls.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800846a:	e005      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800846c:	4b3f      	ldr	r3, [pc, #252]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0ed      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847c:	2b00      	cmp	r3, #0
 800847e:	d179      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008480:	4b39      	ldr	r3, [pc, #228]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800848c:	4053      	eors	r3, r2
 800848e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008492:	2b00      	cmp	r3, #0
 8008494:	d015      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008496:	4b34      	ldr	r3, [pc, #208]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800849e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084a2:	4b31      	ldr	r3, [pc, #196]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	4a30      	ldr	r2, [pc, #192]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	4a2d      	ldr	r2, [pc, #180]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084ba:	4a2b      	ldr	r2, [pc, #172]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80084ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ce:	d118      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7f9 fece 	bl	8002270 <HAL_GetTick>
 80084d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084d8:	e00d      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084da:	f7f9 fec9 	bl	8002270 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80084e4:	1ad2      	subs	r2, r2, r3
 80084e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d903      	bls.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80084f4:	e005      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f6:	4b1c      	ldr	r3, [pc, #112]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0eb      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008506:	2b00      	cmp	r3, #0
 8008508:	d129      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800850a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851a:	d10e      	bne.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800852c:	091a      	lsrs	r2, r3, #4
 800852e:	4b10      	ldr	r3, [pc, #64]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008530:	4013      	ands	r3, r2
 8008532:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008534:	430b      	orrs	r3, r1
 8008536:	6113      	str	r3, [r2, #16]
 8008538:	e005      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800853a:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008540:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008544:	6113      	str	r3, [r2, #16]
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008548:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008556:	4a04      	ldr	r2, [pc, #16]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008558:	430b      	orrs	r3, r1
 800855a:	6713      	str	r3, [r2, #112]	; 0x70
 800855c:	e00e      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008566:	e009      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008568:	58024400 	.word	0x58024400
 800856c:	58024800 	.word	0x58024800
 8008570:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f002 0301 	and.w	r3, r2, #1
 8008588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800858c:	2300      	movs	r3, #0
 800858e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008592:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	f000 8089 	beq.w	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800859e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a4:	2b28      	cmp	r3, #40	; 0x28
 80085a6:	d86b      	bhi.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80085a8:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ae:	bf00      	nop
 80085b0:	08008689 	.word	0x08008689
 80085b4:	08008681 	.word	0x08008681
 80085b8:	08008681 	.word	0x08008681
 80085bc:	08008681 	.word	0x08008681
 80085c0:	08008681 	.word	0x08008681
 80085c4:	08008681 	.word	0x08008681
 80085c8:	08008681 	.word	0x08008681
 80085cc:	08008681 	.word	0x08008681
 80085d0:	08008655 	.word	0x08008655
 80085d4:	08008681 	.word	0x08008681
 80085d8:	08008681 	.word	0x08008681
 80085dc:	08008681 	.word	0x08008681
 80085e0:	08008681 	.word	0x08008681
 80085e4:	08008681 	.word	0x08008681
 80085e8:	08008681 	.word	0x08008681
 80085ec:	08008681 	.word	0x08008681
 80085f0:	0800866b 	.word	0x0800866b
 80085f4:	08008681 	.word	0x08008681
 80085f8:	08008681 	.word	0x08008681
 80085fc:	08008681 	.word	0x08008681
 8008600:	08008681 	.word	0x08008681
 8008604:	08008681 	.word	0x08008681
 8008608:	08008681 	.word	0x08008681
 800860c:	08008681 	.word	0x08008681
 8008610:	08008689 	.word	0x08008689
 8008614:	08008681 	.word	0x08008681
 8008618:	08008681 	.word	0x08008681
 800861c:	08008681 	.word	0x08008681
 8008620:	08008681 	.word	0x08008681
 8008624:	08008681 	.word	0x08008681
 8008628:	08008681 	.word	0x08008681
 800862c:	08008681 	.word	0x08008681
 8008630:	08008689 	.word	0x08008689
 8008634:	08008681 	.word	0x08008681
 8008638:	08008681 	.word	0x08008681
 800863c:	08008681 	.word	0x08008681
 8008640:	08008681 	.word	0x08008681
 8008644:	08008681 	.word	0x08008681
 8008648:	08008681 	.word	0x08008681
 800864c:	08008681 	.word	0x08008681
 8008650:	08008689 	.word	0x08008689
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008658:	3308      	adds	r3, #8
 800865a:	2101      	movs	r1, #1
 800865c:	4618      	mov	r0, r3
 800865e:	f000 ffc3 	bl	80095e8 <RCCEx_PLL2_Config>
 8008662:	4603      	mov	r3, r0
 8008664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008668:	e00f      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	3328      	adds	r3, #40	; 0x28
 8008670:	2101      	movs	r1, #1
 8008672:	4618      	mov	r0, r3
 8008674:	f001 f86a 	bl	800974c <RCCEx_PLL3_Config>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800867e:	e004      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008686:	e000      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008692:	4bbf      	ldr	r3, [pc, #764]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008696:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a0:	4abb      	ldr	r2, [pc, #748]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086a2:	430b      	orrs	r3, r1
 80086a4:	6553      	str	r3, [r2, #84]	; 0x54
 80086a6:	e003      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f002 0302 	and.w	r3, r2, #2
 80086bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086c0:	2300      	movs	r3, #0
 80086c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80086ca:	460b      	mov	r3, r1
 80086cc:	4313      	orrs	r3, r2
 80086ce:	d041      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d824      	bhi.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80086da:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	0800872d 	.word	0x0800872d
 80086e4:	080086f9 	.word	0x080086f9
 80086e8:	0800870f 	.word	0x0800870f
 80086ec:	0800872d 	.word	0x0800872d
 80086f0:	0800872d 	.word	0x0800872d
 80086f4:	0800872d 	.word	0x0800872d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fc:	3308      	adds	r3, #8
 80086fe:	2101      	movs	r1, #1
 8008700:	4618      	mov	r0, r3
 8008702:	f000 ff71 	bl	80095e8 <RCCEx_PLL2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800870c:	e00f      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008712:	3328      	adds	r3, #40	; 0x28
 8008714:	2101      	movs	r1, #1
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f818 	bl	800974c <RCCEx_PLL3_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008722:	e004      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800872a:	e000      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800872c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10a      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008736:	4b96      	ldr	r3, [pc, #600]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f023 0107 	bic.w	r1, r3, #7
 800873e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008744:	4a92      	ldr	r2, [pc, #584]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008746:	430b      	orrs	r3, r1
 8008748:	6553      	str	r3, [r2, #84]	; 0x54
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f002 0304 	and.w	r3, r2, #4
 8008760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008764:	2300      	movs	r3, #0
 8008766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800876a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800876e:	460b      	mov	r3, r1
 8008770:	4313      	orrs	r3, r2
 8008772:	d044      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800877c:	2b05      	cmp	r3, #5
 800877e:	d825      	bhi.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008780:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008786:	bf00      	nop
 8008788:	080087d5 	.word	0x080087d5
 800878c:	080087a1 	.word	0x080087a1
 8008790:	080087b7 	.word	0x080087b7
 8008794:	080087d5 	.word	0x080087d5
 8008798:	080087d5 	.word	0x080087d5
 800879c:	080087d5 	.word	0x080087d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a4:	3308      	adds	r3, #8
 80087a6:	2101      	movs	r1, #1
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 ff1d 	bl	80095e8 <RCCEx_PLL2_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087b4:	e00f      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ba:	3328      	adds	r3, #40	; 0x28
 80087bc:	2101      	movs	r1, #1
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 ffc4 	bl	800974c <RCCEx_PLL3_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087ca:	e004      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087d2:	e000      	b.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80087d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087de:	4b6c      	ldr	r3, [pc, #432]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e2:	f023 0107 	bic.w	r1, r3, #7
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087ee:	4a68      	ldr	r2, [pc, #416]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6593      	str	r3, [r2, #88]	; 0x58
 80087f4:	e003      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	f002 0320 	and.w	r3, r2, #32
 800880a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800880e:	2300      	movs	r3, #0
 8008810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008818:	460b      	mov	r3, r1
 800881a:	4313      	orrs	r3, r2
 800881c:	d055      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800882a:	d033      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800882c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008830:	d82c      	bhi.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008836:	d02f      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883c:	d826      	bhi.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800883e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008842:	d02b      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008848:	d820      	bhi.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800884a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884e:	d012      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008854:	d81a      	bhi.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d022      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800885a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800885e:	d115      	bne.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	3308      	adds	r3, #8
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f000 febd 	bl	80095e8 <RCCEx_PLL2_Config>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008874:	e015      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887a:	3328      	adds	r3, #40	; 0x28
 800887c:	2102      	movs	r1, #2
 800887e:	4618      	mov	r0, r3
 8008880:	f000 ff64 	bl	800974c <RCCEx_PLL3_Config>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800888a:	e00a      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008892:	e006      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008894:	bf00      	nop
 8008896:	e004      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008898:	bf00      	nop
 800889a:	e002      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800889c:	bf00      	nop
 800889e:	e000      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80088a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088aa:	4b39      	ldr	r3, [pc, #228]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ba:	4a35      	ldr	r2, [pc, #212]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088bc:	430b      	orrs	r3, r1
 80088be:	6553      	str	r3, [r2, #84]	; 0x54
 80088c0:	e003      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80088d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088da:	2300      	movs	r3, #0
 80088dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	d058      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088f6:	d033      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80088f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80088fc:	d82c      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008902:	d02f      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d826      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800890a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800890e:	d02b      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008914:	d820      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891a:	d012      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800891c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008920:	d81a      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d022      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892a:	d115      	bne.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008930:	3308      	adds	r3, #8
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fe57 	bl	80095e8 <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008940:	e015      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	3328      	adds	r3, #40	; 0x28
 8008948:	2102      	movs	r1, #2
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fefe 	bl	800974c <RCCEx_PLL3_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008956:	e00a      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800895e:	e006      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008960:	bf00      	nop
 8008962:	e004      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008964:	bf00      	nop
 8008966:	e002      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008968:	bf00      	nop
 800896a:	e000      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800896c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800896e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10e      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008976:	4b06      	ldr	r3, [pc, #24]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008986:	4a02      	ldr	r2, [pc, #8]	; (8008990 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008988:	430b      	orrs	r3, r1
 800898a:	6593      	str	r3, [r2, #88]	; 0x58
 800898c:	e006      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800898e:	bf00      	nop
 8008990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800899c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80089a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	d055      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089c8:	d033      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80089ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089ce:	d82c      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d4:	d02f      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80089d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089da:	d826      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089e0:	d02b      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80089e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089e6:	d820      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ec:	d012      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80089ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f2:	d81a      	bhi.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d022      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80089f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fc:	d115      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3308      	adds	r3, #8
 8008a04:	2100      	movs	r1, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fdee 	bl	80095e8 <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a12:	e015      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a18:	3328      	adds	r3, #40	; 0x28
 8008a1a:	2102      	movs	r1, #2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fe95 	bl	800974c <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a28:	e00a      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a30:	e006      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a32:	bf00      	nop
 8008a34:	e004      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a48:	4ba1      	ldr	r3, [pc, #644]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a58:	4a9d      	ldr	r2, [pc, #628]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a5e:	e003      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f002 0308 	and.w	r3, r2, #8
 8008a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008a82:	460b      	mov	r3, r1
 8008a84:	4313      	orrs	r3, r2
 8008a86:	d01e      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a94:	d10c      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9a:	3328      	adds	r3, #40	; 0x28
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fe54 	bl	800974c <RCCEx_PLL3_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ab0:	4b87      	ldr	r3, [pc, #540]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac0:	4a83      	ldr	r2, [pc, #524]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	f002 0310 	and.w	r3, r2, #16
 8008ad2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008adc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	d01e      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af2:	d10c      	bne.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af8:	3328      	adds	r3, #40	; 0x28
 8008afa:	2102      	movs	r1, #2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 fe25 	bl	800974c <RCCEx_PLL3_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b0e:	4b70      	ldr	r3, [pc, #448]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b1e:	4a6c      	ldr	r2, [pc, #432]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b34:	2300      	movs	r3, #0
 8008b36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d03e      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b50:	d022      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b56:	d81b      	bhi.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b60:	d00b      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008b62:	e015      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b68:	3308      	adds	r3, #8
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fd3b 	bl	80095e8 <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b78:	e00f      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7e:	3328      	adds	r3, #40	; 0x28
 8008b80:	2102      	movs	r1, #2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fde2 	bl	800974c <RCCEx_PLL3_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b8e:	e004      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b96:	e000      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ba2:	4b4b      	ldr	r3, [pc, #300]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008bb2:	4a47      	ldr	r2, [pc, #284]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008bce:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bd4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d03b      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bea:	d01f      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf0:	d818      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bf6:	d003      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bfc:	d007      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008bfe:	e011      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c00:	4b33      	ldr	r3, [pc, #204]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	4a32      	ldr	r2, [pc, #200]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c0c:	e00f      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c12:	3328      	adds	r3, #40	; 0x28
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fd98 	bl	800974c <RCCEx_PLL3_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c22:	e004      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c2a:	e000      	b.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c36:	4b26      	ldr	r3, [pc, #152]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c46:	4a22      	ldr	r2, [pc, #136]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6553      	str	r3, [r2, #84]	; 0x54
 8008c4c:	e003      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008c62:	673b      	str	r3, [r7, #112]	; 0x70
 8008c64:	2300      	movs	r3, #0
 8008c66:	677b      	str	r3, [r7, #116]	; 0x74
 8008c68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	d034      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d007      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008c82:	e011      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c84:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	4a11      	ldr	r2, [pc, #68]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c90:	e00e      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c96:	3308      	adds	r3, #8
 8008c98:	2102      	movs	r1, #2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fca4 	bl	80095e8 <RCCEx_PLL2_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10d      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc6:	4a02      	ldr	r2, [pc, #8]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ccc:	e006      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008cce:	bf00      	nop
 8008cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cea:	2300      	movs	r3, #0
 8008cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	d00c      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfc:	3328      	adds	r3, #40	; 0x28
 8008cfe:	2102      	movs	r1, #2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fd23 	bl	800974c <RCCEx_PLL3_Config>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8008d20:	2300      	movs	r3, #0
 8008d22:	667b      	str	r3, [r7, #100]	; 0x64
 8008d24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d038      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d3a:	d018      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d40:	d811      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d46:	d014      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4c:	d80b      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d011      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d56:	d106      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d58:	4bc3      	ldr	r3, [pc, #780]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4ac2      	ldr	r2, [pc, #776]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d64:	e008      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d6c:	e004      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e002      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d72:	bf00      	nop
 8008d74:	e000      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d10b      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d80:	4bb9      	ldr	r3, [pc, #740]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d90:	4ab5      	ldr	r2, [pc, #724]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d92:	430b      	orrs	r3, r1
 8008d94:	6553      	str	r3, [r2, #84]	; 0x54
 8008d96:	e003      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dae:	2300      	movs	r3, #0
 8008db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008db6:	460b      	mov	r3, r1
 8008db8:	4313      	orrs	r3, r2
 8008dba:	d009      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008dbc:	4baa      	ldr	r3, [pc, #680]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dca:	4aa7      	ldr	r2, [pc, #668]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8008dde:	2300      	movs	r3, #0
 8008de0:	657b      	str	r3, [r7, #84]	; 0x54
 8008de2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008de6:	460b      	mov	r3, r1
 8008de8:	4313      	orrs	r3, r2
 8008dea:	d00a      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008dec:	4b9e      	ldr	r3, [pc, #632]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008dfc:	4a9a      	ldr	r2, [pc, #616]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e10:	2300      	movs	r3, #0
 8008e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	d009      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e1e:	4b92      	ldr	r3, [pc, #584]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2c:	4a8e      	ldr	r2, [pc, #568]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8008e40:	2300      	movs	r3, #0
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
 8008e44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e4e:	4b86      	ldr	r3, [pc, #536]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	4a85      	ldr	r2, [pc, #532]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e58:	6113      	str	r3, [r2, #16]
 8008e5a:	4b83      	ldr	r3, [pc, #524]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e5c:	6919      	ldr	r1, [r3, #16]
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008e66:	4a80      	ldr	r2, [pc, #512]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008e82:	460b      	mov	r3, r1
 8008e84:	4313      	orrs	r3, r2
 8008e86:	d009      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e88:	4b77      	ldr	r3, [pc, #476]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	4a74      	ldr	r2, [pc, #464]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eaa:	2300      	movs	r3, #0
 8008eac:	637b      	str	r3, [r7, #52]	; 0x34
 8008eae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d00a      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008eb8:	4b6b      	ldr	r3, [pc, #428]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ec8:	4a67      	ldr	r2, [pc, #412]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	d011      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eee:	3308      	adds	r3, #8
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fb78 	bl	80095e8 <RCCEx_PLL2_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	2100      	movs	r1, #0
 8008f18:	6239      	str	r1, [r7, #32]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f24:	460b      	mov	r3, r1
 8008f26:	4313      	orrs	r3, r2
 8008f28:	d011      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2e:	3308      	adds	r3, #8
 8008f30:	2101      	movs	r1, #1
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fb58 	bl	80095e8 <RCCEx_PLL2_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	2100      	movs	r1, #0
 8008f58:	61b9      	str	r1, [r7, #24]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f64:	460b      	mov	r3, r1
 8008f66:	4313      	orrs	r3, r2
 8008f68:	d011      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f6e:	3308      	adds	r3, #8
 8008f70:	2102      	movs	r1, #2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fb38 	bl	80095e8 <RCCEx_PLL2_Config>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	2100      	movs	r1, #0
 8008f98:	6139      	str	r1, [r7, #16]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	d011      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fae:	3328      	adds	r3, #40	; 0x28
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fbca 	bl	800974c <RCCEx_PLL3_Config>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	d011      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fee:	3328      	adds	r3, #40	; 0x28
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fbaa 	bl	800974c <RCCEx_PLL3_Config>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800900a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	2100      	movs	r1, #0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009024:	460b      	mov	r3, r1
 8009026:	4313      	orrs	r3, r2
 8009028:	d011      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902e:	3328      	adds	r3, #40	; 0x28
 8009030:	2102      	movs	r1, #2
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fb8a 	bl	800974c <RCCEx_PLL3_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800903e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800904a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800904e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
}
 800905c:	4618      	mov	r0, r3
 800905e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009062:	46bd      	mov	sp, r7
 8009064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009068:	58024400 	.word	0x58024400

0800906c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009070:	f7fe fd54 	bl	8007b1c <HAL_RCC_GetHCLKFreq>
 8009074:	4602      	mov	r2, r0
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	091b      	lsrs	r3, r3, #4
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	4904      	ldr	r1, [pc, #16]	; (8009094 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009082:	5ccb      	ldrb	r3, [r1, r3]
 8009084:	f003 031f 	and.w	r3, r3, #31
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800908c:	4618      	mov	r0, r3
 800908e:	bd80      	pop	{r7, pc}
 8009090:	58024400 	.word	0x58024400
 8009094:	080204a4 	.word	0x080204a4

08009098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009098:	b480      	push	{r7}
 800909a:	b089      	sub	sp, #36	; 0x24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a0:	4ba1      	ldr	r3, [pc, #644]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090aa:	4b9f      	ldr	r3, [pc, #636]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ae:	0b1b      	lsrs	r3, r3, #12
 80090b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090b6:	4b9c      	ldr	r3, [pc, #624]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	091b      	lsrs	r3, r3, #4
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090c2:	4b99      	ldr	r3, [pc, #612]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	08db      	lsrs	r3, r3, #3
 80090c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	fb02 f303 	mul.w	r3, r2, r3
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 8111 	beq.w	8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	f000 8083 	beq.w	80091f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	f200 80a1 	bhi.w	8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d056      	beq.n	80091b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009102:	e099      	b.n	8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009104:	4b88      	ldr	r3, [pc, #544]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0320 	and.w	r3, r3, #32
 800910c:	2b00      	cmp	r3, #0
 800910e:	d02d      	beq.n	800916c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009110:	4b85      	ldr	r3, [pc, #532]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	08db      	lsrs	r3, r3, #3
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	4a84      	ldr	r2, [pc, #528]	; (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
 8009120:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	ee07 3a90 	vmov	s15, r3
 8009128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913a:	4b7b      	ldr	r3, [pc, #492]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914a:	ed97 6a03 	vldr	s12, [r7, #12]
 800914e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800916a:	e087      	b.n	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917e:	4b6a      	ldr	r3, [pc, #424]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009192:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ae:	e065      	b.n	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b59      	ldr	r3, [pc, #356]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f2:	e043      	b.n	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800933c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b48      	ldr	r3, [pc, #288]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a03 	vldr	s12, [r7, #12]
 800921a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009236:	e021      	b.n	800927c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b37      	ldr	r3, [pc, #220]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a03 	vldr	s12, [r7, #12]
 800925e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800927c:	4b2a      	ldr	r3, [pc, #168]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	0a5b      	lsrs	r3, r3, #9
 8009282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009296:	edd7 6a07 	vldr	s13, [r7, #28]
 800929a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a2:	ee17 2a90 	vmov	r2, s15
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092aa:	4b1f      	ldr	r3, [pc, #124]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	0c1b      	lsrs	r3, r3, #16
 80092b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d0:	ee17 2a90 	vmov	r2, s15
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092d8:	4b13      	ldr	r3, [pc, #76]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	0e1b      	lsrs	r3, r3, #24
 80092de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fe:	ee17 2a90 	vmov	r2, s15
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009306:	e008      	b.n	800931a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	609a      	str	r2, [r3, #8]
}
 800931a:	bf00      	nop
 800931c:	3724      	adds	r7, #36	; 0x24
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	58024400 	.word	0x58024400
 800932c:	03d09000 	.word	0x03d09000
 8009330:	46000000 	.word	0x46000000
 8009334:	4c742400 	.word	0x4c742400
 8009338:	4a742400 	.word	0x4a742400
 800933c:	4af42400 	.word	0x4af42400

08009340 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009340:	b480      	push	{r7}
 8009342:	b089      	sub	sp, #36	; 0x24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009348:	4ba1      	ldr	r3, [pc, #644]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009352:	4b9f      	ldr	r3, [pc, #636]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	0d1b      	lsrs	r3, r3, #20
 8009358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800935c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800935e:	4b9c      	ldr	r3, [pc, #624]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800936a:	4b99      	ldr	r3, [pc, #612]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	08db      	lsrs	r3, r3, #3
 8009370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 8111 	beq.w	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b02      	cmp	r3, #2
 8009392:	f000 8083 	beq.w	800949c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2b02      	cmp	r3, #2
 800939a:	f200 80a1 	bhi.w	80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d056      	beq.n	8009458 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093aa:	e099      	b.n	80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093ac:	4b88      	ldr	r3, [pc, #544]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02d      	beq.n	8009414 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b8:	4b85      	ldr	r3, [pc, #532]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	4a84      	ldr	r2, [pc, #528]	; (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e2:	4b7b      	ldr	r3, [pc, #492]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009412:	e087      	b.n	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009426:	4b6a      	ldr	r3, [pc, #424]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009436:	ed97 6a03 	vldr	s12, [r7, #12]
 800943a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800943e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800944a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009456:	e065      	b.n	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946a:	4b59      	ldr	r3, [pc, #356]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947a:	ed97 6a03 	vldr	s12, [r7, #12]
 800947e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800949a:	e043      	b.n	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ae:	4b48      	ldr	r3, [pc, #288]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094be:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094de:	e021      	b.n	8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f2:	4b37      	ldr	r3, [pc, #220]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009502:	ed97 6a03 	vldr	s12, [r7, #12]
 8009506:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800950a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009522:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009524:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	0a5b      	lsrs	r3, r3, #9
 800952a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800953a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954a:	ee17 2a90 	vmov	r2, s15
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009552:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955c:	ee07 3a90 	vmov	s15, r3
 8009560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009578:	ee17 2a90 	vmov	r2, s15
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009580:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	0e1b      	lsrs	r3, r3, #24
 8009586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959a:	edd7 6a07 	vldr	s13, [r7, #28]
 800959e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a6:	ee17 2a90 	vmov	r2, s15
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095ae:	e008      	b.n	80095c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	609a      	str	r2, [r3, #8]
}
 80095c2:	bf00      	nop
 80095c4:	3724      	adds	r7, #36	; 0x24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	46000000 	.word	0x46000000
 80095dc:	4c742400 	.word	0x4c742400
 80095e0:	4a742400 	.word	0x4a742400
 80095e4:	4af42400 	.word	0x4af42400

080095e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095f6:	4b53      	ldr	r3, [pc, #332]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d101      	bne.n	8009606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e099      	b.n	800973a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009606:	4b4f      	ldr	r3, [pc, #316]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a4e      	ldr	r2, [pc, #312]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800960c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009612:	f7f8 fe2d 	bl	8002270 <HAL_GetTick>
 8009616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009618:	e008      	b.n	800962c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800961a:	f7f8 fe29 	bl	8002270 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b02      	cmp	r3, #2
 8009626:	d901      	bls.n	800962c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e086      	b.n	800973a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800962c:	4b45      	ldr	r3, [pc, #276]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f0      	bne.n	800961a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009638:	4b42      	ldr	r3, [pc, #264]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	031b      	lsls	r3, r3, #12
 8009646:	493f      	ldr	r1, [pc, #252]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009648:	4313      	orrs	r3, r2
 800964a:	628b      	str	r3, [r1, #40]	; 0x28
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	025b      	lsls	r3, r3, #9
 800965e:	b29b      	uxth	r3, r3
 8009660:	431a      	orrs	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	3b01      	subs	r3, #1
 8009668:	041b      	lsls	r3, r3, #16
 800966a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	3b01      	subs	r3, #1
 8009676:	061b      	lsls	r3, r3, #24
 8009678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800967c:	4931      	ldr	r1, [pc, #196]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800967e:	4313      	orrs	r3, r2
 8009680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009682:	4b30      	ldr	r3, [pc, #192]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	492d      	ldr	r1, [pc, #180]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009690:	4313      	orrs	r3, r2
 8009692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009694:	4b2b      	ldr	r3, [pc, #172]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	f023 0220 	bic.w	r2, r3, #32
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	4928      	ldr	r1, [pc, #160]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096a6:	4b27      	ldr	r3, [pc, #156]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	4a26      	ldr	r2, [pc, #152]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096ac:	f023 0310 	bic.w	r3, r3, #16
 80096b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096b2:	4b24      	ldr	r3, [pc, #144]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b6:	4b24      	ldr	r3, [pc, #144]	; (8009748 <RCCEx_PLL2_Config+0x160>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	69d2      	ldr	r2, [r2, #28]
 80096be:	00d2      	lsls	r2, r2, #3
 80096c0:	4920      	ldr	r1, [pc, #128]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096c6:	4b1f      	ldr	r3, [pc, #124]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	4a1e      	ldr	r2, [pc, #120]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096cc:	f043 0310 	orr.w	r3, r3, #16
 80096d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096d8:	4b1a      	ldr	r3, [pc, #104]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	4a19      	ldr	r2, [pc, #100]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096e4:	e00f      	b.n	8009706 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d106      	bne.n	80096fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096ec:	4b15      	ldr	r3, [pc, #84]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	4a14      	ldr	r2, [pc, #80]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f8:	e005      	b.n	8009706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	4a11      	ldr	r2, [pc, #68]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a0e      	ldr	r2, [pc, #56]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800970c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009712:	f7f8 fdad 	bl	8002270 <HAL_GetTick>
 8009716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009718:	e008      	b.n	800972c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800971a:	f7f8 fda9 	bl	8002270 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e006      	b.n	800973a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <RCCEx_PLL2_Config+0x15c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0f0      	beq.n	800971a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400
 8009748:	ffff0007 	.word	0xffff0007

0800974c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800975a:	4b53      	ldr	r3, [pc, #332]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	2b03      	cmp	r3, #3
 8009764:	d101      	bne.n	800976a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e099      	b.n	800989e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800976a:	4b4f      	ldr	r3, [pc, #316]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a4e      	ldr	r2, [pc, #312]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009776:	f7f8 fd7b 	bl	8002270 <HAL_GetTick>
 800977a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800977c:	e008      	b.n	8009790 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800977e:	f7f8 fd77 	bl	8002270 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e086      	b.n	800989e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009790:	4b45      	ldr	r3, [pc, #276]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f0      	bne.n	800977e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800979c:	4b42      	ldr	r3, [pc, #264]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	051b      	lsls	r3, r3, #20
 80097aa:	493f      	ldr	r1, [pc, #252]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	628b      	str	r3, [r1, #40]	; 0x28
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	3b01      	subs	r3, #1
 80097c0:	025b      	lsls	r3, r3, #9
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	3b01      	subs	r3, #1
 80097da:	061b      	lsls	r3, r3, #24
 80097dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097e0:	4931      	ldr	r1, [pc, #196]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097e6:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	492d      	ldr	r1, [pc, #180]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097f8:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	4928      	ldr	r1, [pc, #160]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009806:	4313      	orrs	r3, r2
 8009808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800980a:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	4a26      	ldr	r2, [pc, #152]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009816:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800981a:	4b24      	ldr	r3, [pc, #144]	; (80098ac <RCCEx_PLL3_Config+0x160>)
 800981c:	4013      	ands	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	69d2      	ldr	r2, [r2, #28]
 8009822:	00d2      	lsls	r2, r2, #3
 8009824:	4920      	ldr	r1, [pc, #128]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009826:	4313      	orrs	r3, r2
 8009828:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800982a:	4b1f      	ldr	r3, [pc, #124]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800982c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982e:	4a1e      	ldr	r2, [pc, #120]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800983c:	4b1a      	ldr	r3, [pc, #104]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	4a19      	ldr	r2, [pc, #100]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009848:	e00f      	b.n	800986a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d106      	bne.n	800985e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009850:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800985a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800985c:	e005      	b.n	800986a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	4a11      	ldr	r2, [pc, #68]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800986a:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009876:	f7f8 fcfb 	bl	8002270 <HAL_GetTick>
 800987a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800987c:	e008      	b.n	8009890 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800987e:	f7f8 fcf7 	bl	8002270 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e006      	b.n	800989e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <RCCEx_PLL3_Config+0x15c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	58024400 	.word	0x58024400
 80098ac:	ffff0007 	.word	0xffff0007

080098b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e049      	b.n	8009956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f841 	bl	800995e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f000 fa00 	bl	8009cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009966:	bf00      	nop
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
	...

08009974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b01      	cmp	r3, #1
 8009986:	d001      	beq.n	800998c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e054      	b.n	8009a36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0201 	orr.w	r2, r2, #1
 80099a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a26      	ldr	r2, [pc, #152]	; (8009a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d022      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b6:	d01d      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a22      	ldr	r2, [pc, #136]	; (8009a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d018      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a21      	ldr	r2, [pc, #132]	; (8009a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d013      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a1f      	ldr	r2, [pc, #124]	; (8009a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d00e      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <HAL_TIM_Base_Start_IT+0xe0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d009      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a1c      	ldr	r2, [pc, #112]	; (8009a58 <HAL_TIM_Base_Start_IT+0xe4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d004      	beq.n	80099f4 <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a1b      	ldr	r2, [pc, #108]	; (8009a5c <HAL_TIM_Base_Start_IT+0xe8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d115      	bne.n	8009a20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	4b19      	ldr	r3, [pc, #100]	; (8009a60 <HAL_TIM_Base_Start_IT+0xec>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b06      	cmp	r3, #6
 8009a04:	d015      	beq.n	8009a32 <HAL_TIM_Base_Start_IT+0xbe>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a0c:	d011      	beq.n	8009a32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f042 0201 	orr.w	r2, r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a1e:	e008      	b.n	8009a32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0201 	orr.w	r2, r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e000      	b.n	8009a34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	40010000 	.word	0x40010000
 8009a48:	40000400 	.word	0x40000400
 8009a4c:	40000800 	.word	0x40000800
 8009a50:	40000c00 	.word	0x40000c00
 8009a54:	40010400 	.word	0x40010400
 8009a58:	40001800 	.word	0x40001800
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	00010007 	.word	0x00010007

08009a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d122      	bne.n	8009ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d11b      	bne.n	8009ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f06f 0202 	mvn.w	r2, #2
 8009a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f905 	bl	8009cb6 <HAL_TIM_IC_CaptureCallback>
 8009aac:	e005      	b.n	8009aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f8f7 	bl	8009ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f908 	bl	8009cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0304 	and.w	r3, r3, #4
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d122      	bne.n	8009b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d11b      	bne.n	8009b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0204 	mvn.w	r2, #4
 8009ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f8db 	bl	8009cb6 <HAL_TIM_IC_CaptureCallback>
 8009b00:	e005      	b.n	8009b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f8cd 	bl	8009ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f8de 	bl	8009cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0308 	and.w	r3, r3, #8
 8009b1e:	2b08      	cmp	r3, #8
 8009b20:	d122      	bne.n	8009b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d11b      	bne.n	8009b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0208 	mvn.w	r2, #8
 8009b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f8b1 	bl	8009cb6 <HAL_TIM_IC_CaptureCallback>
 8009b54:	e005      	b.n	8009b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8a3 	bl	8009ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8b4 	bl	8009cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	2b10      	cmp	r3, #16
 8009b74:	d122      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b10      	cmp	r3, #16
 8009b82:	d11b      	bne.n	8009bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f06f 0210 	mvn.w	r2, #16
 8009b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2208      	movs	r2, #8
 8009b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f887 	bl	8009cb6 <HAL_TIM_IC_CaptureCallback>
 8009ba8:	e005      	b.n	8009bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f879 	bl	8009ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f88a 	bl	8009cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d10e      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d107      	bne.n	8009be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f06f 0201 	mvn.w	r2, #1
 8009be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7f7 fe3c 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b80      	cmp	r3, #128	; 0x80
 8009bf4:	d10e      	bne.n	8009c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c00:	2b80      	cmp	r3, #128	; 0x80
 8009c02:	d107      	bne.n	8009c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f914 	bl	8009e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c22:	d10e      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2e:	2b80      	cmp	r3, #128	; 0x80
 8009c30:	d107      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f907 	bl	8009e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4c:	2b40      	cmp	r3, #64	; 0x40
 8009c4e:	d10e      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5a:	2b40      	cmp	r3, #64	; 0x40
 8009c5c:	d107      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f838 	bl	8009cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	d10e      	bne.n	8009c9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b20      	cmp	r3, #32
 8009c88:	d107      	bne.n	8009c9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f06f 0220 	mvn.w	r2, #32
 8009c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f8c7 	bl	8009e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b083      	sub	sp, #12
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cbe:	bf00      	nop
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
	...

08009cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a40      	ldr	r2, [pc, #256]	; (8009e08 <TIM_Base_SetConfig+0x114>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d12:	d00f      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a3d      	ldr	r2, [pc, #244]	; (8009e0c <TIM_Base_SetConfig+0x118>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d00b      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3c      	ldr	r2, [pc, #240]	; (8009e10 <TIM_Base_SetConfig+0x11c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d007      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a3b      	ldr	r2, [pc, #236]	; (8009e14 <TIM_Base_SetConfig+0x120>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a3a      	ldr	r2, [pc, #232]	; (8009e18 <TIM_Base_SetConfig+0x124>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d108      	bne.n	8009d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2f      	ldr	r2, [pc, #188]	; (8009e08 <TIM_Base_SetConfig+0x114>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d01f      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d54:	d01b      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2c      	ldr	r2, [pc, #176]	; (8009e0c <TIM_Base_SetConfig+0x118>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d017      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2b      	ldr	r2, [pc, #172]	; (8009e10 <TIM_Base_SetConfig+0x11c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d013      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2a      	ldr	r2, [pc, #168]	; (8009e14 <TIM_Base_SetConfig+0x120>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00f      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a29      	ldr	r2, [pc, #164]	; (8009e18 <TIM_Base_SetConfig+0x124>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00b      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a28      	ldr	r2, [pc, #160]	; (8009e1c <TIM_Base_SetConfig+0x128>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d007      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a27      	ldr	r2, [pc, #156]	; (8009e20 <TIM_Base_SetConfig+0x12c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d003      	beq.n	8009d8e <TIM_Base_SetConfig+0x9a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a26      	ldr	r2, [pc, #152]	; (8009e24 <TIM_Base_SetConfig+0x130>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d108      	bne.n	8009da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <TIM_Base_SetConfig+0x114>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00f      	beq.n	8009dec <TIM_Base_SetConfig+0xf8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a12      	ldr	r2, [pc, #72]	; (8009e18 <TIM_Base_SetConfig+0x124>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00b      	beq.n	8009dec <TIM_Base_SetConfig+0xf8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <TIM_Base_SetConfig+0x128>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d007      	beq.n	8009dec <TIM_Base_SetConfig+0xf8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a10      	ldr	r2, [pc, #64]	; (8009e20 <TIM_Base_SetConfig+0x12c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d003      	beq.n	8009dec <TIM_Base_SetConfig+0xf8>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a0f      	ldr	r2, [pc, #60]	; (8009e24 <TIM_Base_SetConfig+0x130>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d103      	bne.n	8009df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	691a      	ldr	r2, [r3, #16]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	615a      	str	r2, [r3, #20]
}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	40010000 	.word	0x40010000
 8009e0c:	40000400 	.word	0x40000400
 8009e10:	40000800 	.word	0x40000800
 8009e14:	40000c00 	.word	0x40000c00
 8009e18:	40010400 	.word	0x40010400
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	40014400 	.word	0x40014400
 8009e24:	40014800 	.word	0x40014800

08009e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e042      	b.n	8009efc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7f7 ffa3 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2224      	movs	r2, #36	; 0x24
 8009e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 0201 	bic.w	r2, r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fdb4 	bl	800aa14 <UART_SetConfig>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e022      	b.n	8009efc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 fb10 	bl	800b4e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0201 	orr.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 fb97 	bl	800b628 <UART_CheckIdleState>
 8009efa:	4603      	mov	r3, r0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	; 0x28
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	603b      	str	r3, [r7, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d17b      	bne.n	800a016 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_UART_Transmit+0x26>
 8009f24:	88fb      	ldrh	r3, [r7, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e074      	b.n	800a018 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2221      	movs	r2, #33	; 0x21
 8009f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f3e:	f7f8 f997 	bl	8002270 <HAL_GetTick>
 8009f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	88fa      	ldrh	r2, [r7, #6]
 8009f48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	88fa      	ldrh	r2, [r7, #6]
 8009f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5c:	d108      	bne.n	8009f70 <HAL_UART_Transmit+0x6c>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	61bb      	str	r3, [r7, #24]
 8009f6e:	e003      	b.n	8009f78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f78:	e030      	b.n	8009fdc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2200      	movs	r2, #0
 8009f82:	2180      	movs	r1, #128	; 0x80
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f001 fbf9 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d005      	beq.n	8009f9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e03d      	b.n	800a018 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10b      	bne.n	8009fba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e007      	b.n	8009fca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	781a      	ldrb	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1c8      	bne.n	8009f7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2140      	movs	r1, #64	; 0x40
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f001 fbc2 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e006      	b.n	800a018 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2220      	movs	r2, #32
 800a00e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	e000      	b.n	800a018 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a016:	2302      	movs	r3, #2
  }
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	; 0x28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a034:	2b20      	cmp	r3, #32
 800a036:	d137      	bne.n	800a0a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_UART_Receive_IT+0x24>
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e030      	b.n	800a0aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a18      	ldr	r2, [pc, #96]	; (800a0b4 <HAL_UART_Receive_IT+0x94>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d01f      	beq.n	800a098 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d018      	beq.n	800a098 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	613b      	str	r3, [r7, #16]
   return(result);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	623b      	str	r3, [r7, #32]
 800a086:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	69f9      	ldr	r1, [r7, #28]
 800a08a:	6a3a      	ldr	r2, [r7, #32]
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	61bb      	str	r3, [r7, #24]
   return(result);
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e6      	bne.n	800a066 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f001 fbd4 	bl	800b84c <UART_Start_Receive_IT>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	e000      	b.n	800a0aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0a8:	2302      	movs	r3, #2
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3728      	adds	r7, #40	; 0x28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	58000c00 	.word	0x58000c00

0800a0b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d167      	bne.n	800a1a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <HAL_UART_Transmit_DMA+0x24>
 800a0d6:	88fb      	ldrh	r3, [r7, #6]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e060      	b.n	800a1a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	88fa      	ldrh	r2, [r7, #6]
 800a0ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2221      	movs	r2, #33	; 0x21
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d028      	beq.n	800a160 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a112:	4a26      	ldr	r2, [pc, #152]	; (800a1ac <HAL_UART_Transmit_DMA+0xf4>)
 800a114:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11a:	4a25      	ldr	r2, [pc, #148]	; (800a1b0 <HAL_UART_Transmit_DMA+0xf8>)
 800a11c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a122:	4a24      	ldr	r2, [pc, #144]	; (800a1b4 <HAL_UART_Transmit_DMA+0xfc>)
 800a124:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a12a:	2200      	movs	r2, #0
 800a12c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a136:	4619      	mov	r1, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3328      	adds	r3, #40	; 0x28
 800a13e:	461a      	mov	r2, r3
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	f7f8 fd21 	bl	8002b88 <HAL_DMA_Start_IT>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d009      	beq.n	800a160 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2210      	movs	r2, #16
 800a150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2220      	movs	r2, #32
 800a158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e020      	b.n	800a1a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2240      	movs	r2, #64	; 0x40
 800a166:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3308      	adds	r3, #8
 800a16e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	613b      	str	r3, [r7, #16]
   return(result);
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a188:	623a      	str	r2, [r7, #32]
 800a18a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	69f9      	ldr	r1, [r7, #28]
 800a18e:	6a3a      	ldr	r2, [r7, #32]
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	61bb      	str	r3, [r7, #24]
   return(result);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e5      	bne.n	800a168 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e000      	b.n	800a1a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a1a0:	2302      	movs	r3, #2
  }
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3728      	adds	r7, #40	; 0x28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	0800bd2d 	.word	0x0800bd2d
 800a1b0:	0800bdc3 	.word	0x0800bdc3
 800a1b4:	0800bf45 	.word	0x0800bf45

0800a1b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d137      	bne.n	800a240 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <HAL_UART_Receive_DMA+0x24>
 800a1d6:	88fb      	ldrh	r3, [r7, #6]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e030      	b.n	800a242 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a18      	ldr	r2, [pc, #96]	; (800a24c <HAL_UART_Receive_DMA+0x94>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d01f      	beq.n	800a230 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d018      	beq.n	800a230 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	e853 3f00 	ldrex	r3, [r3]
 800a20a:	613b      	str	r3, [r7, #16]
   return(result);
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	461a      	mov	r2, r3
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	623b      	str	r3, [r7, #32]
 800a21e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a220:	69f9      	ldr	r1, [r7, #28]
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	e841 2300 	strex	r3, r2, [r1]
 800a228:	61bb      	str	r3, [r7, #24]
   return(result);
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1e6      	bne.n	800a1fe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	461a      	mov	r2, r3
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 fc2a 	bl	800ba90 <UART_Start_Receive_DMA>
 800a23c:	4603      	mov	r3, r0
 800a23e:	e000      	b.n	800a242 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3728      	adds	r7, #40	; 0x28
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	58000c00 	.word	0x58000c00

0800a250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b0ba      	sub	sp, #232	; 0xe8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a27a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a27e:	4013      	ands	r3, r2
 800a280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11b      	bne.n	800a2c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a290:	f003 0320 	and.w	r3, r3, #32
 800a294:	2b00      	cmp	r3, #0
 800a296:	d015      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8377 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	4798      	blx	r3
      }
      return;
 800a2c2:	e371      	b.n	800a9a8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 8123 	beq.w	800a514 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2d2:	4b8d      	ldr	r3, [pc, #564]	; (800a508 <HAL_UART_IRQHandler+0x2b8>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2de:	4b8b      	ldr	r3, [pc, #556]	; (800a50c <HAL_UART_IRQHandler+0x2bc>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8116 	beq.w	800a514 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d011      	beq.n	800a318 <HAL_UART_IRQHandler+0xc8>
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2201      	movs	r2, #1
 800a306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	f043 0201 	orr.w	r2, r3, #1
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d011      	beq.n	800a348 <HAL_UART_IRQHandler+0xf8>
 800a324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2202      	movs	r2, #2
 800a336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	f043 0204 	orr.w	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d011      	beq.n	800a378 <HAL_UART_IRQHandler+0x128>
 800a354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2204      	movs	r2, #4
 800a366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f043 0202 	orr.w	r2, r3, #2
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d017      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d105      	bne.n	800a39c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a394:	4b5c      	ldr	r3, [pc, #368]	; (800a508 <HAL_UART_IRQHandler+0x2b8>)
 800a396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3aa:	f043 0208 	orr.w	r2, r3, #8
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d012      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x196>
 800a3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3dc:	f043 0220 	orr.w	r2, r3, #32
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 82dd 	beq.w	800a9ac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d013      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d105      	bne.n	800a416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a40a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d007      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	d005      	beq.n	800a44a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a442:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a446:	2b00      	cmp	r3, #0
 800a448:	d054      	beq.n	800a4f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fc08 	bl	800bc60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	d146      	bne.n	800a4ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a47c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a48a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a48e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a4a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1d9      	bne.n	800a45e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d017      	beq.n	800a4e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ba:	4a15      	ldr	r2, [pc, #84]	; (800a510 <HAL_UART_IRQHandler+0x2c0>)
 800a4bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f9 f8e7 	bl	8003698 <HAL_DMA_Abort_IT>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d019      	beq.n	800a504 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a4de:	4610      	mov	r0, r2
 800a4e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e2:	e00f      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa8b 	bl	800aa00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ea:	e00b      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fa87 	bl	800aa00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f2:	e007      	b.n	800a504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fa83 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a502:	e253      	b.n	800a9ac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a504:	bf00      	nop
    return;
 800a506:	e251      	b.n	800a9ac <HAL_UART_IRQHandler+0x75c>
 800a508:	10000001 	.word	0x10000001
 800a50c:	04000120 	.word	0x04000120
 800a510:	0800bfc5 	.word	0x0800bfc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a518:	2b01      	cmp	r3, #1
 800a51a:	f040 81e7 	bne.w	800a8ec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a522:	f003 0310 	and.w	r3, r3, #16
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 81e0 	beq.w	800a8ec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a530:	f003 0310 	and.w	r3, r3, #16
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 81d9 	beq.w	800a8ec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2210      	movs	r2, #16
 800a540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b40      	cmp	r3, #64	; 0x40
 800a54e:	f040 8151 	bne.w	800a7f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a96      	ldr	r2, [pc, #600]	; (800a7b4 <HAL_UART_IRQHandler+0x564>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d068      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a93      	ldr	r2, [pc, #588]	; (800a7b8 <HAL_UART_IRQHandler+0x568>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d061      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a91      	ldr	r2, [pc, #580]	; (800a7bc <HAL_UART_IRQHandler+0x56c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d05a      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a8e      	ldr	r2, [pc, #568]	; (800a7c0 <HAL_UART_IRQHandler+0x570>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d053      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a8c      	ldr	r2, [pc, #560]	; (800a7c4 <HAL_UART_IRQHandler+0x574>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d04c      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a89      	ldr	r2, [pc, #548]	; (800a7c8 <HAL_UART_IRQHandler+0x578>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d045      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a87      	ldr	r2, [pc, #540]	; (800a7cc <HAL_UART_IRQHandler+0x57c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d03e      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a84      	ldr	r2, [pc, #528]	; (800a7d0 <HAL_UART_IRQHandler+0x580>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d037      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a82      	ldr	r2, [pc, #520]	; (800a7d4 <HAL_UART_IRQHandler+0x584>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d030      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a7f      	ldr	r2, [pc, #508]	; (800a7d8 <HAL_UART_IRQHandler+0x588>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d029      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a7d      	ldr	r2, [pc, #500]	; (800a7dc <HAL_UART_IRQHandler+0x58c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d022      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a7a      	ldr	r2, [pc, #488]	; (800a7e0 <HAL_UART_IRQHandler+0x590>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d01b      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a78      	ldr	r2, [pc, #480]	; (800a7e4 <HAL_UART_IRQHandler+0x594>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d014      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a75      	ldr	r2, [pc, #468]	; (800a7e8 <HAL_UART_IRQHandler+0x598>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00d      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a73      	ldr	r2, [pc, #460]	; (800a7ec <HAL_UART_IRQHandler+0x59c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d006      	beq.n	800a632 <HAL_UART_IRQHandler+0x3e2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a70      	ldr	r2, [pc, #448]	; (800a7f0 <HAL_UART_IRQHandler+0x5a0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d106      	bne.n	800a640 <HAL_UART_IRQHandler+0x3f0>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	e005      	b.n	800a64c <HAL_UART_IRQHandler+0x3fc>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 81ab 	beq.w	800a9b0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a664:	429a      	cmp	r2, r3
 800a666:	f080 81a3 	bcs.w	800a9b0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a680:	f000 8087 	beq.w	800a792 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1da      	bne.n	800a684 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3308      	adds	r3, #8
 800a6d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6d8:	e853 3f00 	ldrex	r3, [r3]
 800a6dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e1      	bne.n	800a6ce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a71a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a71c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3308      	adds	r3, #8
 800a72a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a72e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a730:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a734:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e3      	bne.n	800a70a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a75e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a760:	f023 0310 	bic.w	r3, r3, #16
 800a764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a772:	65bb      	str	r3, [r7, #88]	; 0x58
 800a774:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e4      	bne.n	800a750 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f8 fc65 	bl	800305c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7f6 fa97 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7b2:	e0fd      	b.n	800a9b0 <HAL_UART_IRQHandler+0x760>
 800a7b4:	40020010 	.word	0x40020010
 800a7b8:	40020028 	.word	0x40020028
 800a7bc:	40020040 	.word	0x40020040
 800a7c0:	40020058 	.word	0x40020058
 800a7c4:	40020070 	.word	0x40020070
 800a7c8:	40020088 	.word	0x40020088
 800a7cc:	400200a0 	.word	0x400200a0
 800a7d0:	400200b8 	.word	0x400200b8
 800a7d4:	40020410 	.word	0x40020410
 800a7d8:	40020428 	.word	0x40020428
 800a7dc:	40020440 	.word	0x40020440
 800a7e0:	40020458 	.word	0x40020458
 800a7e4:	40020470 	.word	0x40020470
 800a7e8:	40020488 	.word	0x40020488
 800a7ec:	400204a0 	.word	0x400204a0
 800a7f0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a800:	b29b      	uxth	r3, r3
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a80e:	b29b      	uxth	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80cf 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 80ca 	beq.w	800a9b4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a842:	647b      	str	r3, [r7, #68]	; 0x44
 800a844:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e4      	bne.n	800a820 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3308      	adds	r3, #8
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	623b      	str	r3, [r7, #32]
   return(result);
 800a866:	6a3a      	ldr	r2, [r7, #32]
 800a868:	4b55      	ldr	r3, [pc, #340]	; (800a9c0 <HAL_UART_IRQHandler+0x770>)
 800a86a:	4013      	ands	r3, r2
 800a86c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3308      	adds	r3, #8
 800a876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a87a:	633a      	str	r2, [r7, #48]	; 0x30
 800a87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e3      	bne.n	800a856 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0310 	bic.w	r3, r3, #16
 800a8b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8c4:	61fb      	str	r3, [r7, #28]
 800a8c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	69b9      	ldr	r1, [r7, #24]
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e4      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7f6 f9fb 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ea:	e063      	b.n	800a9b4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <HAL_UART_IRQHandler+0x6c6>
 800a8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d008      	beq.n	800a916 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a90c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f002 f8b6 	bl	800ca80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a914:	e051      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d014      	beq.n	800a94c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a92e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d008      	beq.n	800a94c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d03a      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
    }
    return;
 800a94a:	e035      	b.n	800a9b8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a954:	2b00      	cmp	r3, #0
 800a956:	d009      	beq.n	800a96c <HAL_UART_IRQHandler+0x71c>
 800a958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 fb43 	bl	800bff0 <UART_EndTransmit_IT>
    return;
 800a96a:	e026      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d009      	beq.n	800a98c <HAL_UART_IRQHandler+0x73c>
 800a978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a97c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f002 f88f 	bl	800caa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a98a:	e016      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_UART_IRQHandler+0x76a>
 800a998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da0c      	bge.n	800a9ba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f002 f877 	bl	800ca94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9a6:	e008      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9a8:	bf00      	nop
 800a9aa:	e006      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
    return;
 800a9ac:	bf00      	nop
 800a9ae:	e004      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9b0:	bf00      	nop
 800a9b2:	e002      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
      return;
 800a9b4:	bf00      	nop
 800a9b6:	e000      	b.n	800a9ba <HAL_UART_IRQHandler+0x76a>
    return;
 800a9b8:	bf00      	nop
  }
}
 800a9ba:	37e8      	adds	r7, #232	; 0xe8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	effffffe 	.word	0xeffffffe

0800a9c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa18:	b092      	sub	sp, #72	; 0x48
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	431a      	orrs	r2, r3
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4bbe      	ldr	r3, [pc, #760]	; (800ad3c <UART_SetConfig+0x328>)
 800aa44:	4013      	ands	r3, r2
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	6812      	ldr	r2, [r2, #0]
 800aa4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4ab3      	ldr	r2, [pc, #716]	; (800ad40 <UART_SetConfig+0x32c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	4baf      	ldr	r3, [pc, #700]	; (800ad44 <UART_SetConfig+0x330>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	f023 010f 	bic.w	r1, r3, #15
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4aa6      	ldr	r2, [pc, #664]	; (800ad48 <UART_SetConfig+0x334>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d177      	bne.n	800aba4 <UART_SetConfig+0x190>
 800aab4:	4ba5      	ldr	r3, [pc, #660]	; (800ad4c <UART_SetConfig+0x338>)
 800aab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aabc:	2b28      	cmp	r3, #40	; 0x28
 800aabe:	d86d      	bhi.n	800ab9c <UART_SetConfig+0x188>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0xb4>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800ab6d 	.word	0x0800ab6d
 800aacc:	0800ab9d 	.word	0x0800ab9d
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800ab9d 	.word	0x0800ab9d
 800aad8:	0800ab9d 	.word	0x0800ab9d
 800aadc:	0800ab9d 	.word	0x0800ab9d
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800ab9d 	.word	0x0800ab9d
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab9d 	.word	0x0800ab9d
 800aaf0:	0800ab9d 	.word	0x0800ab9d
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab9d 	.word	0x0800ab9d
 800ab08:	0800ab7d 	.word	0x0800ab7d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800ab85 	.word	0x0800ab85
 800ab2c:	0800ab9d 	.word	0x0800ab9d
 800ab30:	0800ab9d 	.word	0x0800ab9d
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab9d 	.word	0x0800ab9d
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab9d 	.word	0x0800ab9d
 800ab50:	0800ab9d 	.word	0x0800ab9d
 800ab54:	0800ab9d 	.word	0x0800ab9d
 800ab58:	0800ab9d 	.word	0x0800ab9d
 800ab5c:	0800ab9d 	.word	0x0800ab9d
 800ab60:	0800ab9d 	.word	0x0800ab9d
 800ab64:	0800ab9d 	.word	0x0800ab9d
 800ab68:	0800ab95 	.word	0x0800ab95
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e222      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab74:	2304      	movs	r3, #4
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e21e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e21a      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e216      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e212      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab94:	2340      	movs	r3, #64	; 0x40
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e20e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ab9c:	2380      	movs	r3, #128	; 0x80
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e20a      	b.n	800afba <UART_SetConfig+0x5a6>
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a69      	ldr	r2, [pc, #420]	; (800ad50 <UART_SetConfig+0x33c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d130      	bne.n	800ac10 <UART_SetConfig+0x1fc>
 800abae:	4b67      	ldr	r3, [pc, #412]	; (800ad4c <UART_SetConfig+0x338>)
 800abb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d826      	bhi.n	800ac08 <UART_SetConfig+0x1f4>
 800abba:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <UART_SetConfig+0x1ac>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abde:	e1ec      	b.n	800afba <UART_SetConfig+0x5a6>
 800abe0:	2304      	movs	r3, #4
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abe6:	e1e8      	b.n	800afba <UART_SetConfig+0x5a6>
 800abe8:	2308      	movs	r3, #8
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abee:	e1e4      	b.n	800afba <UART_SetConfig+0x5a6>
 800abf0:	2310      	movs	r3, #16
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf6:	e1e0      	b.n	800afba <UART_SetConfig+0x5a6>
 800abf8:	2320      	movs	r3, #32
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e1dc      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac06:	e1d8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac08:	2380      	movs	r3, #128	; 0x80
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e1d4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a4f      	ldr	r2, [pc, #316]	; (800ad54 <UART_SetConfig+0x340>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d130      	bne.n	800ac7c <UART_SetConfig+0x268>
 800ac1a:	4b4c      	ldr	r3, [pc, #304]	; (800ad4c <UART_SetConfig+0x338>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d826      	bhi.n	800ac74 <UART_SetConfig+0x260>
 800ac26:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <UART_SetConfig+0x218>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac45 	.word	0x0800ac45
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	0800ac55 	.word	0x0800ac55
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e1b6      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e1b2      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e1ae      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e1aa      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e1a6      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac72:	e1a2      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7a:	e19e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a35      	ldr	r2, [pc, #212]	; (800ad58 <UART_SetConfig+0x344>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x2d4>
 800ac86:	4b31      	ldr	r3, [pc, #196]	; (800ad4c <UART_SetConfig+0x338>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x2cc>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <UART_SetConfig+0x284>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e180      	b.n	800afba <UART_SetConfig+0x5a6>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e17c      	b.n	800afba <UART_SetConfig+0x5a6>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e178      	b.n	800afba <UART_SetConfig+0x5a6>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e174      	b.n	800afba <UART_SetConfig+0x5a6>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e170      	b.n	800afba <UART_SetConfig+0x5a6>
 800acd8:	2340      	movs	r3, #64	; 0x40
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e16c      	b.n	800afba <UART_SetConfig+0x5a6>
 800ace0:	2380      	movs	r3, #128	; 0x80
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace6:	e168      	b.n	800afba <UART_SetConfig+0x5a6>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1b      	ldr	r2, [pc, #108]	; (800ad5c <UART_SetConfig+0x348>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d142      	bne.n	800ad78 <UART_SetConfig+0x364>
 800acf2:	4b16      	ldr	r3, [pc, #88]	; (800ad4c <UART_SetConfig+0x338>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d838      	bhi.n	800ad70 <UART_SetConfig+0x35c>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <UART_SetConfig+0x2f0>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad2d 	.word	0x0800ad2d
 800ad10:	0800ad35 	.word	0x0800ad35
 800ad14:	0800ad61 	.word	0x0800ad61
 800ad18:	0800ad69 	.word	0x0800ad69
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e14a      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e146      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e142      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3a:	e13e      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad3c:	cfff69f3 	.word	0xcfff69f3
 800ad40:	58000c00 	.word	0x58000c00
 800ad44:	11fff4ff 	.word	0x11fff4ff
 800ad48:	40011000 	.word	0x40011000
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	40004400 	.word	0x40004400
 800ad54:	40004800 	.word	0x40004800
 800ad58:	40004c00 	.word	0x40004c00
 800ad5c:	40005000 	.word	0x40005000
 800ad60:	2320      	movs	r3, #32
 800ad62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad66:	e128      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad68:	2340      	movs	r3, #64	; 0x40
 800ad6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad6e:	e124      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad70:	2380      	movs	r3, #128	; 0x80
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad76:	e120      	b.n	800afba <UART_SetConfig+0x5a6>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4acb      	ldr	r2, [pc, #812]	; (800b0ac <UART_SetConfig+0x698>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d176      	bne.n	800ae70 <UART_SetConfig+0x45c>
 800ad82:	4bcb      	ldr	r3, [pc, #812]	; (800b0b0 <UART_SetConfig+0x69c>)
 800ad84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad8a:	2b28      	cmp	r3, #40	; 0x28
 800ad8c:	d86c      	bhi.n	800ae68 <UART_SetConfig+0x454>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <UART_SetConfig+0x380>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ae39 	.word	0x0800ae39
 800ad98:	0800ae69 	.word	0x0800ae69
 800ad9c:	0800ae69 	.word	0x0800ae69
 800ada0:	0800ae69 	.word	0x0800ae69
 800ada4:	0800ae69 	.word	0x0800ae69
 800ada8:	0800ae69 	.word	0x0800ae69
 800adac:	0800ae69 	.word	0x0800ae69
 800adb0:	0800ae69 	.word	0x0800ae69
 800adb4:	0800ae41 	.word	0x0800ae41
 800adb8:	0800ae69 	.word	0x0800ae69
 800adbc:	0800ae69 	.word	0x0800ae69
 800adc0:	0800ae69 	.word	0x0800ae69
 800adc4:	0800ae69 	.word	0x0800ae69
 800adc8:	0800ae69 	.word	0x0800ae69
 800adcc:	0800ae69 	.word	0x0800ae69
 800add0:	0800ae69 	.word	0x0800ae69
 800add4:	0800ae49 	.word	0x0800ae49
 800add8:	0800ae69 	.word	0x0800ae69
 800addc:	0800ae69 	.word	0x0800ae69
 800ade0:	0800ae69 	.word	0x0800ae69
 800ade4:	0800ae69 	.word	0x0800ae69
 800ade8:	0800ae69 	.word	0x0800ae69
 800adec:	0800ae69 	.word	0x0800ae69
 800adf0:	0800ae69 	.word	0x0800ae69
 800adf4:	0800ae51 	.word	0x0800ae51
 800adf8:	0800ae69 	.word	0x0800ae69
 800adfc:	0800ae69 	.word	0x0800ae69
 800ae00:	0800ae69 	.word	0x0800ae69
 800ae04:	0800ae69 	.word	0x0800ae69
 800ae08:	0800ae69 	.word	0x0800ae69
 800ae0c:	0800ae69 	.word	0x0800ae69
 800ae10:	0800ae69 	.word	0x0800ae69
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae69 	.word	0x0800ae69
 800ae1c:	0800ae69 	.word	0x0800ae69
 800ae20:	0800ae69 	.word	0x0800ae69
 800ae24:	0800ae69 	.word	0x0800ae69
 800ae28:	0800ae69 	.word	0x0800ae69
 800ae2c:	0800ae69 	.word	0x0800ae69
 800ae30:	0800ae69 	.word	0x0800ae69
 800ae34:	0800ae61 	.word	0x0800ae61
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3e:	e0bc      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae40:	2304      	movs	r3, #4
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae46:	e0b8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae48:	2308      	movs	r3, #8
 800ae4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae4e:	e0b4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae50:	2310      	movs	r3, #16
 800ae52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae56:	e0b0      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5e:	e0ac      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae66:	e0a8      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6e:	e0a4      	b.n	800afba <UART_SetConfig+0x5a6>
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a8f      	ldr	r2, [pc, #572]	; (800b0b4 <UART_SetConfig+0x6a0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d130      	bne.n	800aedc <UART_SetConfig+0x4c8>
 800ae7a:	4b8d      	ldr	r3, [pc, #564]	; (800b0b0 <UART_SetConfig+0x69c>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d826      	bhi.n	800aed4 <UART_SetConfig+0x4c0>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <UART_SetConfig+0x478>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800aea5 	.word	0x0800aea5
 800ae90:	0800aead 	.word	0x0800aead
 800ae94:	0800aeb5 	.word	0x0800aeb5
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aec5 	.word	0x0800aec5
 800aea0:	0800aecd 	.word	0x0800aecd
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e086      	b.n	800afba <UART_SetConfig+0x5a6>
 800aeac:	2304      	movs	r3, #4
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e082      	b.n	800afba <UART_SetConfig+0x5a6>
 800aeb4:	2308      	movs	r3, #8
 800aeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeba:	e07e      	b.n	800afba <UART_SetConfig+0x5a6>
 800aebc:	2310      	movs	r3, #16
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e07a      	b.n	800afba <UART_SetConfig+0x5a6>
 800aec4:	2320      	movs	r3, #32
 800aec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeca:	e076      	b.n	800afba <UART_SetConfig+0x5a6>
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed2:	e072      	b.n	800afba <UART_SetConfig+0x5a6>
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeda:	e06e      	b.n	800afba <UART_SetConfig+0x5a6>
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a75      	ldr	r2, [pc, #468]	; (800b0b8 <UART_SetConfig+0x6a4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d130      	bne.n	800af48 <UART_SetConfig+0x534>
 800aee6:	4b72      	ldr	r3, [pc, #456]	; (800b0b0 <UART_SetConfig+0x69c>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d826      	bhi.n	800af40 <UART_SetConfig+0x52c>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <UART_SetConfig+0x4e4>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af11 	.word	0x0800af11
 800aefc:	0800af19 	.word	0x0800af19
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af31 	.word	0x0800af31
 800af0c:	0800af39 	.word	0x0800af39
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e050      	b.n	800afba <UART_SetConfig+0x5a6>
 800af18:	2304      	movs	r3, #4
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e04c      	b.n	800afba <UART_SetConfig+0x5a6>
 800af20:	2308      	movs	r3, #8
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af26:	e048      	b.n	800afba <UART_SetConfig+0x5a6>
 800af28:	2310      	movs	r3, #16
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e044      	b.n	800afba <UART_SetConfig+0x5a6>
 800af30:	2320      	movs	r3, #32
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e040      	b.n	800afba <UART_SetConfig+0x5a6>
 800af38:	2340      	movs	r3, #64	; 0x40
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3e:	e03c      	b.n	800afba <UART_SetConfig+0x5a6>
 800af40:	2380      	movs	r3, #128	; 0x80
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af46:	e038      	b.n	800afba <UART_SetConfig+0x5a6>
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a5b      	ldr	r2, [pc, #364]	; (800b0bc <UART_SetConfig+0x6a8>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d130      	bne.n	800afb4 <UART_SetConfig+0x5a0>
 800af52:	4b57      	ldr	r3, [pc, #348]	; (800b0b0 <UART_SetConfig+0x69c>)
 800af54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d826      	bhi.n	800afac <UART_SetConfig+0x598>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <UART_SetConfig+0x550>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800af7d 	.word	0x0800af7d
 800af68:	0800af85 	.word	0x0800af85
 800af6c:	0800af8d 	.word	0x0800af8d
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800af9d 	.word	0x0800af9d
 800af78:	0800afa5 	.word	0x0800afa5
 800af7c:	2302      	movs	r3, #2
 800af7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af82:	e01a      	b.n	800afba <UART_SetConfig+0x5a6>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8a:	e016      	b.n	800afba <UART_SetConfig+0x5a6>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af92:	e012      	b.n	800afba <UART_SetConfig+0x5a6>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e00e      	b.n	800afba <UART_SetConfig+0x5a6>
 800af9c:	2320      	movs	r3, #32
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e00a      	b.n	800afba <UART_SetConfig+0x5a6>
 800afa4:	2340      	movs	r3, #64	; 0x40
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e006      	b.n	800afba <UART_SetConfig+0x5a6>
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e002      	b.n	800afba <UART_SetConfig+0x5a6>
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a3f      	ldr	r2, [pc, #252]	; (800b0bc <UART_SetConfig+0x6a8>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	f040 80f8 	bne.w	800b1b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afca:	2b20      	cmp	r3, #32
 800afcc:	dc46      	bgt.n	800b05c <UART_SetConfig+0x648>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	f2c0 8082 	blt.w	800b0d8 <UART_SetConfig+0x6c4>
 800afd4:	3b02      	subs	r3, #2
 800afd6:	2b1e      	cmp	r3, #30
 800afd8:	d87e      	bhi.n	800b0d8 <UART_SetConfig+0x6c4>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <UART_SetConfig+0x5cc>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b063 	.word	0x0800b063
 800afe4:	0800b0d9 	.word	0x0800b0d9
 800afe8:	0800b06b 	.word	0x0800b06b
 800afec:	0800b0d9 	.word	0x0800b0d9
 800aff0:	0800b0d9 	.word	0x0800b0d9
 800aff4:	0800b0d9 	.word	0x0800b0d9
 800aff8:	0800b07b 	.word	0x0800b07b
 800affc:	0800b0d9 	.word	0x0800b0d9
 800b000:	0800b0d9 	.word	0x0800b0d9
 800b004:	0800b0d9 	.word	0x0800b0d9
 800b008:	0800b0d9 	.word	0x0800b0d9
 800b00c:	0800b0d9 	.word	0x0800b0d9
 800b010:	0800b0d9 	.word	0x0800b0d9
 800b014:	0800b0d9 	.word	0x0800b0d9
 800b018:	0800b08b 	.word	0x0800b08b
 800b01c:	0800b0d9 	.word	0x0800b0d9
 800b020:	0800b0d9 	.word	0x0800b0d9
 800b024:	0800b0d9 	.word	0x0800b0d9
 800b028:	0800b0d9 	.word	0x0800b0d9
 800b02c:	0800b0d9 	.word	0x0800b0d9
 800b030:	0800b0d9 	.word	0x0800b0d9
 800b034:	0800b0d9 	.word	0x0800b0d9
 800b038:	0800b0d9 	.word	0x0800b0d9
 800b03c:	0800b0d9 	.word	0x0800b0d9
 800b040:	0800b0d9 	.word	0x0800b0d9
 800b044:	0800b0d9 	.word	0x0800b0d9
 800b048:	0800b0d9 	.word	0x0800b0d9
 800b04c:	0800b0d9 	.word	0x0800b0d9
 800b050:	0800b0d9 	.word	0x0800b0d9
 800b054:	0800b0d9 	.word	0x0800b0d9
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	2b40      	cmp	r3, #64	; 0x40
 800b05e:	d037      	beq.n	800b0d0 <UART_SetConfig+0x6bc>
 800b060:	e03a      	b.n	800b0d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b062:	f7fe f803 	bl	800906c <HAL_RCCEx_GetD3PCLK1Freq>
 800b066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b068:	e03c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b06a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe f812 	bl	8009098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b078:	e034      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe f95e 	bl	8009340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b088:	e02c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <UART_SetConfig+0x69c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d016      	beq.n	800b0c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b096:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <UART_SetConfig+0x69c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	4a07      	ldr	r2, [pc, #28]	; (800b0c0 <UART_SetConfig+0x6ac>)
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0a8:	e01c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
 800b0aa:	bf00      	nop
 800b0ac:	40011400 	.word	0x40011400
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	40007800 	.word	0x40007800
 800b0b8:	40007c00 	.word	0x40007c00
 800b0bc:	58000c00 	.word	0x58000c00
 800b0c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b0c4:	4b9d      	ldr	r3, [pc, #628]	; (800b33c <UART_SetConfig+0x928>)
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c8:	e00c      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0ca:	4b9d      	ldr	r3, [pc, #628]	; (800b340 <UART_SetConfig+0x92c>)
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ce:	e009      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d6:	e005      	b.n	800b0e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 81de 	beq.w	800b4a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	4a94      	ldr	r2, [pc, #592]	; (800b344 <UART_SetConfig+0x930>)
 800b0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d305      	bcc.n	800b11c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b118:	429a      	cmp	r2, r3
 800b11a:	d903      	bls.n	800b124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b122:	e1c1      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b126:	2200      	movs	r2, #0
 800b128:	60bb      	str	r3, [r7, #8]
 800b12a:	60fa      	str	r2, [r7, #12]
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	4a84      	ldr	r2, [pc, #528]	; (800b344 <UART_SetConfig+0x930>)
 800b132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b136:	b29b      	uxth	r3, r3
 800b138:	2200      	movs	r2, #0
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b146:	f7f5 fadf 	bl	8000708 <__aeabi_uldivmod>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4610      	mov	r0, r2
 800b150:	4619      	mov	r1, r3
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	f04f 0300 	mov.w	r3, #0
 800b15a:	020b      	lsls	r3, r1, #8
 800b15c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b160:	0202      	lsls	r2, r0, #8
 800b162:	6979      	ldr	r1, [r7, #20]
 800b164:	6849      	ldr	r1, [r1, #4]
 800b166:	0849      	lsrs	r1, r1, #1
 800b168:	2000      	movs	r0, #0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4605      	mov	r5, r0
 800b16e:	eb12 0804 	adds.w	r8, r2, r4
 800b172:	eb43 0905 	adc.w	r9, r3, r5
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	469a      	mov	sl, r3
 800b17e:	4693      	mov	fp, r2
 800b180:	4652      	mov	r2, sl
 800b182:	465b      	mov	r3, fp
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 fabe 	bl	8000708 <__aeabi_uldivmod>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4613      	mov	r3, r2
 800b192:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b19a:	d308      	bcc.n	800b1ae <UART_SetConfig+0x79a>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a2:	d204      	bcs.n	800b1ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1aa:	60da      	str	r2, [r3, #12]
 800b1ac:	e17c      	b.n	800b4a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b1b4:	e178      	b.n	800b4a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1be:	f040 80c5 	bne.w	800b34c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b1c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	dc48      	bgt.n	800b25c <UART_SetConfig+0x848>
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	db7b      	blt.n	800b2c6 <UART_SetConfig+0x8b2>
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d879      	bhi.n	800b2c6 <UART_SetConfig+0x8b2>
 800b1d2:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <UART_SetConfig+0x7c4>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b263 	.word	0x0800b263
 800b1dc:	0800b26b 	.word	0x0800b26b
 800b1e0:	0800b2c7 	.word	0x0800b2c7
 800b1e4:	0800b2c7 	.word	0x0800b2c7
 800b1e8:	0800b273 	.word	0x0800b273
 800b1ec:	0800b2c7 	.word	0x0800b2c7
 800b1f0:	0800b2c7 	.word	0x0800b2c7
 800b1f4:	0800b2c7 	.word	0x0800b2c7
 800b1f8:	0800b283 	.word	0x0800b283
 800b1fc:	0800b2c7 	.word	0x0800b2c7
 800b200:	0800b2c7 	.word	0x0800b2c7
 800b204:	0800b2c7 	.word	0x0800b2c7
 800b208:	0800b2c7 	.word	0x0800b2c7
 800b20c:	0800b2c7 	.word	0x0800b2c7
 800b210:	0800b2c7 	.word	0x0800b2c7
 800b214:	0800b2c7 	.word	0x0800b2c7
 800b218:	0800b293 	.word	0x0800b293
 800b21c:	0800b2c7 	.word	0x0800b2c7
 800b220:	0800b2c7 	.word	0x0800b2c7
 800b224:	0800b2c7 	.word	0x0800b2c7
 800b228:	0800b2c7 	.word	0x0800b2c7
 800b22c:	0800b2c7 	.word	0x0800b2c7
 800b230:	0800b2c7 	.word	0x0800b2c7
 800b234:	0800b2c7 	.word	0x0800b2c7
 800b238:	0800b2c7 	.word	0x0800b2c7
 800b23c:	0800b2c7 	.word	0x0800b2c7
 800b240:	0800b2c7 	.word	0x0800b2c7
 800b244:	0800b2c7 	.word	0x0800b2c7
 800b248:	0800b2c7 	.word	0x0800b2c7
 800b24c:	0800b2c7 	.word	0x0800b2c7
 800b250:	0800b2c7 	.word	0x0800b2c7
 800b254:	0800b2c7 	.word	0x0800b2c7
 800b258:	0800b2b9 	.word	0x0800b2b9
 800b25c:	2b40      	cmp	r3, #64	; 0x40
 800b25e:	d02e      	beq.n	800b2be <UART_SetConfig+0x8aa>
 800b260:	e031      	b.n	800b2c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b262:	f7fc fc8b 	bl	8007b7c <HAL_RCC_GetPCLK1Freq>
 800b266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b268:	e033      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b26a:	f7fc fc9d 	bl	8007ba8 <HAL_RCC_GetPCLK2Freq>
 800b26e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b270:	e02f      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b276:	4618      	mov	r0, r3
 800b278:	f7fd ff0e 	bl	8009098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b280:	e027      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b282:	f107 0318 	add.w	r3, r7, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe f85a 	bl	8009340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b290:	e01f      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b292:	4b2d      	ldr	r3, [pc, #180]	; (800b348 <UART_SetConfig+0x934>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d009      	beq.n	800b2b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b29e:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <UART_SetConfig+0x934>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	08db      	lsrs	r3, r3, #3
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	4a24      	ldr	r2, [pc, #144]	; (800b33c <UART_SetConfig+0x928>)
 800b2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2b0:	e00f      	b.n	800b2d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2b2:	4b22      	ldr	r3, [pc, #136]	; (800b33c <UART_SetConfig+0x928>)
 800b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b6:	e00c      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2b8:	4b21      	ldr	r3, [pc, #132]	; (800b340 <UART_SetConfig+0x92c>)
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2bc:	e009      	b.n	800b2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c4:	e005      	b.n	800b2d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b2d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 80e7 	beq.w	800b4a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	4a19      	ldr	r2, [pc, #100]	; (800b344 <UART_SetConfig+0x930>)
 800b2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2ec:	005a      	lsls	r2, r3, #1
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	441a      	add	r2, r3
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	2b0f      	cmp	r3, #15
 800b304:	d916      	bls.n	800b334 <UART_SetConfig+0x920>
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b30c:	d212      	bcs.n	800b334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b310:	b29b      	uxth	r3, r3
 800b312:	f023 030f 	bic.w	r3, r3, #15
 800b316:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	b29a      	uxth	r2, r3
 800b324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b326:	4313      	orrs	r3, r2
 800b328:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b330:	60da      	str	r2, [r3, #12]
 800b332:	e0b9      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b33a:	e0b5      	b.n	800b4a8 <UART_SetConfig+0xa94>
 800b33c:	03d09000 	.word	0x03d09000
 800b340:	003d0900 	.word	0x003d0900
 800b344:	080204bc 	.word	0x080204bc
 800b348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b34c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b350:	2b20      	cmp	r3, #32
 800b352:	dc49      	bgt.n	800b3e8 <UART_SetConfig+0x9d4>
 800b354:	2b00      	cmp	r3, #0
 800b356:	db7c      	blt.n	800b452 <UART_SetConfig+0xa3e>
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d87a      	bhi.n	800b452 <UART_SetConfig+0xa3e>
 800b35c:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <UART_SetConfig+0x950>)
 800b35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b362:	bf00      	nop
 800b364:	0800b3ef 	.word	0x0800b3ef
 800b368:	0800b3f7 	.word	0x0800b3f7
 800b36c:	0800b453 	.word	0x0800b453
 800b370:	0800b453 	.word	0x0800b453
 800b374:	0800b3ff 	.word	0x0800b3ff
 800b378:	0800b453 	.word	0x0800b453
 800b37c:	0800b453 	.word	0x0800b453
 800b380:	0800b453 	.word	0x0800b453
 800b384:	0800b40f 	.word	0x0800b40f
 800b388:	0800b453 	.word	0x0800b453
 800b38c:	0800b453 	.word	0x0800b453
 800b390:	0800b453 	.word	0x0800b453
 800b394:	0800b453 	.word	0x0800b453
 800b398:	0800b453 	.word	0x0800b453
 800b39c:	0800b453 	.word	0x0800b453
 800b3a0:	0800b453 	.word	0x0800b453
 800b3a4:	0800b41f 	.word	0x0800b41f
 800b3a8:	0800b453 	.word	0x0800b453
 800b3ac:	0800b453 	.word	0x0800b453
 800b3b0:	0800b453 	.word	0x0800b453
 800b3b4:	0800b453 	.word	0x0800b453
 800b3b8:	0800b453 	.word	0x0800b453
 800b3bc:	0800b453 	.word	0x0800b453
 800b3c0:	0800b453 	.word	0x0800b453
 800b3c4:	0800b453 	.word	0x0800b453
 800b3c8:	0800b453 	.word	0x0800b453
 800b3cc:	0800b453 	.word	0x0800b453
 800b3d0:	0800b453 	.word	0x0800b453
 800b3d4:	0800b453 	.word	0x0800b453
 800b3d8:	0800b453 	.word	0x0800b453
 800b3dc:	0800b453 	.word	0x0800b453
 800b3e0:	0800b453 	.word	0x0800b453
 800b3e4:	0800b445 	.word	0x0800b445
 800b3e8:	2b40      	cmp	r3, #64	; 0x40
 800b3ea:	d02e      	beq.n	800b44a <UART_SetConfig+0xa36>
 800b3ec:	e031      	b.n	800b452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3ee:	f7fc fbc5 	bl	8007b7c <HAL_RCC_GetPCLK1Freq>
 800b3f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3f4:	e033      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3f6:	f7fc fbd7 	bl	8007ba8 <HAL_RCC_GetPCLK2Freq>
 800b3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b3fc:	e02f      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b402:	4618      	mov	r0, r3
 800b404:	f7fd fe48 	bl	8009098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40c:	e027      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b40e:	f107 0318 	add.w	r3, r7, #24
 800b412:	4618      	mov	r0, r3
 800b414:	f7fd ff94 	bl	8009340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b41c:	e01f      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41e:	4b2d      	ldr	r3, [pc, #180]	; (800b4d4 <UART_SetConfig+0xac0>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0320 	and.w	r3, r3, #32
 800b426:	2b00      	cmp	r3, #0
 800b428:	d009      	beq.n	800b43e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b42a:	4b2a      	ldr	r3, [pc, #168]	; (800b4d4 <UART_SetConfig+0xac0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	08db      	lsrs	r3, r3, #3
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	4a28      	ldr	r2, [pc, #160]	; (800b4d8 <UART_SetConfig+0xac4>)
 800b436:	fa22 f303 	lsr.w	r3, r2, r3
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b43c:	e00f      	b.n	800b45e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b43e:	4b26      	ldr	r3, [pc, #152]	; (800b4d8 <UART_SetConfig+0xac4>)
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b442:	e00c      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b444:	4b25      	ldr	r3, [pc, #148]	; (800b4dc <UART_SetConfig+0xac8>)
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b448:	e009      	b.n	800b45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b450:	e005      	b.n	800b45e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b45c:	bf00      	nop
    }

    if (pclk != 0U)
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d021      	beq.n	800b4a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	4a1d      	ldr	r2, [pc, #116]	; (800b4e0 <UART_SetConfig+0xacc>)
 800b46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b46e:	461a      	mov	r2, r3
 800b470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b472:	fbb3 f2f2 	udiv	r2, r3, r2
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	441a      	add	r2, r3
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	fbb2 f3f3 	udiv	r3, r2, r3
 800b486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	2b0f      	cmp	r3, #15
 800b48c:	d909      	bls.n	800b4a2 <UART_SetConfig+0xa8e>
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b494:	d205      	bcs.n	800b4a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	b29a      	uxth	r2, r3
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60da      	str	r2, [r3, #12]
 800b4a0:	e002      	b.n	800b4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b4c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3748      	adds	r7, #72	; 0x48
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4d2:	bf00      	nop
 800b4d4:	58024400 	.word	0x58024400
 800b4d8:	03d09000 	.word	0x03d09000
 800b4dc:	003d0900 	.word	0x003d0900
 800b4e0:	080204bc 	.word	0x080204bc

0800b4e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f0:	f003 0301 	and.w	r3, r3, #1
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00a      	beq.n	800b50e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	430a      	orrs	r2, r1
 800b50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	f003 0308 	and.w	r3, r3, #8
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b59a:	f003 0320 	and.w	r3, r3, #32
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00a      	beq.n	800b5b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01a      	beq.n	800b5fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5e2:	d10a      	bne.n	800b5fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	605a      	str	r2, [r3, #4]
  }
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b098      	sub	sp, #96	; 0x60
 800b62c:	af02      	add	r7, sp, #8
 800b62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b638:	f7f6 fe1a 	bl	8002270 <HAL_GetTick>
 800b63c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0308 	and.w	r3, r3, #8
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d12f      	bne.n	800b6ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b64c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	2200      	movs	r2, #0
 800b656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f88e 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d022      	beq.n	800b6ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	e853 3f00 	ldrex	r3, [r3]
 800b672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b67a:	653b      	str	r3, [r7, #80]	; 0x50
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b684:	647b      	str	r3, [r7, #68]	; 0x44
 800b686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e6      	bne.n	800b666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e063      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0304 	and.w	r3, r3, #4
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d149      	bne.n	800b74e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6be:	9300      	str	r3, [sp, #0]
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f857 	bl	800b77c <UART_WaitOnFlagUntilTimeout>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d03c      	beq.n	800b74e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f2:	633b      	str	r3, [r7, #48]	; 0x30
 800b6f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e6      	bne.n	800b6d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	60fb      	str	r3, [r7, #12]
   return(result);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b726:	61fa      	str	r2, [r7, #28]
 800b728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	69b9      	ldr	r1, [r7, #24]
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	617b      	str	r3, [r7, #20]
   return(result);
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e5      	bne.n	800b706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e012      	b.n	800b774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3758      	adds	r7, #88	; 0x58
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	603b      	str	r3, [r7, #0]
 800b788:	4613      	mov	r3, r2
 800b78a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b78c:	e049      	b.n	800b822 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d045      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b796:	f7f6 fd6b 	bl	8002270 <HAL_GetTick>
 800b79a:	4602      	mov	r2, r0
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d302      	bcc.n	800b7ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d101      	bne.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e048      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0304 	and.w	r3, r3, #4
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d031      	beq.n	800b822 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d110      	bne.n	800b7ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f000 fa43 	bl	800bc60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2208      	movs	r2, #8
 800b7de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e029      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7fc:	d111      	bne.n	800b822 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 fa29 	bl	800bc60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2220      	movs	r2, #32
 800b812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e00f      	b.n	800b842 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	4013      	ands	r3, r2
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	429a      	cmp	r2, r3
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d0a6      	beq.n	800b78e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b0a3      	sub	sp, #140	; 0x8c
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	88fa      	ldrh	r2, [r7, #6]
 800b86c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b87e:	d10e      	bne.n	800b89e <UART_Start_Receive_IT+0x52>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d105      	bne.n	800b894 <UART_Start_Receive_IT+0x48>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b88e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b892:	e02d      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	22ff      	movs	r2, #255	; 0xff
 800b898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b89c:	e028      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10d      	bne.n	800b8c2 <UART_Start_Receive_IT+0x76>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d104      	bne.n	800b8b8 <UART_Start_Receive_IT+0x6c>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	22ff      	movs	r2, #255	; 0xff
 800b8b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8b6:	e01b      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	227f      	movs	r2, #127	; 0x7f
 800b8bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8c0:	e016      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ca:	d10d      	bne.n	800b8e8 <UART_Start_Receive_IT+0x9c>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <UART_Start_Receive_IT+0x92>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	227f      	movs	r2, #127	; 0x7f
 800b8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8dc:	e008      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	223f      	movs	r2, #63	; 0x3f
 800b8e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8e6:	e003      	b.n	800b8f0 <UART_Start_Receive_IT+0xa4>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2222      	movs	r2, #34	; 0x22
 800b8fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b912:	f043 0301 	orr.w	r3, r3, #1
 800b916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3308      	adds	r3, #8
 800b920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b924:	673a      	str	r2, [r7, #112]	; 0x70
 800b926:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b928:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b92a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b92c:	e841 2300 	strex	r3, r2, [r1]
 800b930:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e3      	bne.n	800b900 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b940:	d14f      	bne.n	800b9e2 <UART_Start_Receive_IT+0x196>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d349      	bcc.n	800b9e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b956:	d107      	bne.n	800b968 <UART_Start_Receive_IT+0x11c>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d103      	bne.n	800b968 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a47      	ldr	r2, [pc, #284]	; (800ba80 <UART_Start_Receive_IT+0x234>)
 800b964:	675a      	str	r2, [r3, #116]	; 0x74
 800b966:	e002      	b.n	800b96e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4a46      	ldr	r2, [pc, #280]	; (800ba84 <UART_Start_Receive_IT+0x238>)
 800b96c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d01a      	beq.n	800b9ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b98a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b99a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b99e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e4      	bne.n	800b976 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b9cc:	64ba      	str	r2, [r7, #72]	; 0x48
 800b9ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e5      	bne.n	800b9ac <UART_Start_Receive_IT+0x160>
 800b9e0:	e046      	b.n	800ba70 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ea:	d107      	bne.n	800b9fc <UART_Start_Receive_IT+0x1b0>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a24      	ldr	r2, [pc, #144]	; (800ba88 <UART_Start_Receive_IT+0x23c>)
 800b9f8:	675a      	str	r2, [r3, #116]	; 0x74
 800b9fa:	e002      	b.n	800ba02 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <UART_Start_Receive_IT+0x240>)
 800ba00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d019      	beq.n	800ba3e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	e853 3f00 	ldrex	r3, [r3]
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ba1e:	677b      	str	r3, [r7, #116]	; 0x74
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba30:	e841 2300 	strex	r3, r2, [r1]
 800ba34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1e6      	bne.n	800ba0a <UART_Start_Receive_IT+0x1be>
 800ba3c:	e018      	b.n	800ba70 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f043 0320 	orr.w	r3, r3, #32
 800ba52:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba5c:	623b      	str	r3, [r7, #32]
 800ba5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba60:	69f9      	ldr	r1, [r7, #28]
 800ba62:	6a3a      	ldr	r2, [r7, #32]
 800ba64:	e841 2300 	strex	r3, r2, [r1]
 800ba68:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e6      	bne.n	800ba3e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	378c      	adds	r7, #140	; 0x8c
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	0800c719 	.word	0x0800c719
 800ba84:	0800c3b9 	.word	0x0800c3b9
 800ba88:	0800c201 	.word	0x0800c201
 800ba8c:	0800c049 	.word	0x0800c049

0800ba90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b096      	sub	sp, #88	; 0x58
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	88fa      	ldrh	r2, [r7, #6]
 800baa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2222      	movs	r2, #34	; 0x22
 800bab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d02d      	beq.n	800bb22 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bacc:	4a40      	ldr	r2, [pc, #256]	; (800bbd0 <UART_Start_Receive_DMA+0x140>)
 800bace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad6:	4a3f      	ldr	r2, [pc, #252]	; (800bbd4 <UART_Start_Receive_DMA+0x144>)
 800bad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae0:	4a3d      	ldr	r2, [pc, #244]	; (800bbd8 <UART_Start_Receive_DMA+0x148>)
 800bae2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baea:	2200      	movs	r2, #0
 800baec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3324      	adds	r3, #36	; 0x24
 800bafa:	4619      	mov	r1, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb00:	461a      	mov	r2, r3
 800bb02:	88fb      	ldrh	r3, [r7, #6]
 800bb04:	f7f7 f840 	bl	8002b88 <HAL_DMA_Start_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d009      	beq.n	800bb22 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2210      	movs	r2, #16
 800bb12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e051      	b.n	800bbc6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d018      	beq.n	800bb5c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb3e:	657b      	str	r3, [r7, #84]	; 0x54
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e6      	bne.n	800bb2a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3308      	adds	r3, #8
 800bb62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	653b      	str	r3, [r7, #80]	; 0x50
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3308      	adds	r3, #8
 800bb7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb7c:	637a      	str	r2, [r7, #52]	; 0x34
 800bb7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb84:	e841 2300 	strex	r3, r2, [r1]
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e5      	bne.n	800bb5c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3308      	adds	r3, #8
 800bb96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3308      	adds	r3, #8
 800bbae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbb0:	623a      	str	r2, [r7, #32]
 800bbb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	69f9      	ldr	r1, [r7, #28]
 800bbb6:	6a3a      	ldr	r2, [r7, #32]
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e5      	bne.n	800bb90 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3758      	adds	r7, #88	; 0x58
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	0800bddf 	.word	0x0800bddf
 800bbd4:	0800bf07 	.word	0x0800bf07
 800bbd8:	0800bf45 	.word	0x0800bf45

0800bbdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b08f      	sub	sp, #60	; 0x3c
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc04:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e6      	bne.n	800bbe4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc2c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc36:	61ba      	str	r2, [r7, #24]
 800bc38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	6979      	ldr	r1, [r7, #20]
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	613b      	str	r3, [r7, #16]
   return(result);
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e5      	bne.n	800bc16 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bc52:	bf00      	nop
 800bc54:	373c      	adds	r7, #60	; 0x3c
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b095      	sub	sp, #84	; 0x54
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc86:	643b      	str	r3, [r7, #64]	; 0x40
 800bc88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e6      	bne.n	800bc68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	3308      	adds	r3, #8
 800bca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	e853 3f00 	ldrex	r3, [r3]
 800bca8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <UART_EndRxTransfer+0xc8>)
 800bcae:	4013      	ands	r3, r2
 800bcb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e5      	bne.n	800bc9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d118      	bne.n	800bd08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	e853 3f00 	ldrex	r3, [r3]
 800bce2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f023 0310 	bic.w	r3, r3, #16
 800bcea:	647b      	str	r3, [r7, #68]	; 0x44
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6979      	ldr	r1, [r7, #20]
 800bcfa:	69ba      	ldr	r2, [r7, #24]
 800bcfc:	e841 2300 	strex	r3, r2, [r1]
 800bd00:	613b      	str	r3, [r7, #16]
   return(result);
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e6      	bne.n	800bcd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bd1c:	bf00      	nop
 800bd1e:	3754      	adds	r7, #84	; 0x54
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	effffffe 	.word	0xeffffffe

0800bd2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b090      	sub	sp, #64	; 0x40
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd42:	d037      	beq.n	800bdb4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3308      	adds	r3, #8
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	623b      	str	r3, [r7, #32]
   return(result);
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd62:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3308      	adds	r3, #8
 800bd6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd6c:	633a      	str	r2, [r7, #48]	; 0x30
 800bd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd74:	e841 2300 	strex	r3, r2, [r1]
 800bd78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e5      	bne.n	800bd4c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd94:	637b      	str	r3, [r7, #52]	; 0x34
 800bd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	61fb      	str	r3, [r7, #28]
 800bda0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	69b9      	ldr	r1, [r7, #24]
 800bda4:	69fa      	ldr	r2, [r7, #28]
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	617b      	str	r3, [r7, #20]
   return(result);
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e6      	bne.n	800bd80 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdb2:	e002      	b.n	800bdba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800bdb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdb6:	f7fe fe05 	bl	800a9c4 <HAL_UART_TxCpltCallback>
}
 800bdba:	bf00      	nop
 800bdbc:	3740      	adds	r7, #64	; 0x40
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7fe fe01 	bl	800a9d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b09c      	sub	sp, #112	; 0x70
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf4:	d071      	beq.n	800beda <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bdf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be12:	66bb      	str	r3, [r7, #104]	; 0x68
 800be14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e6      	bne.n	800bdfe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3308      	adds	r3, #8
 800be36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be42:	f023 0301 	bic.w	r3, r3, #1
 800be46:	667b      	str	r3, [r7, #100]	; 0x64
 800be48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3308      	adds	r3, #8
 800be4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be50:	647a      	str	r2, [r7, #68]	; 0x44
 800be52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e5      	bne.n	800be30 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	623b      	str	r3, [r7, #32]
   return(result);
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be7a:	663b      	str	r3, [r7, #96]	; 0x60
 800be7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3308      	adds	r3, #8
 800be82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be84:	633a      	str	r2, [r7, #48]	; 0x30
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e5      	bne.n	800be64 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be9a:	2220      	movs	r2, #32
 800be9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d118      	bne.n	800beda <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	e853 3f00 	ldrex	r3, [r3]
 800beb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f023 0310 	bic.w	r3, r3, #16
 800bebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bec6:	61fb      	str	r3, [r7, #28]
 800bec8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	69b9      	ldr	r1, [r7, #24]
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	617b      	str	r3, [r7, #20]
   return(result);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e6      	bne.n	800bea8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bedc:	2200      	movs	r2, #0
 800bede:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d107      	bne.n	800bef8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beee:	4619      	mov	r1, r3
 800bef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bef2:	f7f4 fef5 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bef6:	e002      	b.n	800befe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800bef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800befa:	f7f4 fed3 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800befe:	bf00      	nop
 800bf00:	3770      	adds	r7, #112	; 0x70
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2201      	movs	r2, #1
 800bf18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d109      	bne.n	800bf36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf28:	085b      	lsrs	r3, r3, #1
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7f4 fed6 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf34:	e002      	b.n	800bf3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f7fe fd58 	bl	800a9ec <HAL_UART_RxHalfCpltCallback>
}
 800bf3c:	bf00      	nop
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf6c:	2b80      	cmp	r3, #128	; 0x80
 800bf6e:	d109      	bne.n	800bf84 <UART_DMAError+0x40>
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	2b21      	cmp	r3, #33	; 0x21
 800bf74:	d106      	bne.n	800bf84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bf7e:	6978      	ldr	r0, [r7, #20]
 800bf80:	f7ff fe2c 	bl	800bbdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d109      	bne.n	800bfa6 <UART_DMAError+0x62>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b22      	cmp	r3, #34	; 0x22
 800bf96:	d106      	bne.n	800bfa6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bfa0:	6978      	ldr	r0, [r7, #20]
 800bfa2:	f7ff fe5d 	bl	800bc60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfac:	f043 0210 	orr.w	r2, r3, #16
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfb6:	6978      	ldr	r0, [r7, #20]
 800bfb8:	f7fe fd22 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfbc:	bf00      	nop
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7fe fd0c 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfe8:	bf00      	nop
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	e853 3f00 	ldrex	r3, [r3]
 800c004:	60bb      	str	r3, [r7, #8]
   return(result);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c00c:	61fb      	str	r3, [r7, #28]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01a:	6979      	ldr	r1, [r7, #20]
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	e841 2300 	strex	r3, r2, [r1]
 800c022:	613b      	str	r3, [r7, #16]
   return(result);
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e6      	bne.n	800bff8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2220      	movs	r2, #32
 800c02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7fe fcc3 	bl	800a9c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c03e:	bf00      	nop
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b09c      	sub	sp, #112	; 0x70
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c056:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c060:	2b22      	cmp	r3, #34	; 0x22
 800c062:	f040 80be 	bne.w	800c1e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c074:	b2d9      	uxtb	r1, r3
 800c076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c080:	400a      	ands	r2, r1
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c096:	b29b      	uxth	r3, r3
 800c098:	3b01      	subs	r3, #1
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f040 80a1 	bne.w	800c1f2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0d6:	e841 2300 	strex	r3, r2, [r1]
 800c0da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1e6      	bne.n	800c0b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f4:	f023 0301 	bic.w	r3, r3, #1
 800c0f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c102:	647a      	str	r2, [r7, #68]	; 0x44
 800c104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e5      	bne.n	800c0e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2220      	movs	r2, #32
 800c11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a33      	ldr	r2, [pc, #204]	; (800c1fc <UART_RxISR_8BIT+0x1b4>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d01f      	beq.n	800c174 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d018      	beq.n	800c174 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	e853 3f00 	ldrex	r3, [r3]
 800c14e:	623b      	str	r3, [r7, #32]
   return(result);
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c156:	663b      	str	r3, [r7, #96]	; 0x60
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c160:	633b      	str	r3, [r7, #48]	; 0x30
 800c162:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c168:	e841 2300 	strex	r3, r2, [r1]
 800c16c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e6      	bne.n	800c142 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d12e      	bne.n	800c1da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	e853 3f00 	ldrex	r3, [r3]
 800c18e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f023 0310 	bic.w	r3, r3, #16
 800c196:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	69b9      	ldr	r1, [r7, #24]
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e6      	bne.n	800c182 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	69db      	ldr	r3, [r3, #28]
 800c1ba:	f003 0310 	and.w	r3, r3, #16
 800c1be:	2b10      	cmp	r3, #16
 800c1c0:	d103      	bne.n	800c1ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2210      	movs	r2, #16
 800c1c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7f4 fd84 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1d8:	e00b      	b.n	800c1f2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7f4 fd62 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800c1e0:	e007      	b.n	800c1f2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	699a      	ldr	r2, [r3, #24]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f042 0208 	orr.w	r2, r2, #8
 800c1f0:	619a      	str	r2, [r3, #24]
}
 800c1f2:	bf00      	nop
 800c1f4:	3770      	adds	r7, #112	; 0x70
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	58000c00 	.word	0x58000c00

0800c200 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b09c      	sub	sp, #112	; 0x70
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c20e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c218:	2b22      	cmp	r3, #34	; 0x22
 800c21a:	f040 80be 	bne.w	800c39a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c22c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c22e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c232:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c236:	4013      	ands	r3, r2
 800c238:	b29a      	uxth	r2, r3
 800c23a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c23c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c242:	1c9a      	adds	r2, r3, #2
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c24e:	b29b      	uxth	r3, r3
 800c250:	3b01      	subs	r3, #1
 800c252:	b29a      	uxth	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	f040 80a1 	bne.w	800c3aa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c27c:	667b      	str	r3, [r7, #100]	; 0x64
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	461a      	mov	r2, r3
 800c284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c286:	657b      	str	r3, [r7, #84]	; 0x54
 800c288:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c28c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e6      	bne.n	800c268 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3308      	adds	r3, #8
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a4:	e853 3f00 	ldrex	r3, [r3]
 800c2a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	f023 0301 	bic.w	r3, r3, #1
 800c2b0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2ba:	643a      	str	r2, [r7, #64]	; 0x40
 800c2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1e5      	bne.n	800c29a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2220      	movs	r2, #32
 800c2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a33      	ldr	r2, [pc, #204]	; (800c3b4 <UART_RxISR_16BIT+0x1b4>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d01f      	beq.n	800c32c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d018      	beq.n	800c32c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	61fb      	str	r3, [r7, #28]
   return(result);
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c30e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c31a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e6      	bne.n	800c2fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c330:	2b01      	cmp	r3, #1
 800c332:	d12e      	bne.n	800c392 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	60bb      	str	r3, [r7, #8]
   return(result);
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	f023 0310 	bic.w	r3, r3, #16
 800c34e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6979      	ldr	r1, [r7, #20]
 800c35e:	69ba      	ldr	r2, [r7, #24]
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	613b      	str	r3, [r7, #16]
   return(result);
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e6      	bne.n	800c33a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	69db      	ldr	r3, [r3, #28]
 800c372:	f003 0310 	and.w	r3, r3, #16
 800c376:	2b10      	cmp	r3, #16
 800c378:	d103      	bne.n	800c382 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2210      	movs	r2, #16
 800c380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7f4 fca8 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c390:	e00b      	b.n	800c3aa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7f4 fc86 	bl	8000ca4 <HAL_UART_RxCpltCallback>
}
 800c398:	e007      	b.n	800c3aa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	699a      	ldr	r2, [r3, #24]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f042 0208 	orr.w	r2, r2, #8
 800c3a8:	619a      	str	r2, [r3, #24]
}
 800c3aa:	bf00      	nop
 800c3ac:	3770      	adds	r7, #112	; 0x70
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	58000c00 	.word	0x58000c00

0800c3b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b0ac      	sub	sp, #176	; 0xb0
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	69db      	ldr	r3, [r3, #28]
 800c3d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ee:	2b22      	cmp	r3, #34	; 0x22
 800c3f0:	f040 8180 	bne.w	800c6f4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3fe:	e123      	b.n	800c648 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c406:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c40a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c40e:	b2d9      	uxtb	r1, r3
 800c410:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c414:	b2da      	uxtb	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c41a:	400a      	ands	r2, r1
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c430:	b29b      	uxth	r3, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c44a:	f003 0307 	and.w	r3, r3, #7
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d053      	beq.n	800c4fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d011      	beq.n	800c482 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c45e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00b      	beq.n	800c482 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2201      	movs	r2, #1
 800c470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c478:	f043 0201 	orr.w	r2, r3, #1
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d011      	beq.n	800c4b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c48e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00b      	beq.n	800c4b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4a8:	f043 0204 	orr.w	r2, r3, #4
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4b6:	f003 0304 	and.w	r3, r3, #4
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d011      	beq.n	800c4e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00b      	beq.n	800c4e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2204      	movs	r2, #4
 800c4d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4d8:	f043 0202 	orr.w	r2, r3, #2
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7fe fa87 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c500:	b29b      	uxth	r3, r3
 800c502:	2b00      	cmp	r3, #0
 800c504:	f040 80a0 	bne.w	800c648 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	461a      	mov	r2, r3
 800c526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c52a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c52c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c530:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c532:	e841 2300 	strex	r3, r2, [r1]
 800c536:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1e4      	bne.n	800c508 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3308      	adds	r3, #8
 800c544:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c548:	e853 3f00 	ldrex	r3, [r3]
 800c54c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c54e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c550:	4b6e      	ldr	r3, [pc, #440]	; (800c70c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c552:	4013      	ands	r3, r2
 800c554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3308      	adds	r3, #8
 800c55e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c562:	66ba      	str	r2, [r7, #104]	; 0x68
 800c564:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e3      	bne.n	800c53e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2220      	movs	r2, #32
 800c57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a60      	ldr	r2, [pc, #384]	; (800c710 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d021      	beq.n	800c5d8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d01a      	beq.n	800c5d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5aa:	e853 3f00 	ldrex	r3, [r3]
 800c5ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c5c4:	657b      	str	r3, [r7, #84]	; 0x54
 800c5c6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e4      	bne.n	800c5a2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d130      	bne.n	800c642 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	e853 3f00 	ldrex	r3, [r3]
 800c5f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	f023 0310 	bic.w	r3, r3, #16
 800c5fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c608:	643b      	str	r3, [r7, #64]	; 0x40
 800c60a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c60e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e4      	bne.n	800c5e6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	f003 0310 	and.w	r3, r3, #16
 800c626:	2b10      	cmp	r3, #16
 800c628:	d103      	bne.n	800c632 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2210      	movs	r2, #16
 800c630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7f4 fb50 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c640:	e002      	b.n	800c648 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7f4 fb2e 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c648:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c654:	f003 0320 	and.w	r3, r3, #32
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f47f aed1 	bne.w	800c400 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c664:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c668:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d049      	beq.n	800c704 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c676:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d242      	bcs.n	800c704 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3308      	adds	r3, #8
 800c684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3308      	adds	r3, #8
 800c69e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c6a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e3      	bne.n	800c67e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a16      	ldr	r2, [pc, #88]	; (800c714 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c6ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	f043 0320 	orr.w	r3, r3, #32
 800c6d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6de:	61bb      	str	r3, [r7, #24]
 800c6e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6979      	ldr	r1, [r7, #20]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e4      	bne.n	800c6bc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6f2:	e007      	b.n	800c704 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0208 	orr.w	r2, r2, #8
 800c702:	619a      	str	r2, [r3, #24]
}
 800c704:	bf00      	nop
 800c706:	37b0      	adds	r7, #176	; 0xb0
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	effffffe 	.word	0xeffffffe
 800c710:	58000c00 	.word	0x58000c00
 800c714:	0800c049 	.word	0x0800c049

0800c718 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b0ae      	sub	sp, #184	; 0xb8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c726:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	69db      	ldr	r3, [r3, #28]
 800c730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c74e:	2b22      	cmp	r3, #34	; 0x22
 800c750:	f040 8184 	bne.w	800ca5c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c75a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c75e:	e127      	b.n	800c9b0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c766:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c76e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c772:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c776:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c77a:	4013      	ands	r3, r2
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c788:	1c9a      	adds	r2, r3, #2
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c794:	b29b      	uxth	r3, r3
 800c796:	3b01      	subs	r3, #1
 800c798:	b29a      	uxth	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	69db      	ldr	r3, [r3, #28]
 800c7a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d053      	beq.n	800c85e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d011      	beq.n	800c7e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7dc:	f043 0201 	orr.w	r2, r3, #1
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d011      	beq.n	800c816 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c7f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00b      	beq.n	800c816 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2202      	movs	r2, #2
 800c804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80c:	f043 0204 	orr.w	r2, r3, #4
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c81a:	f003 0304 	and.w	r3, r3, #4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d011      	beq.n	800c846 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c826:	f003 0301 	and.w	r3, r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00b      	beq.n	800c846 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2204      	movs	r2, #4
 800c834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c83c:	f043 0202 	orr.w	r2, r3, #2
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d006      	beq.n	800c85e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7fe f8d5 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c864:	b29b      	uxth	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	f040 80a2 	bne.w	800c9b0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	461a      	mov	r2, r3
 800c88a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c88e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c892:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c89a:	e841 2300 	strex	r3, r2, [r1]
 800c89e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1e2      	bne.n	800c86c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3308      	adds	r3, #8
 800c8ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8b8:	4b6e      	ldr	r3, [pc, #440]	; (800ca74 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c8ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e3      	bne.n	800c8a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a60      	ldr	r2, [pc, #384]	; (800ca78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d021      	beq.n	800c940 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d01a      	beq.n	800c940 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c912:	e853 3f00 	ldrex	r3, [r3]
 800c916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c91a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c91e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c92c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c92e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e4      	bne.n	800c90a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d130      	bne.n	800c9aa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c95e:	f023 0310 	bic.w	r3, r3, #16
 800c962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c970:	647b      	str	r3, [r7, #68]	; 0x44
 800c972:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c978:	e841 2300 	strex	r3, r2, [r1]
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e4      	bne.n	800c94e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	f003 0310 	and.w	r3, r3, #16
 800c98e:	2b10      	cmp	r3, #16
 800c990:	d103      	bne.n	800c99a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2210      	movs	r2, #16
 800c998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f4 f99c 	bl	8000ce0 <HAL_UARTEx_RxEventCallback>
 800c9a8:	e002      	b.n	800c9b0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7f4 f97a 	bl	8000ca4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c9b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c9bc:	f003 0320 	and.w	r3, r3, #32
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f47f aecd 	bne.w	800c760 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9cc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d049      	beq.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x354>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9de:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d242      	bcs.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3308      	adds	r3, #8
 800ca06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca0a:	633a      	str	r2, [r7, #48]	; 0x30
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e3      	bne.n	800c9e6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a16      	ldr	r2, [pc, #88]	; (800ca7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ca22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	e853 3f00 	ldrex	r3, [r3]
 800ca30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f043 0320 	orr.w	r3, r3, #32
 800ca38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	461a      	mov	r2, r3
 800ca42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca46:	61fb      	str	r3, [r7, #28]
 800ca48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4a:	69b9      	ldr	r1, [r7, #24]
 800ca4c:	69fa      	ldr	r2, [r7, #28]
 800ca4e:	e841 2300 	strex	r3, r2, [r1]
 800ca52:	617b      	str	r3, [r7, #20]
   return(result);
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1e4      	bne.n	800ca24 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca5a:	e007      	b.n	800ca6c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	699a      	ldr	r2, [r3, #24]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0208 	orr.w	r2, r2, #8
 800ca6a:	619a      	str	r2, [r3, #24]
}
 800ca6c:	bf00      	nop
 800ca6e:	37b8      	adds	r7, #184	; 0xb8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	effffffe 	.word	0xeffffffe
 800ca78:	58000c00 	.word	0x58000c00
 800ca7c:	0800c201 	.word	0x0800c201

0800ca80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d101      	bne.n	800cad2 <HAL_UARTEx_DisableFifoMode+0x16>
 800cace:	2302      	movs	r3, #2
 800cad0:	e027      	b.n	800cb22 <HAL_UARTEx_DisableFifoMode+0x66>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2224      	movs	r2, #36	; 0x24
 800cade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f022 0201 	bic.w	r2, r2, #1
 800caf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2220      	movs	r2, #32
 800cb14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr

0800cb2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b084      	sub	sp, #16
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d101      	bne.n	800cb46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb42:	2302      	movs	r3, #2
 800cb44:	e02d      	b.n	800cba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2224      	movs	r2, #36	; 0x24
 800cb52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 0201 	bic.w	r2, r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f8a4 	bl	800ccd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2220      	movs	r2, #32
 800cb94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e02d      	b.n	800cc1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2224      	movs	r2, #36	; 0x24
 800cbce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f022 0201 	bic.w	r2, r2, #1
 800cbe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f866 	bl	800ccd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b08c      	sub	sp, #48	; 0x30
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	60f8      	str	r0, [r7, #12]
 800cc2e:	60b9      	str	r1, [r7, #8]
 800cc30:	4613      	mov	r3, r2
 800cc32:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	d142      	bne.n	800ccc4 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800cc44:	88fb      	ldrh	r3, [r7, #6]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e03b      	b.n	800ccc6 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800cc5a:	88fb      	ldrh	r3, [r7, #6]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7fe fdf3 	bl	800b84c <UART_Start_Receive_IT>
 800cc66:	4603      	mov	r3, r0
 800cc68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800cc6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d124      	bne.n	800ccbe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d11d      	bne.n	800ccb8 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2210      	movs	r2, #16
 800cc82:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	e853 3f00 	ldrex	r3, [r3]
 800cc90:	617b      	str	r3, [r7, #20]
   return(result);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f043 0310 	orr.w	r3, r3, #16
 800cc98:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
 800cca4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	6a39      	ldr	r1, [r7, #32]
 800cca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccaa:	e841 2300 	strex	r3, r2, [r1]
 800ccae:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e6      	bne.n	800cc84 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800ccb6:	e002      	b.n	800ccbe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ccbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccc2:	e000      	b.n	800ccc6 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ccc4:	2302      	movs	r3, #2
  }
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3730      	adds	r7, #48	; 0x30
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d108      	bne.n	800ccf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2201      	movs	r2, #1
 800ccec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccf0:	e031      	b.n	800cd56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccf2:	2310      	movs	r3, #16
 800ccf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccf6:	2310      	movs	r3, #16
 800ccf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	0e5b      	lsrs	r3, r3, #25
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	0f5b      	lsrs	r3, r3, #29
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	f003 0307 	and.w	r3, r3, #7
 800cd18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd1a:	7bbb      	ldrb	r3, [r7, #14]
 800cd1c:	7b3a      	ldrb	r2, [r7, #12]
 800cd1e:	4911      	ldr	r1, [pc, #68]	; (800cd64 <UARTEx_SetNbDataToProcess+0x94>)
 800cd20:	5c8a      	ldrb	r2, [r1, r2]
 800cd22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd26:	7b3a      	ldrb	r2, [r7, #12]
 800cd28:	490f      	ldr	r1, [pc, #60]	; (800cd68 <UARTEx_SetNbDataToProcess+0x98>)
 800cd2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	7b7a      	ldrb	r2, [r7, #13]
 800cd3c:	4909      	ldr	r1, [pc, #36]	; (800cd64 <UARTEx_SetNbDataToProcess+0x94>)
 800cd3e:	5c8a      	ldrb	r2, [r1, r2]
 800cd40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd44:	7b7a      	ldrb	r2, [r7, #13]
 800cd46:	4908      	ldr	r1, [pc, #32]	; (800cd68 <UARTEx_SetNbDataToProcess+0x98>)
 800cd48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd56:	bf00      	nop
 800cd58:	3714      	adds	r7, #20
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	080204d4 	.word	0x080204d4
 800cd68:	080204dc 	.word	0x080204dc

0800cd6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	f107 001c 	add.w	r0, r7, #28
 800cd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d120      	bne.n	800cdc6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68da      	ldr	r2, [r3, #12]
 800cd94:	4b2a      	ldr	r3, [pc, #168]	; (800ce40 <USB_CoreInit+0xd4>)
 800cd96:	4013      	ands	r3, r2
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d105      	bne.n	800cdba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 faac 	bl	800d318 <USB_CoreReset>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]
 800cdc4:	e01a      	b.n	800cdfc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 faa0 	bl	800d318 <USB_CoreReset>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38
 800cdee:	e005      	b.n	800cdfc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d116      	bne.n	800ce30 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce10:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <USB_CoreInit+0xd8>)
 800ce12:	4313      	orrs	r3, r2
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f043 0206 	orr.w	r2, r3, #6
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	f043 0220 	orr.w	r2, r3, #32
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce3c:	b004      	add	sp, #16
 800ce3e:	4770      	bx	lr
 800ce40:	ffbdffbf 	.word	0xffbdffbf
 800ce44:	03ee0000 	.word	0x03ee0000

0800ce48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	f023 0201 	bic.w	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	460b      	mov	r3, r1
 800ce74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d115      	bne.n	800ceb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ce98:	2001      	movs	r0, #1
 800ce9a:	f7f5 f9f5 	bl	8002288 <HAL_Delay>
      ms++;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3301      	adds	r3, #1
 800cea2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fa29 	bl	800d2fc <USB_GetMode>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d01e      	beq.n	800ceee <USB_SetCurrentMode+0x84>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2b31      	cmp	r3, #49	; 0x31
 800ceb4:	d9f0      	bls.n	800ce98 <USB_SetCurrentMode+0x2e>
 800ceb6:	e01a      	b.n	800ceee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ceb8:	78fb      	ldrb	r3, [r7, #3]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d115      	bne.n	800ceea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ceca:	2001      	movs	r0, #1
 800cecc:	f7f5 f9dc 	bl	8002288 <HAL_Delay>
      ms++;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3301      	adds	r3, #1
 800ced4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fa10 	bl	800d2fc <USB_GetMode>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d005      	beq.n	800ceee <USB_SetCurrentMode+0x84>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b31      	cmp	r3, #49	; 0x31
 800cee6:	d9f0      	bls.n	800ceca <USB_SetCurrentMode+0x60>
 800cee8:	e001      	b.n	800ceee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e005      	b.n	800cefa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2b32      	cmp	r3, #50	; 0x32
 800cef2:	d101      	bne.n	800cef8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e000      	b.n	800cefa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf04:	b084      	sub	sp, #16
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b086      	sub	sp, #24
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cf12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cf1e:	2300      	movs	r3, #0
 800cf20:	613b      	str	r3, [r7, #16]
 800cf22:	e009      	b.n	800cf38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	3340      	adds	r3, #64	; 0x40
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4413      	add	r3, r2
 800cf2e:	2200      	movs	r2, #0
 800cf30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	3301      	adds	r3, #1
 800cf36:	613b      	str	r3, [r7, #16]
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b0e      	cmp	r3, #14
 800cf3c:	d9f2      	bls.n	800cf24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d11c      	bne.n	800cf7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf52:	f043 0302 	orr.w	r3, r3, #2
 800cf56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	e005      	b.n	800cf8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf90:	461a      	mov	r2, r3
 800cf92:	2300      	movs	r3, #0
 800cf94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	680b      	ldr	r3, [r1, #0]
 800cfa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d10c      	bne.n	800cfca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d104      	bne.n	800cfc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f965 	bl	800d288 <USB_SetDevSpeed>
 800cfbe:	e008      	b.n	800cfd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 f960 	bl	800d288 <USB_SetDevSpeed>
 800cfc8:	e003      	b.n	800cfd2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cfca:	2103      	movs	r1, #3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f95b 	bl	800d288 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfd2:	2110      	movs	r1, #16
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 f8f3 	bl	800d1c0 <USB_FlushTxFifo>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d001      	beq.n	800cfe4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f91f 	bl	800d228 <USB_FlushRxFifo>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffa:	461a      	mov	r2, r3
 800cffc:	2300      	movs	r3, #0
 800cffe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d006:	461a      	mov	r2, r3
 800d008:	2300      	movs	r3, #0
 800d00a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d012:	461a      	mov	r2, r3
 800d014:	2300      	movs	r3, #0
 800d016:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d018:	2300      	movs	r3, #0
 800d01a:	613b      	str	r3, [r7, #16]
 800d01c:	e043      	b.n	800d0a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	015a      	lsls	r2, r3, #5
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	4413      	add	r3, r2
 800d026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d034:	d118      	bne.n	800d068 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d048:	461a      	mov	r2, r3
 800d04a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	e013      	b.n	800d07a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	015a      	lsls	r2, r3, #5
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d05e:	461a      	mov	r2, r3
 800d060:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d064:	6013      	str	r3, [r2, #0]
 800d066:	e008      	b.n	800d07a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d074:	461a      	mov	r2, r3
 800d076:	2300      	movs	r3, #0
 800d078:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	015a      	lsls	r2, r3, #5
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	4413      	add	r3, r2
 800d082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d086:	461a      	mov	r2, r3
 800d088:	2300      	movs	r3, #0
 800d08a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	461a      	mov	r2, r3
 800d09a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d09e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	613b      	str	r3, [r7, #16]
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d3b7      	bcc.n	800d01e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	613b      	str	r3, [r7, #16]
 800d0b2:	e043      	b.n	800d13c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	015a      	lsls	r2, r3, #5
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0ca:	d118      	bne.n	800d0fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	015a      	lsls	r2, r3, #5
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0de:	461a      	mov	r2, r3
 800d0e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	e013      	b.n	800d110 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	e008      	b.n	800d110 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	4413      	add	r3, r2
 800d106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10a:	461a      	mov	r2, r3
 800d10c:	2300      	movs	r3, #0
 800d10e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	015a      	lsls	r2, r3, #5
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4413      	add	r3, r2
 800d118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d11c:	461a      	mov	r2, r3
 800d11e:	2300      	movs	r3, #0
 800d120:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	015a      	lsls	r2, r3, #5
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4413      	add	r3, r2
 800d12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d12e:	461a      	mov	r2, r3
 800d130:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d134:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	3301      	adds	r3, #1
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	693a      	ldr	r2, [r7, #16]
 800d140:	429a      	cmp	r2, r3
 800d142:	d3b7      	bcc.n	800d0b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d156:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d164:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d105      	bne.n	800d178 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	f043 0210 	orr.w	r2, r3, #16
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	699a      	ldr	r2, [r3, #24]
 800d17c:	4b0e      	ldr	r3, [pc, #56]	; (800d1b8 <USB_DevInit+0x2b4>)
 800d17e:	4313      	orrs	r3, r2
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d005      	beq.n	800d196 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	699b      	ldr	r3, [r3, #24]
 800d18e:	f043 0208 	orr.w	r2, r3, #8
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d105      	bne.n	800d1a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	699a      	ldr	r2, [r3, #24]
 800d1a0:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <USB_DevInit+0x2b8>)
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d1b4:	b004      	add	sp, #16
 800d1b6:	4770      	bx	lr
 800d1b8:	803c3800 	.word	0x803c3800
 800d1bc:	40000004 	.word	0x40000004

0800d1c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4a13      	ldr	r2, [pc, #76]	; (800d224 <USB_FlushTxFifo+0x64>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d901      	bls.n	800d1e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e01b      	b.n	800d218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	daf2      	bge.n	800d1ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	019b      	lsls	r3, r3, #6
 800d1f0:	f043 0220 	orr.w	r2, r3, #32
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	4a08      	ldr	r2, [pc, #32]	; (800d224 <USB_FlushTxFifo+0x64>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d901      	bls.n	800d20a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	e006      	b.n	800d218 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b20      	cmp	r3, #32
 800d214:	d0f0      	beq.n	800d1f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	00030d40 	.word	0x00030d40

0800d228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3301      	adds	r3, #1
 800d238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	4a11      	ldr	r2, [pc, #68]	; (800d284 <USB_FlushRxFifo+0x5c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d901      	bls.n	800d246 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e018      	b.n	800d278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	daf2      	bge.n	800d234 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d24e:	2300      	movs	r3, #0
 800d250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2210      	movs	r2, #16
 800d256:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	4a08      	ldr	r2, [pc, #32]	; (800d284 <USB_FlushRxFifo+0x5c>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d901      	bls.n	800d26a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d266:	2303      	movs	r3, #3
 800d268:	e006      	b.n	800d278 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	f003 0310 	and.w	r3, r3, #16
 800d272:	2b10      	cmp	r3, #16
 800d274:	d0f0      	beq.n	800d258 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	00030d40 	.word	0x00030d40

0800d288 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	68f9      	ldr	r1, [r7, #12]
 800d2a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b085      	sub	sp, #20
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2d4:	f023 0303 	bic.w	r3, r3, #3
 800d2d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2e8:	f043 0302 	orr.w	r3, r3, #2
 800d2ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	695b      	ldr	r3, [r3, #20]
 800d308:	f003 0301 	and.w	r3, r3, #1
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	4a13      	ldr	r2, [pc, #76]	; (800d37c <USB_CoreReset+0x64>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d901      	bls.n	800d336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d332:	2303      	movs	r3, #3
 800d334:	e01b      	b.n	800d36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	daf2      	bge.n	800d324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	f043 0201 	orr.w	r2, r3, #1
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	4a09      	ldr	r2, [pc, #36]	; (800d37c <USB_CoreReset+0x64>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d901      	bls.n	800d360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e006      	b.n	800d36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d0f0      	beq.n	800d34e <USB_CoreReset+0x36>

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	00030d40 	.word	0x00030d40

0800d380 <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf>:
	using OriEKFBase::ControlVec;
	using OriEKFBase::MeassurementVec;
	using OriEKFBase::StateCovarianceMatrix;
	using OriEKFBase::ControlCovarianceMatrix;
	using OriEKFBase::MeasurementCovarianceMatrix;
	using OriEKFBase::OriEKFBase;
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	ed87 0a00 	vstr	s0, [r7]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	edd7 7a00 	vldr	s15, [r7]
 800d396:	eeb0 0a67 	vmov.f32	s0, s15
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	68b9      	ldr	r1, [r7, #8]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 fc26 	bl	800dbf0 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>
 800d3a4:	4a03      	ldr	r2, [pc, #12]	; (800d3b4 <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf+0x34>)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	08020544 	.word	0x08020544

0800d3b8 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>:
	using VelEKFBase::ControlVec;
	using VelEKFBase::MeassurementVec;
	using VelEKFBase::StateCovarianceMatrix;
	using VelEKFBase::ControlCovarianceMatrix;
	using VelEKFBase::MeasurementCovarianceMatrix;
	using VelEKFBase::VelEKFBase;
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	ed87 0a00 	vstr	s0, [r7]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	edd7 7a00 	vldr	s15, [r7]
 800d3ce:	eeb0 0a67 	vmov.f32	s0, s15
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 fc4e 	bl	800dc78 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>
 800d3dc:	4a03      	ldr	r2, [pc, #12]	; (800d3ec <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf+0x34>)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	08020570 	.word	0x08020570

0800d3f0 <_ZN10Algorithms15FusionAlgorithmC1Ev>:
public:
//	FusionAlgorithm(
//			const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//			const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//			float time);
	FusionAlgorithm(){
 800d3f0:	b5b0      	push	{r4, r5, r7, lr}
 800d3f2:	b0ca      	sub	sp, #296	; 0x128
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3f8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d3fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fbde 	bl	800dbc0 <_ZN3Mat8V_VectorILt4EEC1Ev>
 800d404:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 fbe6 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800d40e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d416:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800d568 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x178>
 800d41a:	4619      	mov	r1, r3
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7ff ffaf 	bl	800d380 <_ZN10Algorithms14OrientationEKFCI1NS_20ExtendedKalmanFilterILt4ELt3ELt6EEEERKN3Mat8V_VectorILt4EEERKNS3_6MatrixILt4ELt4EEEf>
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800d428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fc0b 	bl	800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d432:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fc13 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800d43c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d440:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d444:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800d568 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x178>
 800d448:	4619      	mov	r1, r3
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff ffb4 	bl	800d3b8 <_ZN10Algorithms11VelocityEKFCI1NS_20ExtendedKalmanFilterILt6ELt3ELt6EEEERKN3Mat8V_VectorILt6EEERKNS3_6MatrixILt6ELt6EEEf>
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d456:	4618      	mov	r0, r3
 800d458:	f000 fc36 	bl	800dcc8 <_ZN3Mat8V_VectorILt3EEC1Ev>
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800d462:	4618      	mov	r0, r3
 800d464:	f000 fc3d 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fbea 	bl	800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d47a:	4618      	mov	r0, r3
 800d47c:	f000 fbf1 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fc1e 	bl	800dcc8 <_ZN3Mat8V_VectorILt3EEC1Ev>
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fc25 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 fbd2 	bl	800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 fbd9 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
		_orientationControlCov = Eye<3>(_gyroNoiseVariance);
 800d4b0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800d56c <_ZN10Algorithms15FusionAlgorithmC1Ev+0x17c>
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f000 fc1d 	bl	800dcf8 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 800d4be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d4c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d4c6:	f504 748a 	add.w	r4, r4, #276	; 0x114
 800d4ca:	461d      	mov	r5, r3
 800d4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	6023      	str	r3, [r4, #0]
		_orientationMeassurementCov(0,0) = _accNoiseVariance;
 800d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4de:	2200      	movs	r2, #0
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fc2c 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	4a21      	ldr	r2, [pc, #132]	; (800d570 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d4ec:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(1,1) = _accNoiseVariance;
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f000 fc21 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d4fe:	4603      	mov	r3, r0
 800d500:	4a1b      	ldr	r2, [pc, #108]	; (800d570 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d502:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(2,2) = _accNoiseVariance;
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d50a:	2202      	movs	r2, #2
 800d50c:	2102      	movs	r1, #2
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fc16 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d514:	4603      	mov	r3, r0
 800d516:	4a16      	ldr	r2, [pc, #88]	; (800d570 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x180>)
 800d518:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(3,3) = _magNoiseVariance;
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d520:	2203      	movs	r2, #3
 800d522:	2103      	movs	r1, #3
 800d524:	4618      	mov	r0, r3
 800d526:	f000 fc0b 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d52a:	4603      	mov	r3, r0
 800d52c:	4a11      	ldr	r2, [pc, #68]	; (800d574 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d52e:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(4,4) = _magNoiseVariance;
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d536:	2204      	movs	r2, #4
 800d538:	2104      	movs	r1, #4
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 fc00 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d540:	4603      	mov	r3, r0
 800d542:	4a0c      	ldr	r2, [pc, #48]	; (800d574 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d544:	601a      	str	r2, [r3, #0]
		_orientationMeassurementCov(5,5) = _magNoiseVariance;
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d54c:	2205      	movs	r2, #5
 800d54e:	2105      	movs	r1, #5
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fbf5 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800d556:	4603      	mov	r3, r0
 800d558:	4a06      	ldr	r2, [pc, #24]	; (800d574 <_ZN10Algorithms15FusionAlgorithmC1Ev+0x184>)
 800d55a:	601a      	str	r2, [r3, #0]
	};
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	4618      	mov	r0, r3
 800d560:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d564:	46bd      	mov	sp, r7
 800d566:	bdb0      	pop	{r4, r5, r7, pc}
 800d568:	00000000 	.word	0x00000000
 800d56c:	3d4ccccd 	.word	0x3d4ccccd
 800d570:	3dcccccd 	.word	0x3dcccccd
 800d574:	4019999a 	.word	0x4019999a

0800d578 <_ZN10Algorithms10AHRSKalmanC1Ev>:
{

class AHRSKalman
{
public:
	AHRSKalman(){};
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3310      	adds	r3, #16
 800d584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fbf5 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a08      	ldr	r2, [pc, #32]	; (800d5b4 <_ZN10Algorithms10AHRSKalmanC1Ev+0x3c>)
 800d592:	659a      	str	r2, [r3, #88]	; 0x58
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a08      	ldr	r2, [pc, #32]	; (800d5b8 <_ZN10Algorithms10AHRSKalmanC1Ev+0x40>)
 800d598:	65da      	str	r2, [r3, #92]	; 0x5c
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a07      	ldr	r2, [pc, #28]	; (800d5bc <_ZN10Algorithms10AHRSKalmanC1Ev+0x44>)
 800d59e:	661a      	str	r2, [r3, #96]	; 0x60
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3364      	adds	r3, #100	; 0x64
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fb18 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	3d4ccccd 	.word	0x3d4ccccd
 800d5b8:	3ecccccd 	.word	0x3ecccccd
 800d5bc:	3c23d70a 	.word	0x3c23d70a

0800d5c0 <InitAlgorithms>:
Mat::Matrix<3, 1> meanMag = 0.0f;

float al = 0.01f;

uint8_t InitAlgorithms(const AGMSensorData* sensorData)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
	printf("InitAlgorithms\n\r");
 800d5c8:	483f      	ldr	r0, [pc, #252]	; (800d6c8 <InitAlgorithms+0x108>)
 800d5ca:	f010 fd71 	bl	801e0b0 <iprintf>
	AccRaw(0,0) = sensorData->Acc.x;
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	483e      	ldr	r0, [pc, #248]	; (800d6cc <InitAlgorithms+0x10c>)
 800d5d4:	f000 fc31 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	6013      	str	r3, [r2, #0]
	AccRaw(1,0) = sensorData->Acc.y;
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	4839      	ldr	r0, [pc, #228]	; (800d6cc <InitAlgorithms+0x10c>)
 800d5e6:	f000 fc28 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	6013      	str	r3, [r2, #0]
	AccRaw(2,0) = sensorData->Acc.z;
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2102      	movs	r1, #2
 800d5f6:	4835      	ldr	r0, [pc, #212]	; (800d6cc <InitAlgorithms+0x10c>)
 800d5f8:	f000 fc1f 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	6013      	str	r3, [r2, #0]
	MagRaw(0,0) = sensorData->Mag.x;
 800d604:	2200      	movs	r2, #0
 800d606:	2100      	movs	r1, #0
 800d608:	4831      	ldr	r0, [pc, #196]	; (800d6d0 <InitAlgorithms+0x110>)
 800d60a:	f000 fc16 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d60e:	4602      	mov	r2, r0
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	6013      	str	r3, [r2, #0]
	MagRaw(1,0) = sensorData->Mag.y;
 800d616:	2200      	movs	r2, #0
 800d618:	2101      	movs	r1, #1
 800d61a:	482d      	ldr	r0, [pc, #180]	; (800d6d0 <InitAlgorithms+0x110>)
 800d61c:	f000 fc0d 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	6013      	str	r3, [r2, #0]
	MagRaw(2,0) = sensorData->Mag.z;
 800d628:	2200      	movs	r2, #0
 800d62a:	2102      	movs	r1, #2
 800d62c:	4828      	ldr	r0, [pc, #160]	; (800d6d0 <InitAlgorithms+0x110>)
 800d62e:	f000 fc04 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d632:	4602      	mov	r2, r0
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	6013      	str	r3, [r2, #0]
	AccCal = CalibrateAcc(AccRaw);
 800d63a:	4824      	ldr	r0, [pc, #144]	; (800d6cc <InitAlgorithms+0x10c>)
 800d63c:	f003 fa1c 	bl	8010a78 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d640:	eef0 6a40 	vmov.f32	s13, s0
 800d644:	eeb0 7a60 	vmov.f32	s14, s1
 800d648:	eef0 7a41 	vmov.f32	s15, s2
 800d64c:	4b21      	ldr	r3, [pc, #132]	; (800d6d4 <InitAlgorithms+0x114>)
 800d64e:	edc3 6a00 	vstr	s13, [r3]
 800d652:	ed83 7a01 	vstr	s14, [r3, #4]
 800d656:	edc3 7a02 	vstr	s15, [r3, #8]
	MagCal = CalibrateMag(MagRaw);
 800d65a:	481d      	ldr	r0, [pc, #116]	; (800d6d0 <InitAlgorithms+0x110>)
 800d65c:	f003 f9d0 	bl	8010a00 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d660:	eef0 6a40 	vmov.f32	s13, s0
 800d664:	eeb0 7a60 	vmov.f32	s14, s1
 800d668:	eef0 7a41 	vmov.f32	s15, s2
 800d66c:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <InitAlgorithms+0x118>)
 800d66e:	edc3 6a00 	vstr	s13, [r3]
 800d672:	ed83 7a01 	vstr	s14, [r3, #4]
 800d676:	edc3 7a02 	vstr	s15, [r3, #8]
	Fusion.InitState(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d67a:	f7f4 fdf9 	bl	8002270 <HAL_GetTick>
 800d67e:	ee07 0a90 	vmov	s15, r0
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800d6dc <InitAlgorithms+0x11c>
 800d68a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d68e:	eeb0 0a67 	vmov.f32	s0, s15
 800d692:	4a11      	ldr	r2, [pc, #68]	; (800d6d8 <InitAlgorithms+0x118>)
 800d694:	490f      	ldr	r1, [pc, #60]	; (800d6d4 <InitAlgorithms+0x114>)
 800d696:	4812      	ldr	r0, [pc, #72]	; (800d6e0 <InitAlgorithms+0x120>)
 800d698:	f00b f8a4 	bl	80187e4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>
	Kalman.InitialiseKalman(AccCal, MagCal, (float)(HAL_GetTick()) * ms2s);
 800d69c:	f7f4 fde8 	bl	8002270 <HAL_GetTick>
 800d6a0:	ee07 0a90 	vmov	s15, r0
 800d6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d6dc <InitAlgorithms+0x11c>
 800d6ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d6b4:	4a08      	ldr	r2, [pc, #32]	; (800d6d8 <InitAlgorithms+0x118>)
 800d6b6:	4907      	ldr	r1, [pc, #28]	; (800d6d4 <InitAlgorithms+0x114>)
 800d6b8:	480a      	ldr	r0, [pc, #40]	; (800d6e4 <InitAlgorithms+0x124>)
 800d6ba:	f003 fdb0 	bl	801121e <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>
	return 1;
 800d6be:	2301      	movs	r3, #1
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	080201d0 	.word	0x080201d0
 800d6cc:	2400909c 	.word	0x2400909c
 800d6d0:	2400906c 	.word	0x2400906c
 800d6d4:	24009090 	.word	0x24009090
 800d6d8:	24009060 	.word	0x24009060
 800d6dc:	3a83126f 	.word	0x3a83126f
 800d6e0:	24008cf4 	.word	0x24008cf4
 800d6e4:	24008fac 	.word	0x24008fac

0800d6e8 <MadgwickUpdate>:
	al = al * 0.5f;
	return 1;
}

uint8_t MadgwickUpdate(const AGMSensorData* sensorData)
{
 800d6e8:	b590      	push	{r4, r7, lr}
 800d6ea:	ed2d 8b04 	vpush	{d8-d9}
 800d6ee:	b0a9      	sub	sp, #164	; 0xa4
 800d6f0:	af0a      	add	r7, sp, #40	; 0x28
 800d6f2:	6078      	str	r0, [r7, #4]
	if(sensorData != nullptr)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 8215 	beq.w	800db26 <MadgwickUpdate+0x43e>
	{
		static float x{0.0f}, y{0.0f}, z{0.0f}, step{0.005};
		static float last_time{sensorData->SensorTime * 0.001f};
 800d6fc:	4bbf      	ldr	r3, [pc, #764]	; (800d9fc <MadgwickUpdate+0x314>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f3bf 8f5b 	dmb	ish
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bf0c      	ite	eq
 800d70c:	2301      	moveq	r3, #1
 800d70e:	2300      	movne	r3, #0
 800d710:	b2db      	uxtb	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d017      	beq.n	800d746 <MadgwickUpdate+0x5e>
 800d716:	48b9      	ldr	r0, [pc, #740]	; (800d9fc <MadgwickUpdate+0x314>)
 800d718:	f00f fdee 	bl	801d2f8 <__cxa_guard_acquire>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bf14      	ite	ne
 800d722:	2301      	movne	r3, #1
 800d724:	2300      	moveq	r3, #0
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00c      	beq.n	800d746 <MadgwickUpdate+0x5e>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d732:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800da00 <MadgwickUpdate+0x318>
 800d736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d73a:	4bb2      	ldr	r3, [pc, #712]	; (800da04 <MadgwickUpdate+0x31c>)
 800d73c:	edc3 7a00 	vstr	s15, [r3]
 800d740:	48ae      	ldr	r0, [pc, #696]	; (800d9fc <MadgwickUpdate+0x314>)
 800d742:	f00f fde5 	bl	801d310 <__cxa_guard_release>
		float currTime = sensorData->SensorTime * 0.001f;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d74c:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800da00 <MadgwickUpdate+0x318>
 800d750:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d754:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		float deltat = (currTime - last_time);
 800d758:	4baa      	ldr	r3, [pc, #680]	; (800da04 <MadgwickUpdate+0x31c>)
 800d75a:	edd3 7a00 	vldr	s15, [r3]
 800d75e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800d762:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d766:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		last_time = currTime;
 800d76a:	4aa6      	ldr	r2, [pc, #664]	; (800da04 <MadgwickUpdate+0x31c>)
 800d76c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d76e:	6013      	str	r3, [r2, #0]

		AccRaw(0,0) = sensorData->Acc.x;
 800d770:	2200      	movs	r2, #0
 800d772:	2100      	movs	r1, #0
 800d774:	48a4      	ldr	r0, [pc, #656]	; (800da08 <MadgwickUpdate+0x320>)
 800d776:	f000 fb60 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d77a:	4602      	mov	r2, r0
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	6013      	str	r3, [r2, #0]
		AccRaw(1,0) = sensorData->Acc.y;
 800d782:	2200      	movs	r2, #0
 800d784:	2101      	movs	r1, #1
 800d786:	48a0      	ldr	r0, [pc, #640]	; (800da08 <MadgwickUpdate+0x320>)
 800d788:	f000 fb57 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d78c:	4602      	mov	r2, r0
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	6013      	str	r3, [r2, #0]
		AccRaw(2,0) = sensorData->Acc.z;
 800d794:	2200      	movs	r2, #0
 800d796:	2102      	movs	r1, #2
 800d798:	489b      	ldr	r0, [pc, #620]	; (800da08 <MadgwickUpdate+0x320>)
 800d79a:	f000 fb4e 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	6013      	str	r3, [r2, #0]
		MagRaw(0,0) = sensorData->Mag.x;
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	4898      	ldr	r0, [pc, #608]	; (800da0c <MadgwickUpdate+0x324>)
 800d7ac:	f000 fb45 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6013      	str	r3, [r2, #0]
		MagRaw(1,0) = sensorData->Mag.y;
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	4893      	ldr	r0, [pc, #588]	; (800da0c <MadgwickUpdate+0x324>)
 800d7be:	f000 fb3c 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	6013      	str	r3, [r2, #0]
		MagRaw(2,0) = sensorData->Mag.z;
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	2102      	movs	r1, #2
 800d7ce:	488f      	ldr	r0, [pc, #572]	; (800da0c <MadgwickUpdate+0x324>)
 800d7d0:	f000 fb33 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	6013      	str	r3, [r2, #0]
		GyroRaw(0,0) = sensorData->Gyro.x;
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2100      	movs	r1, #0
 800d7e0:	488b      	ldr	r0, [pc, #556]	; (800da10 <MadgwickUpdate+0x328>)
 800d7e2:	f000 fb2a 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	699b      	ldr	r3, [r3, #24]
 800d7ec:	6013      	str	r3, [r2, #0]
		GyroRaw(1,0) = sensorData->Gyro.y;
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	4887      	ldr	r0, [pc, #540]	; (800da10 <MadgwickUpdate+0x328>)
 800d7f4:	f000 fb21 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	6013      	str	r3, [r2, #0]
		GyroRaw(2,0) = sensorData->Gyro.z;
 800d800:	2200      	movs	r2, #0
 800d802:	2102      	movs	r1, #2
 800d804:	4882      	ldr	r0, [pc, #520]	; (800da10 <MadgwickUpdate+0x328>)
 800d806:	f000 fb18 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d80a:	4602      	mov	r2, r0
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	6013      	str	r3, [r2, #0]
		AccCal = CalibrateAcc(AccRaw);
 800d812:	487d      	ldr	r0, [pc, #500]	; (800da08 <MadgwickUpdate+0x320>)
 800d814:	f003 f930 	bl	8010a78 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>
 800d818:	eef0 6a40 	vmov.f32	s13, s0
 800d81c:	eeb0 7a60 	vmov.f32	s14, s1
 800d820:	eef0 7a41 	vmov.f32	s15, s2
 800d824:	4b7b      	ldr	r3, [pc, #492]	; (800da14 <MadgwickUpdate+0x32c>)
 800d826:	edc3 6a00 	vstr	s13, [r3]
 800d82a:	ed83 7a01 	vstr	s14, [r3, #4]
 800d82e:	edc3 7a02 	vstr	s15, [r3, #8]
		MagCal = CalibrateMag(MagRaw);
 800d832:	4876      	ldr	r0, [pc, #472]	; (800da0c <MadgwickUpdate+0x324>)
 800d834:	f003 f8e4 	bl	8010a00 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>
 800d838:	eef0 6a40 	vmov.f32	s13, s0
 800d83c:	eeb0 7a60 	vmov.f32	s14, s1
 800d840:	eef0 7a41 	vmov.f32	s15, s2
 800d844:	4b74      	ldr	r3, [pc, #464]	; (800da18 <MadgwickUpdate+0x330>)
 800d846:	edc3 6a00 	vstr	s13, [r3]
 800d84a:	ed83 7a01 	vstr	s14, [r3, #4]
 800d84e:	edc3 7a02 	vstr	s15, [r3, #8]
		GyroCal = CalibrateGyro(GyroRaw);
 800d852:	486f      	ldr	r0, [pc, #444]	; (800da10 <MadgwickUpdate+0x328>)
 800d854:	f003 f94c 	bl	8010af0 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>
 800d858:	eef0 6a40 	vmov.f32	s13, s0
 800d85c:	eeb0 7a60 	vmov.f32	s14, s1
 800d860:	eef0 7a41 	vmov.f32	s15, s2
 800d864:	4b6d      	ldr	r3, [pc, #436]	; (800da1c <MadgwickUpdate+0x334>)
 800d866:	edc3 6a00 	vstr	s13, [r3]
 800d86a:	ed83 7a01 	vstr	s14, [r3, #4]
 800d86e:	edc3 7a02 	vstr	s15, [r3, #8]
		//GyroCal = {{0.0f, 0.0f, 0.0f}};
		AGMSensorData sensorDataCal;
		sensorDataCal.Acc.x = AccCal(0,0);
 800d872:	2200      	movs	r2, #0
 800d874:	2100      	movs	r1, #0
 800d876:	4867      	ldr	r0, [pc, #412]	; (800da14 <MadgwickUpdate+0x32c>)
 800d878:	f000 fadf 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d87c:	4603      	mov	r3, r0
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	617b      	str	r3, [r7, #20]
		sensorDataCal.Acc.y = AccCal(1,0);
 800d882:	2200      	movs	r2, #0
 800d884:	2101      	movs	r1, #1
 800d886:	4863      	ldr	r0, [pc, #396]	; (800da14 <MadgwickUpdate+0x32c>)
 800d888:	f000 fad7 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d88c:	4603      	mov	r3, r0
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	61bb      	str	r3, [r7, #24]
		sensorDataCal.Acc.z = AccCal(2,0);
 800d892:	2200      	movs	r2, #0
 800d894:	2102      	movs	r1, #2
 800d896:	485f      	ldr	r0, [pc, #380]	; (800da14 <MadgwickUpdate+0x32c>)
 800d898:	f000 facf 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d89c:	4603      	mov	r3, r0
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	61fb      	str	r3, [r7, #28]
		sensorDataCal.Mag.x = MagCal(0,0);
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	485c      	ldr	r0, [pc, #368]	; (800da18 <MadgwickUpdate+0x330>)
 800d8a8:	f000 fac7 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	60bb      	str	r3, [r7, #8]
		sensorDataCal.Mag.y = MagCal(1,0);
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	4858      	ldr	r0, [pc, #352]	; (800da18 <MadgwickUpdate+0x330>)
 800d8b8:	f000 fabf 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	60fb      	str	r3, [r7, #12]
		sensorDataCal.Mag.z = MagCal(2,0);
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2102      	movs	r1, #2
 800d8c6:	4854      	ldr	r0, [pc, #336]	; (800da18 <MadgwickUpdate+0x330>)
 800d8c8:	f000 fab7 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	613b      	str	r3, [r7, #16]
		sensorDataCal.Gyro.x = GyroCal(0,0);
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4851      	ldr	r0, [pc, #324]	; (800da1c <MadgwickUpdate+0x334>)
 800d8d8:	f000 faaf 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	623b      	str	r3, [r7, #32]
		sensorDataCal.Gyro.y = GyroCal(1,0);
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	484d      	ldr	r0, [pc, #308]	; (800da1c <MadgwickUpdate+0x334>)
 800d8e8:	f000 faa7 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
		sensorDataCal.Gyro.z = GyroCal(2,0);
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2102      	movs	r1, #2
 800d8f6:	4849      	ldr	r0, [pc, #292]	; (800da1c <MadgwickUpdate+0x334>)
 800d8f8:	f000 fa9f 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	62bb      	str	r3, [r7, #40]	; 0x28
		currTime = (float)(HAL_GetTick()) * ms2s;
 800d902:	f7f4 fcb5 	bl	8002270 <HAL_GetTick>
 800d906:	ee07 0a90 	vmov	s15, r0
 800d90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d90e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800da00 <MadgwickUpdate+0x318>
 800d912:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d916:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		sensorDataCal.SensorTime = currTime;
 800d91a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
		Fusion.OnIMUData(sensorDataCal);
 800d91e:	f107 0308 	add.w	r3, r7, #8
 800d922:	4619      	mov	r1, r3
 800d924:	483e      	ldr	r0, [pc, #248]	; (800da20 <MadgwickUpdate+0x338>)
 800d926:	f00a ffc9 	bl	80188bc <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERK15AGMSensorData_t>
		const auto& rotMatrix = Fusion.GetRotationMatrix();
 800d92a:	483d      	ldr	r0, [pc, #244]	; (800da20 <MadgwickUpdate+0x338>)
 800d92c:	f00b fa7e 	bl	8018e2c <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>
 800d930:	66f8      	str	r0, [r7, #108]	; 0x6c
		auto acc = rotMatrix * AccCal;
 800d932:	4938      	ldr	r1, [pc, #224]	; (800da14 <MadgwickUpdate+0x32c>)
 800d934:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d936:	f000 fa96 	bl	800de66 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 800d93a:	eef0 6a40 	vmov.f32	s13, s0
 800d93e:	eeb0 7a60 	vmov.f32	s14, s1
 800d942:	eef0 7a41 	vmov.f32	s15, s2
 800d946:	edc7 6a10 	vstr	s13, [r7, #64]	; 0x40
 800d94a:	ed87 7a11 	vstr	s14, [r7, #68]	; 0x44
 800d94e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

//		filterUpdate(GyroCal(0,0), GyroCal(1,0), GyroCal(2,0),
//								AccCal(0,0), AccCal(1,0), AccCal(2,0),
//								MagCal(0,0), MagCal(1,0), MagCal(2,0),
//								sensorData->SensorTime / 1000.0f);
		Kalman.UpdateState(GyroCal, currTime);
 800d952:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d956:	4931      	ldr	r1, [pc, #196]	; (800da1c <MadgwickUpdate+0x334>)
 800d958:	4832      	ldr	r0, [pc, #200]	; (800da24 <MadgwickUpdate+0x33c>)
 800d95a:	f003 fe33 	bl	80115c4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>
		Kalman.CorrectStateAcc(AccCal, currTime);
 800d95e:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d962:	492c      	ldr	r1, [pc, #176]	; (800da14 <MadgwickUpdate+0x32c>)
 800d964:	482f      	ldr	r0, [pc, #188]	; (800da24 <MadgwickUpdate+0x33c>)
 800d966:	f005 f82b 	bl	80129c0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>
		Kalman.CorrectStateMag(MagCal, currTime);
 800d96a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800d96e:	492a      	ldr	r1, [pc, #168]	; (800da18 <MadgwickUpdate+0x330>)
 800d970:	482c      	ldr	r0, [pc, #176]	; (800da24 <MadgwickUpdate+0x33c>)
 800d972:	f004 f9d9 	bl	8011d28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>
		Q = Kalman.GetState();
 800d976:	482b      	ldr	r0, [pc, #172]	; (800da24 <MadgwickUpdate+0x33c>)
 800d978:	f003 fc46 	bl	8011208 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 800d97c:	4603      	mov	r3, r0
 800d97e:	4a2a      	ldr	r2, [pc, #168]	; (800da28 <MadgwickUpdate+0x340>)
 800d980:	4614      	mov	r4, r2
 800d982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//LOG("AHRS: \t%f, \t%f, \t%f, \t\t\t%f, \t%f, \t%f", Kalman.GetRoll(), Kalman.GetPitch(), Kalman.GetYaw(), Fusion.GetRoll(), Fusion.GetPitch(), Fusion.GetYaw());
		Mat::Quaternion newAcceleration = {0, AccCal(0,0), AccCal(1,0), AccCal(2,0)};
 800d988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	605a      	str	r2, [r3, #4]
 800d992:	609a      	str	r2, [r3, #8]
 800d994:	60da      	str	r2, [r3, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	2100      	movs	r1, #0
 800d99a:	481e      	ldr	r0, [pc, #120]	; (800da14 <MadgwickUpdate+0x32c>)
 800d99c:	f000 fa4d 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	481a      	ldr	r0, [pc, #104]	; (800da14 <MadgwickUpdate+0x32c>)
 800d9ac:	f000 fa45 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	2102      	movs	r1, #2
 800d9ba:	4816      	ldr	r0, [pc, #88]	; (800da14 <MadgwickUpdate+0x32c>)
 800d9bc:	f000 fa3d 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
//		Q.w = GetW();
//		Q.x = GetX();
//		Q.y = GetY();
//		Q.z = GetZ();
		Q = Kalman.GetState();
 800d9c6:	4817      	ldr	r0, [pc, #92]	; (800da24 <MadgwickUpdate+0x33c>)
 800d9c8:	f003 fc1e 	bl	8011208 <_ZNK10Algorithms10AHRSKalman8GetStateEv>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	4a16      	ldr	r2, [pc, #88]	; (800da28 <MadgwickUpdate+0x340>)
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		newAcceleration = (Q * newAcceleration * Q.Conjugate());
 800d9d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4812      	ldr	r0, [pc, #72]	; (800da28 <MadgwickUpdate+0x340>)
 800d9e0:	f00b fcf2 	bl	80193c8 <_ZNK3Mat10QuaternionmlERKS0_>
 800d9e4:	eeb0 6a40 	vmov.f32	s12, s0
 800d9e8:	eef0 6a60 	vmov.f32	s13, s1
 800d9ec:	eeb0 7a41 	vmov.f32	s14, s2
 800d9f0:	eef0 7a61 	vmov.f32	s15, s3
 800d9f4:	ed87 6a13 	vstr	s12, [r7, #76]	; 0x4c
 800d9f8:	e018      	b.n	800da2c <MadgwickUpdate+0x344>
 800d9fa:	bf00      	nop
 800d9fc:	240090f8 	.word	0x240090f8
 800da00:	3a83126f 	.word	0x3a83126f
 800da04:	240090f4 	.word	0x240090f4
 800da08:	2400909c 	.word	0x2400909c
 800da0c:	2400906c 	.word	0x2400906c
 800da10:	24009084 	.word	0x24009084
 800da14:	24009090 	.word	0x24009090
 800da18:	24009060 	.word	0x24009060
 800da1c:	24009078 	.word	0x24009078
 800da20:	24008cf4 	.word	0x24008cf4
 800da24:	24008fac 	.word	0x24008fac
 800da28:	240090c0 	.word	0x240090c0
 800da2c:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800da30:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 800da34:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800da38:	483e      	ldr	r0, [pc, #248]	; (800db34 <MadgwickUpdate+0x44c>)
 800da3a:	f00b fdc1 	bl	80195c0 <_ZNK3Mat10Quaternion9ConjugateEv>
 800da3e:	eeb0 6a40 	vmov.f32	s12, s0
 800da42:	eef0 6a60 	vmov.f32	s13, s1
 800da46:	eeb0 7a41 	vmov.f32	s14, s2
 800da4a:	eef0 7a61 	vmov.f32	s15, s3
 800da4e:	ed87 6a17 	vstr	s12, [r7, #92]	; 0x5c
 800da52:	edc7 6a18 	vstr	s13, [r7, #96]	; 0x60
 800da56:	ed87 7a19 	vstr	s14, [r7, #100]	; 0x64
 800da5a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800da5e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800da62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da66:	4611      	mov	r1, r2
 800da68:	4618      	mov	r0, r3
 800da6a:	f00b fcad 	bl	80193c8 <_ZNK3Mat10QuaternionmlERKS0_>
 800da6e:	eeb0 6a40 	vmov.f32	s12, s0
 800da72:	eef0 6a60 	vmov.f32	s13, s1
 800da76:	eeb0 7a41 	vmov.f32	s14, s2
 800da7a:	eef0 7a61 	vmov.f32	s15, s3
 800da7e:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 800da82:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800da86:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800da8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		LOG("Acceleration Vector: \t%f, \t%f, \t%f,  \t%f, \t%f, \t%f", acc(0,0), acc(1,0), acc(2,0), newAcceleration.x, newAcceleration.y, newAcceleration.z);
 800da8e:	f7f4 fbef 	bl	8002270 <HAL_GetTick>
 800da92:	4601      	mov	r1, r0
 800da94:	23a3      	movs	r3, #163	; 0xa3
 800da96:	4a28      	ldr	r2, [pc, #160]	; (800db38 <MadgwickUpdate+0x450>)
 800da98:	4828      	ldr	r0, [pc, #160]	; (800db3c <MadgwickUpdate+0x454>)
 800da9a:	f010 fb09 	bl	801e0b0 <iprintf>
 800da9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800daa2:	2200      	movs	r2, #0
 800daa4:	2100      	movs	r1, #0
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 f9c7 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800daac:	4603      	mov	r3, r0
 800daae:	edd3 7a00 	vldr	s15, [r3]
 800dab2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800dab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800daba:	2200      	movs	r2, #0
 800dabc:	2101      	movs	r1, #1
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 f9bb 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800dac4:	4603      	mov	r3, r0
 800dac6:	edd3 7a00 	vldr	s15, [r3]
 800daca:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800dace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dad2:	2200      	movs	r2, #0
 800dad4:	2102      	movs	r1, #2
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 f9af 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800dadc:	4603      	mov	r3, r0
 800dade:	edd3 7a00 	vldr	s15, [r3]
 800dae2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dae6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800daea:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800daee:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 800daf2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800daf6:	edd7 4a0f 	vldr	s9, [r7, #60]	; 0x3c
 800dafa:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800dafe:	ed8d 4b08 	vstr	d4, [sp, #32]
 800db02:	ed8d 5b06 	vstr	d5, [sp, #24]
 800db06:	ed8d 6b04 	vstr	d6, [sp, #16]
 800db0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db0e:	ed8d 8b00 	vstr	d8, [sp]
 800db12:	ec53 2b19 	vmov	r2, r3, d9
 800db16:	480a      	ldr	r0, [pc, #40]	; (800db40 <MadgwickUpdate+0x458>)
 800db18:	f010 faca 	bl	801e0b0 <iprintf>
 800db1c:	4809      	ldr	r0, [pc, #36]	; (800db44 <MadgwickUpdate+0x45c>)
 800db1e:	f010 fac7 	bl	801e0b0 <iprintf>
		//auto acc = Fusion.GetAcceleration();
//		printf("Orig: %f, \t%f, \t%f, \tMy: %f, \t%f, \t%f\n\r",
//				_acceleration.x, _acceleration.y, _acceleration.z,
//				acc.x, acc.y, acc.z);

		return 1;
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <MadgwickUpdate+0x440>
	}
	return 0;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	377c      	adds	r7, #124	; 0x7c
 800db2c:	46bd      	mov	sp, r7
 800db2e:	ecbd 8b04 	vpop	{d8-d9}
 800db32:	bd90      	pop	{r4, r7, pc}
 800db34:	240090c0 	.word	0x240090c0
 800db38:	080201e4 	.word	0x080201e4
 800db3c:	080201f4 	.word	0x080201f4
 800db40:	08020204 	.word	0x08020204
 800db44:	08020238 	.word	0x08020238

0800db48 <OnGNSSData>:

uint8_t OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
	Fusion.OnGNSSData(GNSSData);
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	4804      	ldr	r0, [pc, #16]	; (800db64 <OnGNSSData+0x1c>)
 800db54:	f00a ffbe 	bl	8018ad4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>
}
 800db58:	bf00      	nop
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	24008cf4 	.word	0x24008cf4

0800db68 <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(float val)
{
	static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	601a      	str	r2, [r3, #0]
 800db7a:	bf00      	nop
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <_ZN3Mat6MatrixILt6ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800db86:	b590      	push	{r4, r7, lr}
 800db88:	b083      	sub	sp, #12
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4618      	mov	r0, r3
 800db96:	f000 f9a5 	bl	800dee4 <_ZNSt5arrayIfLj36EE5beginEv>
 800db9a:	4604      	mov	r4, r0
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 f9ac 	bl	800defc <_ZNSt5arrayIfLj36EE3endEv>
 800dba4:	4603      	mov	r3, r0
 800dba6:	edd7 7a00 	vldr	s15, [r7]
 800dbaa:	eeb0 0a67 	vmov.f32	s0, s15
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 f9b0 	bl	800df16 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd90      	pop	{r4, r7, pc}

0800dbc0 <_ZN3Mat8V_VectorILt4EEC1Ev>:
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
	return std::sqrt(result);
}

template <u_short length>
V_Vector<length>::V_Vector() : Matrix<length, 1>() {}
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 f9bf 	bl	800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>:
	using MeassurementVec = V_Vector<meassurementLen>;
	using StateCovarianceMatrix = Matrix<stateLen, stateLen>;
	using ControlCovarianceMatrix = Matrix<controlLen, controlLen>;
	using MeasurementCovarianceMatrix = Matrix<meassurementLen, meassurementLen>;

	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800dbf0:	b4b0      	push	{r4, r5, r7}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
 800dbfc:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800dc00:	4a10      	ldr	r2, [pc, #64]	; (800dc44 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EEC1ERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf+0x54>)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	1d1c      	adds	r4, r3, #4
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	f103 0414 	add.w	r4, r3, #20
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	655a      	str	r2, [r3, #84]	; 0x54
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bcb0      	pop	{r4, r5, r7}
 800dc42:	4770      	bx	lr
 800dc44:	080204ec 	.word	0x080204ec

0800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>:
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 f986 	bl	800df64 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>:
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	ExtendedKalmanFilter(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800dc78:	b5b0      	push	{r4, r5, r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	ed87 0a00 	vstr	s0, [r7]
		: _state{state}, _stateCovMatrix{stateCovMatrix}, _time{time}{}
 800dc88:	4a0e      	ldr	r2, [pc, #56]	; (800dcc4 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EEC1ERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf+0x4c>)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	601a      	str	r2, [r3, #0]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	1d1c      	adds	r4, r3, #4
 800dc94:	4615      	mov	r5, r2
 800dc96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dc9e:	e884 0003 	stmia.w	r4, {r0, r1}
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	331c      	adds	r3, #28
 800dca8:	4611      	mov	r1, r2
 800dcaa:	2290      	movs	r2, #144	; 0x90
 800dcac:	4618      	mov	r0, r3
 800dcae:	f010 fad4 	bl	801e25a <memcpy>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bdb0      	pop	{r4, r5, r7, pc}
 800dcc4:	08020518 	.word	0x08020518

0800dcc8 <_ZN3Mat8V_VectorILt3EEC1Ev>:
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f951 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}

0800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>:
 800dce2:	b480      	push	{r7}
 800dce4:	b083      	sub	sp, #12
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800dd04:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800dd3c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 f950 	bl	800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	81fb      	strh	r3, [r7, #14]
 800dd12:	e00b      	b.n	800dd2c <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800dd14:	89fa      	ldrh	r2, [r7, #14]
 800dd16:	89fb      	ldrh	r3, [r7, #14]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f964 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 800dd20:	4602      	mov	r2, r0
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800dd26:	89fb      	ldrh	r3, [r7, #14]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	81fb      	strh	r3, [r7, #14]
 800dd2c:	89fb      	ldrh	r3, [r7, #14]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d9f0      	bls.n	800dd14 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800dd32:	bf00      	nop
}
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	00000000 	.word	0x00000000

0800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>:

template <u_short heigth, u_short width>
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}

template <u_short heigth, u_short width>
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	807b      	strh	r3, [r7, #2]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	803b      	strh	r3, [r7, #0]
{
	u_int index = width * row + col;
 800dd50:	887a      	ldrh	r2, [r7, #2]
 800dd52:	4613      	mov	r3, r2
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	4413      	add	r3, r2
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	883b      	ldrh	r3, [r7, #0]
 800dd5e:	4413      	add	r3, r2
 800dd60:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68f9      	ldr	r1, [r7, #12]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 f957 	bl	800e01a <_ZNSt5arrayIfLj36EEixEj>
 800dd6c:	4603      	mov	r3, r0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
	...

0800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800dd84:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ddbc <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f964 	bl	800e056 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800dd8e:	2300      	movs	r3, #0
 800dd90:	81fb      	strh	r3, [r7, #14]
 800dd92:	e00b      	b.n	800ddac <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800dd94:	89fa      	ldrh	r2, [r7, #14]
 800dd96:	89fb      	ldrh	r3, [r7, #14]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 f978 	bl	800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800dda0:	4602      	mov	r2, r0
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800dda6:	89fb      	ldrh	r3, [r7, #14]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	81fb      	strh	r3, [r7, #14]
 800ddac:	89fb      	ldrh	r3, [r7, #14]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d9f0      	bls.n	800dd94 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800ddb2:	bf00      	nop
}
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	00000000 	.word	0x00000000

0800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	ca07      	ldmia	r2, {r0, r1, r2}
 800ddd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	370c      	adds	r7, #12
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800dde2:	b480      	push	{r7}
 800dde4:	b083      	sub	sp, #12
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f955 	bl	800e0be <_ZNSt5arrayIfLj3EE5beginEv>
 800de14:	4604      	mov	r4, r0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	f000 f95c 	bl	800e0d6 <_ZNSt5arrayIfLj3EE3endEv>
 800de1e:	4603      	mov	r3, r0
 800de20:	edd7 7a00 	vldr	s15, [r7]
 800de24:	eeb0 0a67 	vmov.f32	s0, s15
 800de28:	4619      	mov	r1, r3
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 f960 	bl	800e0f0 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	bd90      	pop	{r4, r7, pc}

0800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	460b      	mov	r3, r1
 800de44:	807b      	strh	r3, [r7, #2]
 800de46:	4613      	mov	r3, r2
 800de48:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800de4a:	887a      	ldrh	r2, [r7, #2]
 800de4c:	883b      	ldrh	r3, [r7, #0]
 800de4e:	4413      	add	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 f966 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 800de5c:	4603      	mov	r3, r0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>:
	result *= val;
	return result;
}

template <u_short heigth, u_short width> template <u_short other_width>
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800de66:	b580      	push	{r7, lr}
 800de68:	b08c      	sub	sp, #48	; 0x30
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6178      	str	r0, [r7, #20]
 800de6e:	6139      	str	r1, [r7, #16]
{
	Matrix<heigth, other_width> result;
 800de70:	f107 0318 	add.w	r3, r7, #24
 800de74:	4618      	mov	r0, r3
 800de76:	f000 f880 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
	Multiply(other, result);
 800de7a:	f107 0318 	add.w	r3, r7, #24
 800de7e:	461a      	mov	r2, r3
 800de80:	6939      	ldr	r1, [r7, #16]
 800de82:	6978      	ldr	r0, [r7, #20]
 800de84:	f000 f95f 	bl	800e146 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>
	return result;
 800de88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de8c:	f107 0218 	add.w	r2, r7, #24
 800de90:	ca07      	ldmia	r2, {r0, r1, r2}
 800de92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800de96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	ee06 1a90 	vmov	s13, r1
 800dea0:	ee07 2a10 	vmov	s14, r2
 800dea4:	ee07 3a90 	vmov	s15, r3
}
 800dea8:	eeb0 0a66 	vmov.f32	s0, s13
 800deac:	eef0 0a47 	vmov.f32	s1, s14
 800deb0:	eeb0 1a67 	vmov.f32	s2, s15
 800deb4:	3730      	adds	r7, #48	; 0x30
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <_ZNK3Mat8V_VectorILt6EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 800deba:	b580      	push	{r7, lr}
 800debc:	b082      	sub	sp, #8
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	460b      	mov	r3, r1
 800dec4:	807b      	strh	r3, [r7, #2]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	887a      	ldrh	r2, [r7, #2]
 800deca:	4611      	mov	r1, r2
 800decc:	4618      	mov	r0, r3
 800dece:	f000 f9ee 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 800ded2:	4603      	mov	r3, r0
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	ee07 3a90 	vmov	s15, r3
 800deda:	eeb0 0a67 	vmov.f32	s0, s15
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_ZNSt5arrayIfLj36EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f9ed 	bl	800e2cc <_ZNSt5arrayIfLj36EE4dataEv>
 800def2:	4603      	mov	r3, r0
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <_ZNSt5arrayIfLj36EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f9e1 	bl	800e2cc <_ZNSt5arrayIfLj36EE4dataEv>
 800df0a:	4603      	mov	r3, r0
 800df0c:	3390      	adds	r3, #144	; 0x90
 800df0e:	4618      	mov	r0, r3
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
   *  If @p __f has a return value it is ignored.
  */
  template<typename _InputIterator, typename _Function>
    _GLIBCXX20_CONSTEXPR
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);
      for (; __first != __last; ++__first)
 800df24:	e007      	b.n	800df36 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800df26:	1d3b      	adds	r3, r7, #4
 800df28:	68f9      	ldr	r1, [r7, #12]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff fe1c 	bl	800db68 <_ZZN3Mat6MatrixILt6ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	3304      	adds	r3, #4
 800df34:	60fb      	str	r3, [r7, #12]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d1f3      	bne.n	800df26 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	ee07 3a90 	vmov	s15, r3
    }
 800df44:	eeb0 0a67 	vmov.f32	s0, s15
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800df4e:	b480      	push	{r7}
 800df50:	b083      	sub	sp, #12
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>:
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4618      	mov	r0, r3
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>:
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	bf00      	nop
 800dfa4:	370c      	adds	r7, #12
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800dfae:	b590      	push	{r4, r7, lr}
 800dfb0:	b083      	sub	sp, #12
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 f992 	bl	800e2e6 <_ZNSt5arrayIfLj9EE5beginEv>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 f999 	bl	800e2fe <_ZNSt5arrayIfLj9EE3endEv>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	edd7 7a00 	vldr	s15, [r7]
 800dfd2:	eeb0 0a67 	vmov.f32	s0, s15
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 f99d 	bl	800e318 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd90      	pop	{r4, r7, pc}

0800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	460b      	mov	r3, r1
 800dff2:	807b      	strh	r3, [r7, #2]
 800dff4:	4613      	mov	r3, r2
 800dff6:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800dff8:	887a      	ldrh	r2, [r7, #2]
 800dffa:	4613      	mov	r3, r2
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	441a      	add	r2, r3
 800e000:	883b      	ldrh	r3, [r7, #0]
 800e002:	4413      	add	r3, r2
 800e004:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	68f9      	ldr	r1, [r7, #12]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 f9a0 	bl	800e350 <_ZNSt5arrayIfLj9EEixEj>
 800e010:	4603      	mov	r3, r0
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <_ZNSt5arrayIfLj36EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b082      	sub	sp, #8
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	4618      	mov	r0, r3
 800e02a:	f000 f9a0 	bl	800e36e <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 800e02e:	4603      	mov	r3, r0
      }
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	bf00      	nop
 800e04c:	370c      	adds	r7, #12
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr

0800e056 <_ZN3Mat6MatrixILt4ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 800e056:	b590      	push	{r4, r7, lr}
 800e058:	b083      	sub	sp, #12
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4618      	mov	r0, r3
 800e066:	f000 f991 	bl	800e38c <_ZNSt5arrayIfLj16EE5beginEv>
 800e06a:	4604      	mov	r4, r0
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 f998 	bl	800e3a4 <_ZNSt5arrayIfLj16EE3endEv>
 800e074:	4603      	mov	r3, r0
 800e076:	edd7 7a00 	vldr	s15, [r7]
 800e07a:	eeb0 0a67 	vmov.f32	s0, s15
 800e07e:	4619      	mov	r1, r3
 800e080:	4620      	mov	r0, r4
 800e082:	f000 f99c 	bl	800e3be <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4618      	mov	r0, r3
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd90      	pop	{r4, r7, pc}

0800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	807b      	strh	r3, [r7, #2]
 800e09c:	4613      	mov	r3, r2
 800e09e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e0a0:	887b      	ldrh	r3, [r7, #2]
 800e0a2:	009a      	lsls	r2, r3, #2
 800e0a4:	883b      	ldrh	r3, [r7, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68f9      	ldr	r1, [r7, #12]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 f9a1 	bl	800e3f6 <_ZNSt5arrayIfLj16EEixEj>
 800e0b4:	4603      	mov	r3, r0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <_ZNSt5arrayIfLj3EE5beginEv>:
      begin() noexcept
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f9a4 	bl	800e414 <_ZNSt5arrayIfLj3EE4dataEv>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <_ZNSt5arrayIfLj3EE3endEv>:
      end() noexcept
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f998 	bl	800e414 <_ZNSt5arrayIfLj3EE4dataEv>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	330c      	adds	r3, #12
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e0fe:	e007      	b.n	800e110 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e100:	1d3b      	adds	r3, r7, #4
 800e102:	68f9      	ldr	r1, [r7, #12]
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff fe6c 	bl	800dde2 <_ZZN3Mat6MatrixILt3ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3304      	adds	r3, #4
 800e10e:	60fb      	str	r3, [r7, #12]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	429a      	cmp	r2, r3
 800e116:	d1f3      	bne.n	800e100 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	ee07 3a90 	vmov	s15, r3
    }
 800e11e:	eeb0 0a67 	vmov.f32	s0, s15
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	4618      	mov	r0, r3
 800e138:	f000 f979 	bl	800e42e <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800e13c:	4603      	mov	r3, r0
      }
 800e13e:	4618      	mov	r0, r3
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_>:

template <u_short heigth, u_short width> template <u_short other_width>
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800e146:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e148:	b095      	sub	sp, #84	; 0x54
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	60f8      	str	r0, [r7, #12]
 800e14e:	60b9      	str	r1, [r7, #8]
 800e150:	607a      	str	r2, [r7, #4]
{
	std::array<Row, other_width> other_columns;
	std::array<Row, heigth> this_rows;
	for(u_short row = 0; row < heigth; ++row)
 800e152:	2300      	movs	r3, #0
 800e154:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e158:	e02d      	b.n	800e1b6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800e15a:	2300      	movs	r3, #0
 800e15c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e160:	e020      	b.n	800e1a4 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800e162:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e166:	f107 0314 	add.w	r3, r7, #20
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f96d 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800e172:	4602      	mov	r2, r0
 800e174:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f7ff ffd4 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 800e180:	4604      	mov	r4, r0
 800e182:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800e186:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e18a:	4619      	mov	r1, r3
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 f96c 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 800e192:	eef0 7a40 	vmov.f32	s15, s0
 800e196:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800e19a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e19e:	3301      	adds	r3, #1
 800e1a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e1a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e1a8:	2b02      	cmp	r3, #2
 800e1aa:	d9da      	bls.n	800e162 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800e1ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e1b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d9cd      	bls.n	800e15a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x14>

	for(u_short col = 0; col < other_width; ++col)
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e1c4:	e02d      	b.n	800e222 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e1cc:	e020      	b.n	800e210 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800e1ce:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e1d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 f963 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7ff ff9e 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800e1f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	68b8      	ldr	r0, [r7, #8]
 800e1fa:	f000 f962 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 800e1fe:	eef0 7a40 	vmov.f32	s15, s0
 800e202:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800e206:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e20a:	3301      	adds	r3, #1
 800e20c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e210:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e214:	2b02      	cmp	r3, #2
 800e216:	d9da      	bls.n	800e1ce <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800e218:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e21c:	3301      	adds	r3, #1
 800e21e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e222:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0cd      	beq.n	800e1c6 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x80>

	for(u_short row = 0; row < heigth; ++row)
 800e22a:	2300      	movs	r3, #0
 800e22c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e230:	e034      	b.n	800e29c <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800e232:	2300      	movs	r3, #0
 800e234:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e238:	e027      	b.n	800e28a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800e23a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e23e:	f107 0314 	add.w	r3, r7, #20
 800e242:	4611      	mov	r1, r2
 800e244:	4618      	mov	r0, r3
 800e246:	f000 f901 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800e24a:	4605      	mov	r5, r0
 800e24c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e250:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e254:	4611      	mov	r1, r2
 800e256:	4618      	mov	r0, r3
 800e258:	f000 f924 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 800e25c:	4606      	mov	r6, r0
 800e25e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e262:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fde6 	bl	800de3a <_ZN3Mat6MatrixILt3ELt1EEclEtt>
 800e26e:	4604      	mov	r4, r0
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	f000 f93f 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 800e278:	eef0 7a40 	vmov.f32	s15, s0
 800e27c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800e280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e284:	3301      	adds	r3, #1
 800e286:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e28a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d0d3      	beq.n	800e23a <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800e292:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e296:	3301      	adds	r3, #1
 800e298:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e29c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d9c6      	bls.n	800e232 <_ZNK3Mat6MatrixILt3ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERS3_+0xec>
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	3754      	adds	r7, #84	; 0x54
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2ae <_ZNKSt5arrayIfLj6EEixEj>:

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f94d 	bl	800e55c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800e2c2:	4603      	mov	r3, r0
      }
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZNSt5arrayIfLj36EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f000 f94f 	bl	800e57a <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <_ZNSt5arrayIfLj9EE5beginEv>:
      begin() noexcept
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f94e 	bl	800e590 <_ZNSt5arrayIfLj9EE4dataEv>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <_ZNSt5arrayIfLj9EE3endEv>:
      end() noexcept
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f942 	bl	800e590 <_ZNSt5arrayIfLj9EE4dataEv>
 800e30c:	4603      	mov	r3, r0
 800e30e:	3324      	adds	r3, #36	; 0x24
 800e310:	4618      	mov	r0, r3
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e326:	e007      	b.n	800e338 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e328:	1d3b      	adds	r3, r7, #4
 800e32a:	68f9      	ldr	r1, [r7, #12]
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7ff fe2f 	bl	800df90 <_ZZN3Mat6MatrixILt3ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3304      	adds	r3, #4
 800e336:	60fb      	str	r3, [r7, #12]
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d1f3      	bne.n	800e328 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	ee07 3a90 	vmov	s15, r3
    }
 800e346:	eeb0 0a67 	vmov.f32	s0, s15
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <_ZNSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) noexcept
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f923 	bl	800e5aa <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800e364:	4603      	mov	r3, r0
      }
 800e366:	4618      	mov	r0, r3
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e36e:	b480      	push	{r7}
 800e370:	b083      	sub	sp, #12
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	4413      	add	r3, r2
 800e380:	4618      	mov	r0, r3
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <_ZNSt5arrayIfLj16EE5beginEv>:
      begin() noexcept
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f917 	bl	800e5c8 <_ZNSt5arrayIfLj16EE4dataEv>
 800e39a:	4603      	mov	r3, r0
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZNSt5arrayIfLj16EE3endEv>:
      end() noexcept
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 f90b 	bl	800e5c8 <_ZNSt5arrayIfLj16EE4dataEv>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	3340      	adds	r3, #64	; 0x40
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	60f8      	str	r0, [r7, #12]
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 800e3cc:	e007      	b.n	800e3de <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 800e3ce:	1d3b      	adds	r3, r7, #4
 800e3d0:	68f9      	ldr	r1, [r7, #12]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7ff fe30 	bl	800e038 <_ZZN3Mat6MatrixILt4ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	60fb      	str	r3, [r7, #12]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d1f3      	bne.n	800e3ce <_ZSt8for_eachIPfZN3Mat6MatrixILt4ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	ee07 3a90 	vmov	s15, r3
    }
 800e3ec:	eeb0 0a67 	vmov.f32	s0, s15
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <_ZNSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) noexcept
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	4618      	mov	r0, r3
 800e406:	f000 f8ec 	bl	800e5e2 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800e40a:	4603      	mov	r3, r0
      }
 800e40c:	4618      	mov	r0, r3
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <_ZNSt5arrayIfLj3EE4dataEv>:
      data() noexcept
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 f8ee 	bl	800e600 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 800e424:	4603      	mov	r3, r0
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	4413      	add	r3, r2
 800e440:	4618      	mov	r0, r3
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 f8db 	bl	800e616 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800e460:	4603      	mov	r3, r0
      }
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b084      	sub	sp, #16
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	460b      	mov	r3, r1
 800e474:	807b      	strh	r3, [r7, #2]
 800e476:	4613      	mov	r3, r2
 800e478:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e47a:	887a      	ldrh	r2, [r7, #2]
 800e47c:	4613      	mov	r3, r2
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	441a      	add	r2, r3
 800e482:	883b      	ldrh	r3, [r7, #0]
 800e484:	4413      	add	r3, r2
 800e486:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 f8d4 	bl	800e63a <_ZNKSt5arrayIfLj9EEixEj>
 800e492:	4603      	mov	r3, r0
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	ee07 3a90 	vmov	s15, r3
}
 800e49a:	eeb0 0a67 	vmov.f32	s0, s15
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>:
      operator[](size_type __n) noexcept
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f000 f8d0 	bl	800e658 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>
 800e4b8:	4603      	mov	r3, r0
      }
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b084      	sub	sp, #16
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	807b      	strh	r3, [r7, #2]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800e4d2:	887a      	ldrh	r2, [r7, #2]
 800e4d4:	883b      	ldrh	r3, [r7, #0]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68f9      	ldr	r1, [r7, #12]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f8cc 	bl	800e67c <_ZNKSt5arrayIfLj3EEixEj>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	ee07 3a90 	vmov	s15, r3
}
 800e4ec:	eeb0 0a67 	vmov.f32	s0, s15
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	ed2d 8b02 	vpush	{d8}
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 800e504:	f04f 0300 	mov.w	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 800e50a:	2300      	movs	r3, #0
 800e50c:	60bb      	str	r3, [r7, #8]
 800e50e:	e018      	b.n	800e542 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x4c>
 800e510:	68b9      	ldr	r1, [r7, #8]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f8b2 	bl	800e67c <_ZNKSt5arrayIfLj3EEixEj>
 800e518:	4603      	mov	r3, r0
 800e51a:	ed93 8a00 	vldr	s16, [r3]
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	6838      	ldr	r0, [r7, #0]
 800e522:	f000 f8ab 	bl	800e67c <_ZNKSt5arrayIfLj3EEixEj>
 800e526:	4603      	mov	r3, r0
 800e528:	edd3 7a00 	vldr	s15, [r3]
 800e52c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e530:	ed97 7a03 	vldr	s14, [r7, #12]
 800e534:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e538:	edc7 7a03 	vstr	s15, [r7, #12]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	3301      	adds	r3, #1
 800e540:	60bb      	str	r3, [r7, #8]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b02      	cmp	r3, #2
 800e546:	d9e3      	bls.n	800e510 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	ee07 3a90 	vmov	s15, r3
}
 800e54e:	eeb0 0a67 	vmov.f32	s0, s15
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	ecbd 8b02 	vpop	{d8}
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	4413      	add	r3, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <_ZNSt14__array_traitsIfLj36EE6_S_ptrERA36_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <_ZNSt5arrayIfLj9EE4dataEv>:
      data() noexcept
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 f87d 	bl	800e69a <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e5aa:	b480      	push	{r7}
 800e5ac:	b083      	sub	sp, #12
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <_ZNSt5arrayIfLj16EE4dataEv>:
      data() noexcept
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 f86c 	bl	800e6b0 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e5e2:	b480      	push	{r7}
 800e5e4:	b083      	sub	sp, #12
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4618      	mov	r0, r3
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	4613      	mov	r3, r2
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	4413      	add	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	4413      	add	r3, r2
 800e62e:	4618      	mov	r0, r3
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e638:	4770      	bx	lr

0800e63a <_ZNKSt5arrayIfLj9EEixEj>:
      operator[](size_type __n) const noexcept
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b082      	sub	sp, #8
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	f7ff ffae 	bl	800e5aa <_ZNSt14__array_traitsIfLj9EE6_S_refERA9_Kfj>
 800e64e:	4603      	mov	r3, r0
      }
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZNSt14__array_traitsISt5arrayIfLj3EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	4613      	mov	r3, r2
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	4413      	add	r3, r2
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <_ZNKSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) const noexcept
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7ff fecf 	bl	800e42e <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 800e690:	4603      	mov	r3, r0
      }
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <_ZNSt14__array_traitsIfLj9EE6_S_ptrERA9_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e69a:	b480      	push	{r7}
 800e69c:	b083      	sub	sp, #12
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <_ZNSt14__array_traitsIfLj16EE6_S_ptrERA16_Kf>:
      _S_ptr(const _Type& __t) noexcept
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <_Z41__static_initialization_and_destruction_0ii>:

Vec3 GetAcceleration()
{
	Vec3 result;
	return result;
}
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b09a      	sub	sp, #104	; 0x68
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	f040 8093 	bne.w	800e800 <_Z41__static_initialization_and_destruction_0ii+0x138>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	f040 808d 	bne.w	800e800 <_Z41__static_initialization_and_destruction_0ii+0x138>
Algorithms::FusionAlgorithm Fusion{};
 800e6e6:	4848      	ldr	r0, [pc, #288]	; (800e808 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800e6e8:	f7fe fe82 	bl	800d3f0 <_ZN10Algorithms15FusionAlgorithmC1Ev>
Algorithms::AHRSKalman Kalman{};
 800e6ec:	4847      	ldr	r0, [pc, #284]	; (800e80c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800e6ee:	f7fe ff43 	bl	800d578 <_ZN10Algorithms10AHRSKalmanC1Ev>
Mat::Matrix<3, 1> MagCal({0, 0, 0});
 800e6f2:	f04f 0300 	mov.w	r3, #0
 800e6f6:	60bb      	str	r3, [r7, #8]
 800e6f8:	f04f 0300 	mov.w	r3, #0
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	f04f 0300 	mov.w	r3, #0
 800e702:	613b      	str	r3, [r7, #16]
 800e704:	f107 0308 	add.w	r3, r7, #8
 800e708:	4619      	mov	r1, r3
 800e70a:	4841      	ldr	r0, [pc, #260]	; (800e810 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800e70c:	f7ff fb58 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> MagRaw({0, 0, 0});
 800e710:	f04f 0300 	mov.w	r3, #0
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	f04f 0300 	mov.w	r3, #0
 800e71a:	61bb      	str	r3, [r7, #24]
 800e71c:	f04f 0300 	mov.w	r3, #0
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	f107 0314 	add.w	r3, r7, #20
 800e726:	4619      	mov	r1, r3
 800e728:	483a      	ldr	r0, [pc, #232]	; (800e814 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800e72a:	f7ff fb49 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCal({0, 0, 0});
 800e72e:	f04f 0300 	mov.w	r3, #0
 800e732:	623b      	str	r3, [r7, #32]
 800e734:	f04f 0300 	mov.w	r3, #0
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
 800e73a:	f04f 0300 	mov.w	r3, #0
 800e73e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e740:	f107 0320 	add.w	r3, r7, #32
 800e744:	4619      	mov	r1, r3
 800e746:	4834      	ldr	r0, [pc, #208]	; (800e818 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800e748:	f7ff fb3a 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRaw({0, 0, 0});
 800e74c:	f04f 0300 	mov.w	r3, #0
 800e750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e752:	f04f 0300 	mov.w	r3, #0
 800e756:	633b      	str	r3, [r7, #48]	; 0x30
 800e758:	f04f 0300 	mov.w	r3, #0
 800e75c:	637b      	str	r3, [r7, #52]	; 0x34
 800e75e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e762:	4619      	mov	r1, r3
 800e764:	482d      	ldr	r0, [pc, #180]	; (800e81c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800e766:	f7ff fb2b 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccCal({0, 0, 0});
 800e76a:	f04f 0300 	mov.w	r3, #0
 800e76e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e770:	f04f 0300 	mov.w	r3, #0
 800e774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e776:	f04f 0300 	mov.w	r3, #0
 800e77a:	643b      	str	r3, [r7, #64]	; 0x40
 800e77c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e780:	4619      	mov	r1, r3
 800e782:	4827      	ldr	r0, [pc, #156]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800e784:	f7ff fb1c 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> AccRaw({0, 0, 0});
 800e788:	f04f 0300 	mov.w	r3, #0
 800e78c:	647b      	str	r3, [r7, #68]	; 0x44
 800e78e:	f04f 0300 	mov.w	r3, #0
 800e792:	64bb      	str	r3, [r7, #72]	; 0x48
 800e794:	f04f 0300 	mov.w	r3, #0
 800e798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e79a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e79e:	4619      	mov	r1, r3
 800e7a0:	4820      	ldr	r0, [pc, #128]	; (800e824 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800e7a2:	f7ff fb0d 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroRawMean({0, 0, 0});
 800e7a6:	f04f 0300 	mov.w	r3, #0
 800e7aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e7ac:	f04f 0300 	mov.w	r3, #0
 800e7b0:	657b      	str	r3, [r7, #84]	; 0x54
 800e7b2:	f04f 0300 	mov.w	r3, #0
 800e7b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e7bc:	4619      	mov	r1, r3
 800e7be:	481a      	ldr	r0, [pc, #104]	; (800e828 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800e7c0:	f7ff fafe 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> GyroCalMean({0, 0, 0});
 800e7c4:	f04f 0300 	mov.w	r3, #0
 800e7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7ca:	f04f 0300 	mov.w	r3, #0
 800e7ce:	663b      	str	r3, [r7, #96]	; 0x60
 800e7d0:	f04f 0300 	mov.w	r3, #0
 800e7d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e7d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e7da:	4619      	mov	r1, r3
 800e7dc:	4813      	ldr	r0, [pc, #76]	; (800e82c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800e7de:	f7ff faef 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
Mat::Matrix<3, 1> angle = 0.0f;
 800e7e2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e830 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e7e6:	4813      	ldr	r0, [pc, #76]	; (800e834 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800e7e8:	f7ff fb0a 	bl	800de00 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> speed = 0.0f;
 800e7ec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e830 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e7f0:	4811      	ldr	r0, [pc, #68]	; (800e838 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800e7f2:	f7ff fb05 	bl	800de00 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
Mat::Matrix<3, 1> meanMag = 0.0f;
 800e7f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e830 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800e7fa:	4810      	ldr	r0, [pc, #64]	; (800e83c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800e7fc:	f7ff fb00 	bl	800de00 <_ZN3Mat6MatrixILt3ELt1EEC1Ef>
}
 800e800:	bf00      	nop
 800e802:	3768      	adds	r7, #104	; 0x68
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	24008cf4 	.word	0x24008cf4
 800e80c:	24008fac 	.word	0x24008fac
 800e810:	24009060 	.word	0x24009060
 800e814:	2400906c 	.word	0x2400906c
 800e818:	24009078 	.word	0x24009078
 800e81c:	24009084 	.word	0x24009084
 800e820:	24009090 	.word	0x24009090
 800e824:	2400909c 	.word	0x2400909c
 800e828:	240090a8 	.word	0x240090a8
 800e82c:	240090b4 	.word	0x240090b4
 800e830:	00000000 	.word	0x00000000
 800e834:	240090d0 	.word	0x240090d0
 800e838:	240090dc 	.word	0x240090dc
 800e83c:	240090e8 	.word	0x240090e8

0800e840 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE4InitERKN3Mat8V_VectorILt4EEERKNS2_6MatrixILt4ELt4EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800e840:	b4b0      	push	{r4, r5, r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	1d1c      	adds	r4, r3, #4
 800e856:	4613      	mov	r3, r2
 800e858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e85a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_stateCovMatrix = stateCovMatrix;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	f103 0414 	add.w	r4, r3, #20
 800e866:	4615      	mov	r5, r2
 800e868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e86c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e86e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e874:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_time = time;}
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	655a      	str	r2, [r3, #84]	; 0x54
 800e882:	bf00      	nop
 800e884:	3714      	adds	r7, #20
 800e886:	46bd      	mov	sp, r7
 800e888:	bcb0      	pop	{r4, r5, r7}
 800e88a:	4770      	bx	lr

0800e88c <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
	StateCovarianceMatrix _stateCovMatrix;
	float _time;
};

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800e88c:	b5b0      	push	{r4, r5, r7, lr}
 800e88e:	b0e4      	sub	sp, #400	; 0x190
 800e890:	af00      	add	r7, sp, #0
 800e892:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e896:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e89a:	6018      	str	r0, [r3, #0]
 800e89c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e8a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800e8a4:	6019      	str	r1, [r3, #0]
 800e8a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e8aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e8b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e8b8:	ed83 0a00 	vstr	s0, [r3]
		const ControlVec& controlVec,
		const ControlCovarianceMatrix& controlCov,
		float time)
{
	const StateCovarianceMatrix F = _F(controlVec, time);
 800e8bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e8c0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3310      	adds	r3, #16
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e8d0:	f5a2 74a0 	sub.w	r4, r2, #320	; 0x140
 800e8d4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e8d8:	f5a2 70a8 	sub.w	r0, r2, #336	; 0x150
 800e8dc:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e8e0:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800e8e4:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800e8e8:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800e8ec:	ed90 0a00 	vldr	s0, [r0]
 800e8f0:	6812      	ldr	r2, [r2, #0]
 800e8f2:	6809      	ldr	r1, [r1, #0]
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800e8f8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e8fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f103 0214 	add.w	r2, r3, #20
 800e906:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e90a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 fbc4 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800e914:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e918:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e91c:	4611      	mov	r1, r2
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 fbcf 	bl	800f0c2 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 800e924:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e92c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800e930:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800e934:	4618      	mov	r0, r3
 800e936:	f000 fbb1 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800e93a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e93e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	3314      	adds	r3, #20
 800e948:	681c      	ldr	r4, [r3, #0]
 800e94a:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800e94e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e952:	f5a3 70a8 	sub.w	r0, r3, #336	; 0x150
 800e956:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e95a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e95e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e962:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800e966:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 800e96a:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 800e96e:	ed90 0a00 	vldr	s0, [r0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6812      	ldr	r2, [r2, #0]
 800e976:	6809      	ldr	r1, [r1, #0]
 800e978:	4628      	mov	r0, r5
 800e97a:	47a0      	blx	r4
 800e97c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e980:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e984:	681c      	ldr	r4, [r3, #0]
 800e986:	463b      	mov	r3, r7
 800e988:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800e98c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800e990:	4618      	mov	r0, r3
 800e992:	f000 fbc6 	bl	800f122 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 800e996:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e99a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e99e:	3414      	adds	r4, #20
 800e9a0:	461d      	mov	r5, r3
 800e9a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e9b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_state = _f(controlVec, time);
 800e9b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e9ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	330c      	adds	r3, #12
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e9ca:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800e9ce:	6814      	ldr	r4, [r2, #0]
 800e9d0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e9d4:	f5a2 70a8 	sub.w	r0, r2, #336	; 0x150
 800e9d8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e9dc:	f5a2 71a4 	sub.w	r1, r2, #328	; 0x148
 800e9e0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800e9e4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800e9e8:	ed90 0a00 	vldr	s0, [r0]
 800e9ec:	6809      	ldr	r1, [r1, #0]
 800e9ee:	6810      	ldr	r0, [r2, #0]
 800e9f0:	4798      	blx	r3
 800e9f2:	eeb0 6a40 	vmov.f32	s12, s0
 800e9f6:	eef0 6a60 	vmov.f32	s13, s1
 800e9fa:	eeb0 7a41 	vmov.f32	s14, s2
 800e9fe:	eef0 7a61 	vmov.f32	s15, s3
 800ea02:	ed84 6a01 	vstr	s12, [r4, #4]
 800ea06:	edc4 6a02 	vstr	s13, [r4, #8]
 800ea0a:	ed84 7a03 	vstr	s14, [r4, #12]
 800ea0e:	edc4 7a04 	vstr	s15, [r4, #16]
	_time = time;
 800ea12:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ea16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ea20:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800ea24:	6812      	ldr	r2, [r2, #0]
 800ea26:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ea28:	bf00      	nop
 800ea2a:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bdb0      	pop	{r4, r5, r7, pc}

0800ea32 <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:

template <u_short stateLen, u_short controlLen, u_short meassurementLen>
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800ea32:	b5b0      	push	{r4, r5, r7, lr}
 800ea34:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea3e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ea42:	6018      	str	r0, [r3, #0]
 800ea44:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea48:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ea4c:	6019      	str	r1, [r3, #0]
 800ea4e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea52:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800ea56:	601a      	str	r2, [r3, #0]
 800ea58:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea5c:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800ea60:	ed83 0a00 	vstr	s0, [r3]
		const MeassurementVec& meassurementVec,
		const MeasurementCovarianceMatrix& meassurementCov,
		float time)
{
	auto H = _H();
 800ea64:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea68:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	331c      	adds	r3, #28
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ea78:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
 800ea7c:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ea80:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 800ea84:	6811      	ldr	r1, [r2, #0]
 800ea86:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800ea88:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea8c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f103 0214 	add.w	r2, r3, #20
 800ea96:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ea9a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800ea9e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 fb5a 	bl	800f15c <_ZNK3Mat6MatrixILt6ELt4EEmlILt4EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>
 800eaa8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eaac:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800eab0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800eab4:	4611      	mov	r1, r2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f000 fb63 	bl	800f182 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>
 800eabc:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eac0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800eac4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800eac8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 fb88 	bl	800f1e2 <_ZNK3Mat6MatrixILt6ELt4EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>
 800ead2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ead6:	f5a3 6092 	sub.w	r0, r3, #1168	; 0x490
 800eada:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eade:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800eae2:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	f000 fb8e 	bl	800f208 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800eaec:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eaf0:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f103 0414 	add.w	r4, r3, #20
 800eafa:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eafe:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800eb02:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800eb06:	4611      	mov	r1, r2
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f000 fb3a 	bl	800f182 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>
 800eb0e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb12:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800eb16:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 fb8a 	bl	800f236 <_ZNK3Mat6MatrixILt4ELt4EEmlILt6EEENS0_ILt4EXT_EEERKS3_>
 800eb22:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb26:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	3320      	adds	r3, #32
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800eb36:	f5a2 70c8 	sub.w	r0, r2, #400	; 0x190
 800eb3a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800eb3e:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 800eb42:	f2a1 41f4 	subw	r1, r1, #1268	; 0x4f4
 800eb46:	6809      	ldr	r1, [r1, #0]
 800eb48:	4798      	blx	r3
 800eb4a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb4e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800eb52:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800eb56:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 fb7e 	bl	800f25c <_ZNK3Mat6MatrixILt4ELt6EEmlILt6EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
	_state += K * (meassurementVec - _h());
 800eb60:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb64:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	1d1c      	adds	r4, r3, #4
 800eb6c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb70:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800eb74:	681d      	ldr	r5, [r3, #0]
 800eb76:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800eb7a:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3318      	adds	r3, #24
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 800eb8a:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800eb8e:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 800eb92:	6811      	ldr	r1, [r2, #0]
 800eb94:	4798      	blx	r3
 800eb96:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800eb9a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 fb6e 	bl	800f282 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800eba6:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800ebaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ebae:	4611      	mov	r1, r2
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 fb7f 	bl	800f2b4 <_ZNK3Mat6MatrixILt4ELt6EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
 800ebb6:	eeb0 6a40 	vmov.f32	s12, s0
 800ebba:	eef0 6a60 	vmov.f32	s13, s1
 800ebbe:	eeb0 7a41 	vmov.f32	s14, s2
 800ebc2:	eef0 7a61 	vmov.f32	s15, s3
 800ebc6:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ebca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ebce:	ed83 6a00 	vstr	s12, [r3]
 800ebd2:	edc3 6a01 	vstr	s13, [r3, #4]
 800ebd6:	ed83 7a02 	vstr	s14, [r3, #8]
 800ebda:	edc3 7a03 	vstr	s15, [r3, #12]
 800ebde:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f000 fb94 	bl	800f312 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800ebea:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800ebee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff f8c0 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 800ebf8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800ebfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ec00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fbb9 	bl	800f37c <_ZNK3Mat6MatrixILt4ELt6EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>
 800ec0a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800ec0e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800ec12:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 fbc3 	bl	800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 800ec1c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec20:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f103 0214 	add.w	r2, r3, #20
 800ec2a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec2e:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ec32:	681c      	ldr	r4, [r3, #0]
 800ec34:	463b      	mov	r3, r7
 800ec36:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fa2e 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 800ec40:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec44:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800ec48:	3414      	adds	r4, #20
 800ec4a:	461d      	mov	r5, r3
 800ec4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ec5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_time = time;
 800ec60:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ec64:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800ec6e:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800ec72:	6812      	ldr	r2, [r2, #0]
 800ec74:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ec76:	bf00      	nop
 800ec78:	f507 67a8 	add.w	r7, r7, #1344	; 0x540
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bdb0      	pop	{r4, r5, r7, pc}

0800ec80 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE4InitERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
	virtual void Init(const StateVec& state, const StateCovarianceMatrix& stateCovMatrix, float time)
 800ec80:	b5b0      	push	{r4, r5, r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	ed87 0a00 	vstr	s0, [r7]
		{_state = state;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	1d1c      	adds	r4, r3, #4
 800ec96:	4615      	mov	r5, r2
 800ec98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eca0:	e884 0003 	stmia.w	r4, {r0, r1}
		_stateCovMatrix = stateCovMatrix;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	331c      	adds	r3, #28
 800ecaa:	4611      	mov	r1, r2
 800ecac:	2290      	movs	r2, #144	; 0x90
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f00f fad3 	bl	801e25a <memcpy>
		_time = time;}
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bdb0      	pop	{r4, r5, r7, pc}

0800ecc4 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>:
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Predict(
 800ecc4:	b5b0      	push	{r4, r5, r7, lr}
 800ecc6:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ecd0:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ecd4:	6018      	str	r0, [r3, #0]
 800ecd6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ecda:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ecde:	6019      	str	r1, [r3, #0]
 800ece0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ece4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ece8:	601a      	str	r2, [r3, #0]
 800ecea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ecee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ecf2:	ed83 0a00 	vstr	s0, [r3]
	const StateCovarianceMatrix F = _F(controlVec, time);
 800ecf6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ecfa:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3310      	adds	r3, #16
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ed0a:	f5a2 7434 	sub.w	r4, r2, #720	; 0x2d0
 800ed0e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ed12:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800ed16:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ed1a:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800ed1e:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800ed22:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800ed26:	ed90 0a00 	vldr	s0, [r0]
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	6809      	ldr	r1, [r1, #0]
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4798      	blx	r3
	_stateCovMatrix = F * _stateCovMatrix * F.Transposed() + _Q(controlVec, controlCov, time);
 800ed32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed36:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f103 021c 	add.w	r2, r3, #28
 800ed40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800ed48:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f000 fb45 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ed52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800ed5a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f000 fb4e 	bl	800f402 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800ed66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed6a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800ed6e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800ed72:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 fb30 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ed7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed80:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3314      	adds	r3, #20
 800ed8a:	681c      	ldr	r4, [r3, #0]
 800ed8c:	f507 7538 	add.w	r5, r7, #736	; 0x2e0
 800ed90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed94:	f5a3 7038 	sub.w	r0, r3, #736	; 0x2e0
 800ed98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ed9c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800eda0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eda4:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800eda8:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800edac:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800edb0:	ed90 0a00 	vldr	s0, [r0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6812      	ldr	r2, [r2, #0]
 800edb8:	6809      	ldr	r1, [r1, #0]
 800edba:	4628      	mov	r0, r5
 800edbc:	47a0      	blx	r4
 800edbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edc2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800edc6:	681c      	ldr	r4, [r3, #0]
 800edc8:	463b      	mov	r3, r7
 800edca:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800edce:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800edd2:	4618      	mov	r0, r3
 800edd4:	f000 fa18 	bl	800f208 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
 800edd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800eddc:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800ede0:	f104 031c 	add.w	r3, r4, #28
 800ede4:	4611      	mov	r1, r2
 800ede6:	2290      	movs	r2, #144	; 0x90
 800ede8:	4618      	mov	r0, r3
 800edea:	f00f fa36 	bl	801e25a <memcpy>
	_state = _f(controlVec, time);
 800edee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800edf2:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	330c      	adds	r3, #12
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee02:	f5a2 7235 	sub.w	r2, r2, #724	; 0x2d4
 800ee06:	6814      	ldr	r4, [r2, #0]
 800ee08:	463d      	mov	r5, r7
 800ee0a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee0e:	f5a2 7038 	sub.w	r0, r2, #736	; 0x2e0
 800ee12:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee16:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 800ee1a:	f507 715c 	add.w	r1, r7, #880	; 0x370
 800ee1e:	f5a1 7135 	sub.w	r1, r1, #724	; 0x2d4
 800ee22:	ed90 0a00 	vldr	s0, [r0]
 800ee26:	6812      	ldr	r2, [r2, #0]
 800ee28:	6809      	ldr	r1, [r1, #0]
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	4798      	blx	r3
 800ee2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee32:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800ee36:	3404      	adds	r4, #4
 800ee38:	461d      	mov	r5, r3
 800ee3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee42:	e884 0003 	stmia.w	r4, {r0, r1}
	_time = time;
 800ee46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800ee4a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800ee54:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ee58:	6812      	ldr	r2, [r2, #0]
 800ee5a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800ee5e:	bf00      	nop
 800ee60:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bdb0      	pop	{r4, r5, r7, pc}

0800ee68 <_ZN10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE6UpdateERKN3Mat8V_VectorILt6EEERKNS2_6MatrixILt6ELt6EEEf>:
void ExtendedKalmanFilter<stateLen, controlLen, meassurementLen>::Update(
 800ee68:	b5b0      	push	{r4, r5, r7, lr}
 800ee6a:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ee74:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ee78:	6018      	str	r0, [r3, #0]
 800ee7a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ee7e:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800ee82:	6019      	str	r1, [r3, #0]
 800ee84:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ee88:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ee92:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800ee96:	ed83 0a00 	vstr	s0, [r3]
	auto H = _H();
 800ee9a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ee9e:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	331c      	adds	r3, #28
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800eeae:	f5a2 60bd 	sub.w	r0, r2, #1512	; 0x5e8
 800eeb2:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800eeb6:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800eeba:	6811      	ldr	r1, [r2, #0]
 800eebc:	4798      	blx	r3
	auto S = H * _stateCovMatrix * H.Transposed() + meassurementCov;
 800eebe:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800eec2:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f103 021c 	add.w	r2, r3, #28
 800eecc:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800eed0:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800eed4:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800eed8:	4618      	mov	r0, r3
 800eeda:	f000 fa7f 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800eede:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800eee2:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800eee6:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 fa88 	bl	800f402 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800eef2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800eef6:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800eefa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800eefe:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 fa6a 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ef08:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef0c:	f5a3 60cf 	sub.w	r0, r3, #1656	; 0x678
 800ef10:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef14:	f2a3 7314 	subw	r3, r3, #1812	; 0x714
 800ef18:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	f000 f973 	bl	800f208 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() *_InvertMatrix(S);
 800ef22:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef26:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f103 041c 	add.w	r4, r3, #28
 800ef30:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef34:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800ef38:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 fa5f 	bl	800f402 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>
 800ef44:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef48:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800ef4c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800ef50:	4621      	mov	r1, r4
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 fa42 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800ef58:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef5c:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3320      	adds	r3, #32
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800ef6c:	f5a2 7022 	sub.w	r0, r2, #648	; 0x288
 800ef70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef74:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800ef78:	f2a1 710c 	subw	r1, r1, #1804	; 0x70c
 800ef7c:	6809      	ldr	r1, [r1, #0]
 800ef7e:	4798      	blx	r3
 800ef80:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef84:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800ef88:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800ef8c:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800ef90:	4618      	mov	r0, r3
 800ef92:	f000 fa23 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
	_state += K * (meassurementVec - _h());
 800ef96:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ef9a:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	1d1c      	adds	r4, r3, #4
 800efa2:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efa6:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 800efaa:	681d      	ldr	r5, [r3, #0]
 800efac:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efb0:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	3318      	adds	r3, #24
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800efc0:	f5a2 70e4 	sub.w	r0, r2, #456	; 0x1c8
 800efc4:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800efc8:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 800efcc:	6811      	ldr	r1, [r2, #0]
 800efce:	4798      	blx	r3
 800efd0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efd4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800efd8:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 800efdc:	4629      	mov	r1, r5
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 f94f 	bl	800f282 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>
 800efe4:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800efe8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800efec:	f507 62b9 	add.w	r2, r7, #1480	; 0x5c8
 800eff0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fa34 	bl	800f462 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>
 800effa:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800effe:	4619      	mov	r1, r3
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fa41 	bl	800f488 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<stateLen>(1.0f) - K*H) * _stateCovMatrix;
 800f006:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f00a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800f00e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f012:	4618      	mov	r0, r3
 800f014:	f000 fa6e 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 800f018:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800f01c:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800f020:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800f024:	4618      	mov	r0, r3
 800f026:	f000 f9d9 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800f02a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f02e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800f032:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800f036:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 fa7e 	bl	800f53c <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 800f040:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f044:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f103 021c 	add.w	r2, r3, #28
 800f04e:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f052:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f056:	681c      	ldr	r4, [r3, #0]
 800f058:	463b      	mov	r3, r7
 800f05a:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800f05e:	4618      	mov	r0, r3
 800f060:	f000 f9bc 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 800f064:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f068:	f5a3 62f5 	sub.w	r2, r3, #1960	; 0x7a8
 800f06c:	f104 031c 	add.w	r3, r4, #28
 800f070:	4611      	mov	r1, r2
 800f072:	2290      	movs	r2, #144	; 0x90
 800f074:	4618      	mov	r0, r3
 800f076:	f00f f8f0 	bl	801e25a <memcpy>
	_time = time;
 800f07a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800f07e:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800f088:	f5a2 62e3 	sub.w	r2, r2, #1816	; 0x718
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800f092:	bf00      	nop
 800f094:	f507 67f5 	add.w	r7, r7, #1960	; 0x7a8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bdb0      	pop	{r4, r5, r7, pc}

0800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f7fe fd96 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	68b8      	ldr	r0, [r7, #8]
 800f0b4:	f000 fa59 	bl	800f56a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 800f0b8:	bf00      	nop
}
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>:
		result += (v * v);
	return sqrt(result);
}

template <u_short heigth, u_short width>
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f0c2:	b590      	push	{r4, r7, lr}
 800f0c4:	b085      	sub	sp, #20
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
{
	Matrix<width, heigth> result;
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7fe fd84 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	81fb      	strh	r3, [r7, #14]
 800f0d6:	e01c      	b.n	800f112 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f0d8:	2300      	movs	r3, #0
 800f0da:	81bb      	strh	r3, [r7, #12]
 800f0dc:	e013      	b.n	800f106 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f0de:	89ba      	ldrh	r2, [r7, #12]
 800f0e0:	89fb      	ldrh	r3, [r7, #14]
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7fe ffd3 	bl	800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	89fa      	ldrh	r2, [r7, #14]
 800f0ee:	89bb      	ldrh	r3, [r7, #12]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6838      	ldr	r0, [r7, #0]
 800f0f4:	f000 faed 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f0f8:	eef0 7a40 	vmov.f32	s15, s0
 800f0fc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f100:	89bb      	ldrh	r3, [r7, #12]
 800f102:	3301      	adds	r3, #1
 800f104:	81bb      	strh	r3, [r7, #12]
 800f106:	89bb      	ldrh	r3, [r7, #12]
 800f108:	2b03      	cmp	r3, #3
 800f10a:	d9e8      	bls.n	800f0de <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f10c:	89fb      	ldrh	r3, [r7, #14]
 800f10e:	3301      	adds	r3, #1
 800f110:	81fb      	strh	r3, [r7, #14]
 800f112:	89fb      	ldrh	r3, [r7, #14]
 800f114:	2b03      	cmp	r3, #3
 800f116:	d9df      	bls.n	800f0d8 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv+0x16>
	return result;
 800f118:	bf00      	nop
}
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd90      	pop	{r4, r7, pc}

0800f122 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800f122:	b5b0      	push	{r4, r5, r7, lr}
 800f124:	b084      	sub	sp, #16
 800f126:	af00      	add	r7, sp, #0
 800f128:	60f8      	str	r0, [r7, #12]
 800f12a:	60b9      	str	r1, [r7, #8]
 800f12c:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	4614      	mov	r4, r2
 800f134:	461d      	mov	r5, r3
 800f136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f142:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 800f14a:	6879      	ldr	r1, [r7, #4]
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f000 fadb 	bl	800f708 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>
	return result;
 800f152:	bf00      	nop
}
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	3710      	adds	r7, #16
 800f158:	46bd      	mov	sp, r7
 800f15a:	bdb0      	pop	{r4, r5, r7, pc}

0800f15c <_ZNK3Mat6MatrixILt6ELt4EEmlILt4EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 fb02 	bl	800f772 <_ZN3Mat6MatrixILt6ELt4EEC1Ev>
	Multiply(other, result);
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	6879      	ldr	r1, [r7, #4]
 800f172:	68b8      	ldr	r0, [r7, #8]
 800f174:	f000 fb08 	bl	800f788 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 800f178:	bf00      	nop
}
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f182:	b590      	push	{r4, r7, lr}
 800f184:	b085      	sub	sp, #20
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f000 fbaf 	bl	800f8f0 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f192:	2300      	movs	r3, #0
 800f194:	81fb      	strh	r3, [r7, #14]
 800f196:	e01c      	b.n	800f1d2 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f198:	2300      	movs	r3, #0
 800f19a:	81bb      	strh	r3, [r7, #12]
 800f19c:	e013      	b.n	800f1c6 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f19e:	89ba      	ldrh	r2, [r7, #12]
 800f1a0:	89fb      	ldrh	r3, [r7, #14]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fbae 	bl	800f906 <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	89fa      	ldrh	r2, [r7, #14]
 800f1ae:	89bb      	ldrh	r3, [r7, #12]
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6838      	ldr	r0, [r7, #0]
 800f1b4:	f000 fbc2 	bl	800f93c <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800f1b8:	eef0 7a40 	vmov.f32	s15, s0
 800f1bc:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f1c0:	89bb      	ldrh	r3, [r7, #12]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	81bb      	strh	r3, [r7, #12]
 800f1c6:	89bb      	ldrh	r3, [r7, #12]
 800f1c8:	2b05      	cmp	r3, #5
 800f1ca:	d9e8      	bls.n	800f19e <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f1cc:	89fb      	ldrh	r3, [r7, #14]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	81fb      	strh	r3, [r7, #14]
 800f1d2:	89fb      	ldrh	r3, [r7, #14]
 800f1d4:	2b03      	cmp	r3, #3
 800f1d6:	d9df      	bls.n	800f198 <_ZNK3Mat6MatrixILt6ELt4EE10TransposedEv+0x16>
	return result;
 800f1d8:	bf00      	nop
}
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd90      	pop	{r4, r7, pc}

0800f1e2 <_ZNK3Mat6MatrixILt6ELt4EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b084      	sub	sp, #16
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	60f8      	str	r0, [r7, #12]
 800f1ea:	60b9      	str	r1, [r7, #8]
 800f1ec:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f7fe fd37 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	68b8      	ldr	r0, [r7, #8]
 800f1fa:	f000 fbba 	bl	800f972 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 800f1fe:	bf00      	nop
}
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <_ZNK3Mat6MatrixILt6ELt6EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	4610      	mov	r0, r2
 800f21a:	4619      	mov	r1, r3
 800f21c:	2390      	movs	r3, #144	; 0x90
 800f21e:	461a      	mov	r2, r3
 800f220:	f00f f81b 	bl	801e25a <memcpy>
	result += other;
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f000 fc57 	bl	800fada <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>
	return result;
 800f22c:	bf00      	nop
}
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <_ZNK3Mat6MatrixILt4ELt4EEmlILt6EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f236:	b580      	push	{r7, lr}
 800f238:	b084      	sub	sp, #16
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	60b9      	str	r1, [r7, #8]
 800f240:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 fb54 	bl	800f8f0 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	Multiply(other, result);
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	6879      	ldr	r1, [r7, #4]
 800f24c:	68b8      	ldr	r0, [r7, #8]
 800f24e:	f000 fc79 	bl	800fb44 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 800f252:	bf00      	nop
}
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_ZNK3Mat6MatrixILt4ELt6EEmlILt6EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f000 fb41 	bl	800f8f0 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>
	Multiply(other, result);
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	68b8      	ldr	r0, [r7, #8]
 800f274:	f000 fd1a 	bl	800fcac <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f278:	bf00      	nop
}
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <_ZNK3Mat6MatrixILt6ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f282:	b5b0      	push	{r4, r5, r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	60f8      	str	r0, [r7, #12]
 800f28a:	60b9      	str	r1, [r7, #8]
 800f28c:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	4614      	mov	r4, r2
 800f294:	461d      	mov	r5, r3
 800f296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f29a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f29e:	e884 0003 	stmia.w	r4, {r0, r1}
	result -= other;
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 fdcb 	bl	800fe40 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>
	return result;
 800f2aa:	bf00      	nop
}
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bdb0      	pop	{r4, r5, r7, pc}

0800f2b4 <_ZNK3Mat6MatrixILt4ELt6EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f2b4:	b590      	push	{r4, r7, lr}
 800f2b6:	b08f      	sub	sp, #60	; 0x3c
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6178      	str	r0, [r7, #20]
 800f2bc:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 800f2be:	f107 0318 	add.w	r3, r7, #24
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fe fe43 	bl	800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 800f2c8:	f107 0318 	add.w	r3, r7, #24
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	6939      	ldr	r1, [r7, #16]
 800f2d0:	6978      	ldr	r0, [r7, #20]
 800f2d2:	f000 fdea 	bl	800feaa <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f2d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f2da:	f107 0318 	add.w	r3, r7, #24
 800f2de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ec:	ee06 0a10 	vmov	s12, r0
 800f2f0:	ee06 1a90 	vmov	s13, r1
 800f2f4:	ee07 2a10 	vmov	s14, r2
 800f2f8:	ee07 3a90 	vmov	s15, r3
}
 800f2fc:	eeb0 0a46 	vmov.f32	s0, s12
 800f300:	eef0 0a66 	vmov.f32	s1, s13
 800f304:	eeb0 1a47 	vmov.f32	s2, s14
 800f308:	eef0 1a67 	vmov.f32	s3, s15
 800f30c:	373c      	adds	r7, #60	; 0x3c
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd90      	pop	{r4, r7, pc}

0800f312 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f312:	b580      	push	{r7, lr}
 800f314:	ed2d 8b02 	vpush	{d8}
 800f318:	b084      	sub	sp, #16
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
 800f31e:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f320:	2300      	movs	r3, #0
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e016      	b.n	800f354 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_+0x42>
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	68f9      	ldr	r1, [r7, #12]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 fe8b 	bl	8010046 <_ZNKSt5arrayIfLj4EEixEj>
 800f330:	4603      	mov	r3, r0
 800f332:	ed93 8a00 	vldr	s16, [r3]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	68f9      	ldr	r1, [r7, #12]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fe74 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f340:	4603      	mov	r3, r0
 800f342:	edd3 7a00 	vldr	s15, [r3]
 800f346:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f34a:	edc3 7a00 	vstr	s15, [r3]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3301      	adds	r3, #1
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4618      	mov	r0, r3
 800f358:	f000 fe5b 	bl	8010012 <_ZNKSt5arrayIfLj4EE4sizeEv>
 800f35c:	4602      	mov	r2, r0
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	4293      	cmp	r3, r2
 800f362:	bf34      	ite	cc
 800f364:	2301      	movcc	r3, #1
 800f366:	2300      	movcs	r3, #0
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1db      	bne.n	800f326 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_+0x14>
	return *this;
 800f36e:	687b      	ldr	r3, [r7, #4]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	ecbd 8b02 	vpop	{d8}
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <_ZNK3Mat6MatrixILt4ELt6EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7fe fc26 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	68b8      	ldr	r0, [r7, #8]
 800f394:	f000 fe66 	bl	8010064 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 800f398:	bf00      	nop
}
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f3a2:	b5b0      	push	{r4, r5, r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	4614      	mov	r4, r2
 800f3b4:	461d      	mov	r5, r3
 800f3b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f3c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result -= other;
 800f3ca:	6879      	ldr	r1, [r7, #4]
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 fefd 	bl	80101cc <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>
	return result;
 800f3d2:	bf00      	nop
}
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bdb0      	pop	{r4, r5, r7, pc}

0800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7fe fc3a 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	68b8      	ldr	r0, [r7, #8]
 800f3f4:	f000 ff1f 	bl	8010236 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800f3f8:	bf00      	nop
}
 800f3fa:	68f8      	ldr	r0, [r7, #12]
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 800f402:	b590      	push	{r4, r7, lr}
 800f404:	b085      	sub	sp, #20
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7fe fc28 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 800f412:	2300      	movs	r3, #0
 800f414:	81fb      	strh	r3, [r7, #14]
 800f416:	e01c      	b.n	800f452 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 800f418:	2300      	movs	r3, #0
 800f41a:	81bb      	strh	r3, [r7, #12]
 800f41c:	e013      	b.n	800f446 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 800f41e:	89ba      	ldrh	r2, [r7, #12]
 800f420:	89fb      	ldrh	r3, [r7, #14]
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7fe fc8b 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800f42a:	4604      	mov	r4, r0
 800f42c:	89fa      	ldrh	r2, [r7, #14]
 800f42e:	89bb      	ldrh	r3, [r7, #12]
 800f430:	4619      	mov	r1, r3
 800f432:	6838      	ldr	r0, [r7, #0]
 800f434:	f000 ffc9 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800f438:	eef0 7a40 	vmov.f32	s15, s0
 800f43c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 800f440:	89bb      	ldrh	r3, [r7, #12]
 800f442:	3301      	adds	r3, #1
 800f444:	81bb      	strh	r3, [r7, #12]
 800f446:	89bb      	ldrh	r3, [r7, #12]
 800f448:	2b05      	cmp	r3, #5
 800f44a:	d9e8      	bls.n	800f41e <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 800f44c:	89fb      	ldrh	r3, [r7, #14]
 800f44e:	3301      	adds	r3, #1
 800f450:	81fb      	strh	r3, [r7, #14]
 800f452:	89fb      	ldrh	r3, [r7, #14]
 800f454:	2b05      	cmp	r3, #5
 800f456:	d9df      	bls.n	800f418 <_ZNK3Mat6MatrixILt6ELt6EE10TransposedEv+0x16>
	return result;
 800f458:	bf00      	nop
}
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd90      	pop	{r4, r7, pc}

0800f462 <_ZNK3Mat6MatrixILt6ELt6EEmlILt1EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 800f462:	b580      	push	{r7, lr}
 800f464:	b084      	sub	sp, #16
 800f466:	af00      	add	r7, sp, #0
 800f468:	60f8      	str	r0, [r7, #12]
 800f46a:	60b9      	str	r1, [r7, #8]
 800f46c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7fe fd78 	bl	800df64 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	68b8      	ldr	r0, [r7, #8]
 800f47a:	f000 ffc5 	bl	8010408 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 800f47e:	bf00      	nop
}
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	3710      	adds	r7, #16
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f488:	b580      	push	{r7, lr}
 800f48a:	ed2d 8b02 	vpush	{d8}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f496:	2300      	movs	r3, #0
 800f498:	60fb      	str	r3, [r7, #12]
 800f49a:	e016      	b.n	800f4ca <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x42>
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	68f9      	ldr	r1, [r7, #12]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fe ff04 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	ed93 8a00 	vldr	s16, [r3]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	68f9      	ldr	r1, [r7, #12]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f001 f868 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	edd3 7a00 	vldr	s15, [r3]
 800f4bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f4c0:	edc3 7a00 	vstr	s15, [r3]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	60fb      	str	r3, [r7, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f001 f84f 	bl	8010570 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	bf34      	ite	cc
 800f4da:	2301      	movcc	r3, #1
 800f4dc:	2300      	movcs	r3, #0
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1db      	bne.n	800f49c <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_+0x14>
	return *this;
 800f4e4:	687b      	ldr	r3, [r7, #4]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	ecbd 8b02 	vpop	{d8}
 800f4f0:	bd80      	pop	{r7, pc}
	...

0800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>:
Matrix<size, size> Eye(float val = 1.0f)
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	ed87 0a00 	vstr	s0, [r7]
	Matrix<size, size> result{0.0f};
 800f500:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f538 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x44>
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7fe fb3e 	bl	800db86 <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
	for(u_short i = 0; i < size; ++i)
 800f50a:	2300      	movs	r3, #0
 800f50c:	81fb      	strh	r3, [r7, #14]
 800f50e:	e00b      	b.n	800f528 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x34>
		result(i, i) = val;
 800f510:	89fa      	ldrh	r2, [r7, #14]
 800f512:	89fb      	ldrh	r3, [r7, #14]
 800f514:	4619      	mov	r1, r3
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7fe fc12 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800f51c:	4602      	mov	r2, r0
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	6013      	str	r3, [r2, #0]
	for(u_short i = 0; i < size; ++i)
 800f522:	89fb      	ldrh	r3, [r7, #14]
 800f524:	3301      	adds	r3, #1
 800f526:	81fb      	strh	r3, [r7, #14]
 800f528:	89fb      	ldrh	r3, [r7, #14]
 800f52a:	2b05      	cmp	r3, #5
 800f52c:	d9f0      	bls.n	800f510 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf+0x1c>
	return result;
 800f52e:	bf00      	nop
}
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	00000000 	.word	0x00000000

0800f53c <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 800f548:	68fa      	ldr	r2, [r7, #12]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	4610      	mov	r0, r2
 800f54e:	4619      	mov	r1, r3
 800f550:	2390      	movs	r3, #144	; 0x90
 800f552:	461a      	mov	r2, r3
 800f554:	f00e fe81 	bl	801e25a <memcpy>
	result -= other;
 800f558:	6879      	ldr	r1, [r7, #4]
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f001 f822 	bl	80105a4 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>
	return result;
 800f560:	bf00      	nop
}
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800f56a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56c:	b0a9      	sub	sp, #164	; 0xa4
 800f56e:	af00      	add	r7, sp, #0
 800f570:	60f8      	str	r0, [r7, #12]
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800f576:	2300      	movs	r3, #0
 800f578:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800f57c:	e02d      	b.n	800f5da <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800f57e:	2300      	movs	r3, #0
 800f580:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800f584:	e020      	b.n	800f5c8 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800f586:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800f58a:	f107 0314 	add.w	r3, r7, #20
 800f58e:	4611      	mov	r1, r2
 800f590:	4618      	mov	r0, r3
 800f592:	f001 f83c 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f596:	4602      	mov	r2, r0
 800f598:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f59c:	4619      	mov	r1, r3
 800f59e:	4610      	mov	r0, r2
 800f5a0:	f000 fd42 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800f5aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f000 f88e 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f5b6:	eef0 7a40 	vmov.f32	s15, s0
 800f5ba:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800f5be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800f5c8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f5cc:	2b03      	cmp	r3, #3
 800f5ce:	d9da      	bls.n	800f586 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800f5d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800f5da:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f5de:	2b03      	cmp	r3, #3
 800f5e0:	d9cd      	bls.n	800f57e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800f5e8:	e02d      	b.n	800f646 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800f5f0:	e020      	b.n	800f634 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800f5f2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800f5f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f001 f806 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f602:	4602      	mov	r2, r0
 800f604:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f608:	4619      	mov	r1, r3
 800f60a:	4610      	mov	r0, r2
 800f60c:	f000 fd0c 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f610:	4604      	mov	r4, r0
 800f612:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800f616:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f61a:	4619      	mov	r1, r3
 800f61c:	68b8      	ldr	r0, [r7, #8]
 800f61e:	f000 f858 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f622:	eef0 7a40 	vmov.f32	s15, s0
 800f626:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800f62a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f62e:	3301      	adds	r3, #1
 800f630:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800f634:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800f638:	2b03      	cmp	r3, #3
 800f63a:	d9da      	bls.n	800f5f2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800f63c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f640:	3301      	adds	r3, #1
 800f642:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800f646:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f64a:	2b03      	cmp	r3, #3
 800f64c:	d9cd      	bls.n	800f5ea <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800f64e:	2300      	movs	r3, #0
 800f650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800f654:	e034      	b.n	800f6c0 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800f656:	2300      	movs	r3, #0
 800f658:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f65c:	e027      	b.n	800f6ae <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800f65e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f662:	f107 0314 	add.w	r3, r7, #20
 800f666:	4611      	mov	r1, r2
 800f668:	4618      	mov	r0, r3
 800f66a:	f000 ffd0 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f66e:	4605      	mov	r5, r0
 800f670:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800f674:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 ffc7 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f680:	4606      	mov	r6, r0
 800f682:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800f686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f68a:	4619      	mov	r1, r3
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7fe fcff 	bl	800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 800f692:	4604      	mov	r4, r0
 800f694:	4631      	mov	r1, r6
 800f696:	4628      	mov	r0, r5
 800f698:	f000 ffc8 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800f69c:	eef0 7a40 	vmov.f32	s15, s0
 800f6a0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800f6a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f6ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f6b2:	2b03      	cmp	r3, #3
 800f6b4:	d9d3      	bls.n	800f65e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800f6b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800f6c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d9c6      	bls.n	800f656 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 800f6c8:	bf00      	nop
 800f6ca:	bf00      	nop
 800f6cc:	37a4      	adds	r7, #164	; 0xa4
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	460b      	mov	r3, r1
 800f6dc:	807b      	strh	r3, [r7, #2]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f6e2:	887b      	ldrh	r3, [r7, #2]
 800f6e4:	009a      	lsls	r2, r3, #2
 800f6e6:	883b      	ldrh	r3, [r7, #0]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68f9      	ldr	r1, [r7, #12]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 ffce 	bl	8010692 <_ZNKSt5arrayIfLj16EEixEj>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	ee07 3a90 	vmov	s15, r3
}
 800f6fe:	eeb0 0a67 	vmov.f32	s0, s15
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800f708:	b580      	push	{r7, lr}
 800f70a:	ed2d 8b02 	vpush	{d8}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800f716:	2300      	movs	r3, #0
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e016      	b.n	800f74a <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x42>
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	68f9      	ldr	r1, [r7, #12]
 800f720:	4618      	mov	r0, r3
 800f722:	f000 ffb6 	bl	8010692 <_ZNKSt5arrayIfLj16EEixEj>
 800f726:	4603      	mov	r3, r0
 800f728:	ed93 8a00 	vldr	s16, [r3]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68f9      	ldr	r1, [r7, #12]
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fe60 	bl	800e3f6 <_ZNSt5arrayIfLj16EEixEj>
 800f736:	4603      	mov	r3, r0
 800f738:	edd3 7a00 	vldr	s15, [r3]
 800f73c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f740:	edc3 7a00 	vstr	s15, [r3]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	3301      	adds	r3, #1
 800f748:	60fb      	str	r3, [r7, #12]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 ffaf 	bl	80106b0 <_ZNKSt5arrayIfLj16EE4sizeEv>
 800f752:	4602      	mov	r2, r0
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	4293      	cmp	r3, r2
 800f758:	bf34      	ite	cc
 800f75a:	2301      	movcc	r3, #1
 800f75c:	2300      	movcs	r3, #0
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1db      	bne.n	800f71c <_ZN3Mat6MatrixILt4ELt4EEpLERKS1_+0x14>
	return *this;
 800f764:	687b      	ldr	r3, [r7, #4]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	ecbd 8b02 	vpop	{d8}
 800f770:	bd80      	pop	{r7, pc}

0800f772 <_ZN3Mat6MatrixILt6ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800f772:	b480      	push	{r7}
 800f774:	b083      	sub	sp, #12
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800f788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f78a:	b0b1      	sub	sp, #196	; 0xc4
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800f794:	2300      	movs	r3, #0
 800f796:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f79a:	e02d      	b.n	800f7f8 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800f79c:	2300      	movs	r3, #0
 800f79e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800f7a2:	e020      	b.n	800f7e6 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800f7a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f7a8:	f107 0314 	add.w	r3, r7, #20
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 ff89 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4610      	mov	r0, r2
 800f7be:	f000 fc33 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800f7c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 f8b4 	bl	800f93c <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800f7d4:	eef0 7a40 	vmov.f32	s15, s0
 800f7d8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800f7dc:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800f7e6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d9da      	bls.n	800f7a4 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800f7ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f7f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f7fc:	2b05      	cmp	r3, #5
 800f7fe:	d9cd      	bls.n	800f79c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800f800:	2300      	movs	r3, #0
 800f802:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800f806:	e02d      	b.n	800f864 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800f808:	2300      	movs	r3, #0
 800f80a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800f80e:	e020      	b.n	800f852 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800f810:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f814:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f818:	4611      	mov	r1, r2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f000 fef7 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f820:	4602      	mov	r2, r0
 800f822:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f826:	4619      	mov	r1, r3
 800f828:	4610      	mov	r0, r2
 800f82a:	f000 fbfd 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f82e:	4604      	mov	r4, r0
 800f830:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800f834:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f838:	4619      	mov	r1, r3
 800f83a:	68b8      	ldr	r0, [r7, #8]
 800f83c:	f7ff ff49 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800f840:	eef0 7a40 	vmov.f32	s15, s0
 800f844:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800f848:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f84c:	3301      	adds	r3, #1
 800f84e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800f852:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800f856:	2b03      	cmp	r3, #3
 800f858:	d9da      	bls.n	800f810 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800f85a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800f85e:	3301      	adds	r3, #1
 800f860:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800f864:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d9cd      	bls.n	800f808 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800f86c:	2300      	movs	r3, #0
 800f86e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800f872:	e034      	b.n	800f8de <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800f874:	2300      	movs	r3, #0
 800f876:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f87a:	e027      	b.n	800f8cc <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800f87c:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f000 ff1d 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800f88c:	4605      	mov	r5, r0
 800f88e:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800f892:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f896:	4611      	mov	r1, r2
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 feb8 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800f89e:	4606      	mov	r6, r0
 800f8a0:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800f8a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 ff1a 	bl	80106e4 <_ZN3Mat6MatrixILt6ELt4EEclEtt>
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	f000 feb9 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800f8ba:	eef0 7a40 	vmov.f32	s15, s0
 800f8be:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800f8c2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f8cc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d9d3      	bls.n	800f87c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800f8d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f8d8:	3301      	adds	r3, #1
 800f8da:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800f8de:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f8e2:	2b05      	cmp	r3, #5
 800f8e4:	d9c6      	bls.n	800f874 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 800f8e6:	bf00      	nop
 800f8e8:	bf00      	nop
 800f8ea:	37c4      	adds	r7, #196	; 0xc4
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8f0 <_ZN3Mat6MatrixILt4ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 800f8f0:	b480      	push	{r7}
 800f8f2:	b083      	sub	sp, #12
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <_ZN3Mat6MatrixILt4ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 800f906:	b580      	push	{r7, lr}
 800f908:	b084      	sub	sp, #16
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	460b      	mov	r3, r1
 800f910:	807b      	strh	r3, [r7, #2]
 800f912:	4613      	mov	r3, r2
 800f914:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f916:	887a      	ldrh	r2, [r7, #2]
 800f918:	4613      	mov	r3, r2
 800f91a:	005b      	lsls	r3, r3, #1
 800f91c:	4413      	add	r3, r2
 800f91e:	005b      	lsls	r3, r3, #1
 800f920:	461a      	mov	r2, r3
 800f922:	883b      	ldrh	r3, [r7, #0]
 800f924:	4413      	add	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	68f9      	ldr	r1, [r7, #12]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 fef0 	bl	8010712 <_ZNSt5arrayIfLj24EEixEj>
 800f932:	4603      	mov	r3, r0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <_ZNK3Mat6MatrixILt6ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	460b      	mov	r3, r1
 800f946:	807b      	strh	r3, [r7, #2]
 800f948:	4613      	mov	r3, r2
 800f94a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 800f94c:	887b      	ldrh	r3, [r7, #2]
 800f94e:	009a      	lsls	r2, r3, #2
 800f950:	883b      	ldrh	r3, [r7, #0]
 800f952:	4413      	add	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]
	return _values[index];
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	68f9      	ldr	r1, [r7, #12]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 fee8 	bl	8010730 <_ZNKSt5arrayIfLj24EEixEj>
 800f960:	4603      	mov	r3, r0
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	ee07 3a90 	vmov	s15, r3
}
 800f968:	eeb0 0a67 	vmov.f32	s0, s15
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}

0800f972 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800f972:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f974:	b0b9      	sub	sp, #228	; 0xe4
 800f976:	af00      	add	r7, sp, #0
 800f978:	60f8      	str	r0, [r7, #12]
 800f97a:	60b9      	str	r1, [r7, #8]
 800f97c:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800f97e:	2300      	movs	r3, #0
 800f980:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 800f984:	e02d      	b.n	800f9e2 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800f986:	2300      	movs	r3, #0
 800f988:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 800f98c:	e020      	b.n	800f9d0 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800f98e:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 800f992:	f107 0314 	add.w	r3, r7, #20
 800f996:	4611      	mov	r1, r2
 800f998:	4618      	mov	r0, r3
 800f99a:	f000 fe94 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	4610      	mov	r0, r2
 800f9a8:	f000 fb3e 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800f9b2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7ff ffbf 	bl	800f93c <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 800f9be:	eef0 7a40 	vmov.f32	s15, s0
 800f9c2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800f9c6:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 800f9d0:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d9da      	bls.n	800f98e <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800f9d8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800f9dc:	3301      	adds	r3, #1
 800f9de:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 800f9e2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800f9e6:	2b05      	cmp	r3, #5
 800f9e8:	d9cd      	bls.n	800f986 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 800f9f0:	e02d      	b.n	800fa4e <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800f9f8:	e020      	b.n	800fa3c <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800f9fa:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800f9fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa02:	4611      	mov	r1, r2
 800fa04:	4618      	mov	r0, r3
 800fa06:	f000 fe5e 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f000 fb08 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800fa18:	4604      	mov	r4, r0
 800fa1a:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800fa1e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fa22:	4619      	mov	r1, r3
 800fa24:	68b8      	ldr	r0, [r7, #8]
 800fa26:	f000 fe92 	bl	801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fa2a:	eef0 7a40 	vmov.f32	s15, s0
 800fa2e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fa32:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fa36:	3301      	adds	r3, #1
 800fa38:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 800fa3c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800fa40:	2b03      	cmp	r3, #3
 800fa42:	d9da      	bls.n	800f9fa <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800fa44:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800fa48:	3301      	adds	r3, #1
 800fa4a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 800fa4e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 800fa52:	2b05      	cmp	r3, #5
 800fa54:	d9cd      	bls.n	800f9f2 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800fa56:	2300      	movs	r3, #0
 800fa58:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800fa5c:	e034      	b.n	800fac8 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800fa5e:	2300      	movs	r3, #0
 800fa60:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 800fa64:	e027      	b.n	800fab6 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fa66:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800fa6a:	f107 0314 	add.w	r3, r7, #20
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 fe28 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fa76:	4605      	mov	r5, r0
 800fa78:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800fa7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 fe1f 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fa88:	4606      	mov	r6, r0
 800fa8a:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800fa8e:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7fe f953 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	4628      	mov	r0, r5
 800faa0:	f000 fdc4 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800faa4:	eef0 7a40 	vmov.f32	s15, s0
 800faa8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800faac:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800fab0:	3301      	adds	r3, #1
 800fab2:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 800fab6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800faba:	2b05      	cmp	r3, #5
 800fabc:	d9d3      	bls.n	800fa66 <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800fabe:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800fac2:	3301      	adds	r3, #1
 800fac4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800fac8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800facc:	2b05      	cmp	r3, #5
 800face:	d9c6      	bls.n	800fa5e <_ZNK3Mat6MatrixILt6ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 800fad0:	bf00      	nop
 800fad2:	bf00      	nop
 800fad4:	37e4      	adds	r7, #228	; 0xe4
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fada <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 800fada:	b580      	push	{r7, lr}
 800fadc:	ed2d 8b02 	vpush	{d8}
 800fae0:	b084      	sub	sp, #16
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 800fae8:	2300      	movs	r3, #0
 800faea:	60fb      	str	r3, [r7, #12]
 800faec:	e016      	b.n	800fb1c <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x42>
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	68f9      	ldr	r1, [r7, #12]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f000 fe55 	bl	80107a2 <_ZNKSt5arrayIfLj36EEixEj>
 800faf8:	4603      	mov	r3, r0
 800fafa:	ed93 8a00 	vldr	s16, [r3]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	68f9      	ldr	r1, [r7, #12]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fa89 	bl	800e01a <_ZNSt5arrayIfLj36EEixEj>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	edd3 7a00 	vldr	s15, [r3]
 800fb0e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fb12:	edc3 7a00 	vstr	s15, [r3]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 fe34 	bl	801078c <_ZNKSt5arrayIfLj36EE4sizeEv>
 800fb24:	4602      	mov	r2, r0
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	bf34      	ite	cc
 800fb2c:	2301      	movcc	r3, #1
 800fb2e:	2300      	movcs	r3, #0
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1db      	bne.n	800faee <_ZN3Mat6MatrixILt6ELt6EEpLERKS1_+0x14>
	return *this;
 800fb36:	687b      	ldr	r3, [r7, #4]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	ecbd 8b02 	vpop	{d8}
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800fb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb46:	b0b1      	sub	sp, #196	; 0xc4
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800fb50:	2300      	movs	r3, #0
 800fb52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fb56:	e02d      	b.n	800fbb4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fb5e:	e020      	b.n	800fba2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800fb60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fb64:	f107 0314 	add.w	r3, r7, #20
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f000 fd4f 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800fb70:	4602      	mov	r2, r0
 800fb72:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fb76:	4619      	mov	r1, r3
 800fb78:	4610      	mov	r0, r2
 800fb7a:	f000 fa55 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800fb7e:	4604      	mov	r4, r0
 800fb80:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 800fb84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fb88:	4619      	mov	r1, r3
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7ff fda1 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 800fb90:	eef0 7a40 	vmov.f32	s15, s0
 800fb94:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fb98:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fba2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800fba6:	2b03      	cmp	r3, #3
 800fba8:	d9da      	bls.n	800fb60 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800fbaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbae:	3301      	adds	r3, #1
 800fbb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fbb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fbb8:	2b03      	cmp	r3, #3
 800fbba:	d9cd      	bls.n	800fb58 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fbc2:	e02d      	b.n	800fc20 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fbca:	e020      	b.n	800fc0e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 800fbcc:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800fbd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f000 fd75 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	f000 fa1f 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 800fbea:	4604      	mov	r4, r0
 800fbec:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 800fbf0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	68b8      	ldr	r0, [r7, #8]
 800fbf8:	f000 fda9 	bl	801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fbfc:	eef0 7a40 	vmov.f32	s15, s0
 800fc00:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fc04:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fc08:	3301      	adds	r3, #1
 800fc0a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fc0e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d9da      	bls.n	800fbcc <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800fc16:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fc20:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800fc24:	2b05      	cmp	r3, #5
 800fc26:	d9cd      	bls.n	800fbc4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800fc28:	2300      	movs	r3, #0
 800fc2a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fc2e:	e034      	b.n	800fc9a <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800fc30:	2300      	movs	r3, #0
 800fc32:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fc36:	e027      	b.n	800fc88 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fc38:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	4611      	mov	r1, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 fce3 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 800fc48:	4605      	mov	r5, r0
 800fc4a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800fc4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fc52:	4611      	mov	r1, r2
 800fc54:	4618      	mov	r0, r3
 800fc56:	f000 fd36 	bl	80106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800fc60:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fc64:	4619      	mov	r1, r3
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7ff fe4d 	bl	800f906 <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4628      	mov	r0, r5
 800fc72:	f000 fcdb 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 800fc76:	eef0 7a40 	vmov.f32	s15, s0
 800fc7a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800fc7e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800fc82:	3301      	adds	r3, #1
 800fc84:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fc88:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800fc8c:	2b05      	cmp	r3, #5
 800fc8e:	d9d3      	bls.n	800fc38 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800fc90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fc94:	3301      	adds	r3, #1
 800fc96:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fc9a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d9c6      	bls.n	800fc30 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt6EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 800fca2:	bf00      	nop
 800fca4:	bf00      	nop
 800fca6:	37c4      	adds	r7, #196	; 0xc4
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcac <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800fcac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcae:	b0c5      	sub	sp, #276	; 0x114
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcba:	6018      	str	r0, [r3, #0]
 800fcbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcc4:	6019      	str	r1, [r3, #0]
 800fcc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fcca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fcce:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800fcd6:	e030      	b.n	800fd3a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x8e>
		for(u_short col = 0; col < width; ++col)
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 800fcde:	e023      	b.n	800fd28 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 800fce0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800fce4:	f107 0314 	add.w	r3, r7, #20
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f000 fd68 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4610      	mov	r0, r2
 800fcfa:	f000 fc44 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800fcfe:	4604      	mov	r4, r0
 800fd00:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 800fd04:	f8b7 110e 	ldrh.w	r1, [r7, #270]	; 0x10e
 800fd08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd10:	6818      	ldr	r0, [r3, #0]
 800fd12:	f000 fd1c 	bl	801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fd16:	eef0 7a40 	vmov.f32	s15, s0
 800fd1a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fd1e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fd22:	3301      	adds	r3, #1
 800fd24:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 800fd28:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800fd2c:	2b05      	cmp	r3, #5
 800fd2e:	d9d7      	bls.n	800fce0 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x34>
	for(u_short row = 0; row < heigth; ++row)
 800fd30:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800fd34:	3301      	adds	r3, #1
 800fd36:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800fd3a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d9ca      	bls.n	800fcd8 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 800fd42:	2300      	movs	r3, #0
 800fd44:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800fd48:	e030      	b.n	800fdac <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x100>
		for(u_short row = 0; row < width; ++row)
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 800fd50:	e023      	b.n	800fd9a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xee>
			other_columns[col][row] = other(row, col);
 800fd52:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800fd56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f000 fd3e 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800fd62:	4602      	mov	r2, r0
 800fd64:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fd68:	4619      	mov	r1, r3
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	f000 fc0b 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800fd70:	4604      	mov	r4, r0
 800fd72:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800fd76:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 800fd7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd82:	6818      	ldr	r0, [r3, #0]
 800fd84:	f000 fb21 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 800fd88:	eef0 7a40 	vmov.f32	s15, s0
 800fd8c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800fd90:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fd94:	3301      	adds	r3, #1
 800fd96:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
 800fd9a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800fd9e:	2b05      	cmp	r3, #5
 800fda0:	d9d7      	bls.n	800fd52 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 800fda2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800fda6:	3301      	adds	r3, #1
 800fda8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800fdac:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d9ca      	bls.n	800fd4a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800fdba:	e037      	b.n	800fe2c <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x180>
		for(u_short col = 0; col < other_width; ++col)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800fdc2:	e02a      	b.n	800fe1a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800fdc4:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800fdc8:	f107 0314 	add.w	r3, r7, #20
 800fdcc:	4611      	mov	r1, r2
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f000 fcf6 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 800fdda:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fdde:	4611      	mov	r1, r2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 fcfc 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 800fde6:	4606      	mov	r6, r0
 800fde8:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 800fdec:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 800fdf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800fdf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	f7ff fd84 	bl	800f906 <_ZN3Mat6MatrixILt4ELt6EEclEtt>
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4631      	mov	r1, r6
 800fe02:	4628      	mov	r0, r5
 800fe04:	f000 fcfa 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800fe08:	eef0 7a40 	vmov.f32	s15, s0
 800fe0c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800fe10:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800fe14:	3301      	adds	r3, #1
 800fe16:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 800fe1a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800fe1e:	2b05      	cmp	r3, #5
 800fe20:	d9d0      	bls.n	800fdc4 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x118>
	for(u_short row = 0; row < heigth; ++row)
 800fe22:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800fe26:	3301      	adds	r3, #1
 800fe28:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800fe2c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800fe30:	2b03      	cmp	r3, #3
 800fe32:	d9c3      	bls.n	800fdbc <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x110>
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop
 800fe38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe40 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 800fe40:	b580      	push	{r7, lr}
 800fe42:	ed2d 8b02 	vpush	{d8}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 800fe4e:	2300      	movs	r3, #0
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	e016      	b.n	800fe82 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x42>
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	68f9      	ldr	r1, [r7, #12]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fe fa28 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	ed93 8a00 	vldr	s16, [r3]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68f9      	ldr	r1, [r7, #12]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f000 fb8c 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	edd3 7a00 	vldr	s15, [r3]
 800fe74:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fe78:	edc3 7a00 	vstr	s15, [r3]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	60fb      	str	r3, [r7, #12]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 fb73 	bl	8010570 <_ZNKSt5arrayIfLj6EE4sizeEv>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	bf34      	ite	cc
 800fe92:	2301      	movcc	r3, #1
 800fe94:	2300      	movcs	r3, #0
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1db      	bne.n	800fe54 <_ZN3Mat6MatrixILt6ELt1EEmIERKS1_+0x14>
	return *this;
 800fe9c:	687b      	ldr	r3, [r7, #4]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	ecbd 8b02 	vpop	{d8}
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 800feaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feac:	b0a7      	sub	sp, #156	; 0x9c
 800feae:	af00      	add	r7, sp, #0
 800feb0:	60f8      	str	r0, [r7, #12]
 800feb2:	60b9      	str	r1, [r7, #8]
 800feb4:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 800feb6:	2300      	movs	r3, #0
 800feb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800febc:	e02d      	b.n	800ff1a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 800febe:	2300      	movs	r3, #0
 800fec0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800fec4:	e020      	b.n	800ff08 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 800fec6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800feca:	f107 0314 	add.w	r3, r7, #20
 800fece:	4611      	mov	r1, r2
 800fed0:	4618      	mov	r0, r3
 800fed2:	f000 fc75 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800fed6:	4602      	mov	r2, r0
 800fed8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800fedc:	4619      	mov	r1, r3
 800fede:	4610      	mov	r0, r2
 800fee0:	f000 fb51 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800fee4:	4604      	mov	r4, r0
 800fee6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 800feea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800feee:	4619      	mov	r1, r3
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f000 fc2c 	bl	801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 800fef6:	eef0 7a40 	vmov.f32	s15, s0
 800fefa:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 800fefe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ff02:	3301      	adds	r3, #1
 800ff04:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ff08:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ff0c:	2b05      	cmp	r3, #5
 800ff0e:	d9da      	bls.n	800fec6 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 800ff10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ff14:	3301      	adds	r3, #1
 800ff16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800ff1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d9cd      	bls.n	800febe <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 800ff22:	2300      	movs	r3, #0
 800ff24:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800ff28:	e02d      	b.n	800ff86 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800ff30:	e020      	b.n	800ff74 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 800ff32:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ff36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f000 fc90 	bl	8010862 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800ff42:	4602      	mov	r2, r0
 800ff44:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f000 fb1b 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 800ff50:	4604      	mov	r4, r0
 800ff52:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800ff56:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	68b8      	ldr	r0, [r7, #8]
 800ff5e:	f000 fc8f 	bl	8010880 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 800ff62:	eef0 7a40 	vmov.f32	s15, s0
 800ff66:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 800ff6a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ff6e:	3301      	adds	r3, #1
 800ff70:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800ff74:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800ff78:	2b05      	cmp	r3, #5
 800ff7a:	d9da      	bls.n	800ff32 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 800ff7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ff80:	3301      	adds	r3, #1
 800ff82:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800ff86:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d0cd      	beq.n	800ff2a <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ff94:	e034      	b.n	8010000 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 800ff96:	2300      	movs	r3, #0
 800ff98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800ff9c:	e027      	b.n	800ffee <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 800ff9e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ffa2:	f107 0314 	add.w	r3, r7, #20
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 fc09 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 800ffae:	4605      	mov	r5, r0
 800ffb0:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ffb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f000 fc51 	bl	8010862 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 800ffc0:	4606      	mov	r6, r0
 800ffc2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ffc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 fc71 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4631      	mov	r1, r6
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f000 fc10 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 800ffdc:	eef0 7a40 	vmov.f32	s15, s0
 800ffe0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 800ffe4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800ffe8:	3301      	adds	r3, #1
 800ffea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800ffee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d0d3      	beq.n	800ff9e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 800fff6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fffa:	3301      	adds	r3, #1
 800fffc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8010000:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010004:	2b03      	cmp	r3, #3
 8010006:	d9c6      	bls.n	800ff96 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8010008:	bf00      	nop
 801000a:	bf00      	nop
 801000c:	379c      	adds	r7, #156	; 0x9c
 801000e:	46bd      	mov	sp, r7
 8010010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010012 <_ZNKSt5arrayIfLj4EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010012:	b480      	push	{r7}
 8010014:	b083      	sub	sp, #12
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
 801001a:	2304      	movs	r3, #4
 801001c:	4618      	mov	r0, r3
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <_ZNSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) noexcept
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fc52 	bl	80108e0 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 801003c:	4603      	mov	r3, r0
      }
 801003e:	4618      	mov	r0, r3
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 8010046:	b580      	push	{r7, lr}
 8010048:	b082      	sub	sp, #8
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6839      	ldr	r1, [r7, #0]
 8010054:	4618      	mov	r0, r3
 8010056:	f000 fc43 	bl	80108e0 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 801005a:	4603      	mov	r3, r0
      }
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8010064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010066:	b0b9      	sub	sp, #228	; 0xe4
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8010070:	2300      	movs	r3, #0
 8010072:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 8010076:	e02d      	b.n	80100d4 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8010078:	2300      	movs	r3, #0
 801007a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 801007e:	e020      	b.n	80100c2 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8010080:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8010084:	f107 0314 	add.w	r3, r7, #20
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f000 fb98 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8010090:	4602      	mov	r2, r0
 8010092:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8010096:	4619      	mov	r1, r3
 8010098:	4610      	mov	r0, r2
 801009a:	f000 fa74 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 801009e:	4604      	mov	r4, r0
 80100a0:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80100a4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80100a8:	4619      	mov	r1, r3
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 fb4f 	bl	801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>
 80100b0:	eef0 7a40 	vmov.f32	s15, s0
 80100b4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80100b8:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80100bc:	3301      	adds	r3, #1
 80100be:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 80100c2:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 80100c6:	2b05      	cmp	r3, #5
 80100c8:	d9da      	bls.n	8010080 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80100ca:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80100ce:	3301      	adds	r3, #1
 80100d0:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 80100d4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80100d8:	2b03      	cmp	r3, #3
 80100da:	d9cd      	bls.n	8010078 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80100dc:	2300      	movs	r3, #0
 80100de:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 80100e2:	e02d      	b.n	8010140 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80100e4:	2300      	movs	r3, #0
 80100e6:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80100ea:	e020      	b.n	801012e <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80100ec:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 80100f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80100f4:	4611      	mov	r1, r2
 80100f6:	4618      	mov	r0, r3
 80100f8:	f000 fb62 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 80100fc:	4602      	mov	r2, r0
 80100fe:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8010102:	4619      	mov	r1, r3
 8010104:	4610      	mov	r0, r2
 8010106:	f000 fa3e 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 801010a:	4604      	mov	r4, r0
 801010c:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8010110:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8010114:	4619      	mov	r1, r3
 8010116:	68b8      	ldr	r0, [r7, #8]
 8010118:	f7ff fc10 	bl	800f93c <_ZNK3Mat6MatrixILt6ELt4EEclEtt>
 801011c:	eef0 7a40 	vmov.f32	s15, s0
 8010120:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8010124:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8010128:	3301      	adds	r3, #1
 801012a:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 801012e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8010132:	2b05      	cmp	r3, #5
 8010134:	d9da      	bls.n	80100ec <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8010136:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 801013a:	3301      	adds	r3, #1
 801013c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 8010140:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8010144:	2b03      	cmp	r3, #3
 8010146:	d9cd      	bls.n	80100e4 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8010148:	2300      	movs	r3, #0
 801014a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 801014e:	e034      	b.n	80101ba <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8010150:	2300      	movs	r3, #0
 8010152:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 8010156:	e027      	b.n	80101a8 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8010158:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801015c:	f107 0314 	add.w	r3, r7, #20
 8010160:	4611      	mov	r1, r2
 8010162:	4618      	mov	r0, r3
 8010164:	f000 fb2c 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 8010168:	4605      	mov	r5, r0
 801016a:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 801016e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010172:	4611      	mov	r1, r2
 8010174:	4618      	mov	r0, r3
 8010176:	f000 fb23 	bl	80107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>
 801017a:	4606      	mov	r6, r0
 801017c:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8010180:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8010184:	4619      	mov	r1, r3
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7fd ff82 	bl	800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 801018c:	4604      	mov	r4, r0
 801018e:	4631      	mov	r1, r6
 8010190:	4628      	mov	r0, r5
 8010192:	f000 fb33 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8010196:	eef0 7a40 	vmov.f32	s15, s0
 801019a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801019e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80101a2:	3301      	adds	r3, #1
 80101a4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 80101a8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	d9d3      	bls.n	8010158 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80101b0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80101b4:	3301      	adds	r3, #1
 80101b6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 80101ba:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80101be:	2b03      	cmp	r3, #3
 80101c0:	d9c6      	bls.n	8010150 <_ZNK3Mat6MatrixILt4ELt6EE8MultiplyILt4EEEvRKNS0_ILt6EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 80101c2:	bf00      	nop
 80101c4:	bf00      	nop
 80101c6:	37e4      	adds	r7, #228	; 0xe4
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101cc <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 80101cc:	b580      	push	{r7, lr}
 80101ce:	ed2d 8b02 	vpush	{d8}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	e016      	b.n	801020e <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x42>
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 fa54 	bl	8010692 <_ZNKSt5arrayIfLj16EEixEj>
 80101ea:	4603      	mov	r3, r0
 80101ec:	ed93 8a00 	vldr	s16, [r3]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	68f9      	ldr	r1, [r7, #12]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe f8fe 	bl	800e3f6 <_ZNSt5arrayIfLj16EEixEj>
 80101fa:	4603      	mov	r3, r0
 80101fc:	edd3 7a00 	vldr	s15, [r3]
 8010200:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010204:	edc3 7a00 	vstr	s15, [r3]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	3301      	adds	r3, #1
 801020c:	60fb      	str	r3, [r7, #12]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4618      	mov	r0, r3
 8010212:	f000 fa4d 	bl	80106b0 <_ZNKSt5arrayIfLj16EE4sizeEv>
 8010216:	4602      	mov	r2, r0
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	4293      	cmp	r3, r2
 801021c:	bf34      	ite	cc
 801021e:	2301      	movcc	r3, #1
 8010220:	2300      	movcs	r3, #0
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b00      	cmp	r3, #0
 8010226:	d1db      	bne.n	80101e0 <_ZN3Mat6MatrixILt4ELt4EEmIERKS1_+0x14>
	return *this;
 8010228:	687b      	ldr	r3, [r7, #4]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	ecbd 8b02 	vpop	{d8}
 8010234:	bd80      	pop	{r7, pc}

08010236 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8010236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010238:	b0d1      	sub	sp, #324	; 0x144
 801023a:	af00      	add	r7, sp, #0
 801023c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010240:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8010244:	6018      	str	r0, [r3, #0]
 8010246:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801024a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801024e:	6019      	str	r1, [r3, #0]
 8010250:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010254:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010258:	601a      	str	r2, [r3, #0]
	for(u_short row = 0; row < heigth; ++row)
 801025a:	2300      	movs	r3, #0
 801025c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8010260:	e030      	b.n	80102c4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x8e>
		for(u_short col = 0; col < width; ++col)
 8010262:	2300      	movs	r3, #0
 8010264:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 8010268:	e023      	b.n	80102b2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x7c>
			this_rows[row][col] = this->operator()(row, col);
 801026a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 801026e:	f107 0314 	add.w	r3, r7, #20
 8010272:	4611      	mov	r1, r2
 8010274:	4618      	mov	r0, r3
 8010276:	f000 fab2 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801027a:	4602      	mov	r2, r0
 801027c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8010280:	4619      	mov	r1, r3
 8010282:	4610      	mov	r0, r2
 8010284:	f000 f97f 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8010288:	4604      	mov	r4, r0
 801028a:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 801028e:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
 8010292:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010296:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801029a:	6818      	ldr	r0, [r3, #0]
 801029c:	f000 f895 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80102a0:	eef0 7a40 	vmov.f32	s15, s0
 80102a4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80102a8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80102ac:	3301      	adds	r3, #1
 80102ae:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 80102b2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80102b6:	2b05      	cmp	r3, #5
 80102b8:	d9d7      	bls.n	801026a <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x34>
	for(u_short row = 0; row < heigth; ++row)
 80102ba:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80102be:	3301      	adds	r3, #1
 80102c0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80102c4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80102c8:	2b05      	cmp	r3, #5
 80102ca:	d9ca      	bls.n	8010262 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x2c>
	for(u_short col = 0; col < other_width; ++col)
 80102cc:	2300      	movs	r3, #0
 80102ce:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 80102d2:	e030      	b.n	8010336 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x100>
		for(u_short row = 0; row < width; ++row)
 80102d4:	2300      	movs	r3, #0
 80102d6:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 80102da:	e023      	b.n	8010324 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xee>
			other_columns[col][row] = other(row, col);
 80102dc:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 80102e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fa79 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80102ec:	4602      	mov	r2, r0
 80102ee:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80102f2:	4619      	mov	r1, r3
 80102f4:	4610      	mov	r0, r2
 80102f6:	f000 f946 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 80102fa:	4604      	mov	r4, r0
 80102fc:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8010300:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 8010304:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010308:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f000 f85c 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8010312:	eef0 7a40 	vmov.f32	s15, s0
 8010316:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 801031a:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 801031e:	3301      	adds	r3, #1
 8010320:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
 8010324:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8010328:	2b05      	cmp	r3, #5
 801032a:	d9d7      	bls.n	80102dc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0xa6>
	for(u_short col = 0; col < other_width; ++col)
 801032c:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8010330:	3301      	adds	r3, #1
 8010332:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
 8010336:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 801033a:	2b05      	cmp	r3, #5
 801033c:	d9ca      	bls.n	80102d4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x9e>
	for(u_short row = 0; row < heigth; ++row)
 801033e:	2300      	movs	r3, #0
 8010340:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8010344:	e037      	b.n	80103b6 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x180>
		for(u_short col = 0; col < other_width; ++col)
 8010346:	2300      	movs	r3, #0
 8010348:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 801034c:	e02a      	b.n	80103a4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x16e>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801034e:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8010352:	f107 0314 	add.w	r3, r7, #20
 8010356:	4611      	mov	r1, r2
 8010358:	4618      	mov	r0, r3
 801035a:	f000 fa40 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801035e:	4605      	mov	r5, r0
 8010360:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8010364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010368:	4611      	mov	r1, r2
 801036a:	4618      	mov	r0, r3
 801036c:	f000 fa37 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8010370:	4606      	mov	r6, r0
 8010372:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8010376:	f8b7 1136 	ldrh.w	r1, [r7, #310]	; 0x136
 801037a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801037e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8010382:	6818      	ldr	r0, [r3, #0]
 8010384:	f7fd fcdc 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8010388:	4604      	mov	r4, r0
 801038a:	4631      	mov	r1, r6
 801038c:	4628      	mov	r0, r5
 801038e:	f000 fa35 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8010392:	eef0 7a40 	vmov.f32	s15, s0
 8010396:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801039a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 801039e:	3301      	adds	r3, #1
 80103a0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
 80103a4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80103a8:	2b05      	cmp	r3, #5
 80103aa:	d9d0      	bls.n	801034e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x118>
	for(u_short row = 0; row < heigth; ++row)
 80103ac:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80103b0:	3301      	adds	r3, #1
 80103b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80103b6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80103ba:	2b05      	cmp	r3, #5
 80103bc:	d9c3      	bls.n	8010346 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERS3_+0x110>
}
 80103be:	bf00      	nop
 80103c0:	bf00      	nop
 80103c2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b084      	sub	sp, #16
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	460b      	mov	r3, r1
 80103d4:	807b      	strh	r3, [r7, #2]
 80103d6:	4613      	mov	r3, r2
 80103d8:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80103da:	887a      	ldrh	r2, [r7, #2]
 80103dc:	4613      	mov	r3, r2
 80103de:	005b      	lsls	r3, r3, #1
 80103e0:	4413      	add	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	461a      	mov	r2, r3
 80103e6:	883b      	ldrh	r3, [r7, #0]
 80103e8:	4413      	add	r3, r2
 80103ea:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	68f9      	ldr	r1, [r7, #12]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 f9d6 	bl	80107a2 <_ZNKSt5arrayIfLj36EEixEj>
 80103f6:	4603      	mov	r3, r0
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	ee07 3a90 	vmov	s15, r3
}
 80103fe:	eeb0 0a67 	vmov.f32	s0, s15
 8010402:	3710      	adds	r7, #16
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8010408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801040a:	b0b3      	sub	sp, #204	; 0xcc
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8010414:	2300      	movs	r3, #0
 8010416:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 801041a:	e02d      	b.n	8010478 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 801041c:	2300      	movs	r3, #0
 801041e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8010422:	e020      	b.n	8010466 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8010424:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8010428:	f107 0314 	add.w	r3, r7, #20
 801042c:	4611      	mov	r1, r2
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f9d5 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8010434:	4602      	mov	r2, r0
 8010436:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 801043a:	4619      	mov	r1, r3
 801043c:	4610      	mov	r0, r2
 801043e:	f000 f8a2 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8010442:	4604      	mov	r4, r0
 8010444:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8010448:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 801044c:	4619      	mov	r1, r3
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7ff ffbb 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8010454:	eef0 7a40 	vmov.f32	s15, s0
 8010458:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801045c:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8010460:	3301      	adds	r3, #1
 8010462:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8010466:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 801046a:	2b05      	cmp	r3, #5
 801046c:	d9da      	bls.n	8010424 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801046e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8010472:	3301      	adds	r3, #1
 8010474:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8010478:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 801047c:	2b05      	cmp	r3, #5
 801047e:	d9cd      	bls.n	801041c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8010480:	2300      	movs	r3, #0
 8010482:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8010486:	e02d      	b.n	80104e4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8010488:	2300      	movs	r3, #0
 801048a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 801048e:	e020      	b.n	80104d2 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8010490:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8010494:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f000 f9e1 	bl	8010862 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 80104a0:	4602      	mov	r2, r0
 80104a2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80104a6:	4619      	mov	r1, r3
 80104a8:	4610      	mov	r0, r2
 80104aa:	f000 f86c 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 80104ae:	4604      	mov	r4, r0
 80104b0:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 80104b4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80104b8:	4619      	mov	r1, r3
 80104ba:	68b8      	ldr	r0, [r7, #8]
 80104bc:	f000 f9e0 	bl	8010880 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>
 80104c0:	eef0 7a40 	vmov.f32	s15, s0
 80104c4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80104c8:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80104cc:	3301      	adds	r3, #1
 80104ce:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 80104d2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80104d6:	2b05      	cmp	r3, #5
 80104d8:	d9da      	bls.n	8010490 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80104da:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80104de:	3301      	adds	r3, #1
 80104e0:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80104e4:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0cd      	beq.n	8010488 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80104ec:	2300      	movs	r3, #0
 80104ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80104f2:	e034      	b.n	801055e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80104f4:	2300      	movs	r3, #0
 80104f6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80104fa:	e027      	b.n	801054c <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80104fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010500:	f107 0314 	add.w	r3, r7, #20
 8010504:	4611      	mov	r1, r2
 8010506:	4618      	mov	r0, r3
 8010508:	f000 f969 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801050c:	4605      	mov	r5, r0
 801050e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8010512:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f000 f9a2 	bl	8010862 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>
 801051e:	4606      	mov	r6, r0
 8010520:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	; 0xbc
 8010524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010528:	4619      	mov	r1, r3
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 f9e7 	bl	80108fe <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 8010530:	4604      	mov	r4, r0
 8010532:	4631      	mov	r1, r6
 8010534:	4628      	mov	r0, r5
 8010536:	f000 f961 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 801053a:	eef0 7a40 	vmov.f32	s15, s0
 801053e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8010542:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8010546:	3301      	adds	r3, #1
 8010548:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 801054c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8010550:	2b00      	cmp	r3, #0
 8010552:	d0d3      	beq.n	80104fc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8010554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010558:	3301      	adds	r3, #1
 801055a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 801055e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010562:	2b05      	cmp	r3, #5
 8010564:	d9c6      	bls.n	80104f4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt1EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 8010566:	bf00      	nop
 8010568:	bf00      	nop
 801056a:	37cc      	adds	r7, #204	; 0xcc
 801056c:	46bd      	mov	sp, r7
 801056e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010570 <_ZNKSt5arrayIfLj6EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	2306      	movs	r3, #6
 801057a:	4618      	mov	r0, r3
 801057c:	370c      	adds	r7, #12
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr

08010586 <_ZNSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) noexcept
 8010586:	b580      	push	{r7, lr}
 8010588:	b082      	sub	sp, #8
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
 801058e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6839      	ldr	r1, [r7, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	f7fd ffe1 	bl	800e55c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 801059a:	4603      	mov	r3, r0
      }
 801059c:	4618      	mov	r0, r3
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 80105a4:	b580      	push	{r7, lr}
 80105a6:	ed2d 8b02 	vpush	{d8}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 80105b2:	2300      	movs	r3, #0
 80105b4:	60fb      	str	r3, [r7, #12]
 80105b6:	e016      	b.n	80105e6 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x42>
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	68f9      	ldr	r1, [r7, #12]
 80105bc:	4618      	mov	r0, r3
 80105be:	f000 f8f0 	bl	80107a2 <_ZNKSt5arrayIfLj36EEixEj>
 80105c2:	4603      	mov	r3, r0
 80105c4:	ed93 8a00 	vldr	s16, [r3]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68f9      	ldr	r1, [r7, #12]
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fd fd24 	bl	800e01a <_ZNSt5arrayIfLj36EEixEj>
 80105d2:	4603      	mov	r3, r0
 80105d4:	edd3 7a00 	vldr	s15, [r3]
 80105d8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80105dc:	edc3 7a00 	vstr	s15, [r3]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	3301      	adds	r3, #1
 80105e4:	60fb      	str	r3, [r7, #12]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f000 f8cf 	bl	801078c <_ZNKSt5arrayIfLj36EE4sizeEv>
 80105ee:	4602      	mov	r2, r0
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	4293      	cmp	r3, r2
 80105f4:	bf34      	ite	cc
 80105f6:	2301      	movcc	r3, #1
 80105f8:	2300      	movcs	r3, #0
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1db      	bne.n	80105b8 <_ZN3Mat6MatrixILt6ELt6EEmIERKS1_+0x14>
	return *this;
 8010600:	687b      	ldr	r3, [r7, #4]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	ecbd 8b02 	vpop	{d8}
 801060c:	bd80      	pop	{r7, pc}

0801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>:
      operator[](size_type __n) noexcept
 801060e:	b580      	push	{r7, lr}
 8010610:	b082      	sub	sp, #8
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6839      	ldr	r1, [r7, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f000 f984 	bl	801092a <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>
 8010622:	4603      	mov	r3, r0
      }
 8010624:	4618      	mov	r0, r3
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 801062c:	b580      	push	{r7, lr}
 801062e:	ed2d 8b02 	vpush	{d8}
 8010632:	b084      	sub	sp, #16
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 801063a:	f04f 0300 	mov.w	r3, #0
 801063e:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 8010640:	2300      	movs	r3, #0
 8010642:	60bb      	str	r3, [r7, #8]
 8010644:	e018      	b.n	8010678 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x4c>
 8010646:	68b9      	ldr	r1, [r7, #8]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff fcfc 	bl	8010046 <_ZNKSt5arrayIfLj4EEixEj>
 801064e:	4603      	mov	r3, r0
 8010650:	ed93 8a00 	vldr	s16, [r3]
 8010654:	68b9      	ldr	r1, [r7, #8]
 8010656:	6838      	ldr	r0, [r7, #0]
 8010658:	f7ff fcf5 	bl	8010046 <_ZNKSt5arrayIfLj4EEixEj>
 801065c:	4603      	mov	r3, r0
 801065e:	edd3 7a00 	vldr	s15, [r3]
 8010662:	ee68 7a27 	vmul.f32	s15, s16, s15
 8010666:	ed97 7a03 	vldr	s14, [r7, #12]
 801066a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801066e:	edc7 7a03 	vstr	s15, [r7, #12]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	3301      	adds	r3, #1
 8010676:	60bb      	str	r3, [r7, #8]
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	2b03      	cmp	r3, #3
 801067c:	d9e3      	bls.n	8010646 <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	ee07 3a90 	vmov	s15, r3
}
 8010684:	eeb0 0a67 	vmov.f32	s0, s15
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	ecbd 8b02 	vpop	{d8}
 8010690:	bd80      	pop	{r7, pc}

08010692 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 8010692:	b580      	push	{r7, lr}
 8010694:	b082      	sub	sp, #8
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fd ff9e 	bl	800e5e2 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 80106a6:	4603      	mov	r3, r0
      }
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <_ZNKSt5arrayIfLj16EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	2310      	movs	r3, #16
 80106ba:	4618      	mov	r0, r3
 80106bc:	370c      	adds	r7, #12
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <_ZNSt5arrayIS_IfLj4EELj6EEixEj>:
      operator[](size_type __n) noexcept
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b082      	sub	sp, #8
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6839      	ldr	r1, [r7, #0]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f000 f937 	bl	8010948 <_ZNSt14__array_traitsISt5arrayIfLj4EELj6EE6_S_refERA6_KS1_j>
 80106da:	4603      	mov	r3, r0
      }
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <_ZN3Mat6MatrixILt6ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	460b      	mov	r3, r1
 80106ee:	807b      	strh	r3, [r7, #2]
 80106f0:	4613      	mov	r3, r2
 80106f2:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80106f4:	887b      	ldrh	r3, [r7, #2]
 80106f6:	009a      	lsls	r2, r3, #2
 80106f8:	883b      	ldrh	r3, [r7, #0]
 80106fa:	4413      	add	r3, r2
 80106fc:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	68f9      	ldr	r1, [r7, #12]
 8010702:	4618      	mov	r0, r3
 8010704:	f000 f805 	bl	8010712 <_ZNSt5arrayIfLj24EEixEj>
 8010708:	4603      	mov	r3, r0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}

08010712 <_ZNSt5arrayIfLj24EEixEj>:
      operator[](size_type __n) noexcept
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	4618      	mov	r0, r3
 8010722:	f000 f920 	bl	8010966 <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>
 8010726:	4603      	mov	r3, r0
      }
 8010728:	4618      	mov	r0, r3
 801072a:	3708      	adds	r7, #8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <_ZNKSt5arrayIfLj24EEixEj>:
      operator[](size_type __n) const noexcept
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	4618      	mov	r0, r3
 8010740:	f000 f911 	bl	8010966 <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>
 8010744:	4603      	mov	r3, r0
      }
 8010746:	4618      	mov	r0, r3
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <_ZNK3Mat6MatrixILt4ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 801074e:	b580      	push	{r7, lr}
 8010750:	b084      	sub	sp, #16
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	460b      	mov	r3, r1
 8010758:	807b      	strh	r3, [r7, #2]
 801075a:	4613      	mov	r3, r2
 801075c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801075e:	887a      	ldrh	r2, [r7, #2]
 8010760:	4613      	mov	r3, r2
 8010762:	005b      	lsls	r3, r3, #1
 8010764:	4413      	add	r3, r2
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	461a      	mov	r2, r3
 801076a:	883b      	ldrh	r3, [r7, #0]
 801076c:	4413      	add	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	68f9      	ldr	r1, [r7, #12]
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff ffdb 	bl	8010730 <_ZNKSt5arrayIfLj24EEixEj>
 801077a:	4603      	mov	r3, r0
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	ee07 3a90 	vmov	s15, r3
}
 8010782:	eeb0 0a67 	vmov.f32	s0, s15
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <_ZNKSt5arrayIfLj36EE4sizeEv>:
      size() const noexcept { return _Nm; }
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	2324      	movs	r3, #36	; 0x24
 8010796:	4618      	mov	r0, r3
 8010798:	370c      	adds	r7, #12
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr

080107a2 <_ZNKSt5arrayIfLj36EEixEj>:
      operator[](size_type __n) const noexcept
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b082      	sub	sp, #8
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	6078      	str	r0, [r7, #4]
 80107aa:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fd fddc 	bl	800e36e <_ZNSt14__array_traitsIfLj36EE6_S_refERA36_Kfj>
 80107b6:	4603      	mov	r3, r0
      }
 80107b8:	4618      	mov	r0, r3
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <_ZNSt5arrayIS_IfLj6EELj4EEixEj>:
      operator[](size_type __n) noexcept
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 f8d8 	bl	8010984 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>
 80107d4:	4603      	mov	r3, r0
      }
 80107d6:	4618      	mov	r0, r3
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>:
      operator[](size_type __n) noexcept
 80107de:	b580      	push	{r7, lr}
 80107e0:	b082      	sub	sp, #8
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
 80107e6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 f8db 	bl	80109a8 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>
 80107f2:	4603      	mov	r3, r0
      }
 80107f4:	4618      	mov	r0, r3
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>:
float Multiply_rows(const std::array<float, length>& A, const std::array<float, length>& B)
 80107fc:	b580      	push	{r7, lr}
 80107fe:	ed2d 8b02 	vpush	{d8}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
    float result = 0.0f;
 801080a:	f04f 0300 	mov.w	r3, #0
 801080e:	60fb      	str	r3, [r7, #12]
	for(u_int i = 0; i < length; ++i) result += A[i]*B[i];
 8010810:	2300      	movs	r3, #0
 8010812:	60bb      	str	r3, [r7, #8]
 8010814:	e018      	b.n	8010848 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x4c>
 8010816:	68b9      	ldr	r1, [r7, #8]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7fd fd48 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 801081e:	4603      	mov	r3, r0
 8010820:	ed93 8a00 	vldr	s16, [r3]
 8010824:	68b9      	ldr	r1, [r7, #8]
 8010826:	6838      	ldr	r0, [r7, #0]
 8010828:	f7fd fd41 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 801082c:	4603      	mov	r3, r0
 801082e:	edd3 7a00 	vldr	s15, [r3]
 8010832:	ee68 7a27 	vmul.f32	s15, s16, s15
 8010836:	ed97 7a03 	vldr	s14, [r7, #12]
 801083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801083e:	edc7 7a03 	vstr	s15, [r7, #12]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	3301      	adds	r3, #1
 8010846:	60bb      	str	r3, [r7, #8]
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	2b05      	cmp	r3, #5
 801084c:	d9e3      	bls.n	8010816 <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_+0x1a>
	return result;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	ee07 3a90 	vmov	s15, r3
}
 8010854:	eeb0 0a67 	vmov.f32	s0, s15
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	ecbd 8b02 	vpop	{d8}
 8010860:	bd80      	pop	{r7, pc}

08010862 <_ZNSt5arrayIS_IfLj6EELj1EEixEj>:
      operator[](size_type __n) noexcept
 8010862:	b580      	push	{r7, lr}
 8010864:	b082      	sub	sp, #8
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	4618      	mov	r0, r3
 8010872:	f000 f8ab 	bl	80109cc <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>
 8010876:	4603      	mov	r3, r0
      }
 8010878:	4618      	mov	r0, r3
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <_ZNK3Mat6MatrixILt6ELt1EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	807b      	strh	r3, [r7, #2]
 801088c:	4613      	mov	r3, r2
 801088e:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8010890:	887a      	ldrh	r2, [r7, #2]
 8010892:	883b      	ldrh	r3, [r7, #0]
 8010894:	4413      	add	r3, r2
 8010896:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	68f9      	ldr	r1, [r7, #12]
 801089c:	4618      	mov	r0, r3
 801089e:	f7fd fd06 	bl	800e2ae <_ZNKSt5arrayIfLj6EEixEj>
 80108a2:	4603      	mov	r3, r0
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	ee07 3a90 	vmov	s15, r3
}
 80108aa:	eeb0 0a67 	vmov.f32	s0, s15
 80108ae:	3710      	adds	r7, #16
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	807b      	strh	r3, [r7, #2]
 80108c0:	4613      	mov	r3, r2
 80108c2:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80108c4:	887a      	ldrh	r2, [r7, #2]
 80108c6:	883b      	ldrh	r3, [r7, #0]
 80108c8:	4413      	add	r3, r2
 80108ca:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68f9      	ldr	r1, [r7, #12]
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7ff fba9 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 80108d6:	4603      	mov	r3, r0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3710      	adds	r7, #16
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	4413      	add	r3, r2
 80108f2:	4618      	mov	r0, r3
 80108f4:	370c      	adds	r7, #12
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <_ZN3Mat6MatrixILt6ELt1EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 80108fe:	b580      	push	{r7, lr}
 8010900:	b084      	sub	sp, #16
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	807b      	strh	r3, [r7, #2]
 801090a:	4613      	mov	r3, r2
 801090c:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801090e:	887a      	ldrh	r2, [r7, #2]
 8010910:	883b      	ldrh	r3, [r7, #0]
 8010912:	4413      	add	r3, r2
 8010914:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	68f9      	ldr	r1, [r7, #12]
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fe33 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8010920:	4603      	mov	r3, r0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <_ZNSt14__array_traitsISt5arrayIfLj4EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801092a:	b480      	push	{r7}
 801092c:	b083      	sub	sp, #12
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	011b      	lsls	r3, r3, #4
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	4413      	add	r3, r2
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <_ZNSt14__array_traitsISt5arrayIfLj4EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	011b      	lsls	r3, r3, #4
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	4413      	add	r3, r2
 801095a:	4618      	mov	r0, r3
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr

08010966 <_ZNSt14__array_traitsIfLj24EE6_S_refERA24_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010966:	b480      	push	{r7}
 8010968:	b083      	sub	sp, #12
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	4413      	add	r3, r2
 8010978:	4618      	mov	r0, r3
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <_ZNSt14__array_traitsISt5arrayIfLj6EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	4613      	mov	r3, r2
 8010992:	005b      	lsls	r3, r3, #1
 8010994:	4413      	add	r3, r2
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	4413      	add	r3, r2
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <_ZNSt14__array_traitsISt5arrayIfLj6EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80109b2:	683a      	ldr	r2, [r7, #0]
 80109b4:	4613      	mov	r3, r2
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	4413      	add	r3, r2
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	4413      	add	r3, r2
 80109c0:	4618      	mov	r0, r3
 80109c2:	370c      	adds	r7, #12
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <_ZNSt14__array_traitsISt5arrayIfLj6EELj1EE6_S_refERA1_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	4613      	mov	r3, r2
 80109da:	005b      	lsls	r3, r3, #1
 80109dc:	4413      	add	r3, r2
 80109de:	00db      	lsls	r3, r3, #3
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	4413      	add	r3, r2
 80109e4:	4618      	mov	r0, r3
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <_GLOBAL__sub_I_Fusion>:
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80109f8:	2001      	movs	r0, #1
 80109fa:	f7fd fe65 	bl	800e6c8 <_Z41__static_initialization_and_destruction_0ii>
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
const Matrix<3,3> GyroA({8.133f * DEG_2_RAD, 0.0, 0.0,
						0.0, 8.238f * DEG_2_RAD, 0.0,
						0.0, 0.0, 8.193f * DEG_2_RAD});
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
Matrix<3, 1> CalibrateMag(const Matrix<3, 1>& MagVec)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08c      	sub	sp, #48	; 0x30
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6178      	str	r0, [r7, #20]
	return (MagA * (MagVec - MagB));
 8010a08:	4919      	ldr	r1, [pc, #100]	; (8010a70 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010a0a:	6978      	ldr	r0, [r7, #20]
 8010a0c:	f000 f8c1 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010a10:	eef0 6a40 	vmov.f32	s13, s0
 8010a14:	eeb0 7a60 	vmov.f32	s14, s1
 8010a18:	eef0 7a41 	vmov.f32	s15, s2
 8010a1c:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010a20:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010a24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	4811      	ldr	r0, [pc, #68]	; (8010a74 <_Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010a30:	f7fd fa19 	bl	800de66 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010a34:	eef0 6a40 	vmov.f32	s13, s0
 8010a38:	eeb0 7a60 	vmov.f32	s14, s1
 8010a3c:	eef0 7a41 	vmov.f32	s15, s2
 8010a40:	edc7 6a06 	vstr	s13, [r7, #24]
 8010a44:	ed87 7a07 	vstr	s14, [r7, #28]
 8010a48:	edc7 7a08 	vstr	s15, [r7, #32]
 8010a4c:	69b9      	ldr	r1, [r7, #24]
 8010a4e:	69fa      	ldr	r2, [r7, #28]
 8010a50:	6a3b      	ldr	r3, [r7, #32]
 8010a52:	ee06 1a90 	vmov	s13, r1
 8010a56:	ee07 2a10 	vmov	s14, r2
 8010a5a:	ee07 3a90 	vmov	s15, r3
}
 8010a5e:	eeb0 0a66 	vmov.f32	s0, s13
 8010a62:	eef0 0a47 	vmov.f32	s1, s14
 8010a66:	eeb0 1a67 	vmov.f32	s2, s15
 8010a6a:	3730      	adds	r7, #48	; 0x30
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	24009120 	.word	0x24009120
 8010a74:	240090fc 	.word	0x240090fc

08010a78 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE>:
Matrix<3, 1> CalibrateAcc(const Matrix<3, 1>& AccVec)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b08c      	sub	sp, #48	; 0x30
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6178      	str	r0, [r7, #20]
	return (AccA * (AccVec - AccB));
 8010a80:	4919      	ldr	r1, [pc, #100]	; (8010ae8 <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010a82:	6978      	ldr	r0, [r7, #20]
 8010a84:	f000 f885 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010a88:	eef0 6a40 	vmov.f32	s13, s0
 8010a8c:	eeb0 7a60 	vmov.f32	s14, s1
 8010a90:	eef0 7a41 	vmov.f32	s15, s2
 8010a94:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010a98:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010a9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	4811      	ldr	r0, [pc, #68]	; (8010aec <_Z12CalibrateAccRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010aa8:	f7fd f9dd 	bl	800de66 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010aac:	eef0 6a40 	vmov.f32	s13, s0
 8010ab0:	eeb0 7a60 	vmov.f32	s14, s1
 8010ab4:	eef0 7a41 	vmov.f32	s15, s2
 8010ab8:	edc7 6a06 	vstr	s13, [r7, #24]
 8010abc:	ed87 7a07 	vstr	s14, [r7, #28]
 8010ac0:	edc7 7a08 	vstr	s15, [r7, #32]
 8010ac4:	69b9      	ldr	r1, [r7, #24]
 8010ac6:	69fa      	ldr	r2, [r7, #28]
 8010ac8:	6a3b      	ldr	r3, [r7, #32]
 8010aca:	ee06 1a90 	vmov	s13, r1
 8010ace:	ee07 2a10 	vmov	s14, r2
 8010ad2:	ee07 3a90 	vmov	s15, r3
}
 8010ad6:	eeb0 0a66 	vmov.f32	s0, s13
 8010ada:	eef0 0a47 	vmov.f32	s1, s14
 8010ade:	eeb0 1a67 	vmov.f32	s2, s15
 8010ae2:	3730      	adds	r7, #48	; 0x30
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	24009150 	.word	0x24009150
 8010aec:	2400912c 	.word	0x2400912c

08010af0 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE>:

Matrix<3, 1> CalibrateGyro(const Matrix<3, 1>& GyroVec)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b08c      	sub	sp, #48	; 0x30
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6178      	str	r0, [r7, #20]
	return (GyroA * (GyroVec - GyroB));
 8010af8:	4919      	ldr	r1, [pc, #100]	; (8010b60 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x70>)
 8010afa:	6978      	ldr	r0, [r7, #20]
 8010afc:	f000 f849 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8010b00:	eef0 6a40 	vmov.f32	s13, s0
 8010b04:	eeb0 7a60 	vmov.f32	s14, s1
 8010b08:	eef0 7a41 	vmov.f32	s15, s2
 8010b0c:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8010b10:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8010b14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8010b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4811      	ldr	r0, [pc, #68]	; (8010b64 <_Z13CalibrateGyroRKN3Mat6MatrixILt3ELt1EEE+0x74>)
 8010b20:	f7fd f9a1 	bl	800de66 <_ZNK3Mat6MatrixILt3ELt3EEmlILt1EEENS0_ILt3EXT_EEERKS3_>
 8010b24:	eef0 6a40 	vmov.f32	s13, s0
 8010b28:	eeb0 7a60 	vmov.f32	s14, s1
 8010b2c:	eef0 7a41 	vmov.f32	s15, s2
 8010b30:	edc7 6a06 	vstr	s13, [r7, #24]
 8010b34:	ed87 7a07 	vstr	s14, [r7, #28]
 8010b38:	edc7 7a08 	vstr	s15, [r7, #32]
 8010b3c:	69b9      	ldr	r1, [r7, #24]
 8010b3e:	69fa      	ldr	r2, [r7, #28]
 8010b40:	6a3b      	ldr	r3, [r7, #32]
 8010b42:	ee06 1a90 	vmov	s13, r1
 8010b46:	ee07 2a10 	vmov	s14, r2
 8010b4a:	ee07 3a90 	vmov	s15, r3
}
 8010b4e:	eeb0 0a66 	vmov.f32	s0, s13
 8010b52:	eef0 0a47 	vmov.f32	s1, s14
 8010b56:	eeb0 1a67 	vmov.f32	s2, s15
 8010b5a:	3730      	adds	r7, #48	; 0x30
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	24009180 	.word	0x24009180
 8010b64:	2400915c 	.word	0x2400915c

08010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8010b68:	b4b0      	push	{r4, r5, r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	4614      	mov	r4, r2
 8010b78:	461d      	mov	r5, r3
 8010b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b82:	682b      	ldr	r3, [r5, #0]
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	370c      	adds	r7, #12
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bcb0      	pop	{r4, r5, r7}
 8010b90:	4770      	bx	lr

08010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator-(const Matrix<heigth, width> &other) const
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b08c      	sub	sp, #48	; 0x30
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6178      	str	r0, [r7, #20]
 8010b9a:	6139      	str	r1, [r7, #16]
    Matrix<heigth, width> result = *this;
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	f107 0318 	add.w	r3, r7, #24
 8010ba2:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ba4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	result -= other;
 8010ba8:	f107 0318 	add.w	r3, r7, #24
 8010bac:	6939      	ldr	r1, [r7, #16]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 f819 	bl	8010be6 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>
	return result;
 8010bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb8:	f107 0218 	add.w	r2, r7, #24
 8010bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8010bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	ee06 1a90 	vmov	s13, r1
 8010bcc:	ee07 2a10 	vmov	s14, r2
 8010bd0:	ee07 3a90 	vmov	s15, r3
}
 8010bd4:	eeb0 0a66 	vmov.f32	s0, s13
 8010bd8:	eef0 0a47 	vmov.f32	s1, s14
 8010bdc:	eeb0 1a67 	vmov.f32	s2, s15
 8010be0:	3730      	adds	r7, #48	; 0x30
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator-=(const Matrix<heigth, width> &other)
 8010be6:	b580      	push	{r7, lr}
 8010be8:	ed2d 8b02 	vpush	{d8}
 8010bec:	b084      	sub	sp, #16
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] -= other._values[i];
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	60fb      	str	r3, [r7, #12]
 8010bf8:	e016      	b.n	8010c28 <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x42>
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	68f9      	ldr	r1, [r7, #12]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fd fd3c 	bl	800e67c <_ZNKSt5arrayIfLj3EEixEj>
 8010c04:	4603      	mov	r3, r0
 8010c06:	ed93 8a00 	vldr	s16, [r3]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	68f9      	ldr	r1, [r7, #12]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fd fa8a 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8010c14:	4603      	mov	r3, r0
 8010c16:	edd3 7a00 	vldr	s15, [r3]
 8010c1a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8010c1e:	edc3 7a00 	vstr	s15, [r3]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3301      	adds	r3, #1
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 f810 	bl	8010c50 <_ZNKSt5arrayIfLj3EE4sizeEv>
 8010c30:	4602      	mov	r2, r0
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	4293      	cmp	r3, r2
 8010c36:	bf34      	ite	cc
 8010c38:	2301      	movcc	r3, #1
 8010c3a:	2300      	movcs	r3, #0
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1db      	bne.n	8010bfa <_ZN3Mat6MatrixILt3ELt1EEmIERKS1_+0x14>
	return *this;
 8010c42:	687b      	ldr	r3, [r7, #4]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3710      	adds	r7, #16
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	ecbd 8b02 	vpop	{d8}
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZNKSt5arrayIfLj3EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	2303      	movs	r3, #3
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	370c      	adds	r7, #12
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
	...

08010c68 <_Z41__static_initialization_and_destruction_0ii>:
 8010c68:	b5b0      	push	{r4, r5, r7, lr}
 8010c6a:	b0a6      	sub	sp, #152	; 0x98
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d158      	bne.n	8010d2a <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d153      	bne.n	8010d2a <_Z41__static_initialization_and_destruction_0ii+0xc2>
						0.0f, 0.0f, 0.13103f});
 8010c82:	4b2c      	ldr	r3, [pc, #176]	; (8010d34 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8010c84:	f107 0408 	add.w	r4, r7, #8
 8010c88:	461d      	mov	r5, r3
 8010c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c92:	682b      	ldr	r3, [r5, #0]
 8010c94:	6023      	str	r3, [r4, #0]
 8010c96:	f107 0308 	add.w	r3, r7, #8
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	4826      	ldr	r0, [pc, #152]	; (8010d38 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8010c9e:	f7ff ff63 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> MagB({26.0f, 23.0f, -146.5f});
 8010ca2:	4a26      	ldr	r2, [pc, #152]	; (8010d3c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8010ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8010caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	4822      	ldr	r0, [pc, #136]	; (8010d40 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8010cb6:	f7fd f883 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						-0.001166, 0.000580, 0.996647});
 8010cba:	4b22      	ldr	r3, [pc, #136]	; (8010d44 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8010cbc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8010cc0:	461d      	mov	r5, r3
 8010cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	6023      	str	r3, [r4, #0]
 8010cce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	481c      	ldr	r0, [pc, #112]	; (8010d48 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8010cd6:	f7ff ff47 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> AccB({0.349030, 0.113962, -0.205569});
 8010cda:	4a1c      	ldr	r2, [pc, #112]	; (8010d4c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8010cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ce2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010ce6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010cea:	4619      	mov	r1, r3
 8010cec:	4818      	ldr	r0, [pc, #96]	; (8010d50 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8010cee:	f7fd f867 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
						0.0, 0.0, 8.193f * DEG_2_RAD});
 8010cf2:	4b18      	ldr	r3, [pc, #96]	; (8010d54 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8010cf4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8010cf8:	461d      	mov	r5, r3
 8010cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d02:	682b      	ldr	r3, [r5, #0]
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	4812      	ldr	r0, [pc, #72]	; (8010d58 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8010d0e:	f7ff ff2b 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
const Matrix<3, 1> GyroB({-0.045665, 0.047779, -0.005830});
 8010d12:	4a12      	ldr	r2, [pc, #72]	; (8010d5c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8010d14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010d22:	4619      	mov	r1, r3
 8010d24:	480e      	ldr	r0, [pc, #56]	; (8010d60 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8010d26:	f7fd f84b 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
}
 8010d2a:	bf00      	nop
 8010d2c:	3798      	adds	r7, #152	; 0x98
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bdb0      	pop	{r4, r5, r7, pc}
 8010d32:	bf00      	nop
 8010d34:	0802023c 	.word	0x0802023c
 8010d38:	240090fc 	.word	0x240090fc
 8010d3c:	08020260 	.word	0x08020260
 8010d40:	24009120 	.word	0x24009120
 8010d44:	0802026c 	.word	0x0802026c
 8010d48:	2400912c 	.word	0x2400912c
 8010d4c:	08020290 	.word	0x08020290
 8010d50:	24009150 	.word	0x24009150
 8010d54:	0802029c 	.word	0x0802029c
 8010d58:	2400915c 	.word	0x2400915c
 8010d5c:	080202c0 	.word	0x080202c0
 8010d60:	24009180 	.word	0x24009180

08010d64 <_GLOBAL__sub_I__Z12CalibrateMagRKN3Mat6MatrixILt3ELt1EEE>:
 8010d64:	b580      	push	{r7, lr}
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010d6c:	2001      	movs	r0, #1
 8010d6e:	f7ff ff7b 	bl	8010c68 <_Z41__static_initialization_and_destruction_0ii>
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8010d7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8010d82:	f00c fbd5 	bl	801d530 <cosf>
 8010d86:	eef0 7a40 	vmov.f32	s15, s0
 8010d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8010d9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8010da2:	f00c fb01 	bl	801d3a8 <sinf>
 8010da6:	eef0 7a40 	vmov.f32	s15, s0
 8010daa:	eeb0 0a67 	vmov.f32	s0, s15
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	ed87 0a01 	vstr	s0, [r7, #4]
 8010dbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8010dc2:	f00c faa9 	bl	801d318 <sqrtf>
 8010dc6:	eef0 7a40 	vmov.f32	s15, s0
 8010dca:	eeb0 0a67 	vmov.f32	s0, s15
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <_ZN10Algorithms3sgnEf>:

namespace Algorithms
{

float sgn(float val)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((0.0f < val) - (0.0f > val));
 8010dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8010de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dea:	bfcc      	ite	gt
 8010dec:	2301      	movgt	r3, #1
 8010dee:	2300      	movle	r3, #0
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	461a      	mov	r2, r3
 8010df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8010df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e00:	bf4c      	ite	mi
 8010e02:	2301      	movmi	r3, #1
 8010e04:	2300      	movpl	r3, #0
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	1ad3      	subs	r3, r2, r3
 8010e0a:	ee07 3a90 	vmov	s15, r3
 8010e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8010e12:	eeb0 0a67 	vmov.f32	s0, s15
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

const Matrix<3, 3>& Inverse3_3Matrix(const Matrix<3, 3>& mat)
{
 8010e20:	b5b0      	push	{r4, r5, r7, lr}
 8010e22:	b096      	sub	sp, #88	; 0x58
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
	static Matrix<3, 3> result;
 8010e28:	4bd2      	ldr	r3, [pc, #840]	; (8011174 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f3bf 8f5b 	dmb	ish
 8010e30:	f003 0301 	and.w	r3, r3, #1
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bf0c      	ite	eq
 8010e38:	2301      	moveq	r3, #1
 8010e3a:	2300      	movne	r3, #0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d010      	beq.n	8010e64 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 8010e42:	48cc      	ldr	r0, [pc, #816]	; (8011174 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010e44:	f00c fa58 	bl	801d2f8 <__cxa_guard_acquire>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	bf14      	ite	ne
 8010e4e:	2301      	movne	r3, #1
 8010e50:	2300      	moveq	r3, #0
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x44>
 8010e58:	48c7      	ldr	r0, [pc, #796]	; (8011178 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x358>)
 8010e5a:	f7fc ff42 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8010e5e:	48c5      	ldr	r0, [pc, #788]	; (8011174 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x354>)
 8010e60:	f00c fa56 	bl	801d310 <__cxa_guard_release>
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = mat(0,0); a_1_2 = mat(0,1); a_1_3 = mat(0,2);
 8010e64:	2200      	movs	r2, #0
 8010e66:	2100      	movs	r1, #0
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f7fd fafe 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010e6e:	eef0 7a40 	vmov.f32	s15, s0
 8010e72:	4bc2      	ldr	r3, [pc, #776]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8010e74:	edc3 7a00 	vstr	s15, [r3]
 8010e78:	2201      	movs	r2, #1
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7fd faf4 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010e82:	eef0 7a40 	vmov.f32	s15, s0
 8010e86:	4bbe      	ldr	r3, [pc, #760]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8010e88:	edc3 7a00 	vstr	s15, [r3]
 8010e8c:	2202      	movs	r2, #2
 8010e8e:	2100      	movs	r1, #0
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7fd faea 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010e96:	eef0 7a40 	vmov.f32	s15, s0
 8010e9a:	4bba      	ldr	r3, [pc, #744]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8010e9c:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = mat(1,0); a_2_2 = mat(1,1); a_2_3 = mat(1,2);
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7fd fae0 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010eaa:	eef0 7a40 	vmov.f32	s15, s0
 8010eae:	4bb6      	ldr	r3, [pc, #728]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8010eb0:	edc3 7a00 	vstr	s15, [r3]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	2101      	movs	r1, #1
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7fd fad6 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010ebe:	eef0 7a40 	vmov.f32	s15, s0
 8010ec2:	4bb2      	ldr	r3, [pc, #712]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010ec4:	edc3 7a00 	vstr	s15, [r3]
 8010ec8:	2202      	movs	r2, #2
 8010eca:	2101      	movs	r1, #1
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7fd facc 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010ed2:	eef0 7a40 	vmov.f32	s15, s0
 8010ed6:	4bae      	ldr	r3, [pc, #696]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8010ed8:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = mat(2,0); a_3_2 = mat(2,1); a_3_3 = mat(2,2);
 8010edc:	2200      	movs	r2, #0
 8010ede:	2102      	movs	r1, #2
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7fd fac2 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010ee6:	eef0 7a40 	vmov.f32	s15, s0
 8010eea:	4baa      	ldr	r3, [pc, #680]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8010eec:	edc3 7a00 	vstr	s15, [r3]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	2102      	movs	r1, #2
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7fd fab8 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010efa:	eef0 7a40 	vmov.f32	s15, s0
 8010efe:	4ba6      	ldr	r3, [pc, #664]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8010f00:	edc3 7a00 	vstr	s15, [r3]
 8010f04:	2202      	movs	r2, #2
 8010f06:	2102      	movs	r1, #2
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7fd faae 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8010f0e:	eef0 7a40 	vmov.f32	s15, s0
 8010f12:	4ba2      	ldr	r3, [pc, #648]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8010f14:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8010f18:	4b98      	ldr	r3, [pc, #608]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8010f1a:	ed93 7a00 	vldr	s14, [r3]
 8010f1e:	4b9b      	ldr	r3, [pc, #620]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010f20:	edd3 7a00 	vldr	s15, [r3]
 8010f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f28:	4b9c      	ldr	r3, [pc, #624]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8010f2a:	edd3 7a00 	vldr	s15, [r3]
 8010f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f32:	4b92      	ldr	r3, [pc, #584]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 8010f34:	edd3 6a00 	vldr	s13, [r3]
 8010f38:	4b95      	ldr	r3, [pc, #596]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8010f3a:	edd3 7a00 	vldr	s15, [r3]
 8010f3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010f42:	4b95      	ldr	r3, [pc, #596]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8010f44:	edd3 7a00 	vldr	s15, [r3]
 8010f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f50:	4b8b      	ldr	r3, [pc, #556]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8010f52:	edd3 6a00 	vldr	s13, [r3]
 8010f56:	4b8c      	ldr	r3, [pc, #560]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8010f58:	edd3 7a00 	vldr	s15, [r3]
 8010f5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010f60:	4b8e      	ldr	r3, [pc, #568]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8010f62:	edd3 7a00 	vldr	s15, [r3]
 8010f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f6e:	4b84      	ldr	r3, [pc, #528]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8010f70:	edd3 6a00 	vldr	s13, [r3]
 8010f74:	4b86      	ldr	r3, [pc, #536]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8010f76:	edd3 7a00 	vldr	s15, [r3]
 8010f7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010f7e:	4b85      	ldr	r3, [pc, #532]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8010f80:	edd3 7a00 	vldr	s15, [r3]
 8010f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f8c:	4b7d      	ldr	r3, [pc, #500]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8010f8e:	edd3 6a00 	vldr	s13, [r3]
 8010f92:	4b7d      	ldr	r3, [pc, #500]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8010f94:	edd3 7a00 	vldr	s15, [r3]
 8010f98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010f9c:	4b7e      	ldr	r3, [pc, #504]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8010f9e:	edd3 7a00 	vldr	s15, [r3]
 8010fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010faa:	4b76      	ldr	r3, [pc, #472]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8010fac:	edd3 6a00 	vldr	s13, [r3]
 8010fb0:	4b76      	ldr	r3, [pc, #472]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010fb2:	edd3 7a00 	vldr	s15, [r3]
 8010fb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010fba:	4b76      	ldr	r3, [pc, #472]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8010fbc:	edd3 7a00 	vldr	s15, [r3]
 8010fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fc8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float det1 = 1.0f / det;
 8010fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fd0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fd8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8010fdc:	4b6b      	ldr	r3, [pc, #428]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8010fde:	ed93 7a00 	vldr	s14, [r3]
 8010fe2:	4b6e      	ldr	r3, [pc, #440]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8010fe4:	edd3 7a00 	vldr	s15, [r3]
 8010fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fec:	4b68      	ldr	r3, [pc, #416]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8010fee:	edd3 6a00 	vldr	s13, [r3]
 8010ff2:	4b69      	ldr	r3, [pc, #420]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8010ff4:	edd3 7a00 	vldr	s15, [r3]
 8010ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011000:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011004:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011008:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801100c:	4b5c      	ldr	r3, [pc, #368]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 801100e:	ed93 7a00 	vldr	s14, [r3]
 8011012:	4b62      	ldr	r3, [pc, #392]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8011014:	edd3 7a00 	vldr	s15, [r3]
 8011018:	ee27 7a27 	vmul.f32	s14, s14, s15
 801101c:	4b59      	ldr	r3, [pc, #356]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 801101e:	edd3 6a00 	vldr	s13, [r3]
 8011022:	4b5d      	ldr	r3, [pc, #372]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8011024:	edd3 7a00 	vldr	s15, [r3]
 8011028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011030:	eeb1 7a67 	vneg.f32	s14, s15
 8011034:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011038:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 801103c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8011040:	4b4f      	ldr	r3, [pc, #316]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 8011042:	ed93 7a00 	vldr	s14, [r3]
 8011046:	4b52      	ldr	r3, [pc, #328]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8011048:	edd3 7a00 	vldr	s15, [r3]
 801104c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011050:	4b4c      	ldr	r3, [pc, #304]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 8011052:	edd3 6a00 	vldr	s13, [r3]
 8011056:	4b4d      	ldr	r3, [pc, #308]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8011058:	edd3 7a00 	vldr	s15, [r3]
 801105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011060:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011064:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011068:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 801106c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8011070:	4b45      	ldr	r3, [pc, #276]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 8011072:	ed93 7a00 	vldr	s14, [r3]
 8011076:	4b49      	ldr	r3, [pc, #292]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8011078:	edd3 7a00 	vldr	s15, [r3]
 801107c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011080:	4b43      	ldr	r3, [pc, #268]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8011082:	edd3 6a00 	vldr	s13, [r3]
 8011086:	4b43      	ldr	r3, [pc, #268]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011088:	edd3 7a00 	vldr	s15, [r3]
 801108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011094:	eeb1 7a67 	vneg.f32	s14, s15
 8011098:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801109c:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80110a0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80110a4:	4b35      	ldr	r3, [pc, #212]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 80110a6:	ed93 7a00 	vldr	s14, [r3]
 80110aa:	4b3c      	ldr	r3, [pc, #240]	; (801119c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80110ac:	edd3 7a00 	vldr	s15, [r3]
 80110b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110b4:	4b33      	ldr	r3, [pc, #204]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 80110b6:	edd3 6a00 	vldr	s13, [r3]
 80110ba:	4b36      	ldr	r3, [pc, #216]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80110bc:	edd3 7a00 	vldr	s15, [r3]
 80110c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80110cc:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80110d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80110d4:	4b29      	ldr	r3, [pc, #164]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 80110d6:	ed93 7a00 	vldr	s14, [r3]
 80110da:	4b2d      	ldr	r3, [pc, #180]	; (8011190 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80110dc:	edd3 7a00 	vldr	s15, [r3]
 80110e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110e4:	4b27      	ldr	r3, [pc, #156]	; (8011184 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x364>)
 80110e6:	edd3 6a00 	vldr	s13, [r3]
 80110ea:	4b27      	ldr	r3, [pc, #156]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 80110ec:	edd3 7a00 	vldr	s15, [r3]
 80110f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110f8:	eeb1 7a67 	vneg.f32	s14, s15
 80110fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011100:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011104:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8011108:	4b1f      	ldr	r3, [pc, #124]	; (8011188 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x368>)
 801110a:	ed93 7a00 	vldr	s14, [r3]
 801110e:	4b22      	ldr	r3, [pc, #136]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8011110:	edd3 7a00 	vldr	s15, [r3]
 8011114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011118:	4b1c      	ldr	r3, [pc, #112]	; (801118c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801111a:	edd3 6a00 	vldr	s13, [r3]
 801111e:	4b1d      	ldr	r3, [pc, #116]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011120:	edd3 7a00 	vldr	s15, [r3]
 8011124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011128:	ee37 7a67 	vsub.f32	s14, s14, s15
 801112c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011130:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011134:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8011138:	4b10      	ldr	r3, [pc, #64]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 801113a:	ed93 7a00 	vldr	s14, [r3]
 801113e:	4b16      	ldr	r3, [pc, #88]	; (8011198 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8011140:	edd3 7a00 	vldr	s15, [r3]
 8011144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011148:	4b0d      	ldr	r3, [pc, #52]	; (8011180 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x360>)
 801114a:	edd3 6a00 	vldr	s13, [r3]
 801114e:	4b11      	ldr	r3, [pc, #68]	; (8011194 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8011150:	edd3 7a00 	vldr	s15, [r3]
 8011154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011158:	ee77 7a67 	vsub.f32	s15, s14, s15
 801115c:	eeb1 7a67 	vneg.f32	s14, s15
 8011160:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011164:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 8011168:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 801116c:	4b03      	ldr	r3, [pc, #12]	; (801117c <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x35c>)
 801116e:	ed93 7a00 	vldr	s14, [r3]
 8011172:	e015      	b.n	80111a0 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>
 8011174:	240091b0 	.word	0x240091b0
 8011178:	2400918c 	.word	0x2400918c
 801117c:	240091b4 	.word	0x240091b4
 8011180:	240091b8 	.word	0x240091b8
 8011184:	240091bc 	.word	0x240091bc
 8011188:	240091c0 	.word	0x240091c0
 801118c:	240091c4 	.word	0x240091c4
 8011190:	240091c8 	.word	0x240091c8
 8011194:	240091cc 	.word	0x240091cc
 8011198:	240091d0 	.word	0x240091d0
 801119c:	240091d4 	.word	0x240091d4
 80111a0:	4b15      	ldr	r3, [pc, #84]	; (80111f8 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 80111a2:	edd3 7a00 	vldr	s15, [r3]
 80111a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111aa:	4b14      	ldr	r3, [pc, #80]	; (80111fc <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3dc>)
 80111ac:	edd3 6a00 	vldr	s13, [r3]
 80111b0:	4b13      	ldr	r3, [pc, #76]	; (8011200 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e0>)
 80111b2:	edd3 7a00 	vldr	s15, [r3]
 80111b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80111ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80111be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80111c2:	ee67 7a27 	vmul.f32	s15, s14, s15
	result =
 80111c6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80111ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff fcc7 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80111da:	4b0a      	ldr	r3, [pc, #40]	; (8011204 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
 80111dc:	461d      	mov	r5, r3
 80111de:	f107 0408 	add.w	r4, r7, #8
 80111e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111ea:	6823      	ldr	r3, [r4, #0]
 80111ec:	602b      	str	r3, [r5, #0]
	}};
	return result;
 80111ee:	4b05      	ldr	r3, [pc, #20]	; (8011204 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3e4>)
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3758      	adds	r7, #88	; 0x58
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bdb0      	pop	{r4, r5, r7, pc}
 80111f8:	240091c4 	.word	0x240091c4
 80111fc:	240091b8 	.word	0x240091b8
 8011200:	240091c0 	.word	0x240091c0
 8011204:	2400918c 	.word	0x2400918c

08011208 <_ZNK10Algorithms10AHRSKalman8GetStateEv>:

const Quaternion& AHRSKalman::GetState() const
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
	return _X;
 8011210:	687b      	ldr	r3, [r7, #4]
}
 8011212:	4618      	mov	r0, r3
 8011214:	370c      	adds	r7, #12
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <_ZN10Algorithms10AHRSKalman16InitialiseKalmanERKN3Mat6MatrixILt3ELt1EEES5_f>:
{
	return _P;
}

void AHRSKalman::InitialiseKalman(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	ed2d 8b02 	vpush	{d8}
 8011224:	b094      	sub	sp, #80	; 0x50
 8011226:	af00      	add	r7, sp, #0
 8011228:	60f8      	str	r0, [r7, #12]
 801122a:	60b9      	str	r1, [r7, #8]
 801122c:	607a      	str	r2, [r7, #4]
 801122e:	ed87 0a00 	vstr	s0, [r7]
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 8011232:	2200      	movs	r2, #0
 8011234:	2100      	movs	r1, #0
 8011236:	68b8      	ldr	r0, [r7, #8]
 8011238:	f7fd f943 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801123c:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
 8011240:	2200      	movs	r2, #0
 8011242:	2101      	movs	r1, #1
 8011244:	68b8      	ldr	r0, [r7, #8]
 8011246:	f7fd f93c 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801124a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
 801124e:	2200      	movs	r2, #0
 8011250:	2102      	movs	r1, #2
 8011252:	68b8      	ldr	r0, [r7, #8]
 8011254:	f7fd f935 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011258:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 801125c:	2200      	movs	r2, #0
 801125e:	2100      	movs	r1, #0
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f7fd f92e 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011266:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 801126a:	2200      	movs	r2, #0
 801126c:	2101      	movs	r1, #1
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7fd f927 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011274:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
 8011278:	2200      	movs	r2, #0
 801127a:	2102      	movs	r1, #2
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7fd f920 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8011282:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float amx{ay*mz - az*my};
 8011286:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801128a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801128e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011292:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8011296:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112a2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float amy{az*mx - ax*mz};
 80112a6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80112aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80112ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112b2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80112b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80112ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float amz{ax*my - ay*mx};
 80112c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80112ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80112ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112d2:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80112d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80112da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amax{amy*az - amz*ay};
 80112e6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80112ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80112ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80112f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80112fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011302:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float amay{amz*ax - amx*az};
 8011306:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801130a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011312:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8011316:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801131e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011322:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float amaz{amx*ay - amy*ax};
 8011326:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801132a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011332:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8011336:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801133a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011342:	edc7 7a08 	vstr	s15, [r7, #32]

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 8011346:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801134a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801134e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011352:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011356:	ee37 7a27 	vadd.f32	s14, s14, s15
 801135a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801135e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011366:	eeb0 0a67 	vmov.f32	s0, s15
 801136a:	f7ff fd23 	bl	8010db4 <_ZSt4sqrtf>
 801136e:	eeb0 7a40 	vmov.f32	s14, s0
 8011372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801137a:	edc7 7a07 	vstr	s15, [r7, #28]
	ax *= ad; ay *= ad; az *= ad;
 801137e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8011382:	edd7 7a07 	vldr	s15, [r7, #28]
 8011386:	ee67 7a27 	vmul.f32	s15, s14, s15
 801138a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 801138e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011392:	edd7 7a07 	vldr	s15, [r7, #28]
 8011396:	ee67 7a27 	vmul.f32	s15, s14, s15
 801139a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 801139e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80113a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80113a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 80113ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80113b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80113b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80113ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80113be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80113c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80113ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ce:	eeb0 0a67 	vmov.f32	s0, s15
 80113d2:	f7ff fcef 	bl	8010db4 <_ZSt4sqrtf>
 80113d6:	eeb0 7a40 	vmov.f32	s14, s0
 80113da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80113e2:	edc7 7a06 	vstr	s15, [r7, #24]
	amx *= amd; amy *= amd; amz *= amd;
 80113e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80113ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80113ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80113f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80113fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80113fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011402:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8011406:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801140a:	edd7 7a06 	vldr	s15, [r7, #24]
 801140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011412:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 8011416:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801141a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801141e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011422:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011426:	ee37 7a27 	vadd.f32	s14, s14, s15
 801142a:	edd7 7a08 	vldr	s15, [r7, #32]
 801142e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011436:	eeb0 0a67 	vmov.f32	s0, s15
 801143a:	f7ff fcbb 	bl	8010db4 <_ZSt4sqrtf>
 801143e:	eeb0 7a40 	vmov.f32	s14, s0
 8011442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801144a:	edc7 7a05 	vstr	s15, [r7, #20]
	amax *= amad; amay *= amad; amaz *= amad;
 801144e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011452:	edd7 7a05 	vldr	s15, [r7, #20]
 8011456:	ee67 7a27 	vmul.f32	s15, s14, s15
 801145a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801145e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011462:	edd7 7a05 	vldr	s15, [r7, #20]
 8011466:	ee67 7a27 	vmul.f32	s15, s14, s15
 801146a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801146e:	ed97 7a08 	vldr	s14, [r7, #32]
 8011472:	edd7 7a05 	vldr	s15, [r7, #20]
 8011476:	ee67 7a27 	vmul.f32	s15, s14, s15
 801147a:	edc7 7a08 	vstr	s15, [r7, #32]

	_X.w = 0.5f * sqrt(amax + amy + az + 1.0f);
 801147e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011482:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011486:	ee37 7a27 	vadd.f32	s14, s14, s15
 801148a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011496:	ee77 7a87 	vadd.f32	s15, s15, s14
 801149a:	eeb0 0a67 	vmov.f32	s0, s15
 801149e:	f7ff fc89 	bl	8010db4 <_ZSt4sqrtf>
 80114a2:	eef0 7a40 	vmov.f32	s15, s0
 80114a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	edc3 7a00 	vstr	s15, [r3]
	_X.x = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 80114b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80114b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80114bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114c0:	eeb0 0a67 	vmov.f32	s0, s15
 80114c4:	f7ff fc86 	bl	8010dd4 <_ZN10Algorithms3sgnEf>
 80114c8:	eef0 7a40 	vmov.f32	s15, s0
 80114cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80114d0:	ee27 8a87 	vmul.f32	s16, s15, s14
 80114d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80114d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80114dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80114e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114f0:	eeb0 0a67 	vmov.f32	s0, s15
 80114f4:	f7ff fc5e 	bl	8010db4 <_ZSt4sqrtf>
 80114f8:	eef0 7a40 	vmov.f32	s15, s0
 80114fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	edc3 7a01 	vstr	s15, [r3, #4]
	_X.y = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 8011506:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801150a:	edd7 7a08 	vldr	s15, [r7, #32]
 801150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011512:	eeb0 0a67 	vmov.f32	s0, s15
 8011516:	f7ff fc5d 	bl	8010dd4 <_ZN10Algorithms3sgnEf>
 801151a:	eef0 7a40 	vmov.f32	s15, s0
 801151e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011522:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011526:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801152a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011532:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801153a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801153e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011542:	eeb0 0a67 	vmov.f32	s0, s15
 8011546:	f7ff fc35 	bl	8010db4 <_ZSt4sqrtf>
 801154a:	eef0 7a40 	vmov.f32	s15, s0
 801154e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	edc3 7a02 	vstr	s15, [r3, #8]
	_X.z = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 8011558:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801155c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8011560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011564:	eeb0 0a67 	vmov.f32	s0, s15
 8011568:	f7ff fc34 	bl	8010dd4 <_ZN10Algorithms3sgnEf>
 801156c:	eef0 7a40 	vmov.f32	s15, s0
 8011570:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011574:	ee27 8a87 	vmul.f32	s16, s15, s14
 8011578:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801157c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011584:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011588:	ee77 7a67 	vsub.f32	s15, s14, s15
 801158c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011594:	eeb0 0a67 	vmov.f32	s0, s15
 8011598:	f7ff fc0c 	bl	8010db4 <_ZSt4sqrtf>
 801159c:	eef0 7a40 	vmov.f32	s15, s0
 80115a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	edc3 7a03 	vstr	s15, [r3, #12]
	_lastUpdateTime = time;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	651a      	str	r2, [r3, #80]	; 0x50
	_lastCorrectionTime = time;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	683a      	ldr	r2, [r7, #0]
 80115b4:	655a      	str	r2, [r3, #84]	; 0x54
}
 80115b6:	bf00      	nop
 80115b8:	3750      	adds	r7, #80	; 0x50
 80115ba:	46bd      	mov	sp, r7
 80115bc:	ecbd 8b02 	vpop	{d8}
 80115c0:	bd80      	pop	{r7, pc}
	...

080115c4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::UpdateState(const Matrix<3, 1>& U, float time)
{
 80115c4:	b5b0      	push	{r4, r5, r7, lr}
 80115c6:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80115d0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80115d4:	6018      	str	r0, [r3, #0]
 80115d6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80115da:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80115de:	6019      	str	r1, [r3, #0]
 80115e0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80115e4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80115e8:	ed83 0a00 	vstr	s0, [r3]
//Update State
	float hdt = (time - _lastUpdateTime) * 0.5f; //Half-delta-time
 80115ec:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80115f0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80115fa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80115fe:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8011602:	ed93 7a00 	vldr	s14, [r3]
 8011606:	ee77 7a67 	vsub.f32	s15, s14, s15
 801160a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011612:	edc7 7a9f 	vstr	s15, [r7, #636]	; 0x27c
	_lastUpdateTime = time;
 8011616:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801161a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8011624:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8011628:	6812      	ldr	r2, [r2, #0]
 801162a:	651a      	str	r2, [r3, #80]	; 0x50
	static Matrix<4, 4> F;
 801162c:	4bdc      	ldr	r3, [pc, #880]	; (80119a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f3bf 8f5b 	dmb	ish
 8011634:	f003 0301 	and.w	r3, r3, #1
 8011638:	2b00      	cmp	r3, #0
 801163a:	bf0c      	ite	eq
 801163c:	2301      	moveq	r3, #1
 801163e:	2300      	movne	r3, #0
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	d010      	beq.n	8011668 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8011646:	48d6      	ldr	r0, [pc, #856]	; (80119a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 8011648:	f00b fe56 	bl	801d2f8 <__cxa_guard_acquire>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	bf14      	ite	ne
 8011652:	2301      	movne	r3, #1
 8011654:	2300      	moveq	r3, #0
 8011656:	b2db      	uxtb	r3, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	d005      	beq.n	8011668 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 801165c:	48d1      	ldr	r0, [pc, #836]	; (80119a4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e0>)
 801165e:	f7fc fabc 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
 8011662:	48cf      	ldr	r0, [pc, #828]	; (80119a0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3dc>)
 8011664:	f00b fe54 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 3> W;
 8011668:	4bcf      	ldr	r3, [pc, #828]	; (80119a8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f3bf 8f5b 	dmb	ish
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	bf0c      	ite	eq
 8011678:	2301      	moveq	r3, #1
 801167a:	2300      	movne	r3, #0
 801167c:	b2db      	uxtb	r3, r3
 801167e:	2b00      	cmp	r3, #0
 8011680:	d010      	beq.n	80116a4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8011682:	48c9      	ldr	r0, [pc, #804]	; (80119a8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 8011684:	f00b fe38 	bl	801d2f8 <__cxa_guard_acquire>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	bf14      	ite	ne
 801168e:	2301      	movne	r3, #1
 8011690:	2300      	moveq	r3, #0
 8011692:	b2db      	uxtb	r3, r3
 8011694:	2b00      	cmp	r3, #0
 8011696:	d005      	beq.n	80116a4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8011698:	48c4      	ldr	r0, [pc, #784]	; (80119ac <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e8>)
 801169a:	f001 fdf3 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 801169e:	48c2      	ldr	r0, [pc, #776]	; (80119a8 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3e4>)
 80116a0:	f00b fe36 	bl	801d310 <__cxa_guard_release>
	static Quaternion newX;
	float wx{U(0,0)}, wy{U(1,0)}, wz{U(2,0)};
 80116a4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116a8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80116ac:	2200      	movs	r2, #0
 80116ae:	2100      	movs	r1, #0
 80116b0:	6818      	ldr	r0, [r3, #0]
 80116b2:	f7fc ff06 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80116b6:	ed87 0a9e 	vstr	s0, [r7, #632]	; 0x278
 80116ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116be:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80116c2:	2200      	movs	r2, #0
 80116c4:	2101      	movs	r1, #1
 80116c6:	6818      	ldr	r0, [r3, #0]
 80116c8:	f7fc fefb 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80116cc:	ed87 0a9d 	vstr	s0, [r7, #628]	; 0x274
 80116d0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116d4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80116d8:	2200      	movs	r2, #0
 80116da:	2102      	movs	r1, #2
 80116dc:	6818      	ldr	r0, [r3, #0]
 80116de:	f7fc fef0 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80116e2:	ed87 0a9c 	vstr	s0, [r7, #624]	; 0x270
	newX.w = _X.w + hdt*(-wx*_X.x - wy*_X.y - wz*_X.z);
 80116e6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80116ea:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	ed93 7a00 	vldr	s14, [r3]
 80116f4:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 80116f8:	eef1 6a67 	vneg.f32	s13, s15
 80116fc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011700:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	edd3 7a01 	vldr	s15, [r3, #4]
 801170a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801170e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011712:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	ed93 6a02 	vldr	s12, [r3, #8]
 801171c:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011720:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011724:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011728:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801172c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	ed93 6a03 	vldr	s12, [r3, #12]
 8011736:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 801173a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801173e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011742:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801174e:	4b98      	ldr	r3, [pc, #608]	; (80119b0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 8011750:	edc3 7a00 	vstr	s15, [r3]
	newX.x = _X.x + hdt*(wx*_X.w - wy*_X.z + wz*_X.y);
 8011754:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011758:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011762:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011766:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	edd3 6a00 	vldr	s13, [r3]
 8011770:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011774:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011778:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801177c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	ed93 6a03 	vldr	s12, [r3, #12]
 8011786:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 801178a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801178e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011792:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011796:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	ed93 6a02 	vldr	s12, [r3, #8]
 80117a0:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 80117a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80117a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80117ac:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 80117b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117b8:	4b7d      	ldr	r3, [pc, #500]	; (80119b0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 80117ba:	edc3 7a01 	vstr	s15, [r3, #4]
	newX.y = _X.y + hdt*(wx*_X.z + wy*_X.w - wz*_X.x);
 80117be:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117c2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80117cc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117d0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	edd3 6a03 	vldr	s13, [r3, #12]
 80117da:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 80117de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80117e2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80117e6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	ed93 6a00 	vldr	s12, [r3]
 80117f0:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 80117f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80117f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80117fc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011800:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	ed93 6a01 	vldr	s12, [r3, #4]
 801180a:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 801180e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011812:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011816:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 801181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011822:	4b63      	ldr	r3, [pc, #396]	; (80119b0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 8011824:	edc3 7a02 	vstr	s15, [r3, #8]
	newX.z = _X.z + hdt*(-wx*_X.y + wy*_X.x + wz*_X.w);
 8011828:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801182c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	ed93 7a03 	vldr	s14, [r3, #12]
 8011836:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 801183a:	eef1 6a67 	vneg.f32	s13, s15
 801183e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011842:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	edd3 7a02 	vldr	s15, [r3, #8]
 801184c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011850:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011854:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	ed93 6a01 	vldr	s12, [r3, #4]
 801185e:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011862:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011866:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801186a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801186e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	ed93 6a00 	vldr	s12, [r3]
 8011878:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 801187c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011880:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011884:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011890:	4b47      	ldr	r3, [pc, #284]	; (80119b0 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3ec>)
 8011892:	edc3 7a03 	vstr	s15, [r3, #12]

	auto qW = _X * hdt;
 8011896:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801189a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	ed97 0a9f 	vldr	s0, [r7, #636]	; 0x27c
 80118a4:	4618      	mov	r0, r3
 80118a6:	f007 fe5a 	bl	801955e <_ZNK3Mat10QuaternionmlEf>
 80118aa:	eeb0 6a40 	vmov.f32	s12, s0
 80118ae:	eef0 6a60 	vmov.f32	s13, s1
 80118b2:	eeb0 7a41 	vmov.f32	s14, s2
 80118b6:	eef0 7a61 	vmov.f32	s15, s3
 80118ba:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118c2:	ed83 6a00 	vstr	s12, [r3]
 80118c6:	edc3 6a01 	vstr	s13, [r3, #4]
 80118ca:	ed83 7a02 	vstr	s14, [r3, #8]
 80118ce:	edc3 7a03 	vstr	s15, [r3, #12]

	W =
	{{
		-qW.x, -qW.y, -qW.z,
 80118d2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118d6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118da:	edd3 7a01 	vldr	s15, [r3, #4]
 80118de:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80118e2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118e6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80118ea:	edc3 7a00 	vstr	s15, [r3]
		-qW.x, -qW.y, -qW.z,
 80118ee:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80118f2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80118fa:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80118fe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011902:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011906:	edc3 7a01 	vstr	s15, [r3, #4]
		-qW.x, -qW.y, -qW.z,
 801190a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801190e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011912:	edd3 7a03 	vldr	s15, [r3, #12]
 8011916:	eef1 7a67 	vneg.f32	s15, s15
	W =
 801191a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801191e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011922:	edc3 7a02 	vstr	s15, [r3, #8]
		qW.w, -qW.z, qW.y,
 8011926:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801192a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801192e:	681a      	ldr	r2, [r3, #0]
	W =
 8011930:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011934:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011938:	60da      	str	r2, [r3, #12]
		qW.w, -qW.z, qW.y,
 801193a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801193e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011942:	edd3 7a03 	vldr	s15, [r3, #12]
 8011946:	eef1 7a67 	vneg.f32	s15, s15
	W =
 801194a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801194e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011952:	edc3 7a04 	vstr	s15, [r3, #16]
		qW.w, -qW.z, qW.y,
 8011956:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801195a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801195e:	689a      	ldr	r2, [r3, #8]
	W =
 8011960:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011964:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011968:	615a      	str	r2, [r3, #20]
		qW.z, qW.w, -qW.x,
 801196a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801196e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011972:	68da      	ldr	r2, [r3, #12]
	W =
 8011974:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011978:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 801197c:	619a      	str	r2, [r3, #24]
		qW.z, qW.w, -qW.x,
 801197e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011982:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011986:	681a      	ldr	r2, [r3, #0]
	W =
 8011988:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801198c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011990:	61da      	str	r2, [r3, #28]
		qW.z, qW.w, -qW.x,
 8011992:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011996:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801199a:	edd3 7a01 	vldr	s15, [r3, #4]
 801199e:	e009      	b.n	80119b4 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x3f0>
 80119a0:	24009218 	.word	0x24009218
 80119a4:	240091d8 	.word	0x240091d8
 80119a8:	2400924c 	.word	0x2400924c
 80119ac:	2400921c 	.word	0x2400921c
 80119b0:	24009250 	.word	0x24009250
 80119b4:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80119b8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119bc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119c0:	edc3 7a08 	vstr	s15, [r3, #32]
		-qW.y, qW.x, qW.w
 80119c4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119c8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80119d0:	eef1 7a67 	vneg.f32	s15, s15
	W =
 80119d4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119d8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119dc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-qW.y, qW.x, qW.w
 80119e0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119e4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119e8:	685a      	ldr	r2, [r3, #4]
	W =
 80119ea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119ee:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80119f2:	629a      	str	r2, [r3, #40]	; 0x28
		-qW.y, qW.x, qW.w
 80119f4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80119f8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80119fc:	681a      	ldr	r2, [r3, #0]
	W =
 80119fe:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a02:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8011a06:	62da      	str	r2, [r3, #44]	; 0x2c
 8011a08:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8011a0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a10:	4611      	mov	r1, r2
 8011a12:	4618      	mov	r0, r3
 8011a14:	f001 fc41 	bl	801329a <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
 8011a18:	4ac0      	ldr	r2, [pc, #768]	; (8011d1c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011a1a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a1e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011a22:	4614      	mov	r4, r2
 8011a24:	461d      	mov	r5, r3
 8011a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_Q = W*W.Transposed() * _gyroNoiseVariance;
 8011a36:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8011a3e:	49b7      	ldr	r1, [pc, #732]	; (8011d1c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011a40:	4618      	mov	r0, r3
 8011a42:	f001 fc41 	bl	80132c8 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 8011a46:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8011a4e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8011a52:	49b2      	ldr	r1, [pc, #712]	; (8011d1c <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x758>)
 8011a54:	4618      	mov	r0, r3
 8011a56:	f001 fc67 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8011a5a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a5e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8011a68:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a6c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011a70:	681c      	ldr	r4, [r3, #0]
 8011a72:	463b      	mov	r3, r7
 8011a74:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8011a78:	eeb0 0a67 	vmov.f32	s0, s15
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f001 fc65 	bl	801334e <_ZNK3Mat6MatrixILt4ELt4EEmlEf>
 8011a84:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011a88:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011a8c:	3464      	adds	r4, #100	; 0x64
 8011a8e:	461d      	mov	r5, r3
 8011a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	F =
 8011aa4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011aa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011aac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011ab0:	601a      	str	r2, [r3, #0]
	{{
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011ab2:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011ab6:	eeb1 7a67 	vneg.f32	s14, s15
 8011aba:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011abe:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011ac2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ac6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011aca:	edc3 7a01 	vstr	s15, [r3, #4]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011ace:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011ad2:	eeb1 7a67 	vneg.f32	s14, s15
 8011ad6:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011ada:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011ade:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ae2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011ae6:	edc3 7a02 	vstr	s15, [r3, #8]
		1.0f, -hdt*wx, -hdt*wy, -hdt*wz,
 8011aea:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011aee:	eeb1 7a67 	vneg.f32	s14, s15
 8011af2:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011af6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011afa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011afe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b02:	edc3 7a03 	vstr	s15, [r3, #12]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011b06:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011b0a:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b12:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b1a:	edc3 7a04 	vstr	s15, [r3, #16]
 8011b1e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011b2a:	615a      	str	r2, [r3, #20]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011b2c:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011b30:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011b34:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b38:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b40:	edc3 7a06 	vstr	s15, [r3, #24]
		hdt*wx, 1.0f, hdt*wz, -hdt*wy,
 8011b44:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011b48:	eeb1 7a67 	vneg.f32	s14, s15
 8011b4c:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011b50:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b54:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b5c:	edc3 7a07 	vstr	s15, [r3, #28]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011b60:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011b64:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011b68:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b6c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b74:	edc3 7a08 	vstr	s15, [r3, #32]
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011b78:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011b7c:	eeb1 7a67 	vneg.f32	s14, s15
 8011b80:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011b84:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011b88:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b90:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8011b94:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011b98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011ba0:	629a      	str	r2, [r3, #40]	; 0x28
		hdt*wy, -hdt*wz, 1.0f, hdt*wx,
 8011ba2:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011ba6:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011baa:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bb6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011bba:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011bbe:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8011bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bc6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011bd2:	ed97 7a9f 	vldr	s14, [r7, #636]	; 0x27c
 8011bd6:	edd7 7a9d 	vldr	s15, [r7, #628]	; 0x274
 8011bda:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bde:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011be2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011be6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		hdt*wz, hdt*wy, -hdt*wx, 1.0f
 8011bea:	edd7 7a9f 	vldr	s15, [r7, #636]	; 0x27c
 8011bee:	eeb1 7a67 	vneg.f32	s14, s15
 8011bf2:	edd7 7a9e 	vldr	s15, [r7, #632]	; 0x278
 8011bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
	F =
 8011bfa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011bfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c02:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8011c06:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011c0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011c12:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c14:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8011c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f001 fbb4 	bl	801338c <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
 8011c24:	4a3e      	ldr	r2, [pc, #248]	; (8011d20 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011c26:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c2a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011c2e:	4614      	mov	r4, r2
 8011c30:	461d      	mov	r5, r3
 8011c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011c42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	_X = newX;
 8011c46:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c4a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a34      	ldr	r2, [pc, #208]	; (8011d24 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x760>)
 8011c52:	461c      	mov	r4, r3
 8011c54:	4613      	mov	r3, r2
 8011c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_P = F * _P * F.Transposed() + _Q;
 8011c5c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c60:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f103 0210 	add.w	r2, r3, #16
 8011c6a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8011c6e:	492c      	ldr	r1, [pc, #176]	; (8011d20 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fd fa13 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8011c76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8011c7a:	4929      	ldr	r1, [pc, #164]	; (8011d20 <_ZN10Algorithms10AHRSKalman11UpdateStateERKN3Mat6MatrixILt3ELt1EEEf+0x75c>)
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fd fa20 	bl	800f0c2 <_ZNK3Mat6MatrixILt4ELt4EE10TransposedEv>
 8011c82:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8011c86:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8011c8a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd fa04 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8011c94:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011c98:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8011ca2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ca6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011caa:	681c      	ldr	r4, [r3, #0]
 8011cac:	463b      	mov	r3, r7
 8011cae:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fd fa35 	bl	800f122 <_ZNK3Mat6MatrixILt4ELt4EEplERKS1_>
 8011cb8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011cbc:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011cc0:	3410      	adds	r4, #16
 8011cc2:	461d      	mov	r5, r3
 8011cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_X = _X.Normalised();
 8011cd8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011cdc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8011ce6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8011cea:	681c      	ldr	r4, [r3, #0]
 8011cec:	4610      	mov	r0, r2
 8011cee:	f007 fca2 	bl	8019636 <_ZNK3Mat10Quaternion10NormalisedEv>
 8011cf2:	eeb0 6a40 	vmov.f32	s12, s0
 8011cf6:	eef0 6a60 	vmov.f32	s13, s1
 8011cfa:	eeb0 7a41 	vmov.f32	s14, s2
 8011cfe:	eef0 7a61 	vmov.f32	s15, s3
 8011d02:	ed84 6a00 	vstr	s12, [r4]
 8011d06:	edc4 6a01 	vstr	s13, [r4, #4]
 8011d0a:	ed84 7a02 	vstr	s14, [r4, #8]
 8011d0e:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8011d12:	bf00      	nop
 8011d14:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d1c:	2400921c 	.word	0x2400921c
 8011d20:	240091d8 	.word	0x240091d8
 8011d24:	24009250 	.word	0x24009250

08011d28 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateMag(const Matrix<3, 1>& mag, float time)
{
 8011d28:	b5b0      	push	{r4, r5, r7, lr}
 8011d2a:	ed2d 8b02 	vpush	{d8}
 8011d2e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011d38:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011d3c:	6018      	str	r0, [r3, #0]
 8011d3e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011d42:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011d46:	6019      	str	r1, [r3, #0]
 8011d48:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011d4c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8011d50:	ed83 0a00 	vstr	s0, [r3]
	float dip = 0.5f;
 8011d54:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8011d58:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	static const float ry{cos(dip)}, rz{-sin(dip)};
 8011d5c:	4ba3      	ldr	r3, [pc, #652]	; (8011fec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f3bf 8f5b 	dmb	ish
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	bf0c      	ite	eq
 8011d6c:	2301      	moveq	r3, #1
 8011d6e:	2300      	movne	r3, #0
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d016      	beq.n	8011da4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 8011d76:	489d      	ldr	r0, [pc, #628]	; (8011fec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011d78:	f00b fabe 	bl	801d2f8 <__cxa_guard_acquire>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	bf14      	ite	ne
 8011d82:	2301      	movne	r3, #1
 8011d84:	2300      	moveq	r3, #0
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00b      	beq.n	8011da4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7c>
 8011d8c:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8011d90:	f7fe fff0 	bl	8010d74 <_ZSt3cosf>
 8011d94:	eef0 7a40 	vmov.f32	s15, s0
 8011d98:	4b95      	ldr	r3, [pc, #596]	; (8011ff0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c8>)
 8011d9a:	edc3 7a00 	vstr	s15, [r3]
 8011d9e:	4893      	ldr	r0, [pc, #588]	; (8011fec <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2c4>)
 8011da0:	f00b fab6 	bl	801d310 <__cxa_guard_release>
 8011da4:	4b93      	ldr	r3, [pc, #588]	; (8011ff4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	f3bf 8f5b 	dmb	ish
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	bf0c      	ite	eq
 8011db4:	2301      	moveq	r3, #1
 8011db6:	2300      	movne	r3, #0
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d018      	beq.n	8011df0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 8011dbe:	488d      	ldr	r0, [pc, #564]	; (8011ff4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011dc0:	f00b fa9a 	bl	801d2f8 <__cxa_guard_acquire>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	bf14      	ite	ne
 8011dca:	2301      	movne	r3, #1
 8011dcc:	2300      	moveq	r3, #0
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00d      	beq.n	8011df0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8>
 8011dd4:	ed97 0a9b 	vldr	s0, [r7, #620]	; 0x26c
 8011dd8:	f7fe ffdc 	bl	8010d94 <_ZSt3sinf>
 8011ddc:	eef0 7a40 	vmov.f32	s15, s0
 8011de0:	eef1 7a67 	vneg.f32	s15, s15
 8011de4:	4b84      	ldr	r3, [pc, #528]	; (8011ff8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d0>)
 8011de6:	edc3 7a00 	vstr	s15, [r3]
 8011dea:	4882      	ldr	r0, [pc, #520]	; (8011ff4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2cc>)
 8011dec:	f00b fa90 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 1> Z;
 8011df0:	4b82      	ldr	r3, [pc, #520]	; (8011ffc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f3bf 8f5b 	dmb	ish
 8011df8:	f003 0301 	and.w	r3, r3, #1
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	bf0c      	ite	eq
 8011e00:	2301      	moveq	r3, #1
 8011e02:	2300      	movne	r3, #0
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d010      	beq.n	8011e2c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 8011e0a:	487c      	ldr	r0, [pc, #496]	; (8011ffc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011e0c:	f00b fa74 	bl	801d2f8 <__cxa_guard_acquire>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	bf14      	ite	ne
 8011e16:	2301      	movne	r3, #1
 8011e18:	2300      	moveq	r3, #0
 8011e1a:	b2db      	uxtb	r3, r3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d005      	beq.n	8011e2c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x104>
 8011e20:	4877      	ldr	r0, [pc, #476]	; (8012000 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d8>)
 8011e22:	f7fc f8aa 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8011e26:	4875      	ldr	r0, [pc, #468]	; (8011ffc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2d4>)
 8011e28:	f00b fa72 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8011e2c:	4b75      	ldr	r3, [pc, #468]	; (8012004 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f3bf 8f5b 	dmb	ish
 8011e34:	f003 0301 	and.w	r3, r3, #1
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bf0c      	ite	eq
 8011e3c:	2301      	moveq	r3, #1
 8011e3e:	2300      	movne	r3, #0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d010      	beq.n	8011e68 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 8011e46:	486f      	ldr	r0, [pc, #444]	; (8012004 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011e48:	f00b fa56 	bl	801d2f8 <__cxa_guard_acquire>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	bf14      	ite	ne
 8011e52:	2301      	movne	r3, #1
 8011e54:	2300      	moveq	r3, #0
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d005      	beq.n	8011e68 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x140>
 8011e5c:	486a      	ldr	r0, [pc, #424]	; (8012008 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e0>)
 8011e5e:	f7fc f88c 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8011e62:	4868      	ldr	r0, [pc, #416]	; (8012004 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2dc>)
 8011e64:	f00b fa54 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8011e68:	4b68      	ldr	r3, [pc, #416]	; (801200c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f3bf 8f5b 	dmb	ish
 8011e70:	f003 0301 	and.w	r3, r3, #1
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	bf0c      	ite	eq
 8011e78:	2301      	moveq	r3, #1
 8011e7a:	2300      	movne	r3, #0
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d010      	beq.n	8011ea4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 8011e82:	4862      	ldr	r0, [pc, #392]	; (801200c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011e84:	f00b fa38 	bl	801d2f8 <__cxa_guard_acquire>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	bf14      	ite	ne
 8011e8e:	2301      	movne	r3, #1
 8011e90:	2300      	moveq	r3, #0
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d005      	beq.n	8011ea4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x17c>
 8011e98:	485d      	ldr	r0, [pc, #372]	; (8012010 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e8>)
 8011e9a:	f001 fa90 	bl	80133be <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8011e9e:	485b      	ldr	r0, [pc, #364]	; (801200c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2e4>)
 8011ea0:	f00b fa36 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8011ea4:	4b5b      	ldr	r3, [pc, #364]	; (8012014 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f3bf 8f5b 	dmb	ish
 8011eac:	f003 0301 	and.w	r3, r3, #1
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	bf0c      	ite	eq
 8011eb4:	2301      	moveq	r3, #1
 8011eb6:	2300      	movne	r3, #0
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d010      	beq.n	8011ee0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 8011ebe:	4855      	ldr	r0, [pc, #340]	; (8012014 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011ec0:	f00b fa1a 	bl	801d2f8 <__cxa_guard_acquire>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	bf14      	ite	ne
 8011eca:	2301      	movne	r3, #1
 8011ecc:	2300      	moveq	r3, #0
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d005      	beq.n	8011ee0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x1b8>
 8011ed4:	4850      	ldr	r0, [pc, #320]	; (8012018 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f0>)
 8011ed6:	f001 f9d5 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8011eda:	484e      	ldr	r0, [pc, #312]	; (8012014 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2ec>)
 8011edc:	f00b fa18 	bl	801d310 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_magNoiseVariance);
 8011ee0:	4b4e      	ldr	r3, [pc, #312]	; (801201c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f3bf 8f5b 	dmb	ish
 8011ee8:	f003 0301 	and.w	r3, r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	bf0c      	ite	eq
 8011ef0:	2301      	moveq	r3, #1
 8011ef2:	2300      	movne	r3, #0
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d01a      	beq.n	8011f30 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 8011efa:	4848      	ldr	r0, [pc, #288]	; (801201c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8011efc:	f00b f9fc 	bl	801d2f8 <__cxa_guard_acquire>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	bf14      	ite	ne
 8011f06:	2301      	movne	r3, #1
 8011f08:	2300      	moveq	r3, #0
 8011f0a:	b2db      	uxtb	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00f      	beq.n	8011f30 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x208>
 8011f10:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8011f14:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8011f1e:	4b40      	ldr	r3, [pc, #256]	; (8012020 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f8>)
 8011f20:	eeb0 0a67 	vmov.f32	s0, s15
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fb fee7 	bl	800dcf8 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8011f2a:	483c      	ldr	r0, [pc, #240]	; (801201c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2f4>)
 8011f2c:	f00b f9f0 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8011f30:	4b3c      	ldr	r3, [pc, #240]	; (8012024 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f3bf 8f5b 	dmb	ish
 8011f38:	f003 0301 	and.w	r3, r3, #1
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	bf0c      	ite	eq
 8011f40:	2301      	moveq	r3, #1
 8011f42:	2300      	movne	r3, #0
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d010      	beq.n	8011f6c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 8011f4a:	4836      	ldr	r0, [pc, #216]	; (8012024 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8011f4c:	f00b f9d4 	bl	801d2f8 <__cxa_guard_acquire>
 8011f50:	4603      	mov	r3, r0
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	bf14      	ite	ne
 8011f56:	2301      	movne	r3, #1
 8011f58:	2300      	moveq	r3, #0
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d005      	beq.n	8011f6c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x244>
 8011f60:	4831      	ldr	r0, [pc, #196]	; (8012028 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x300>)
 8011f62:	f7fb febe 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8011f66:	482f      	ldr	r0, [pc, #188]	; (8012024 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x2fc>)
 8011f68:	f00b f9d2 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>(1.0f);
 8011f6c:	4b2f      	ldr	r3, [pc, #188]	; (801202c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f3bf 8f5b 	dmb	ish
 8011f74:	f003 0301 	and.w	r3, r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	bf0c      	ite	eq
 8011f7c:	2301      	moveq	r3, #1
 8011f7e:	2300      	movne	r3, #0
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d013      	beq.n	8011fae <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8011f86:	4829      	ldr	r0, [pc, #164]	; (801202c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8011f88:	f00b f9b6 	bl	801d2f8 <__cxa_guard_acquire>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	bf14      	ite	ne
 8011f92:	2301      	movne	r3, #1
 8011f94:	2300      	moveq	r3, #0
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d008      	beq.n	8011fae <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x286>
 8011f9c:	4b24      	ldr	r3, [pc, #144]	; (8012030 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x308>)
 8011f9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fb fee8 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8011fa8:	4820      	ldr	r0, [pc, #128]	; (801202c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x304>)
 8011faa:	f00b f9b1 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 1> res;
 8011fae:	4b21      	ldr	r3, [pc, #132]	; (8012034 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f3bf 8f5b 	dmb	ish
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	bf0c      	ite	eq
 8011fbe:	2301      	moveq	r3, #1
 8011fc0:	2300      	movne	r3, #0
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d039      	beq.n	801203c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 8011fc8:	481a      	ldr	r0, [pc, #104]	; (8012034 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 8011fca:	f00b f995 	bl	801d2f8 <__cxa_guard_acquire>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	bf14      	ite	ne
 8011fd4:	2301      	movne	r3, #1
 8011fd6:	2300      	moveq	r3, #0
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d02e      	beq.n	801203c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 8011fde:	4816      	ldr	r0, [pc, #88]	; (8012038 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x310>)
 8011fe0:	f7fb ffb5 	bl	800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8011fe4:	4813      	ldr	r0, [pc, #76]	; (8012034 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x30c>)
 8011fe6:	f00b f993 	bl	801d310 <__cxa_guard_release>
 8011fea:	e027      	b.n	801203c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x314>
 8011fec:	24009264 	.word	0x24009264
 8011ff0:	24009260 	.word	0x24009260
 8011ff4:	2400926c 	.word	0x2400926c
 8011ff8:	24009268 	.word	0x24009268
 8011ffc:	2400927c 	.word	0x2400927c
 8012000:	24009270 	.word	0x24009270
 8012004:	2400928c 	.word	0x2400928c
 8012008:	24009280 	.word	0x24009280
 801200c:	240092c0 	.word	0x240092c0
 8012010:	24009290 	.word	0x24009290
 8012014:	240092f4 	.word	0x240092f4
 8012018:	240092c4 	.word	0x240092c4
 801201c:	2400931c 	.word	0x2400931c
 8012020:	240092f8 	.word	0x240092f8
 8012024:	24009344 	.word	0x24009344
 8012028:	24009320 	.word	0x24009320
 801202c:	24009388 	.word	0x24009388
 8012030:	24009348 	.word	0x24009348
 8012034:	2400939c 	.word	0x2400939c
 8012038:	2400938c 	.word	0x2400938c
	static Quaternion add;
	float md = 1.0f / sqrt(mag(0,0)*mag(0,0) + mag(1,0)*mag(1,0) + mag(2,0)*mag(2,0));
 801203c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012040:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012044:	2200      	movs	r2, #0
 8012046:	2100      	movs	r1, #0
 8012048:	6818      	ldr	r0, [r3, #0]
 801204a:	f7fc fa3a 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801204e:	eeb0 8a40 	vmov.f32	s16, s0
 8012052:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012056:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801205a:	2200      	movs	r2, #0
 801205c:	2100      	movs	r1, #0
 801205e:	6818      	ldr	r0, [r3, #0]
 8012060:	f7fc fa2f 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012064:	eef0 7a40 	vmov.f32	s15, s0
 8012068:	ee28 8a27 	vmul.f32	s16, s16, s15
 801206c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012070:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012074:	2200      	movs	r2, #0
 8012076:	2101      	movs	r1, #1
 8012078:	6818      	ldr	r0, [r3, #0]
 801207a:	f7fc fa22 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 801207e:	eef0 8a40 	vmov.f32	s17, s0
 8012082:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012086:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801208a:	2200      	movs	r2, #0
 801208c:	2101      	movs	r1, #1
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	f7fc fa17 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012094:	eef0 7a40 	vmov.f32	s15, s0
 8012098:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801209c:	ee38 8a27 	vadd.f32	s16, s16, s15
 80120a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80120a4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80120a8:	2200      	movs	r2, #0
 80120aa:	2102      	movs	r1, #2
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f7fc fa08 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80120b2:	eef0 8a40 	vmov.f32	s17, s0
 80120b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80120ba:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80120be:	2200      	movs	r2, #0
 80120c0:	2102      	movs	r1, #2
 80120c2:	6818      	ldr	r0, [r3, #0]
 80120c4:	f7fc f9fd 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80120c8:	eef0 7a40 	vmov.f32	s15, s0
 80120cc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80120d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80120d4:	eeb0 0a67 	vmov.f32	s0, s15
 80120d8:	f7fe fe6c 	bl	8010db4 <_ZSt4sqrtf>
 80120dc:	eeb0 7a40 	vmov.f32	s14, s0
 80120e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80120e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120e8:	edc7 7a9a 	vstr	s15, [r7, #616]	; 0x268

	Z =
	{{
		mag(0,0)*md,
 80120ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80120f0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80120f4:	2200      	movs	r2, #0
 80120f6:	2100      	movs	r1, #0
 80120f8:	6818      	ldr	r0, [r3, #0]
 80120fa:	f7fc f9e2 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80120fe:	eeb0 7a40 	vmov.f32	s14, s0
 8012102:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8012106:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 801210a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801210e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012112:	edc3 7a00 	vstr	s15, [r3]
		mag(1,0)*md,
 8012116:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801211a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801211e:	2200      	movs	r2, #0
 8012120:	2101      	movs	r1, #1
 8012122:	6818      	ldr	r0, [r3, #0]
 8012124:	f7fc f9cd 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012128:	eeb0 7a40 	vmov.f32	s14, s0
 801212c:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 8012130:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012134:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801213c:	edc3 7a01 	vstr	s15, [r3, #4]
		mag(2,0)*md
 8012140:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012144:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012148:	2200      	movs	r2, #0
 801214a:	2102      	movs	r1, #2
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	f7fc f9b8 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012152:	eeb0 7a40 	vmov.f32	s14, s0
 8012156:	edd7 7a9a 	vldr	s15, [r7, #616]	; 0x268
 801215a:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 801215e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8012166:	edc3 7a02 	vstr	s15, [r3, #8]
 801216a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801216e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7fb fe23 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 801217a:	49e4      	ldr	r1, [pc, #912]	; (801250c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e4>)
 801217c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012180:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8012184:	460b      	mov	r3, r1
 8012186:	ca07      	ldmia	r2, {r0, r1, r2}
 8012188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		2.0f*(ry*(_X.w*_X.z + _X.x*_X.y) + rz*(_X.x*_X.z - _X.w*_X.y)),
 801218c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012190:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	ed93 7a00 	vldr	s14, [r3]
 801219a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801219e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80121a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121ac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80121ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80121c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80121cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121d0:	4bcf      	ldr	r3, [pc, #828]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80121d2:	edd3 7a00 	vldr	s15, [r3]
 80121d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121da:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121de:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80121e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80121f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80121fa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80121fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	ed93 6a00 	vldr	s12, [r3]
 8012208:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801220c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	edd3 7a02 	vldr	s15, [r3, #8]
 8012216:	ee66 7a27 	vmul.f32	s15, s12, s15
 801221a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801221e:	4bbd      	ldr	r3, [pc, #756]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8012220:	edd3 7a00 	vldr	s15, [r3]
 8012224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012228:	ee77 7a27 	vadd.f32	s15, s14, s15
 801222c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012230:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012234:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012238:	edc3 7a00 	vstr	s15, [r3]
		2.0f*(ry*(0.5f - _X.x*_X.x - _X.z*_X.z) + rz*(_X.w*_X.x + _X.y*_X.z)),
 801223c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012240:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	ed93 7a01 	vldr	s14, [r3, #4]
 801224a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801224e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	edd3 7a01 	vldr	s15, [r3, #4]
 8012258:	ee67 7a27 	vmul.f32	s15, s14, s15
 801225c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012264:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012268:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	edd3 6a03 	vldr	s13, [r3, #12]
 8012272:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012276:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012288:	4ba1      	ldr	r3, [pc, #644]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801228a:	edd3 7a00 	vldr	s15, [r3]
 801228e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012292:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012296:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	edd3 6a00 	vldr	s13, [r3]
 80122a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80122ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80122b2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	ed93 6a02 	vldr	s12, [r3, #8]
 80122c0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80122ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80122d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80122d6:	4b8f      	ldr	r3, [pc, #572]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80122d8:	edd3 7a00 	vldr	s15, [r3]
 80122dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80122e8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80122f0:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*(ry*(_X.y*_X.z - _X.w*_X.x) + rz*(0.5f - _X.x*_X.x - _X.y*_X.y))
 80122f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80122f8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8012302:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012306:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	edd3 7a03 	vldr	s15, [r3, #12]
 8012310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012314:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012318:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	edd3 6a00 	vldr	s13, [r3]
 8012322:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012326:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012338:	4b75      	ldr	r3, [pc, #468]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 801233a:	edd3 7a00 	vldr	s15, [r3]
 801233e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012342:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012346:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012350:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012354:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	edd3 7a01 	vldr	s15, [r3, #4]
 801235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012362:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012366:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801236a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801236e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	ed93 6a02 	vldr	s12, [r3, #8]
 8012378:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801237c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	edd3 7a02 	vldr	s15, [r3, #8]
 8012386:	ee66 7a27 	vmul.f32	s15, s12, s15
 801238a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801238e:	4b61      	ldr	r3, [pc, #388]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8012390:	edd3 7a00 	vldr	s15, [r3]
 8012394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012398:	ee77 7a27 	vadd.f32	s15, s14, s15
 801239c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 80123a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123a4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80123a8:	edc3 7a02 	vstr	s15, [r3, #8]
 80123ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80123b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80123b4:	4611      	mov	r1, r2
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fb fd02 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 80123bc:	4956      	ldr	r1, [pc, #344]	; (8012518 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f0>)
 80123be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123c2:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 80123c6:	460b      	mov	r3, r1
 80123c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80123ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80123ce:	4b50      	ldr	r3, [pc, #320]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80123d0:	edd3 7a00 	vldr	s15, [r3]
 80123d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80123d8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123dc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80123e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123ea:	4b4a      	ldr	r3, [pc, #296]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80123ec:	edd3 7a00 	vldr	s15, [r3]
 80123f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80123f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80123f8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8012402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012406:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 801240a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801240e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012412:	edc3 7a00 	vstr	s15, [r3]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 8012416:	4b3e      	ldr	r3, [pc, #248]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8012418:	edd3 7a00 	vldr	s15, [r3]
 801241c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012420:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012424:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	edd3 7a03 	vldr	s15, [r3, #12]
 801242e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012432:	4b38      	ldr	r3, [pc, #224]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 8012434:	edd3 7a00 	vldr	s15, [r3]
 8012438:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801243c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012440:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	edd3 7a03 	vldr	s15, [r3, #12]
 801244a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801244e:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012452:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012456:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801245a:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 801245e:	4b2c      	ldr	r3, [pc, #176]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 8012460:	edd3 7a00 	vldr	s15, [r3]
 8012464:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012468:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801246c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	edd3 7a01 	vldr	s15, [r3, #4]
 8012476:	ee27 7a27 	vmul.f32	s14, s14, s15
 801247a:	4b26      	ldr	r3, [pc, #152]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 801247c:	edd3 7a00 	vldr	s15, [r3]
 8012480:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012484:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012488:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	edd3 7a00 	vldr	s15, [r3]
 8012492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012496:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 801249a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801249e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80124a2:	edc3 7a02 	vstr	s15, [r3, #8]
		2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.z + 2.0f*rz*_X.z, 2.0f*ry*_X.x - 2.0f*rz*_X.w, 2.0f*ry*_X.w + 2.0f*rz*_X.x,
 80124a6:	4b1a      	ldr	r3, [pc, #104]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80124a8:	edd3 7a00 	vldr	s15, [r3]
 80124ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80124b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	edd3 7a00 	vldr	s15, [r3]
 80124be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80124c2:	4b14      	ldr	r3, [pc, #80]	; (8012514 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7ec>)
 80124c4:	edd3 7a00 	vldr	s15, [r3]
 80124c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80124cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80124da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80124de:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80124e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80124ea:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80124ee:	4b08      	ldr	r3, [pc, #32]	; (8012510 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7e8>)
 80124f0:	edd3 7a00 	vldr	s15, [r3]
 80124f4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80124f8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80124fc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	edd3 7a00 	vldr	s15, [r3]
 8012506:	ee27 7a27 	vmul.f32	s14, s14, s15
 801250a:	e007      	b.n	801251c <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0x7f4>
 801250c:	24009270 	.word	0x24009270
 8012510:	24009260 	.word	0x24009260
 8012514:	24009268 	.word	0x24009268
 8012518:	24009280 	.word	0x24009280
 801251c:	4be0      	ldr	r3, [pc, #896]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801251e:	edd3 7a00 	vldr	s15, [r3]
 8012522:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012526:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801252a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	edd3 7a01 	vldr	s15, [r3, #4]
 8012534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012538:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801253c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012540:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012544:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8012548:	4bd6      	ldr	r3, [pc, #856]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801254a:	edd3 7a00 	vldr	s15, [r3]
 801254e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012552:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012556:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801255a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	edd3 7a01 	vldr	s15, [r3, #4]
 8012564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012568:	4bcd      	ldr	r3, [pc, #820]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801256a:	edd3 7a00 	vldr	s15, [r3]
 801256e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012572:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012576:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	edd3 7a00 	vldr	s15, [r3]
 8012580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012584:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012588:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801258c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012590:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 8012594:	4bc3      	ldr	r3, [pc, #780]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012596:	edd3 7a00 	vldr	s15, [r3]
 801259a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801259e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125a2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80125ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80125b0:	4bbb      	ldr	r3, [pc, #748]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80125b2:	edd3 7a00 	vldr	s15, [r3]
 80125b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80125ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80125c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80125cc:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 80125d0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80125d8:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*ry*_X.w + 2.0f*rz*_X.x, -2.0f*ry*_X.x + 2.0f*rz*_X.w, 2.0f*ry*_X.y + 2.0f*rz*_X.z, -2.0f*ry*_X.z + 2.0f*rz*_X.y,
 80125dc:	4bb1      	ldr	r3, [pc, #708]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80125de:	edd3 7a00 	vldr	s15, [r3]
 80125e2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80125e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80125ea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80125ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80125f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80125fc:	4ba8      	ldr	r3, [pc, #672]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80125fe:	edd3 7a00 	vldr	s15, [r3]
 8012602:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012606:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801260a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	edd3 7a02 	vldr	s15, [r3, #8]
 8012614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012618:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 801261c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012620:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012624:	edc3 7a07 	vstr	s15, [r3, #28]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8012628:	4b9e      	ldr	r3, [pc, #632]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801262a:	edd3 7a00 	vldr	s15, [r3]
 801262e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012636:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801263a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	edd3 7a01 	vldr	s15, [r3, #4]
 8012644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012648:	4b95      	ldr	r3, [pc, #596]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 801264a:	edd3 7a00 	vldr	s15, [r3]
 801264e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8012652:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012656:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	edd3 7a00 	vldr	s15, [r3]
 8012660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012664:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012668:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801266c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012670:	edc3 7a08 	vstr	s15, [r3, #32]
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8012674:	4b8b      	ldr	r3, [pc, #556]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 8012676:	edd3 7a00 	vldr	s15, [r3]
 801267a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801267e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012682:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012686:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	edd3 7a00 	vldr	s15, [r3]
 8012690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012694:	4b82      	ldr	r3, [pc, #520]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012696:	edd3 7a00 	vldr	s15, [r3]
 801269a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801269e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126a2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80126ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126b0:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80126b4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80126bc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 80126c0:	4b78      	ldr	r3, [pc, #480]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 80126c2:	edd3 7a00 	vldr	s15, [r3]
 80126c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80126ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80126d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80126dc:	4b70      	ldr	r3, [pc, #448]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 80126de:	edd3 7a00 	vldr	s15, [r3]
 80126e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80126e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80126ea:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80126f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126f8:	ee77 7a67 	vsub.f32	s15, s14, s15
	H =
 80126fc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012700:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012704:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		-2.0f*ry*_X.x + 2.0f*rz*_X.w, -2.0f*ry*_X.w - 2.0f*rz*_X.x, 2.0f*ry*_X.z - 2.0f*rz*_X.y, 2.0f*ry*_X.y + 2.0f*rz*_X.z
 8012708:	4b66      	ldr	r3, [pc, #408]	; (80128a4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb7c>)
 801270a:	edd3 7a00 	vldr	s15, [r3]
 801270e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8012712:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012716:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012724:	4b5e      	ldr	r3, [pc, #376]	; (80128a0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb78>)
 8012726:	edd3 7a00 	vldr	s15, [r3]
 801272a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801272e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012732:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	edd3 7a03 	vldr	s15, [r3, #12]
 801273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012740:	ee77 7a27 	vadd.f32	s15, s14, s15
	H =
 8012744:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012748:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801274c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8012750:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8012754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012758:	4611      	mov	r1, r2
 801275a:	4618      	mov	r0, r3
 801275c:	f000 fe3a 	bl	80133d4 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 8012760:	4a51      	ldr	r2, [pc, #324]	; (80128a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8012762:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012766:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801276a:	4614      	mov	r4, r2
 801276c:	461d      	mov	r5, r3
 801276e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012776:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801277a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 801277e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012782:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f103 0210 	add.w	r2, r3, #16
 801278c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012790:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012794:	4944      	ldr	r1, [pc, #272]	; (80128a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 8012796:	4618      	mov	r0, r3
 8012798:	f000 fe33 	bl	8013402 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801279c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80127a4:	4940      	ldr	r1, [pc, #256]	; (80128a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 80127a6:	4618      	mov	r0, r3
 80127a8:	f000 fe3e 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80127ac:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127b0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80127b4:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 80127b8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80127bc:	4618      	mov	r0, r3
 80127be:	f000 fe63 	bl	8013488 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 80127c2:	4c3a      	ldr	r4, [pc, #232]	; (80128ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 80127c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80127c8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80127cc:	4a38      	ldr	r2, [pc, #224]	; (80128b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb88>)
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fe6d 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 80127d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127d8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80127dc:	461d      	mov	r5, r3
 80127de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80127e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80127e6:	682b      	ldr	r3, [r5, #0]
 80127e8:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 80127ea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80127ee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f103 0410 	add.w	r4, r3, #16
 80127f8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80127fc:	492a      	ldr	r1, [pc, #168]	; (80128a8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb80>)
 80127fe:	4618      	mov	r0, r3
 8012800:	f000 fe12 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8012804:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012808:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 801280c:	4621      	mov	r1, r4
 801280e:	4618      	mov	r0, r3
 8012810:	f000 fe66 	bl	80134e0 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8012814:	4825      	ldr	r0, [pc, #148]	; (80128ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb84>)
 8012816:	f7fe fb03 	bl	8010e20 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 801281a:	4602      	mov	r2, r0
 801281c:	4c25      	ldr	r4, [pc, #148]	; (80128b4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 801281e:	463b      	mov	r3, r7
 8012820:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8012824:	4618      	mov	r0, r3
 8012826:	f000 fe6e 	bl	8013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801282a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801282e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012832:	461d      	mov	r5, r3
 8012834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801283a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801283c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 8012844:	491c      	ldr	r1, [pc, #112]	; (80128b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb90>)
 8012846:	481d      	ldr	r0, [pc, #116]	; (80128bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb94>)
 8012848:	f7fe f9a3 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 801284c:	eef0 6a40 	vmov.f32	s13, s0
 8012850:	eeb0 7a60 	vmov.f32	s14, s1
 8012854:	eef0 7a41 	vmov.f32	s15, s2
 8012858:	edc7 6a77 	vstr	s13, [r7, #476]	; 0x1dc
 801285c:	ed87 7a78 	vstr	s14, [r7, #480]	; 0x1e0
 8012860:	edc7 7a79 	vstr	s15, [r7, #484]	; 0x1e4
 8012864:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8012868:	4619      	mov	r1, r3
 801286a:	4812      	ldr	r0, [pc, #72]	; (80128b4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb8c>)
 801286c:	f000 fe5e 	bl	801352c <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8012870:	eeb0 6a40 	vmov.f32	s12, s0
 8012874:	eef0 6a60 	vmov.f32	s13, s1
 8012878:	eeb0 7a41 	vmov.f32	s14, s2
 801287c:	eef0 7a61 	vmov.f32	s15, s3
 8012880:	4b0f      	ldr	r3, [pc, #60]	; (80128c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 8012882:	ed83 6a00 	vstr	s12, [r3]
 8012886:	edc3 6a01 	vstr	s13, [r3, #4]
 801288a:	ed83 7a02 	vstr	s14, [r3, #8]
 801288e:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8012892:	2200      	movs	r2, #0
 8012894:	2100      	movs	r1, #0
 8012896:	480a      	ldr	r0, [pc, #40]	; (80128c0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb98>)
 8012898:	f7fe f80c 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801289c:	4603      	mov	r3, r0
 801289e:	e011      	b.n	80128c4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xb9c>
 80128a0:	24009268 	.word	0x24009268
 80128a4:	24009260 	.word	0x24009260
 80128a8:	24009290 	.word	0x24009290
 80128ac:	24009320 	.word	0x24009320
 80128b0:	240092f8 	.word	0x240092f8
 80128b4:	240092c4 	.word	0x240092c4
 80128b8:	24009280 	.word	0x24009280
 80128bc:	24009270 	.word	0x24009270
 80128c0:	2400938c 	.word	0x2400938c
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a39      	ldr	r2, [pc, #228]	; (80129ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	2200      	movs	r2, #0
 80128cc:	2101      	movs	r1, #1
 80128ce:	4838      	ldr	r0, [pc, #224]	; (80129b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80128d0:	f7fd fff0 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80128d4:	4603      	mov	r3, r0
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4a34      	ldr	r2, [pc, #208]	; (80129ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80128da:	6053      	str	r3, [r2, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	2102      	movs	r1, #2
 80128e0:	4833      	ldr	r0, [pc, #204]	; (80129b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80128e2:	f7fd ffe7 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80128e6:	4603      	mov	r3, r0
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a30      	ldr	r2, [pc, #192]	; (80129ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80128ec:	6093      	str	r3, [r2, #8]
 80128ee:	2200      	movs	r2, #0
 80128f0:	2103      	movs	r1, #3
 80128f2:	482f      	ldr	r0, [pc, #188]	; (80129b0 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc88>)
 80128f4:	f7fd ffde 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80128f8:	4603      	mov	r3, r0
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4a2b      	ldr	r2, [pc, #172]	; (80129ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 80128fe:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 8012900:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012904:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801290e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012912:	681c      	ldr	r4, [r3, #0]
 8012914:	4925      	ldr	r1, [pc, #148]	; (80129ac <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc84>)
 8012916:	4610      	mov	r0, r2
 8012918:	f006 fd27 	bl	801936a <_ZNK3Mat10QuaternionplERKS0_>
 801291c:	eeb0 6a40 	vmov.f32	s12, s0
 8012920:	eef0 6a60 	vmov.f32	s13, s1
 8012924:	eeb0 7a41 	vmov.f32	s14, s2
 8012928:	eef0 7a61 	vmov.f32	s15, s3
 801292c:	ed84 6a00 	vstr	s12, [r4]
 8012930:	edc4 6a01 	vstr	s13, [r4, #4]
 8012934:	ed84 7a02 	vstr	s14, [r4, #8]
 8012938:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 801293c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012940:	4a1c      	ldr	r2, [pc, #112]	; (80129b4 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc8c>)
 8012942:	491d      	ldr	r1, [pc, #116]	; (80129b8 <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc90>)
 8012944:	4618      	mov	r0, r3
 8012946:	f000 fcef 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 801294a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801294e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8012952:	491a      	ldr	r1, [pc, #104]	; (80129bc <_ZN10Algorithms10AHRSKalman15CorrectStateMagERKN3Mat6MatrixILt3ELt1EEEf+0xc94>)
 8012954:	4618      	mov	r0, r3
 8012956:	f7fc fd24 	bl	800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 801295a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801295e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f103 0210 	add.w	r2, r3, #16
 8012968:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801296c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012970:	681c      	ldr	r4, [r3, #0]
 8012972:	463b      	mov	r3, r7
 8012974:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8012978:	4618      	mov	r0, r3
 801297a:	f7fc fb8f 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 801297e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012982:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012986:	3410      	adds	r4, #16
 8012988:	461d      	mov	r5, r3
 801298a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801298c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801298e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012996:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801299a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801299e:	bf00      	nop
 80129a0:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80129a4:	46bd      	mov	sp, r7
 80129a6:	ecbd 8b02 	vpop	{d8}
 80129aa:	bdb0      	pop	{r4, r5, r7, pc}
 80129ac:	240093a0 	.word	0x240093a0
 80129b0:	2400938c 	.word	0x2400938c
 80129b4:	24009290 	.word	0x24009290
 80129b8:	240092c4 	.word	0x240092c4
 80129bc:	24009348 	.word	0x24009348

080129c0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf>:

void AHRSKalman::CorrectStateAcc(const Matrix<3, 1>& acc, float time)
{
 80129c0:	b5b0      	push	{r4, r5, r7, lr}
 80129c2:	ed2d 8b02 	vpush	{d8}
 80129c6:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80129ca:	af00      	add	r7, sp, #0
 80129cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80129d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80129d4:	6018      	str	r0, [r3, #0]
 80129d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80129da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80129de:	6019      	str	r1, [r3, #0]
 80129e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80129e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80129e8:	ed83 0a00 	vstr	s0, [r3]
	static const float gz{1.0f};
	static const float gz2 = 2.0f*gz;
	static Matrix<3, 1> Z;
 80129ec:	4b7e      	ldr	r3, [pc, #504]	; (8012be8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f3bf 8f5b 	dmb	ish
 80129f4:	f003 0301 	and.w	r3, r3, #1
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	bf0c      	ite	eq
 80129fc:	2301      	moveq	r3, #1
 80129fe:	2300      	movne	r3, #0
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d010      	beq.n	8012a28 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8012a06:	4878      	ldr	r0, [pc, #480]	; (8012be8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8012a08:	f00a fc76 	bl	801d2f8 <__cxa_guard_acquire>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	bf14      	ite	ne
 8012a12:	2301      	movne	r3, #1
 8012a14:	2300      	moveq	r3, #0
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d005      	beq.n	8012a28 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x68>
 8012a1c:	4873      	ldr	r0, [pc, #460]	; (8012bec <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x22c>)
 8012a1e:	f7fb faac 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8012a22:	4871      	ldr	r0, [pc, #452]	; (8012be8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x228>)
 8012a24:	f00a fc74 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 1> h;
 8012a28:	4b71      	ldr	r3, [pc, #452]	; (8012bf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f3bf 8f5b 	dmb	ish
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	bf0c      	ite	eq
 8012a38:	2301      	moveq	r3, #1
 8012a3a:	2300      	movne	r3, #0
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d010      	beq.n	8012a64 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8012a42:	486b      	ldr	r0, [pc, #428]	; (8012bf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012a44:	f00a fc58 	bl	801d2f8 <__cxa_guard_acquire>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	bf14      	ite	ne
 8012a4e:	2301      	movne	r3, #1
 8012a50:	2300      	moveq	r3, #0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d005      	beq.n	8012a64 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xa4>
 8012a58:	4866      	ldr	r0, [pc, #408]	; (8012bf4 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x234>)
 8012a5a:	f7fb fa8e 	bl	800df7a <_ZN3Mat6MatrixILt3ELt1EEC1Ev>
 8012a5e:	4864      	ldr	r0, [pc, #400]	; (8012bf0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x230>)
 8012a60:	f00a fc56 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 4> H;
 8012a64:	4b64      	ldr	r3, [pc, #400]	; (8012bf8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f3bf 8f5b 	dmb	ish
 8012a6c:	f003 0301 	and.w	r3, r3, #1
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	bf0c      	ite	eq
 8012a74:	2301      	moveq	r3, #1
 8012a76:	2300      	movne	r3, #0
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d010      	beq.n	8012aa0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8012a7e:	485e      	ldr	r0, [pc, #376]	; (8012bf8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012a80:	f00a fc3a 	bl	801d2f8 <__cxa_guard_acquire>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	bf14      	ite	ne
 8012a8a:	2301      	movne	r3, #1
 8012a8c:	2300      	moveq	r3, #0
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d005      	beq.n	8012aa0 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0xe0>
 8012a94:	4859      	ldr	r0, [pc, #356]	; (8012bfc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x23c>)
 8012a96:	f000 fc92 	bl	80133be <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
 8012a9a:	4857      	ldr	r0, [pc, #348]	; (8012bf8 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x238>)
 8012a9c:	f00a fc38 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 3> K;
 8012aa0:	4b57      	ldr	r3, [pc, #348]	; (8012c00 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f3bf 8f5b 	dmb	ish
 8012aa8:	f003 0301 	and.w	r3, r3, #1
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	bf0c      	ite	eq
 8012ab0:	2301      	moveq	r3, #1
 8012ab2:	2300      	movne	r3, #0
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d010      	beq.n	8012adc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8012aba:	4851      	ldr	r0, [pc, #324]	; (8012c00 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012abc:	f00a fc1c 	bl	801d2f8 <__cxa_guard_acquire>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	bf14      	ite	ne
 8012ac6:	2301      	movne	r3, #1
 8012ac8:	2300      	moveq	r3, #0
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d005      	beq.n	8012adc <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x11c>
 8012ad0:	484c      	ldr	r0, [pc, #304]	; (8012c04 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x244>)
 8012ad2:	f000 fbd7 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
 8012ad6:	484a      	ldr	r0, [pc, #296]	; (8012c00 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x240>)
 8012ad8:	f00a fc1a 	bl	801d310 <__cxa_guard_release>
	static const Matrix<3, 3> R = Eye<3>(_accNoiseVariance);
 8012adc:	4b4a      	ldr	r3, [pc, #296]	; (8012c08 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f3bf 8f5b 	dmb	ish
 8012ae4:	f003 0301 	and.w	r3, r3, #1
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	bf0c      	ite	eq
 8012aec:	2301      	moveq	r3, #1
 8012aee:	2300      	movne	r3, #0
 8012af0:	b2db      	uxtb	r3, r3
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d01a      	beq.n	8012b2c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8012af6:	4844      	ldr	r0, [pc, #272]	; (8012c08 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012af8:	f00a fbfe 	bl	801d2f8 <__cxa_guard_acquire>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	bf14      	ite	ne
 8012b02:	2301      	movne	r3, #1
 8012b04:	2300      	moveq	r3, #0
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00f      	beq.n	8012b2c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x16c>
 8012b0c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012b10:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8012b1a:	4b3c      	ldr	r3, [pc, #240]	; (8012c0c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x24c>)
 8012b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fb f8e9 	bl	800dcf8 <_ZN3Mat3EyeILt3EEENS_6MatrixIXT_EXT_EEEf>
 8012b26:	4838      	ldr	r0, [pc, #224]	; (8012c08 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x248>)
 8012b28:	f00a fbf2 	bl	801d310 <__cxa_guard_release>
	static Matrix<3, 3> S;
 8012b2c:	4b38      	ldr	r3, [pc, #224]	; (8012c10 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f3bf 8f5b 	dmb	ish
 8012b34:	f003 0301 	and.w	r3, r3, #1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	bf0c      	ite	eq
 8012b3c:	2301      	moveq	r3, #1
 8012b3e:	2300      	movne	r3, #0
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d010      	beq.n	8012b68 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8012b46:	4832      	ldr	r0, [pc, #200]	; (8012c10 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012b48:	f00a fbd6 	bl	801d2f8 <__cxa_guard_acquire>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	bf14      	ite	ne
 8012b52:	2301      	movne	r3, #1
 8012b54:	2300      	moveq	r3, #0
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d005      	beq.n	8012b68 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1a8>
 8012b5c:	482d      	ldr	r0, [pc, #180]	; (8012c14 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x254>)
 8012b5e:	f7fb f8c0 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8012b62:	482b      	ldr	r0, [pc, #172]	; (8012c10 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x250>)
 8012b64:	f00a fbd4 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 4> I = Eye<4>();
 8012b68:	4b2b      	ldr	r3, [pc, #172]	; (8012c18 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f3bf 8f5b 	dmb	ish
 8012b70:	f003 0301 	and.w	r3, r3, #1
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	bf0c      	ite	eq
 8012b78:	2301      	moveq	r3, #1
 8012b7a:	2300      	movne	r3, #0
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d013      	beq.n	8012baa <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8012b82:	4825      	ldr	r0, [pc, #148]	; (8012c18 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012b84:	f00a fbb8 	bl	801d2f8 <__cxa_guard_acquire>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	bf14      	ite	ne
 8012b8e:	2301      	movne	r3, #1
 8012b90:	2300      	moveq	r3, #0
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d008      	beq.n	8012baa <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x1ea>
 8012b98:	4b20      	ldr	r3, [pc, #128]	; (8012c1c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x25c>)
 8012b9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fb f8ea 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8012ba4:	481c      	ldr	r0, [pc, #112]	; (8012c18 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x258>)
 8012ba6:	f00a fbb3 	bl	801d310 <__cxa_guard_release>
	static Matrix<4, 1> res;
 8012baa:	4b1d      	ldr	r3, [pc, #116]	; (8012c20 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f3bf 8f5b 	dmb	ish
 8012bb2:	f003 0301 	and.w	r3, r3, #1
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	bf0c      	ite	eq
 8012bba:	2301      	moveq	r3, #1
 8012bbc:	2300      	movne	r3, #0
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d031      	beq.n	8012c28 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012bc4:	4816      	ldr	r0, [pc, #88]	; (8012c20 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012bc6:	f00a fb97 	bl	801d2f8 <__cxa_guard_acquire>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	bf14      	ite	ne
 8012bd0:	2301      	movne	r3, #1
 8012bd2:	2300      	moveq	r3, #0
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d026      	beq.n	8012c28 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012bda:	4812      	ldr	r0, [pc, #72]	; (8012c24 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x264>)
 8012bdc:	f7fb f9b7 	bl	800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
 8012be0:	480f      	ldr	r0, [pc, #60]	; (8012c20 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x260>)
 8012be2:	f00a fb95 	bl	801d310 <__cxa_guard_release>
 8012be6:	e01f      	b.n	8012c28 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x268>
 8012be8:	240093bc 	.word	0x240093bc
 8012bec:	240093b0 	.word	0x240093b0
 8012bf0:	240093cc 	.word	0x240093cc
 8012bf4:	240093c0 	.word	0x240093c0
 8012bf8:	24009400 	.word	0x24009400
 8012bfc:	240093d0 	.word	0x240093d0
 8012c00:	24009434 	.word	0x24009434
 8012c04:	24009404 	.word	0x24009404
 8012c08:	2400945c 	.word	0x2400945c
 8012c0c:	24009438 	.word	0x24009438
 8012c10:	24009484 	.word	0x24009484
 8012c14:	24009460 	.word	0x24009460
 8012c18:	240094c8 	.word	0x240094c8
 8012c1c:	24009488 	.word	0x24009488
 8012c20:	240094dc 	.word	0x240094dc
 8012c24:	240094cc 	.word	0x240094cc
	static Quaternion add;

	float gd = 1.0f / sqrt(acc(0,0)*acc(0,0) + acc(1,0)*acc(1,0) + acc(2,0)*acc(2,0));
 8012c28:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c2c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c30:	2200      	movs	r2, #0
 8012c32:	2100      	movs	r1, #0
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	f7fb fc44 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012c3a:	eeb0 8a40 	vmov.f32	s16, s0
 8012c3e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c42:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c46:	2200      	movs	r2, #0
 8012c48:	2100      	movs	r1, #0
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	f7fb fc39 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012c50:	eef0 7a40 	vmov.f32	s15, s0
 8012c54:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012c58:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c5c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c60:	2200      	movs	r2, #0
 8012c62:	2101      	movs	r1, #1
 8012c64:	6818      	ldr	r0, [r3, #0]
 8012c66:	f7fb fc2c 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012c6a:	eef0 8a40 	vmov.f32	s17, s0
 8012c6e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c72:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c76:	2200      	movs	r2, #0
 8012c78:	2101      	movs	r1, #1
 8012c7a:	6818      	ldr	r0, [r3, #0]
 8012c7c:	f7fb fc21 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012c80:	eef0 7a40 	vmov.f32	s15, s0
 8012c84:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012c88:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012c8c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012c90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012c94:	2200      	movs	r2, #0
 8012c96:	2102      	movs	r1, #2
 8012c98:	6818      	ldr	r0, [r3, #0]
 8012c9a:	f7fb fc12 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012c9e:	eef0 8a40 	vmov.f32	s17, s0
 8012ca2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ca6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012caa:	2200      	movs	r2, #0
 8012cac:	2102      	movs	r1, #2
 8012cae:	6818      	ldr	r0, [r3, #0]
 8012cb0:	f7fb fc07 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012cb4:	eef0 7a40 	vmov.f32	s15, s0
 8012cb8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012cbc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8012cc4:	f7fe f876 	bl	8010db4 <_ZSt4sqrtf>
 8012cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8012ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cd4:	edc7 7a9b 	vstr	s15, [r7, #620]	; 0x26c
	Z =
	{{
		acc(0,0)*gd,
 8012cd8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012cdc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	6818      	ldr	r0, [r3, #0]
 8012ce6:	f7fb fbec 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012cea:	eeb0 7a40 	vmov.f32	s14, s0
 8012cee:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012cf6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012cfa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012cfe:	edc3 7a00 	vstr	s15, [r3]
		acc(1,0)*gd,
 8012d02:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d06:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	2101      	movs	r1, #1
 8012d0e:	6818      	ldr	r0, [r3, #0]
 8012d10:	f7fb fbd7 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d14:	eeb0 7a40 	vmov.f32	s14, s0
 8012d18:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012d20:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012d28:	edc3 7a01 	vstr	s15, [r3, #4]
		acc(2,0)*gd
 8012d2c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d30:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012d34:	2200      	movs	r2, #0
 8012d36:	2102      	movs	r1, #2
 8012d38:	6818      	ldr	r0, [r3, #0]
 8012d3a:	f7fb fbc2 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8012d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8012d42:	edd7 7a9b 	vldr	s15, [r7, #620]	; 0x26c
 8012d46:	ee67 7a27 	vmul.f32	s15, s14, s15
	Z =
 8012d4a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d4e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8012d52:	edc3 7a02 	vstr	s15, [r3, #8]
 8012d56:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012d5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012d5e:	4611      	mov	r1, r2
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fb f82d 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012d66:	49e6      	ldr	r1, [pc, #920]	; (8013100 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x740>)
 8012d68:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d6c:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8012d70:	460b      	mov	r3, r1
 8012d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	h =
	{{
		gz2*(_X.x*_X.z - _X.w*_X.y),
 8012d78:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d7c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	ed93 7a01 	vldr	s14, [r3, #4]
 8012d86:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d8a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	edd3 7a03 	vldr	s15, [r3, #12]
 8012d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d98:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012d9c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	edd3 6a00 	vldr	s13, [r3]
 8012da6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012daa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	edd3 7a02 	vldr	s15, [r3, #8]
 8012db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012dc0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012dc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012dc8:	edc3 7a00 	vstr	s15, [r3]
		gz2*(_X.w*_X.x + _X.y*_X.z),
 8012dcc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012dd0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	ed93 7a00 	vldr	s14, [r3]
 8012dda:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012dde:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	edd3 7a01 	vldr	s15, [r3, #4]
 8012de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012dec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012df0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	edd3 6a02 	vldr	s13, [r3, #8]
 8012dfa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012dfe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	edd3 7a03 	vldr	s15, [r3, #12]
 8012e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e10:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012e14:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012e1c:	edc3 7a01 	vstr	s15, [r3, #4]
		gz2*(0.5f - _X.x*_X.x - _X.y*_X.y)
 8012e20:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e24:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8012e2e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e32:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	edd3 7a01 	vldr	s15, [r3, #4]
 8012e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e48:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e4c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	edd3 6a02 	vldr	s13, [r3, #8]
 8012e56:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	edd3 7a02 	vldr	s15, [r3, #8]
 8012e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	h =
 8012e70:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012e78:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e7c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8012e80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012e84:	4611      	mov	r1, r2
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fa ff9a 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8012e8c:	499d      	ldr	r1, [pc, #628]	; (8013104 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x744>)
 8012e8e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012e92:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8012e96:	460b      	mov	r3, r1
 8012e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}};

	H =
	{{
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012e9e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ea2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	edd3 7a02 	vldr	s15, [r3, #8]
 8012eac:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012eb4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012eb8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012ebc:	edc3 7a00 	vstr	s15, [r3]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012ec0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ec4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ece:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012ed2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ed6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012eda:	edc3 7a01 	vstr	s15, [r3, #4]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012ede:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ee2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	edd3 7a00 	vldr	s15, [r3]
 8012eec:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012ef4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ef8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012efc:	edc3 7a02 	vstr	s15, [r3, #8]
		-gz2*_X.y, gz2*_X.z, -gz2*_X.w, gz2*_X.x,
 8012f00:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f04:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012f12:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f16:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f1a:	edc3 7a03 	vstr	s15, [r3, #12]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8012f1e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012f30:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f34:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f38:	edc3 7a04 	vstr	s15, [r3, #16]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8012f3c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f40:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	edd3 7a00 	vldr	s15, [r3]
 8012f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012f4e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f52:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f56:	edc3 7a05 	vstr	s15, [r3, #20]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8012f5a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f5e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8012f68:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012f6c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f70:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f74:	edc3 7a06 	vstr	s15, [r3, #24]
		gz2*_X.x, gz2*_X.w, gz2*_X.z, gz2*_X.y,
 8012f78:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f7c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	edd3 7a02 	vldr	s15, [r3, #8]
 8012f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012f8a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f8e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012f92:	edc3 7a07 	vstr	s15, [r3, #28]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8012f96:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012f9a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	edd3 7a00 	vldr	s15, [r3]
 8012fa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 8012fa8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fac:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012fb0:	edc3 7a08 	vstr	s15, [r3, #32]
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8012fb4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fb8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8012fc2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012fca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fce:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012fd2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8012fd6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012fda:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	edd3 7a02 	vldr	s15, [r3, #8]
 8012fe4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
	H =
 8012fec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ff0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012ff4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		gz2*_X.w, -gz2*_X.x, -gz2*_X.y, gz2*_X.z
 8012ff8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012ffc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	edd3 7a03 	vldr	s15, [r3, #12]
 8013006:	ee77 7aa7 	vadd.f32	s15, s15, s15
	H =
 801300a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801300e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8013012:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8013016:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801301a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801301e:	4611      	mov	r1, r2
 8013020:	4618      	mov	r0, r3
 8013022:	f000 f9d7 	bl	80133d4 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
 8013026:	4a38      	ldr	r2, [pc, #224]	; (8013108 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 8013028:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801302c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8013030:	4614      	mov	r4, r2
 8013032:	461d      	mov	r5, r3
 8013034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801303a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801303c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}};

	S = H*_P*H.Transposed() + R;
 8013044:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013048:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f103 0210 	add.w	r2, r3, #16
 8013052:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013056:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801305a:	492b      	ldr	r1, [pc, #172]	; (8013108 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 801305c:	4618      	mov	r0, r3
 801305e:	f000 f9d0 	bl	8013402 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8013062:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013066:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801306a:	4927      	ldr	r1, [pc, #156]	; (8013108 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 801306c:	4618      	mov	r0, r3
 801306e:	f000 f9db 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8013072:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013076:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801307a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801307e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8013082:	4618      	mov	r0, r3
 8013084:	f000 fa00 	bl	8013488 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8013088:	4c20      	ldr	r4, [pc, #128]	; (801310c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 801308a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801308e:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8013092:	4a1f      	ldr	r2, [pc, #124]	; (8013110 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x750>)
 8013094:	4618      	mov	r0, r3
 8013096:	f000 fa0a 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
 801309a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801309e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80130a2:	461d      	mov	r5, r3
 80130a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130ac:	682b      	ldr	r3, [r5, #0]
 80130ae:	6023      	str	r3, [r4, #0]
	K = _P*H.Transposed()*Inverse3_3Matrix(S);
 80130b0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f103 0410 	add.w	r4, r3, #16
 80130be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80130c2:	4911      	ldr	r1, [pc, #68]	; (8013108 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x748>)
 80130c4:	4618      	mov	r0, r3
 80130c6:	f000 f9af 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 80130ca:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80130ce:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80130d2:	4621      	mov	r1, r4
 80130d4:	4618      	mov	r0, r3
 80130d6:	f000 fa03 	bl	80134e0 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 80130da:	480c      	ldr	r0, [pc, #48]	; (801310c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x74c>)
 80130dc:	f7fd fea0 	bl	8010e20 <_ZN10Algorithms16Inverse3_3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80130e0:	4602      	mov	r2, r0
 80130e2:	4c0c      	ldr	r4, [pc, #48]	; (8013114 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x754>)
 80130e4:	463b      	mov	r3, r7
 80130e6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80130ea:	4618      	mov	r0, r3
 80130ec:	f000 fa0b 	bl	8013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 80130f0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80130f4:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80130f8:	461d      	mov	r5, r3
 80130fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130fc:	e00c      	b.n	8013118 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x758>
 80130fe:	bf00      	nop
 8013100:	240093b0 	.word	0x240093b0
 8013104:	240093c0 	.word	0x240093c0
 8013108:	240093d0 	.word	0x240093d0
 801310c:	24009460 	.word	0x24009460
 8013110:	24009438 	.word	0x24009438
 8013114:	24009404 	.word	0x24009404
 8013118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801311a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801311c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801311e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	res = K*(Z - h);
 8013126:	4950      	ldr	r1, [pc, #320]	; (8013268 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8a8>)
 8013128:	4850      	ldr	r0, [pc, #320]	; (801326c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8ac>)
 801312a:	f7fd fd32 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 801312e:	eef0 6a40 	vmov.f32	s13, s0
 8013132:	eeb0 7a60 	vmov.f32	s14, s1
 8013136:	eef0 7a41 	vmov.f32	s15, s2
 801313a:	edc7 6a78 	vstr	s13, [r7, #480]	; 0x1e0
 801313e:	ed87 7a79 	vstr	s14, [r7, #484]	; 0x1e4
 8013142:	edc7 7a7a 	vstr	s15, [r7, #488]	; 0x1e8
 8013146:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801314a:	4619      	mov	r1, r3
 801314c:	4848      	ldr	r0, [pc, #288]	; (8013270 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 801314e:	f000 f9ed 	bl	801352c <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8013152:	eeb0 6a40 	vmov.f32	s12, s0
 8013156:	eef0 6a60 	vmov.f32	s13, s1
 801315a:	eeb0 7a41 	vmov.f32	s14, s2
 801315e:	eef0 7a61 	vmov.f32	s15, s3
 8013162:	4b44      	ldr	r3, [pc, #272]	; (8013274 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 8013164:	ed83 6a00 	vstr	s12, [r3]
 8013168:	edc3 6a01 	vstr	s13, [r3, #4]
 801316c:	ed83 7a02 	vstr	s14, [r3, #8]
 8013170:	edc3 7a03 	vstr	s15, [r3, #12]
	add.w = res(0,0); add.x = res(1,0); add.y = res(2,0); add.z = res(3,0);
 8013174:	2200      	movs	r2, #0
 8013176:	2100      	movs	r1, #0
 8013178:	483e      	ldr	r0, [pc, #248]	; (8013274 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801317a:	f7fd fb9b 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 801317e:	4603      	mov	r3, r0
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4a3d      	ldr	r2, [pc, #244]	; (8013278 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013184:	6013      	str	r3, [r2, #0]
 8013186:	2200      	movs	r2, #0
 8013188:	2101      	movs	r1, #1
 801318a:	483a      	ldr	r0, [pc, #232]	; (8013274 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801318c:	f7fd fb92 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8013190:	4603      	mov	r3, r0
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4a38      	ldr	r2, [pc, #224]	; (8013278 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 8013196:	6053      	str	r3, [r2, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	2102      	movs	r1, #2
 801319c:	4835      	ldr	r0, [pc, #212]	; (8013274 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 801319e:	f7fd fb89 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80131a2:	4603      	mov	r3, r0
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a34      	ldr	r2, [pc, #208]	; (8013278 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 80131a8:	6093      	str	r3, [r2, #8]
 80131aa:	2200      	movs	r2, #0
 80131ac:	2103      	movs	r1, #3
 80131ae:	4831      	ldr	r0, [pc, #196]	; (8013274 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b4>)
 80131b0:	f7fd fb80 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 80131b4:	4603      	mov	r3, r0
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a2f      	ldr	r2, [pc, #188]	; (8013278 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 80131ba:	60d3      	str	r3, [r2, #12]
	_X = _X + add;
 80131bc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80131c0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80131ca:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80131ce:	681c      	ldr	r4, [r3, #0]
 80131d0:	4929      	ldr	r1, [pc, #164]	; (8013278 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b8>)
 80131d2:	4610      	mov	r0, r2
 80131d4:	f006 f8c9 	bl	801936a <_ZNK3Mat10QuaternionplERKS0_>
 80131d8:	eeb0 6a40 	vmov.f32	s12, s0
 80131dc:	eef0 6a60 	vmov.f32	s13, s1
 80131e0:	eeb0 7a41 	vmov.f32	s14, s2
 80131e4:	eef0 7a61 	vmov.f32	s15, s3
 80131e8:	ed84 6a00 	vstr	s12, [r4]
 80131ec:	edc4 6a01 	vstr	s13, [r4, #4]
 80131f0:	ed84 7a02 	vstr	s14, [r4, #8]
 80131f4:	edc4 7a03 	vstr	s15, [r4, #12]
	_P = (I - K*H)*_P;
 80131f8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80131fc:	4a1f      	ldr	r2, [pc, #124]	; (801327c <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8bc>)
 80131fe:	491c      	ldr	r1, [pc, #112]	; (8013270 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8b0>)
 8013200:	4618      	mov	r0, r3
 8013202:	f000 f891 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8013206:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801320a:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801320e:	491c      	ldr	r1, [pc, #112]	; (8013280 <_ZN10Algorithms10AHRSKalman15CorrectStateAccERKN3Mat6MatrixILt3ELt1EEEf+0x8c0>)
 8013210:	4618      	mov	r0, r3
 8013212:	f7fc f8c6 	bl	800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8013216:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801321a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f103 0210 	add.w	r2, r3, #16
 8013224:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013228:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801322c:	681c      	ldr	r4, [r3, #0]
 801322e:	463b      	mov	r3, r7
 8013230:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8013234:	4618      	mov	r0, r3
 8013236:	f7fb ff31 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 801323a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801323e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8013242:	3410      	adds	r4, #16
 8013244:	461d      	mov	r5, r3
 8013246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801324a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801324c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801324e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013252:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801325a:	bf00      	nop
 801325c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8013260:	46bd      	mov	sp, r7
 8013262:	ecbd 8b02 	vpop	{d8}
 8013266:	bdb0      	pop	{r4, r5, r7, pc}
 8013268:	240093c0 	.word	0x240093c0
 801326c:	240093b0 	.word	0x240093b0
 8013270:	24009404 	.word	0x24009404
 8013274:	240094cc 	.word	0x240094cc
 8013278:	240094e0 	.word	0x240094e0
 801327c:	240093d0 	.word	0x240093d0
 8013280:	24009488 	.word	0x24009488

08013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801329a:	b4b0      	push	{r4, r5, r7}
 801329c:	b083      	sub	sp, #12
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
 80132a2:	6039      	str	r1, [r7, #0]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	4614      	mov	r4, r2
 80132aa:	461d      	mov	r5, r3
 80132ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80132b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bcb0      	pop	{r4, r5, r7}
 80132c6:	4770      	bx	lr

080132c8 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 80132c8:	b590      	push	{r4, r7, lr}
 80132ca:	b085      	sub	sp, #20
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 f873 	bl	80133be <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 80132d8:	2300      	movs	r3, #0
 80132da:	81fb      	strh	r3, [r7, #14]
 80132dc:	e01c      	b.n	8013318 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 80132de:	2300      	movs	r3, #0
 80132e0:	81bb      	strh	r3, [r7, #12]
 80132e2:	e013      	b.n	801330c <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 80132e4:	89ba      	ldrh	r2, [r7, #12]
 80132e6:	89fb      	ldrh	r3, [r7, #14]
 80132e8:	4619      	mov	r1, r3
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f000 f94d 	bl	801358a <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 80132f0:	4604      	mov	r4, r0
 80132f2:	89fa      	ldrh	r2, [r7, #14]
 80132f4:	89bb      	ldrh	r3, [r7, #12]
 80132f6:	4619      	mov	r1, r3
 80132f8:	6838      	ldr	r0, [r7, #0]
 80132fa:	f000 f95d 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 80132fe:	eef0 7a40 	vmov.f32	s15, s0
 8013302:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013306:	89bb      	ldrh	r3, [r7, #12]
 8013308:	3301      	adds	r3, #1
 801330a:	81bb      	strh	r3, [r7, #12]
 801330c:	89bb      	ldrh	r3, [r7, #12]
 801330e:	2b03      	cmp	r3, #3
 8013310:	d9e8      	bls.n	80132e4 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013312:	89fb      	ldrh	r3, [r7, #14]
 8013314:	3301      	adds	r3, #1
 8013316:	81fb      	strh	r3, [r7, #14]
 8013318:	89fb      	ldrh	r3, [r7, #14]
 801331a:	2b02      	cmp	r3, #2
 801331c:	d9df      	bls.n	80132de <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv+0x16>
	return result;
 801331e:	bf00      	nop
}
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	3714      	adds	r7, #20
 8013324:	46bd      	mov	sp, r7
 8013326:	bd90      	pop	{r4, r7, pc}

08013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013334:	68f8      	ldr	r0, [r7, #12]
 8013336:	f7fa fc50 	bl	800dbda <_ZN3Mat6MatrixILt4ELt4EEC1Ev>
	Multiply(other, result);
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	6879      	ldr	r1, [r7, #4]
 801333e:	68b8      	ldr	r0, [r7, #8]
 8013340:	f000 f957 	bl	80135f2 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 8013344:	bf00      	nop
}
 8013346:	68f8      	ldr	r0, [r7, #12]
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <_ZNK3Mat6MatrixILt4ELt4EEmlEf>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator*(float val) const
 801334e:	b5b0      	push	{r4, r5, r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	60f8      	str	r0, [r7, #12]
 8013356:	60b9      	str	r1, [r7, #8]
 8013358:	ed87 0a01 	vstr	s0, [r7, #4]
    Matrix<heigth, width> result = *this;
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	4614      	mov	r4, r2
 8013362:	461d      	mov	r5, r3
 8013364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801336a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801336c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801336e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013370:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8013374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= val;
 8013378:	ed97 0a01 	vldr	s0, [r7, #4]
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f000 f9ec 	bl	801375a <_ZN3Mat6MatrixILt4ELt4EEmLEf>
	return result;
 8013382:	bf00      	nop
}
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bdb0      	pop	{r4, r5, r7, pc}

0801338c <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801338c:	b4b0      	push	{r4, r5, r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
 8013396:	687a      	ldr	r2, [r7, #4]
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	4614      	mov	r4, r2
 801339c:	461d      	mov	r5, r3
 801339e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80133ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bcb0      	pop	{r4, r5, r7}
 80133bc:	4770      	bx	lr

080133be <_ZN3Mat6MatrixILt3ELt4EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 80133be:	b480      	push	{r7}
 80133c0:	b083      	sub	sp, #12
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 80133d4:	b4b0      	push	{r4, r5, r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	4614      	mov	r4, r2
 80133e4:	461d      	mov	r5, r3
 80133e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80133f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	4618      	mov	r0, r3
 80133fa:	370c      	adds	r7, #12
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bcb0      	pop	{r4, r5, r7}
 8013400:	4770      	bx	lr

08013402 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013402:	b580      	push	{r7, lr}
 8013404:	b084      	sub	sp, #16
 8013406:	af00      	add	r7, sp, #0
 8013408:	60f8      	str	r0, [r7, #12]
 801340a:	60b9      	str	r1, [r7, #8]
 801340c:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff ffd5 	bl	80133be <_ZN3Mat6MatrixILt3ELt4EEC1Ev>
	Multiply(other, result);
 8013414:	68fa      	ldr	r2, [r7, #12]
 8013416:	6879      	ldr	r1, [r7, #4]
 8013418:	68b8      	ldr	r0, [r7, #8]
 801341a:	f000 f9ca 	bl	80137b2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 801341e:	bf00      	nop
}
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	3710      	adds	r7, #16
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8013428:	b590      	push	{r4, r7, lr}
 801342a:	b085      	sub	sp, #20
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7ff ff26 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8013438:	2300      	movs	r3, #0
 801343a:	81fb      	strh	r3, [r7, #14]
 801343c:	e01c      	b.n	8013478 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 801343e:	2300      	movs	r3, #0
 8013440:	81bb      	strh	r3, [r7, #12]
 8013442:	e013      	b.n	801346c <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8013444:	89ba      	ldrh	r2, [r7, #12]
 8013446:	89fb      	ldrh	r3, [r7, #14]
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 fa65 	bl	801391a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 8013450:	4604      	mov	r4, r0
 8013452:	89fa      	ldrh	r2, [r7, #14]
 8013454:	89bb      	ldrh	r3, [r7, #12]
 8013456:	4619      	mov	r1, r3
 8013458:	6838      	ldr	r0, [r7, #0]
 801345a:	f000 fa77 	bl	801394c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 801345e:	eef0 7a40 	vmov.f32	s15, s0
 8013462:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8013466:	89bb      	ldrh	r3, [r7, #12]
 8013468:	3301      	adds	r3, #1
 801346a:	81bb      	strh	r3, [r7, #12]
 801346c:	89bb      	ldrh	r3, [r7, #12]
 801346e:	2b02      	cmp	r3, #2
 8013470:	d9e8      	bls.n	8013444 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8013472:	89fb      	ldrh	r3, [r7, #14]
 8013474:	3301      	adds	r3, #1
 8013476:	81fb      	strh	r3, [r7, #14]
 8013478:	89fb      	ldrh	r3, [r7, #14]
 801347a:	2b03      	cmp	r3, #3
 801347c:	d9df      	bls.n	801343e <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv+0x16>
	return result;
 801347e:	bf00      	nop
}
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	3714      	adds	r7, #20
 8013484:	46bd      	mov	sp, r7
 8013486:	bd90      	pop	{r4, r7, pc}

08013488 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013494:	68f8      	ldr	r0, [r7, #12]
 8013496:	f7fa fc24 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	6879      	ldr	r1, [r7, #4]
 801349e:	68b8      	ldr	r0, [r7, #8]
 80134a0:	f000 fa6f 	bl	8013982 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 80134a4:	bf00      	nop
}
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>:
inline Matrix<heigth, width> Matrix<heigth, width>::operator+(const Matrix<heigth, width> &other) const
 80134ae:	b5b0      	push	{r4, r5, r7, lr}
 80134b0:	b084      	sub	sp, #16
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	60f8      	str	r0, [r7, #12]
 80134b6:	60b9      	str	r1, [r7, #8]
 80134b8:	607a      	str	r2, [r7, #4]
    Matrix<heigth, width> result = *this;
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	4614      	mov	r4, r2
 80134c0:	461d      	mov	r5, r3
 80134c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134ca:	682b      	ldr	r3, [r5, #0]
 80134cc:	6023      	str	r3, [r4, #0]
	result += other;
 80134ce:	6879      	ldr	r1, [r7, #4]
 80134d0:	68f8      	ldr	r0, [r7, #12]
 80134d2:	f000 fb0a 	bl	8013aea <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>
	return result;
 80134d6:	bf00      	nop
}
 80134d8:	68f8      	ldr	r0, [r7, #12]
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bdb0      	pop	{r4, r5, r7, pc}

080134e0 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f7ff fec9 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 80134f2:	68fa      	ldr	r2, [r7, #12]
 80134f4:	6879      	ldr	r1, [r7, #4]
 80134f6:	68b8      	ldr	r0, [r7, #8]
 80134f8:	f000 fb2c 	bl	8013b54 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>
	return result;
 80134fc:	bf00      	nop
}
 80134fe:	68f8      	ldr	r0, [r7, #12]
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8013506:	b580      	push	{r7, lr}
 8013508:	b084      	sub	sp, #16
 801350a:	af00      	add	r7, sp, #0
 801350c:	60f8      	str	r0, [r7, #12]
 801350e:	60b9      	str	r1, [r7, #8]
 8013510:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff feb6 	bl	8013284 <_ZN3Mat6MatrixILt4ELt3EEC1Ev>
	Multiply(other, result);
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	6879      	ldr	r1, [r7, #4]
 801351c:	68b8      	ldr	r0, [r7, #8]
 801351e:	f000 fbcd 	bl	8013cbc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 8013522:	bf00      	nop
}
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	3710      	adds	r7, #16
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 801352c:	b590      	push	{r4, r7, lr}
 801352e:	b08f      	sub	sp, #60	; 0x3c
 8013530:	af00      	add	r7, sp, #0
 8013532:	6178      	str	r0, [r7, #20]
 8013534:	6139      	str	r1, [r7, #16]
	Matrix<heigth, other_width> result;
 8013536:	f107 0318 	add.w	r3, r7, #24
 801353a:	4618      	mov	r0, r3
 801353c:	f7fa fd07 	bl	800df4e <_ZN3Mat6MatrixILt4ELt1EEC1Ev>
	Multiply(other, result);
 8013540:	f107 0318 	add.w	r3, r7, #24
 8013544:	461a      	mov	r2, r3
 8013546:	6939      	ldr	r1, [r7, #16]
 8013548:	6978      	ldr	r0, [r7, #20]
 801354a:	f000 fc6b 	bl	8013e24 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>
	return result;
 801354e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8013552:	f107 0318 	add.w	r3, r7, #24
 8013556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801355c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801355e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013564:	ee06 0a10 	vmov	s12, r0
 8013568:	ee06 1a90 	vmov	s13, r1
 801356c:	ee07 2a10 	vmov	s14, r2
 8013570:	ee07 3a90 	vmov	s15, r3
}
 8013574:	eeb0 0a46 	vmov.f32	s0, s12
 8013578:	eef0 0a66 	vmov.f32	s1, s13
 801357c:	eeb0 1a47 	vmov.f32	s2, s14
 8013580:	eef0 1a67 	vmov.f32	s3, s15
 8013584:	373c      	adds	r7, #60	; 0x3c
 8013586:	46bd      	mov	sp, r7
 8013588:	bd90      	pop	{r4, r7, pc}

0801358a <_ZN3Mat6MatrixILt3ELt4EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 801358a:	b580      	push	{r7, lr}
 801358c:	b084      	sub	sp, #16
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	460b      	mov	r3, r1
 8013594:	807b      	strh	r3, [r7, #2]
 8013596:	4613      	mov	r3, r2
 8013598:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801359a:	887b      	ldrh	r3, [r7, #2]
 801359c:	009a      	lsls	r2, r3, #2
 801359e:	883b      	ldrh	r3, [r7, #0]
 80135a0:	4413      	add	r3, r2
 80135a2:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 fcef 	bl	8013f8c <_ZNSt5arrayIfLj12EEixEj>
 80135ae:	4603      	mov	r3, r0
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}

080135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b084      	sub	sp, #16
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	460b      	mov	r3, r1
 80135c2:	807b      	strh	r3, [r7, #2]
 80135c4:	4613      	mov	r3, r2
 80135c6:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80135c8:	887a      	ldrh	r2, [r7, #2]
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	441a      	add	r2, r3
 80135d0:	883b      	ldrh	r3, [r7, #0]
 80135d2:	4413      	add	r3, r2
 80135d4:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	68f9      	ldr	r1, [r7, #12]
 80135da:	4618      	mov	r0, r3
 80135dc:	f000 fce5 	bl	8013faa <_ZNKSt5arrayIfLj12EEixEj>
 80135e0:	4603      	mov	r3, r0
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	ee07 3a90 	vmov	s15, r3
}
 80135e8:	eeb0 0a67 	vmov.f32	s0, s15
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80135f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135f4:	b0a1      	sub	sp, #132	; 0x84
 80135f6:	af00      	add	r7, sp, #0
 80135f8:	60f8      	str	r0, [r7, #12]
 80135fa:	60b9      	str	r1, [r7, #8]
 80135fc:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80135fe:	2300      	movs	r3, #0
 8013600:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8013604:	e02d      	b.n	8013662 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013606:	2300      	movs	r3, #0
 8013608:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801360c:	e020      	b.n	8013650 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 801360e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8013612:	f107 0314 	add.w	r3, r7, #20
 8013616:	4611      	mov	r1, r2
 8013618:	4618      	mov	r0, r3
 801361a:	f000 fcd5 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 801361e:	4602      	mov	r2, r0
 8013620:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8013624:	4619      	mov	r1, r3
 8013626:	4610      	mov	r0, r2
 8013628:	f7fa fd7e 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 801362c:	4604      	mov	r4, r0
 801362e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013632:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013636:	4619      	mov	r1, r3
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f7ff ffbd 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 801363e:	eef0 7a40 	vmov.f32	s15, s0
 8013642:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013646:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801364a:	3301      	adds	r3, #1
 801364c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8013650:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8013654:	2b02      	cmp	r3, #2
 8013656:	d9da      	bls.n	801360e <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013658:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801365c:	3301      	adds	r3, #1
 801365e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8013662:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013666:	2b03      	cmp	r3, #3
 8013668:	d9cd      	bls.n	8013606 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 801366a:	2300      	movs	r3, #0
 801366c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013670:	e02d      	b.n	80136ce <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013672:	2300      	movs	r3, #0
 8013674:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013678:	e020      	b.n	80136bc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 801367a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801367e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013682:	4611      	mov	r1, r2
 8013684:	4618      	mov	r0, r3
 8013686:	f000 fc9f 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 801368a:	4602      	mov	r2, r0
 801368c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013690:	4619      	mov	r1, r3
 8013692:	4610      	mov	r0, r2
 8013694:	f7fa fd48 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8013698:	4604      	mov	r4, r0
 801369a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801369e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80136a2:	4619      	mov	r1, r3
 80136a4:	68b8      	ldr	r0, [r7, #8]
 80136a6:	f000 f951 	bl	801394c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80136aa:	eef0 7a40 	vmov.f32	s15, s0
 80136ae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80136b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80136b6:	3301      	adds	r3, #1
 80136b8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80136bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	d9da      	bls.n	801367a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80136c4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80136c8:	3301      	adds	r3, #1
 80136ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80136ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80136d2:	2b03      	cmp	r3, #3
 80136d4:	d9cd      	bls.n	8013672 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80136d6:	2300      	movs	r3, #0
 80136d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80136dc:	e034      	b.n	8013748 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80136de:	2300      	movs	r3, #0
 80136e0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80136e4:	e027      	b.n	8013736 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80136e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80136ea:	f107 0314 	add.w	r3, r7, #20
 80136ee:	4611      	mov	r1, r2
 80136f0:	4618      	mov	r0, r3
 80136f2:	f000 fc69 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 80136f6:	4605      	mov	r5, r0
 80136f8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80136fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013700:	4611      	mov	r1, r2
 8013702:	4618      	mov	r0, r3
 8013704:	f000 fc60 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013708:	4606      	mov	r6, r0
 801370a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 801370e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013712:	4619      	mov	r1, r3
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7fa fcbb 	bl	800e090 <_ZN3Mat6MatrixILt4ELt4EEclEtt>
 801371a:	4604      	mov	r4, r0
 801371c:	4631      	mov	r1, r6
 801371e:	4628      	mov	r0, r5
 8013720:	f7fa fee9 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8013724:	eef0 7a40 	vmov.f32	s15, s0
 8013728:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801372c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013730:	3301      	adds	r3, #1
 8013732:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013736:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801373a:	2b03      	cmp	r3, #3
 801373c:	d9d3      	bls.n	80136e6 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801373e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013742:	3301      	adds	r3, #1
 8013744:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013748:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801374c:	2b03      	cmp	r3, #3
 801374e:	d9c6      	bls.n	80136de <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt4EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8013750:	bf00      	nop
 8013752:	bf00      	nop
 8013754:	3784      	adds	r7, #132	; 0x84
 8013756:	46bd      	mov	sp, r7
 8013758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801375a <_ZN3Mat6MatrixILt4ELt4EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 801375a:	b580      	push	{r7, lr}
 801375c:	b084      	sub	sp, #16
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
 8013762:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8013766:	2300      	movs	r3, #0
 8013768:	60fb      	str	r3, [r7, #12]
 801376a:	e010      	b.n	801378e <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x34>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	68f9      	ldr	r1, [r7, #12]
 8013770:	4618      	mov	r0, r3
 8013772:	f7fa fe40 	bl	800e3f6 <_ZNSt5arrayIfLj16EEixEj>
 8013776:	4603      	mov	r3, r0
 8013778:	ed93 7a00 	vldr	s14, [r3]
 801377c:	edd7 7a00 	vldr	s15, [r7]
 8013780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013784:	edc3 7a00 	vstr	s15, [r3]
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	3301      	adds	r3, #1
 801378c:	60fb      	str	r3, [r7, #12]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	4618      	mov	r0, r3
 8013792:	f7fc ff8d 	bl	80106b0 <_ZNKSt5arrayIfLj16EE4sizeEv>
 8013796:	4602      	mov	r2, r0
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	4293      	cmp	r3, r2
 801379c:	bf34      	ite	cc
 801379e:	2301      	movcc	r3, #1
 80137a0:	2300      	movcs	r3, #0
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d1e1      	bne.n	801376c <_ZN3Mat6MatrixILt4ELt4EEmLEf+0x12>
	return *this;
 80137a8:	687b      	ldr	r3, [r7, #4]
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80137b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137b4:	b0a5      	sub	sp, #148	; 0x94
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	60f8      	str	r0, [r7, #12]
 80137ba:	60b9      	str	r1, [r7, #8]
 80137bc:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80137be:	2300      	movs	r3, #0
 80137c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80137c4:	e02d      	b.n	8013822 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80137c6:	2300      	movs	r3, #0
 80137c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80137cc:	e020      	b.n	8013810 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80137ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80137d2:	f107 0314 	add.w	r3, r7, #20
 80137d6:	4611      	mov	r1, r2
 80137d8:	4618      	mov	r0, r3
 80137da:	f000 fc04 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 80137de:	4602      	mov	r2, r0
 80137e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80137e4:	4619      	mov	r1, r3
 80137e6:	4610      	mov	r0, r2
 80137e8:	f7fc fc1e 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 80137ec:	4604      	mov	r4, r0
 80137ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80137f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80137f6:	4619      	mov	r1, r3
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f000 f8a7 	bl	801394c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80137fe:	eef0 7a40 	vmov.f32	s15, s0
 8013802:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013806:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801380a:	3301      	adds	r3, #1
 801380c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013810:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013814:	2b03      	cmp	r3, #3
 8013816:	d9da      	bls.n	80137ce <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013818:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801381c:	3301      	adds	r3, #1
 801381e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013822:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013826:	2b02      	cmp	r3, #2
 8013828:	d9cd      	bls.n	80137c6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 801382a:	2300      	movs	r3, #0
 801382c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013830:	e02d      	b.n	801388e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013832:	2300      	movs	r3, #0
 8013834:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013838:	e020      	b.n	801387c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 801383a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801383e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013842:	4611      	mov	r1, r2
 8013844:	4618      	mov	r0, r3
 8013846:	f7fc fee2 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 801384a:	4602      	mov	r2, r0
 801384c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013850:	4619      	mov	r1, r3
 8013852:	4610      	mov	r0, r2
 8013854:	f7fc fbe8 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 8013858:	4604      	mov	r4, r0
 801385a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801385e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013862:	4619      	mov	r1, r3
 8013864:	68b8      	ldr	r0, [r7, #8]
 8013866:	f7fb ff34 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 801386a:	eef0 7a40 	vmov.f32	s15, s0
 801386e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013872:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013876:	3301      	adds	r3, #1
 8013878:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 801387c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013880:	2b03      	cmp	r3, #3
 8013882:	d9da      	bls.n	801383a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013884:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013888:	3301      	adds	r3, #1
 801388a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801388e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013892:	2b03      	cmp	r3, #3
 8013894:	d9cd      	bls.n	8013832 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013896:	2300      	movs	r3, #0
 8013898:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801389c:	e034      	b.n	8013908 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801389e:	2300      	movs	r3, #0
 80138a0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80138a4:	e027      	b.n	80138f6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80138a6:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80138aa:	f107 0314 	add.w	r3, r7, #20
 80138ae:	4611      	mov	r1, r2
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 fb98 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 80138b6:	4605      	mov	r5, r0
 80138b8:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80138bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138c0:	4611      	mov	r1, r2
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fc fea3 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 80138c8:	4606      	mov	r6, r0
 80138ca:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80138ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80138d2:	4619      	mov	r1, r3
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fe58 	bl	801358a <_ZN3Mat6MatrixILt3ELt4EEclEtt>
 80138da:	4604      	mov	r4, r0
 80138dc:	4631      	mov	r1, r6
 80138de:	4628      	mov	r0, r5
 80138e0:	f7fc fea4 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 80138e4:	eef0 7a40 	vmov.f32	s15, s0
 80138e8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80138ec:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80138f0:	3301      	adds	r3, #1
 80138f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80138f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80138fa:	2b03      	cmp	r3, #3
 80138fc:	d9d3      	bls.n	80138a6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80138fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013902:	3301      	adds	r3, #1
 8013904:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013908:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801390c:	2b02      	cmp	r3, #2
 801390e:	d9c6      	bls.n	801389e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt4EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013910:	bf00      	nop
 8013912:	bf00      	nop
 8013914:	3794      	adds	r7, #148	; 0x94
 8013916:	46bd      	mov	sp, r7
 8013918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801391a <_ZN3Mat6MatrixILt4ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 801391a:	b580      	push	{r7, lr}
 801391c:	b084      	sub	sp, #16
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	460b      	mov	r3, r1
 8013924:	807b      	strh	r3, [r7, #2]
 8013926:	4613      	mov	r3, r2
 8013928:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801392a:	887a      	ldrh	r2, [r7, #2]
 801392c:	4613      	mov	r3, r2
 801392e:	005b      	lsls	r3, r3, #1
 8013930:	441a      	add	r2, r3
 8013932:	883b      	ldrh	r3, [r7, #0]
 8013934:	4413      	add	r3, r2
 8013936:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	68f9      	ldr	r1, [r7, #12]
 801393c:	4618      	mov	r0, r3
 801393e:	f000 fb25 	bl	8013f8c <_ZNSt5arrayIfLj12EEixEj>
 8013942:	4603      	mov	r3, r0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	460b      	mov	r3, r1
 8013956:	807b      	strh	r3, [r7, #2]
 8013958:	4613      	mov	r3, r2
 801395a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 801395c:	887b      	ldrh	r3, [r7, #2]
 801395e:	009a      	lsls	r2, r3, #2
 8013960:	883b      	ldrh	r3, [r7, #0]
 8013962:	4413      	add	r3, r2
 8013964:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	68f9      	ldr	r1, [r7, #12]
 801396a:	4618      	mov	r0, r3
 801396c:	f000 fb1d 	bl	8013faa <_ZNKSt5arrayIfLj12EEixEj>
 8013970:	4603      	mov	r3, r0
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	ee07 3a90 	vmov	s15, r3
}
 8013978:	eeb0 0a67 	vmov.f32	s0, s15
 801397c:	3710      	adds	r7, #16
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}

08013982 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013984:	b0a1      	sub	sp, #132	; 0x84
 8013986:	af00      	add	r7, sp, #0
 8013988:	60f8      	str	r0, [r7, #12]
 801398a:	60b9      	str	r1, [r7, #8]
 801398c:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 801398e:	2300      	movs	r3, #0
 8013990:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8013994:	e02d      	b.n	80139f2 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013996:	2300      	movs	r3, #0
 8013998:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801399c:	e020      	b.n	80139e0 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 801399e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80139a2:	f107 0314 	add.w	r3, r7, #20
 80139a6:	4611      	mov	r1, r2
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 fb1c 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 80139ae:	4602      	mov	r2, r0
 80139b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80139b4:	4619      	mov	r1, r3
 80139b6:	4610      	mov	r0, r2
 80139b8:	f7fc fb36 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 80139bc:	4604      	mov	r4, r0
 80139be:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80139c2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80139c6:	4619      	mov	r1, r3
 80139c8:	68f8      	ldr	r0, [r7, #12]
 80139ca:	f7ff ffbf 	bl	801394c <_ZNK3Mat6MatrixILt3ELt4EEclEtt>
 80139ce:	eef0 7a40 	vmov.f32	s15, s0
 80139d2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 80139d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80139da:	3301      	adds	r3, #1
 80139dc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80139e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80139e4:	2b03      	cmp	r3, #3
 80139e6:	d9da      	bls.n	801399e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80139e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80139ec:	3301      	adds	r3, #1
 80139ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80139f2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	d9cd      	bls.n	8013996 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80139fa:	2300      	movs	r3, #0
 80139fc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013a00:	e02d      	b.n	8013a5e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013a02:	2300      	movs	r3, #0
 8013a04:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013a08:	e020      	b.n	8013a4c <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013a0a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013a0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a12:	4611      	mov	r1, r2
 8013a14:	4618      	mov	r0, r3
 8013a16:	f000 fae6 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013a1a:	4602      	mov	r2, r0
 8013a1c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013a20:	4619      	mov	r1, r3
 8013a22:	4610      	mov	r0, r2
 8013a24:	f7fc fb00 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013a2e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013a32:	4619      	mov	r1, r3
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	f7ff fdbf 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013a3a:	eef0 7a40 	vmov.f32	s15, s0
 8013a3e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013a42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013a46:	3301      	adds	r3, #1
 8013a48:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8013a4c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8013a50:	2b03      	cmp	r3, #3
 8013a52:	d9da      	bls.n	8013a0a <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013a54:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013a58:	3301      	adds	r3, #1
 8013a5a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8013a5e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	d9cd      	bls.n	8013a02 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013a66:	2300      	movs	r3, #0
 8013a68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013a6c:	e034      	b.n	8013ad8 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013a74:	e027      	b.n	8013ac6 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013a76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013a7a:	f107 0314 	add.w	r3, r7, #20
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f000 fab0 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013a86:	4605      	mov	r5, r0
 8013a88:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a90:	4611      	mov	r1, r2
 8013a92:	4618      	mov	r0, r3
 8013a94:	f000 faa7 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013a98:	4606      	mov	r6, r0
 8013a9a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8013a9e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7fa fa9f 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4631      	mov	r1, r6
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f7fc fdbc 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8013ab4:	eef0 7a40 	vmov.f32	s15, s0
 8013ab8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013abc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8013ac6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d9d3      	bls.n	8013a76 <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013ace:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8013ad8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d9c6      	bls.n	8013a6e <_ZNK3Mat6MatrixILt3ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8013ae0:	bf00      	nop
 8013ae2:	bf00      	nop
 8013ae4:	3784      	adds	r7, #132	; 0x84
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013aea <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator+=(const Matrix<heigth, width> &other)
 8013aea:	b580      	push	{r7, lr}
 8013aec:	ed2d 8b02 	vpush	{d8}
 8013af0:	b084      	sub	sp, #16
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
 8013af6:	6039      	str	r1, [r7, #0]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] += other._values[i];
 8013af8:	2300      	movs	r3, #0
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	e016      	b.n	8013b2c <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x42>
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	68f9      	ldr	r1, [r7, #12]
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fa fd99 	bl	800e63a <_ZNKSt5arrayIfLj9EEixEj>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	ed93 8a00 	vldr	s16, [r3]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	68f9      	ldr	r1, [r7, #12]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7fa fc1c 	bl	800e350 <_ZNSt5arrayIfLj9EEixEj>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	edd3 7a00 	vldr	s15, [r3]
 8013b1e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8013b22:	edc3 7a00 	vstr	s15, [r3]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	60fb      	str	r3, [r7, #12]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f000 fa68 	bl	8014004 <_ZNKSt5arrayIfLj9EE4sizeEv>
 8013b34:	4602      	mov	r2, r0
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	bf34      	ite	cc
 8013b3c:	2301      	movcc	r3, #1
 8013b3e:	2300      	movcs	r3, #0
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d1db      	bne.n	8013afe <_ZN3Mat6MatrixILt3ELt3EEpLERKS1_+0x14>
	return *this;
 8013b46:	687b      	ldr	r3, [r7, #4]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	ecbd 8b02 	vpop	{d8}
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b56:	b0a5      	sub	sp, #148	; 0x94
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013b60:	2300      	movs	r3, #0
 8013b62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013b66:	e02d      	b.n	8013bc4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 8013b68:	2300      	movs	r3, #0
 8013b6a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013b6e:	e020      	b.n	8013bb2 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013b70:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013b74:	f107 0314 	add.w	r3, r7, #20
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fc fd47 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013b80:	4602      	mov	r2, r0
 8013b82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013b86:	4619      	mov	r1, r3
 8013b88:	4610      	mov	r0, r2
 8013b8a:	f7fc fa4d 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 8013b8e:	4604      	mov	r4, r0
 8013b90:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013b94:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013b98:	4619      	mov	r1, r3
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f7fb fd99 	bl	800f6d2 <_ZNK3Mat6MatrixILt4ELt4EEclEtt>
 8013ba0:	eef0 7a40 	vmov.f32	s15, s0
 8013ba4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013ba8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013bac:	3301      	adds	r3, #1
 8013bae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8013bb2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8013bb6:	2b03      	cmp	r3, #3
 8013bb8:	d9da      	bls.n	8013b70 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013bba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8013bc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013bc8:	2b03      	cmp	r3, #3
 8013bca:	d9cd      	bls.n	8013b68 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013bcc:	2300      	movs	r3, #0
 8013bce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013bd2:	e02d      	b.n	8013c30 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013bda:	e020      	b.n	8013c1e <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8013bdc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013be4:	4611      	mov	r1, r2
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 f9fd 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013bec:	4602      	mov	r2, r0
 8013bee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	f7fc fa17 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013c00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013c04:	4619      	mov	r1, r3
 8013c06:	68b8      	ldr	r0, [r7, #8]
 8013c08:	f7ff fcd6 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013c0c:	eef0 7a40 	vmov.f32	s15, s0
 8013c10:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013c14:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013c18:	3301      	adds	r3, #1
 8013c1a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8013c1e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8013c22:	2b03      	cmp	r3, #3
 8013c24:	d9da      	bls.n	8013bdc <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013c26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013c30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013c34:	2b02      	cmp	r3, #2
 8013c36:	d9cd      	bls.n	8013bd4 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013c3e:	e034      	b.n	8013caa <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013c40:	2300      	movs	r3, #0
 8013c42:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013c46:	e027      	b.n	8013c98 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013c48:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8013c4c:	f107 0314 	add.w	r3, r7, #20
 8013c50:	4611      	mov	r1, r2
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fc fcdb 	bl	801060e <_ZNSt5arrayIS_IfLj4EELj4EEixEj>
 8013c58:	4605      	mov	r5, r0
 8013c5a:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013c5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c62:	4611      	mov	r1, r2
 8013c64:	4618      	mov	r0, r3
 8013c66:	f000 f9be 	bl	8013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8013c70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013c74:	4619      	mov	r1, r3
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7ff fe4f 	bl	801391a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	4631      	mov	r1, r6
 8013c80:	4628      	mov	r0, r5
 8013c82:	f7fc fcd3 	bl	801062c <_ZN3Mat13Multiply_rowsILj4EEEfRKSt5arrayIfXT_EES4_>
 8013c86:	eef0 7a40 	vmov.f32	s15, s0
 8013c8a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013c8e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013c92:	3301      	adds	r3, #1
 8013c94:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013c98:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013c9c:	2b02      	cmp	r3, #2
 8013c9e:	d9d3      	bls.n	8013c48 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013ca0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8013caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013cae:	2b03      	cmp	r3, #3
 8013cb0:	d9c6      	bls.n	8013c40 <_ZNK3Mat6MatrixILt4ELt4EE8MultiplyILt3EEEvRKNS0_ILt4EXT_EEERS3_+0xec>
}
 8013cb2:	bf00      	nop
 8013cb4:	bf00      	nop
 8013cb6:	3794      	adds	r7, #148	; 0x94
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013cbc <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cbe:	b09d      	sub	sp, #116	; 0x74
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013cc8:	2300      	movs	r3, #0
 8013cca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8013cce:	e02d      	b.n	8013d2c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8013cd6:	e020      	b.n	8013d1a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013cd8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8013cdc:	f107 0310 	add.w	r3, r7, #16
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f000 f970 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013cee:	4619      	mov	r1, r3
 8013cf0:	4610      	mov	r0, r2
 8013cf2:	f7fa fa19 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8013cfc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013d00:	4619      	mov	r1, r3
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f7ff fc58 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013d08:	eef0 7a40 	vmov.f32	s15, s0
 8013d0c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013d10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013d14:	3301      	adds	r3, #1
 8013d16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8013d1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	d9da      	bls.n	8013cd8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013d22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013d26:	3301      	adds	r3, #1
 8013d28:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8013d2c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013d30:	2b03      	cmp	r3, #3
 8013d32:	d9cd      	bls.n	8013cd0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013d34:	2300      	movs	r3, #0
 8013d36:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8013d3a:	e02d      	b.n	8013d98 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8013d42:	e020      	b.n	8013d86 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013d44:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8013d48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fa fb7c 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8013d54:	4602      	mov	r2, r0
 8013d56:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	4610      	mov	r0, r2
 8013d5e:	f7fa f9e3 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8013d62:	4604      	mov	r4, r0
 8013d64:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8013d68:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	68b8      	ldr	r0, [r7, #8]
 8013d70:	f7fa fb7b 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8013d74:	eef0 7a40 	vmov.f32	s15, s0
 8013d78:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013d7c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013d80:	3301      	adds	r3, #1
 8013d82:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8013d86:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8013d8a:	2b02      	cmp	r3, #2
 8013d8c:	d9da      	bls.n	8013d44 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013d8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8013d92:	3301      	adds	r3, #1
 8013d94:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8013d98:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8013d9c:	2b02      	cmp	r3, #2
 8013d9e:	d9cd      	bls.n	8013d3c <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013da0:	2300      	movs	r3, #0
 8013da2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8013da6:	e034      	b.n	8013e12 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013da8:	2300      	movs	r3, #0
 8013daa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8013dae:	e027      	b.n	8013e00 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013db0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8013db4:	f107 0310 	add.w	r3, r7, #16
 8013db8:	4611      	mov	r1, r2
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f000 f904 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013dc0:	4605      	mov	r5, r0
 8013dc2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8013dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fa fb3d 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8013dd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8013ddc:	4619      	mov	r1, r3
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f7ff fd9b 	bl	801391a <_ZN3Mat6MatrixILt4ELt3EEclEtt>
 8013de4:	4604      	mov	r4, r0
 8013de6:	4631      	mov	r1, r6
 8013de8:	4628      	mov	r0, r5
 8013dea:	f7fa fb84 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8013dee:	eef0 7a40 	vmov.f32	s15, s0
 8013df2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013df6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013dfa:	3301      	adds	r3, #1
 8013dfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8013e00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013e04:	2b02      	cmp	r3, #2
 8013e06:	d9d3      	bls.n	8013db0 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013e08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8013e12:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8013e16:	2b03      	cmp	r3, #3
 8013e18:	d9c6      	bls.n	8013da8 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8013e1a:	bf00      	nop
 8013e1c:	bf00      	nop
 8013e1e:	3774      	adds	r7, #116	; 0x74
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e24 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8013e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e26:	b097      	sub	sp, #92	; 0x5c
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8013e30:	2300      	movs	r3, #0
 8013e32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013e36:	e02d      	b.n	8013e94 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8013e38:	2300      	movs	r3, #0
 8013e3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8013e3e:	e020      	b.n	8013e82 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8013e40:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8013e44:	f107 0310 	add.w	r3, r7, #16
 8013e48:	4611      	mov	r1, r2
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f000 f8bc 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013e50:	4602      	mov	r2, r0
 8013e52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013e56:	4619      	mov	r1, r3
 8013e58:	4610      	mov	r0, r2
 8013e5a:	f7fa f965 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8013e5e:	4604      	mov	r4, r0
 8013e60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013e64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013e68:	4619      	mov	r1, r3
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	f7ff fba4 	bl	80135b8 <_ZNK3Mat6MatrixILt4ELt3EEclEtt>
 8013e70:	eef0 7a40 	vmov.f32	s15, s0
 8013e74:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8013e78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8013e82:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013e86:	2b02      	cmp	r3, #2
 8013e88:	d9da      	bls.n	8013e40 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8013e8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013e8e:	3301      	adds	r3, #1
 8013e90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013e94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013e98:	2b03      	cmp	r3, #3
 8013e9a:	d9cd      	bls.n	8013e38 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8013ea2:	e02d      	b.n	8013f00 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8013eaa:	e020      	b.n	8013eee <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8013eac:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8013eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fa faf4 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	4610      	mov	r0, r2
 8013ec6:	f7fa f92f 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8013eca:	4604      	mov	r4, r0
 8013ecc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8013ed0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	68b8      	ldr	r0, [r7, #8]
 8013ed8:	f7fa faf3 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8013edc:	eef0 7a40 	vmov.f32	s15, s0
 8013ee0:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8013ee4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8013ee8:	3301      	adds	r3, #1
 8013eea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8013eee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8013ef2:	2b02      	cmp	r3, #2
 8013ef4:	d9da      	bls.n	8013eac <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8013ef6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013efa:	3301      	adds	r3, #1
 8013efc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8013f00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d0cd      	beq.n	8013ea4 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8013f08:	2300      	movs	r3, #0
 8013f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013f0e:	e034      	b.n	8013f7a <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8013f10:	2300      	movs	r3, #0
 8013f12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013f16:	e027      	b.n	8013f68 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8013f18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013f1c:	f107 0310 	add.w	r3, r7, #16
 8013f20:	4611      	mov	r1, r2
 8013f22:	4618      	mov	r0, r3
 8013f24:	f000 f850 	bl	8013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>
 8013f28:	4605      	mov	r5, r0
 8013f2a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8013f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f32:	4611      	mov	r1, r2
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fa fab5 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8013f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f44:	4619      	mov	r1, r3
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7fc fcb4 	bl	80108b4 <_ZN3Mat6MatrixILt4ELt1EEclEtt>
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	4631      	mov	r1, r6
 8013f50:	4628      	mov	r0, r5
 8013f52:	f7fa fad0 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 8013f56:	eef0 7a40 	vmov.f32	s15, s0
 8013f5a:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8013f5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013f62:	3301      	adds	r3, #1
 8013f64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8013f68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d0d3      	beq.n	8013f18 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8013f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f74:	3301      	adds	r3, #1
 8013f76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8013f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f7e:	2b03      	cmp	r3, #3
 8013f80:	d9c6      	bls.n	8013f10 <_ZNK3Mat6MatrixILt4ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt4EXT_EEE+0xec>
}
 8013f82:	bf00      	nop
 8013f84:	bf00      	nop
 8013f86:	375c      	adds	r7, #92	; 0x5c
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f8c <_ZNSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) noexcept
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6839      	ldr	r1, [r7, #0]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 f83d 	bl	801401a <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8013fa0:	4603      	mov	r3, r0
      }
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3708      	adds	r7, #8
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b082      	sub	sp, #8
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
 8013fb2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6839      	ldr	r1, [r7, #0]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f000 f82e 	bl	801401a <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 8013fbe:	4603      	mov	r3, r0
      }
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <_ZNSt5arrayIS_IfLj3EELj4EEixEj>:
      operator[](size_type __n) noexcept
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f000 f82e 	bl	8014038 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>
 8013fdc:	4603      	mov	r3, r0
      }
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3708      	adds	r7, #8
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}

08013fe6 <_ZNSt5arrayIS_IfLj4EELj3EEixEj>:
      operator[](size_type __n) noexcept
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	b082      	sub	sp, #8
 8013fea:	af00      	add	r7, sp, #0
 8013fec:	6078      	str	r0, [r7, #4]
 8013fee:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f000 f831 	bl	801405c <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>
 8013ffa:	4603      	mov	r3, r0
      }
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <_ZNKSt5arrayIfLj9EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	2309      	movs	r3, #9
 801400e:	4618      	mov	r0, r3
 8014010:	370c      	adds	r7, #12
 8014012:	46bd      	mov	sp, r7
 8014014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014018:	4770      	bx	lr

0801401a <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801401a:	b480      	push	{r7}
 801401c:	b083      	sub	sp, #12
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
 8014022:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	009b      	lsls	r3, r3, #2
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	4413      	add	r3, r2
 801402c:	4618      	mov	r0, r3
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr

08014038 <_ZNSt14__array_traitsISt5arrayIfLj3EELj4EE6_S_refERA4_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8014038:	b480      	push	{r7}
 801403a:	b083      	sub	sp, #12
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014042:	683a      	ldr	r2, [r7, #0]
 8014044:	4613      	mov	r3, r2
 8014046:	005b      	lsls	r3, r3, #1
 8014048:	4413      	add	r3, r2
 801404a:	009b      	lsls	r3, r3, #2
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	4413      	add	r3, r2
 8014050:	4618      	mov	r0, r3
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <_ZNSt14__array_traitsISt5arrayIfLj4EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	011b      	lsls	r3, r3, #4
 801406a:	687a      	ldr	r2, [r7, #4]
 801406c:	4413      	add	r3, r2
 801406e:	4618      	mov	r0, r3
 8014070:	370c      	adds	r7, #12
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr

0801407a <_ZNK10Algorithms14OrientationEKF2_hEv>:
	//Prediction step
	virtual StateVec _f(const ControlVec& controlVec, float time) const override;
	virtual StateCovarianceMatrix _F(const ControlVec& controlVec, float time) const override;
	virtual StateCovarianceMatrix _Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const override;
	//Correction step
	virtual MeassurementVec _h() const override {return MeassurementVec{-1.0f};} //not used
 801407a:	b580      	push	{r7, lr}
 801407c:	b082      	sub	sp, #8
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
 8014082:	6039      	str	r1, [r7, #0]
 8014084:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f002 f89d 	bl	80161c8 <_ZN3Mat8V_VectorILt6EEC1Ef>
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	3708      	adds	r7, #8
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}

08014096 <_ZNK10Algorithms14OrientationEKF2_HEv>:
	virtual Matrix<OrientationEKF_meassurementLen, OrientationEKF_stateLen> _H() const override {return Matrix<OrientationEKF_meassurementLen, OrientationEKF_stateLen>{-1.0f};}//not used
 8014096:	b580      	push	{r7, lr}
 8014098:	b082      	sub	sp, #8
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
 801409e:	6039      	str	r1, [r7, #0]
 80140a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f002 f8af 	bl	8016208 <_ZN3Mat6MatrixILt6ELt4EEC1Ef>
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	3708      	adds	r7, #8
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <_ZNK10Algorithms14OrientationEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:
	virtual MeasurementCovarianceMatrix _InvertMatrix(const MeasurementCovarianceMatrix& matrix) const override {return MeasurementCovarianceMatrix{-1.0f};} //not used
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b084      	sub	sp, #16
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	60f8      	str	r0, [r7, #12]
 80140ba:	60b9      	str	r1, [r7, #8]
 80140bc:	607a      	str	r2, [r7, #4]
 80140be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7f9 fd5f 	bl	800db86 <_ZN3Mat6MatrixILt6ELt6EEC1Ef>
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <_ZN12_GLOBAL__N_13sgnEf>:
#include <math.h>

namespace
{
	float sgn(float val)
	{
 80140d0:	b480      	push	{r7}
 80140d2:	b083      	sub	sp, #12
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	ed87 0a01 	vstr	s0, [r7, #4]
		return ((0.0f < val) - (0.0f > val));
 80140da:	edd7 7a01 	vldr	s15, [r7, #4]
 80140de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80140e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e6:	bfcc      	ite	gt
 80140e8:	2301      	movgt	r3, #1
 80140ea:	2300      	movle	r3, #0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	461a      	mov	r2, r3
 80140f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80140f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80140f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fc:	bf4c      	ite	mi
 80140fe:	2301      	movmi	r3, #1
 8014100:	2300      	movpl	r3, #0
 8014102:	b2db      	uxtb	r3, r3
 8014104:	1ad3      	subs	r3, r2, r3
 8014106:	ee07 3a90 	vmov	s15, r3
 801410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 801410e:	eeb0 0a67 	vmov.f32	s0, s15
 8014112:	370c      	adds	r7, #12
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr

0801411c <_ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
const V_Vector<3> _r{{0.0f, 12.10f, -47.2f}};
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};

void OrientationEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
 8014128:	ed87 0a00 	vstr	s0, [r7]
	float norm_1 = 1.0f / _state.Norm();
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	3304      	adds	r3, #4
 8014130:	4618      	mov	r0, r3
 8014132:	f002 f902 	bl	801633a <_ZNK3Mat8V_VectorILt4EE4NormEv>
 8014136:	eeb0 7a40 	vmov.f32	s14, s0
 801413a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801413e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014142:	edc7 7a05 	vstr	s15, [r7, #20]
	_state*= norm_1;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	3304      	adds	r3, #4
 801414a:	ed97 0a05 	vldr	s0, [r7, #20]
 801414e:	4618      	mov	r0, r3
 8014150:	f002 f917 	bl	8016382 <_ZN3Mat6MatrixILt4ELt1EEmLEf>
	_UpdateAcc(meassurementVec, meassurementCov);
 8014154:	687a      	ldr	r2, [r7, #4]
 8014156:	68b9      	ldr	r1, [r7, #8]
 8014158:	68f8      	ldr	r0, [r7, #12]
 801415a:	f000 fa07 	bl	801456c <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_UpdateMag(meassurementVec, meassurementCov);
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	68b9      	ldr	r1, [r7, #8]
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f000 fd7a 	bl	8014c5c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_time = time;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	683a      	ldr	r2, [r7, #0]
 801416c:	655a      	str	r2, [r3, #84]	; 0x54
}
 801416e:	bf00      	nop
 8014170:	3718      	adds	r7, #24
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}

08014176 <_ZN10Algorithms14OrientationEKF10InitialiseERKN3Mat6MatrixILt3ELt1EEES5_f>:

void OrientationEKF::Initialise(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 8014176:	b5b0      	push	{r4, r5, r7, lr}
 8014178:	ed2d 8b02 	vpush	{d8}
 801417c:	b0a4      	sub	sp, #144	; 0x90
 801417e:	af00      	add	r7, sp, #0
 8014180:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014182:	64b9      	str	r1, [r7, #72]	; 0x48
 8014184:	647a      	str	r2, [r7, #68]	; 0x44
 8014186:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float ax{acc(0,0)}, ay{acc(1,0)}, az{acc(2,0)};
 801418a:	2200      	movs	r2, #0
 801418c:	2100      	movs	r1, #0
 801418e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014190:	f7fa f997 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8014194:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
 8014198:	2200      	movs	r2, #0
 801419a:	2101      	movs	r1, #1
 801419c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801419e:	f7fa f990 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80141a2:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
 80141a6:	2200      	movs	r2, #0
 80141a8:	2102      	movs	r1, #2
 80141aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80141ac:	f7fa f989 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80141b0:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
	float mx{mag(0,0)}, my{mag(1,0)}, mz{mag(2,0)};
 80141b4:	2200      	movs	r2, #0
 80141b6:	2100      	movs	r1, #0
 80141b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80141ba:	f7fa f982 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80141be:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
 80141c2:	2200      	movs	r2, #0
 80141c4:	2101      	movs	r1, #1
 80141c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80141c8:	f7fa f97b 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80141cc:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
 80141d0:	2200      	movs	r2, #0
 80141d2:	2102      	movs	r1, #2
 80141d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80141d6:	f7fa f974 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 80141da:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78

	float amx{ay*mz - az*my};
 80141de:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80141e2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80141e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80141ea:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80141ee:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80141f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80141f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141fa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float amy{az*mx - ax*mz};
 80141fe:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8014202:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014206:	ee27 7a27 	vmul.f32	s14, s14, s15
 801420a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 801420e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8014212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014216:	ee77 7a67 	vsub.f32	s15, s14, s15
 801421a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float amz{ax*my - ay*mx};
 801421e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8014222:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8014226:	ee27 7a27 	vmul.f32	s14, s14, s15
 801422a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 801422e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014236:	ee77 7a67 	vsub.f32	s15, s14, s15
 801423a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	float amax{amy*az - amz*ay};
 801423e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8014242:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014246:	ee27 7a27 	vmul.f32	s14, s14, s15
 801424a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 801424e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014256:	ee77 7a67 	vsub.f32	s15, s14, s15
 801425a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float amay{amz*ax - amx*az};
 801425e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8014262:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014266:	ee27 7a27 	vmul.f32	s14, s14, s15
 801426a:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 801426e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014276:	ee77 7a67 	vsub.f32	s15, s14, s15
 801427a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float amaz{amx*ay - amy*ax};
 801427e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8014282:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014286:	ee27 7a27 	vmul.f32	s14, s14, s15
 801428a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 801428e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014296:	ee77 7a67 	vsub.f32	s15, s14, s15
 801429a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	float ad = 1.0f / sqrt(ax*ax + ay*ay +az*az);
 801429e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80142a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80142a6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80142aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80142ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80142b2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80142b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80142ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142be:	eeb0 0a67 	vmov.f32	s0, s15
 80142c2:	f7fc fd77 	bl	8010db4 <_ZSt4sqrtf>
 80142c6:	eeb0 7a40 	vmov.f32	s14, s0
 80142ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80142ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142d2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	ax *= ad; ay *= ad; az *= ad;
 80142d6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80142da:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80142de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142e2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 80142e6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80142ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80142ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142f2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 80142f6:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80142fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80142fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014302:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	float amd = 1.0f / sqrt(amx*amx + amy*amy +amz*amz);
 8014306:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801430a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801430e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8014312:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014316:	ee37 7a27 	vadd.f32	s14, s14, s15
 801431a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801431e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014326:	eeb0 0a67 	vmov.f32	s0, s15
 801432a:	f7fc fd43 	bl	8010db4 <_ZSt4sqrtf>
 801432e:	eeb0 7a40 	vmov.f32	s14, s0
 8014332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801433a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	amx *= amd; amy *= amd; amz *= amd;
 801433e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8014342:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014346:	ee67 7a27 	vmul.f32	s15, s14, s15
 801434a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 801434e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8014352:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014356:	ee67 7a27 	vmul.f32	s15, s14, s15
 801435a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 801435e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8014362:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014366:	ee67 7a27 	vmul.f32	s15, s14, s15
 801436a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	float amad = 1.0f / sqrt(amax*amax + amay*amay +amaz*amaz);
 801436e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8014372:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014376:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801437a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801437e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014382:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014386:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801438a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801438e:	eeb0 0a67 	vmov.f32	s0, s15
 8014392:	f7fc fd0f 	bl	8010db4 <_ZSt4sqrtf>
 8014396:	eeb0 7a40 	vmov.f32	s14, s0
 801439a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801439e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80143a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	amax *= amad; amay *= amad; amaz *= amad;
 80143a6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80143aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80143ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143b2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 80143b6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80143ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80143be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143c2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 80143c6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80143ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80143ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143d2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	_state(0) = 0.5f * sqrt(amax + amy + az + 1.0f);
 80143d6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80143da:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80143de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80143e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80143ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143f2:	eeb0 0a67 	vmov.f32	s0, s15
 80143f6:	f7fc fcdd 	bl	8010db4 <_ZSt4sqrtf>
 80143fa:	eeb0 8a40 	vmov.f32	s16, s0
 80143fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014400:	3304      	adds	r3, #4
 8014402:	2100      	movs	r1, #0
 8014404:	4618      	mov	r0, r3
 8014406:	f001 ffe8 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801440a:	4603      	mov	r3, r0
 801440c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014410:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014414:	edc3 7a00 	vstr	s15, [r3]
	_state(1) = 0.5f * sgn(amz - ay) * sqrt(amax - amy - az + 1.0f);
 8014418:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801441c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014424:	eeb0 0a67 	vmov.f32	s0, s15
 8014428:	f7ff fe52 	bl	80140d0 <_ZN12_GLOBAL__N_13sgnEf>
 801442c:	eef0 7a40 	vmov.f32	s15, s0
 8014430:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014434:	ee27 8a87 	vmul.f32	s16, s15, s14
 8014438:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801443c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8014440:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014444:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014448:	ee77 7a67 	vsub.f32	s15, s14, s15
 801444c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014454:	eeb0 0a67 	vmov.f32	s0, s15
 8014458:	f7fc fcac 	bl	8010db4 <_ZSt4sqrtf>
 801445c:	eef0 8a40 	vmov.f32	s17, s0
 8014460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014462:	3304      	adds	r3, #4
 8014464:	2101      	movs	r1, #1
 8014466:	4618      	mov	r0, r3
 8014468:	f001 ffb7 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801446c:	4603      	mov	r3, r0
 801446e:	ee68 7a28 	vmul.f32	s15, s16, s17
 8014472:	edc3 7a00 	vstr	s15, [r3]
	_state(2) = 0.5f * sgn(ax - amaz) * sqrt(amy - amax - az + 1.0f);
 8014476:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 801447a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801447e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014482:	eeb0 0a67 	vmov.f32	s0, s15
 8014486:	f7ff fe23 	bl	80140d0 <_ZN12_GLOBAL__N_13sgnEf>
 801448a:	eef0 7a40 	vmov.f32	s15, s0
 801448e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014492:	ee27 8a87 	vmul.f32	s16, s15, s14
 8014496:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801449a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801449e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80144a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80144a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144b2:	eeb0 0a67 	vmov.f32	s0, s15
 80144b6:	f7fc fc7d 	bl	8010db4 <_ZSt4sqrtf>
 80144ba:	eef0 8a40 	vmov.f32	s17, s0
 80144be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144c0:	3304      	adds	r3, #4
 80144c2:	2102      	movs	r1, #2
 80144c4:	4618      	mov	r0, r3
 80144c6:	f001 ff88 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80144ca:	4603      	mov	r3, r0
 80144cc:	ee68 7a28 	vmul.f32	s15, s16, s17
 80144d0:	edc3 7a00 	vstr	s15, [r3]
	_state(3) = 0.5f * sgn(amz - ay) * sqrt(az - amax - amy + 1.0f);
 80144d4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80144d8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80144dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144e0:	eeb0 0a67 	vmov.f32	s0, s15
 80144e4:	f7ff fdf4 	bl	80140d0 <_ZN12_GLOBAL__N_13sgnEf>
 80144e8:	eef0 7a40 	vmov.f32	s15, s0
 80144ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80144f0:	ee27 8a87 	vmul.f32	s16, s15, s14
 80144f4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80144f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80144fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014500:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8014504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014508:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801450c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014510:	eeb0 0a67 	vmov.f32	s0, s15
 8014514:	f7fc fc4e 	bl	8010db4 <_ZSt4sqrtf>
 8014518:	eef0 8a40 	vmov.f32	s17, s0
 801451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801451e:	3304      	adds	r3, #4
 8014520:	2103      	movs	r1, #3
 8014522:	4618      	mov	r0, r3
 8014524:	f001 ff59 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014528:	4603      	mov	r3, r0
 801452a:	ee68 7a28 	vmul.f32	s15, s16, s17
 801452e:	edc3 7a00 	vstr	s15, [r3]
	_time = time;
 8014532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014536:	655a      	str	r2, [r3, #84]	; 0x54
	_stateCovMatrix = Eye<OrientationEKF_stateLen>(1.0f);
 8014538:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801453a:	463b      	mov	r3, r7
 801453c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014540:	4618      	mov	r0, r3
 8014542:	f7f9 fc19 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8014546:	3414      	adds	r4, #20
 8014548:	463d      	mov	r5, r7
 801454a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801454c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801454e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014556:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801455a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801455e:	bf00      	nop
 8014560:	3790      	adds	r7, #144	; 0x90
 8014562:	46bd      	mov	sp, r7
 8014564:	ecbd 8b02 	vpop	{d8}
 8014568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801456c <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void OrientationEKF::_UpdateAcc(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 801456c:	b5b0      	push	{r4, r5, r7, lr}
 801456e:	ed2d 8b02 	vpush	{d8}
 8014572:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8014576:	af00      	add	r7, sp, #0
 8014578:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801457c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014580:	6018      	str	r0, [r3, #0]
 8014582:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014586:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801458a:	6019      	str	r1, [r3, #0]
 801458c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014590:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014594:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 8014596:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801459a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 801459e:	2100      	movs	r1, #0
 80145a0:	6818      	ldr	r0, [r3, #0]
 80145a2:	f7f9 fc8a 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80145a6:	eef0 7a40 	vmov.f32	s15, s0
 80145aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80145ae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80145b2:	edc3 7a00 	vstr	s15, [r3]
 80145b6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80145ba:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80145be:	2101      	movs	r1, #1
 80145c0:	6818      	ldr	r0, [r3, #0]
 80145c2:	f7f9 fc7a 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80145c6:	eef0 7a40 	vmov.f32	s15, s0
 80145ca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80145ce:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80145d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80145d6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80145da:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80145de:	2102      	movs	r1, #2
 80145e0:	6818      	ldr	r0, [r3, #0]
 80145e2:	f7f9 fc6a 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80145e6:	eef0 7a40 	vmov.f32	s15, s0
 80145ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80145ee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80145f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80145f6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80145fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80145fe:	4611      	mov	r1, r2
 8014600:	4618      	mov	r0, r3
 8014602:	f001 fe1e 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	z *= 1.0f / z.Norm();
 8014606:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801460a:	4618      	mov	r0, r3
 801460c:	f001 fe57 	bl	80162be <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8014610:	eeb0 7a40 	vmov.f32	s14, s0
 8014614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801461c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014620:	eeb0 0a67 	vmov.f32	s0, s15
 8014624:	4618      	mov	r0, r3
 8014626:	f001 fee9 	bl	80163fc <_ZN3Mat6MatrixILt3ELt1EEmLEf>
	//[0, 0, 1]
	V_Vector<3> h{{
		2.0f * (_state(1)*_state(3) - _state(0)*_state(2)),
 801462a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801462e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	3304      	adds	r3, #4
 8014636:	2101      	movs	r1, #1
 8014638:	4618      	mov	r0, r3
 801463a:	f001 fece 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801463e:	4603      	mov	r3, r0
 8014640:	ed93 8a00 	vldr	s16, [r3]
 8014644:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014648:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	3304      	adds	r3, #4
 8014650:	2103      	movs	r1, #3
 8014652:	4618      	mov	r0, r3
 8014654:	f001 fec1 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014658:	4603      	mov	r3, r0
 801465a:	edd3 7a00 	vldr	s15, [r3]
 801465e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014662:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014666:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	3304      	adds	r3, #4
 801466e:	2100      	movs	r1, #0
 8014670:	4618      	mov	r0, r3
 8014672:	f001 feb2 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014676:	4603      	mov	r3, r0
 8014678:	edd3 8a00 	vldr	s17, [r3]
 801467c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014680:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	3304      	adds	r3, #4
 8014688:	2102      	movs	r1, #2
 801468a:	4618      	mov	r0, r3
 801468c:	f001 fea5 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014690:	4603      	mov	r3, r0
 8014692:	edd3 7a00 	vldr	s15, [r3]
 8014696:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801469a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801469e:	ee77 7aa7 	vadd.f32	s15, s15, s15
		2.0f * (_state(0)*_state(1) + _state(2)*_state(3)),
		2.0f * (0.5f - _state(1)*_state(1) - _state(2)*_state(2))
	}};
 80146a2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80146a6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80146aa:	edc3 7a00 	vstr	s15, [r3]
		2.0f * (_state(0)*_state(1) + _state(2)*_state(3)),
 80146ae:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80146b2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	3304      	adds	r3, #4
 80146ba:	2100      	movs	r1, #0
 80146bc:	4618      	mov	r0, r3
 80146be:	f001 fe8c 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80146c2:	4603      	mov	r3, r0
 80146c4:	ed93 8a00 	vldr	s16, [r3]
 80146c8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80146cc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	3304      	adds	r3, #4
 80146d4:	2101      	movs	r1, #1
 80146d6:	4618      	mov	r0, r3
 80146d8:	f001 fe7f 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80146dc:	4603      	mov	r3, r0
 80146de:	edd3 7a00 	vldr	s15, [r3]
 80146e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80146e6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80146ea:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	3304      	adds	r3, #4
 80146f2:	2102      	movs	r1, #2
 80146f4:	4618      	mov	r0, r3
 80146f6:	f001 fe70 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80146fa:	4603      	mov	r3, r0
 80146fc:	edd3 8a00 	vldr	s17, [r3]
 8014700:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014704:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	3304      	adds	r3, #4
 801470c:	2103      	movs	r1, #3
 801470e:	4618      	mov	r0, r3
 8014710:	f001 fe63 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014714:	4603      	mov	r3, r0
 8014716:	edd3 7a00 	vldr	s15, [r3]
 801471a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801471e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014722:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014726:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801472a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801472e:	edc3 7a01 	vstr	s15, [r3, #4]
		2.0f * (0.5f - _state(1)*_state(1) - _state(2)*_state(2))
 8014732:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014736:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	3304      	adds	r3, #4
 801473e:	2101      	movs	r1, #1
 8014740:	4618      	mov	r0, r3
 8014742:	f001 fe4a 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014746:	4603      	mov	r3, r0
 8014748:	ed93 8a00 	vldr	s16, [r3]
 801474c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014750:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	3304      	adds	r3, #4
 8014758:	2101      	movs	r1, #1
 801475a:	4618      	mov	r0, r3
 801475c:	f001 fe3d 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014760:	4603      	mov	r3, r0
 8014762:	edd3 7a00 	vldr	s15, [r3]
 8014766:	ee68 7a27 	vmul.f32	s15, s16, s15
 801476a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801476e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014772:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014776:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	3304      	adds	r3, #4
 801477e:	2102      	movs	r1, #2
 8014780:	4618      	mov	r0, r3
 8014782:	f001 fe2a 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014786:	4603      	mov	r3, r0
 8014788:	edd3 8a00 	vldr	s17, [r3]
 801478c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014790:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	3304      	adds	r3, #4
 8014798:	2102      	movs	r1, #2
 801479a:	4618      	mov	r0, r3
 801479c:	f001 fe1d 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80147a0:	4603      	mov	r3, r0
 80147a2:	edd3 7a00 	vldr	s15, [r3]
 80147a6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80147aa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80147ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 80147b2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80147b6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80147ba:	edc3 7a02 	vstr	s15, [r3, #8]
 80147be:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80147c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80147c6:	4611      	mov	r1, r2
 80147c8:	4618      	mov	r0, r3
 80147ca:	f001 fd3a 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	Matrix<3, OrientationEKF_stateLen> H{{
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 80147ce:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80147d2:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3304      	adds	r3, #4
 80147da:	2102      	movs	r1, #2
 80147dc:	4618      	mov	r0, r3
 80147de:	f001 fdfc 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80147e2:	4603      	mov	r3, r0
 80147e4:	edd3 7a00 	vldr	s15, [r3]
 80147e8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80147ec:	ee67 7a87 	vmul.f32	s15, s15, s14
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
	}};
 80147f0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80147f4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80147f8:	edc3 7a00 	vstr	s15, [r3]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 80147fc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014800:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	3304      	adds	r3, #4
 8014808:	2103      	movs	r1, #3
 801480a:	4618      	mov	r0, r3
 801480c:	f001 fde5 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014810:	4603      	mov	r3, r0
 8014812:	edd3 7a00 	vldr	s15, [r3]
 8014816:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 801481a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801481e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014822:	edc3 7a01 	vstr	s15, [r3, #4]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014826:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801482a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	3304      	adds	r3, #4
 8014832:	2100      	movs	r1, #0
 8014834:	4618      	mov	r0, r3
 8014836:	f001 fdd0 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801483a:	4603      	mov	r3, r0
 801483c:	edd3 7a00 	vldr	s15, [r3]
 8014840:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8014844:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 8014848:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801484c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014850:	edc3 7a02 	vstr	s15, [r3, #8]
		-2.0f*_state(2), 2.0f*_state(3), -2.0f*_state(0), 2.0f*_state(1),
 8014854:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014858:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	3304      	adds	r3, #4
 8014860:	2101      	movs	r1, #1
 8014862:	4618      	mov	r0, r3
 8014864:	f001 fdb9 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014868:	4603      	mov	r3, r0
 801486a:	edd3 7a00 	vldr	s15, [r3]
 801486e:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014872:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014876:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801487a:	edc3 7a03 	vstr	s15, [r3, #12]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 801487e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014882:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	3304      	adds	r3, #4
 801488a:	2101      	movs	r1, #1
 801488c:	4618      	mov	r0, r3
 801488e:	f001 fda4 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014892:	4603      	mov	r3, r0
 8014894:	edd3 7a00 	vldr	s15, [r3]
 8014898:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 801489c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148a0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80148a4:	edc3 7a04 	vstr	s15, [r3, #16]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 80148a8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148ac:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	3304      	adds	r3, #4
 80148b4:	2100      	movs	r1, #0
 80148b6:	4618      	mov	r0, r3
 80148b8:	f001 fd8f 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80148bc:	4603      	mov	r3, r0
 80148be:	edd3 7a00 	vldr	s15, [r3]
 80148c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 80148c6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148ca:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80148ce:	edc3 7a05 	vstr	s15, [r3, #20]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 80148d2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148d6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3304      	adds	r3, #4
 80148de:	2103      	movs	r1, #3
 80148e0:	4618      	mov	r0, r3
 80148e2:	f001 fd7a 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80148e6:	4603      	mov	r3, r0
 80148e8:	edd3 7a00 	vldr	s15, [r3]
 80148ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 80148f0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80148f4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80148f8:	edc3 7a06 	vstr	s15, [r3, #24]
		2.0f*_state(1), 2.0f*_state(0), 2.0f*_state(3), 2.0f*_state(2),
 80148fc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014900:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	3304      	adds	r3, #4
 8014908:	2102      	movs	r1, #2
 801490a:	4618      	mov	r0, r3
 801490c:	f001 fd65 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014910:	4603      	mov	r3, r0
 8014912:	edd3 7a00 	vldr	s15, [r3]
 8014916:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 801491a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801491e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8014922:	edc3 7a07 	vstr	s15, [r3, #28]
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014926:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801492a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	3304      	adds	r3, #4
 8014932:	2100      	movs	r1, #0
 8014934:	4618      	mov	r0, r3
 8014936:	f001 fd50 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801493a:	4603      	mov	r3, r0
 801493c:	edd3 7a00 	vldr	s15, [r3]
 8014940:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 8014944:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014948:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801494c:	edc3 7a08 	vstr	s15, [r3, #32]
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 8014950:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014954:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	3304      	adds	r3, #4
 801495c:	2101      	movs	r1, #1
 801495e:	4618      	mov	r0, r3
 8014960:	f001 fd3b 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014964:	4603      	mov	r3, r0
 8014966:	edd3 7a00 	vldr	s15, [r3]
 801496a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801496e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 8014972:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014976:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801497a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 801497e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014982:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3304      	adds	r3, #4
 801498a:	2102      	movs	r1, #2
 801498c:	4618      	mov	r0, r3
 801498e:	f001 fd24 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014992:	4603      	mov	r3, r0
 8014994:	edd3 7a00 	vldr	s15, [r3]
 8014998:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801499c:	ee67 7a87 	vmul.f32	s15, s15, s14
	}};
 80149a0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149a4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80149a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		2.0f*_state(0), -2.0f*_state(1), -2.0f*_state(2), 2.0f*_state(3)
 80149ac:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149b0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	3304      	adds	r3, #4
 80149b8:	2103      	movs	r1, #3
 80149ba:	4618      	mov	r0, r3
 80149bc:	f001 fd0d 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80149c0:	4603      	mov	r3, r0
 80149c2:	edd3 7a00 	vldr	s15, [r3]
 80149c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	}};
 80149ca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80149ce:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80149d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80149d6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80149da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fe fcf7 	bl	80133d4 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
	static Matrix<3, 3> R{0.0f};
 80149e6:	4b9a      	ldr	r3, [pc, #616]	; (8014c50 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	f3bf 8f5b 	dmb	ish
 80149ee:	f003 0301 	and.w	r3, r3, #1
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	bf0c      	ite	eq
 80149f6:	2301      	moveq	r3, #1
 80149f8:	2300      	movne	r3, #0
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d012      	beq.n	8014a26 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x4ba>
 8014a00:	4893      	ldr	r0, [pc, #588]	; (8014c50 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 8014a02:	f008 fc79 	bl	801d2f8 <__cxa_guard_acquire>
 8014a06:	4603      	mov	r3, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	bf14      	ite	ne
 8014a0c:	2301      	movne	r3, #1
 8014a0e:	2300      	moveq	r3, #0
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d007      	beq.n	8014a26 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x4ba>
 8014a16:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8014c54 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e8>
 8014a1a:	488f      	ldr	r0, [pc, #572]	; (8014c58 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014a1c:	f7f9 fac7 	bl	800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8014a20:	488b      	ldr	r0, [pc, #556]	; (8014c50 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6e4>)
 8014a22:	f008 fc75 	bl	801d310 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8014a26:	2200      	movs	r2, #0
 8014a28:	2100      	movs	r1, #0
 8014a2a:	488b      	ldr	r0, [pc, #556]	; (8014c58 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014a2c:	f7f9 fadc 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014a30:	4604      	mov	r4, r0
 8014a32:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a36:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	2100      	movs	r1, #0
 8014a3e:	6818      	ldr	r0, [r3, #0]
 8014a40:	f7fb fcc3 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014a44:	eef0 7a40 	vmov.f32	s15, s0
 8014a48:	edc4 7a00 	vstr	s15, [r4]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	2101      	movs	r1, #1
 8014a50:	4881      	ldr	r0, [pc, #516]	; (8014c58 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014a52:	f7f9 fac9 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014a56:	4604      	mov	r4, r0
 8014a58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a5c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014a60:	2201      	movs	r2, #1
 8014a62:	2101      	movs	r1, #1
 8014a64:	6818      	ldr	r0, [r3, #0]
 8014a66:	f7fb fcb0 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014a6a:	eef0 7a40 	vmov.f32	s15, s0
 8014a6e:	edc4 7a00 	vstr	s15, [r4]
 8014a72:	2202      	movs	r2, #2
 8014a74:	2102      	movs	r1, #2
 8014a76:	4878      	ldr	r0, [pc, #480]	; (8014c58 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014a78:	f7f9 fab6 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a82:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014a86:	2202      	movs	r2, #2
 8014a88:	2102      	movs	r1, #2
 8014a8a:	6818      	ldr	r0, [r3, #0]
 8014a8c:	f7fb fc9d 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8014a90:	eef0 7a40 	vmov.f32	s15, s0
 8014a94:	edc4 7a00 	vstr	s15, [r4]
	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8014a98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014a9c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f103 0214 	add.w	r2, r3, #20
 8014aa6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014aaa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8014aae:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7fe fca5 	bl	8013402 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8014ab8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014abc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8014ac0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014ac4:	4611      	mov	r1, r2
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fe fcae 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8014acc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ad0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014ad4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8014ad8:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7fe fcd3 	bl	8013488 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8014ae2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ae6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8014aea:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8014aee:	4a5a      	ldr	r2, [pc, #360]	; (8014c58 <_ZN10Algorithms14OrientationEKF10_UpdateAccERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x6ec>)
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7fe fcdc 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8014af6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014afa:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f103 0414 	add.w	r4, r3, #20
 8014b04:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014b0c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014b10:	4611      	mov	r1, r2
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7fe fc88 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8014b18:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b1c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014b20:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8014b24:	4621      	mov	r1, r4
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fe fcda 	bl	80134e0 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 8014b2c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b30:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 8014b34:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8014b38:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b3c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b40:	6819      	ldr	r1, [r3, #0]
 8014b42:	f001 f953 	bl	8015dec <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8014b46:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b4a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8014b4e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014b52:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fe fcd5 	bl	8013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8014b5c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014b60:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	1d1c      	adds	r4, r3, #4
 8014b68:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8014b6c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014b70:	4611      	mov	r1, r2
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fc f80d 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8014b78:	eef0 6a40 	vmov.f32	s13, s0
 8014b7c:	eeb0 7a60 	vmov.f32	s14, s1
 8014b80:	eef0 7a41 	vmov.f32	s15, s2
 8014b84:	edc7 6a93 	vstr	s13, [r7, #588]	; 0x24c
 8014b88:	ed87 7a94 	vstr	s14, [r7, #592]	; 0x250
 8014b8c:	edc7 7a95 	vstr	s15, [r7, #596]	; 0x254
 8014b90:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8014b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014b98:	4611      	mov	r1, r2
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fe fcc6 	bl	801352c <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8014ba0:	eeb0 6a40 	vmov.f32	s12, s0
 8014ba4:	eef0 6a60 	vmov.f32	s13, s1
 8014ba8:	eeb0 7a41 	vmov.f32	s14, s2
 8014bac:	eef0 7a61 	vmov.f32	s15, s3
 8014bb0:	ed87 6a8f 	vstr	s12, [r7, #572]	; 0x23c
 8014bb4:	edc7 6a90 	vstr	s13, [r7, #576]	; 0x240
 8014bb8:	ed87 7a91 	vstr	s14, [r7, #580]	; 0x244
 8014bbc:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
 8014bc0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f7fa fba3 	bl	800f312 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<OrientationEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8014bcc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8014bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f9 f8cf 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8014bda:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8014bde:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8014be2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fe fb9e 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8014bec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8014bf0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8014bf4:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7fa fbd2 	bl	800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8014bfe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c02:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f103 0214 	add.w	r2, r3, #20
 8014c0c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c10:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014c14:	681c      	ldr	r4, [r3, #0]
 8014c16:	463b      	mov	r3, r7
 8014c18:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fa fa3d 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 8014c22:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c26:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8014c2a:	3414      	adds	r4, #20
 8014c2c:	461d      	mov	r5, r3
 8014c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014c42:	bf00      	nop
 8014c44:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	ecbd 8b02 	vpop	{d8}
 8014c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8014c50:	24009538 	.word	0x24009538
 8014c54:	00000000 	.word	0x00000000
 8014c58:	24009514 	.word	0x24009514

08014c5c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void OrientationEKF::_UpdateMag(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8014c5c:	b5b0      	push	{r4, r5, r7, lr}
 8014c5e:	ed2d 8b04 	vpush	{d8-d9}
 8014c62:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c6c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014c70:	6018      	str	r0, [r3, #0]
 8014c72:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c76:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014c7a:	6019      	str	r1, [r3, #0]
 8014c7c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c80:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8014c84:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(3), meassurementVec(4), meassurementVec(5)}};
 8014c86:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c8a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014c8e:	2103      	movs	r1, #3
 8014c90:	6818      	ldr	r0, [r3, #0]
 8014c92:	f7f9 f912 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8014c96:	eef0 7a40 	vmov.f32	s15, s0
 8014c9a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014c9e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014ca2:	edc3 7a00 	vstr	s15, [r3]
 8014ca6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014caa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014cae:	2104      	movs	r1, #4
 8014cb0:	6818      	ldr	r0, [r3, #0]
 8014cb2:	f7f9 f902 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8014cb6:	eef0 7a40 	vmov.f32	s15, s0
 8014cba:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014cbe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014cc2:	edc3 7a01 	vstr	s15, [r3, #4]
 8014cc6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014cca:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8014cce:	2105      	movs	r1, #5
 8014cd0:	6818      	ldr	r0, [r3, #0]
 8014cd2:	f7f9 f8f2 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8014cd6:	eef0 7a40 	vmov.f32	s15, s0
 8014cda:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014cde:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8014ce2:	edc3 7a02 	vstr	s15, [r3, #8]
 8014ce6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8014cea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014cee:	4611      	mov	r1, r2
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f001 faa6 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	z *= 1.0f / z.Norm();
 8014cf6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f001 fadf 	bl	80162be <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8014d00:	eeb0 7a40 	vmov.f32	s14, s0
 8014d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d0c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014d10:	eeb0 0a67 	vmov.f32	s0, s15
 8014d14:	4618      	mov	r0, r3
 8014d16:	f001 fb71 	bl	80163fc <_ZN3Mat6MatrixILt3ELt1EEmLEf>
	V_Vector<3> h{{
		(r2(1)*(_state(0)*_state(3) + _state(1)*_state(2)) + r2(2)*(_state(1)*_state(3) - _state(0)*_state(2))),
 8014d1a:	2101      	movs	r1, #1
 8014d1c:	48ec      	ldr	r0, [pc, #944]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014d1e:	f001 fa9f 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014d22:	eeb0 9a40 	vmov.f32	s18, s0
 8014d26:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d2a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	3304      	adds	r3, #4
 8014d32:	2100      	movs	r1, #0
 8014d34:	4618      	mov	r0, r3
 8014d36:	f001 fb50 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	ed93 8a00 	vldr	s16, [r3]
 8014d40:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d44:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	3304      	adds	r3, #4
 8014d4c:	2103      	movs	r1, #3
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f001 fb43 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014d54:	4603      	mov	r3, r0
 8014d56:	edd3 7a00 	vldr	s15, [r3]
 8014d5a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014d5e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d62:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	3304      	adds	r3, #4
 8014d6a:	2101      	movs	r1, #1
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f001 fb34 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014d72:	4603      	mov	r3, r0
 8014d74:	edd3 8a00 	vldr	s17, [r3]
 8014d78:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014d7c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3304      	adds	r3, #4
 8014d84:	2102      	movs	r1, #2
 8014d86:	4618      	mov	r0, r3
 8014d88:	f001 fb27 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	edd3 7a00 	vldr	s15, [r3]
 8014d92:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014d96:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014d9a:	ee29 8a27 	vmul.f32	s16, s18, s15
 8014d9e:	2102      	movs	r1, #2
 8014da0:	48cb      	ldr	r0, [pc, #812]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014da2:	f001 fa5d 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014da6:	eef0 9a40 	vmov.f32	s19, s0
 8014daa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014dae:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	3304      	adds	r3, #4
 8014db6:	2101      	movs	r1, #1
 8014db8:	4618      	mov	r0, r3
 8014dba:	f001 fb0e 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	edd3 8a00 	vldr	s17, [r3]
 8014dc4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014dc8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	3304      	adds	r3, #4
 8014dd0:	2103      	movs	r1, #3
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f001 fb01 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	edd3 7a00 	vldr	s15, [r3]
 8014dde:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014de2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014de6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	3304      	adds	r3, #4
 8014dee:	2100      	movs	r1, #0
 8014df0:	4618      	mov	r0, r3
 8014df2:	f001 faf2 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014df6:	4603      	mov	r3, r0
 8014df8:	ed93 9a00 	vldr	s18, [r3]
 8014dfc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e00:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	3304      	adds	r3, #4
 8014e08:	2102      	movs	r1, #2
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f001 fae5 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014e10:	4603      	mov	r3, r0
 8014e12:	edd3 7a00 	vldr	s15, [r3]
 8014e16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014e1a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014e1e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8014e22:	ee78 7a27 	vadd.f32	s15, s16, s15
		(r2(1)*(0.5f - _state(1)*_state(1) - _state(3)*_state(3)) + r2(2)*(_state(0)*_state(1) + _state(2)*_state(3))),
		(r2(1)*(_state(2)*_state(3) - _state(0)*_state(1)) + r2(2)*(0.5f - _state(1)*_state(1) - _state(2)*_state(2)))
	}};
 8014e26:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e2a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014e2e:	edc3 7a00 	vstr	s15, [r3]
		(r2(1)*(0.5f - _state(1)*_state(1) - _state(3)*_state(3)) + r2(2)*(_state(0)*_state(1) + _state(2)*_state(3))),
 8014e32:	2101      	movs	r1, #1
 8014e34:	48a6      	ldr	r0, [pc, #664]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014e36:	f001 fa13 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014e3a:	eeb0 9a40 	vmov.f32	s18, s0
 8014e3e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e42:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	2101      	movs	r1, #1
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f001 fac4 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014e52:	4603      	mov	r3, r0
 8014e54:	ed93 8a00 	vldr	s16, [r3]
 8014e58:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e5c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	3304      	adds	r3, #4
 8014e64:	2101      	movs	r1, #1
 8014e66:	4618      	mov	r0, r3
 8014e68:	f001 fab7 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	edd3 7a00 	vldr	s15, [r3]
 8014e72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014e76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014e7a:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014e7e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e82:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	3304      	adds	r3, #4
 8014e8a:	2103      	movs	r1, #3
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f001 faa4 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014e92:	4603      	mov	r3, r0
 8014e94:	edd3 8a00 	vldr	s17, [r3]
 8014e98:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014e9c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	2103      	movs	r1, #3
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f001 fa97 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014eac:	4603      	mov	r3, r0
 8014eae:	edd3 7a00 	vldr	s15, [r3]
 8014eb2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014eb6:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014eba:	ee29 8a27 	vmul.f32	s16, s18, s15
 8014ebe:	2102      	movs	r1, #2
 8014ec0:	4883      	ldr	r0, [pc, #524]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014ec2:	f001 f9cd 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014ec6:	eef0 9a40 	vmov.f32	s19, s0
 8014eca:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ece:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	3304      	adds	r3, #4
 8014ed6:	2100      	movs	r1, #0
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f001 fa7e 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	edd3 8a00 	vldr	s17, [r3]
 8014ee4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014ee8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f001 fa71 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	edd3 7a00 	vldr	s15, [r3]
 8014efe:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014f02:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f06:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	2102      	movs	r1, #2
 8014f10:	4618      	mov	r0, r3
 8014f12:	f001 fa62 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014f16:	4603      	mov	r3, r0
 8014f18:	ed93 9a00 	vldr	s18, [r3]
 8014f1c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f20:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	3304      	adds	r3, #4
 8014f28:	2103      	movs	r1, #3
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f001 fa55 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014f30:	4603      	mov	r3, r0
 8014f32:	edd3 7a00 	vldr	s15, [r3]
 8014f36:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014f3a:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8014f3e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8014f42:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8014f46:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f4a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014f4e:	edc3 7a01 	vstr	s15, [r3, #4]
		(r2(1)*(_state(2)*_state(3) - _state(0)*_state(1)) + r2(2)*(0.5f - _state(1)*_state(1) - _state(2)*_state(2)))
 8014f52:	2101      	movs	r1, #1
 8014f54:	485e      	ldr	r0, [pc, #376]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014f56:	f001 f983 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014f5a:	eeb0 9a40 	vmov.f32	s18, s0
 8014f5e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f62:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	3304      	adds	r3, #4
 8014f6a:	2102      	movs	r1, #2
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f001 fa34 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014f72:	4603      	mov	r3, r0
 8014f74:	ed93 8a00 	vldr	s16, [r3]
 8014f78:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f7c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	3304      	adds	r3, #4
 8014f84:	2103      	movs	r1, #3
 8014f86:	4618      	mov	r0, r3
 8014f88:	f001 fa27 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	edd3 7a00 	vldr	s15, [r3]
 8014f92:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014f96:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014f9a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f001 fa18 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014faa:	4603      	mov	r3, r0
 8014fac:	edd3 8a00 	vldr	s17, [r3]
 8014fb0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014fb4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	3304      	adds	r3, #4
 8014fbc:	2101      	movs	r1, #1
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f001 fa0b 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	edd3 7a00 	vldr	s15, [r3]
 8014fca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014fce:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014fd2:	ee29 8a27 	vmul.f32	s16, s18, s15
 8014fd6:	2102      	movs	r1, #2
 8014fd8:	483d      	ldr	r0, [pc, #244]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8014fda:	f001 f941 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8014fde:	eef0 9a40 	vmov.f32	s19, s0
 8014fe2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8014fe6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	3304      	adds	r3, #4
 8014fee:	2101      	movs	r1, #1
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f001 f9f2 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	edd3 8a00 	vldr	s17, [r3]
 8014ffc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015000:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	3304      	adds	r3, #4
 8015008:	2101      	movs	r1, #1
 801500a:	4618      	mov	r0, r3
 801500c:	f001 f9e5 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015010:	4603      	mov	r3, r0
 8015012:	edd3 7a00 	vldr	s15, [r3]
 8015016:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801501a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801501e:	ee77 8a67 	vsub.f32	s17, s14, s15
 8015022:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015026:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	3304      	adds	r3, #4
 801502e:	2102      	movs	r1, #2
 8015030:	4618      	mov	r0, r3
 8015032:	f001 f9d2 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015036:	4603      	mov	r3, r0
 8015038:	ed93 9a00 	vldr	s18, [r3]
 801503c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015040:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	3304      	adds	r3, #4
 8015048:	2102      	movs	r1, #2
 801504a:	4618      	mov	r0, r3
 801504c:	f001 f9c5 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015050:	4603      	mov	r3, r0
 8015052:	edd3 7a00 	vldr	s15, [r3]
 8015056:	ee69 7a27 	vmul.f32	s15, s18, s15
 801505a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801505e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8015062:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015066:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801506a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801506e:	edc3 7a02 	vstr	s15, [r3, #8]
 8015072:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8015076:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801507a:	4611      	mov	r1, r2
 801507c:	4618      	mov	r0, r3
 801507e:	f001 f8e0 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	Matrix<3, OrientationEKF_stateLen> H{{
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 8015082:	2101      	movs	r1, #1
 8015084:	4812      	ldr	r0, [pc, #72]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 8015086:	f001 f8eb 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801508a:	eeb0 8a40 	vmov.f32	s16, s0
 801508e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015092:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	3304      	adds	r3, #4
 801509a:	2103      	movs	r1, #3
 801509c:	4618      	mov	r0, r3
 801509e:	f001 f99c 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80150a2:	4603      	mov	r3, r0
 80150a4:	edd3 7a00 	vldr	s15, [r3]
 80150a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150ac:	2102      	movs	r1, #2
 80150ae:	4808      	ldr	r0, [pc, #32]	; (80150d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x474>)
 80150b0:	f001 f8d6 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80150b4:	eef0 8a40 	vmov.f32	s17, s0
 80150b8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150bc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	3304      	adds	r3, #4
 80150c4:	2102      	movs	r1, #2
 80150c6:	4618      	mov	r0, r3
 80150c8:	f001 f987 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80150cc:	4603      	mov	r3, r0
 80150ce:	e001      	b.n	80150d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x478>
 80150d0:	24009508 	.word	0x24009508
 80150d4:	edd3 7a00 	vldr	s15, [r3]
 80150d8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80150dc:	ee78 7a67 	vsub.f32	s15, s16, s15
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
	}};
 80150e0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80150e8:	edc3 7a00 	vstr	s15, [r3]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 80150ec:	2101      	movs	r1, #1
 80150ee:	48eb      	ldr	r0, [pc, #940]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80150f0:	f001 f8b6 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80150f4:	eeb0 8a40 	vmov.f32	s16, s0
 80150f8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80150fc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	3304      	adds	r3, #4
 8015104:	2102      	movs	r1, #2
 8015106:	4618      	mov	r0, r3
 8015108:	f001 f967 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801510c:	4603      	mov	r3, r0
 801510e:	edd3 7a00 	vldr	s15, [r3]
 8015112:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015116:	2102      	movs	r1, #2
 8015118:	48e0      	ldr	r0, [pc, #896]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801511a:	f001 f8a1 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801511e:	eef0 8a40 	vmov.f32	s17, s0
 8015122:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015126:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	3304      	adds	r3, #4
 801512e:	2103      	movs	r1, #3
 8015130:	4618      	mov	r0, r3
 8015132:	f001 f952 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015136:	4603      	mov	r3, r0
 8015138:	edd3 7a00 	vldr	s15, [r3]
 801513c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015140:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015144:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015148:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801514c:	edc3 7a01 	vstr	s15, [r3, #4]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 8015150:	2101      	movs	r1, #1
 8015152:	48d2      	ldr	r0, [pc, #840]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015154:	f001 f884 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015158:	eeb0 8a40 	vmov.f32	s16, s0
 801515c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015160:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	3304      	adds	r3, #4
 8015168:	2101      	movs	r1, #1
 801516a:	4618      	mov	r0, r3
 801516c:	f001 f935 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015170:	4603      	mov	r3, r0
 8015172:	edd3 7a00 	vldr	s15, [r3]
 8015176:	ee28 8a27 	vmul.f32	s16, s16, s15
 801517a:	2102      	movs	r1, #2
 801517c:	48c7      	ldr	r0, [pc, #796]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801517e:	f001 f86f 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015182:	eef0 8a40 	vmov.f32	s17, s0
 8015186:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801518a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	3304      	adds	r3, #4
 8015192:	2100      	movs	r1, #0
 8015194:	4618      	mov	r0, r3
 8015196:	f001 f920 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801519a:	4603      	mov	r3, r0
 801519c:	edd3 7a00 	vldr	s15, [r3]
 80151a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80151a4:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 80151a8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151ac:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80151b0:	edc3 7a02 	vstr	s15, [r3, #8]
		(r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3)), (r2(1)*_state(1) - r2(2)*_state(0)), (r2(1)*_state(0) + r2(2)*_state(1)),
 80151b4:	2101      	movs	r1, #1
 80151b6:	48b9      	ldr	r0, [pc, #740]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80151b8:	f001 f852 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80151bc:	eeb0 8a40 	vmov.f32	s16, s0
 80151c0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151c4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	3304      	adds	r3, #4
 80151cc:	2100      	movs	r1, #0
 80151ce:	4618      	mov	r0, r3
 80151d0:	f001 f903 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80151d4:	4603      	mov	r3, r0
 80151d6:	edd3 7a00 	vldr	s15, [r3]
 80151da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80151de:	2102      	movs	r1, #2
 80151e0:	48ae      	ldr	r0, [pc, #696]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80151e2:	f001 f83d 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80151e6:	eef0 8a40 	vmov.f32	s17, s0
 80151ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80151ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	3304      	adds	r3, #4
 80151f6:	2101      	movs	r1, #1
 80151f8:	4618      	mov	r0, r3
 80151fa:	f001 f8ee 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80151fe:	4603      	mov	r3, r0
 8015200:	edd3 7a00 	vldr	s15, [r3]
 8015204:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015208:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 801520c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015210:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015214:	edc3 7a03 	vstr	s15, [r3, #12]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 8015218:	2101      	movs	r1, #1
 801521a:	48a0      	ldr	r0, [pc, #640]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801521c:	f001 f820 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015220:	eeb0 8a40 	vmov.f32	s16, s0
 8015224:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015228:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	3304      	adds	r3, #4
 8015230:	2100      	movs	r1, #0
 8015232:	4618      	mov	r0, r3
 8015234:	f001 f8d1 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015238:	4603      	mov	r3, r0
 801523a:	edd3 7a00 	vldr	s15, [r3]
 801523e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015242:	2102      	movs	r1, #2
 8015244:	4895      	ldr	r0, [pc, #596]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015246:	f001 f80b 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801524a:	eef0 8a40 	vmov.f32	s17, s0
 801524e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015252:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	3304      	adds	r3, #4
 801525a:	2101      	movs	r1, #1
 801525c:	4618      	mov	r0, r3
 801525e:	f001 f8bc 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015262:	4603      	mov	r3, r0
 8015264:	edd3 7a00 	vldr	s15, [r3]
 8015268:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801526c:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015270:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015274:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015278:	edc3 7a04 	vstr	s15, [r3, #16]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 801527c:	2101      	movs	r1, #1
 801527e:	4887      	ldr	r0, [pc, #540]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015280:	f000 ffee 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015284:	eef0 7a40 	vmov.f32	s15, s0
 8015288:	eeb1 8a67 	vneg.f32	s16, s15
 801528c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015290:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	3304      	adds	r3, #4
 8015298:	2101      	movs	r1, #1
 801529a:	4618      	mov	r0, r3
 801529c:	f001 f89d 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80152a0:	4603      	mov	r3, r0
 80152a2:	edd3 7a00 	vldr	s15, [r3]
 80152a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80152aa:	2102      	movs	r1, #2
 80152ac:	487b      	ldr	r0, [pc, #492]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80152ae:	f000 ffd7 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80152b2:	eef0 8a40 	vmov.f32	s17, s0
 80152b6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80152ba:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	3304      	adds	r3, #4
 80152c2:	2100      	movs	r1, #0
 80152c4:	4618      	mov	r0, r3
 80152c6:	f001 f888 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80152ca:	4603      	mov	r3, r0
 80152cc:	edd3 7a00 	vldr	s15, [r3]
 80152d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80152d4:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80152d8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80152dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80152e0:	edc3 7a05 	vstr	s15, [r3, #20]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 80152e4:	2101      	movs	r1, #1
 80152e6:	486d      	ldr	r0, [pc, #436]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80152e8:	f000 ffba 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80152ec:	eeb0 8a40 	vmov.f32	s16, s0
 80152f0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80152f4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	3304      	adds	r3, #4
 80152fc:	2102      	movs	r1, #2
 80152fe:	4618      	mov	r0, r3
 8015300:	f001 f86b 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015304:	4603      	mov	r3, r0
 8015306:	edd3 7a00 	vldr	s15, [r3]
 801530a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801530e:	2102      	movs	r1, #2
 8015310:	4862      	ldr	r0, [pc, #392]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015312:	f000 ffa5 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015316:	eef0 8a40 	vmov.f32	s17, s0
 801531a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801531e:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	3304      	adds	r3, #4
 8015326:	2103      	movs	r1, #3
 8015328:	4618      	mov	r0, r3
 801532a:	f001 f856 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801532e:	4603      	mov	r3, r0
 8015330:	edd3 7a00 	vldr	s15, [r3]
 8015334:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015338:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 801533c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015340:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015344:	edc3 7a06 	vstr	s15, [r3, #24]
		(r2(1)*_state(0) + r2(2)*_state(1)), (-r2(1)*_state(1) + r2(2)*_state(0)), (r2(1)*_state(2) + r2(2)*_state(3)), (-r2(1)*_state(3) + r2(2)*_state(2)),
 8015348:	2101      	movs	r1, #1
 801534a:	4854      	ldr	r0, [pc, #336]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801534c:	f000 ff88 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015350:	eef0 7a40 	vmov.f32	s15, s0
 8015354:	eeb1 8a67 	vneg.f32	s16, s15
 8015358:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801535c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	3304      	adds	r3, #4
 8015364:	2103      	movs	r1, #3
 8015366:	4618      	mov	r0, r3
 8015368:	f001 f837 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801536c:	4603      	mov	r3, r0
 801536e:	edd3 7a00 	vldr	s15, [r3]
 8015372:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015376:	2102      	movs	r1, #2
 8015378:	4848      	ldr	r0, [pc, #288]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801537a:	f000 ff71 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801537e:	eef0 8a40 	vmov.f32	s17, s0
 8015382:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015386:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	3304      	adds	r3, #4
 801538e:	2102      	movs	r1, #2
 8015390:	4618      	mov	r0, r3
 8015392:	f001 f822 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015396:	4603      	mov	r3, r0
 8015398:	edd3 7a00 	vldr	s15, [r3]
 801539c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80153a0:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 80153a4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80153ac:	edc3 7a07 	vstr	s15, [r3, #28]
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 80153b0:	2101      	movs	r1, #1
 80153b2:	483a      	ldr	r0, [pc, #232]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80153b4:	f000 ff54 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80153b8:	eef0 7a40 	vmov.f32	s15, s0
 80153bc:	eeb1 8a67 	vneg.f32	s16, s15
 80153c0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153c4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	3304      	adds	r3, #4
 80153cc:	2101      	movs	r1, #1
 80153ce:	4618      	mov	r0, r3
 80153d0:	f001 f803 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80153d4:	4603      	mov	r3, r0
 80153d6:	edd3 7a00 	vldr	s15, [r3]
 80153da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80153de:	2102      	movs	r1, #2
 80153e0:	482e      	ldr	r0, [pc, #184]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 80153e2:	f000 ff3d 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80153e6:	eef0 8a40 	vmov.f32	s17, s0
 80153ea:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80153ee:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3304      	adds	r3, #4
 80153f6:	2100      	movs	r1, #0
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 ffee 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80153fe:	4603      	mov	r3, r0
 8015400:	edd3 7a00 	vldr	s15, [r3]
 8015404:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015408:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 801540c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015410:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8015414:	edc3 7a08 	vstr	s15, [r3, #32]
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 8015418:	2101      	movs	r1, #1
 801541a:	4820      	ldr	r0, [pc, #128]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801541c:	f000 ff20 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015420:	eef0 7a40 	vmov.f32	s15, s0
 8015424:	eeb1 8a67 	vneg.f32	s16, s15
 8015428:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801542c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	3304      	adds	r3, #4
 8015434:	2100      	movs	r1, #0
 8015436:	4618      	mov	r0, r3
 8015438:	f000 ffcf 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801543c:	4603      	mov	r3, r0
 801543e:	edd3 7a00 	vldr	s15, [r3]
 8015442:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015446:	2102      	movs	r1, #2
 8015448:	4814      	ldr	r0, [pc, #80]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 801544a:	f000 ff09 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801544e:	eef0 8a40 	vmov.f32	s17, s0
 8015452:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015456:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	3304      	adds	r3, #4
 801545e:	2101      	movs	r1, #1
 8015460:	4618      	mov	r0, r3
 8015462:	f000 ffba 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015466:	4603      	mov	r3, r0
 8015468:	edd3 7a00 	vldr	s15, [r3]
 801546c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015470:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 8015474:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015478:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801547c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 8015480:	2101      	movs	r1, #1
 8015482:	4806      	ldr	r0, [pc, #24]	; (801549c <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x840>)
 8015484:	f000 feec 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015488:	eeb0 8a40 	vmov.f32	s16, s0
 801548c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015490:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	3304      	adds	r3, #4
 8015498:	2103      	movs	r1, #3
 801549a:	e001      	b.n	80154a0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x844>
 801549c:	24009508 	.word	0x24009508
 80154a0:	4618      	mov	r0, r3
 80154a2:	f000 ff9a 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80154a6:	4603      	mov	r3, r0
 80154a8:	edd3 7a00 	vldr	s15, [r3]
 80154ac:	ee28 8a27 	vmul.f32	s16, s16, s15
 80154b0:	2102      	movs	r1, #2
 80154b2:	48c5      	ldr	r0, [pc, #788]	; (80157c8 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 80154b4:	f000 fed4 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80154b8:	eef0 8a40 	vmov.f32	s17, s0
 80154bc:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154c0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	3304      	adds	r3, #4
 80154c8:	2102      	movs	r1, #2
 80154ca:	4618      	mov	r0, r3
 80154cc:	f000 ff85 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 80154d0:	4603      	mov	r3, r0
 80154d2:	edd3 7a00 	vldr	s15, [r3]
 80154d6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80154da:	ee78 7a67 	vsub.f32	s15, s16, s15
	}};
 80154de:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154e2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80154e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		(-r2(1)*_state(1) + r2(2)*_state(0)), (-r2(1)*_state(0) - r2(2)*_state(1)), (r2(1)*_state(3) - r2(2)*_state(2)), (r2(1)*_state(2) + r2(2)*_state(3))
 80154ea:	2101      	movs	r1, #1
 80154ec:	48b6      	ldr	r0, [pc, #728]	; (80157c8 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 80154ee:	f000 feb7 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80154f2:	eeb0 8a40 	vmov.f32	s16, s0
 80154f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80154fa:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	3304      	adds	r3, #4
 8015502:	2102      	movs	r1, #2
 8015504:	4618      	mov	r0, r3
 8015506:	f000 ff68 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 801550a:	4603      	mov	r3, r0
 801550c:	edd3 7a00 	vldr	s15, [r3]
 8015510:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015514:	2102      	movs	r1, #2
 8015516:	48ac      	ldr	r0, [pc, #688]	; (80157c8 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb6c>)
 8015518:	f000 fea2 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801551c:	eef0 8a40 	vmov.f32	s17, s0
 8015520:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015524:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	3304      	adds	r3, #4
 801552c:	2103      	movs	r1, #3
 801552e:	4618      	mov	r0, r3
 8015530:	f000 ff53 	bl	80163da <_ZN3Mat8V_VectorILt4EEclEt>
 8015534:	4603      	mov	r3, r0
 8015536:	edd3 7a00 	vldr	s15, [r3]
 801553a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801553e:	ee78 7a27 	vadd.f32	s15, s16, s15
	}};
 8015542:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015546:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801554a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 801554e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8015552:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015556:	4611      	mov	r1, r2
 8015558:	4618      	mov	r0, r3
 801555a:	f7fd ff3b 	bl	80133d4 <_ZN3Mat6MatrixILt3ELt4EEC1ERKSt5arrayIfLj12EE>
	static Matrix<3, 3> R{0.0f};
 801555e:	4b9b      	ldr	r3, [pc, #620]	; (80157cc <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f3bf 8f5b 	dmb	ish
 8015566:	f003 0301 	and.w	r3, r3, #1
 801556a:	2b00      	cmp	r3, #0
 801556c:	bf0c      	ite	eq
 801556e:	2301      	moveq	r3, #1
 8015570:	2300      	movne	r3, #0
 8015572:	b2db      	uxtb	r3, r3
 8015574:	2b00      	cmp	r3, #0
 8015576:	d012      	beq.n	801559e <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x942>
 8015578:	4894      	ldr	r0, [pc, #592]	; (80157cc <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 801557a:	f007 febd 	bl	801d2f8 <__cxa_guard_acquire>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	bf14      	ite	ne
 8015584:	2301      	movne	r3, #1
 8015586:	2300      	moveq	r3, #0
 8015588:	b2db      	uxtb	r3, r3
 801558a:	2b00      	cmp	r3, #0
 801558c:	d007      	beq.n	801559e <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x942>
 801558e:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80157d0 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb74>
 8015592:	4890      	ldr	r0, [pc, #576]	; (80157d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 8015594:	f7f8 fd0b 	bl	800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8015598:	488c      	ldr	r0, [pc, #560]	; (80157cc <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb70>)
 801559a:	f007 feb9 	bl	801d310 <__cxa_guard_release>
	R(0,0) = meassurementCov(3,3); R(1,1) = meassurementCov(4,4); R(2,2) = meassurementCov(5,5);
 801559e:	2200      	movs	r2, #0
 80155a0:	2100      	movs	r1, #0
 80155a2:	488c      	ldr	r0, [pc, #560]	; (80157d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 80155a4:	f7f8 fd20 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80155a8:	4604      	mov	r4, r0
 80155aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155ae:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80155b2:	2203      	movs	r2, #3
 80155b4:	2103      	movs	r1, #3
 80155b6:	6818      	ldr	r0, [r3, #0]
 80155b8:	f7fa ff07 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80155bc:	eef0 7a40 	vmov.f32	s15, s0
 80155c0:	edc4 7a00 	vstr	s15, [r4]
 80155c4:	2201      	movs	r2, #1
 80155c6:	2101      	movs	r1, #1
 80155c8:	4882      	ldr	r0, [pc, #520]	; (80157d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 80155ca:	f7f8 fd0d 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80155ce:	4604      	mov	r4, r0
 80155d0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155d4:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80155d8:	2204      	movs	r2, #4
 80155da:	2104      	movs	r1, #4
 80155dc:	6818      	ldr	r0, [r3, #0]
 80155de:	f7fa fef4 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 80155e2:	eef0 7a40 	vmov.f32	s15, s0
 80155e6:	edc4 7a00 	vstr	s15, [r4]
 80155ea:	2202      	movs	r2, #2
 80155ec:	2102      	movs	r1, #2
 80155ee:	4879      	ldr	r0, [pc, #484]	; (80157d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 80155f0:	f7f8 fcfa 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80155f4:	4604      	mov	r4, r0
 80155f6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80155fa:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80155fe:	2205      	movs	r2, #5
 8015600:	2105      	movs	r1, #5
 8015602:	6818      	ldr	r0, [r3, #0]
 8015604:	f7fa fee1 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8015608:	eef0 7a40 	vmov.f32	s15, s0
 801560c:	edc4 7a00 	vstr	s15, [r4]
	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8015610:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015614:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f103 0214 	add.w	r2, r3, #20
 801561e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015622:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015626:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801562a:	4618      	mov	r0, r3
 801562c:	f7fd fee9 	bl	8013402 <_ZNK3Mat6MatrixILt3ELt4EEmlILt4EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 8015630:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015634:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015638:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801563c:	4611      	mov	r1, r2
 801563e:	4618      	mov	r0, r3
 8015640:	f7fd fef2 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8015644:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015648:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801564c:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8015650:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8015654:	4618      	mov	r0, r3
 8015656:	f7fd ff17 	bl	8013488 <_ZNK3Mat6MatrixILt3ELt4EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt4EXT_EEE>
 801565a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801565e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8015662:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8015666:	4a5b      	ldr	r2, [pc, #364]	; (80157d4 <_ZN10Algorithms14OrientationEKF10_UpdateMagERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0xb78>)
 8015668:	4618      	mov	r0, r3
 801566a:	f7fd ff20 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 801566e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015672:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f103 0414 	add.w	r4, r3, #20
 801567c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015684:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8015688:	4611      	mov	r1, r2
 801568a:	4618      	mov	r0, r3
 801568c:	f7fd fecc 	bl	8013428 <_ZNK3Mat6MatrixILt3ELt4EE10TransposedEv>
 8015690:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015694:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8015698:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 801569c:	4621      	mov	r1, r4
 801569e:	4618      	mov	r0, r3
 80156a0:	f7fd ff1e 	bl	80134e0 <_ZNK3Mat6MatrixILt4ELt4EEmlILt3EEENS0_ILt4EXT_EEERKS3_>
 80156a4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156a8:	f5a3 7080 	sub.w	r0, r3, #256	; 0x100
 80156ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80156b0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156b4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80156b8:	6819      	ldr	r1, [r3, #0]
 80156ba:	f000 fb97 	bl	8015dec <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 80156be:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156c2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80156c6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80156ca:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fd ff19 	bl	8013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 80156d4:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80156d8:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	1d1c      	adds	r4, r3, #4
 80156e0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80156e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80156e8:	4611      	mov	r1, r2
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7fb fa51 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 80156f0:	eef0 6a40 	vmov.f32	s13, s0
 80156f4:	eeb0 7a60 	vmov.f32	s14, s1
 80156f8:	eef0 7a41 	vmov.f32	s15, s2
 80156fc:	edc7 6a93 	vstr	s13, [r7, #588]	; 0x24c
 8015700:	ed87 7a94 	vstr	s14, [r7, #592]	; 0x250
 8015704:	edc7 7a95 	vstr	s15, [r7, #596]	; 0x254
 8015708:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801570c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015710:	4611      	mov	r1, r2
 8015712:	4618      	mov	r0, r3
 8015714:	f7fd ff0a 	bl	801352c <_ZNK3Mat6MatrixILt4ELt3EEmlILt1EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8015718:	eeb0 6a40 	vmov.f32	s12, s0
 801571c:	eef0 6a60 	vmov.f32	s13, s1
 8015720:	eeb0 7a41 	vmov.f32	s14, s2
 8015724:	eef0 7a61 	vmov.f32	s15, s3
 8015728:	ed87 6a8f 	vstr	s12, [r7, #572]	; 0x23c
 801572c:	edc7 6a90 	vstr	s13, [r7, #576]	; 0x240
 8015730:	ed87 7a91 	vstr	s14, [r7, #580]	; 0x244
 8015734:	edc7 7a92 	vstr	s15, [r7, #584]	; 0x248
 8015738:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801573c:	4619      	mov	r1, r3
 801573e:	4620      	mov	r0, r4
 8015740:	f7f9 fde7 	bl	800f312 <_ZN3Mat6MatrixILt4ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<OrientationEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8015744:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8015748:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801574c:	4618      	mov	r0, r3
 801574e:	f7f8 fb13 	bl	800dd78 <_ZN3Mat3EyeILt4EEENS_6MatrixIXT_EXT_EEEf>
 8015752:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8015756:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801575a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801575e:	4618      	mov	r0, r3
 8015760:	f7fd fde2 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8015764:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015768:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 801576c:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8015770:	4618      	mov	r0, r3
 8015772:	f7f9 fe16 	bl	800f3a2 <_ZNK3Mat6MatrixILt4ELt4EEmiERKS1_>
 8015776:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801577a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f103 0214 	add.w	r2, r3, #20
 8015784:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8015788:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 801578c:	681c      	ldr	r4, [r3, #0]
 801578e:	463b      	mov	r3, r7
 8015790:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8015794:	4618      	mov	r0, r3
 8015796:	f7f9 fc81 	bl	800f09c <_ZNK3Mat6MatrixILt4ELt4EEmlILt4EEENS0_ILt4EXT_EEERKS3_>
 801579a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801579e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80157a2:	3414      	adds	r4, #20
 80157a4:	461d      	mov	r5, r3
 80157a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80157b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80157ba:	bf00      	nop
 80157bc:	f507 7746 	add.w	r7, r7, #792	; 0x318
 80157c0:	46bd      	mov	sp, r7
 80157c2:	ecbd 8b04 	vpop	{d8-d9}
 80157c6:	bdb0      	pop	{r4, r5, r7, pc}
 80157c8:	24009508 	.word	0x24009508
 80157cc:	24009560 	.word	0x24009560
 80157d0:	00000000 	.word	0x00000000
 80157d4:	2400953c 	.word	0x2400953c

080157d8 <_ZNK10Algorithms14OrientationEKF2_fERKN3Mat8V_VectorILt3EEEf>:

OrientationEKF::StateVec OrientationEKF::_f(const ControlVec& controlVec, float time) const
{
 80157d8:	b590      	push	{r4, r7, lr}
 80157da:	ed2d 8b02 	vpush	{d8}
 80157de:	b097      	sub	sp, #92	; 0x5c
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	61f8      	str	r0, [r7, #28]
 80157e4:	61b9      	str	r1, [r7, #24]
 80157e6:	ed87 0a05 	vstr	s0, [r7, #20]
	const float dt = time - _time;
 80157ea:	69fb      	ldr	r3, [r7, #28]
 80157ec:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80157f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80157f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	const float dt_2 = dt*0.5f;
 80157fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015800:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015808:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	return StateVec{{
		_state(0) - dt_2*controlVec(0)*_state(1) - dt_2*controlVec(1)*_state(2) - dt_2*controlVec(2)*_state(3),
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	3304      	adds	r3, #4
 8015810:	2100      	movs	r1, #0
 8015812:	4618      	mov	r0, r3
 8015814:	f000 fe1e 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015818:	eef0 8a40 	vmov.f32	s17, s0
 801581c:	2100      	movs	r1, #0
 801581e:	69b8      	ldr	r0, [r7, #24]
 8015820:	f000 fd1e 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015824:	eeb0 7a40 	vmov.f32	s14, s0
 8015828:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801582c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015830:	69fb      	ldr	r3, [r7, #28]
 8015832:	3304      	adds	r3, #4
 8015834:	2101      	movs	r1, #1
 8015836:	4618      	mov	r0, r3
 8015838:	f000 fe0c 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801583c:	eef0 7a40 	vmov.f32	s15, s0
 8015840:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015844:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8015848:	2101      	movs	r1, #1
 801584a:	69b8      	ldr	r0, [r7, #24]
 801584c:	f000 fd08 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015850:	eeb0 7a40 	vmov.f32	s14, s0
 8015854:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015858:	ee67 8a27 	vmul.f32	s17, s14, s15
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	3304      	adds	r3, #4
 8015860:	2102      	movs	r1, #2
 8015862:	4618      	mov	r0, r3
 8015864:	f000 fdf6 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015868:	eef0 7a40 	vmov.f32	s15, s0
 801586c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015870:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015874:	2102      	movs	r1, #2
 8015876:	69b8      	ldr	r0, [r7, #24]
 8015878:	f000 fcf2 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801587c:	eeb0 7a40 	vmov.f32	s14, s0
 8015880:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015884:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	3304      	adds	r3, #4
 801588c:	2103      	movs	r1, #3
 801588e:	4618      	mov	r0, r3
 8015890:	f000 fde0 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015894:	eef0 7a40 	vmov.f32	s15, s0
 8015898:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801589c:	ee78 7a67 	vsub.f32	s15, s16, s15
	return StateVec{{
 80158a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_state(1) + dt_2*controlVec(0)*_state(0) - dt_2*controlVec(1)*_state(3) + dt_2*controlVec(2)*_state(2),
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	3304      	adds	r3, #4
 80158a8:	2101      	movs	r1, #1
 80158aa:	4618      	mov	r0, r3
 80158ac:	f000 fdd2 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80158b0:	eef0 8a40 	vmov.f32	s17, s0
 80158b4:	2100      	movs	r1, #0
 80158b6:	69b8      	ldr	r0, [r7, #24]
 80158b8:	f000 fcd2 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80158bc:	eeb0 7a40 	vmov.f32	s14, s0
 80158c0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80158c4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	3304      	adds	r3, #4
 80158cc:	2100      	movs	r1, #0
 80158ce:	4618      	mov	r0, r3
 80158d0:	f000 fdc0 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80158d4:	eef0 7a40 	vmov.f32	s15, s0
 80158d8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80158dc:	ee38 8aa7 	vadd.f32	s16, s17, s15
 80158e0:	2101      	movs	r1, #1
 80158e2:	69b8      	ldr	r0, [r7, #24]
 80158e4:	f000 fcbc 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80158e8:	eeb0 7a40 	vmov.f32	s14, s0
 80158ec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80158f0:	ee67 8a27 	vmul.f32	s17, s14, s15
 80158f4:	69fb      	ldr	r3, [r7, #28]
 80158f6:	3304      	adds	r3, #4
 80158f8:	2103      	movs	r1, #3
 80158fa:	4618      	mov	r0, r3
 80158fc:	f000 fdaa 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015900:	eef0 7a40 	vmov.f32	s15, s0
 8015904:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015908:	ee38 8a67 	vsub.f32	s16, s16, s15
 801590c:	2102      	movs	r1, #2
 801590e:	69b8      	ldr	r0, [r7, #24]
 8015910:	f000 fca6 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015914:	eeb0 7a40 	vmov.f32	s14, s0
 8015918:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801591c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	3304      	adds	r3, #4
 8015924:	2102      	movs	r1, #2
 8015926:	4618      	mov	r0, r3
 8015928:	f000 fd94 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801592c:	eef0 7a40 	vmov.f32	s15, s0
 8015930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015934:	ee78 7a27 	vadd.f32	s15, s16, s15
	return StateVec{{
 8015938:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_state(2) + dt_2*controlVec(0)*_state(3) + dt_2*controlVec(1)*_state(0) - dt_2*controlVec(2)*_state(1),
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	3304      	adds	r3, #4
 8015940:	2102      	movs	r1, #2
 8015942:	4618      	mov	r0, r3
 8015944:	f000 fd86 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015948:	eef0 8a40 	vmov.f32	s17, s0
 801594c:	2100      	movs	r1, #0
 801594e:	69b8      	ldr	r0, [r7, #24]
 8015950:	f000 fc86 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015954:	eeb0 7a40 	vmov.f32	s14, s0
 8015958:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801595c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	3304      	adds	r3, #4
 8015964:	2103      	movs	r1, #3
 8015966:	4618      	mov	r0, r3
 8015968:	f000 fd74 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801596c:	eef0 7a40 	vmov.f32	s15, s0
 8015970:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015974:	ee38 8aa7 	vadd.f32	s16, s17, s15
 8015978:	2101      	movs	r1, #1
 801597a:	69b8      	ldr	r0, [r7, #24]
 801597c:	f000 fc70 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015980:	eeb0 7a40 	vmov.f32	s14, s0
 8015984:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015988:	ee67 8a27 	vmul.f32	s17, s14, s15
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	3304      	adds	r3, #4
 8015990:	2100      	movs	r1, #0
 8015992:	4618      	mov	r0, r3
 8015994:	f000 fd5e 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015998:	eef0 7a40 	vmov.f32	s15, s0
 801599c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80159a0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80159a4:	2102      	movs	r1, #2
 80159a6:	69b8      	ldr	r0, [r7, #24]
 80159a8:	f000 fc5a 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80159ac:	eeb0 7a40 	vmov.f32	s14, s0
 80159b0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80159b4:	ee67 8a27 	vmul.f32	s17, s14, s15
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	3304      	adds	r3, #4
 80159bc:	2101      	movs	r1, #1
 80159be:	4618      	mov	r0, r3
 80159c0:	f000 fd48 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80159c4:	eef0 7a40 	vmov.f32	s15, s0
 80159c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80159cc:	ee78 7a67 	vsub.f32	s15, s16, s15
	return StateVec{{
 80159d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_state(3) - dt_2*controlVec(0)*_state(2) + dt_2*controlVec(1)*_state(1) + dt_2*controlVec(2)*_state(0)
 80159d4:	69fb      	ldr	r3, [r7, #28]
 80159d6:	3304      	adds	r3, #4
 80159d8:	2103      	movs	r1, #3
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 fd3a 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80159e0:	eef0 8a40 	vmov.f32	s17, s0
 80159e4:	2100      	movs	r1, #0
 80159e6:	69b8      	ldr	r0, [r7, #24]
 80159e8:	f000 fc3a 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80159ec:	eeb0 7a40 	vmov.f32	s14, s0
 80159f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80159f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	3304      	adds	r3, #4
 80159fc:	2102      	movs	r1, #2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f000 fd28 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015a04:	eef0 7a40 	vmov.f32	s15, s0
 8015a08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015a0c:	ee38 8ae7 	vsub.f32	s16, s17, s15
 8015a10:	2101      	movs	r1, #1
 8015a12:	69b8      	ldr	r0, [r7, #24]
 8015a14:	f000 fc24 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015a18:	eeb0 7a40 	vmov.f32	s14, s0
 8015a1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015a20:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	3304      	adds	r3, #4
 8015a28:	2101      	movs	r1, #1
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f000 fd12 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015a30:	eef0 7a40 	vmov.f32	s15, s0
 8015a34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015a38:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015a3c:	2102      	movs	r1, #2
 8015a3e:	69b8      	ldr	r0, [r7, #24]
 8015a40:	f000 fc0e 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015a44:	eeb0 7a40 	vmov.f32	s14, s0
 8015a48:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015a4c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8015a50:	69fb      	ldr	r3, [r7, #28]
 8015a52:	3304      	adds	r3, #4
 8015a54:	2100      	movs	r1, #0
 8015a56:	4618      	mov	r0, r3
 8015a58:	f000 fcfc 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015a5c:	eef0 7a40 	vmov.f32	s15, s0
 8015a60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8015a64:	ee78 7a27 	vadd.f32	s15, s16, s15
	return StateVec{{
 8015a68:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8015a6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a74:	4611      	mov	r1, r2
 8015a76:	4618      	mov	r0, r3
 8015a78:	f000 fd01 	bl	801647e <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>
	}};
 8015a7c:	f107 0420 	add.w	r4, r7, #32
 8015a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015a8a:	6a38      	ldr	r0, [r7, #32]
 8015a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a92:	ee06 0a10 	vmov	s12, r0
 8015a96:	ee06 1a90 	vmov	s13, r1
 8015a9a:	ee07 2a10 	vmov	s14, r2
 8015a9e:	ee07 3a90 	vmov	s15, r3
}
 8015aa2:	eeb0 0a46 	vmov.f32	s0, s12
 8015aa6:	eef0 0a66 	vmov.f32	s1, s13
 8015aaa:	eeb0 1a47 	vmov.f32	s2, s14
 8015aae:	eef0 1a67 	vmov.f32	s3, s15
 8015ab2:	375c      	adds	r7, #92	; 0x5c
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	ecbd 8b02 	vpop	{d8}
 8015aba:	bd90      	pop	{r4, r7, pc}

08015abc <_ZNK10Algorithms14OrientationEKF2_FERKN3Mat8V_VectorILt3EEEf>:

OrientationEKF::StateCovarianceMatrix OrientationEKF::_F(const ControlVec& controlVec, float time) const
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	ed2d 8b02 	vpush	{d8}
 8015ac2:	b096      	sub	sp, #88	; 0x58
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	60b9      	str	r1, [r7, #8]
 8015aca:	607a      	str	r2, [r7, #4]
 8015acc:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015ad6:	ed97 7a00 	vldr	s14, [r7]
 8015ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ade:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	const float dt_2 = dt*0.5f;
 8015ae2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015ae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015aee:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	return StateCovarianceMatrix{{
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
	}};
 8015af2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015af6:	613b      	str	r3, [r7, #16]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015af8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015afc:	eeb1 8a67 	vneg.f32	s16, s15
 8015b00:	2100      	movs	r1, #0
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	f000 fbac 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b08:	eef0 7a40 	vmov.f32	s15, s0
 8015b0c:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015b10:	edc7 7a05 	vstr	s15, [r7, #20]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015b14:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b18:	eeb1 8a67 	vneg.f32	s16, s15
 8015b1c:	2101      	movs	r1, #1
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 fb9e 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b24:	eef0 7a40 	vmov.f32	s15, s0
 8015b28:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015b2c:	edc7 7a06 	vstr	s15, [r7, #24]
		1.0f, -dt_2*controlVec(0), -dt_2*controlVec(1), -dt_2*controlVec(2),
 8015b30:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b34:	eeb1 8a67 	vneg.f32	s16, s15
 8015b38:	2102      	movs	r1, #2
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f000 fb90 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b40:	eef0 7a40 	vmov.f32	s15, s0
 8015b44:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015b48:	edc7 7a07 	vstr	s15, [r7, #28]
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015b4c:	2100      	movs	r1, #0
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f000 fb86 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b54:	eeb0 7a40 	vmov.f32	s14, s0
 8015b58:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015b60:	edc7 7a08 	vstr	s15, [r7, #32]
 8015b64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015b68:	627b      	str	r3, [r7, #36]	; 0x24
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015b6a:	2102      	movs	r1, #2
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f000 fb77 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b72:	eeb0 7a40 	vmov.f32	s14, s0
 8015b76:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015b7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		dt_2*controlVec(0), 1.0f, dt_2*controlVec(2), -dt_2*controlVec(1),
 8015b82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015b86:	eeb1 8a67 	vneg.f32	s16, s15
 8015b8a:	2101      	movs	r1, #1
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f000 fb67 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015b92:	eef0 7a40 	vmov.f32	s15, s0
 8015b96:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015b9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015b9e:	2101      	movs	r1, #1
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	f000 fb5d 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8015baa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015bae:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015bb2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015bb6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015bba:	eeb1 8a67 	vneg.f32	s16, s15
 8015bbe:	2102      	movs	r1, #2
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f000 fb4d 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015bc6:	eef0 7a40 	vmov.f32	s15, s0
 8015bca:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015bce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8015bd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015bd6:	63bb      	str	r3, [r7, #56]	; 0x38
		dt_2*controlVec(1), -dt_2*controlVec(2), 1.0f, dt_2*controlVec(0),
 8015bd8:	2100      	movs	r1, #0
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f000 fb40 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015be0:	eeb0 7a40 	vmov.f32	s14, s0
 8015be4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015be8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015bec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015bf0:	2102      	movs	r1, #2
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f000 fb34 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015bf8:	eeb0 7a40 	vmov.f32	s14, s0
 8015bfc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c00:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015c04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015c08:	2101      	movs	r1, #1
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 fb28 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015c10:	eeb0 7a40 	vmov.f32	s14, s0
 8015c14:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c18:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015c1c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		dt_2*controlVec(2), dt_2*controlVec(1), -dt_2*controlVec(0), 1.0f
 8015c20:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015c24:	eeb1 8a67 	vneg.f32	s16, s15
 8015c28:	2100      	movs	r1, #0
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 fb18 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8015c30:	eef0 7a40 	vmov.f32	s15, s0
 8015c34:	ee68 7a27 	vmul.f32	s15, s16, s15
	}};
 8015c38:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8015c3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c42:	f107 0310 	add.w	r3, r7, #16
 8015c46:	4619      	mov	r1, r3
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	f7fd fb9f 	bl	801338c <_ZN3Mat6MatrixILt4ELt4EEC1ERKSt5arrayIfLj16EE>
}
 8015c4e:	68f8      	ldr	r0, [r7, #12]
 8015c50:	3758      	adds	r7, #88	; 0x58
 8015c52:	46bd      	mov	sp, r7
 8015c54:	ecbd 8b02 	vpop	{d8}
 8015c58:	bd80      	pop	{r7, pc}

08015c5a <_ZNK10Algorithms14OrientationEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

OrientationEKF::StateCovarianceMatrix OrientationEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 8015c5a:	b580      	push	{r7, lr}
 8015c5c:	b0b8      	sub	sp, #224	; 0xe0
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	6178      	str	r0, [r7, #20]
 8015c62:	6139      	str	r1, [r7, #16]
 8015c64:	60fa      	str	r2, [r7, #12]
 8015c66:	60bb      	str	r3, [r7, #8]
 8015c68:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8015c72:	ed97 7a01 	vldr	s14, [r7, #4]
 8015c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c7a:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	const float dt_2 = dt*0.5f;
 8015c7e:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8015c82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c8a:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	Matrix<OrientationEKF_stateLen, OrientationEKF_controlLen> W{{
		-_state(1), -_state(2), -_state(3),
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	3304      	adds	r3, #4
 8015c92:	2101      	movs	r1, #1
 8015c94:	4618      	mov	r0, r3
 8015c96:	f000 fbdd 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015c9a:	eef0 7a40 	vmov.f32	s15, s0
 8015c9e:	eef1 7a67 	vneg.f32	s15, s15
		_state(0), -_state(3), _state(2),
		_state(3), _state(0), -_state(1),
		-_state(2), _state(1), _state(0)
	}};
 8015ca2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		-_state(1), -_state(2), -_state(3),
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	3304      	adds	r3, #4
 8015caa:	2102      	movs	r1, #2
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 fbd1 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015cb2:	eef0 7a40 	vmov.f32	s15, s0
 8015cb6:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015cba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		-_state(1), -_state(2), -_state(3),
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	3304      	adds	r3, #4
 8015cc2:	2103      	movs	r1, #3
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f000 fbc5 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015cca:	eef0 7a40 	vmov.f32	s15, s0
 8015cce:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015cd2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_state(0), -_state(3), _state(2),
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	2100      	movs	r1, #0
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f000 fbb9 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015ce2:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015ce6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_state(0), -_state(3), _state(2),
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	3304      	adds	r3, #4
 8015cee:	2103      	movs	r1, #3
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f000 fbaf 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015cf6:	eef0 7a40 	vmov.f32	s15, s0
 8015cfa:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015cfe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_state(0), -_state(3), _state(2),
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	3304      	adds	r3, #4
 8015d06:	2102      	movs	r1, #2
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f000 fba3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d0e:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015d12:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_state(3), _state(0), -_state(1),
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	3304      	adds	r3, #4
 8015d1a:	2103      	movs	r1, #3
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f000 fb99 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d22:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015d26:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_state(3), _state(0), -_state(1),
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	3304      	adds	r3, #4
 8015d2e:	2100      	movs	r1, #0
 8015d30:	4618      	mov	r0, r3
 8015d32:	f000 fb8f 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d36:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015d3a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_state(3), _state(0), -_state(1),
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	3304      	adds	r3, #4
 8015d42:	2101      	movs	r1, #1
 8015d44:	4618      	mov	r0, r3
 8015d46:	f000 fb85 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d4a:	eef0 7a40 	vmov.f32	s15, s0
 8015d4e:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015d52:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		-_state(2), _state(1), _state(0)
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	3304      	adds	r3, #4
 8015d5a:	2102      	movs	r1, #2
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f000 fb79 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d62:	eef0 7a40 	vmov.f32	s15, s0
 8015d66:	eef1 7a67 	vneg.f32	s15, s15
	}};
 8015d6a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		-_state(2), _state(1), _state(0)
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	3304      	adds	r3, #4
 8015d72:	2101      	movs	r1, #1
 8015d74:	4618      	mov	r0, r3
 8015d76:	f000 fb6d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d7a:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015d7e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		-_state(2), _state(1), _state(0)
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	3304      	adds	r3, #4
 8015d86:	2100      	movs	r1, #0
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f000 fb63 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8015d8e:	eef0 7a40 	vmov.f32	s15, s0
	}};
 8015d92:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8015d96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015d9a:	f107 0318 	add.w	r3, r7, #24
 8015d9e:	4611      	mov	r1, r2
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7fd fa7a 	bl	801329a <_ZN3Mat6MatrixILt4ELt3EEC1ERKSt5arrayIfLj12EE>
	W *= dt_2;
 8015da6:	f107 0318 	add.w	r3, r7, #24
 8015daa:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8015dae:	4618      	mov	r0, r3
 8015db0:	f000 fb74 	bl	801649c <_ZN3Mat6MatrixILt4ELt3EEmLEf>
	return W*controlCov*W.Transposed();
 8015db4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015db8:	f107 0118 	add.w	r1, r7, #24
 8015dbc:	68ba      	ldr	r2, [r7, #8]
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7fd fba1 	bl	8013506 <_ZNK3Mat6MatrixILt4ELt3EEmlILt3EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
 8015dc4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015dc8:	f107 0218 	add.w	r2, r7, #24
 8015dcc:	4611      	mov	r1, r2
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7fd fa7a 	bl	80132c8 <_ZNK3Mat6MatrixILt4ELt3EE10TransposedEv>
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015dda:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fd faa2 	bl	8013328 <_ZNK3Mat6MatrixILt4ELt3EEmlILt4EEENS0_ILt4EXT_EEERKNS0_ILt3EXT_EEE>
}
 8015de4:	6978      	ldr	r0, [r7, #20]
 8015de6:	37e0      	adds	r7, #224	; 0xe0
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> OrientationEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 8015dec:	b5b0      	push	{r4, r5, r7, lr}
 8015dee:	b090      	sub	sp, #64	; 0x40
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8015df8:	2200      	movs	r2, #0
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f7f8 fb34 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e02:	eef0 7a40 	vmov.f32	s15, s0
 8015e06:	4bd4      	ldr	r3, [pc, #848]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8015e08:	edc3 7a00 	vstr	s15, [r3]
 8015e0c:	2201      	movs	r2, #1
 8015e0e:	2100      	movs	r1, #0
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f7f8 fb2a 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e16:	eef0 7a40 	vmov.f32	s15, s0
 8015e1a:	4bd0      	ldr	r3, [pc, #832]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8015e1c:	edc3 7a00 	vstr	s15, [r3]
 8015e20:	2202      	movs	r2, #2
 8015e22:	2100      	movs	r1, #0
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f7f8 fb20 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e2a:	eef0 7a40 	vmov.f32	s15, s0
 8015e2e:	4bcc      	ldr	r3, [pc, #816]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8015e30:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 8015e34:	2200      	movs	r2, #0
 8015e36:	2101      	movs	r1, #1
 8015e38:	6878      	ldr	r0, [r7, #4]
 8015e3a:	f7f8 fb16 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e3e:	eef0 7a40 	vmov.f32	s15, s0
 8015e42:	4bc8      	ldr	r3, [pc, #800]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8015e44:	edc3 7a00 	vstr	s15, [r3]
 8015e48:	2201      	movs	r2, #1
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f7f8 fb0c 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e52:	eef0 7a40 	vmov.f32	s15, s0
 8015e56:	4bc4      	ldr	r3, [pc, #784]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8015e58:	edc3 7a00 	vstr	s15, [r3]
 8015e5c:	2202      	movs	r2, #2
 8015e5e:	2101      	movs	r1, #1
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7f8 fb02 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e66:	eef0 7a40 	vmov.f32	s15, s0
 8015e6a:	4bc0      	ldr	r3, [pc, #768]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8015e6c:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 8015e70:	2200      	movs	r2, #0
 8015e72:	2102      	movs	r1, #2
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f7f8 faf8 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e7a:	eef0 7a40 	vmov.f32	s15, s0
 8015e7e:	4bbc      	ldr	r3, [pc, #752]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8015e80:	edc3 7a00 	vstr	s15, [r3]
 8015e84:	2201      	movs	r2, #1
 8015e86:	2102      	movs	r1, #2
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7f8 faee 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015e8e:	eef0 7a40 	vmov.f32	s15, s0
 8015e92:	4bb8      	ldr	r3, [pc, #736]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8015e94:	edc3 7a00 	vstr	s15, [r3]
 8015e98:	2202      	movs	r2, #2
 8015e9a:	2102      	movs	r1, #2
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f7f8 fae4 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8015ea2:	eef0 7a40 	vmov.f32	s15, s0
 8015ea6:	4bb4      	ldr	r3, [pc, #720]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8015ea8:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8015eac:	4baa      	ldr	r3, [pc, #680]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8015eae:	ed93 7a00 	vldr	s14, [r3]
 8015eb2:	4bad      	ldr	r3, [pc, #692]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8015eb4:	edd3 7a00 	vldr	s15, [r3]
 8015eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ebc:	4bae      	ldr	r3, [pc, #696]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8015ebe:	edd3 7a00 	vldr	s15, [r3]
 8015ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ec6:	4ba4      	ldr	r3, [pc, #656]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8015ec8:	edd3 6a00 	vldr	s13, [r3]
 8015ecc:	4ba7      	ldr	r3, [pc, #668]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8015ece:	edd3 7a00 	vldr	s15, [r3]
 8015ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015ed6:	4ba7      	ldr	r3, [pc, #668]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8015ed8:	edd3 7a00 	vldr	s15, [r3]
 8015edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015ee4:	4b9d      	ldr	r3, [pc, #628]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8015ee6:	edd3 6a00 	vldr	s13, [r3]
 8015eea:	4b9e      	ldr	r3, [pc, #632]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8015eec:	edd3 7a00 	vldr	s15, [r3]
 8015ef0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015ef4:	4ba0      	ldr	r3, [pc, #640]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8015ef6:	edd3 7a00 	vldr	s15, [r3]
 8015efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015f02:	4b96      	ldr	r3, [pc, #600]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8015f04:	edd3 6a00 	vldr	s13, [r3]
 8015f08:	4b98      	ldr	r3, [pc, #608]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8015f0a:	edd3 7a00 	vldr	s15, [r3]
 8015f0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015f12:	4b97      	ldr	r3, [pc, #604]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8015f14:	edd3 7a00 	vldr	s15, [r3]
 8015f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015f20:	4b8f      	ldr	r3, [pc, #572]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8015f22:	edd3 6a00 	vldr	s13, [r3]
 8015f26:	4b8f      	ldr	r3, [pc, #572]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8015f28:	edd3 7a00 	vldr	s15, [r3]
 8015f2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015f30:	4b90      	ldr	r3, [pc, #576]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8015f32:	edd3 7a00 	vldr	s15, [r3]
 8015f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015f3e:	4b88      	ldr	r3, [pc, #544]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8015f40:	edd3 6a00 	vldr	s13, [r3]
 8015f44:	4b88      	ldr	r3, [pc, #544]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8015f46:	edd3 7a00 	vldr	s15, [r3]
 8015f4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015f4e:	4b88      	ldr	r3, [pc, #544]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8015f50:	edd3 7a00 	vldr	s15, [r3]
 8015f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015f5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 8015f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015f64:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015f6c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 8015f70:	4b82      	ldr	r3, [pc, #520]	; (801617c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	f3bf 8f5b 	dmb	ish
 8015f78:	f003 0301 	and.w	r3, r3, #1
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	bf0c      	ite	eq
 8015f80:	2301      	moveq	r3, #1
 8015f82:	2300      	movne	r3, #0
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f000 810b 	beq.w	80161a2 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 8015f8c:	487b      	ldr	r0, [pc, #492]	; (801617c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8015f8e:	f007 f9b3 	bl	801d2f8 <__cxa_guard_acquire>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	bf14      	ite	ne
 8015f98:	2301      	movne	r3, #1
 8015f9a:	2300      	moveq	r3, #0
 8015f9c:	b2db      	uxtb	r3, r3
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	f000 80ff 	beq.w	80161a2 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8015fa4:	4b70      	ldr	r3, [pc, #448]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8015fa6:	ed93 7a00 	vldr	s14, [r3]
 8015faa:	4b73      	ldr	r3, [pc, #460]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8015fac:	edd3 7a00 	vldr	s15, [r3]
 8015fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fb4:	4b6d      	ldr	r3, [pc, #436]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8015fb6:	edd3 6a00 	vldr	s13, [r3]
 8015fba:	4b6e      	ldr	r3, [pc, #440]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8015fbc:	edd3 7a00 	vldr	s15, [r3]
 8015fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015fc8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8015fd0:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8015fd4:	4b61      	ldr	r3, [pc, #388]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8015fd6:	ed93 7a00 	vldr	s14, [r3]
 8015fda:	4b67      	ldr	r3, [pc, #412]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8015fdc:	edd3 7a00 	vldr	s15, [r3]
 8015fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015fe4:	4b5e      	ldr	r3, [pc, #376]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8015fe6:	edd3 6a00 	vldr	s13, [r3]
 8015fea:	4b62      	ldr	r3, [pc, #392]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8015fec:	edd3 7a00 	vldr	s15, [r3]
 8015ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ff8:	eeb1 7a67 	vneg.f32	s14, s15
 8015ffc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016000:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016004:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8016008:	4b54      	ldr	r3, [pc, #336]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801600a:	ed93 7a00 	vldr	s14, [r3]
 801600e:	4b57      	ldr	r3, [pc, #348]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8016010:	edd3 7a00 	vldr	s15, [r3]
 8016014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016018:	4b51      	ldr	r3, [pc, #324]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801601a:	edd3 6a00 	vldr	s13, [r3]
 801601e:	4b52      	ldr	r3, [pc, #328]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8016020:	edd3 7a00 	vldr	s15, [r3]
 8016024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016028:	ee37 7a67 	vsub.f32	s14, s14, s15
 801602c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016030:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016034:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8016038:	4b4a      	ldr	r3, [pc, #296]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801603a:	ed93 7a00 	vldr	s14, [r3]
 801603e:	4b4e      	ldr	r3, [pc, #312]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016040:	edd3 7a00 	vldr	s15, [r3]
 8016044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016048:	4b48      	ldr	r3, [pc, #288]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801604a:	edd3 6a00 	vldr	s13, [r3]
 801604e:	4b48      	ldr	r3, [pc, #288]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8016050:	edd3 7a00 	vldr	s15, [r3]
 8016054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016058:	ee77 7a67 	vsub.f32	s15, s14, s15
 801605c:	eeb1 7a67 	vneg.f32	s14, s15
 8016060:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016064:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016068:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 801606c:	4b3a      	ldr	r3, [pc, #232]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801606e:	ed93 7a00 	vldr	s14, [r3]
 8016072:	4b41      	ldr	r3, [pc, #260]	; (8016178 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8016074:	edd3 7a00 	vldr	s15, [r3]
 8016078:	ee27 7a27 	vmul.f32	s14, s14, s15
 801607c:	4b38      	ldr	r3, [pc, #224]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801607e:	edd3 6a00 	vldr	s13, [r3]
 8016082:	4b3b      	ldr	r3, [pc, #236]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8016084:	edd3 7a00 	vldr	s15, [r3]
 8016088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801608c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016090:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016094:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 801609c:	4b2e      	ldr	r3, [pc, #184]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801609e:	ed93 7a00 	vldr	s14, [r3]
 80160a2:	4b32      	ldr	r3, [pc, #200]	; (801616c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80160a4:	edd3 7a00 	vldr	s15, [r3]
 80160a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160ac:	4b2c      	ldr	r3, [pc, #176]	; (8016160 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80160ae:	edd3 6a00 	vldr	s13, [r3]
 80160b2:	4b2c      	ldr	r3, [pc, #176]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80160b4:	edd3 7a00 	vldr	s15, [r3]
 80160b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80160c0:	eeb1 7a67 	vneg.f32	s14, s15
 80160c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80160c8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80160cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 80160d0:	4b24      	ldr	r3, [pc, #144]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80160d2:	ed93 7a00 	vldr	s14, [r3]
 80160d6:	4b27      	ldr	r3, [pc, #156]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80160d8:	edd3 7a00 	vldr	s15, [r3]
 80160dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160e0:	4b21      	ldr	r3, [pc, #132]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80160e2:	edd3 6a00 	vldr	s13, [r3]
 80160e6:	4b22      	ldr	r3, [pc, #136]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80160e8:	edd3 7a00 	vldr	s15, [r3]
 80160ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80160f4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80160f8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80160fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8016100:	4b15      	ldr	r3, [pc, #84]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016102:	ed93 7a00 	vldr	s14, [r3]
 8016106:	4b1b      	ldr	r3, [pc, #108]	; (8016174 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8016108:	edd3 7a00 	vldr	s15, [r3]
 801610c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016110:	4b12      	ldr	r3, [pc, #72]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8016112:	edd3 6a00 	vldr	s13, [r3]
 8016116:	4b16      	ldr	r3, [pc, #88]	; (8016170 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8016118:	edd3 7a00 	vldr	s15, [r3]
 801611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016124:	eeb1 7a67 	vneg.f32	s14, s15
 8016128:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801612c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8016130:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8016134:	4b08      	ldr	r3, [pc, #32]	; (8016158 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8016136:	ed93 7a00 	vldr	s14, [r3]
 801613a:	4b0b      	ldr	r3, [pc, #44]	; (8016168 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801613c:	edd3 7a00 	vldr	s15, [r3]
 8016140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016144:	4b05      	ldr	r3, [pc, #20]	; (801615c <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8016146:	edd3 6a00 	vldr	s13, [r3]
 801614a:	4b06      	ldr	r3, [pc, #24]	; (8016164 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801614c:	edd3 7a00 	vldr	s15, [r3]
 8016150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016154:	e014      	b.n	8016180 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 8016156:	bf00      	nop
 8016158:	24009564 	.word	0x24009564
 801615c:	24009568 	.word	0x24009568
 8016160:	2400956c 	.word	0x2400956c
 8016164:	24009570 	.word	0x24009570
 8016168:	24009574 	.word	0x24009574
 801616c:	24009578 	.word	0x24009578
 8016170:	2400957c 	.word	0x2400957c
 8016174:	24009580 	.word	0x24009580
 8016178:	24009584 	.word	0x24009584
 801617c:	240095ac 	.word	0x240095ac
 8016180:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016184:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016188:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801618c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8016190:	f107 0314 	add.w	r3, r7, #20
 8016194:	4619      	mov	r1, r3
 8016196:	480a      	ldr	r0, [pc, #40]	; (80161c0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8016198:	f7fa fce6 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 801619c:	4809      	ldr	r0, [pc, #36]	; (80161c4 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 801619e:	f007 f8b7 	bl	801d310 <__cxa_guard_release>
	return result;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	4a06      	ldr	r2, [pc, #24]	; (80161c0 <_ZNK10Algorithms14OrientationEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 80161a6:	461c      	mov	r4, r3
 80161a8:	4615      	mov	r5, r2
 80161aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161b2:	682b      	ldr	r3, [r5, #0]
 80161b4:	6023      	str	r3, [r4, #0]
}
 80161b6:	68f8      	ldr	r0, [r7, #12]
 80161b8:	3740      	adds	r7, #64	; 0x40
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bdb0      	pop	{r4, r5, r7, pc}
 80161be:	bf00      	nop
 80161c0:	24009588 	.word	0x24009588
 80161c4:	240095ac 	.word	0x240095ac

080161c8 <_ZN3Mat8V_VectorILt6EEC1Ef>:

template <u_short length>
V_Vector<length>::V_Vector(float val) : Matrix<length, 1>(val) {}
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	ed87 0a00 	vstr	s0, [r7]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	ed97 0a00 	vldr	s0, [r7]
 80161da:	4618      	mov	r0, r3
 80161dc:	f000 f999 	bl	8016512 <_ZN3Mat6MatrixILt6ELt1EEC1Ef>
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	4618      	mov	r0, r3
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}

080161ea <_ZZN3Mat6MatrixILt6ELt4EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 80161ea:	b480      	push	{r7}
 80161ec:	b083      	sub	sp, #12
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
 80161f2:	6039      	str	r1, [r7, #0]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681a      	ldr	r2, [r3, #0]
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	601a      	str	r2, [r3, #0]
 80161fc:	bf00      	nop
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <_ZN3Mat6MatrixILt6ELt4EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8016208:	b590      	push	{r4, r7, lr}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	4618      	mov	r0, r3
 8016218:	f000 f998 	bl	801654c <_ZNSt5arrayIfLj24EE5beginEv>
 801621c:	4604      	mov	r4, r0
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	4618      	mov	r0, r3
 8016222:	f000 f99f 	bl	8016564 <_ZNSt5arrayIfLj24EE3endEv>
 8016226:	4603      	mov	r3, r0
 8016228:	edd7 7a00 	vldr	s15, [r7]
 801622c:	eeb0 0a67 	vmov.f32	s0, s15
 8016230:	4619      	mov	r1, r3
 8016232:	4620      	mov	r0, r4
 8016234:	f000 f9a3 	bl	801657e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	4618      	mov	r0, r3
 801623c:	370c      	adds	r7, #12
 801623e:	46bd      	mov	sp, r7
 8016240:	bd90      	pop	{r4, r7, pc}

08016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>:

template <u_short length>
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 8016242:	b580      	push	{r7, lr}
 8016244:	b082      	sub	sp, #8
 8016246:	af00      	add	r7, sp, #0
 8016248:	6078      	str	r0, [r7, #4]
 801624a:	6039      	str	r1, [r7, #0]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6839      	ldr	r1, [r7, #0]
 8016250:	4618      	mov	r0, r3
 8016252:	f7f7 fdb5 	bl	800ddc0 <_ZN3Mat6MatrixILt3ELt1EEC1ERKSt5arrayIfLj3EE>
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	4618      	mov	r0, r3
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <_ZNK3Mat8V_VectorILt3EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	460b      	mov	r3, r1
 801626a:	807b      	strh	r3, [r7, #2]
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	887a      	ldrh	r2, [r7, #2]
 8016270:	4611      	mov	r1, r2
 8016272:	4618      	mov	r0, r3
 8016274:	f7f8 fa02 	bl	800e67c <_ZNKSt5arrayIfLj3EEixEj>
 8016278:	4603      	mov	r3, r0
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	ee07 3a90 	vmov	s15, r3
 8016280:	eeb0 0a67 	vmov.f32	s0, s15
 8016284:	3708      	adds	r7, #8
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>:

template <u_short length>
float V_Vector<length>::Norm() const
{
	float result = 0.0f;
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 801628a:	b480      	push	{r7}
 801628c:	b083      	sub	sp, #12
 801628e:	af00      	add	r7, sp, #0
 8016290:	6078      	str	r0, [r7, #4]
 8016292:	ed87 0a00 	vstr	s0, [r7]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	ed93 7a00 	vldr	s14, [r3]
 801629e:	edd7 7a00 	vldr	s15, [r7]
 80162a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162ae:	edc3 7a00 	vstr	s15, [r3]
 80162b2:	bf00      	nop
 80162b4:	370c      	adds	r7, #12
 80162b6:	46bd      	mov	sp, r7
 80162b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162bc:	4770      	bx	lr

080162be <_ZNK3Mat8V_VectorILt3EE4NormEv>:
float V_Vector<length>::Norm() const
 80162be:	b590      	push	{r4, r7, lr}
 80162c0:	b085      	sub	sp, #20
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 80162c6:	f04f 0300 	mov.w	r3, #0
 80162ca:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	4618      	mov	r0, r3
 80162d0:	f000 f971 	bl	80165b6 <_ZNKSt5arrayIfLj3EE5beginEv>
 80162d4:	4604      	mov	r4, r0
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	4618      	mov	r0, r3
 80162da:	f000 f978 	bl	80165ce <_ZNKSt5arrayIfLj3EE3endEv>
 80162de:	4603      	mov	r3, r0
 80162e0:	f107 020c 	add.w	r2, r7, #12
 80162e4:	4619      	mov	r1, r3
 80162e6:	4620      	mov	r0, r4
 80162e8:	f000 f97e 	bl	80165e8 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 80162ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80162f0:	eeb0 0a67 	vmov.f32	s0, s15
 80162f4:	f7fa fd5e 	bl	8010db4 <_ZSt4sqrtf>
 80162f8:	eef0 7a40 	vmov.f32	s15, s0
}
 80162fc:	eeb0 0a67 	vmov.f32	s0, s15
 8016300:	3714      	adds	r7, #20
 8016302:	46bd      	mov	sp, r7
 8016304:	bd90      	pop	{r4, r7, pc}

08016306 <_ZZNK3Mat8V_VectorILt4EE4NormEvENKUlfE_clEf>:
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 8016306:	b480      	push	{r7}
 8016308:	b083      	sub	sp, #12
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
 801630e:	ed87 0a00 	vstr	s0, [r7]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	ed93 7a00 	vldr	s14, [r3]
 801631a:	edd7 7a00 	vldr	s15, [r7]
 801631e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	ee77 7a27 	vadd.f32	s15, s14, s15
 801632a:	edc3 7a00 	vstr	s15, [r3]
 801632e:	bf00      	nop
 8016330:	370c      	adds	r7, #12
 8016332:	46bd      	mov	sp, r7
 8016334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016338:	4770      	bx	lr

0801633a <_ZNK3Mat8V_VectorILt4EE4NormEv>:
float V_Vector<length>::Norm() const
 801633a:	b590      	push	{r4, r7, lr}
 801633c:	b085      	sub	sp, #20
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
	float result = 0.0f;
 8016342:	f04f 0300 	mov.w	r3, #0
 8016346:	60fb      	str	r3, [r7, #12]
	std::for_each(_values.begin(), _values.end(), [&result](float n){result += n * n;});
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	4618      	mov	r0, r3
 801634c:	f000 f968 	bl	8016620 <_ZNKSt5arrayIfLj4EE5beginEv>
 8016350:	4604      	mov	r4, r0
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	4618      	mov	r0, r3
 8016356:	f000 f96f 	bl	8016638 <_ZNKSt5arrayIfLj4EE3endEv>
 801635a:	4603      	mov	r3, r0
 801635c:	f107 020c 	add.w	r2, r7, #12
 8016360:	4619      	mov	r1, r3
 8016362:	4620      	mov	r0, r4
 8016364:	f000 f975 	bl	8016652 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_>
	return std::sqrt(result);
 8016368:	edd7 7a03 	vldr	s15, [r7, #12]
 801636c:	eeb0 0a67 	vmov.f32	s0, s15
 8016370:	f7fa fd20 	bl	8010db4 <_ZSt4sqrtf>
 8016374:	eef0 7a40 	vmov.f32	s15, s0
}
 8016378:	eeb0 0a67 	vmov.f32	s0, s15
 801637c:	3714      	adds	r7, #20
 801637e:	46bd      	mov	sp, r7
 8016380:	bd90      	pop	{r4, r7, pc}

08016382 <_ZN3Mat6MatrixILt4ELt1EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 8016382:	b580      	push	{r7, lr}
 8016384:	b084      	sub	sp, #16
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
 801638a:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 801638e:	2300      	movs	r3, #0
 8016390:	60fb      	str	r3, [r7, #12]
 8016392:	e010      	b.n	80163b6 <_ZN3Mat6MatrixILt4ELt1EEmLEf+0x34>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	68f9      	ldr	r1, [r7, #12]
 8016398:	4618      	mov	r0, r3
 801639a:	f7f9 fe45 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 801639e:	4603      	mov	r3, r0
 80163a0:	ed93 7a00 	vldr	s14, [r3]
 80163a4:	edd7 7a00 	vldr	s15, [r7]
 80163a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163ac:	edc3 7a00 	vstr	s15, [r3]
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	3301      	adds	r3, #1
 80163b4:	60fb      	str	r3, [r7, #12]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f9 fe2a 	bl	8010012 <_ZNKSt5arrayIfLj4EE4sizeEv>
 80163be:	4602      	mov	r2, r0
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	4293      	cmp	r3, r2
 80163c4:	bf34      	ite	cc
 80163c6:	2301      	movcc	r3, #1
 80163c8:	2300      	movcs	r3, #0
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d1e1      	bne.n	8016394 <_ZN3Mat6MatrixILt4ELt1EEmLEf+0x12>
	return *this;
 80163d0:	687b      	ldr	r3, [r7, #4]
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3710      	adds	r7, #16
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}

080163da <_ZN3Mat8V_VectorILt4EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 80163da:	b580      	push	{r7, lr}
 80163dc:	b082      	sub	sp, #8
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
 80163e2:	460b      	mov	r3, r1
 80163e4:	807b      	strh	r3, [r7, #2]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	887a      	ldrh	r2, [r7, #2]
 80163ea:	4611      	mov	r1, r2
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7f9 fe1b 	bl	8010028 <_ZNSt5arrayIfLj4EEixEj>
 80163f2:	4603      	mov	r3, r0
 80163f4:	4618      	mov	r0, r3
 80163f6:	3708      	adds	r7, #8
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}

080163fc <_ZN3Mat6MatrixILt3ELt1EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 8016408:	2300      	movs	r3, #0
 801640a:	60fb      	str	r3, [r7, #12]
 801640c:	e010      	b.n	8016430 <_ZN3Mat6MatrixILt3ELt1EEmLEf+0x34>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68f9      	ldr	r1, [r7, #12]
 8016412:	4618      	mov	r0, r3
 8016414:	f7f7 fe88 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8016418:	4603      	mov	r3, r0
 801641a:	ed93 7a00 	vldr	s14, [r3]
 801641e:	edd7 7a00 	vldr	s15, [r7]
 8016422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016426:	edc3 7a00 	vstr	s15, [r3]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3301      	adds	r3, #1
 801642e:	60fb      	str	r3, [r7, #12]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	4618      	mov	r0, r3
 8016434:	f7fa fc0c 	bl	8010c50 <_ZNKSt5arrayIfLj3EE4sizeEv>
 8016438:	4602      	mov	r2, r0
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	4293      	cmp	r3, r2
 801643e:	bf34      	ite	cc
 8016440:	2301      	movcc	r3, #1
 8016442:	2300      	movcs	r3, #0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	d1e1      	bne.n	801640e <_ZN3Mat6MatrixILt3ELt1EEmLEf+0x12>
	return *this;
 801644a:	687b      	ldr	r3, [r7, #4]
}
 801644c:	4618      	mov	r0, r3
 801644e:	3710      	adds	r7, #16
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <_ZNK3Mat8V_VectorILt4EEclEt>:
	inline float operator()(u_short index) const {return _values[index];}
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	460b      	mov	r3, r1
 801645e:	807b      	strh	r3, [r7, #2]
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	887a      	ldrh	r2, [r7, #2]
 8016464:	4611      	mov	r1, r2
 8016466:	4618      	mov	r0, r3
 8016468:	f7f9 fded 	bl	8010046 <_ZNKSt5arrayIfLj4EEixEj>
 801646c:	4603      	mov	r3, r0
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	ee07 3a90 	vmov	s15, r3
 8016474:	eeb0 0a67 	vmov.f32	s0, s15
 8016478:	3708      	adds	r7, #8
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}

0801647e <_ZN3Mat8V_VectorILt4EEC1ERKSt5arrayIfLj4EE>:
V_Vector<length>::V_Vector(const std::array<float, length>& values) : Matrix<length, 1>(values) {}
 801647e:	b580      	push	{r7, lr}
 8016480:	b082      	sub	sp, #8
 8016482:	af00      	add	r7, sp, #0
 8016484:	6078      	str	r0, [r7, #4]
 8016486:	6039      	str	r1, [r7, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6839      	ldr	r1, [r7, #0]
 801648c:	4618      	mov	r0, r3
 801648e:	f000 f8fc 	bl	801668a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4618      	mov	r0, r3
 8016496:	3708      	adds	r7, #8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <_ZN3Mat6MatrixILt4ELt3EEmLEf>:
inline Matrix<heigth, width> &Matrix<heigth, width>::operator*=(float val)
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	ed87 0a00 	vstr	s0, [r7]
    for(u_int i = 0; i < _values.size(); ++i) _values[i] *= val;
 80164a8:	2300      	movs	r3, #0
 80164aa:	60fb      	str	r3, [r7, #12]
 80164ac:	e010      	b.n	80164d0 <_ZN3Mat6MatrixILt4ELt3EEmLEf+0x34>
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	68f9      	ldr	r1, [r7, #12]
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7fd fd6a 	bl	8013f8c <_ZNSt5arrayIfLj12EEixEj>
 80164b8:	4603      	mov	r3, r0
 80164ba:	ed93 7a00 	vldr	s14, [r3]
 80164be:	edd7 7a00 	vldr	s15, [r7]
 80164c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164c6:	edc3 7a00 	vstr	s15, [r3]
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	3301      	adds	r3, #1
 80164ce:	60fb      	str	r3, [r7, #12]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	4618      	mov	r0, r3
 80164d4:	f000 f8ea 	bl	80166ac <_ZNKSt5arrayIfLj12EE4sizeEv>
 80164d8:	4602      	mov	r2, r0
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	4293      	cmp	r3, r2
 80164de:	bf34      	ite	cc
 80164e0:	2301      	movcc	r3, #1
 80164e2:	2300      	movcs	r3, #0
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1e1      	bne.n	80164ae <_ZN3Mat6MatrixILt4ELt3EEmLEf+0x12>
	return *this;
 80164ea:	687b      	ldr	r3, [r7, #4]
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3710      	adds	r7, #16
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	601a      	str	r2, [r3, #0]
 8016506:	bf00      	nop
 8016508:	370c      	adds	r7, #12
 801650a:	46bd      	mov	sp, r7
 801650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016510:	4770      	bx	lr

08016512 <_ZN3Mat6MatrixILt6ELt1EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8016512:	b590      	push	{r4, r7, lr}
 8016514:	b083      	sub	sp, #12
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
 801651a:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	4618      	mov	r0, r3
 8016522:	f000 f8ce 	bl	80166c2 <_ZNSt5arrayIfLj6EE5beginEv>
 8016526:	4604      	mov	r4, r0
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	4618      	mov	r0, r3
 801652c:	f000 f8d5 	bl	80166da <_ZNSt5arrayIfLj6EE3endEv>
 8016530:	4603      	mov	r3, r0
 8016532:	edd7 7a00 	vldr	s15, [r7]
 8016536:	eeb0 0a67 	vmov.f32	s0, s15
 801653a:	4619      	mov	r1, r3
 801653c:	4620      	mov	r0, r4
 801653e:	f000 f8d9 	bl	80166f4 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	4618      	mov	r0, r3
 8016546:	370c      	adds	r7, #12
 8016548:	46bd      	mov	sp, r7
 801654a:	bd90      	pop	{r4, r7, pc}

0801654c <_ZNSt5arrayIfLj24EE5beginEv>:
      begin() noexcept
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f000 f8e9 	bl	801672c <_ZNSt5arrayIfLj24EE4dataEv>
 801655a:	4603      	mov	r3, r0
 801655c:	4618      	mov	r0, r3
 801655e:	3708      	adds	r7, #8
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}

08016564 <_ZNSt5arrayIfLj24EE3endEv>:
      end() noexcept
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f000 f8dd 	bl	801672c <_ZNSt5arrayIfLj24EE4dataEv>
 8016572:	4603      	mov	r3, r0
 8016574:	3360      	adds	r3, #96	; 0x60
 8016576:	4618      	mov	r0, r3
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 801657e:	b580      	push	{r7, lr}
 8016580:	b084      	sub	sp, #16
 8016582:	af00      	add	r7, sp, #0
 8016584:	60f8      	str	r0, [r7, #12]
 8016586:	60b9      	str	r1, [r7, #8]
 8016588:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 801658c:	e007      	b.n	801659e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 801658e:	1d3b      	adds	r3, r7, #4
 8016590:	68f9      	ldr	r1, [r7, #12]
 8016592:	4618      	mov	r0, r3
 8016594:	f7ff fe29 	bl	80161ea <_ZZN3Mat6MatrixILt6ELt4EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	3304      	adds	r3, #4
 801659c:	60fb      	str	r3, [r7, #12]
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d1f3      	bne.n	801658e <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt4EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	ee07 3a90 	vmov	s15, r3
    }
 80165ac:	eeb0 0a67 	vmov.f32	s0, s15
 80165b0:	3710      	adds	r7, #16
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <_ZNKSt5arrayIfLj3EE5beginEv>:
      begin() const noexcept
 80165b6:	b580      	push	{r7, lr}
 80165b8:	b082      	sub	sp, #8
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 f8c1 	bl	8016746 <_ZNKSt5arrayIfLj3EE4dataEv>
 80165c4:	4603      	mov	r3, r0
 80165c6:	4618      	mov	r0, r3
 80165c8:	3708      	adds	r7, #8
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}

080165ce <_ZNKSt5arrayIfLj3EE3endEv>:
      end() const noexcept
 80165ce:	b580      	push	{r7, lr}
 80165d0:	b082      	sub	sp, #8
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 f8b5 	bl	8016746 <_ZNKSt5arrayIfLj3EE4dataEv>
 80165dc:	4603      	mov	r3, r0
 80165de:	330c      	adds	r3, #12
 80165e0:	4618      	mov	r0, r3
 80165e2:	3708      	adds	r7, #8
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b084      	sub	sp, #16
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 80165f4:	e00b      	b.n	801660e <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	edd3 7a00 	vldr	s15, [r3]
 80165fc:	1d3b      	adds	r3, r7, #4
 80165fe:	eeb0 0a67 	vmov.f32	s0, s15
 8016602:	4618      	mov	r0, r3
 8016604:	f7ff fe41 	bl	801628a <_ZZNK3Mat8V_VectorILt3EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	3304      	adds	r3, #4
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	68fa      	ldr	r2, [r7, #12]
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	429a      	cmp	r2, r3
 8016614:	d1ef      	bne.n	80165f6 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt3EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8016616:	687b      	ldr	r3, [r7, #4]
    }
 8016618:	4618      	mov	r0, r3
 801661a:	3710      	adds	r7, #16
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <_ZNKSt5arrayIfLj4EE5beginEv>:
      begin() const noexcept
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 f899 	bl	8016760 <_ZNKSt5arrayIfLj4EE4dataEv>
 801662e:	4603      	mov	r3, r0
 8016630:	4618      	mov	r0, r3
 8016632:	3708      	adds	r7, #8
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <_ZNKSt5arrayIfLj4EE3endEv>:
      end() const noexcept
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f000 f88d 	bl	8016760 <_ZNKSt5arrayIfLj4EE4dataEv>
 8016646:	4603      	mov	r3, r0
 8016648:	3310      	adds	r3, #16
 801664a:	4618      	mov	r0, r3
 801664c:	3708      	adds	r7, #8
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}

08016652 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8016652:	b580      	push	{r7, lr}
 8016654:	b084      	sub	sp, #16
 8016656:	af00      	add	r7, sp, #0
 8016658:	60f8      	str	r0, [r7, #12]
 801665a:	60b9      	str	r1, [r7, #8]
 801665c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 801665e:	e00b      	b.n	8016678 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_+0x26>
	__f(*__first);
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	edd3 7a00 	vldr	s15, [r3]
 8016666:	1d3b      	adds	r3, r7, #4
 8016668:	eeb0 0a67 	vmov.f32	s0, s15
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff fe4a 	bl	8016306 <_ZZNK3Mat8V_VectorILt4EE4NormEvENKUlfE_clEf>
      for (; __first != __last; ++__first)
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	3304      	adds	r3, #4
 8016676:	60fb      	str	r3, [r7, #12]
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	429a      	cmp	r2, r3
 801667e:	d1ef      	bne.n	8016660 <_ZSt8for_eachIPKfZNK3Mat8V_VectorILt4EE4NormEvEUlfE_ET0_T_S7_S6_+0xe>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8016680:	687b      	ldr	r3, [r7, #4]
    }
 8016682:	4618      	mov	r0, r3
 8016684:	3710      	adds	r7, #16
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}

0801668a <_ZN3Mat6MatrixILt4ELt1EEC1ERKSt5arrayIfLj4EE>:
Matrix<heigth, width>::Matrix(const std::array<float, heigth*width>& values): _values(values) {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 801668a:	b490      	push	{r4, r7}
 801668c:	b082      	sub	sp, #8
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]
 8016692:	6039      	str	r1, [r7, #0]
 8016694:	687a      	ldr	r2, [r7, #4]
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	4614      	mov	r4, r2
 801669a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801669c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	4618      	mov	r0, r3
 80166a4:	3708      	adds	r7, #8
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bc90      	pop	{r4, r7}
 80166aa:	4770      	bx	lr

080166ac <_ZNKSt5arrayIfLj12EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80166ac:	b480      	push	{r7}
 80166ae:	b083      	sub	sp, #12
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	230c      	movs	r3, #12
 80166b6:	4618      	mov	r0, r3
 80166b8:	370c      	adds	r7, #12
 80166ba:	46bd      	mov	sp, r7
 80166bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c0:	4770      	bx	lr

080166c2 <_ZNSt5arrayIfLj6EE5beginEv>:
      begin() noexcept
 80166c2:	b580      	push	{r7, lr}
 80166c4:	b082      	sub	sp, #8
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f000 f855 	bl	801677a <_ZNSt5arrayIfLj6EE4dataEv>
 80166d0:	4603      	mov	r3, r0
 80166d2:	4618      	mov	r0, r3
 80166d4:	3708      	adds	r7, #8
 80166d6:	46bd      	mov	sp, r7
 80166d8:	bd80      	pop	{r7, pc}

080166da <_ZNSt5arrayIfLj6EE3endEv>:
      end() noexcept
 80166da:	b580      	push	{r7, lr}
 80166dc:	b082      	sub	sp, #8
 80166de:	af00      	add	r7, sp, #0
 80166e0:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 f849 	bl	801677a <_ZNSt5arrayIfLj6EE4dataEv>
 80166e8:	4603      	mov	r3, r0
 80166ea:	3318      	adds	r3, #24
 80166ec:	4618      	mov	r0, r3
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8016702:	e007      	b.n	8016714 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8016704:	1d3b      	adds	r3, r7, #4
 8016706:	68f9      	ldr	r1, [r7, #12]
 8016708:	4618      	mov	r0, r3
 801670a:	f7ff fef3 	bl	80164f4 <_ZZN3Mat6MatrixILt6ELt1EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	3304      	adds	r3, #4
 8016712:	60fb      	str	r3, [r7, #12]
 8016714:	68fa      	ldr	r2, [r7, #12]
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	429a      	cmp	r2, r3
 801671a:	d1f3      	bne.n	8016704 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt1EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	ee07 3a90 	vmov	s15, r3
    }
 8016722:	eeb0 0a67 	vmov.f32	s0, s15
 8016726:	3710      	adds	r7, #16
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <_ZNSt5arrayIfLj24EE4dataEv>:
      data() noexcept
 801672c:	b580      	push	{r7, lr}
 801672e:	b082      	sub	sp, #8
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	4618      	mov	r0, r3
 8016738:	f000 f82c 	bl	8016794 <_ZNSt14__array_traitsIfLj24EE6_S_ptrERA24_Kf>
 801673c:	4603      	mov	r3, r0
 801673e:	4618      	mov	r0, r3
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <_ZNKSt5arrayIfLj3EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 8016746:	b580      	push	{r7, lr}
 8016748:	b082      	sub	sp, #8
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	4618      	mov	r0, r3
 8016752:	f7f7 ff55 	bl	800e600 <_ZNSt14__array_traitsIfLj3EE6_S_ptrERA3_Kf>
 8016756:	4603      	mov	r3, r0
 8016758:	4618      	mov	r0, r3
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <_ZNKSt5arrayIfLj4EE4dataEv>:
      data() const noexcept
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4618      	mov	r0, r3
 801676c:	f000 f81d 	bl	80167aa <_ZNSt14__array_traitsIfLj4EE6_S_ptrERA4_Kf>
 8016770:	4603      	mov	r3, r0
 8016772:	4618      	mov	r0, r3
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}

0801677a <_ZNSt5arrayIfLj6EE4dataEv>:
      data() noexcept
 801677a:	b580      	push	{r7, lr}
 801677c:	b082      	sub	sp, #8
 801677e:	af00      	add	r7, sp, #0
 8016780:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	4618      	mov	r0, r3
 8016786:	f000 f81b 	bl	80167c0 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>
 801678a:	4603      	mov	r3, r0
 801678c:	4618      	mov	r0, r3
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <_ZNSt14__array_traitsIfLj24EE6_S_ptrERA24_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8016794:	b480      	push	{r7}
 8016796:	b083      	sub	sp, #12
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	4618      	mov	r0, r3
 80167a0:	370c      	adds	r7, #12
 80167a2:	46bd      	mov	sp, r7
 80167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a8:	4770      	bx	lr

080167aa <_ZNSt14__array_traitsIfLj4EE6_S_ptrERA4_Kf>:
      _S_ptr(const _Type& __t) noexcept
 80167aa:	b480      	push	{r7}
 80167ac:	b083      	sub	sp, #12
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	4618      	mov	r0, r3
 80167b6:	370c      	adds	r7, #12
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr

080167c0 <_ZNSt14__array_traitsIfLj6EE6_S_ptrERA6_Kf>:
      _S_ptr(const _Type& __t) noexcept
 80167c0:	b480      	push	{r7}
 80167c2:	b083      	sub	sp, #12
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	4618      	mov	r0, r3
 80167cc:	370c      	adds	r7, #12
 80167ce:	46bd      	mov	sp, r7
 80167d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d4:	4770      	bx	lr
	...

080167d8 <_Z41__static_initialization_and_destruction_0ii>:

} //namespace Algorithms
 80167d8:	b580      	push	{r7, lr}
 80167da:	ed2d 8b02 	vpush	{d8}
 80167de:	b08c      	sub	sp, #48	; 0x30
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	6039      	str	r1, [r7, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2b01      	cmp	r3, #1
 80167ea:	d15c      	bne.n	80168a6 <_Z41__static_initialization_and_destruction_0ii+0xce>
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d157      	bne.n	80168a6 <_Z41__static_initialization_and_destruction_0ii+0xce>
const V_Vector<3> _r{{0.0f, 12.10f, -47.2f}};
 80167f6:	4a2f      	ldr	r2, [pc, #188]	; (80168b4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80167f8:	f107 030c 	add.w	r3, r7, #12
 80167fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80167fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016802:	f107 030c 	add.w	r3, r7, #12
 8016806:	4619      	mov	r1, r3
 8016808:	482b      	ldr	r0, [pc, #172]	; (80168b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801680a:	f7ff fd1a 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r{{0.0f, _r(1) * (1 / _r.Norm()), _r(2) * (1 / _r.Norm())}};
 801680e:	f04f 0300 	mov.w	r3, #0
 8016812:	61bb      	str	r3, [r7, #24]
 8016814:	2101      	movs	r1, #1
 8016816:	4828      	ldr	r0, [pc, #160]	; (80168b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016818:	f7ff fd22 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801681c:	eeb0 8a40 	vmov.f32	s16, s0
 8016820:	4825      	ldr	r0, [pc, #148]	; (80168b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016822:	f7ff fd4c 	bl	80162be <_ZNK3Mat8V_VectorILt3EE4NormEv>
 8016826:	eeb0 7a40 	vmov.f32	s14, s0
 801682a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801682e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016832:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016836:	edc7 7a07 	vstr	s15, [r7, #28]
 801683a:	2102      	movs	r1, #2
 801683c:	481e      	ldr	r0, [pc, #120]	; (80168b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801683e:	f7ff fd0f 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8016842:	eeb0 8a40 	vmov.f32	s16, s0
 8016846:	481c      	ldr	r0, [pc, #112]	; (80168b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016848:	f7ff fd39 	bl	80162be <_ZNK3Mat8V_VectorILt3EE4NormEv>
 801684c:	eeb0 7a40 	vmov.f32	s14, s0
 8016850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016858:	ee68 7a27 	vmul.f32	s15, s16, s15
 801685c:	edc7 7a08 	vstr	s15, [r7, #32]
 8016860:	f107 0318 	add.w	r3, r7, #24
 8016864:	4619      	mov	r1, r3
 8016866:	4815      	ldr	r0, [pc, #84]	; (80168bc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016868:	f7ff fceb 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
const V_Vector<3> r2{{0.0f, r(1)*2.0f, r(2)*2.0f}};
 801686c:	f04f 0300 	mov.w	r3, #0
 8016870:	627b      	str	r3, [r7, #36]	; 0x24
 8016872:	2101      	movs	r1, #1
 8016874:	4811      	ldr	r0, [pc, #68]	; (80168bc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8016876:	f7ff fcf3 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801687a:	eef0 7a40 	vmov.f32	s15, s0
 801687e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016882:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016886:	2102      	movs	r1, #2
 8016888:	480c      	ldr	r0, [pc, #48]	; (80168bc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 801688a:	f7ff fce9 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801688e:	eef0 7a40 	vmov.f32	s15, s0
 8016892:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016896:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 801689a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801689e:	4619      	mov	r1, r3
 80168a0:	4807      	ldr	r0, [pc, #28]	; (80168c0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80168a2:	f7ff fcce 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
} //namespace Algorithms
 80168a6:	bf00      	nop
 80168a8:	3730      	adds	r7, #48	; 0x30
 80168aa:	46bd      	mov	sp, r7
 80168ac:	ecbd 8b02 	vpop	{d8}
 80168b0:	bd80      	pop	{r7, pc}
 80168b2:	bf00      	nop
 80168b4:	080202cc 	.word	0x080202cc
 80168b8:	240094f0 	.word	0x240094f0
 80168bc:	240094fc 	.word	0x240094fc
 80168c0:	24009508 	.word	0x24009508

080168c4 <_GLOBAL__sub_I__ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:
 80168c4:	b580      	push	{r7, lr}
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80168cc:	2001      	movs	r0, #1
 80168ce:	f7ff ff83 	bl	80167d8 <_Z41__static_initialization_and_destruction_0ii>
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>:

namespace Algorithms
{

void VelocityEKF::Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	60f8      	str	r0, [r7, #12]
 80168dc:	60b9      	str	r1, [r7, #8]
 80168de:	607a      	str	r2, [r7, #4]
 80168e0:	ed87 0a00 	vstr	s0, [r7]
	_UpdateVelocity(meassurementVec, meassurementCov);
 80168e4:	687a      	ldr	r2, [r7, #4]
 80168e6:	68b9      	ldr	r1, [r7, #8]
 80168e8:	68f8      	ldr	r0, [r7, #12]
 80168ea:	f000 f80d 	bl	8016908 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_UpdatePosition(meassurementVec, meassurementCov);
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	68b9      	ldr	r1, [r7, #8]
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f000 f9f6 	bl	8016ce4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>
	_time = time;
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	683a      	ldr	r2, [r7, #0]
 80168fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8016900:	bf00      	nop
 8016902:	3710      	adds	r7, #16
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdateVelocity(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8016908:	b590      	push	{r4, r7, lr}
 801690a:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 801690e:	af00      	add	r7, sp, #0
 8016910:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016914:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016918:	6018      	str	r0, [r3, #0]
 801691a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801691e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016922:	6019      	str	r1, [r3, #0]
 8016924:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016928:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 801692c:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(0), meassurementVec(1), meassurementVec(2)}};
 801692e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016932:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016936:	2100      	movs	r1, #0
 8016938:	6818      	ldr	r0, [r3, #0]
 801693a:	f7f7 fabe 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801693e:	eef0 7a40 	vmov.f32	s15, s0
 8016942:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016946:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801694a:	edc3 7a00 	vstr	s15, [r3]
 801694e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016952:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016956:	2101      	movs	r1, #1
 8016958:	6818      	ldr	r0, [r3, #0]
 801695a:	f7f7 faae 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801695e:	eef0 7a40 	vmov.f32	s15, s0
 8016962:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016966:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801696a:	edc3 7a01 	vstr	s15, [r3, #4]
 801696e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016972:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016976:	2102      	movs	r1, #2
 8016978:	6818      	ldr	r0, [r3, #0]
 801697a:	f7f7 fa9e 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801697e:	eef0 7a40 	vmov.f32	s15, s0
 8016982:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016986:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801698a:	edc3 7a02 	vstr	s15, [r3, #8]
 801698e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8016992:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016996:	4611      	mov	r1, r2
 8016998:	4618      	mov	r0, r3
 801699a:	f7ff fc52 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(0), _state(1), _state(2)}};
 801699e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169a2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	3304      	adds	r3, #4
 80169aa:	2100      	movs	r1, #0
 80169ac:	4618      	mov	r0, r3
 80169ae:	f001 f847 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80169b2:	4603      	mov	r3, r0
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169ba:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80169be:	601a      	str	r2, [r3, #0]
 80169c0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169c4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	3304      	adds	r3, #4
 80169cc:	2101      	movs	r1, #1
 80169ce:	4618      	mov	r0, r3
 80169d0:	f001 f836 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80169d4:	4603      	mov	r3, r0
 80169d6:	681a      	ldr	r2, [r3, #0]
 80169d8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169dc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80169e0:	605a      	str	r2, [r3, #4]
 80169e2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169e6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	3304      	adds	r3, #4
 80169ee:	2102      	movs	r1, #2
 80169f0:	4618      	mov	r0, r3
 80169f2:	f001 f825 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80169f6:	4603      	mov	r3, r0
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80169fe:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016a02:	609a      	str	r2, [r3, #8]
 8016a04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016a08:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8016a0c:	4611      	mov	r1, r2
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7ff fc17 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8016a14:	4bae      	ldr	r3, [pc, #696]	; (8016cd0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	f3bf 8f5b 	dmb	ish
 8016a1c:	f003 0301 	and.w	r3, r3, #1
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	bf0c      	ite	eq
 8016a24:	2301      	moveq	r3, #1
 8016a26:	2300      	movne	r3, #0
 8016a28:	b2db      	uxtb	r3, r3
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d012      	beq.n	8016a54 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8016a2e:	48a8      	ldr	r0, [pc, #672]	; (8016cd0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016a30:	f006 fc62 	bl	801d2f8 <__cxa_guard_acquire>
 8016a34:	4603      	mov	r3, r0
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	bf14      	ite	ne
 8016a3a:	2301      	movne	r3, #1
 8016a3c:	2300      	moveq	r3, #0
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d007      	beq.n	8016a54 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x14c>
 8016a44:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8016cd4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8016a48:	48a3      	ldr	r0, [pc, #652]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016a4a:	f001 f819 	bl	8017a80 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8016a4e:	48a0      	ldr	r0, [pc, #640]	; (8016cd0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3c8>)
 8016a50:	f006 fc5e 	bl	801d310 <__cxa_guard_release>
	H(0,0) = 1.0f; H(1,1) = 1.0f; H(2,2) = 1.0f;
 8016a54:	2200      	movs	r2, #0
 8016a56:	2100      	movs	r1, #0
 8016a58:	489f      	ldr	r0, [pc, #636]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016a5a:	f001 f82e 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016a64:	601a      	str	r2, [r3, #0]
 8016a66:	2201      	movs	r2, #1
 8016a68:	2101      	movs	r1, #1
 8016a6a:	489b      	ldr	r0, [pc, #620]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016a6c:	f001 f825 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016a70:	4603      	mov	r3, r0
 8016a72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016a76:	601a      	str	r2, [r3, #0]
 8016a78:	2202      	movs	r2, #2
 8016a7a:	2102      	movs	r1, #2
 8016a7c:	4896      	ldr	r0, [pc, #600]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016a7e:	f001 f81c 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016a82:	4603      	mov	r3, r0
 8016a84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016a88:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8016a8a:	4b94      	ldr	r3, [pc, #592]	; (8016cdc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	f3bf 8f5b 	dmb	ish
 8016a92:	f003 0301 	and.w	r3, r3, #1
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	bf0c      	ite	eq
 8016a9a:	2301      	moveq	r3, #1
 8016a9c:	2300      	movne	r3, #0
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d012      	beq.n	8016aca <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8016aa4:	488d      	ldr	r0, [pc, #564]	; (8016cdc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016aa6:	f006 fc27 	bl	801d2f8 <__cxa_guard_acquire>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	bf14      	ite	ne
 8016ab0:	2301      	movne	r3, #1
 8016ab2:	2300      	moveq	r3, #0
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d007      	beq.n	8016aca <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c2>
 8016aba:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016cd4 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3cc>
 8016abe:	4888      	ldr	r0, [pc, #544]	; (8016ce0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016ac0:	f7f7 fa75 	bl	800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8016ac4:	4885      	ldr	r0, [pc, #532]	; (8016cdc <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d4>)
 8016ac6:	f006 fc23 	bl	801d310 <__cxa_guard_release>
	R(0,0) = meassurementCov(0,0); R(1,1) = meassurementCov(1,1); R(2,2) = meassurementCov(2,2);
 8016aca:	2200      	movs	r2, #0
 8016acc:	2100      	movs	r1, #0
 8016ace:	4884      	ldr	r0, [pc, #528]	; (8016ce0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016ad0:	f7f7 fa8a 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ada:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016ade:	2200      	movs	r2, #0
 8016ae0:	2100      	movs	r1, #0
 8016ae2:	6818      	ldr	r0, [r3, #0]
 8016ae4:	f7f9 fc71 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016ae8:	eef0 7a40 	vmov.f32	s15, s0
 8016aec:	edc4 7a00 	vstr	s15, [r4]
 8016af0:	2201      	movs	r2, #1
 8016af2:	2101      	movs	r1, #1
 8016af4:	487a      	ldr	r0, [pc, #488]	; (8016ce0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016af6:	f7f7 fa77 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016afa:	4604      	mov	r4, r0
 8016afc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b00:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016b04:	2201      	movs	r2, #1
 8016b06:	2101      	movs	r1, #1
 8016b08:	6818      	ldr	r0, [r3, #0]
 8016b0a:	f7f9 fc5e 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016b0e:	eef0 7a40 	vmov.f32	s15, s0
 8016b12:	edc4 7a00 	vstr	s15, [r4]
 8016b16:	2202      	movs	r2, #2
 8016b18:	2102      	movs	r1, #2
 8016b1a:	4871      	ldr	r0, [pc, #452]	; (8016ce0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016b1c:	f7f7 fa64 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016b20:	4604      	mov	r4, r0
 8016b22:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b26:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016b2a:	2202      	movs	r2, #2
 8016b2c:	2102      	movs	r1, #2
 8016b2e:	6818      	ldr	r0, [r3, #0]
 8016b30:	f7f9 fc4b 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016b34:	eef0 7a40 	vmov.f32	s15, s0
 8016b38:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8016b3c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b40:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	f103 021c 	add.w	r2, r3, #28
 8016b4a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b4e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8016b52:	4961      	ldr	r1, [pc, #388]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016b54:	4618      	mov	r0, r3
 8016b56:	f000 ffcb 	bl	8017af0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016b5a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b5e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8016b62:	495d      	ldr	r1, [pc, #372]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016b64:	4618      	mov	r0, r3
 8016b66:	f000 ffd6 	bl	8017b16 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016b6a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b6e:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8016b72:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8016b76:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f000 fffb 	bl	8017b76 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016b80:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b84:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8016b88:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8016b8c:	4a54      	ldr	r2, [pc, #336]	; (8016ce0 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d8>)
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7fc fc8d 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8016b94:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016b98:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	f103 041c 	add.w	r4, r3, #28
 8016ba2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ba6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8016baa:	494b      	ldr	r1, [pc, #300]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016bac:	4618      	mov	r0, r3
 8016bae:	f000 ffb2 	bl	8017b16 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016bb2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bb6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8016bba:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f000 ffeb 	bl	8017b9c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8016bc6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bca:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8016bce:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8016bd2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bd6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016bda:	6819      	ldr	r1, [r3, #0]
 8016bdc:	f000 fd42 	bl	8017664 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8016be0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016be4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8016be8:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8016bec:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f000 ffe6 	bl	8017bc2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8016bf6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016bfa:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	1d1c      	adds	r4, r3, #4
 8016c02:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8016c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016c0a:	4611      	mov	r1, r2
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7f9 ffc0 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 8016c12:	eef0 6a40 	vmov.f32	s13, s0
 8016c16:	eeb0 7a60 	vmov.f32	s14, s1
 8016c1a:	eef0 7a41 	vmov.f32	s15, s2
 8016c1e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8016c26:	edc3 6a00 	vstr	s13, [r3]
 8016c2a:	ed83 7a01 	vstr	s14, [r3, #4]
 8016c2e:	edc3 7a02 	vstr	s15, [r3, #8]
 8016c32:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8016c3a:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8016c3e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8016c42:	4618      	mov	r0, r3
 8016c44:	f000 ffd0 	bl	8017be8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8016c48:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	4620      	mov	r0, r4
 8016c50:	f7f8 fc1a 	bl	800f488 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 8016c54:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016c5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7f8 fc47 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8016c66:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8016c6a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8016c6e:	4a1a      	ldr	r2, [pc, #104]	; (8016cd8 <_ZN10Algorithms11VelocityEKF15_UpdateVelocityERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x3d0>)
 8016c70:	4618      	mov	r0, r3
 8016c72:	f000 ffcc 	bl	8017c0e <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8016c76:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8016c7e:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8016c82:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7f8 fc58 	bl	800f53c <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 8016c8c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c90:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f103 021c 	add.w	r2, r3, #28
 8016c9a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016c9e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016ca2:	681c      	ldr	r4, [r3, #0]
 8016ca4:	463b      	mov	r3, r7
 8016ca6:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7f8 fb96 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 8016cb0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016cb4:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 8016cb8:	f104 031c 	add.w	r3, r4, #28
 8016cbc:	4611      	mov	r1, r2
 8016cbe:	2290      	movs	r2, #144	; 0x90
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f007 faca 	bl	801e25a <memcpy>
}
 8016cc6:	bf00      	nop
 8016cc8:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd90      	pop	{r4, r7, pc}
 8016cd0:	240095f8 	.word	0x240095f8
 8016cd4:	00000000 	.word	0x00000000
 8016cd8:	240095b0 	.word	0x240095b0
 8016cdc:	24009620 	.word	0x24009620
 8016ce0:	240095fc 	.word	0x240095fc

08016ce4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE>:

void VelocityEKF::_UpdatePosition(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov)
{
 8016ce4:	b590      	push	{r4, r7, lr}
 8016ce6:	ed2d 8b02 	vpush	{d8}
 8016cea:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016cf4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016cf8:	6018      	str	r0, [r3, #0]
 8016cfa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016cfe:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016d02:	6019      	str	r1, [r3, #0]
 8016d04:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d08:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016d0c:	601a      	str	r2, [r3, #0]
	V_Vector<3> z{{meassurementVec(3), meassurementVec(4), meassurementVec(5)}};
 8016d0e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d12:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016d16:	2103      	movs	r1, #3
 8016d18:	6818      	ldr	r0, [r3, #0]
 8016d1a:	f7f7 f8ce 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8016d1e:	eef0 7a40 	vmov.f32	s15, s0
 8016d22:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d26:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016d2a:	edc3 7a00 	vstr	s15, [r3]
 8016d2e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d32:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016d36:	2104      	movs	r1, #4
 8016d38:	6818      	ldr	r0, [r3, #0]
 8016d3a:	f7f7 f8be 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8016d3e:	eef0 7a40 	vmov.f32	s15, s0
 8016d42:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d46:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016d4a:	edc3 7a01 	vstr	s15, [r3, #4]
 8016d4e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d52:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8016d56:	2105      	movs	r1, #5
 8016d58:	6818      	ldr	r0, [r3, #0]
 8016d5a:	f7f7 f8ae 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8016d5e:	eef0 7a40 	vmov.f32	s15, s0
 8016d62:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d66:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8016d6a:	edc3 7a02 	vstr	s15, [r3, #8]
 8016d6e:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8016d72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016d76:	4611      	mov	r1, r2
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7ff fa62 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	V_Vector<3> h{{_state(3), _state(4), _state(5)}};
 8016d7e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d82:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	3304      	adds	r3, #4
 8016d8a:	2103      	movs	r1, #3
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f000 fe57 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8016d92:	4603      	mov	r3, r0
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016d9a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016d9e:	601a      	str	r2, [r3, #0]
 8016da0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016da4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	3304      	adds	r3, #4
 8016dac:	2104      	movs	r1, #4
 8016dae:	4618      	mov	r0, r3
 8016db0:	f000 fe46 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8016db4:	4603      	mov	r3, r0
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016dbc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016dc0:	605a      	str	r2, [r3, #4]
 8016dc2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016dc6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	3304      	adds	r3, #4
 8016dce:	2105      	movs	r1, #5
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f000 fe35 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016dde:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8016de2:	609a      	str	r2, [r3, #8]
 8016de4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016de8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8016dec:	4611      	mov	r1, r2
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7ff fa27 	bl	8016242 <_ZN3Mat8V_VectorILt3EEC1ERKSt5arrayIfLj3EE>
	static Matrix<3, VelocityEKF_stateLen> H{0.0f};
 8016df4:	4bbe      	ldr	r3, [pc, #760]	; (80170f0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f3bf 8f5b 	dmb	ish
 8016dfc:	f003 0301 	and.w	r3, r3, #1
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	bf0c      	ite	eq
 8016e04:	2301      	moveq	r3, #1
 8016e06:	2300      	movne	r3, #0
 8016e08:	b2db      	uxtb	r3, r3
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d012      	beq.n	8016e34 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8016e0e:	48b8      	ldr	r0, [pc, #736]	; (80170f0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8016e10:	f006 fa72 	bl	801d2f8 <__cxa_guard_acquire>
 8016e14:	4603      	mov	r3, r0
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	bf14      	ite	ne
 8016e1a:	2301      	movne	r3, #1
 8016e1c:	2300      	moveq	r3, #0
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d007      	beq.n	8016e34 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x150>
 8016e24:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80170f4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 8016e28:	48b3      	ldr	r0, [pc, #716]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016e2a:	f000 fe29 	bl	8017a80 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>
 8016e2e:	48b0      	ldr	r0, [pc, #704]	; (80170f0 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x40c>)
 8016e30:	f006 fa6e 	bl	801d310 <__cxa_guard_release>
	H(0,3) = 1.0f; H(1,4) = 1.0f; H(2,5) = 1.0f;
 8016e34:	2203      	movs	r2, #3
 8016e36:	2100      	movs	r1, #0
 8016e38:	48af      	ldr	r0, [pc, #700]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016e3a:	f000 fe3e 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016e44:	601a      	str	r2, [r3, #0]
 8016e46:	2204      	movs	r2, #4
 8016e48:	2101      	movs	r1, #1
 8016e4a:	48ab      	ldr	r0, [pc, #684]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016e4c:	f000 fe35 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016e50:	4603      	mov	r3, r0
 8016e52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016e56:	601a      	str	r2, [r3, #0]
 8016e58:	2205      	movs	r2, #5
 8016e5a:	2102      	movs	r1, #2
 8016e5c:	48a6      	ldr	r0, [pc, #664]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016e5e:	f000 fe2c 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8016e62:	4603      	mov	r3, r0
 8016e64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016e68:	601a      	str	r2, [r3, #0]
	static Matrix<3, 3> R{0.0f};
 8016e6a:	4ba4      	ldr	r3, [pc, #656]	; (80170fc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f3bf 8f5b 	dmb	ish
 8016e72:	f003 0301 	and.w	r3, r3, #1
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	bf0c      	ite	eq
 8016e7a:	2301      	moveq	r3, #1
 8016e7c:	2300      	movne	r3, #0
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d012      	beq.n	8016eaa <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8016e84:	489d      	ldr	r0, [pc, #628]	; (80170fc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8016e86:	f006 fa37 	bl	801d2f8 <__cxa_guard_acquire>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	bf14      	ite	ne
 8016e90:	2301      	movne	r3, #1
 8016e92:	2300      	moveq	r3, #0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d007      	beq.n	8016eaa <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x1c6>
 8016e9a:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80170f4 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x410>
 8016e9e:	4898      	ldr	r0, [pc, #608]	; (8017100 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8016ea0:	f7f7 f885 	bl	800dfae <_ZN3Mat6MatrixILt3ELt3EEC1Ef>
 8016ea4:	4895      	ldr	r0, [pc, #596]	; (80170fc <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x418>)
 8016ea6:	f006 fa33 	bl	801d310 <__cxa_guard_release>
	R(0,0) = meassurementCov(3,3)*_ER; R(1,1) = meassurementCov(4,4)*_ER / cos(_state(3)); R(2,2) = meassurementCov(5,5);
 8016eaa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016eae:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016eb2:	2203      	movs	r2, #3
 8016eb4:	2103      	movs	r1, #3
 8016eb6:	6818      	ldr	r0, [r3, #0]
 8016eb8:	f7f9 fa87 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016ebc:	eeb0 8a40 	vmov.f32	s16, s0
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	488e      	ldr	r0, [pc, #568]	; (8017100 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8016ec6:	f7f7 f88f 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8017104 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 8016ed0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8016ed4:	edc3 7a00 	vstr	s15, [r3]
 8016ed8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016edc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016ee0:	2204      	movs	r2, #4
 8016ee2:	2104      	movs	r1, #4
 8016ee4:	6818      	ldr	r0, [r3, #0]
 8016ee6:	f7f9 fa70 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016eea:	eef0 7a40 	vmov.f32	s15, s0
 8016eee:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8017104 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x420>
 8016ef2:	ee27 8a87 	vmul.f32	s16, s15, s14
 8016ef6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016efa:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	3304      	adds	r3, #4
 8016f02:	2103      	movs	r1, #3
 8016f04:	4618      	mov	r0, r3
 8016f06:	f000 fd9b 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	edd3 7a00 	vldr	s15, [r3]
 8016f10:	eeb0 0a67 	vmov.f32	s0, s15
 8016f14:	f7f9 ff2e 	bl	8010d74 <_ZSt3cosf>
 8016f18:	eef0 8a40 	vmov.f32	s17, s0
 8016f1c:	2201      	movs	r2, #1
 8016f1e:	2101      	movs	r1, #1
 8016f20:	4877      	ldr	r0, [pc, #476]	; (8017100 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8016f22:	f7f7 f861 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016f26:	4603      	mov	r3, r0
 8016f28:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8016f2c:	edc3 7a00 	vstr	s15, [r3]
 8016f30:	2202      	movs	r2, #2
 8016f32:	2102      	movs	r1, #2
 8016f34:	4872      	ldr	r0, [pc, #456]	; (8017100 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8016f36:	f7f7 f857 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 8016f3a:	4604      	mov	r4, r0
 8016f3c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f40:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8016f44:	2205      	movs	r2, #5
 8016f46:	2105      	movs	r1, #5
 8016f48:	6818      	ldr	r0, [r3, #0]
 8016f4a:	f7f9 fa3e 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8016f4e:	eef0 7a40 	vmov.f32	s15, s0
 8016f52:	edc4 7a00 	vstr	s15, [r4]

	auto S = H * _stateCovMatrix * H.Transposed() + R;
 8016f56:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f5a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	f103 021c 	add.w	r2, r3, #28
 8016f64:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f68:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8016f6c:	4962      	ldr	r1, [pc, #392]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 fdbe 	bl	8017af0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016f74:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f78:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8016f7c:	495e      	ldr	r1, [pc, #376]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f000 fdc9 	bl	8017b16 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016f84:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f88:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8016f8c:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8016f90:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8016f94:	4618      	mov	r0, r3
 8016f96:	f000 fdee 	bl	8017b76 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>
 8016f9a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016f9e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8016fa2:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8016fa6:	4a56      	ldr	r2, [pc, #344]	; (8017100 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x41c>)
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7fc fa80 	bl	80134ae <_ZNK3Mat6MatrixILt3ELt3EEplERKS1_>
	auto K = _stateCovMatrix * H.Transposed() * _Invert3x3Matrix(S);
 8016fae:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fb2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	f103 041c 	add.w	r4, r3, #28
 8016fbc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fc0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8016fc4:	494c      	ldr	r1, [pc, #304]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f000 fda5 	bl	8017b16 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>
 8016fcc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fd0:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8016fd4:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8016fd8:	4621      	mov	r1, r4
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f000 fdde 	bl	8017b9c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>
 8016fe0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016fe4:	f5a3 70fc 	sub.w	r0, r3, #504	; 0x1f8
 8016fe8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8016fec:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ff0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8016ff4:	6819      	ldr	r1, [r3, #0]
 8016ff6:	f000 fb35 	bl	8017664 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>
 8016ffa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8016ffe:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8017002:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8017006:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 801700a:	4618      	mov	r0, r3
 801700c:	f000 fdd9 	bl	8017bc2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
	_state += K * (z - h);
 8017010:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017014:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	1d1c      	adds	r4, r3, #4
 801701c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8017020:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017024:	4611      	mov	r1, r2
 8017026:	4618      	mov	r0, r3
 8017028:	f7f9 fdb3 	bl	8010b92 <_ZNK3Mat6MatrixILt3ELt1EEmiERKS1_>
 801702c:	eef0 6a40 	vmov.f32	s13, s0
 8017030:	eeb0 7a60 	vmov.f32	s14, s1
 8017034:	eef0 7a41 	vmov.f32	s15, s2
 8017038:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801703c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8017040:	edc3 6a00 	vstr	s13, [r3]
 8017044:	ed83 7a01 	vstr	s14, [r3, #4]
 8017048:	edc3 7a02 	vstr	s15, [r3, #8]
 801704c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017050:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8017054:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8017058:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 801705c:	4618      	mov	r0, r3
 801705e:	f000 fdc3 	bl	8017be8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8017062:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8017066:	4619      	mov	r1, r3
 8017068:	4620      	mov	r0, r4
 801706a:	f7f8 fa0d 	bl	800f488 <_ZN3Mat6MatrixILt6ELt1EEpLERKS1_>
	_stateCovMatrix = (Eye<VelocityEKF_stateLen>(1.0f) - K*H) * _stateCovMatrix;
 801706e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017072:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017076:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801707a:	4618      	mov	r0, r3
 801707c:	f7f8 fa3a 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8017080:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8017084:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8017088:	4a1b      	ldr	r2, [pc, #108]	; (80170f8 <_ZN10Algorithms11VelocityEKF15_UpdatePositionERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEE+0x414>)
 801708a:	4618      	mov	r0, r3
 801708c:	f000 fdbf 	bl	8017c0e <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 8017090:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8017094:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017098:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 801709c:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7f8 fa4b 	bl	800f53c <_ZNK3Mat6MatrixILt6ELt6EEmiERKS1_>
 80170a6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80170aa:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	f103 021c 	add.w	r2, r3, #28
 80170b4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80170b8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80170bc:	681c      	ldr	r4, [r3, #0]
 80170be:	463b      	mov	r3, r7
 80170c0:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7f8 f989 	bl	800f3dc <_ZNK3Mat6MatrixILt6ELt6EEmlILt6EEENS0_ILt6EXT_EEERKS3_>
 80170ca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80170ce:	f5a3 628f 	sub.w	r2, r3, #1144	; 0x478
 80170d2:	f104 031c 	add.w	r3, r4, #28
 80170d6:	4611      	mov	r1, r2
 80170d8:	2290      	movs	r2, #144	; 0x90
 80170da:	4618      	mov	r0, r3
 80170dc:	f007 f8bd 	bl	801e25a <memcpy>
}
 80170e0:	bf00      	nop
 80170e2:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 80170e6:	46bd      	mov	sp, r7
 80170e8:	ecbd 8b02 	vpop	{d8}
 80170ec:	bd90      	pop	{r4, r7, pc}
 80170ee:	bf00      	nop
 80170f0:	2400966c 	.word	0x2400966c
 80170f4:	00000000 	.word	0x00000000
 80170f8:	24009624 	.word	0x24009624
 80170fc:	24009694 	.word	0x24009694
 8017100:	24009670 	.word	0x24009670
 8017104:	3428892d 	.word	0x3428892d

08017108 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateVec VelocityEKF::_f(const ControlVec& controlVec, float time) const
{
 8017108:	b580      	push	{r7, lr}
 801710a:	ed2d 8b04 	vpush	{d8-d9}
 801710e:	b088      	sub	sp, #32
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	607a      	str	r2, [r7, #4]
 8017118:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8017122:	ed97 7a00 	vldr	s14, [r7]
 8017126:	ee77 7a67 	vsub.f32	s15, s14, s15
 801712a:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 801712e:	edd7 7a07 	vldr	s15, [r7, #28]
 8017132:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017136:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 801713a:	edd7 7a06 	vldr	s15, [r7, #24]
 801713e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017146:	edc7 7a05 	vstr	s15, [r7, #20]
	StateVec result;
 801714a:	68f8      	ldr	r0, [r7, #12]
 801714c:	f7f6 fd7c 	bl	800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>
	result(0) = _state(0) + controlVec(0)*dt;
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	3304      	adds	r3, #4
 8017154:	2100      	movs	r1, #0
 8017156:	4618      	mov	r0, r3
 8017158:	f7f6 feaf 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801715c:	eef0 8a40 	vmov.f32	s17, s0
 8017160:	2100      	movs	r1, #0
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f7ff f87c 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017168:	eeb0 7a40 	vmov.f32	s14, s0
 801716c:	edd7 7a07 	vldr	s15, [r7, #28]
 8017170:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017174:	2100      	movs	r1, #0
 8017176:	68f8      	ldr	r0, [r7, #12]
 8017178:	f000 fc62 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 801717c:	4603      	mov	r3, r0
 801717e:	ee78 7a88 	vadd.f32	s15, s17, s16
 8017182:	edc3 7a00 	vstr	s15, [r3]
	result(1) = _state(1) + controlVec(1)*dt;
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	3304      	adds	r3, #4
 801718a:	2101      	movs	r1, #1
 801718c:	4618      	mov	r0, r3
 801718e:	f7f6 fe94 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017192:	eef0 8a40 	vmov.f32	s17, s0
 8017196:	2101      	movs	r1, #1
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7ff f861 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801719e:	eeb0 7a40 	vmov.f32	s14, s0
 80171a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80171a6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80171aa:	2101      	movs	r1, #1
 80171ac:	68f8      	ldr	r0, [r7, #12]
 80171ae:	f000 fc47 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80171b2:	4603      	mov	r3, r0
 80171b4:	ee78 7a88 	vadd.f32	s15, s17, s16
 80171b8:	edc3 7a00 	vstr	s15, [r3]
	result(2) = _state(2) + controlVec(2)*dt;
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	3304      	adds	r3, #4
 80171c0:	2102      	movs	r1, #2
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7f6 fe79 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80171c8:	eef0 8a40 	vmov.f32	s17, s0
 80171cc:	2102      	movs	r1, #2
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7ff f846 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80171d4:	eeb0 7a40 	vmov.f32	s14, s0
 80171d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80171dc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80171e0:	2102      	movs	r1, #2
 80171e2:	68f8      	ldr	r0, [r7, #12]
 80171e4:	f000 fc2c 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80171e8:	4603      	mov	r3, r0
 80171ea:	ee78 7a88 	vadd.f32	s15, s17, s16
 80171ee:	edc3 7a00 	vstr	s15, [r3]
	result(3) = _state(3) + (_state(1)*dt + controlVec(1)*dt2_2)*_ER;
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	3304      	adds	r3, #4
 80171f6:	2103      	movs	r1, #3
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7f6 fe5e 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80171fe:	eef0 8a40 	vmov.f32	s17, s0
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	3304      	adds	r3, #4
 8017206:	2101      	movs	r1, #1
 8017208:	4618      	mov	r0, r3
 801720a:	f7f6 fe56 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801720e:	eeb0 7a40 	vmov.f32	s14, s0
 8017212:	edd7 7a07 	vldr	s15, [r7, #28]
 8017216:	ee27 8a27 	vmul.f32	s16, s14, s15
 801721a:	2101      	movs	r1, #1
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f7ff f81f 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 8017222:	eeb0 7a40 	vmov.f32	s14, s0
 8017226:	edd7 7a05 	vldr	s15, [r7, #20]
 801722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801722e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017232:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8017328 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 8017236:	ee27 8a87 	vmul.f32	s16, s15, s14
 801723a:	2103      	movs	r1, #3
 801723c:	68f8      	ldr	r0, [r7, #12]
 801723e:	f000 fbff 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8017242:	4603      	mov	r3, r0
 8017244:	ee78 7a88 	vadd.f32	s15, s17, s16
 8017248:	edc3 7a00 	vstr	s15, [r3]
	result(4) = _state(4) + (_state(0)*dt + controlVec(0)*dt2_2)*_ER / cos(_state(3));
 801724c:	68bb      	ldr	r3, [r7, #8]
 801724e:	3304      	adds	r3, #4
 8017250:	2104      	movs	r1, #4
 8017252:	4618      	mov	r0, r3
 8017254:	f7f6 fe31 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017258:	eeb0 9a40 	vmov.f32	s18, s0
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	3304      	adds	r3, #4
 8017260:	2100      	movs	r1, #0
 8017262:	4618      	mov	r0, r3
 8017264:	f7f6 fe29 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017268:	eeb0 7a40 	vmov.f32	s14, s0
 801726c:	edd7 7a07 	vldr	s15, [r7, #28]
 8017270:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017274:	2100      	movs	r1, #0
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f7fe fff2 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 801727c:	eeb0 7a40 	vmov.f32	s14, s0
 8017280:	edd7 7a05 	vldr	s15, [r7, #20]
 8017284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017288:	ee78 7a27 	vadd.f32	s15, s16, s15
 801728c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8017328 <_ZNK10Algorithms11VelocityEKF2_fERKN3Mat8V_VectorILt3EEEf+0x220>
 8017290:	ee67 8a87 	vmul.f32	s17, s15, s14
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	3304      	adds	r3, #4
 8017298:	2103      	movs	r1, #3
 801729a:	4618      	mov	r0, r3
 801729c:	f7f6 fe0d 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80172a0:	eef0 7a40 	vmov.f32	s15, s0
 80172a4:	eeb0 0a67 	vmov.f32	s0, s15
 80172a8:	f7f9 fd64 	bl	8010d74 <_ZSt3cosf>
 80172ac:	eef0 7a40 	vmov.f32	s15, s0
 80172b0:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 80172b4:	2104      	movs	r1, #4
 80172b6:	68f8      	ldr	r0, [r7, #12]
 80172b8:	f000 fbc2 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80172bc:	4603      	mov	r3, r0
 80172be:	ee79 7a08 	vadd.f32	s15, s18, s16
 80172c2:	edc3 7a00 	vstr	s15, [r3]
	result(5) = _state(5) + _state(2)*dt + controlVec(2)*dt2_2;
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	3304      	adds	r3, #4
 80172ca:	2105      	movs	r1, #5
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7f6 fdf4 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80172d2:	eeb0 8a40 	vmov.f32	s16, s0
 80172d6:	68bb      	ldr	r3, [r7, #8]
 80172d8:	3304      	adds	r3, #4
 80172da:	2102      	movs	r1, #2
 80172dc:	4618      	mov	r0, r3
 80172de:	f7f6 fdec 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80172e2:	eeb0 7a40 	vmov.f32	s14, s0
 80172e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80172ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172ee:	ee78 8a27 	vadd.f32	s17, s16, s15
 80172f2:	2102      	movs	r1, #2
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7fe ffb3 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80172fa:	eeb0 7a40 	vmov.f32	s14, s0
 80172fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8017302:	ee27 8a27 	vmul.f32	s16, s14, s15
 8017306:	2105      	movs	r1, #5
 8017308:	68f8      	ldr	r0, [r7, #12]
 801730a:	f000 fb99 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 801730e:	4603      	mov	r3, r0
 8017310:	ee78 7a88 	vadd.f32	s15, s17, s16
 8017314:	edc3 7a00 	vstr	s15, [r3]
	return result;
 8017318:	bf00      	nop
}
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	3720      	adds	r7, #32
 801731e:	46bd      	mov	sp, r7
 8017320:	ecbd 8b04 	vpop	{d8-d9}
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	3428892d 	.word	0x3428892d

0801732c <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_F(const ControlVec& controlVec, float time) const
{
 801732c:	b580      	push	{r7, lr}
 801732e:	ed2d 8b02 	vpush	{d8}
 8017332:	b088      	sub	sp, #32
 8017334:	af00      	add	r7, sp, #0
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	60b9      	str	r1, [r7, #8]
 801733a:	607a      	str	r2, [r7, #4]
 801733c:	ed87 0a00 	vstr	s0, [r7]
	const float dt = time - _time;
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8017346:	ed97 7a00 	vldr	s14, [r7]
 801734a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801734e:	edc7 7a07 	vstr	s15, [r7, #28]
	const float dt2 = dt*dt;
 8017352:	edd7 7a07 	vldr	s15, [r7, #28]
 8017356:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801735a:	edc7 7a06 	vstr	s15, [r7, #24]
	const float dt2_2 = dt2 * 0.5f;
 801735e:	edd7 7a06 	vldr	s15, [r7, #24]
 8017362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017366:	ee67 7a87 	vmul.f32	s15, s15, s14
 801736a:	edc7 7a05 	vstr	s15, [r7, #20]
	StateCovarianceMatrix result = Eye<VelocityEKF_stateLen>(1.0f);
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017374:	4618      	mov	r0, r3
 8017376:	f7f8 f8bd 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
	result(3, 1) = dt*_ER;
 801737a:	2201      	movs	r2, #1
 801737c:	2103      	movs	r1, #3
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	f7f6 fcde 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8017384:	4603      	mov	r3, r0
 8017386:	edd7 7a07 	vldr	s15, [r7, #28]
 801738a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017498 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801738e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017392:	edc3 7a00 	vstr	s15, [r3]
	result(4, 0) = dt*_ER / cos(_state(3)); result(4, 3) = (_state(0)*dt + dt2_2*controlVec(0)) * sin(_state(3)) * _ER / (cos(_state(3)) * cos(_state(3)));
 8017396:	edd7 7a07 	vldr	s15, [r7, #28]
 801739a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8017498 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 801739e:	ee27 8a87 	vmul.f32	s16, s15, s14
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	3304      	adds	r3, #4
 80173a6:	2103      	movs	r1, #3
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7f6 fd86 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80173ae:	eef0 7a40 	vmov.f32	s15, s0
 80173b2:	eeb0 0a67 	vmov.f32	s0, s15
 80173b6:	f7f9 fcdd 	bl	8010d74 <_ZSt3cosf>
 80173ba:	eef0 8a40 	vmov.f32	s17, s0
 80173be:	2200      	movs	r2, #0
 80173c0:	2104      	movs	r1, #4
 80173c2:	68f8      	ldr	r0, [r7, #12]
 80173c4:	f7f6 fcbc 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 80173c8:	4603      	mov	r3, r0
 80173ca:	eec8 7a28 	vdiv.f32	s15, s16, s17
 80173ce:	edc3 7a00 	vstr	s15, [r3]
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	3304      	adds	r3, #4
 80173d6:	2100      	movs	r1, #0
 80173d8:	4618      	mov	r0, r3
 80173da:	f7f6 fd6e 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 80173de:	eeb0 7a40 	vmov.f32	s14, s0
 80173e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80173e6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80173ea:	2100      	movs	r1, #0
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f7fe ff37 	bl	8016260 <_ZNK3Mat8V_VectorILt3EEclEt>
 80173f2:	eeb0 7a40 	vmov.f32	s14, s0
 80173f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80173fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80173fe:	ee38 8a27 	vadd.f32	s16, s16, s15
 8017402:	68bb      	ldr	r3, [r7, #8]
 8017404:	3304      	adds	r3, #4
 8017406:	2103      	movs	r1, #3
 8017408:	4618      	mov	r0, r3
 801740a:	f7f6 fd56 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 801740e:	eef0 7a40 	vmov.f32	s15, s0
 8017412:	eeb0 0a67 	vmov.f32	s0, s15
 8017416:	f7f9 fcbd 	bl	8010d94 <_ZSt3sinf>
 801741a:	eef0 7a40 	vmov.f32	s15, s0
 801741e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8017422:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8017498 <_ZNK10Algorithms11VelocityEKF2_FERKN3Mat8V_VectorILt3EEEf+0x16c>
 8017426:	ee67 8a87 	vmul.f32	s17, s15, s14
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	3304      	adds	r3, #4
 801742e:	2103      	movs	r1, #3
 8017430:	4618      	mov	r0, r3
 8017432:	f7f6 fd42 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017436:	eef0 7a40 	vmov.f32	s15, s0
 801743a:	eeb0 0a67 	vmov.f32	s0, s15
 801743e:	f7f9 fc99 	bl	8010d74 <_ZSt3cosf>
 8017442:	eeb0 8a40 	vmov.f32	s16, s0
 8017446:	68bb      	ldr	r3, [r7, #8]
 8017448:	3304      	adds	r3, #4
 801744a:	2103      	movs	r1, #3
 801744c:	4618      	mov	r0, r3
 801744e:	f7f6 fd34 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017452:	eef0 7a40 	vmov.f32	s15, s0
 8017456:	eeb0 0a67 	vmov.f32	s0, s15
 801745a:	f7f9 fc8b 	bl	8010d74 <_ZSt3cosf>
 801745e:	eef0 7a40 	vmov.f32	s15, s0
 8017462:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017466:	2203      	movs	r2, #3
 8017468:	2104      	movs	r1, #4
 801746a:	68f8      	ldr	r0, [r7, #12]
 801746c:	f7f6 fc68 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8017470:	4603      	mov	r3, r0
 8017472:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8017476:	edc3 7a00 	vstr	s15, [r3]
	result(5, 2) = dt;
 801747a:	2202      	movs	r2, #2
 801747c:	2105      	movs	r1, #5
 801747e:	68f8      	ldr	r0, [r7, #12]
 8017480:	f7f6 fc5e 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8017484:	4602      	mov	r2, r0
 8017486:	69fb      	ldr	r3, [r7, #28]
 8017488:	6013      	str	r3, [r2, #0]
	return result;
 801748a:	bf00      	nop
}
 801748c:	68f8      	ldr	r0, [r7, #12]
 801748e:	3720      	adds	r7, #32
 8017490:	46bd      	mov	sp, r7
 8017492:	ecbd 8b02 	vpop	{d8}
 8017496:	bd80      	pop	{r7, pc}
 8017498:	3428892d 	.word	0x3428892d

0801749c <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf>:

VelocityEKF::StateCovarianceMatrix VelocityEKF::_Q(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time) const
{
 801749c:	b580      	push	{r7, lr}
 801749e:	ed2d 8b02 	vpush	{d8}
 80174a2:	b0c0      	sub	sp, #256	; 0x100
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6178      	str	r0, [r7, #20]
 80174a8:	6139      	str	r1, [r7, #16]
 80174aa:	60fa      	str	r2, [r7, #12]
 80174ac:	60bb      	str	r3, [r7, #8]
 80174ae:	ed87 0a01 	vstr	s0, [r7, #4]
	const float dt = time - _time;
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80174b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80174bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174c0:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	const float dt2 = dt*dt;
 80174c4:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80174c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80174cc:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
	const float dt2_2 = dt2 * 0.5f;
 80174d0:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80174d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80174d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80174dc:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
	Matrix<VelocityEKF_stateLen, VelocityEKF_controlLen> W{0.0f};
 80174e0:	f107 031c 	add.w	r3, r7, #28
 80174e4:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80175ec <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x150>
 80174e8:	4618      	mov	r0, r3
 80174ea:	f000 fbb2 	bl	8017c52 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>
	W(0,0) = dt; W(1,1) = dt; W(2,2) = dt;
 80174ee:	f107 031c 	add.w	r3, r7, #28
 80174f2:	2200      	movs	r2, #0
 80174f4:	2100      	movs	r1, #0
 80174f6:	4618      	mov	r0, r3
 80174f8:	f000 fbc8 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80174fc:	4602      	mov	r2, r0
 80174fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017502:	6013      	str	r3, [r2, #0]
 8017504:	f107 031c 	add.w	r3, r7, #28
 8017508:	2201      	movs	r2, #1
 801750a:	2101      	movs	r1, #1
 801750c:	4618      	mov	r0, r3
 801750e:	f000 fbbd 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017512:	4602      	mov	r2, r0
 8017514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017518:	6013      	str	r3, [r2, #0]
 801751a:	f107 031c 	add.w	r3, r7, #28
 801751e:	2202      	movs	r2, #2
 8017520:	2102      	movs	r1, #2
 8017522:	4618      	mov	r0, r3
 8017524:	f000 fbb2 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017528:	4602      	mov	r2, r0
 801752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801752e:	6013      	str	r3, [r2, #0]
	W(3,1) = dt2_2*_ER;
 8017530:	f107 031c 	add.w	r3, r7, #28
 8017534:	2201      	movs	r2, #1
 8017536:	2103      	movs	r1, #3
 8017538:	4618      	mov	r0, r3
 801753a:	f000 fba7 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801753e:	4603      	mov	r3, r0
 8017540:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8017544:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80175f0 <_ZNK10Algorithms11VelocityEKF2_QERKN3Mat8V_VectorILt3EEERKNS1_6MatrixILt3ELt3EEEf+0x154>
 8017548:	ee67 7a87 	vmul.f32	s15, s15, s14
 801754c:	edc3 7a00 	vstr	s15, [r3]
	W(4,0) = W(3,1) / cos(_state(3));
 8017550:	f107 031c 	add.w	r3, r7, #28
 8017554:	2201      	movs	r2, #1
 8017556:	2103      	movs	r1, #3
 8017558:	4618      	mov	r0, r3
 801755a:	f000 fb97 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801755e:	4603      	mov	r3, r0
 8017560:	ed93 8a00 	vldr	s16, [r3]
 8017564:	693b      	ldr	r3, [r7, #16]
 8017566:	3304      	adds	r3, #4
 8017568:	2103      	movs	r1, #3
 801756a:	4618      	mov	r0, r3
 801756c:	f7f6 fca5 	bl	800deba <_ZNK3Mat8V_VectorILt6EEclEt>
 8017570:	eef0 7a40 	vmov.f32	s15, s0
 8017574:	eeb0 0a67 	vmov.f32	s0, s15
 8017578:	f7f9 fbfc 	bl	8010d74 <_ZSt3cosf>
 801757c:	eef0 8a40 	vmov.f32	s17, s0
 8017580:	f107 031c 	add.w	r3, r7, #28
 8017584:	2200      	movs	r2, #0
 8017586:	2104      	movs	r1, #4
 8017588:	4618      	mov	r0, r3
 801758a:	f000 fb7f 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 801758e:	4603      	mov	r3, r0
 8017590:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8017594:	edc3 7a00 	vstr	s15, [r3]
	W(5,2) = dt2_2;
 8017598:	f107 031c 	add.w	r3, r7, #28
 801759c:	2202      	movs	r2, #2
 801759e:	2105      	movs	r1, #5
 80175a0:	4618      	mov	r0, r3
 80175a2:	f000 fb73 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 80175a6:	4602      	mov	r2, r0
 80175a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80175ac:	6013      	str	r3, [r2, #0]
	return W*controlCov*W.Transposed();
 80175ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80175b2:	f107 011c 	add.w	r1, r7, #28
 80175b6:	68ba      	ldr	r2, [r7, #8]
 80175b8:	4618      	mov	r0, r3
 80175ba:	f000 fb02 	bl	8017bc2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
 80175be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80175c2:	f107 021c 	add.w	r2, r7, #28
 80175c6:	4611      	mov	r1, r2
 80175c8:	4618      	mov	r0, r3
 80175ca:	f000 fb78 	bl	8017cbe <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80175d4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80175d8:	4618      	mov	r0, r3
 80175da:	f000 fb18 	bl	8017c0e <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>
}
 80175de:	6978      	ldr	r0, [r7, #20]
 80175e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80175e4:	46bd      	mov	sp, r7
 80175e6:	ecbd 8b02 	vpop	{d8}
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	00000000 	.word	0x00000000
 80175f0:	3428892d 	.word	0x3428892d

080175f4 <_ZNK10Algorithms11VelocityEKF2_hEv>:

VelocityEKF::MeassurementVec VelocityEKF::_h() const
{
 80175f4:	b4b0      	push	{r4, r5, r7}
 80175f6:	b083      	sub	sp, #12
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
 80175fc:	6039      	str	r1, [r7, #0]
	return _state;
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	4615      	mov	r5, r2
 8017604:	1d1c      	adds	r4, r3, #4
 8017606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801760a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801760e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	370c      	adds	r7, #12
 8017616:	46bd      	mov	sp, r7
 8017618:	bcb0      	pop	{r4, r5, r7}
 801761a:	4770      	bx	lr

0801761c <_ZNK10Algorithms11VelocityEKF2_HEv>:

Matrix<VelocityEKF_meassurementLen, VelocityEKF_stateLen> VelocityEKF::_H() const
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	6039      	str	r1, [r7, #0]
	return Eye<VelocityEKF_meassurementLen>(1.0f);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801762c:	4618      	mov	r0, r3
 801762e:	f7f7 ff61 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8017632:	bf00      	nop
}
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	3708      	adds	r7, #8
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}

0801763c <_ZNK10Algorithms11VelocityEKF13_InvertMatrixERKN3Mat6MatrixILt6ELt6EEE>:

VelocityEKF::MeasurementCovarianceMatrix VelocityEKF::_InvertMatrix(const MeasurementCovarianceMatrix& matrix) const
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b084      	sub	sp, #16
 8017640:	af00      	add	r7, sp, #0
 8017642:	60f8      	str	r0, [r7, #12]
 8017644:	60b9      	str	r1, [r7, #8]
 8017646:	607a      	str	r2, [r7, #4]
	auto result = matrix;
 8017648:	68fa      	ldr	r2, [r7, #12]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	4610      	mov	r0, r2
 801764e:	4619      	mov	r1, r3
 8017650:	2390      	movs	r3, #144	; 0x90
 8017652:	461a      	mov	r2, r3
 8017654:	f006 fe01 	bl	801e25a <memcpy>
	return result;
 8017658:	bf00      	nop
}
 801765a:	68f8      	ldr	r0, [r7, #12]
 801765c:	3710      	adds	r7, #16
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
	...

08017664 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE>:

Matrix<3,3> VelocityEKF::_Invert3x3Matrix(const Matrix<3,3>& matrix) const
{
 8017664:	b5b0      	push	{r4, r5, r7, lr}
 8017666:	b090      	sub	sp, #64	; 0x40
 8017668:	af00      	add	r7, sp, #0
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	607a      	str	r2, [r7, #4]
	static float a_1_1, a_1_2, a_1_3, a_2_1, a_2_2, a_2_3, a_3_1, a_3_2, a_3_3;
	a_1_1 = matrix(0,0); a_1_2 = matrix(0,1); a_1_3 = matrix(0,2);
 8017670:	2200      	movs	r2, #0
 8017672:	2100      	movs	r1, #0
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f7f6 fef8 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801767a:	eef0 7a40 	vmov.f32	s15, s0
 801767e:	4bd4      	ldr	r3, [pc, #848]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017680:	edc3 7a00 	vstr	s15, [r3]
 8017684:	2201      	movs	r2, #1
 8017686:	2100      	movs	r1, #0
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7f6 feee 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801768e:	eef0 7a40 	vmov.f32	s15, s0
 8017692:	4bd0      	ldr	r3, [pc, #832]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017694:	edc3 7a00 	vstr	s15, [r3]
 8017698:	2202      	movs	r2, #2
 801769a:	2100      	movs	r1, #0
 801769c:	6878      	ldr	r0, [r7, #4]
 801769e:	f7f6 fee4 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80176a2:	eef0 7a40 	vmov.f32	s15, s0
 80176a6:	4bcc      	ldr	r3, [pc, #816]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80176a8:	edc3 7a00 	vstr	s15, [r3]
	a_2_1 = matrix(1,0); a_2_2 = matrix(1,1); a_2_3 = matrix(1,2);
 80176ac:	2200      	movs	r2, #0
 80176ae:	2101      	movs	r1, #1
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f7f6 feda 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80176b6:	eef0 7a40 	vmov.f32	s15, s0
 80176ba:	4bc8      	ldr	r3, [pc, #800]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80176bc:	edc3 7a00 	vstr	s15, [r3]
 80176c0:	2201      	movs	r2, #1
 80176c2:	2101      	movs	r1, #1
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f7f6 fed0 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80176ca:	eef0 7a40 	vmov.f32	s15, s0
 80176ce:	4bc4      	ldr	r3, [pc, #784]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80176d0:	edc3 7a00 	vstr	s15, [r3]
 80176d4:	2202      	movs	r2, #2
 80176d6:	2101      	movs	r1, #1
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	f7f6 fec6 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80176de:	eef0 7a40 	vmov.f32	s15, s0
 80176e2:	4bc0      	ldr	r3, [pc, #768]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80176e4:	edc3 7a00 	vstr	s15, [r3]
	a_3_1 = matrix(2,0); a_3_2 = matrix(2,1); a_3_3 = matrix(2,2);
 80176e8:	2200      	movs	r2, #0
 80176ea:	2102      	movs	r1, #2
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f7f6 febc 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 80176f2:	eef0 7a40 	vmov.f32	s15, s0
 80176f6:	4bbc      	ldr	r3, [pc, #752]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80176f8:	edc3 7a00 	vstr	s15, [r3]
 80176fc:	2201      	movs	r2, #1
 80176fe:	2102      	movs	r1, #2
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7f6 feb2 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8017706:	eef0 7a40 	vmov.f32	s15, s0
 801770a:	4bb8      	ldr	r3, [pc, #736]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 801770c:	edc3 7a00 	vstr	s15, [r3]
 8017710:	2202      	movs	r2, #2
 8017712:	2102      	movs	r1, #2
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f7f6 fea8 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 801771a:	eef0 7a40 	vmov.f32	s15, s0
 801771e:	4bb4      	ldr	r3, [pc, #720]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017720:	edc3 7a00 	vstr	s15, [r3]
	float det = (a_1_1*a_2_2*a_3_3 - a_1_1*a_2_3*a_3_2 - a_1_2*a_2_1*a_3_3 + a_1_2*a_2_3*a_3_1 + a_1_3*a_2_1*a_3_2 - a_1_3*a_2_2*a_3_1);
 8017724:	4baa      	ldr	r3, [pc, #680]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017726:	ed93 7a00 	vldr	s14, [r3]
 801772a:	4bad      	ldr	r3, [pc, #692]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801772c:	edd3 7a00 	vldr	s15, [r3]
 8017730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017734:	4bae      	ldr	r3, [pc, #696]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017736:	edd3 7a00 	vldr	s15, [r3]
 801773a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801773e:	4ba4      	ldr	r3, [pc, #656]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017740:	edd3 6a00 	vldr	s13, [r3]
 8017744:	4ba7      	ldr	r3, [pc, #668]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017746:	edd3 7a00 	vldr	s15, [r3]
 801774a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801774e:	4ba7      	ldr	r3, [pc, #668]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017750:	edd3 7a00 	vldr	s15, [r3]
 8017754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017758:	ee37 7a67 	vsub.f32	s14, s14, s15
 801775c:	4b9d      	ldr	r3, [pc, #628]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801775e:	edd3 6a00 	vldr	s13, [r3]
 8017762:	4b9e      	ldr	r3, [pc, #632]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 8017764:	edd3 7a00 	vldr	s15, [r3]
 8017768:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801776c:	4ba0      	ldr	r3, [pc, #640]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 801776e:	edd3 7a00 	vldr	s15, [r3]
 8017772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017776:	ee37 7a67 	vsub.f32	s14, s14, s15
 801777a:	4b96      	ldr	r3, [pc, #600]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801777c:	edd3 6a00 	vldr	s13, [r3]
 8017780:	4b98      	ldr	r3, [pc, #608]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017782:	edd3 7a00 	vldr	s15, [r3]
 8017786:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801778a:	4b97      	ldr	r3, [pc, #604]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 801778c:	edd3 7a00 	vldr	s15, [r3]
 8017790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017798:	4b8f      	ldr	r3, [pc, #572]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801779a:	edd3 6a00 	vldr	s13, [r3]
 801779e:	4b8f      	ldr	r3, [pc, #572]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80177a0:	edd3 7a00 	vldr	s15, [r3]
 80177a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80177a8:	4b90      	ldr	r3, [pc, #576]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 80177aa:	edd3 7a00 	vldr	s15, [r3]
 80177ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80177b6:	4b88      	ldr	r3, [pc, #544]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80177b8:	edd3 6a00 	vldr	s13, [r3]
 80177bc:	4b88      	ldr	r3, [pc, #544]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80177be:	edd3 7a00 	vldr	s15, [r3]
 80177c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80177c6:	4b88      	ldr	r3, [pc, #544]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80177c8:	edd3 7a00 	vldr	s15, [r3]
 80177cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80177d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80177d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float det1 = 1.0f / det;
 80177d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80177dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80177e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80177e4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static Matrix<3, 3> result =
	{{
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
	}};
 80177e8:	4b82      	ldr	r3, [pc, #520]	; (80179f4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	f3bf 8f5b 	dmb	ish
 80177f0:	f003 0301 	and.w	r3, r3, #1
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	bf0c      	ite	eq
 80177f8:	2301      	moveq	r3, #1
 80177fa:	2300      	movne	r3, #0
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b00      	cmp	r3, #0
 8017800:	f000 810b 	beq.w	8017a1a <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
 8017804:	487b      	ldr	r0, [pc, #492]	; (80179f4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x390>)
 8017806:	f005 fd77 	bl	801d2f8 <__cxa_guard_acquire>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	bf14      	ite	ne
 8017810:	2301      	movne	r3, #1
 8017812:	2300      	moveq	r3, #0
 8017814:	b2db      	uxtb	r3, r3
 8017816:	2b00      	cmp	r3, #0
 8017818:	f000 80ff 	beq.w	8017a1a <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3b6>
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801781c:	4b70      	ldr	r3, [pc, #448]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801781e:	ed93 7a00 	vldr	s14, [r3]
 8017822:	4b73      	ldr	r3, [pc, #460]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017824:	edd3 7a00 	vldr	s15, [r3]
 8017828:	ee27 7a27 	vmul.f32	s14, s14, s15
 801782c:	4b6d      	ldr	r3, [pc, #436]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801782e:	edd3 6a00 	vldr	s13, [r3]
 8017832:	4b6e      	ldr	r3, [pc, #440]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017834:	edd3 7a00 	vldr	s15, [r3]
 8017838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801783c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017840:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017844:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017848:	edc7 7a05 	vstr	s15, [r7, #20]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 801784c:	4b61      	ldr	r3, [pc, #388]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801784e:	ed93 7a00 	vldr	s14, [r3]
 8017852:	4b67      	ldr	r3, [pc, #412]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 8017854:	edd3 7a00 	vldr	s15, [r3]
 8017858:	ee27 7a27 	vmul.f32	s14, s14, s15
 801785c:	4b5e      	ldr	r3, [pc, #376]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 801785e:	edd3 6a00 	vldr	s13, [r3]
 8017862:	4b62      	ldr	r3, [pc, #392]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017864:	edd3 7a00 	vldr	s15, [r3]
 8017868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801786c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017870:	eeb1 7a67 	vneg.f32	s14, s15
 8017874:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017878:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 801787c:	edc7 7a06 	vstr	s15, [r7, #24]
		(a_2_2*a_3_3 - a_2_3*a_3_2)*det1, -(a_1_2*a_3_3 - a_1_3*a_3_2)*det1,  (a_1_2*a_2_3 - a_1_3*a_2_2)*det1,
 8017880:	4b54      	ldr	r3, [pc, #336]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 8017882:	ed93 7a00 	vldr	s14, [r3]
 8017886:	4b57      	ldr	r3, [pc, #348]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 8017888:	edd3 7a00 	vldr	s15, [r3]
 801788c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017890:	4b51      	ldr	r3, [pc, #324]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017892:	edd3 6a00 	vldr	s13, [r3]
 8017896:	4b52      	ldr	r3, [pc, #328]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 8017898:	edd3 7a00 	vldr	s15, [r3]
 801789c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80178a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80178a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80178a8:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80178ac:	edc7 7a07 	vstr	s15, [r7, #28]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80178b0:	4b4a      	ldr	r3, [pc, #296]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80178b2:	ed93 7a00 	vldr	s14, [r3]
 80178b6:	4b4e      	ldr	r3, [pc, #312]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80178b8:	edd3 7a00 	vldr	s15, [r3]
 80178bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80178c0:	4b48      	ldr	r3, [pc, #288]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 80178c2:	edd3 6a00 	vldr	s13, [r3]
 80178c6:	4b48      	ldr	r3, [pc, #288]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80178c8:	edd3 7a00 	vldr	s15, [r3]
 80178cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80178d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178d4:	eeb1 7a67 	vneg.f32	s14, s15
 80178d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80178dc:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80178e0:	edc7 7a08 	vstr	s15, [r7, #32]
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 80178e4:	4b3a      	ldr	r3, [pc, #232]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80178e6:	ed93 7a00 	vldr	s14, [r3]
 80178ea:	4b41      	ldr	r3, [pc, #260]	; (80179f0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x38c>)
 80178ec:	edd3 7a00 	vldr	s15, [r3]
 80178f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80178f4:	4b38      	ldr	r3, [pc, #224]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 80178f6:	edd3 6a00 	vldr	s13, [r3]
 80178fa:	4b3b      	ldr	r3, [pc, #236]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 80178fc:	edd3 7a00 	vldr	s15, [r3]
 8017900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017908:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801790c:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		-(a_2_1*a_3_3 - a_2_3*a_3_1)*det1,  (a_1_1*a_3_3 - a_1_3*a_3_1)*det1, -(a_1_1*a_2_3 - a_1_3*a_2_1)*det1,
 8017914:	4b2e      	ldr	r3, [pc, #184]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 8017916:	ed93 7a00 	vldr	s14, [r3]
 801791a:	4b32      	ldr	r3, [pc, #200]	; (80179e4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x380>)
 801791c:	edd3 7a00 	vldr	s15, [r3]
 8017920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017924:	4b2c      	ldr	r3, [pc, #176]	; (80179d8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x374>)
 8017926:	edd3 6a00 	vldr	s13, [r3]
 801792a:	4b2c      	ldr	r3, [pc, #176]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801792c:	edd3 7a00 	vldr	s15, [r3]
 8017930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017938:	eeb1 7a67 	vneg.f32	s14, s15
 801793c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017940:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017944:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8017948:	4b24      	ldr	r3, [pc, #144]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 801794a:	ed93 7a00 	vldr	s14, [r3]
 801794e:	4b27      	ldr	r3, [pc, #156]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017950:	edd3 7a00 	vldr	s15, [r3]
 8017954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017958:	4b21      	ldr	r3, [pc, #132]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 801795a:	edd3 6a00 	vldr	s13, [r3]
 801795e:	4b22      	ldr	r3, [pc, #136]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017960:	edd3 7a00 	vldr	s15, [r3]
 8017964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017968:	ee37 7a67 	vsub.f32	s14, s14, s15
 801796c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017970:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017974:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 8017978:	4b15      	ldr	r3, [pc, #84]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 801797a:	ed93 7a00 	vldr	s14, [r3]
 801797e:	4b1b      	ldr	r3, [pc, #108]	; (80179ec <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x388>)
 8017980:	edd3 7a00 	vldr	s15, [r3]
 8017984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017988:	4b12      	ldr	r3, [pc, #72]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 801798a:	edd3 6a00 	vldr	s13, [r3]
 801798e:	4b16      	ldr	r3, [pc, #88]	; (80179e8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x384>)
 8017990:	edd3 7a00 	vldr	s15, [r3]
 8017994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017998:	ee77 7a67 	vsub.f32	s15, s14, s15
 801799c:	eeb1 7a67 	vneg.f32	s14, s15
 80179a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80179a4:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 80179a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		(a_2_1*a_3_2 - a_2_2*a_3_1)*det1, -(a_1_1*a_3_2 - a_1_2*a_3_1)*det1,  (a_1_1*a_2_2 - a_1_2*a_2_1)*det1,
 80179ac:	4b08      	ldr	r3, [pc, #32]	; (80179d0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x36c>)
 80179ae:	ed93 7a00 	vldr	s14, [r3]
 80179b2:	4b0b      	ldr	r3, [pc, #44]	; (80179e0 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x37c>)
 80179b4:	edd3 7a00 	vldr	s15, [r3]
 80179b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80179bc:	4b05      	ldr	r3, [pc, #20]	; (80179d4 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x370>)
 80179be:	edd3 6a00 	vldr	s13, [r3]
 80179c2:	4b06      	ldr	r3, [pc, #24]	; (80179dc <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x378>)
 80179c4:	edd3 7a00 	vldr	s15, [r3]
 80179c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80179cc:	e014      	b.n	80179f8 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x394>
 80179ce:	bf00      	nop
 80179d0:	24009698 	.word	0x24009698
 80179d4:	2400969c 	.word	0x2400969c
 80179d8:	240096a0 	.word	0x240096a0
 80179dc:	240096a4 	.word	0x240096a4
 80179e0:	240096a8 	.word	0x240096a8
 80179e4:	240096ac 	.word	0x240096ac
 80179e8:	240096b0 	.word	0x240096b0
 80179ec:	240096b4 	.word	0x240096b4
 80179f0:	240096b8 	.word	0x240096b8
 80179f4:	240096e0 	.word	0x240096e0
 80179f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80179fc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017a00:	ee67 7a27 	vmul.f32	s15, s14, s15
	}};
 8017a04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8017a08:	f107 0314 	add.w	r3, r7, #20
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	480a      	ldr	r0, [pc, #40]	; (8017a38 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8017a10:	f7f9 f8aa 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 8017a14:	4809      	ldr	r0, [pc, #36]	; (8017a3c <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d8>)
 8017a16:	f005 fc7b 	bl	801d310 <__cxa_guard_release>
	return result;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	4a06      	ldr	r2, [pc, #24]	; (8017a38 <_ZNK10Algorithms11VelocityEKF16_Invert3x3MatrixERKN3Mat6MatrixILt3ELt3EEE+0x3d4>)
 8017a1e:	461c      	mov	r4, r3
 8017a20:	4615      	mov	r5, r2
 8017a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a2a:	682b      	ldr	r3, [r5, #0]
 8017a2c:	6023      	str	r3, [r4, #0]
}
 8017a2e:	68f8      	ldr	r0, [r7, #12]
 8017a30:	3740      	adds	r7, #64	; 0x40
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bdb0      	pop	{r4, r5, r7, pc}
 8017a36:	bf00      	nop
 8017a38:	240096bc 	.word	0x240096bc
 8017a3c:	240096e0 	.word	0x240096e0

08017a40 <_ZN3Mat8V_VectorILt6EEclEt>:
	inline float& operator()(u_short index) {return _values[index];}
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	460b      	mov	r3, r1
 8017a4a:	807b      	strh	r3, [r7, #2]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	887a      	ldrh	r2, [r7, #2]
 8017a50:	4611      	mov	r1, r2
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f8 fd97 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3708      	adds	r7, #8
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}

08017a62 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017a62:	b480      	push	{r7}
 8017a64:	b083      	sub	sp, #12
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	6078      	str	r0, [r7, #4]
 8017a6a:	6039      	str	r1, [r7, #0]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681a      	ldr	r2, [r3, #0]
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	601a      	str	r2, [r3, #0]
 8017a74:	bf00      	nop
 8017a76:	370c      	adds	r7, #12
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7e:	4770      	bx	lr

08017a80 <_ZN3Mat6MatrixILt3ELt6EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8017a80:	b590      	push	{r4, r7, lr}
 8017a82:	b083      	sub	sp, #12
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
 8017a88:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f000 f945 	bl	8017d1e <_ZNSt5arrayIfLj18EE5beginEv>
 8017a94:	4604      	mov	r4, r0
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 f94c 	bl	8017d36 <_ZNSt5arrayIfLj18EE3endEv>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	edd7 7a00 	vldr	s15, [r7]
 8017aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8017aa8:	4619      	mov	r1, r3
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f000 f950 	bl	8017d50 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	370c      	adds	r7, #12
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd90      	pop	{r4, r7, pc}

08017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8017aba:	b580      	push	{r7, lr}
 8017abc:	b084      	sub	sp, #16
 8017abe:	af00      	add	r7, sp, #0
 8017ac0:	6078      	str	r0, [r7, #4]
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	807b      	strh	r3, [r7, #2]
 8017ac6:	4613      	mov	r3, r2
 8017ac8:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8017aca:	887a      	ldrh	r2, [r7, #2]
 8017acc:	4613      	mov	r3, r2
 8017ace:	005b      	lsls	r3, r3, #1
 8017ad0:	4413      	add	r3, r2
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	461a      	mov	r2, r3
 8017ad6:	883b      	ldrh	r3, [r7, #0]
 8017ad8:	4413      	add	r3, r2
 8017ada:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	68f9      	ldr	r1, [r7, #12]
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f000 f951 	bl	8017d88 <_ZNSt5arrayIfLj18EEixEj>
 8017ae6:	4603      	mov	r3, r0
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3710      	adds	r7, #16
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <_ZNK3Mat6MatrixILt3ELt6EEmlILt6EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017afc:	68f8      	ldr	r0, [r7, #12]
 8017afe:	f000 f952 	bl	8017da6 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	Multiply(other, result);
 8017b02:	68fa      	ldr	r2, [r7, #12]
 8017b04:	6879      	ldr	r1, [r7, #4]
 8017b06:	68b8      	ldr	r0, [r7, #8]
 8017b08:	f000 f958 	bl	8017dbc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8017b0c:	bf00      	nop
}
 8017b0e:	68f8      	ldr	r0, [r7, #12]
 8017b10:	3710      	adds	r7, #16
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}

08017b16 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8017b16:	b590      	push	{r4, r7, lr}
 8017b18:	b085      	sub	sp, #20
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	6078      	str	r0, [r7, #4]
 8017b1e:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8017b20:	6878      	ldr	r0, [r7, #4]
 8017b22:	f000 f9ff 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8017b26:	2300      	movs	r3, #0
 8017b28:	81fb      	strh	r3, [r7, #14]
 8017b2a:	e01c      	b.n	8017b66 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	81bb      	strh	r3, [r7, #12]
 8017b30:	e013      	b.n	8017b5a <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8017b32:	89ba      	ldrh	r2, [r7, #12]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	4619      	mov	r1, r3
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f000 f8a7 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8017b3e:	4604      	mov	r4, r0
 8017b40:	89fa      	ldrh	r2, [r7, #14]
 8017b42:	89bb      	ldrh	r3, [r7, #12]
 8017b44:	4619      	mov	r1, r3
 8017b46:	6838      	ldr	r0, [r7, #0]
 8017b48:	f000 f9f7 	bl	8017f3a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8017b4c:	eef0 7a40 	vmov.f32	s15, s0
 8017b50:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8017b54:	89bb      	ldrh	r3, [r7, #12]
 8017b56:	3301      	adds	r3, #1
 8017b58:	81bb      	strh	r3, [r7, #12]
 8017b5a:	89bb      	ldrh	r3, [r7, #12]
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	d9e8      	bls.n	8017b32 <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8017b60:	89fb      	ldrh	r3, [r7, #14]
 8017b62:	3301      	adds	r3, #1
 8017b64:	81fb      	strh	r3, [r7, #14]
 8017b66:	89fb      	ldrh	r3, [r7, #14]
 8017b68:	2b05      	cmp	r3, #5
 8017b6a:	d9df      	bls.n	8017b2c <_ZNK3Mat6MatrixILt3ELt6EE10TransposedEv+0x16>
	return result;
 8017b6c:	bf00      	nop
}
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	3714      	adds	r7, #20
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd90      	pop	{r4, r7, pc}

08017b76 <_ZNK3Mat6MatrixILt3ELt6EEmlILt3EEENS0_ILt3EXT_EEERKNS0_ILt6EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	60f8      	str	r0, [r7, #12]
 8017b7e:	60b9      	str	r1, [r7, #8]
 8017b80:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017b82:	68f8      	ldr	r0, [r7, #12]
 8017b84:	f7f6 f8ad 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
	Multiply(other, result);
 8017b88:	68fa      	ldr	r2, [r7, #12]
 8017b8a:	6879      	ldr	r1, [r7, #4]
 8017b8c:	68b8      	ldr	r0, [r7, #8]
 8017b8e:	f000 f9f3 	bl	8017f78 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>
	return result;
 8017b92:	bf00      	nop
}
 8017b94:	68f8      	ldr	r0, [r7, #12]
 8017b96:	3710      	adds	r7, #16
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <_ZNK3Mat6MatrixILt6ELt6EEmlILt3EEENS0_ILt6EXT_EEERKS3_>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b084      	sub	sp, #16
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017ba8:	68f8      	ldr	r0, [r7, #12]
 8017baa:	f000 f9bb 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8017bae:	68fa      	ldr	r2, [r7, #12]
 8017bb0:	6879      	ldr	r1, [r7, #4]
 8017bb2:	68b8      	ldr	r0, [r7, #8]
 8017bb4:	f000 fa94 	bl	80180e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>
	return result;
 8017bb8:	bf00      	nop
}
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	3710      	adds	r7, #16
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}

08017bc2 <_ZNK3Mat6MatrixILt6ELt3EEmlILt3EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017bc2:	b580      	push	{r7, lr}
 8017bc4:	b084      	sub	sp, #16
 8017bc6:	af00      	add	r7, sp, #0
 8017bc8:	60f8      	str	r0, [r7, #12]
 8017bca:	60b9      	str	r1, [r7, #8]
 8017bcc:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017bce:	68f8      	ldr	r0, [r7, #12]
 8017bd0:	f000 f9a8 	bl	8017f24 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>
	Multiply(other, result);
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	6879      	ldr	r1, [r7, #4]
 8017bd8:	68b8      	ldr	r0, [r7, #8]
 8017bda:	f000 fb35 	bl	8018248 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017bde:	bf00      	nop
}
 8017be0:	68f8      	ldr	r0, [r7, #12]
 8017be2:	3710      	adds	r7, #16
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <_ZNK3Mat6MatrixILt6ELt3EEmlILt1EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f7f6 f9b5 	bl	800df64 <_ZN3Mat6MatrixILt6ELt1EEC1Ev>
	Multiply(other, result);
 8017bfa:	68fa      	ldr	r2, [r7, #12]
 8017bfc:	6879      	ldr	r1, [r7, #4]
 8017bfe:	68b8      	ldr	r0, [r7, #8]
 8017c00:	f000 fbd6 	bl	80183b0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017c04:	bf00      	nop
}
 8017c06:	68f8      	ldr	r0, [r7, #12]
 8017c08:	3710      	adds	r7, #16
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <_ZNK3Mat6MatrixILt6ELt3EEmlILt6EEENS0_ILt6EXT_EEERKNS0_ILt3EXT_EEE>:
Matrix<heigth, other_width> Matrix<heigth, width>::operator*(const Matrix<width, other_width>& other) const
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b084      	sub	sp, #16
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	60f8      	str	r0, [r7, #12]
 8017c16:	60b9      	str	r1, [r7, #8]
 8017c18:	607a      	str	r2, [r7, #4]
	Matrix<heigth, other_width> result;
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7f6 f821 	bl	800dc62 <_ZN3Mat6MatrixILt6ELt6EEC1Ev>
	Multiply(other, result);
 8017c20:	68fa      	ldr	r2, [r7, #12]
 8017c22:	6879      	ldr	r1, [r7, #4]
 8017c24:	68b8      	ldr	r0, [r7, #8]
 8017c26:	f000 fc77 	bl	8018518 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>
	return result;
 8017c2a:	bf00      	nop
}
 8017c2c:	68f8      	ldr	r0, [r7, #12]
 8017c2e:	3710      	adds	r7, #16
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bd80      	pop	{r7, pc}

08017c34 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>:
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017c34:	b480      	push	{r7}
 8017c36:	b083      	sub	sp, #12
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	601a      	str	r2, [r3, #0]
 8017c46:	bf00      	nop
 8017c48:	370c      	adds	r7, #12
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c50:	4770      	bx	lr

08017c52 <_ZN3Mat6MatrixILt6ELt3EEC1Ef>:
Matrix<heigth, width>::Matrix(float val)
 8017c52:	b590      	push	{r4, r7, lr}
 8017c54:	b083      	sub	sp, #12
 8017c56:	af00      	add	r7, sp, #0
 8017c58:	6078      	str	r0, [r7, #4]
 8017c5a:	ed87 0a00 	vstr	s0, [r7]
	std::for_each(_values.begin(), _values.end(), [val](float& x){x = val;});
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	4618      	mov	r0, r3
 8017c62:	f000 f85c 	bl	8017d1e <_ZNSt5arrayIfLj18EE5beginEv>
 8017c66:	4604      	mov	r4, r0
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f000 f863 	bl	8017d36 <_ZNSt5arrayIfLj18EE3endEv>
 8017c70:	4603      	mov	r3, r0
 8017c72:	edd7 7a00 	vldr	s15, [r7]
 8017c76:	eeb0 0a67 	vmov.f32	s0, s15
 8017c7a:	4619      	mov	r1, r3
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f000 fcff 	bl	8018680 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>
}
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	4618      	mov	r0, r3
 8017c86:	370c      	adds	r7, #12
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd90      	pop	{r4, r7, pc}

08017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>:
float& Matrix<heigth, width>::operator()(u_short row, u_short col)
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	807b      	strh	r3, [r7, #2]
 8017c98:	4613      	mov	r3, r2
 8017c9a:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8017c9c:	887a      	ldrh	r2, [r7, #2]
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	005b      	lsls	r3, r3, #1
 8017ca2:	441a      	add	r2, r3
 8017ca4:	883b      	ldrh	r3, [r7, #0]
 8017ca6:	4413      	add	r3, r2
 8017ca8:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	68f9      	ldr	r1, [r7, #12]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f000 f86a 	bl	8017d88 <_ZNSt5arrayIfLj18EEixEj>
 8017cb4:	4603      	mov	r3, r0
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	3710      	adds	r7, #16
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}

08017cbe <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv>:
Matrix<width, heigth> Matrix<heigth, width>::Transposed() const
 8017cbe:	b590      	push	{r4, r7, lr}
 8017cc0:	b085      	sub	sp, #20
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	6078      	str	r0, [r7, #4]
 8017cc6:	6039      	str	r1, [r7, #0]
	Matrix<width, heigth> result;
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f000 f86c 	bl	8017da6 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>
	for(u_short r = 0; r < width; ++r)
 8017cce:	2300      	movs	r3, #0
 8017cd0:	81fb      	strh	r3, [r7, #14]
 8017cd2:	e01c      	b.n	8017d0e <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x50>
		for(u_short c = 0; c < heigth; ++c)
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	81bb      	strh	r3, [r7, #12]
 8017cd8:	e013      	b.n	8017d02 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x44>
			result(r, c) = operator()(c, r);
 8017cda:	89ba      	ldrh	r2, [r7, #12]
 8017cdc:	89fb      	ldrh	r3, [r7, #14]
 8017cde:	4619      	mov	r1, r3
 8017ce0:	6878      	ldr	r0, [r7, #4]
 8017ce2:	f7ff feea 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8017ce6:	4604      	mov	r4, r0
 8017ce8:	89fa      	ldrh	r2, [r7, #14]
 8017cea:	89bb      	ldrh	r3, [r7, #12]
 8017cec:	4619      	mov	r1, r3
 8017cee:	6838      	ldr	r0, [r7, #0]
 8017cf0:	f000 fce2 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8017cf4:	eef0 7a40 	vmov.f32	s15, s0
 8017cf8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short c = 0; c < heigth; ++c)
 8017cfc:	89bb      	ldrh	r3, [r7, #12]
 8017cfe:	3301      	adds	r3, #1
 8017d00:	81bb      	strh	r3, [r7, #12]
 8017d02:	89bb      	ldrh	r3, [r7, #12]
 8017d04:	2b05      	cmp	r3, #5
 8017d06:	d9e8      	bls.n	8017cda <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x1c>
	for(u_short r = 0; r < width; ++r)
 8017d08:	89fb      	ldrh	r3, [r7, #14]
 8017d0a:	3301      	adds	r3, #1
 8017d0c:	81fb      	strh	r3, [r7, #14]
 8017d0e:	89fb      	ldrh	r3, [r7, #14]
 8017d10:	2b02      	cmp	r3, #2
 8017d12:	d9df      	bls.n	8017cd4 <_ZNK3Mat6MatrixILt6ELt3EE10TransposedEv+0x16>
	return result;
 8017d14:	bf00      	nop
}
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	3714      	adds	r7, #20
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd90      	pop	{r4, r7, pc}

08017d1e <_ZNSt5arrayIfLj18EE5beginEv>:
      begin() noexcept
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b082      	sub	sp, #8
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f000 fce3 	bl	80186f2 <_ZNSt5arrayIfLj18EE4dataEv>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4618      	mov	r0, r3
 8017d30:	3708      	adds	r7, #8
 8017d32:	46bd      	mov	sp, r7
 8017d34:	bd80      	pop	{r7, pc}

08017d36 <_ZNSt5arrayIfLj18EE3endEv>:
      end() noexcept
 8017d36:	b580      	push	{r7, lr}
 8017d38:	b082      	sub	sp, #8
 8017d3a:	af00      	add	r7, sp, #0
 8017d3c:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f000 fcd7 	bl	80186f2 <_ZNSt5arrayIfLj18EE4dataEv>
 8017d44:	4603      	mov	r3, r0
 8017d46:	3348      	adds	r3, #72	; 0x48
 8017d48:	4618      	mov	r0, r3
 8017d4a:	3708      	adds	r7, #8
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bd80      	pop	{r7, pc}

08017d50 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b084      	sub	sp, #16
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	60f8      	str	r0, [r7, #12]
 8017d58:	60b9      	str	r1, [r7, #8]
 8017d5a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 8017d5e:	e007      	b.n	8017d70 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8017d60:	1d3b      	adds	r3, r7, #4
 8017d62:	68f9      	ldr	r1, [r7, #12]
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ff fe7c 	bl	8017a62 <_ZZN3Mat6MatrixILt3ELt6EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	60fb      	str	r3, [r7, #12]
 8017d70:	68fa      	ldr	r2, [r7, #12]
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d1f3      	bne.n	8017d60 <_ZSt8for_eachIPfZN3Mat6MatrixILt3ELt6EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	ee07 3a90 	vmov	s15, r3
    }
 8017d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <_ZNSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) noexcept
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b082      	sub	sp, #8
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	6839      	ldr	r1, [r7, #0]
 8017d96:	4618      	mov	r0, r3
 8017d98:	f000 fcb8 	bl	801870c <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 8017d9c:	4603      	mov	r3, r0
      }
 8017d9e:	4618      	mov	r0, r3
 8017da0:	3708      	adds	r7, #8
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}

08017da6 <_ZN3Mat6MatrixILt3ELt6EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8017da6:	b480      	push	{r7}
 8017da8:	b083      	sub	sp, #12
 8017daa:	af00      	add	r7, sp, #0
 8017dac:	6078      	str	r0, [r7, #4]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	4618      	mov	r0, r3
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8017dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dbe:	b0bf      	sub	sp, #252	; 0xfc
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8017dc8:	2300      	movs	r3, #0
 8017dca:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8017dce:	e02d      	b.n	8017e2c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8017dd6:	e020      	b.n	8017e1a <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8017dd8:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8017ddc:	f107 0314 	add.w	r3, r7, #20
 8017de0:	4611      	mov	r1, r2
 8017de2:	4618      	mov	r0, r3
 8017de4:	f000 fca1 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8017de8:	4602      	mov	r2, r0
 8017dea:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8017dee:	4619      	mov	r1, r3
 8017df0:	4610      	mov	r0, r2
 8017df2:	f7f8 fbc8 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8017df6:	4604      	mov	r4, r0
 8017df8:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8017dfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8017e00:	4619      	mov	r1, r3
 8017e02:	68f8      	ldr	r0, [r7, #12]
 8017e04:	f000 f899 	bl	8017f3a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8017e08:	eef0 7a40 	vmov.f32	s15, s0
 8017e0c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8017e10:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8017e14:	3301      	adds	r3, #1
 8017e16:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8017e1a:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8017e1e:	2b05      	cmp	r3, #5
 8017e20:	d9da      	bls.n	8017dd8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8017e22:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8017e26:	3301      	adds	r3, #1
 8017e28:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8017e2c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8017e30:	2b02      	cmp	r3, #2
 8017e32:	d9cd      	bls.n	8017dd0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8017e34:	2300      	movs	r3, #0
 8017e36:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8017e3a:	e02d      	b.n	8017e98 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8017e42:	e020      	b.n	8017e86 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8017e44:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8017e48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017e4c:	4611      	mov	r1, r2
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7f8 fcc5 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8017e54:	4602      	mov	r2, r0
 8017e56:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8017e5a:	4619      	mov	r1, r3
 8017e5c:	4610      	mov	r0, r2
 8017e5e:	f7f8 fb92 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8017e62:	4604      	mov	r4, r0
 8017e64:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8017e68:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	68b8      	ldr	r0, [r7, #8]
 8017e70:	f7f8 faab 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 8017e74:	eef0 7a40 	vmov.f32	s15, s0
 8017e78:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8017e7c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8017e80:	3301      	adds	r3, #1
 8017e82:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8017e86:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8017e8a:	2b05      	cmp	r3, #5
 8017e8c:	d9da      	bls.n	8017e44 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8017e8e:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8017e92:	3301      	adds	r3, #1
 8017e94:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 8017e98:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8017e9c:	2b05      	cmp	r3, #5
 8017e9e:	d9cd      	bls.n	8017e3c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8017ea6:	e034      	b.n	8017f12 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8017eae:	e027      	b.n	8017f00 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 8017eb0:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 8017eb4:	f107 0314 	add.w	r3, r7, #20
 8017eb8:	4611      	mov	r1, r2
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f000 fc35 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8017ec0:	4605      	mov	r5, r0
 8017ec2:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8017ec6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017eca:	4611      	mov	r1, r2
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7f8 fc86 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 8017ed2:	4606      	mov	r6, r0
 8017ed4:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8017ed8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8017edc:	4619      	mov	r1, r3
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	f7ff fdeb 	bl	8017aba <_ZN3Mat6MatrixILt3ELt6EEclEtt>
 8017ee4:	4604      	mov	r4, r0
 8017ee6:	4631      	mov	r1, r6
 8017ee8:	4628      	mov	r0, r5
 8017eea:	f7f8 fc87 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8017eee:	eef0 7a40 	vmov.f32	s15, s0
 8017ef2:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8017ef6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8017efa:	3301      	adds	r3, #1
 8017efc:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8017f00:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8017f04:	2b05      	cmp	r3, #5
 8017f06:	d9d3      	bls.n	8017eb0 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8017f08:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8017f12:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	d9c6      	bls.n	8017ea8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt6EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 8017f1a:	bf00      	nop
 8017f1c:	bf00      	nop
 8017f1e:	37fc      	adds	r7, #252	; 0xfc
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f24 <_ZN3Mat6MatrixILt6ELt3EEC1Ev>:
Matrix<heigth, width>::Matrix() {static_assert(heigth > 0 && width > 0, "Matrix width and heigth must be positive!");}
 8017f24:	b480      	push	{r7}
 8017f26:	b083      	sub	sp, #12
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	4618      	mov	r0, r3
 8017f30:	370c      	adds	r7, #12
 8017f32:	46bd      	mov	sp, r7
 8017f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f38:	4770      	bx	lr

08017f3a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b084      	sub	sp, #16
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	6078      	str	r0, [r7, #4]
 8017f42:	460b      	mov	r3, r1
 8017f44:	807b      	strh	r3, [r7, #2]
 8017f46:	4613      	mov	r3, r2
 8017f48:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 8017f4a:	887a      	ldrh	r2, [r7, #2]
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	4413      	add	r3, r2
 8017f52:	005b      	lsls	r3, r3, #1
 8017f54:	461a      	mov	r2, r3
 8017f56:	883b      	ldrh	r3, [r7, #0]
 8017f58:	4413      	add	r3, r2
 8017f5a:	60fb      	str	r3, [r7, #12]
	return _values[index];
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	68f9      	ldr	r1, [r7, #12]
 8017f60:	4618      	mov	r0, r3
 8017f62:	f000 fbf1 	bl	8018748 <_ZNKSt5arrayIfLj18EEixEj>
 8017f66:	4603      	mov	r3, r0
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	ee07 3a90 	vmov	s15, r3
}
 8017f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8017f72:	3710      	adds	r7, #16
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}

08017f78 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8017f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f7a:	b0ad      	sub	sp, #180	; 0xb4
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8017f84:	2300      	movs	r3, #0
 8017f86:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8017f8a:	e02d      	b.n	8017fe8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8017f92:	e020      	b.n	8017fd6 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8017f94:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8017f98:	f107 0314 	add.w	r3, r7, #20
 8017f9c:	4611      	mov	r1, r2
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f000 fbc3 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017faa:	4619      	mov	r1, r3
 8017fac:	4610      	mov	r0, r2
 8017fae:	f7f8 faea 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8017fb8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017fbc:	4619      	mov	r1, r3
 8017fbe:	68f8      	ldr	r0, [r7, #12]
 8017fc0:	f7ff ffbb 	bl	8017f3a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 8017fc4:	eef0 7a40 	vmov.f32	s15, s0
 8017fc8:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8017fcc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017fd0:	3301      	adds	r3, #1
 8017fd2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8017fd6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8017fda:	2b05      	cmp	r3, #5
 8017fdc:	d9da      	bls.n	8017f94 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8017fde:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8017fe8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8017fec:	2b02      	cmp	r3, #2
 8017fee:	d9cd      	bls.n	8017f8c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8017ff6:	e02d      	b.n	8018054 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8017ffe:	e020      	b.n	8018042 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8018000:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018004:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018008:	4611      	mov	r1, r2
 801800a:	4618      	mov	r0, r3
 801800c:	f000 fb8d 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018010:	4602      	mov	r2, r0
 8018012:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8018016:	4619      	mov	r1, r3
 8018018:	4610      	mov	r0, r2
 801801a:	f7f8 fab4 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 801801e:	4604      	mov	r4, r0
 8018020:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018024:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8018028:	4619      	mov	r1, r3
 801802a:	68b8      	ldr	r0, [r7, #8]
 801802c:	f000 fb44 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018030:	eef0 7a40 	vmov.f32	s15, s0
 8018034:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018038:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 801803c:	3301      	adds	r3, #1
 801803e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8018042:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8018046:	2b05      	cmp	r3, #5
 8018048:	d9da      	bls.n	8018000 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801804a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801804e:	3301      	adds	r3, #1
 8018050:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8018054:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8018058:	2b02      	cmp	r3, #2
 801805a:	d9cd      	bls.n	8017ff8 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801805c:	2300      	movs	r3, #0
 801805e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8018062:	e034      	b.n	80180ce <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018064:	2300      	movs	r3, #0
 8018066:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801806a:	e027      	b.n	80180bc <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801806c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8018070:	f107 0314 	add.w	r3, r7, #20
 8018074:	4611      	mov	r1, r2
 8018076:	4618      	mov	r0, r3
 8018078:	f000 fb57 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801807c:	4605      	mov	r5, r0
 801807e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8018082:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018086:	4611      	mov	r1, r2
 8018088:	4618      	mov	r0, r3
 801808a:	f000 fb4e 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 801808e:	4606      	mov	r6, r0
 8018090:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8018094:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018098:	4619      	mov	r1, r3
 801809a:	6878      	ldr	r0, [r7, #4]
 801809c:	f7f5 ffa4 	bl	800dfe8 <_ZN3Mat6MatrixILt3ELt3EEclEtt>
 80180a0:	4604      	mov	r4, r0
 80180a2:	4631      	mov	r1, r6
 80180a4:	4628      	mov	r0, r5
 80180a6:	f7f8 fba9 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 80180aa:	eef0 7a40 	vmov.f32	s15, s0
 80180ae:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80180b2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80180b6:	3301      	adds	r3, #1
 80180b8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80180bc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80180c0:	2b02      	cmp	r3, #2
 80180c2:	d9d3      	bls.n	801806c <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80180c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80180c8:	3301      	adds	r3, #1
 80180ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80180ce:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80180d2:	2b02      	cmp	r3, #2
 80180d4:	d9c6      	bls.n	8018064 <_ZNK3Mat6MatrixILt3ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERNS0_ILt3EXT_EEE+0xec>
}
 80180d6:	bf00      	nop
 80180d8:	bf00      	nop
 80180da:	37b4      	adds	r7, #180	; 0xb4
 80180dc:	46bd      	mov	sp, r7
 80180de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080180e0 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80180e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e2:	b0bf      	sub	sp, #252	; 0xfc
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	60f8      	str	r0, [r7, #12]
 80180e8:	60b9      	str	r1, [r7, #8]
 80180ea:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80180ec:	2300      	movs	r3, #0
 80180ee:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80180f2:	e02d      	b.n	8018150 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x70>
		for(u_short col = 0; col < width; ++col)
 80180f4:	2300      	movs	r3, #0
 80180f6:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80180fa:	e020      	b.n	801813e <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80180fc:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8018100:	f107 0314 	add.w	r3, r7, #20
 8018104:	4611      	mov	r1, r2
 8018106:	4618      	mov	r0, r3
 8018108:	f7f8 fb69 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 801810c:	4602      	mov	r2, r0
 801810e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8018112:	4619      	mov	r1, r3
 8018114:	4610      	mov	r0, r2
 8018116:	f7f8 fa36 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 801811a:	4604      	mov	r4, r0
 801811c:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 8018120:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8018124:	4619      	mov	r1, r3
 8018126:	68f8      	ldr	r0, [r7, #12]
 8018128:	f7f8 f94f 	bl	80103ca <_ZNK3Mat6MatrixILt6ELt6EEclEtt>
 801812c:	eef0 7a40 	vmov.f32	s15, s0
 8018130:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8018134:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8018138:	3301      	adds	r3, #1
 801813a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 801813e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8018142:	2b05      	cmp	r3, #5
 8018144:	d9da      	bls.n	80180fc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8018146:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 801814a:	3301      	adds	r3, #1
 801814c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8018150:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8018154:	2b05      	cmp	r3, #5
 8018156:	d9cd      	bls.n	80180f4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018158:	2300      	movs	r3, #0
 801815a:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 801815e:	e02d      	b.n	80181bc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018160:	2300      	movs	r3, #0
 8018162:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8018166:	e020      	b.n	80181aa <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xca>
			other_columns[col][row] = other(row, col);
 8018168:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801816c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018170:	4611      	mov	r1, r2
 8018172:	4618      	mov	r0, r3
 8018174:	f000 fad9 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 8018178:	4602      	mov	r2, r0
 801817a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 801817e:	4619      	mov	r1, r3
 8018180:	4610      	mov	r0, r2
 8018182:	f7f8 fa00 	bl	8010586 <_ZNSt5arrayIfLj6EEixEj>
 8018186:	4604      	mov	r4, r0
 8018188:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 801818c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8018190:	4619      	mov	r1, r3
 8018192:	68b8      	ldr	r0, [r7, #8]
 8018194:	f000 fa90 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018198:	eef0 7a40 	vmov.f32	s15, s0
 801819c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80181a0:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80181a4:	3301      	adds	r3, #1
 80181a6:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80181aa:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 80181ae:	2b05      	cmp	r3, #5
 80181b0:	d9da      	bls.n	8018168 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80181b2:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80181b6:	3301      	adds	r3, #1
 80181b8:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 80181bc:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80181c0:	2b02      	cmp	r3, #2
 80181c2:	d9cd      	bls.n	8018160 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80181c4:	2300      	movs	r3, #0
 80181c6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80181ca:	e034      	b.n	8018236 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x156>
		for(u_short col = 0; col < other_width; ++col)
 80181cc:	2300      	movs	r3, #0
 80181ce:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80181d2:	e027      	b.n	8018224 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80181d4:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 80181d8:	f107 0314 	add.w	r3, r7, #20
 80181dc:	4611      	mov	r1, r2
 80181de:	4618      	mov	r0, r3
 80181e0:	f7f8 fafd 	bl	80107de <_ZNSt5arrayIS_IfLj6EELj6EEixEj>
 80181e4:	4605      	mov	r5, r0
 80181e6:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80181ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80181ee:	4611      	mov	r1, r2
 80181f0:	4618      	mov	r0, r3
 80181f2:	f000 fa9a 	bl	801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>
 80181f6:	4606      	mov	r6, r0
 80181f8:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 80181fc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8018200:	4619      	mov	r1, r3
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f7ff fd42 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8018208:	4604      	mov	r4, r0
 801820a:	4631      	mov	r1, r6
 801820c:	4628      	mov	r0, r5
 801820e:	f7f8 faf5 	bl	80107fc <_ZN3Mat13Multiply_rowsILj6EEEfRKSt5arrayIfXT_EES4_>
 8018212:	eef0 7a40 	vmov.f32	s15, s0
 8018216:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 801821a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 801821e:	3301      	adds	r3, #1
 8018220:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 8018224:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8018228:	2b02      	cmp	r3, #2
 801822a:	d9d3      	bls.n	80181d4 <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 801822c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8018230:	3301      	adds	r3, #1
 8018232:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 8018236:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 801823a:	2b05      	cmp	r3, #5
 801823c:	d9c6      	bls.n	80181cc <_ZNK3Mat6MatrixILt6ELt6EE8MultiplyILt3EEEvRKNS0_ILt6EXT_EEERS3_+0xec>
}
 801823e:	bf00      	nop
 8018240:	bf00      	nop
 8018242:	37fc      	adds	r7, #252	; 0xfc
 8018244:	46bd      	mov	sp, r7
 8018246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018248 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801824a:	b0a3      	sub	sp, #140	; 0x8c
 801824c:	af00      	add	r7, sp, #0
 801824e:	60f8      	str	r0, [r7, #12]
 8018250:	60b9      	str	r1, [r7, #8]
 8018252:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8018254:	2300      	movs	r3, #0
 8018256:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801825a:	e02d      	b.n	80182b8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801825c:	2300      	movs	r3, #0
 801825e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8018262:	e020      	b.n	80182a6 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8018264:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8018268:	f107 0310 	add.w	r3, r7, #16
 801826c:	4611      	mov	r1, r2
 801826e:	4618      	mov	r0, r3
 8018270:	f000 fa79 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8018274:	4602      	mov	r2, r0
 8018276:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801827a:	4619      	mov	r1, r3
 801827c:	4610      	mov	r0, r2
 801827e:	f7f5 ff53 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8018282:	4604      	mov	r4, r0
 8018284:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8018288:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801828c:	4619      	mov	r1, r3
 801828e:	68f8      	ldr	r0, [r7, #12]
 8018290:	f000 fa12 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018294:	eef0 7a40 	vmov.f32	s15, s0
 8018298:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801829c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80182a0:	3301      	adds	r3, #1
 80182a2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80182a6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80182aa:	2b02      	cmp	r3, #2
 80182ac:	d9da      	bls.n	8018264 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 80182ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80182b2:	3301      	adds	r3, #1
 80182b4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80182b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80182bc:	2b05      	cmp	r3, #5
 80182be:	d9cd      	bls.n	801825c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 80182c0:	2300      	movs	r3, #0
 80182c2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80182c6:	e02d      	b.n	8018324 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 80182c8:	2300      	movs	r3, #0
 80182ca:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80182ce:	e020      	b.n	8018312 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80182d0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80182d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80182d8:	4611      	mov	r1, r2
 80182da:	4618      	mov	r0, r3
 80182dc:	f7f6 f8b6 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80182e0:	4602      	mov	r2, r0
 80182e2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80182e6:	4619      	mov	r1, r3
 80182e8:	4610      	mov	r0, r2
 80182ea:	f7f5 ff1d 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 80182ee:	4604      	mov	r4, r0
 80182f0:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80182f4:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80182f8:	4619      	mov	r1, r3
 80182fa:	68b8      	ldr	r0, [r7, #8]
 80182fc:	f7f6 f8b5 	bl	800e46a <_ZNK3Mat6MatrixILt3ELt3EEclEtt>
 8018300:	eef0 7a40 	vmov.f32	s15, s0
 8018304:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018308:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 801830c:	3301      	adds	r3, #1
 801830e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8018312:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8018316:	2b02      	cmp	r3, #2
 8018318:	d9da      	bls.n	80182d0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 801831a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 801831e:	3301      	adds	r3, #1
 8018320:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8018324:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8018328:	2b02      	cmp	r3, #2
 801832a:	d9cd      	bls.n	80182c8 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 801832c:	2300      	movs	r3, #0
 801832e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8018332:	e034      	b.n	801839e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018334:	2300      	movs	r3, #0
 8018336:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801833a:	e027      	b.n	801838c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801833c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8018340:	f107 0310 	add.w	r3, r7, #16
 8018344:	4611      	mov	r1, r2
 8018346:	4618      	mov	r0, r3
 8018348:	f000 fa0d 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801834c:	4605      	mov	r5, r0
 801834e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8018352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018356:	4611      	mov	r1, r2
 8018358:	4618      	mov	r0, r3
 801835a:	f7f6 f877 	bl	800e44c <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 801835e:	4606      	mov	r6, r0
 8018360:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8018364:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8018368:	4619      	mov	r1, r3
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f7ff fc8e 	bl	8017c8c <_ZN3Mat6MatrixILt6ELt3EEclEtt>
 8018370:	4604      	mov	r4, r0
 8018372:	4631      	mov	r1, r6
 8018374:	4628      	mov	r0, r5
 8018376:	f7f6 f8be 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801837a:	eef0 7a40 	vmov.f32	s15, s0
 801837e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8018382:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8018386:	3301      	adds	r3, #1
 8018388:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801838c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8018390:	2b02      	cmp	r3, #2
 8018392:	d9d3      	bls.n	801833c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8018394:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8018398:	3301      	adds	r3, #1
 801839a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801839e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80183a2:	2b05      	cmp	r3, #5
 80183a4:	d9c6      	bls.n	8018334 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt3EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 80183a6:	bf00      	nop
 80183a8:	bf00      	nop
 80183aa:	378c      	adds	r7, #140	; 0x8c
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183b0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 80183b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183b2:	b09d      	sub	sp, #116	; 0x74
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	60f8      	str	r0, [r7, #12]
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 80183bc:	2300      	movs	r3, #0
 80183be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80183c2:	e02d      	b.n	8018420 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 80183c4:	2300      	movs	r3, #0
 80183c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80183ca:	e020      	b.n	801840e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 80183cc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80183d0:	f107 0310 	add.w	r3, r7, #16
 80183d4:	4611      	mov	r1, r2
 80183d6:	4618      	mov	r0, r3
 80183d8:	f000 f9c5 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80183dc:	4602      	mov	r2, r0
 80183de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80183e2:	4619      	mov	r1, r3
 80183e4:	4610      	mov	r0, r2
 80183e6:	f7f5 fe9f 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 80183ea:	4604      	mov	r4, r0
 80183ec:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80183f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80183f4:	4619      	mov	r1, r3
 80183f6:	68f8      	ldr	r0, [r7, #12]
 80183f8:	f000 f95e 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 80183fc:	eef0 7a40 	vmov.f32	s15, s0
 8018400:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 8018404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8018408:	3301      	adds	r3, #1
 801840a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801840e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8018412:	2b02      	cmp	r3, #2
 8018414:	d9da      	bls.n	80183cc <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 8018416:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801841a:	3301      	adds	r3, #1
 801841c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8018420:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8018424:	2b05      	cmp	r3, #5
 8018426:	d9cd      	bls.n	80183c4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018428:	2300      	movs	r3, #0
 801842a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801842e:	e02d      	b.n	801848c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018430:	2300      	movs	r3, #0
 8018432:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8018436:	e020      	b.n	801847a <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 8018438:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801843c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018440:	4611      	mov	r1, r2
 8018442:	4618      	mov	r0, r3
 8018444:	f7f6 f82e 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 8018448:	4602      	mov	r2, r0
 801844a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801844e:	4619      	mov	r1, r3
 8018450:	4610      	mov	r0, r2
 8018452:	f7f5 fe69 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8018456:	4604      	mov	r4, r0
 8018458:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801845c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8018460:	4619      	mov	r1, r3
 8018462:	68b8      	ldr	r0, [r7, #8]
 8018464:	f7f6 f82d 	bl	800e4c2 <_ZNK3Mat6MatrixILt3ELt1EEclEtt>
 8018468:	eef0 7a40 	vmov.f32	s15, s0
 801846c:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 8018470:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8018474:	3301      	adds	r3, #1
 8018476:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801847a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801847e:	2b02      	cmp	r3, #2
 8018480:	d9da      	bls.n	8018438 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 8018482:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8018486:	3301      	adds	r3, #1
 8018488:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801848c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8018490:	2b00      	cmp	r3, #0
 8018492:	d0cd      	beq.n	8018430 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 8018494:	2300      	movs	r3, #0
 8018496:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801849a:	e034      	b.n	8018506 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 801849c:	2300      	movs	r3, #0
 801849e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80184a2:	e027      	b.n	80184f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 80184a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80184a8:	f107 0310 	add.w	r3, r7, #16
 80184ac:	4611      	mov	r1, r2
 80184ae:	4618      	mov	r0, r3
 80184b0:	f000 f959 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80184b4:	4605      	mov	r5, r0
 80184b6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80184ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80184be:	4611      	mov	r1, r2
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7f5 ffef 	bl	800e4a4 <_ZNSt5arrayIS_IfLj3EELj1EEixEj>
 80184c6:	4606      	mov	r6, r0
 80184c8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80184cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80184d0:	4619      	mov	r1, r3
 80184d2:	6878      	ldr	r0, [r7, #4]
 80184d4:	f7f8 fa13 	bl	80108fe <_ZN3Mat6MatrixILt6ELt1EEclEtt>
 80184d8:	4604      	mov	r4, r0
 80184da:	4631      	mov	r1, r6
 80184dc:	4628      	mov	r0, r5
 80184de:	f7f6 f80a 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 80184e2:	eef0 7a40 	vmov.f32	s15, s0
 80184e6:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 80184ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80184ee:	3301      	adds	r3, #1
 80184f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80184f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d0d3      	beq.n	80184a4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 80184fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018500:	3301      	adds	r3, #1
 8018502:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8018506:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801850a:	2b05      	cmp	r3, #5
 801850c:	d9c6      	bls.n	801849c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt1EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 801850e:	bf00      	nop
 8018510:	bf00      	nop
 8018512:	3774      	adds	r7, #116	; 0x74
 8018514:	46bd      	mov	sp, r7
 8018516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018518 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE>:
void Matrix<heigth, width>::Multiply(const Matrix<width, other_width>& other, Matrix<heigth, other_width>& result) const
 8018518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801851a:	b0ad      	sub	sp, #180	; 0xb4
 801851c:	af00      	add	r7, sp, #0
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	60b9      	str	r1, [r7, #8]
 8018522:	607a      	str	r2, [r7, #4]
	for(u_short row = 0; row < heigth; ++row)
 8018524:	2300      	movs	r3, #0
 8018526:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801852a:	e02d      	b.n	8018588 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x70>
		for(u_short col = 0; col < width; ++col)
 801852c:	2300      	movs	r3, #0
 801852e:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8018532:	e020      	b.n	8018576 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x5e>
			this_rows[row][col] = this->operator()(row, col);
 8018534:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8018538:	f107 0314 	add.w	r3, r7, #20
 801853c:	4611      	mov	r1, r2
 801853e:	4618      	mov	r0, r3
 8018540:	f000 f911 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 8018544:	4602      	mov	r2, r0
 8018546:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801854a:	4619      	mov	r1, r3
 801854c:	4610      	mov	r0, r2
 801854e:	f7f5 fdeb 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8018552:	4604      	mov	r4, r0
 8018554:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8018558:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801855c:	4619      	mov	r1, r3
 801855e:	68f8      	ldr	r0, [r7, #12]
 8018560:	f000 f8aa 	bl	80186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>
 8018564:	eef0 7a40 	vmov.f32	s15, s0
 8018568:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < width; ++col)
 801856c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8018570:	3301      	adds	r3, #1
 8018572:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8018576:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 801857a:	2b02      	cmp	r3, #2
 801857c:	d9da      	bls.n	8018534 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x1c>
	for(u_short row = 0; row < heigth; ++row)
 801857e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018582:	3301      	adds	r3, #1
 8018584:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018588:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801858c:	2b05      	cmp	r3, #5
 801858e:	d9cd      	bls.n	801852c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x14>
	for(u_short col = 0; col < other_width; ++col)
 8018590:	2300      	movs	r3, #0
 8018592:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8018596:	e02d      	b.n	80185f4 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xdc>
		for(u_short row = 0; row < width; ++row)
 8018598:	2300      	movs	r3, #0
 801859a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801859e:	e020      	b.n	80185e2 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xca>
			other_columns[col][row] = other(row, col);
 80185a0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80185a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80185a8:	4611      	mov	r1, r2
 80185aa:	4618      	mov	r0, r3
 80185ac:	f000 f8db 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 80185b0:	4602      	mov	r2, r0
 80185b2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80185b6:	4619      	mov	r1, r3
 80185b8:	4610      	mov	r0, r2
 80185ba:	f7f5 fdb5 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 80185be:	4604      	mov	r4, r0
 80185c0:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 80185c4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80185c8:	4619      	mov	r1, r3
 80185ca:	68b8      	ldr	r0, [r7, #8]
 80185cc:	f7ff fcb5 	bl	8017f3a <_ZNK3Mat6MatrixILt3ELt6EEclEtt>
 80185d0:	eef0 7a40 	vmov.f32	s15, s0
 80185d4:	edc4 7a00 	vstr	s15, [r4]
		for(u_short row = 0; row < width; ++row)
 80185d8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80185dc:	3301      	adds	r3, #1
 80185de:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80185e2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	d9da      	bls.n	80185a0 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x88>
	for(u_short col = 0; col < other_width; ++col)
 80185ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80185ee:	3301      	adds	r3, #1
 80185f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80185f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80185f8:	2b05      	cmp	r3, #5
 80185fa:	d9cd      	bls.n	8018598 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x80>
	for(u_short row = 0; row < heigth; ++row)
 80185fc:	2300      	movs	r3, #0
 80185fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8018602:	e034      	b.n	801866e <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x156>
		for(u_short col = 0; col < other_width; ++col)
 8018604:	2300      	movs	r3, #0
 8018606:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801860a:	e027      	b.n	801865c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0x144>
			result(row, col) = Multiply_rows<width>(this_rows[row], other_columns[col]);
 801860c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8018610:	f107 0314 	add.w	r3, r7, #20
 8018614:	4611      	mov	r1, r2
 8018616:	4618      	mov	r0, r3
 8018618:	f000 f8a5 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801861c:	4605      	mov	r5, r0
 801861e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8018622:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018626:	4611      	mov	r1, r2
 8018628:	4618      	mov	r0, r3
 801862a:	f000 f89c 	bl	8018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>
 801862e:	4606      	mov	r6, r0
 8018630:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8018634:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018638:	4619      	mov	r1, r3
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f7f5 fb80 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018640:	4604      	mov	r4, r0
 8018642:	4631      	mov	r1, r6
 8018644:	4628      	mov	r0, r5
 8018646:	f7f5 ff56 	bl	800e4f6 <_ZN3Mat13Multiply_rowsILj3EEEfRKSt5arrayIfXT_EES4_>
 801864a:	eef0 7a40 	vmov.f32	s15, s0
 801864e:	edc4 7a00 	vstr	s15, [r4]
		for(u_short col = 0; col < other_width; ++col)
 8018652:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8018656:	3301      	adds	r3, #1
 8018658:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801865c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8018660:	2b05      	cmp	r3, #5
 8018662:	d9d3      	bls.n	801860c <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xf4>
	for(u_short row = 0; row < heigth; ++row)
 8018664:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018668:	3301      	adds	r3, #1
 801866a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 801866e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018672:	2b05      	cmp	r3, #5
 8018674:	d9c6      	bls.n	8018604 <_ZNK3Mat6MatrixILt6ELt3EE8MultiplyILt6EEEvRKNS0_ILt3EXT_EEERNS0_ILt6EXT_EEE+0xec>
}
 8018676:	bf00      	nop
 8018678:	bf00      	nop
 801867a:	37b4      	adds	r7, #180	; 0xb4
 801867c:	46bd      	mov	sp, r7
 801867e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018680 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_>:
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	60f8      	str	r0, [r7, #12]
 8018688:	60b9      	str	r1, [r7, #8]
 801868a:	ed87 0a01 	vstr	s0, [r7, #4]
      for (; __first != __last; ++__first)
 801868e:	e007      	b.n	80186a0 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x20>
	__f(*__first);
 8018690:	1d3b      	adds	r3, r7, #4
 8018692:	68f9      	ldr	r1, [r7, #12]
 8018694:	4618      	mov	r0, r3
 8018696:	f7ff facd 	bl	8017c34 <_ZZN3Mat6MatrixILt6ELt3EEC4EfENKUlRfE_clES2_>
      for (; __first != __last; ++__first)
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	3304      	adds	r3, #4
 801869e:	60fb      	str	r3, [r7, #12]
 80186a0:	68fa      	ldr	r2, [r7, #12]
 80186a2:	68bb      	ldr	r3, [r7, #8]
 80186a4:	429a      	cmp	r2, r3
 80186a6:	d1f3      	bne.n	8018690 <_ZSt8for_eachIPfZN3Mat6MatrixILt6ELt3EEC4EfEUlRfE_ET0_T_S7_S6_+0x10>
      return __f; // N.B. [alg.foreach] says std::move(f) but it's redundant.
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	ee07 3a90 	vmov	s15, r3
    }
 80186ae:	eeb0 0a67 	vmov.f32	s0, s15
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <_ZNK3Mat6MatrixILt6ELt3EEclEtt>:
float Matrix<heigth, width>::operator()(u_short row, u_short col) const
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	460b      	mov	r3, r1
 80186c2:	807b      	strh	r3, [r7, #2]
 80186c4:	4613      	mov	r3, r2
 80186c6:	803b      	strh	r3, [r7, #0]
	u_int index = width * row + col;
 80186c8:	887a      	ldrh	r2, [r7, #2]
 80186ca:	4613      	mov	r3, r2
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	441a      	add	r2, r3
 80186d0:	883b      	ldrh	r3, [r7, #0]
 80186d2:	4413      	add	r3, r2
 80186d4:	60fb      	str	r3, [r7, #12]
	return _values[index];
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	68f9      	ldr	r1, [r7, #12]
 80186da:	4618      	mov	r0, r3
 80186dc:	f000 f834 	bl	8018748 <_ZNKSt5arrayIfLj18EEixEj>
 80186e0:	4603      	mov	r3, r0
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	ee07 3a90 	vmov	s15, r3
}
 80186e8:	eeb0 0a67 	vmov.f32	s0, s15
 80186ec:	3710      	adds	r7, #16
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}

080186f2 <_ZNSt5arrayIfLj18EE4dataEv>:
      data() noexcept
 80186f2:	b580      	push	{r7, lr}
 80186f4:	b082      	sub	sp, #8
 80186f6:	af00      	add	r7, sp, #0
 80186f8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	4618      	mov	r0, r3
 80186fe:	f000 f841 	bl	8018784 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>
 8018702:	4603      	mov	r3, r0
 8018704:	4618      	mov	r0, r3
 8018706:	3708      	adds	r7, #8
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801870c:	b480      	push	{r7}
 801870e:	b083      	sub	sp, #12
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	009b      	lsls	r3, r3, #2
 801871a:	687a      	ldr	r2, [r7, #4]
 801871c:	4413      	add	r3, r2
 801871e:	4618      	mov	r0, r3
 8018720:	370c      	adds	r7, #12
 8018722:	46bd      	mov	sp, r7
 8018724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018728:	4770      	bx	lr

0801872a <_ZNSt5arrayIS_IfLj6EELj3EEixEj>:
      operator[](size_type __n) noexcept
 801872a:	b580      	push	{r7, lr}
 801872c:	b082      	sub	sp, #8
 801872e:	af00      	add	r7, sp, #0
 8018730:	6078      	str	r0, [r7, #4]
 8018732:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6839      	ldr	r1, [r7, #0]
 8018738:	4618      	mov	r0, r3
 801873a:	f000 f82e 	bl	801879a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>
 801873e:	4603      	mov	r3, r0
      }
 8018740:	4618      	mov	r0, r3
 8018742:	3708      	adds	r7, #8
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 8018748:	b580      	push	{r7, lr}
 801874a:	b082      	sub	sp, #8
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6839      	ldr	r1, [r7, #0]
 8018756:	4618      	mov	r0, r3
 8018758:	f7ff ffd8 	bl	801870c <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 801875c:	4603      	mov	r3, r0
      }
 801875e:	4618      	mov	r0, r3
 8018760:	3708      	adds	r7, #8
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}

08018766 <_ZNSt5arrayIS_IfLj3EELj6EEixEj>:
      operator[](size_type __n) noexcept
 8018766:	b580      	push	{r7, lr}
 8018768:	b082      	sub	sp, #8
 801876a:	af00      	add	r7, sp, #0
 801876c:	6078      	str	r0, [r7, #4]
 801876e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6839      	ldr	r1, [r7, #0]
 8018774:	4618      	mov	r0, r3
 8018776:	f000 f822 	bl	80187be <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>
 801877a:	4603      	mov	r3, r0
      }
 801877c:	4618      	mov	r0, r3
 801877e:	3708      	adds	r7, #8
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}

08018784 <_ZNSt14__array_traitsIfLj18EE6_S_ptrERA18_Kf>:
      _S_ptr(const _Type& __t) noexcept
 8018784:	b480      	push	{r7}
 8018786:	b083      	sub	sp, #12
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	4618      	mov	r0, r3
 8018790:	370c      	adds	r7, #12
 8018792:	46bd      	mov	sp, r7
 8018794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018798:	4770      	bx	lr

0801879a <_ZNSt14__array_traitsISt5arrayIfLj6EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 801879a:	b480      	push	{r7}
 801879c:	b083      	sub	sp, #12
 801879e:	af00      	add	r7, sp, #0
 80187a0:	6078      	str	r0, [r7, #4]
 80187a2:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80187a4:	683a      	ldr	r2, [r7, #0]
 80187a6:	4613      	mov	r3, r2
 80187a8:	005b      	lsls	r3, r3, #1
 80187aa:	4413      	add	r3, r2
 80187ac:	00db      	lsls	r3, r3, #3
 80187ae:	687a      	ldr	r2, [r7, #4]
 80187b0:	4413      	add	r3, r2
 80187b2:	4618      	mov	r0, r3
 80187b4:	370c      	adds	r7, #12
 80187b6:	46bd      	mov	sp, r7
 80187b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187bc:	4770      	bx	lr

080187be <_ZNSt14__array_traitsISt5arrayIfLj3EELj6EE6_S_refERA6_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80187be:	b480      	push	{r7}
 80187c0:	b083      	sub	sp, #12
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	6078      	str	r0, [r7, #4]
 80187c6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80187c8:	683a      	ldr	r2, [r7, #0]
 80187ca:	4613      	mov	r3, r2
 80187cc:	005b      	lsls	r3, r3, #1
 80187ce:	4413      	add	r3, r2
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	687a      	ldr	r2, [r7, #4]
 80187d4:	4413      	add	r3, r2
 80187d6:	4618      	mov	r0, r3
 80187d8:	370c      	adds	r7, #12
 80187da:	46bd      	mov	sp, r7
 80187dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e0:	4770      	bx	lr
	...

080187e4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f>:
//		const OrientationEKF::StateVec& oriState, const OrientationEKF::StateCovarianceMatrix& oriCov,
//		const VelocityEKF::StateVec& velState, const VelocityEKF::StateCovarianceMatrix& velCov,
//		float time) : _orientationEKF{oriState, oriCov, time}, _velocityEKF{velState, velCov, time}{}

void FusionAlgorithm::InitState(const Matrix<3, 1>& acc, const Matrix<3, 1>& mag, float time)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	ed2d 8b06 	vpush	{d8-d10}
 80187ea:	b08c      	sub	sp, #48	; 0x30
 80187ec:	af06      	add	r7, sp, #24
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	60b9      	str	r1, [r7, #8]
 80187f2:	607a      	str	r2, [r7, #4]
 80187f4:	ed87 0a00 	vstr	s0, [r7]
	LOG("INIT");
 80187f8:	f7e9 fd3a 	bl	8002270 <HAL_GetTick>
 80187fc:	4601      	mov	r1, r0
 80187fe:	2317      	movs	r3, #23
 8018800:	4a29      	ldr	r2, [pc, #164]	; (80188a8 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc4>)
 8018802:	482a      	ldr	r0, [pc, #168]	; (80188ac <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc8>)
 8018804:	f005 fc54 	bl	801e0b0 <iprintf>
 8018808:	4829      	ldr	r0, [pc, #164]	; (80188b0 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xcc>)
 801880a:	f005 fc51 	bl	801e0b0 <iprintf>
 801880e:	4829      	ldr	r0, [pc, #164]	; (80188b4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd0>)
 8018810:	f005 fc4e 	bl	801e0b0 <iprintf>
	_orientationEKF.Initialise(acc, mag, time);
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	ed97 0a00 	vldr	s0, [r7]
 801881a:	687a      	ldr	r2, [r7, #4]
 801881c:	68b9      	ldr	r1, [r7, #8]
 801881e:	4618      	mov	r0, r3
 8018820:	f7fb fca9 	bl	8014176 <_ZN10Algorithms14OrientationEKF10InitialiseERKN3Mat6MatrixILt3ELt1EEES5_f>
	const auto& _state = _orientationEKF.GetState();
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	4618      	mov	r0, r3
 8018828:	f000 fcd6 	bl	80191d8 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 801882c:	6178      	str	r0, [r7, #20]
	LOG("State: %f, %f, %f, %f", _state(0), _state(1), _state(2), _state(3));
 801882e:	f7e9 fd1f 	bl	8002270 <HAL_GetTick>
 8018832:	4601      	mov	r1, r0
 8018834:	231a      	movs	r3, #26
 8018836:	4a1c      	ldr	r2, [pc, #112]	; (80188a8 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc4>)
 8018838:	481c      	ldr	r0, [pc, #112]	; (80188ac <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xc8>)
 801883a:	f005 fc39 	bl	801e0b0 <iprintf>
 801883e:	2100      	movs	r1, #0
 8018840:	6978      	ldr	r0, [r7, #20]
 8018842:	f7fd fe07 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018846:	eef0 7a40 	vmov.f32	s15, s0
 801884a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 801884e:	2101      	movs	r1, #1
 8018850:	6978      	ldr	r0, [r7, #20]
 8018852:	f7fd fdff 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018856:	eef0 7a40 	vmov.f32	s15, s0
 801885a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 801885e:	2102      	movs	r1, #2
 8018860:	6978      	ldr	r0, [r7, #20]
 8018862:	f7fd fdf7 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018866:	eef0 7a40 	vmov.f32	s15, s0
 801886a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 801886e:	2103      	movs	r1, #3
 8018870:	6978      	ldr	r0, [r7, #20]
 8018872:	f7fd fdef 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018876:	eef0 7a40 	vmov.f32	s15, s0
 801887a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801887e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018882:	ed8d 9b02 	vstr	d9, [sp, #8]
 8018886:	ed8d 8b00 	vstr	d8, [sp]
 801888a:	ec53 2b1a 	vmov	r2, r3, d10
 801888e:	480a      	ldr	r0, [pc, #40]	; (80188b8 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd4>)
 8018890:	f005 fc0e 	bl	801e0b0 <iprintf>
 8018894:	4807      	ldr	r0, [pc, #28]	; (80188b4 <_ZN10Algorithms15FusionAlgorithm9InitStateERKN3Mat6MatrixILt3ELt1EEES5_f+0xd0>)
 8018896:	f005 fc0b 	bl	801e0b0 <iprintf>
}
 801889a:	bf00      	nop
 801889c:	3718      	adds	r7, #24
 801889e:	46bd      	mov	sp, r7
 80188a0:	ecbd 8b06 	vpop	{d8-d10}
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	080202d8 	.word	0x080202d8
 80188ac:	080202e4 	.word	0x080202e4
 80188b0:	080202f4 	.word	0x080202f4
 80188b4:	080202fc 	.word	0x080202fc
 80188b8:	08020300 	.word	0x08020300

080188bc <_ZN10Algorithms15FusionAlgorithm9OnIMUDataERK15AGMSensorData_t>:

void FusionAlgorithm::OnIMUData(const AGMSensorData& imuData)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	ed2d 8b02 	vpush	{d8}
 80188c2:	b08e      	sub	sp, #56	; 0x38
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
	float dt = imuData.SensorTime - _orientationEKF.GetTime();
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	4618      	mov	r0, r3
 80188d4:	f000 fc8c 	bl	80191f0 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7GetTimeEv>
 80188d8:	eef0 7a40 	vmov.f32	s15, s0
 80188dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80188e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	_orientationControlVec(0) = imuData.Gyro.x; _orientationControlVec(1) = imuData.Gyro.y; _orientationControlVec(2) = imuData.Gyro.z;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80188ea:	2100      	movs	r1, #0
 80188ec:	4618      	mov	r0, r3
 80188ee:	f000 fc8e 	bl	801920e <_ZN3Mat8V_VectorILt3EEclEt>
 80188f2:	4602      	mov	r2, r0
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	699b      	ldr	r3, [r3, #24]
 80188f8:	6013      	str	r3, [r2, #0]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018900:	2101      	movs	r1, #1
 8018902:	4618      	mov	r0, r3
 8018904:	f000 fc83 	bl	801920e <_ZN3Mat8V_VectorILt3EEclEt>
 8018908:	4602      	mov	r2, r0
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	69db      	ldr	r3, [r3, #28]
 801890e:	6013      	str	r3, [r2, #0]
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018916:	2102      	movs	r1, #2
 8018918:	4618      	mov	r0, r3
 801891a:	f000 fc78 	bl	801920e <_ZN3Mat8V_VectorILt3EEclEt>
 801891e:	4602      	mov	r2, r0
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	6a1b      	ldr	r3, [r3, #32]
 8018924:	6013      	str	r3, [r2, #0]
	_orientationEKF.Predict(_orientationControlVec, _orientationControlCov, imuData.SensorTime);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	f503 7184 	add.w	r1, r3, #264	; 0x108
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	f503 728a 	add.w	r2, r3, #276	; 0x114
 8018934:	683b      	ldr	r3, [r7, #0]
 8018936:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801893a:	eeb0 0a67 	vmov.f32	s0, s15
 801893e:	f7f5 ffa5 	bl	800e88c <_ZN10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7PredictERKN3Mat8V_VectorILt3EEERKNS2_6MatrixILt3ELt3EEEf>
	float a_factor = 1.0f / (sqrt(imuData.Acc.x*imuData.Acc.x + imuData.Acc.y*imuData.Acc.y + imuData.Acc.z*imuData.Acc.z));
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	ed93 7a03 	vldr	s14, [r3, #12]
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	edd3 7a03 	vldr	s15, [r3, #12]
 801894e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	edd3 6a04 	vldr	s13, [r3, #16]
 8018958:	683b      	ldr	r3, [r7, #0]
 801895a:	edd3 7a04 	vldr	s15, [r3, #16]
 801895e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	edd3 6a05 	vldr	s13, [r3, #20]
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	edd3 7a05 	vldr	s15, [r3, #20]
 8018972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018976:	ee77 7a27 	vadd.f32	s15, s14, s15
 801897a:	eeb0 0a67 	vmov.f32	s0, s15
 801897e:	f7f8 fa19 	bl	8010db4 <_ZSt4sqrtf>
 8018982:	eeb0 7a40 	vmov.f32	s14, s0
 8018986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801898a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801898e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float m_factor = 1.0f / (sqrt(imuData.Mag.x*imuData.Mag.x + imuData.Mag.y*imuData.Mag.y + imuData.Mag.z*imuData.Mag.z));
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	ed93 7a00 	vldr	s14, [r3]
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	edd3 7a00 	vldr	s15, [r3]
 801899e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80189ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	edd3 7a02 	vldr	s15, [r3, #8]
 80189c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80189c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189ca:	eeb0 0a67 	vmov.f32	s0, s15
 80189ce:	f7f8 f9f1 	bl	8010db4 <_ZSt4sqrtf>
 80189d2:	eeb0 7a40 	vmov.f32	s14, s0
 80189d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80189da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80189de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_orientationMeassurementVec(0) = imuData.Acc.x * a_factor;
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	ed93 8a03 	vldr	s16, [r3, #12]
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80189ee:	2100      	movs	r1, #0
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7ff f825 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 80189f6:	4603      	mov	r3, r0
 80189f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80189fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018a00:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(1) = imuData.Acc.y * a_factor;
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	ed93 8a04 	vldr	s16, [r3, #16]
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a10:	2101      	movs	r1, #1
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7ff f814 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018a1e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018a22:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(2) = imuData.Acc.z * a_factor;
 8018a26:	683b      	ldr	r3, [r7, #0]
 8018a28:	ed93 8a05 	vldr	s16, [r3, #20]
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a32:	2102      	movs	r1, #2
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7ff f803 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018a40:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018a44:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(3) = imuData.Mag.x * m_factor;
 8018a48:	683b      	ldr	r3, [r7, #0]
 8018a4a:	ed93 8a00 	vldr	s16, [r3]
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a54:	2103      	movs	r1, #3
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fe fff2 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a62:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018a66:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(4) = imuData.Mag.y * m_factor;
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	ed93 8a01 	vldr	s16, [r3, #4]
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a76:	2104      	movs	r1, #4
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f7fe ffe1 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018a84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018a88:	edc3 7a00 	vstr	s15, [r3]
	_orientationMeassurementVec(5) = imuData.Mag.z * m_factor;
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	ed93 8a02 	vldr	s16, [r3, #8]
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a98:	2105      	movs	r1, #5
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fe ffd0 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018aa6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018aaa:	edc3 7a00 	vstr	s15, [r3]
	_orientationEKF.Update(_orientationMeassurementVec, _orientationMeassurementCov, imuData.SensorTime);
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8018ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8018ac6:	f7fb fb29 	bl	801411c <_ZN10Algorithms14OrientationEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>
	return;
	V_Vector<3> accL{{imuData.Acc.x, imuData.Acc.y, imuData.Acc.z}};
	auto accENU = GetRotationMatrix()*accL;
	accENU(2,0) -= Gravity;
	_velocityEKF.Predict(static_cast<const V_Vector<3>&>(accENU), _GetGlobalAccCov(accL(0), accL(1), accL(2)), imuData.SensorTime);
}
 8018aca:	3738      	adds	r7, #56	; 0x38
 8018acc:	46bd      	mov	sp, r7
 8018ace:	ecbd 8b02 	vpop	{d8}
 8018ad2:	bd80      	pop	{r7, pc}

08018ad4 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle>:

void FusionAlgorithm::OnGNSSData(const GNSS_StateHandle* GNSSData)
{
 8018ad4:	b590      	push	{r4, r7, lr}
 8018ad6:	ed2d 8b0a 	vpush	{d8-d12}
 8018ada:	b08d      	sub	sp, #52	; 0x34
 8018adc:	af0a      	add	r7, sp, #40	; 0x28
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
	static VelocityEKF::MeassurementVec measurementVec;
 8018ae2:	4bc7      	ldr	r3, [pc, #796]	; (8018e00 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	f3bf 8f5b 	dmb	ish
 8018aea:	f003 0301 	and.w	r3, r3, #1
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	bf0c      	ite	eq
 8018af2:	2301      	moveq	r3, #1
 8018af4:	2300      	movne	r3, #0
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d010      	beq.n	8018b1e <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 8018afc:	48c0      	ldr	r0, [pc, #768]	; (8018e00 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018afe:	f004 fbfb 	bl	801d2f8 <__cxa_guard_acquire>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	bf14      	ite	ne
 8018b08:	2301      	movne	r3, #1
 8018b0a:	2300      	moveq	r3, #0
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d005      	beq.n	8018b1e <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x4a>
 8018b12:	48bc      	ldr	r0, [pc, #752]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018b14:	f7f5 f898 	bl	800dc48 <_ZN3Mat8V_VectorILt6EEC1Ev>
 8018b18:	48b9      	ldr	r0, [pc, #740]	; (8018e00 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x32c>)
 8018b1a:	f004 fbf9 	bl	801d310 <__cxa_guard_release>
	static VelocityEKF::MeasurementCovarianceMatrix measurementCov = Eye<6>(1.0f);
 8018b1e:	4bba      	ldr	r3, [pc, #744]	; (8018e08 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	f3bf 8f5b 	dmb	ish
 8018b26:	f003 0301 	and.w	r3, r3, #1
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	bf0c      	ite	eq
 8018b2e:	2301      	moveq	r3, #1
 8018b30:	2300      	movne	r3, #0
 8018b32:	b2db      	uxtb	r3, r3
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d013      	beq.n	8018b60 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 8018b38:	48b3      	ldr	r0, [pc, #716]	; (8018e08 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018b3a:	f004 fbdd 	bl	801d2f8 <__cxa_guard_acquire>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	bf14      	ite	ne
 8018b44:	2301      	movne	r3, #1
 8018b46:	2300      	moveq	r3, #0
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d008      	beq.n	8018b60 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x8c>
 8018b4e:	4baf      	ldr	r3, [pc, #700]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018b50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018b54:	4618      	mov	r0, r3
 8018b56:	f7f6 fccd 	bl	800f4f4 <_ZN3Mat3EyeILt6EEENS_6MatrixIXT_EXT_EEEf>
 8018b5a:	48ab      	ldr	r0, [pc, #684]	; (8018e08 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x334>)
 8018b5c:	f004 fbd8 	bl	801d310 <__cxa_guard_release>
	measurementVec(0) = ((float)GNSSData->velE) * mm2m;
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8018b66:	ee07 3a90 	vmov	s15, r3
 8018b6a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018b6e:	2100      	movs	r1, #0
 8018b70:	48a4      	ldr	r0, [pc, #656]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018b72:	f7fe ff65 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018b76:	4603      	mov	r3, r0
 8018b78:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018b7c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018b80:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(1) = ((float)GNSSData->velN) * mm2m;
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8018b8a:	ee07 3a90 	vmov	s15, r3
 8018b8e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018b92:	2101      	movs	r1, #1
 8018b94:	489b      	ldr	r0, [pc, #620]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018b96:	f7fe ff53 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018ba0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018ba4:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(2) = -((float)GNSSData->velD) * mm2m;
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8018bae:	ee07 3a90 	vmov	s15, r3
 8018bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018bb6:	eeb1 8a67 	vneg.f32	s16, s15
 8018bba:	2102      	movs	r1, #2
 8018bbc:	4891      	ldr	r0, [pc, #580]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018bbe:	f7fe ff3f 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	eddf 7a92 	vldr	s15, [pc, #584]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018bc8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018bcc:	edc3 7a00 	vstr	s15, [r3]
	measurementVec(3) = GNSSData->fLat;
 8018bd0:	2103      	movs	r1, #3
 8018bd2:	488c      	ldr	r0, [pc, #560]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018bd4:	f7fe ff34 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018bd8:	4602      	mov	r2, r0
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	6013      	str	r3, [r2, #0]
	measurementVec(4) = GNSSData->fLon;
 8018be4:	2104      	movs	r1, #4
 8018be6:	4887      	ldr	r0, [pc, #540]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018be8:	f7fe ff2a 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018bec:	4602      	mov	r2, r0
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	6013      	str	r3, [r2, #0]
	measurementVec(5) = ((float)GNSSData->hMSL) * mm2m;
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8018bfe:	ee07 3a90 	vmov	s15, r3
 8018c02:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018c06:	2105      	movs	r1, #5
 8018c08:	487e      	ldr	r0, [pc, #504]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c0a:	f7fe ff19 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018c14:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018c18:	edc3 7a00 	vstr	s15, [r3]
	LOG("measurementVec: \t%f, \t%f, \t%f, \t%f, \t%f, \t%f", measurementVec(0), measurementVec(1), measurementVec(2), measurementVec(3), measurementVec(4), measurementVec(5));
 8018c1c:	f7e9 fb28 	bl	8002270 <HAL_GetTick>
 8018c20:	4601      	mov	r1, r0
 8018c22:	233f      	movs	r3, #63	; 0x3f
 8018c24:	4a7b      	ldr	r2, [pc, #492]	; (8018e14 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x340>)
 8018c26:	487c      	ldr	r0, [pc, #496]	; (8018e18 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x344>)
 8018c28:	f005 fa42 	bl	801e0b0 <iprintf>
 8018c2c:	2100      	movs	r1, #0
 8018c2e:	4875      	ldr	r0, [pc, #468]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c30:	f7fe ff06 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c34:	4603      	mov	r3, r0
 8018c36:	edd3 7a00 	vldr	s15, [r3]
 8018c3a:	eeb7 cae7 	vcvt.f64.f32	d12, s15
 8018c3e:	2101      	movs	r1, #1
 8018c40:	4870      	ldr	r0, [pc, #448]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c42:	f7fe fefd 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c46:	4603      	mov	r3, r0
 8018c48:	edd3 7a00 	vldr	s15, [r3]
 8018c4c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8018c50:	2102      	movs	r1, #2
 8018c52:	486c      	ldr	r0, [pc, #432]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c54:	f7fe fef4 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	edd3 7a00 	vldr	s15, [r3]
 8018c5e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8018c62:	2103      	movs	r1, #3
 8018c64:	4867      	ldr	r0, [pc, #412]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c66:	f7fe feeb 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	edd3 7a00 	vldr	s15, [r3]
 8018c70:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8018c74:	2104      	movs	r1, #4
 8018c76:	4863      	ldr	r0, [pc, #396]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c78:	f7fe fee2 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	edd3 7a00 	vldr	s15, [r3]
 8018c82:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8018c86:	2105      	movs	r1, #5
 8018c88:	485e      	ldr	r0, [pc, #376]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018c8a:	f7fe fed9 	bl	8017a40 <_ZN3Mat8V_VectorILt6EEclEt>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	edd3 7a00 	vldr	s15, [r3]
 8018c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018c98:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018c9c:	ed8d bb06 	vstr	d11, [sp, #24]
 8018ca0:	ed8d ab04 	vstr	d10, [sp, #16]
 8018ca4:	ed8d 9b02 	vstr	d9, [sp, #8]
 8018ca8:	ed8d 8b00 	vstr	d8, [sp]
 8018cac:	ec53 2b1c 	vmov	r2, r3, d12
 8018cb0:	485a      	ldr	r0, [pc, #360]	; (8018e1c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x348>)
 8018cb2:	f005 f9fd 	bl	801e0b0 <iprintf>
 8018cb6:	485a      	ldr	r0, [pc, #360]	; (8018e20 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x34c>)
 8018cb8:	f005 f9fa 	bl	801e0b0 <iprintf>

	measurementCov(0,0) = ((float)GNSSData->sAcc) * mm2m;
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018cc2:	ee07 3a90 	vmov	s15, r3
 8018cc6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018cca:	2200      	movs	r2, #0
 8018ccc:	2100      	movs	r1, #0
 8018cce:	484f      	ldr	r0, [pc, #316]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018cd0:	f7f5 f836 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018cda:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018cde:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(1,1) = ((float)GNSSData->sAcc) * mm2m;
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018ce8:	ee07 3a90 	vmov	s15, r3
 8018cec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	2101      	movs	r1, #1
 8018cf4:	4845      	ldr	r0, [pc, #276]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018cf6:	f7f5 f823 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	eddf 7a44 	vldr	s15, [pc, #272]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018d00:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018d04:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(2,2) = ((float)GNSSData->sAcc) * mm2m;
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8018d0e:	ee07 3a90 	vmov	s15, r3
 8018d12:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018d16:	2202      	movs	r2, #2
 8018d18:	2102      	movs	r1, #2
 8018d1a:	483c      	ldr	r0, [pc, #240]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018d1c:	f7f5 f810 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018d20:	4603      	mov	r3, r0
 8018d22:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018d26:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018d2a:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(3,3) = ((float)GNSSData->hAcc) * mm2m * _ER;
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8018d34:	ee07 3a90 	vmov	s15, r3
 8018d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d3c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018d40:	ee27 8a87 	vmul.f32	s16, s15, s14
 8018d44:	2203      	movs	r2, #3
 8018d46:	2103      	movs	r1, #3
 8018d48:	4830      	ldr	r0, [pc, #192]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018d4a:	f7f4 fff9 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	eddf 7a34 	vldr	s15, [pc, #208]	; 8018e24 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x350>
 8018d54:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018d58:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(4,4) = ((float)GNSSData->hAcc) * mm2m * _ER / cos(GNSSData->fLat * DEG_2_RAD);
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8018d62:	ee07 3a90 	vmov	s15, r3
 8018d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d6a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018d72:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8018e24 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x350>
 8018d76:	ee27 8a87 	vmul.f32	s16, s15, s14
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8018d80:	edd3 7a00 	vldr	s15, [r3]
 8018d84:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8018e28 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x354>
 8018d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8018d90:	f7f7 fff0 	bl	8010d74 <_ZSt3cosf>
 8018d94:	eef0 8a40 	vmov.f32	s17, s0
 8018d98:	2204      	movs	r2, #4
 8018d9a:	2104      	movs	r1, #4
 8018d9c:	481b      	ldr	r0, [pc, #108]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018d9e:	f7f4 ffcf 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018da2:	4603      	mov	r3, r0
 8018da4:	eec8 7a28 	vdiv.f32	s15, s16, s17
 8018da8:	edc3 7a00 	vstr	s15, [r3]
	measurementCov(5,5) = ((float)GNSSData->vAcc) * mm2m;
 8018dac:	683b      	ldr	r3, [r7, #0]
 8018dae:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8018db2:	ee07 3a90 	vmov	s15, r3
 8018db6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018dba:	2205      	movs	r2, #5
 8018dbc:	2105      	movs	r1, #5
 8018dbe:	4813      	ldr	r0, [pc, #76]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018dc0:	f7f4 ffbe 	bl	800dd40 <_ZN3Mat6MatrixILt6ELt6EEclEtt>
 8018dc4:	4603      	mov	r3, r0
 8018dc6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8018e10 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x33c>
 8018dca:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018dce:	edc3 7a00 	vstr	s15, [r3]
	_velocityEKF.Update(measurementVec, measurementCov, _velocityEKF.GetTime());
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	3358      	adds	r3, #88	; 0x58
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f000 fa27 	bl	8019230 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>
 8018de2:	eef0 7a40 	vmov.f32	s15, s0
 8018de6:	eeb0 0a67 	vmov.f32	s0, s15
 8018dea:	4a08      	ldr	r2, [pc, #32]	; (8018e0c <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x338>)
 8018dec:	4905      	ldr	r1, [pc, #20]	; (8018e04 <_ZN10Algorithms15FusionAlgorithm10OnGNSSDataEPK16GNSS_StateHandle+0x330>)
 8018dee:	4620      	mov	r0, r4
 8018df0:	f7fd fd70 	bl	80168d4 <_ZN10Algorithms11VelocityEKF6UpdateERKN3Mat8V_VectorILt6EEERKNS1_6MatrixILt6ELt6EEEf>
}
 8018df4:	bf00      	nop
 8018df6:	370c      	adds	r7, #12
 8018df8:	46bd      	mov	sp, r7
 8018dfa:	ecbd 8b0a 	vpop	{d8-d12}
 8018dfe:	bd90      	pop	{r4, r7, pc}
 8018e00:	240096fc 	.word	0x240096fc
 8018e04:	240096e4 	.word	0x240096e4
 8018e08:	24009790 	.word	0x24009790
 8018e0c:	24009700 	.word	0x24009700
 8018e10:	3a83126f 	.word	0x3a83126f
 8018e14:	08020318 	.word	0x08020318
 8018e18:	080202e4 	.word	0x080202e4
 8018e1c:	08020324 	.word	0x08020324
 8018e20:	080202fc 	.word	0x080202fc
 8018e24:	3428892d 	.word	0x3428892d
 8018e28:	3c8ee7a4 	.word	0x3c8ee7a4

08018e2c <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv>:
	float yaw = atan2(2.0f * (q(1) * q(2) + q(0) * q(3)), q(0) * q(0) + q(1) * q(1) - q(2) * q(2) - q(3) * q(3));
	return yaw * 57.29578f + 180.0f;
}

const Matrix<3,3>& FusionAlgorithm::GetRotationMatrix() const
{
 8018e2c:	b5b0      	push	{r4, r5, r7, lr}
 8018e2e:	ed2d 8b02 	vpush	{d8}
 8018e32:	b096      	sub	sp, #88	; 0x58
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
	static Matrix<3,3> rotationMatrix;
 8018e38:	4b0f      	ldr	r3, [pc, #60]	; (8018e78 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f3bf 8f5b 	dmb	ish
 8018e40:	f003 0301 	and.w	r3, r3, #1
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	bf0c      	ite	eq
 8018e48:	2301      	moveq	r3, #1
 8018e4a:	2300      	movne	r3, #0
 8018e4c:	b2db      	uxtb	r3, r3
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d016      	beq.n	8018e80 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8018e52:	4809      	ldr	r0, [pc, #36]	; (8018e78 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8018e54:	f004 fa50 	bl	801d2f8 <__cxa_guard_acquire>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	bf14      	ite	ne
 8018e5e:	2301      	movne	r3, #1
 8018e60:	2300      	moveq	r3, #0
 8018e62:	b2db      	uxtb	r3, r3
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00b      	beq.n	8018e80 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8018e68:	4804      	ldr	r0, [pc, #16]	; (8018e7c <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x50>)
 8018e6a:	f7f4 ff3a 	bl	800dce2 <_ZN3Mat6MatrixILt3ELt3EEC1Ev>
 8018e6e:	4802      	ldr	r0, [pc, #8]	; (8018e78 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x4c>)
 8018e70:	f004 fa4e 	bl	801d310 <__cxa_guard_release>
 8018e74:	e004      	b.n	8018e80 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x54>
 8018e76:	bf00      	nop
 8018e78:	240097b8 	.word	0x240097b8
 8018e7c:	24009794 	.word	0x24009794
	const OrientationEKF::StateVec& q = _orientationEKF.GetState();
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	4618      	mov	r0, r3
 8018e84:	f000 f9a8 	bl	80191d8 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>
 8018e88:	6578      	str	r0, [r7, #84]	; 0x54
	rotationMatrix = {{
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018e8e:	f7fd fae1 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018e92:	eeb0 8a40 	vmov.f32	s16, s0
 8018e96:	2100      	movs	r1, #0
 8018e98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018e9a:	f7fd fadb 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018e9e:	eef0 7a40 	vmov.f32	s15, s0
 8018ea2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018ea6:	2101      	movs	r1, #1
 8018ea8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018eaa:	f7fd fad3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018eae:	eef0 8a40 	vmov.f32	s17, s0
 8018eb2:	2101      	movs	r1, #1
 8018eb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018eb6:	f7fd facd 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018eba:	eef0 7a40 	vmov.f32	s15, s0
 8018ebe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018ec2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8018ec6:	2102      	movs	r1, #2
 8018ec8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018eca:	f7fd fac3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018ece:	eef0 8a40 	vmov.f32	s17, s0
 8018ed2:	2102      	movs	r1, #2
 8018ed4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018ed6:	f7fd fabd 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018eda:	eef0 7a40 	vmov.f32	s15, s0
 8018ede:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018ee2:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018ee6:	2103      	movs	r1, #3
 8018ee8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018eea:	f7fd fab3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018eee:	eef0 8a40 	vmov.f32	s17, s0
 8018ef2:	2103      	movs	r1, #3
 8018ef4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018ef6:	f7fd faad 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018efa:	eef0 7a40 	vmov.f32	s15, s0
 8018efe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018f02:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8018f06:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8018f0a:	2101      	movs	r1, #1
 8018f0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f0e:	f7fd faa1 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f12:	eeb0 8a40 	vmov.f32	s16, s0
 8018f16:	2102      	movs	r1, #2
 8018f18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f1a:	f7fd fa9b 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f1e:	eef0 7a40 	vmov.f32	s15, s0
 8018f22:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018f26:	2100      	movs	r1, #0
 8018f28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f2a:	f7fd fa93 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f2e:	eef0 8a40 	vmov.f32	s17, s0
 8018f32:	2103      	movs	r1, #3
 8018f34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f36:	f7fd fa8d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f3a:	eef0 7a40 	vmov.f32	s15, s0
 8018f3e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018f42:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018f46:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8018f4a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			q(0)*q(0)+q(1)*q(1)-q(2)*q(2)-q(3)*q(3), 	2.0f*(q(1)*q(2)-q(0)*q(3)), 	2.0f*(q(1)*q(3)+q(0)*q(2)),
 8018f4e:	2101      	movs	r1, #1
 8018f50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f52:	f7fd fa7f 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f56:	eeb0 8a40 	vmov.f32	s16, s0
 8018f5a:	2103      	movs	r1, #3
 8018f5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f5e:	f7fd fa79 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f62:	eef0 7a40 	vmov.f32	s15, s0
 8018f66:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018f6a:	2100      	movs	r1, #0
 8018f6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f6e:	f7fd fa71 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f72:	eef0 8a40 	vmov.f32	s17, s0
 8018f76:	2102      	movs	r1, #2
 8018f78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f7a:	f7fd fa6b 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f7e:	eef0 7a40 	vmov.f32	s15, s0
 8018f82:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018f86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8018f8e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8018f92:	2101      	movs	r1, #1
 8018f94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f96:	f7fd fa5d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018f9a:	eeb0 8a40 	vmov.f32	s16, s0
 8018f9e:	2102      	movs	r1, #2
 8018fa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fa2:	f7fd fa57 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018fa6:	eef0 7a40 	vmov.f32	s15, s0
 8018faa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018fae:	2100      	movs	r1, #0
 8018fb0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fb2:	f7fd fa4f 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018fb6:	eef0 8a40 	vmov.f32	s17, s0
 8018fba:	2103      	movs	r1, #3
 8018fbc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fbe:	f7fd fa49 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018fc2:	eef0 7a40 	vmov.f32	s15, s0
 8018fc6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018fca:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018fce:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8018fd2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fda:	f7fd fa3b 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018fde:	eeb0 8a40 	vmov.f32	s16, s0
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018fe6:	f7fd fa35 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018fea:	eef0 7a40 	vmov.f32	s15, s0
 8018fee:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018ff6:	f7fd fa2d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8018ffa:	eef0 8a40 	vmov.f32	s17, s0
 8018ffe:	2101      	movs	r1, #1
 8019000:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019002:	f7fd fa27 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019006:	eef0 7a40 	vmov.f32	s15, s0
 801900a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801900e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019012:	2102      	movs	r1, #2
 8019014:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019016:	f7fd fa1d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801901a:	eef0 8a40 	vmov.f32	s17, s0
 801901e:	2102      	movs	r1, #2
 8019020:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019022:	f7fd fa17 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019026:	eef0 7a40 	vmov.f32	s15, s0
 801902a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801902e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8019032:	2103      	movs	r1, #3
 8019034:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019036:	f7fd fa0d 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801903a:	eef0 8a40 	vmov.f32	s17, s0
 801903e:	2103      	movs	r1, #3
 8019040:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019042:	f7fd fa07 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019046:	eef0 7a40 	vmov.f32	s15, s0
 801904a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801904e:	ee78 7a67 	vsub.f32	s15, s16, s15
	rotationMatrix = {{
 8019052:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			2.0f*(q(1)*q(2)+q(0)*q(3)), 	q(0)*q(0)-q(1)*q(1)+q(2)*q(2)-q(3)*q(3),	2.0f*(q(2)*q(3)-q(0)*q(1)),
 8019056:	2102      	movs	r1, #2
 8019058:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801905a:	f7fd f9fb 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801905e:	eeb0 8a40 	vmov.f32	s16, s0
 8019062:	2103      	movs	r1, #3
 8019064:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019066:	f7fd f9f5 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801906a:	eef0 7a40 	vmov.f32	s15, s0
 801906e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019072:	2100      	movs	r1, #0
 8019074:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019076:	f7fd f9ed 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801907a:	eef0 8a40 	vmov.f32	s17, s0
 801907e:	2101      	movs	r1, #1
 8019080:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019082:	f7fd f9e7 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019086:	eef0 7a40 	vmov.f32	s15, s0
 801908a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801908e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019092:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 8019096:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 801909a:	2101      	movs	r1, #1
 801909c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801909e:	f7fd f9d9 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190a2:	eeb0 8a40 	vmov.f32	s16, s0
 80190a6:	2103      	movs	r1, #3
 80190a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190aa:	f7fd f9d3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190ae:	eef0 7a40 	vmov.f32	s15, s0
 80190b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80190b6:	2100      	movs	r1, #0
 80190b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190ba:	f7fd f9cb 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190be:	eef0 8a40 	vmov.f32	s17, s0
 80190c2:	2102      	movs	r1, #2
 80190c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190c6:	f7fd f9c5 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190ca:	eef0 7a40 	vmov.f32	s15, s0
 80190ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80190d2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80190d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 80190da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 80190de:	2100      	movs	r1, #0
 80190e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190e2:	f7fd f9b7 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190e6:	eeb0 8a40 	vmov.f32	s16, s0
 80190ea:	2101      	movs	r1, #1
 80190ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190ee:	f7fd f9b1 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 80190f2:	eef0 7a40 	vmov.f32	s15, s0
 80190f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80190fa:	2102      	movs	r1, #2
 80190fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80190fe:	f7fd f9a9 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019102:	eef0 8a40 	vmov.f32	s17, s0
 8019106:	2103      	movs	r1, #3
 8019108:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801910a:	f7fd f9a3 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801910e:	eef0 7a40 	vmov.f32	s15, s0
 8019112:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8019116:	ee78 7a27 	vadd.f32	s15, s16, s15
 801911a:	ee77 7aa7 	vadd.f32	s15, s15, s15
	rotationMatrix = {{
 801911e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			2.0f*(q(1)*q(3)-q(0)*q(2)),		2.0f*(q(0)*q(1)+q(2)*q(3)), 	q(0)*q(0)-q(1)*q(1)-q(2)*q(2)+q(3)*q(3)
 8019122:	2100      	movs	r1, #0
 8019124:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019126:	f7fd f995 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 801912a:	eeb0 8a40 	vmov.f32	s16, s0
 801912e:	2100      	movs	r1, #0
 8019130:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019132:	f7fd f98f 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019136:	eef0 7a40 	vmov.f32	s15, s0
 801913a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801913e:	2101      	movs	r1, #1
 8019140:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019142:	f7fd f987 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019146:	eef0 8a40 	vmov.f32	s17, s0
 801914a:	2101      	movs	r1, #1
 801914c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801914e:	f7fd f981 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019152:	eef0 7a40 	vmov.f32	s15, s0
 8019156:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801915a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801915e:	2102      	movs	r1, #2
 8019160:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019162:	f7fd f977 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019166:	eef0 8a40 	vmov.f32	s17, s0
 801916a:	2102      	movs	r1, #2
 801916c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801916e:	f7fd f971 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019172:	eef0 7a40 	vmov.f32	s15, s0
 8019176:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801917a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801917e:	2103      	movs	r1, #3
 8019180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019182:	f7fd f967 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019186:	eef0 8a40 	vmov.f32	s17, s0
 801918a:	2103      	movs	r1, #3
 801918c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801918e:	f7fd f961 	bl	8016454 <_ZNK3Mat8V_VectorILt4EEclEt>
 8019192:	eef0 7a40 	vmov.f32	s15, s0
 8019196:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801919a:	ee78 7a27 	vadd.f32	s15, s16, s15
	rotationMatrix = {{
 801919e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 80191a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80191a6:	f107 030c 	add.w	r3, r7, #12
 80191aa:	4611      	mov	r1, r2
 80191ac:	4618      	mov	r0, r3
 80191ae:	f7f7 fcdb 	bl	8010b68 <_ZN3Mat6MatrixILt3ELt3EEC1ERKSt5arrayIfLj9EE>
 80191b2:	4b08      	ldr	r3, [pc, #32]	; (80191d4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x3a8>)
 80191b4:	461d      	mov	r5, r3
 80191b6:	f107 040c 	add.w	r4, r7, #12
 80191ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80191be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80191c2:	6823      	ldr	r3, [r4, #0]
 80191c4:	602b      	str	r3, [r5, #0]
	}};
	return rotationMatrix;
 80191c6:	4b03      	ldr	r3, [pc, #12]	; (80191d4 <_ZNK10Algorithms15FusionAlgorithm17GetRotationMatrixEv+0x3a8>)
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	3758      	adds	r7, #88	; 0x58
 80191cc:	46bd      	mov	sp, r7
 80191ce:	ecbd 8b02 	vpop	{d8}
 80191d2:	bdb0      	pop	{r4, r5, r7, pc}
 80191d4:	24009794 	.word	0x24009794

080191d8 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE8GetStateEv>:
		_time = time;}

	virtual void Predict(const ControlVec& controlVec, const ControlCovarianceMatrix& controlCov, float time);
	virtual void Update(const MeassurementVec& meassurementVec, const MeasurementCovarianceMatrix& meassurementCov, float time);

	const StateVec& GetState() const {return _state;}
 80191d8:	b480      	push	{r7}
 80191da:	b083      	sub	sp, #12
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	3304      	adds	r3, #4
 80191e4:	4618      	mov	r0, r3
 80191e6:	370c      	adds	r7, #12
 80191e8:	46bd      	mov	sp, r7
 80191ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ee:	4770      	bx	lr

080191f0 <_ZNK10Algorithms20ExtendedKalmanFilterILt4ELt3ELt6EE7GetTimeEv>:
	const StateCovarianceMatrix& GetStateCov() const {return _stateCovMatrix;}
	float GetTime() const {return _time;}
 80191f0:	b480      	push	{r7}
 80191f2:	b083      	sub	sp, #12
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80191fc:	ee07 3a90 	vmov	s15, r3
 8019200:	eeb0 0a67 	vmov.f32	s0, s15
 8019204:	370c      	adds	r7, #12
 8019206:	46bd      	mov	sp, r7
 8019208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920c:	4770      	bx	lr

0801920e <_ZN3Mat8V_VectorILt3EEclEt>:
 801920e:	b580      	push	{r7, lr}
 8019210:	b082      	sub	sp, #8
 8019212:	af00      	add	r7, sp, #0
 8019214:	6078      	str	r0, [r7, #4]
 8019216:	460b      	mov	r3, r1
 8019218:	807b      	strh	r3, [r7, #2]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	887a      	ldrh	r2, [r7, #2]
 801921e:	4611      	mov	r1, r2
 8019220:	4618      	mov	r0, r3
 8019222:	f7f4 ff81 	bl	800e128 <_ZNSt5arrayIfLj3EEixEj>
 8019226:	4603      	mov	r3, r0
 8019228:	4618      	mov	r0, r3
 801922a:	3708      	adds	r7, #8
 801922c:	46bd      	mov	sp, r7
 801922e:	bd80      	pop	{r7, pc}

08019230 <_ZNK10Algorithms20ExtendedKalmanFilterILt6ELt3ELt6EE7GetTimeEv>:
 8019230:	b480      	push	{r7}
 8019232:	b083      	sub	sp, #12
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801923e:	ee07 3a90 	vmov	s15, r3
 8019242:	eeb0 0a67 	vmov.f32	s0, s15
 8019246:	370c      	adds	r7, #12
 8019248:	46bd      	mov	sp, r7
 801924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924e:	4770      	bx	lr

08019250 <_ZN3Mat10QuaternionpLERKS0_>:

namespace Mat
{

Quaternion& Quaternion::operator+=(const Quaternion& other)
{
 8019250:	b480      	push	{r7}
 8019252:	b083      	sub	sp, #12
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	6039      	str	r1, [r7, #0]
	w += other.w;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	ed93 7a00 	vldr	s14, [r3]
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	edd3 7a00 	vldr	s15, [r3]
 8019266:	ee77 7a27 	vadd.f32	s15, s14, s15
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	edc3 7a00 	vstr	s15, [r3]
	x += other.x;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	ed93 7a01 	vldr	s14, [r3, #4]
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	edd3 7a01 	vldr	s15, [r3, #4]
 801927c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	edc3 7a01 	vstr	s15, [r3, #4]
	y += other.y;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	ed93 7a02 	vldr	s14, [r3, #8]
 801928c:	683b      	ldr	r3, [r7, #0]
 801928e:	edd3 7a02 	vldr	s15, [r3, #8]
 8019292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	edc3 7a02 	vstr	s15, [r3, #8]
	z += other.z;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	ed93 7a03 	vldr	s14, [r3, #12]
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80192a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 80192b2:	687b      	ldr	r3, [r7, #4]
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	370c      	adds	r7, #12
 80192b8:	46bd      	mov	sp, r7
 80192ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192be:	4770      	bx	lr

080192c0 <_ZN3Mat10QuaternionmLEf>:
	*this = operator*(other);
	return *this;
}

Quaternion& Quaternion::operator*=(float f)
{
 80192c0:	b480      	push	{r7}
 80192c2:	b083      	sub	sp, #12
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
 80192c8:	ed87 0a00 	vstr	s0, [r7]
	w *= f;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	ed93 7a00 	vldr	s14, [r3]
 80192d2:	edd7 7a00 	vldr	s15, [r7]
 80192d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	edc3 7a00 	vstr	s15, [r3]
	x *= f;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80192e6:	edd7 7a00 	vldr	s15, [r7]
 80192ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	edc3 7a01 	vstr	s15, [r3, #4]
	y *= f;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80192fa:	edd7 7a00 	vldr	s15, [r7]
 80192fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	edc3 7a02 	vstr	s15, [r3, #8]
	z *= f;
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	ed93 7a03 	vldr	s14, [r3, #12]
 801930e:	edd7 7a00 	vldr	s15, [r7]
 8019312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	edc3 7a03 	vstr	s15, [r3, #12]
	return *this;
 801931c:	687b      	ldr	r3, [r7, #4]
}
 801931e:	4618      	mov	r0, r3
 8019320:	370c      	adds	r7, #12
 8019322:	46bd      	mov	sp, r7
 8019324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019328:	4770      	bx	lr

0801932a <_ZN3Mat10Quaternion9NormaliseEv>:

Quaternion& Quaternion::Normalise()
{
 801932a:	b580      	push	{r7, lr}
 801932c:	b084      	sub	sp, #16
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
	float norm = Norm();
 8019332:	6878      	ldr	r0, [r7, #4]
 8019334:	f000 f9ac 	bl	8019690 <_ZNK3Mat10Quaternion4NormEv>
 8019338:	ed87 0a03 	vstr	s0, [r7, #12]
	if(norm != 0.0f) this->operator *=((1.0f / norm));
 801933c:	edd7 7a03 	vldr	s15, [r7, #12]
 8019340:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019348:	d00a      	beq.n	8019360 <_ZN3Mat10Quaternion9NormaliseEv+0x36>
 801934a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801934e:	edd7 7a03 	vldr	s15, [r7, #12]
 8019352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019356:	eeb0 0a47 	vmov.f32	s0, s14
 801935a:	6878      	ldr	r0, [r7, #4]
 801935c:	f7ff ffb0 	bl	80192c0 <_ZN3Mat10QuaternionmLEf>
	return *this;
 8019360:	687b      	ldr	r3, [r7, #4]
}
 8019362:	4618      	mov	r0, r3
 8019364:	3710      	adds	r7, #16
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}

0801936a <_ZNK3Mat10QuaternionplERKS0_>:

Quaternion Quaternion::operator+(const Quaternion& other) const
{
 801936a:	b590      	push	{r4, r7, lr}
 801936c:	b08f      	sub	sp, #60	; 0x3c
 801936e:	af00      	add	r7, sp, #0
 8019370:	6178      	str	r0, [r7, #20]
 8019372:	6139      	str	r1, [r7, #16]
	Quaternion result = *this;
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	f107 0418 	add.w	r4, r7, #24
 801937a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801937c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result += other;
 8019380:	f107 0318 	add.w	r3, r7, #24
 8019384:	6939      	ldr	r1, [r7, #16]
 8019386:	4618      	mov	r0, r3
 8019388:	f7ff ff62 	bl	8019250 <_ZN3Mat10QuaternionpLERKS0_>
	return result;
 801938c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019390:	f107 0318 	add.w	r3, r7, #24
 8019394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019396:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801939a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801939c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801939e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193a2:	ee06 0a10 	vmov	s12, r0
 80193a6:	ee06 1a90 	vmov	s13, r1
 80193aa:	ee07 2a10 	vmov	s14, r2
 80193ae:	ee07 3a90 	vmov	s15, r3
}
 80193b2:	eeb0 0a46 	vmov.f32	s0, s12
 80193b6:	eef0 0a66 	vmov.f32	s1, s13
 80193ba:	eeb0 1a47 	vmov.f32	s2, s14
 80193be:	eef0 1a67 	vmov.f32	s3, s15
 80193c2:	373c      	adds	r7, #60	; 0x3c
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd90      	pop	{r4, r7, pc}

080193c8 <_ZNK3Mat10QuaternionmlERKS0_>:
	result -= other;
	return result;
}

Quaternion Quaternion::operator*(const Quaternion& other) const
{
 80193c8:	b490      	push	{r4, r7}
 80193ca:	b08e      	sub	sp, #56	; 0x38
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6178      	str	r0, [r7, #20]
 80193d0:	6139      	str	r1, [r7, #16]
	Quaternion result{};
 80193d2:	f107 0318 	add.w	r3, r7, #24
 80193d6:	2200      	movs	r2, #0
 80193d8:	601a      	str	r2, [r3, #0]
 80193da:	605a      	str	r2, [r3, #4]
 80193dc:	609a      	str	r2, [r3, #8]
 80193de:	60da      	str	r2, [r3, #12]
	result.w = this->w*other.w - this->x*other.x - this->y*other.y - this->z*other.z;
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	ed93 7a00 	vldr	s14, [r3]
 80193e6:	693b      	ldr	r3, [r7, #16]
 80193e8:	edd3 7a00 	vldr	s15, [r3]
 80193ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80193f0:	697b      	ldr	r3, [r7, #20]
 80193f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80193fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019404:	697b      	ldr	r3, [r7, #20]
 8019406:	edd3 6a02 	vldr	s13, [r3, #8]
 801940a:	693b      	ldr	r3, [r7, #16]
 801940c:	edd3 7a02 	vldr	s15, [r3, #8]
 8019410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019418:	697b      	ldr	r3, [r7, #20]
 801941a:	edd3 6a03 	vldr	s13, [r3, #12]
 801941e:	693b      	ldr	r3, [r7, #16]
 8019420:	edd3 7a03 	vldr	s15, [r3, #12]
 8019424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019428:	ee77 7a67 	vsub.f32	s15, s14, s15
 801942c:	edc7 7a06 	vstr	s15, [r7, #24]
	result.x = this->w*other.x + this->x*other.w + this->y*other.z - this->z*other.y;
 8019430:	697b      	ldr	r3, [r7, #20]
 8019432:	ed93 7a00 	vldr	s14, [r3]
 8019436:	693b      	ldr	r3, [r7, #16]
 8019438:	edd3 7a01 	vldr	s15, [r3, #4]
 801943c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	edd3 6a01 	vldr	s13, [r3, #4]
 8019446:	693b      	ldr	r3, [r7, #16]
 8019448:	edd3 7a00 	vldr	s15, [r3]
 801944c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	edd3 6a02 	vldr	s13, [r3, #8]
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	edd3 7a03 	vldr	s15, [r3, #12]
 8019460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019468:	697b      	ldr	r3, [r7, #20]
 801946a:	edd3 6a03 	vldr	s13, [r3, #12]
 801946e:	693b      	ldr	r3, [r7, #16]
 8019470:	edd3 7a02 	vldr	s15, [r3, #8]
 8019474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019478:	ee77 7a67 	vsub.f32	s15, s14, s15
 801947c:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y = this->w*other.y - this->x*other.z + this->y*other.w + this->z*other.x;
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	ed93 7a00 	vldr	s14, [r3]
 8019486:	693b      	ldr	r3, [r7, #16]
 8019488:	edd3 7a02 	vldr	s15, [r3, #8]
 801948c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	edd3 6a01 	vldr	s13, [r3, #4]
 8019496:	693b      	ldr	r3, [r7, #16]
 8019498:	edd3 7a03 	vldr	s15, [r3, #12]
 801949c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80194a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80194aa:	693b      	ldr	r3, [r7, #16]
 80194ac:	edd3 7a00 	vldr	s15, [r3]
 80194b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80194b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80194be:	693b      	ldr	r3, [r7, #16]
 80194c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80194c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80194c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194cc:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z = this->w*other.z + this->x*other.y - this->y*other.x + this->z*other.w;
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	ed93 7a00 	vldr	s14, [r3]
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80194dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80194ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80194f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80194fa:	693b      	ldr	r3, [r7, #16]
 80194fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8019500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	edd3 6a03 	vldr	s13, [r3, #12]
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	edd3 7a00 	vldr	s15, [r3]
 8019514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019518:	ee77 7a27 	vadd.f32	s15, s14, s15
 801951c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 8019520:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019524:	f107 0318 	add.w	r3, r7, #24
 8019528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801952a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019536:	ee06 0a10 	vmov	s12, r0
 801953a:	ee06 1a90 	vmov	s13, r1
 801953e:	ee07 2a10 	vmov	s14, r2
 8019542:	ee07 3a90 	vmov	s15, r3
}
 8019546:	eeb0 0a46 	vmov.f32	s0, s12
 801954a:	eef0 0a66 	vmov.f32	s1, s13
 801954e:	eeb0 1a47 	vmov.f32	s2, s14
 8019552:	eef0 1a67 	vmov.f32	s3, s15
 8019556:	3738      	adds	r7, #56	; 0x38
 8019558:	46bd      	mov	sp, r7
 801955a:	bc90      	pop	{r4, r7}
 801955c:	4770      	bx	lr

0801955e <_ZNK3Mat10QuaternionmlEf>:

Quaternion Quaternion::operator*(float f) const
{
 801955e:	b590      	push	{r4, r7, lr}
 8019560:	b08f      	sub	sp, #60	; 0x3c
 8019562:	af00      	add	r7, sp, #0
 8019564:	6178      	str	r0, [r7, #20]
 8019566:	ed87 0a04 	vstr	s0, [r7, #16]
	Quaternion result = *this;
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	f107 0418 	add.w	r4, r7, #24
 8019570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result *= f;
 8019576:	f107 0318 	add.w	r3, r7, #24
 801957a:	ed97 0a04 	vldr	s0, [r7, #16]
 801957e:	4618      	mov	r0, r3
 8019580:	f7ff fe9e 	bl	80192c0 <_ZN3Mat10QuaternionmLEf>
	return result;
 8019584:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019588:	f107 0318 	add.w	r3, r7, #24
 801958c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801958e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801959a:	ee06 0a10 	vmov	s12, r0
 801959e:	ee06 1a90 	vmov	s13, r1
 80195a2:	ee07 2a10 	vmov	s14, r2
 80195a6:	ee07 3a90 	vmov	s15, r3
}
 80195aa:	eeb0 0a46 	vmov.f32	s0, s12
 80195ae:	eef0 0a66 	vmov.f32	s1, s13
 80195b2:	eeb0 1a47 	vmov.f32	s2, s14
 80195b6:	eef0 1a67 	vmov.f32	s3, s15
 80195ba:	373c      	adds	r7, #60	; 0x3c
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd90      	pop	{r4, r7, pc}

080195c0 <_ZNK3Mat10Quaternion9ConjugateEv>:

Quaternion Quaternion::Conjugate() const
{
 80195c0:	b490      	push	{r4, r7}
 80195c2:	b08e      	sub	sp, #56	; 0x38
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6178      	str	r0, [r7, #20]
	Quaternion result = *this;
 80195c8:	697b      	ldr	r3, [r7, #20]
 80195ca:	f107 0418 	add.w	r4, r7, #24
 80195ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	result.x*= -1.0f;
 80195d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80195d8:	eef1 7a67 	vneg.f32	s15, s15
 80195dc:	edc7 7a07 	vstr	s15, [r7, #28]
	result.y*= -1.0f;
 80195e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80195e4:	eef1 7a67 	vneg.f32	s15, s15
 80195e8:	edc7 7a08 	vstr	s15, [r7, #32]
	result.z*= -1.0f;
 80195ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80195f0:	eef1 7a67 	vneg.f32	s15, s15
 80195f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return result;
 80195f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80195fc:	f107 0318 	add.w	r3, r7, #24
 8019600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801960a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801960e:	ee06 0a10 	vmov	s12, r0
 8019612:	ee06 1a90 	vmov	s13, r1
 8019616:	ee07 2a10 	vmov	s14, r2
 801961a:	ee07 3a90 	vmov	s15, r3
}
 801961e:	eeb0 0a46 	vmov.f32	s0, s12
 8019622:	eef0 0a66 	vmov.f32	s1, s13
 8019626:	eeb0 1a47 	vmov.f32	s2, s14
 801962a:	eef0 1a67 	vmov.f32	s3, s15
 801962e:	3738      	adds	r7, #56	; 0x38
 8019630:	46bd      	mov	sp, r7
 8019632:	bc90      	pop	{r4, r7}
 8019634:	4770      	bx	lr

08019636 <_ZNK3Mat10Quaternion10NormalisedEv>:

Quaternion Quaternion::Normalised() const
{
 8019636:	b590      	push	{r4, r7, lr}
 8019638:	b08f      	sub	sp, #60	; 0x3c
 801963a:	af00      	add	r7, sp, #0
 801963c:	6178      	str	r0, [r7, #20]
	Quaternion normalised = *this;
 801963e:	697b      	ldr	r3, [r7, #20]
 8019640:	f107 0418 	add.w	r4, r7, #24
 8019644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	normalised.Normalise();
 801964a:	f107 0318 	add.w	r3, r7, #24
 801964e:	4618      	mov	r0, r3
 8019650:	f7ff fe6b 	bl	801932a <_ZN3Mat10Quaternion9NormaliseEv>
	return normalised;
 8019654:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8019658:	f107 0318 	add.w	r3, r7, #24
 801965c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801965e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801966a:	ee06 0a10 	vmov	s12, r0
 801966e:	ee06 1a90 	vmov	s13, r1
 8019672:	ee07 2a10 	vmov	s14, r2
 8019676:	ee07 3a90 	vmov	s15, r3
}
 801967a:	eeb0 0a46 	vmov.f32	s0, s12
 801967e:	eef0 0a66 	vmov.f32	s1, s13
 8019682:	eeb0 1a47 	vmov.f32	s2, s14
 8019686:	eef0 1a67 	vmov.f32	s3, s15
 801968a:	373c      	adds	r7, #60	; 0x3c
 801968c:	46bd      	mov	sp, r7
 801968e:	bd90      	pop	{r4, r7, pc}

08019690 <_ZNK3Mat10Quaternion4NormEv>:
	conjugate.Normalise();
	return conjugate;
}

float Quaternion::Norm() const
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b082      	sub	sp, #8
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
	return sqrt(w*w + x*x + y*y + z*z);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	ed93 7a00 	vldr	s14, [r3]
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	edd3 7a00 	vldr	s15, [r3]
 80196a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80196b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	edd3 6a02 	vldr	s13, [r3, #8]
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80196c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80196dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80196e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196e4:	eeb0 0a67 	vmov.f32	s0, s15
 80196e8:	f7f7 fb64 	bl	8010db4 <_ZSt4sqrtf>
 80196ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80196f0:	eeb0 0a67 	vmov.f32	s0, s15
 80196f4:	3708      	adds	r7, #8
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bd80      	pop	{r7, pc}
	...

080196fc <__NVIC_SetPriority>:
{
 80196fc:	b480      	push	{r7}
 80196fe:	b083      	sub	sp, #12
 8019700:	af00      	add	r7, sp, #0
 8019702:	4603      	mov	r3, r0
 8019704:	6039      	str	r1, [r7, #0]
 8019706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801970c:	2b00      	cmp	r3, #0
 801970e:	db0a      	blt.n	8019726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	b2da      	uxtb	r2, r3
 8019714:	490c      	ldr	r1, [pc, #48]	; (8019748 <__NVIC_SetPriority+0x4c>)
 8019716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801971a:	0112      	lsls	r2, r2, #4
 801971c:	b2d2      	uxtb	r2, r2
 801971e:	440b      	add	r3, r1
 8019720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019724:	e00a      	b.n	801973c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019726:	683b      	ldr	r3, [r7, #0]
 8019728:	b2da      	uxtb	r2, r3
 801972a:	4908      	ldr	r1, [pc, #32]	; (801974c <__NVIC_SetPriority+0x50>)
 801972c:	88fb      	ldrh	r3, [r7, #6]
 801972e:	f003 030f 	and.w	r3, r3, #15
 8019732:	3b04      	subs	r3, #4
 8019734:	0112      	lsls	r2, r2, #4
 8019736:	b2d2      	uxtb	r2, r2
 8019738:	440b      	add	r3, r1
 801973a:	761a      	strb	r2, [r3, #24]
}
 801973c:	bf00      	nop
 801973e:	370c      	adds	r7, #12
 8019740:	46bd      	mov	sp, r7
 8019742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019746:	4770      	bx	lr
 8019748:	e000e100 	.word	0xe000e100
 801974c:	e000ed00 	.word	0xe000ed00

08019750 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019750:	b580      	push	{r7, lr}
 8019752:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019754:	4b05      	ldr	r3, [pc, #20]	; (801976c <SysTick_Handler+0x1c>)
 8019756:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8019758:	f001 ffa2 	bl	801b6a0 <xTaskGetSchedulerState>
 801975c:	4603      	mov	r3, r0
 801975e:	2b01      	cmp	r3, #1
 8019760:	d001      	beq.n	8019766 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8019762:	f002 fe89 	bl	801c478 <xPortSysTickHandler>
  }
}
 8019766:	bf00      	nop
 8019768:	bd80      	pop	{r7, pc}
 801976a:	bf00      	nop
 801976c:	e000e010 	.word	0xe000e010

08019770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8019770:	b580      	push	{r7, lr}
 8019772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8019774:	2100      	movs	r1, #0
 8019776:	f06f 0004 	mvn.w	r0, #4
 801977a:	f7ff ffbf 	bl	80196fc <__NVIC_SetPriority>
#endif
}
 801977e:	bf00      	nop
 8019780:	bd80      	pop	{r7, pc}
	...

08019784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8019784:	b480      	push	{r7}
 8019786:	b083      	sub	sp, #12
 8019788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801978a:	f3ef 8305 	mrs	r3, IPSR
 801978e:	603b      	str	r3, [r7, #0]
  return(result);
 8019790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8019792:	2b00      	cmp	r3, #0
 8019794:	d003      	beq.n	801979e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8019796:	f06f 0305 	mvn.w	r3, #5
 801979a:	607b      	str	r3, [r7, #4]
 801979c:	e00c      	b.n	80197b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801979e:	4b0a      	ldr	r3, [pc, #40]	; (80197c8 <osKernelInitialize+0x44>)
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d105      	bne.n	80197b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80197a6:	4b08      	ldr	r3, [pc, #32]	; (80197c8 <osKernelInitialize+0x44>)
 80197a8:	2201      	movs	r2, #1
 80197aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80197ac:	2300      	movs	r3, #0
 80197ae:	607b      	str	r3, [r7, #4]
 80197b0:	e002      	b.n	80197b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80197b2:	f04f 33ff 	mov.w	r3, #4294967295
 80197b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80197b8:	687b      	ldr	r3, [r7, #4]
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	370c      	adds	r7, #12
 80197be:	46bd      	mov	sp, r7
 80197c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c4:	4770      	bx	lr
 80197c6:	bf00      	nop
 80197c8:	240097bc 	.word	0x240097bc

080197cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80197d2:	f3ef 8305 	mrs	r3, IPSR
 80197d6:	603b      	str	r3, [r7, #0]
  return(result);
 80197d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d003      	beq.n	80197e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80197de:	f06f 0305 	mvn.w	r3, #5
 80197e2:	607b      	str	r3, [r7, #4]
 80197e4:	e010      	b.n	8019808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80197e6:	4b0b      	ldr	r3, [pc, #44]	; (8019814 <osKernelStart+0x48>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	2b01      	cmp	r3, #1
 80197ec:	d109      	bne.n	8019802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80197ee:	f7ff ffbf 	bl	8019770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80197f2:	4b08      	ldr	r3, [pc, #32]	; (8019814 <osKernelStart+0x48>)
 80197f4:	2202      	movs	r2, #2
 80197f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80197f8:	f001 fb42 	bl	801ae80 <vTaskStartScheduler>
      stat = osOK;
 80197fc:	2300      	movs	r3, #0
 80197fe:	607b      	str	r3, [r7, #4]
 8019800:	e002      	b.n	8019808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019802:	f04f 33ff 	mov.w	r3, #4294967295
 8019806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8019808:	687b      	ldr	r3, [r7, #4]
}
 801980a:	4618      	mov	r0, r3
 801980c:	3708      	adds	r7, #8
 801980e:	46bd      	mov	sp, r7
 8019810:	bd80      	pop	{r7, pc}
 8019812:	bf00      	nop
 8019814:	240097bc 	.word	0x240097bc

08019818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8019818:	b580      	push	{r7, lr}
 801981a:	b08e      	sub	sp, #56	; 0x38
 801981c:	af04      	add	r7, sp, #16
 801981e:	60f8      	str	r0, [r7, #12]
 8019820:	60b9      	str	r1, [r7, #8]
 8019822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019824:	2300      	movs	r3, #0
 8019826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019828:	f3ef 8305 	mrs	r3, IPSR
 801982c:	617b      	str	r3, [r7, #20]
  return(result);
 801982e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019830:	2b00      	cmp	r3, #0
 8019832:	d17e      	bne.n	8019932 <osThreadNew+0x11a>
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d07b      	beq.n	8019932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801983a:	2380      	movs	r3, #128	; 0x80
 801983c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801983e:	2318      	movs	r3, #24
 8019840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019842:	2300      	movs	r3, #0
 8019844:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8019846:	f04f 33ff 	mov.w	r3, #4294967295
 801984a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d045      	beq.n	80198de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d002      	beq.n	8019860 <osThreadNew+0x48>
        name = attr->name;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	699b      	ldr	r3, [r3, #24]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d002      	beq.n	801986e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	699b      	ldr	r3, [r3, #24]
 801986c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801986e:	69fb      	ldr	r3, [r7, #28]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d008      	beq.n	8019886 <osThreadNew+0x6e>
 8019874:	69fb      	ldr	r3, [r7, #28]
 8019876:	2b38      	cmp	r3, #56	; 0x38
 8019878:	d805      	bhi.n	8019886 <osThreadNew+0x6e>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	685b      	ldr	r3, [r3, #4]
 801987e:	f003 0301 	and.w	r3, r3, #1
 8019882:	2b00      	cmp	r3, #0
 8019884:	d001      	beq.n	801988a <osThreadNew+0x72>
        return (NULL);
 8019886:	2300      	movs	r3, #0
 8019888:	e054      	b.n	8019934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	695b      	ldr	r3, [r3, #20]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d003      	beq.n	801989a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	695b      	ldr	r3, [r3, #20]
 8019896:	089b      	lsrs	r3, r3, #2
 8019898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	689b      	ldr	r3, [r3, #8]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d00e      	beq.n	80198c0 <osThreadNew+0xa8>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	68db      	ldr	r3, [r3, #12]
 80198a6:	2b5b      	cmp	r3, #91	; 0x5b
 80198a8:	d90a      	bls.n	80198c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d006      	beq.n	80198c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	695b      	ldr	r3, [r3, #20]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d002      	beq.n	80198c0 <osThreadNew+0xa8>
        mem = 1;
 80198ba:	2301      	movs	r3, #1
 80198bc:	61bb      	str	r3, [r7, #24]
 80198be:	e010      	b.n	80198e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	689b      	ldr	r3, [r3, #8]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d10c      	bne.n	80198e2 <osThreadNew+0xca>
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	68db      	ldr	r3, [r3, #12]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d108      	bne.n	80198e2 <osThreadNew+0xca>
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	691b      	ldr	r3, [r3, #16]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d104      	bne.n	80198e2 <osThreadNew+0xca>
          mem = 0;
 80198d8:	2300      	movs	r3, #0
 80198da:	61bb      	str	r3, [r7, #24]
 80198dc:	e001      	b.n	80198e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80198de:	2300      	movs	r3, #0
 80198e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80198e2:	69bb      	ldr	r3, [r7, #24]
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	d110      	bne.n	801990a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80198ec:	687a      	ldr	r2, [r7, #4]
 80198ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80198f0:	9202      	str	r2, [sp, #8]
 80198f2:	9301      	str	r3, [sp, #4]
 80198f4:	69fb      	ldr	r3, [r7, #28]
 80198f6:	9300      	str	r3, [sp, #0]
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	6a3a      	ldr	r2, [r7, #32]
 80198fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80198fe:	68f8      	ldr	r0, [r7, #12]
 8019900:	f001 f8f8 	bl	801aaf4 <xTaskCreateStatic>
 8019904:	4603      	mov	r3, r0
 8019906:	613b      	str	r3, [r7, #16]
 8019908:	e013      	b.n	8019932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801990a:	69bb      	ldr	r3, [r7, #24]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d110      	bne.n	8019932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019910:	6a3b      	ldr	r3, [r7, #32]
 8019912:	b29a      	uxth	r2, r3
 8019914:	f107 0310 	add.w	r3, r7, #16
 8019918:	9301      	str	r3, [sp, #4]
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	9300      	str	r3, [sp, #0]
 801991e:	68bb      	ldr	r3, [r7, #8]
 8019920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019922:	68f8      	ldr	r0, [r7, #12]
 8019924:	f001 f943 	bl	801abae <xTaskCreate>
 8019928:	4603      	mov	r3, r0
 801992a:	2b01      	cmp	r3, #1
 801992c:	d001      	beq.n	8019932 <osThreadNew+0x11a>
            hTask = NULL;
 801992e:	2300      	movs	r3, #0
 8019930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019932:	693b      	ldr	r3, [r7, #16]
}
 8019934:	4618      	mov	r0, r3
 8019936:	3728      	adds	r7, #40	; 0x28
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}

0801993c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801993c:	b580      	push	{r7, lr}
 801993e:	b084      	sub	sp, #16
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019944:	f3ef 8305 	mrs	r3, IPSR
 8019948:	60bb      	str	r3, [r7, #8]
  return(result);
 801994a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801994c:	2b00      	cmp	r3, #0
 801994e:	d003      	beq.n	8019958 <osDelay+0x1c>
    stat = osErrorISR;
 8019950:	f06f 0305 	mvn.w	r3, #5
 8019954:	60fb      	str	r3, [r7, #12]
 8019956:	e007      	b.n	8019968 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8019958:	2300      	movs	r3, #0
 801995a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d002      	beq.n	8019968 <osDelay+0x2c>
      vTaskDelay(ticks);
 8019962:	6878      	ldr	r0, [r7, #4]
 8019964:	f001 fa58 	bl	801ae18 <vTaskDelay>
    }
  }

  return (stat);
 8019968:	68fb      	ldr	r3, [r7, #12]
}
 801996a:	4618      	mov	r0, r3
 801996c:	3710      	adds	r7, #16
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}

08019972 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8019972:	b580      	push	{r7, lr}
 8019974:	b08a      	sub	sp, #40	; 0x28
 8019976:	af02      	add	r7, sp, #8
 8019978:	60f8      	str	r0, [r7, #12]
 801997a:	60b9      	str	r1, [r7, #8]
 801997c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801997e:	2300      	movs	r3, #0
 8019980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019982:	f3ef 8305 	mrs	r3, IPSR
 8019986:	613b      	str	r3, [r7, #16]
  return(result);
 8019988:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801998a:	2b00      	cmp	r3, #0
 801998c:	d175      	bne.n	8019a7a <osSemaphoreNew+0x108>
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d072      	beq.n	8019a7a <osSemaphoreNew+0x108>
 8019994:	68ba      	ldr	r2, [r7, #8]
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	429a      	cmp	r2, r3
 801999a:	d86e      	bhi.n	8019a7a <osSemaphoreNew+0x108>
    mem = -1;
 801999c:	f04f 33ff 	mov.w	r3, #4294967295
 80199a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d015      	beq.n	80199d4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	689b      	ldr	r3, [r3, #8]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d006      	beq.n	80199be <osSemaphoreNew+0x4c>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	68db      	ldr	r3, [r3, #12]
 80199b4:	2b4f      	cmp	r3, #79	; 0x4f
 80199b6:	d902      	bls.n	80199be <osSemaphoreNew+0x4c>
        mem = 1;
 80199b8:	2301      	movs	r3, #1
 80199ba:	61bb      	str	r3, [r7, #24]
 80199bc:	e00c      	b.n	80199d8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	689b      	ldr	r3, [r3, #8]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d108      	bne.n	80199d8 <osSemaphoreNew+0x66>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	68db      	ldr	r3, [r3, #12]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d104      	bne.n	80199d8 <osSemaphoreNew+0x66>
          mem = 0;
 80199ce:	2300      	movs	r3, #0
 80199d0:	61bb      	str	r3, [r7, #24]
 80199d2:	e001      	b.n	80199d8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80199d8:	69bb      	ldr	r3, [r7, #24]
 80199da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199de:	d04c      	beq.n	8019a7a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	2b01      	cmp	r3, #1
 80199e4:	d128      	bne.n	8019a38 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80199e6:	69bb      	ldr	r3, [r7, #24]
 80199e8:	2b01      	cmp	r3, #1
 80199ea:	d10a      	bne.n	8019a02 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	689b      	ldr	r3, [r3, #8]
 80199f0:	2203      	movs	r2, #3
 80199f2:	9200      	str	r2, [sp, #0]
 80199f4:	2200      	movs	r2, #0
 80199f6:	2100      	movs	r1, #0
 80199f8:	2001      	movs	r0, #1
 80199fa:	f000 f986 	bl	8019d0a <xQueueGenericCreateStatic>
 80199fe:	61f8      	str	r0, [r7, #28]
 8019a00:	e005      	b.n	8019a0e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8019a02:	2203      	movs	r2, #3
 8019a04:	2100      	movs	r1, #0
 8019a06:	2001      	movs	r0, #1
 8019a08:	f000 f9f7 	bl	8019dfa <xQueueGenericCreate>
 8019a0c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d022      	beq.n	8019a5a <osSemaphoreNew+0xe8>
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d01f      	beq.n	8019a5a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	2200      	movs	r2, #0
 8019a1e:	2100      	movs	r1, #0
 8019a20:	69f8      	ldr	r0, [r7, #28]
 8019a22:	f000 fab1 	bl	8019f88 <xQueueGenericSend>
 8019a26:	4603      	mov	r3, r0
 8019a28:	2b01      	cmp	r3, #1
 8019a2a:	d016      	beq.n	8019a5a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8019a2c:	69f8      	ldr	r0, [r7, #28]
 8019a2e:	f000 fe8d 	bl	801a74c <vQueueDelete>
            hSemaphore = NULL;
 8019a32:	2300      	movs	r3, #0
 8019a34:	61fb      	str	r3, [r7, #28]
 8019a36:	e010      	b.n	8019a5a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8019a38:	69bb      	ldr	r3, [r7, #24]
 8019a3a:	2b01      	cmp	r3, #1
 8019a3c:	d108      	bne.n	8019a50 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	689b      	ldr	r3, [r3, #8]
 8019a42:	461a      	mov	r2, r3
 8019a44:	68b9      	ldr	r1, [r7, #8]
 8019a46:	68f8      	ldr	r0, [r7, #12]
 8019a48:	f000 fa34 	bl	8019eb4 <xQueueCreateCountingSemaphoreStatic>
 8019a4c:	61f8      	str	r0, [r7, #28]
 8019a4e:	e004      	b.n	8019a5a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8019a50:	68b9      	ldr	r1, [r7, #8]
 8019a52:	68f8      	ldr	r0, [r7, #12]
 8019a54:	f000 fa65 	bl	8019f22 <xQueueCreateCountingSemaphore>
 8019a58:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8019a5a:	69fb      	ldr	r3, [r7, #28]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d00c      	beq.n	8019a7a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d003      	beq.n	8019a6e <osSemaphoreNew+0xfc>
          name = attr->name;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	617b      	str	r3, [r7, #20]
 8019a6c:	e001      	b.n	8019a72 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8019a6e:	2300      	movs	r3, #0
 8019a70:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8019a72:	6979      	ldr	r1, [r7, #20]
 8019a74:	69f8      	ldr	r0, [r7, #28]
 8019a76:	f000 ffb5 	bl	801a9e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8019a7a:	69fb      	ldr	r3, [r7, #28]
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3720      	adds	r7, #32
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}

08019a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019a84:	b480      	push	{r7}
 8019a86:	b085      	sub	sp, #20
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60f8      	str	r0, [r7, #12]
 8019a8c:	60b9      	str	r1, [r7, #8]
 8019a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	4a07      	ldr	r2, [pc, #28]	; (8019ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8019a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019a96:	68bb      	ldr	r3, [r7, #8]
 8019a98:	4a06      	ldr	r2, [pc, #24]	; (8019ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8019a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	2280      	movs	r2, #128	; 0x80
 8019aa0:	601a      	str	r2, [r3, #0]
}
 8019aa2:	bf00      	nop
 8019aa4:	3714      	adds	r7, #20
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop
 8019ab0:	240097c0 	.word	0x240097c0
 8019ab4:	2400981c 	.word	0x2400981c

08019ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	60f8      	str	r0, [r7, #12]
 8019ac0:	60b9      	str	r1, [r7, #8]
 8019ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	4a07      	ldr	r2, [pc, #28]	; (8019ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8019ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	4a06      	ldr	r2, [pc, #24]	; (8019ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8019ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019ad6:	601a      	str	r2, [r3, #0]
}
 8019ad8:	bf00      	nop
 8019ada:	3714      	adds	r7, #20
 8019adc:	46bd      	mov	sp, r7
 8019ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae2:	4770      	bx	lr
 8019ae4:	24009a1c 	.word	0x24009a1c
 8019ae8:	24009a78 	.word	0x24009a78

08019aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019aec:	b480      	push	{r7}
 8019aee:	b083      	sub	sp, #12
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	f103 0208 	add.w	r2, r3, #8
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	f04f 32ff 	mov.w	r2, #4294967295
 8019b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	f103 0208 	add.w	r2, r3, #8
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f103 0208 	add.w	r2, r3, #8
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	2200      	movs	r2, #0
 8019b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019b20:	bf00      	nop
 8019b22:	370c      	adds	r7, #12
 8019b24:	46bd      	mov	sp, r7
 8019b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2a:	4770      	bx	lr

08019b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019b2c:	b480      	push	{r7}
 8019b2e:	b083      	sub	sp, #12
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2200      	movs	r2, #0
 8019b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019b3a:	bf00      	nop
 8019b3c:	370c      	adds	r7, #12
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b44:	4770      	bx	lr

08019b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019b46:	b480      	push	{r7}
 8019b48:	b085      	sub	sp, #20
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	6078      	str	r0, [r7, #4]
 8019b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	685b      	ldr	r3, [r3, #4]
 8019b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	68fa      	ldr	r2, [r7, #12]
 8019b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	689a      	ldr	r2, [r3, #8]
 8019b60:	683b      	ldr	r3, [r7, #0]
 8019b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	689b      	ldr	r3, [r3, #8]
 8019b68:	683a      	ldr	r2, [r7, #0]
 8019b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	683a      	ldr	r2, [r7, #0]
 8019b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	1c5a      	adds	r2, r3, #1
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	601a      	str	r2, [r3, #0]
}
 8019b82:	bf00      	nop
 8019b84:	3714      	adds	r7, #20
 8019b86:	46bd      	mov	sp, r7
 8019b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b8c:	4770      	bx	lr

08019b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019b8e:	b480      	push	{r7}
 8019b90:	b085      	sub	sp, #20
 8019b92:	af00      	add	r7, sp, #0
 8019b94:	6078      	str	r0, [r7, #4]
 8019b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ba4:	d103      	bne.n	8019bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	691b      	ldr	r3, [r3, #16]
 8019baa:	60fb      	str	r3, [r7, #12]
 8019bac:	e00c      	b.n	8019bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	3308      	adds	r3, #8
 8019bb2:	60fb      	str	r3, [r7, #12]
 8019bb4:	e002      	b.n	8019bbc <vListInsert+0x2e>
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	685b      	ldr	r3, [r3, #4]
 8019bba:	60fb      	str	r3, [r7, #12]
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	68ba      	ldr	r2, [r7, #8]
 8019bc4:	429a      	cmp	r2, r3
 8019bc6:	d2f6      	bcs.n	8019bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	685a      	ldr	r2, [r3, #4]
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	683a      	ldr	r2, [r7, #0]
 8019bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019bd8:	683b      	ldr	r3, [r7, #0]
 8019bda:	68fa      	ldr	r2, [r7, #12]
 8019bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	683a      	ldr	r2, [r7, #0]
 8019be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	1c5a      	adds	r2, r3, #1
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	601a      	str	r2, [r3, #0]
}
 8019bf4:	bf00      	nop
 8019bf6:	3714      	adds	r7, #20
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfe:	4770      	bx	lr

08019c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019c00:	b480      	push	{r7}
 8019c02:	b085      	sub	sp, #20
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	691b      	ldr	r3, [r3, #16]
 8019c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	685b      	ldr	r3, [r3, #4]
 8019c12:	687a      	ldr	r2, [r7, #4]
 8019c14:	6892      	ldr	r2, [r2, #8]
 8019c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	689b      	ldr	r3, [r3, #8]
 8019c1c:	687a      	ldr	r2, [r7, #4]
 8019c1e:	6852      	ldr	r2, [r2, #4]
 8019c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	685b      	ldr	r3, [r3, #4]
 8019c26:	687a      	ldr	r2, [r7, #4]
 8019c28:	429a      	cmp	r2, r3
 8019c2a:	d103      	bne.n	8019c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	689a      	ldr	r2, [r3, #8]
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	2200      	movs	r2, #0
 8019c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	1e5a      	subs	r2, r3, #1
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3714      	adds	r7, #20
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c52:	4770      	bx	lr

08019c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b084      	sub	sp, #16
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d10a      	bne.n	8019c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c6c:	f383 8811 	msr	BASEPRI, r3
 8019c70:	f3bf 8f6f 	isb	sy
 8019c74:	f3bf 8f4f 	dsb	sy
 8019c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019c7a:	bf00      	nop
 8019c7c:	e7fe      	b.n	8019c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019c7e:	f002 fb69 	bl	801c354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	681a      	ldr	r2, [r3, #0]
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c8a:	68f9      	ldr	r1, [r7, #12]
 8019c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019c8e:	fb01 f303 	mul.w	r3, r1, r3
 8019c92:	441a      	add	r2, r3
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	681a      	ldr	r2, [r3, #0]
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	681a      	ldr	r2, [r3, #0]
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cae:	3b01      	subs	r3, #1
 8019cb0:	68f9      	ldr	r1, [r7, #12]
 8019cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019cb4:	fb01 f303 	mul.w	r3, r1, r3
 8019cb8:	441a      	add	r2, r3
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	22ff      	movs	r2, #255	; 0xff
 8019cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	22ff      	movs	r2, #255	; 0xff
 8019cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d109      	bne.n	8019ce8 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	691b      	ldr	r3, [r3, #16]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d00f      	beq.n	8019cfc <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	3310      	adds	r3, #16
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	f001 fb25 	bl	801b330 <xTaskRemoveFromEventList>
 8019ce6:	e009      	b.n	8019cfc <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	3310      	adds	r3, #16
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7ff fefd 	bl	8019aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	3324      	adds	r3, #36	; 0x24
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7ff fef8 	bl	8019aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019cfc:	f002 fb5a 	bl	801c3b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019d00:	2301      	movs	r3, #1
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	3710      	adds	r7, #16
 8019d06:	46bd      	mov	sp, r7
 8019d08:	bd80      	pop	{r7, pc}

08019d0a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019d0a:	b580      	push	{r7, lr}
 8019d0c:	b08e      	sub	sp, #56	; 0x38
 8019d0e:	af02      	add	r7, sp, #8
 8019d10:	60f8      	str	r0, [r7, #12]
 8019d12:	60b9      	str	r1, [r7, #8]
 8019d14:	607a      	str	r2, [r7, #4]
 8019d16:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d10a      	bne.n	8019d34 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d22:	f383 8811 	msr	BASEPRI, r3
 8019d26:	f3bf 8f6f 	isb	sy
 8019d2a:	f3bf 8f4f 	dsb	sy
 8019d2e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019d30:	bf00      	nop
 8019d32:	e7fe      	b.n	8019d32 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d10a      	bne.n	8019d50 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d3e:	f383 8811 	msr	BASEPRI, r3
 8019d42:	f3bf 8f6f 	isb	sy
 8019d46:	f3bf 8f4f 	dsb	sy
 8019d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019d4c:	bf00      	nop
 8019d4e:	e7fe      	b.n	8019d4e <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d002      	beq.n	8019d5c <xQueueGenericCreateStatic+0x52>
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d001      	beq.n	8019d60 <xQueueGenericCreateStatic+0x56>
 8019d5c:	2301      	movs	r3, #1
 8019d5e:	e000      	b.n	8019d62 <xQueueGenericCreateStatic+0x58>
 8019d60:	2300      	movs	r3, #0
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d10a      	bne.n	8019d7c <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8019d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d6a:	f383 8811 	msr	BASEPRI, r3
 8019d6e:	f3bf 8f6f 	isb	sy
 8019d72:	f3bf 8f4f 	dsb	sy
 8019d76:	623b      	str	r3, [r7, #32]
}
 8019d78:	bf00      	nop
 8019d7a:	e7fe      	b.n	8019d7a <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d102      	bne.n	8019d88 <xQueueGenericCreateStatic+0x7e>
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d101      	bne.n	8019d8c <xQueueGenericCreateStatic+0x82>
 8019d88:	2301      	movs	r3, #1
 8019d8a:	e000      	b.n	8019d8e <xQueueGenericCreateStatic+0x84>
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d10a      	bne.n	8019da8 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8019d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d96:	f383 8811 	msr	BASEPRI, r3
 8019d9a:	f3bf 8f6f 	isb	sy
 8019d9e:	f3bf 8f4f 	dsb	sy
 8019da2:	61fb      	str	r3, [r7, #28]
}
 8019da4:	bf00      	nop
 8019da6:	e7fe      	b.n	8019da6 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019da8:	2350      	movs	r3, #80	; 0x50
 8019daa:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019dac:	697b      	ldr	r3, [r7, #20]
 8019dae:	2b50      	cmp	r3, #80	; 0x50
 8019db0:	d00a      	beq.n	8019dc8 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8019db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019db6:	f383 8811 	msr	BASEPRI, r3
 8019dba:	f3bf 8f6f 	isb	sy
 8019dbe:	f3bf 8f4f 	dsb	sy
 8019dc2:	61bb      	str	r3, [r7, #24]
}
 8019dc4:	bf00      	nop
 8019dc6:	e7fe      	b.n	8019dc6 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019dc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d00d      	beq.n	8019df0 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019ddc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de2:	9300      	str	r3, [sp, #0]
 8019de4:	4613      	mov	r3, r2
 8019de6:	687a      	ldr	r2, [r7, #4]
 8019de8:	68b9      	ldr	r1, [r7, #8]
 8019dea:	68f8      	ldr	r0, [r7, #12]
 8019dec:	f000 f83f 	bl	8019e6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019df2:	4618      	mov	r0, r3
 8019df4:	3730      	adds	r7, #48	; 0x30
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}

08019dfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019dfa:	b580      	push	{r7, lr}
 8019dfc:	b08a      	sub	sp, #40	; 0x28
 8019dfe:	af02      	add	r7, sp, #8
 8019e00:	60f8      	str	r0, [r7, #12]
 8019e02:	60b9      	str	r1, [r7, #8]
 8019e04:	4613      	mov	r3, r2
 8019e06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d10a      	bne.n	8019e24 <xQueueGenericCreate+0x2a>
	__asm volatile
 8019e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e12:	f383 8811 	msr	BASEPRI, r3
 8019e16:	f3bf 8f6f 	isb	sy
 8019e1a:	f3bf 8f4f 	dsb	sy
 8019e1e:	613b      	str	r3, [r7, #16]
}
 8019e20:	bf00      	nop
 8019e22:	e7fe      	b.n	8019e22 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	68ba      	ldr	r2, [r7, #8]
 8019e28:	fb02 f303 	mul.w	r3, r2, r3
 8019e2c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019e2e:	69fb      	ldr	r3, [r7, #28]
 8019e30:	3350      	adds	r3, #80	; 0x50
 8019e32:	4618      	mov	r0, r3
 8019e34:	f002 fbb0 	bl	801c598 <pvPortMalloc>
 8019e38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019e3a:	69bb      	ldr	r3, [r7, #24]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d011      	beq.n	8019e64 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019e40:	69bb      	ldr	r3, [r7, #24]
 8019e42:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019e44:	697b      	ldr	r3, [r7, #20]
 8019e46:	3350      	adds	r3, #80	; 0x50
 8019e48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019e4a:	69bb      	ldr	r3, [r7, #24]
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019e52:	79fa      	ldrb	r2, [r7, #7]
 8019e54:	69bb      	ldr	r3, [r7, #24]
 8019e56:	9300      	str	r3, [sp, #0]
 8019e58:	4613      	mov	r3, r2
 8019e5a:	697a      	ldr	r2, [r7, #20]
 8019e5c:	68b9      	ldr	r1, [r7, #8]
 8019e5e:	68f8      	ldr	r0, [r7, #12]
 8019e60:	f000 f805 	bl	8019e6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019e64:	69bb      	ldr	r3, [r7, #24]
	}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3720      	adds	r7, #32
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}

08019e6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019e6e:	b580      	push	{r7, lr}
 8019e70:	b084      	sub	sp, #16
 8019e72:	af00      	add	r7, sp, #0
 8019e74:	60f8      	str	r0, [r7, #12]
 8019e76:	60b9      	str	r1, [r7, #8]
 8019e78:	607a      	str	r2, [r7, #4]
 8019e7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d103      	bne.n	8019e8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019e82:	69bb      	ldr	r3, [r7, #24]
 8019e84:	69ba      	ldr	r2, [r7, #24]
 8019e86:	601a      	str	r2, [r3, #0]
 8019e88:	e002      	b.n	8019e90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019e8a:	69bb      	ldr	r3, [r7, #24]
 8019e8c:	687a      	ldr	r2, [r7, #4]
 8019e8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	68fa      	ldr	r2, [r7, #12]
 8019e94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	68ba      	ldr	r2, [r7, #8]
 8019e9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019e9c:	2101      	movs	r1, #1
 8019e9e:	69b8      	ldr	r0, [r7, #24]
 8019ea0:	f7ff fed8 	bl	8019c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019ea4:	69bb      	ldr	r3, [r7, #24]
 8019ea6:	78fa      	ldrb	r2, [r7, #3]
 8019ea8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019eac:	bf00      	nop
 8019eae:	3710      	adds	r7, #16
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}

08019eb4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b08a      	sub	sp, #40	; 0x28
 8019eb8:	af02      	add	r7, sp, #8
 8019eba:	60f8      	str	r0, [r7, #12]
 8019ebc:	60b9      	str	r1, [r7, #8]
 8019ebe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d10a      	bne.n	8019edc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8019ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eca:	f383 8811 	msr	BASEPRI, r3
 8019ece:	f3bf 8f6f 	isb	sy
 8019ed2:	f3bf 8f4f 	dsb	sy
 8019ed6:	61bb      	str	r3, [r7, #24]
}
 8019ed8:	bf00      	nop
 8019eda:	e7fe      	b.n	8019eda <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019edc:	68ba      	ldr	r2, [r7, #8]
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d90a      	bls.n	8019efa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8019ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ee8:	f383 8811 	msr	BASEPRI, r3
 8019eec:	f3bf 8f6f 	isb	sy
 8019ef0:	f3bf 8f4f 	dsb	sy
 8019ef4:	617b      	str	r3, [r7, #20]
}
 8019ef6:	bf00      	nop
 8019ef8:	e7fe      	b.n	8019ef8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019efa:	2302      	movs	r3, #2
 8019efc:	9300      	str	r3, [sp, #0]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2200      	movs	r2, #0
 8019f02:	2100      	movs	r1, #0
 8019f04:	68f8      	ldr	r0, [r7, #12]
 8019f06:	f7ff ff00 	bl	8019d0a <xQueueGenericCreateStatic>
 8019f0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8019f0c:	69fb      	ldr	r3, [r7, #28]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d002      	beq.n	8019f18 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8019f12:	69fb      	ldr	r3, [r7, #28]
 8019f14:	68ba      	ldr	r2, [r7, #8]
 8019f16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019f18:	69fb      	ldr	r3, [r7, #28]
	}
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	3720      	adds	r7, #32
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b086      	sub	sp, #24
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
 8019f2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d10a      	bne.n	8019f48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8019f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f36:	f383 8811 	msr	BASEPRI, r3
 8019f3a:	f3bf 8f6f 	isb	sy
 8019f3e:	f3bf 8f4f 	dsb	sy
 8019f42:	613b      	str	r3, [r7, #16]
}
 8019f44:	bf00      	nop
 8019f46:	e7fe      	b.n	8019f46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019f48:	683a      	ldr	r2, [r7, #0]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	d90a      	bls.n	8019f66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8019f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f54:	f383 8811 	msr	BASEPRI, r3
 8019f58:	f3bf 8f6f 	isb	sy
 8019f5c:	f3bf 8f4f 	dsb	sy
 8019f60:	60fb      	str	r3, [r7, #12]
}
 8019f62:	bf00      	nop
 8019f64:	e7fe      	b.n	8019f64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019f66:	2202      	movs	r2, #2
 8019f68:	2100      	movs	r1, #0
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f7ff ff45 	bl	8019dfa <xQueueGenericCreate>
 8019f70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8019f72:	697b      	ldr	r3, [r7, #20]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d002      	beq.n	8019f7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	683a      	ldr	r2, [r7, #0]
 8019f7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019f7e:	697b      	ldr	r3, [r7, #20]
	}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3718      	adds	r7, #24
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}

08019f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b08e      	sub	sp, #56	; 0x38
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	60f8      	str	r0, [r7, #12]
 8019f90:	60b9      	str	r1, [r7, #8]
 8019f92:	607a      	str	r2, [r7, #4]
 8019f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019f96:	2300      	movs	r3, #0
 8019f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d10a      	bne.n	8019fba <xQueueGenericSend+0x32>
	__asm volatile
 8019fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fa8:	f383 8811 	msr	BASEPRI, r3
 8019fac:	f3bf 8f6f 	isb	sy
 8019fb0:	f3bf 8f4f 	dsb	sy
 8019fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019fb6:	bf00      	nop
 8019fb8:	e7fe      	b.n	8019fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d103      	bne.n	8019fc8 <xQueueGenericSend+0x40>
 8019fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d101      	bne.n	8019fcc <xQueueGenericSend+0x44>
 8019fc8:	2301      	movs	r3, #1
 8019fca:	e000      	b.n	8019fce <xQueueGenericSend+0x46>
 8019fcc:	2300      	movs	r3, #0
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d10a      	bne.n	8019fe8 <xQueueGenericSend+0x60>
	__asm volatile
 8019fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fd6:	f383 8811 	msr	BASEPRI, r3
 8019fda:	f3bf 8f6f 	isb	sy
 8019fde:	f3bf 8f4f 	dsb	sy
 8019fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019fe4:	bf00      	nop
 8019fe6:	e7fe      	b.n	8019fe6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019fe8:	683b      	ldr	r3, [r7, #0]
 8019fea:	2b02      	cmp	r3, #2
 8019fec:	d103      	bne.n	8019ff6 <xQueueGenericSend+0x6e>
 8019fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ff2:	2b01      	cmp	r3, #1
 8019ff4:	d101      	bne.n	8019ffa <xQueueGenericSend+0x72>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	e000      	b.n	8019ffc <xQueueGenericSend+0x74>
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d10a      	bne.n	801a016 <xQueueGenericSend+0x8e>
	__asm volatile
 801a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a004:	f383 8811 	msr	BASEPRI, r3
 801a008:	f3bf 8f6f 	isb	sy
 801a00c:	f3bf 8f4f 	dsb	sy
 801a010:	623b      	str	r3, [r7, #32]
}
 801a012:	bf00      	nop
 801a014:	e7fe      	b.n	801a014 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a016:	f001 fb43 	bl	801b6a0 <xTaskGetSchedulerState>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d102      	bne.n	801a026 <xQueueGenericSend+0x9e>
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d101      	bne.n	801a02a <xQueueGenericSend+0xa2>
 801a026:	2301      	movs	r3, #1
 801a028:	e000      	b.n	801a02c <xQueueGenericSend+0xa4>
 801a02a:	2300      	movs	r3, #0
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d10a      	bne.n	801a046 <xQueueGenericSend+0xbe>
	__asm volatile
 801a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a034:	f383 8811 	msr	BASEPRI, r3
 801a038:	f3bf 8f6f 	isb	sy
 801a03c:	f3bf 8f4f 	dsb	sy
 801a040:	61fb      	str	r3, [r7, #28]
}
 801a042:	bf00      	nop
 801a044:	e7fe      	b.n	801a044 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a046:	f002 f985 	bl	801c354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a04c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a052:	429a      	cmp	r2, r3
 801a054:	d302      	bcc.n	801a05c <xQueueGenericSend+0xd4>
 801a056:	683b      	ldr	r3, [r7, #0]
 801a058:	2b02      	cmp	r3, #2
 801a05a:	d112      	bne.n	801a082 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a05c:	683a      	ldr	r2, [r7, #0]
 801a05e:	68b9      	ldr	r1, [r7, #8]
 801a060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a062:	f000 fbae 	bl	801a7c2 <prvCopyDataToQueue>
 801a066:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d004      	beq.n	801a07a <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a072:	3324      	adds	r3, #36	; 0x24
 801a074:	4618      	mov	r0, r3
 801a076:	f001 f95b 	bl	801b330 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a07a:	f002 f99b 	bl	801c3b4 <vPortExitCritical>
				return pdPASS;
 801a07e:	2301      	movs	r3, #1
 801a080:	e062      	b.n	801a148 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d103      	bne.n	801a090 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a088:	f002 f994 	bl	801c3b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a08c:	2300      	movs	r3, #0
 801a08e:	e05b      	b.n	801a148 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a092:	2b00      	cmp	r3, #0
 801a094:	d106      	bne.n	801a0a4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a096:	f107 0314 	add.w	r3, r7, #20
 801a09a:	4618      	mov	r0, r3
 801a09c:	f001 f9ac 	bl	801b3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a0a0:	2301      	movs	r3, #1
 801a0a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a0a4:	f002 f986 	bl	801c3b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a0a8:	f000 ff50 	bl	801af4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a0ac:	f002 f952 	bl	801c354 <vPortEnterCritical>
 801a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a0b6:	b25b      	sxtb	r3, r3
 801a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0bc:	d103      	bne.n	801a0c6 <xQueueGenericSend+0x13e>
 801a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a0cc:	b25b      	sxtb	r3, r3
 801a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d2:	d103      	bne.n	801a0dc <xQueueGenericSend+0x154>
 801a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0dc:	f002 f96a 	bl	801c3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0e0:	1d3a      	adds	r2, r7, #4
 801a0e2:	f107 0314 	add.w	r3, r7, #20
 801a0e6:	4611      	mov	r1, r2
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f001 f99b 	bl	801b424 <xTaskCheckForTimeOut>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d123      	bne.n	801a13c <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a0f6:	f000 fc5c 	bl	801a9b2 <prvIsQueueFull>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d017      	beq.n	801a130 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a102:	3310      	adds	r3, #16
 801a104:	687a      	ldr	r2, [r7, #4]
 801a106:	4611      	mov	r1, r2
 801a108:	4618      	mov	r0, r3
 801a10a:	f001 f8c1 	bl	801b290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a110:	f000 fbe7 	bl	801a8e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a114:	f000 ff28 	bl	801af68 <xTaskResumeAll>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d193      	bne.n	801a046 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a11e:	4b0c      	ldr	r3, [pc, #48]	; (801a150 <xQueueGenericSend+0x1c8>)
 801a120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a124:	601a      	str	r2, [r3, #0]
 801a126:	f3bf 8f4f 	dsb	sy
 801a12a:	f3bf 8f6f 	isb	sy
 801a12e:	e78a      	b.n	801a046 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a132:	f000 fbd6 	bl	801a8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a136:	f000 ff17 	bl	801af68 <xTaskResumeAll>
 801a13a:	e784      	b.n	801a046 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a13c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a13e:	f000 fbd0 	bl	801a8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a142:	f000 ff11 	bl	801af68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a146:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3738      	adds	r7, #56	; 0x38
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	e000ed04 	.word	0xe000ed04

0801a154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b090      	sub	sp, #64	; 0x40
 801a158:	af00      	add	r7, sp, #0
 801a15a:	60f8      	str	r0, [r7, #12]
 801a15c:	60b9      	str	r1, [r7, #8]
 801a15e:	607a      	str	r2, [r7, #4]
 801a160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d10a      	bne.n	801a182 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a170:	f383 8811 	msr	BASEPRI, r3
 801a174:	f3bf 8f6f 	isb	sy
 801a178:	f3bf 8f4f 	dsb	sy
 801a17c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a17e:	bf00      	nop
 801a180:	e7fe      	b.n	801a180 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a182:	68bb      	ldr	r3, [r7, #8]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d103      	bne.n	801a190 <xQueueGenericSendFromISR+0x3c>
 801a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d101      	bne.n	801a194 <xQueueGenericSendFromISR+0x40>
 801a190:	2301      	movs	r3, #1
 801a192:	e000      	b.n	801a196 <xQueueGenericSendFromISR+0x42>
 801a194:	2300      	movs	r3, #0
 801a196:	2b00      	cmp	r3, #0
 801a198:	d10a      	bne.n	801a1b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a19e:	f383 8811 	msr	BASEPRI, r3
 801a1a2:	f3bf 8f6f 	isb	sy
 801a1a6:	f3bf 8f4f 	dsb	sy
 801a1aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a1ac:	bf00      	nop
 801a1ae:	e7fe      	b.n	801a1ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	2b02      	cmp	r3, #2
 801a1b4:	d103      	bne.n	801a1be <xQueueGenericSendFromISR+0x6a>
 801a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1ba:	2b01      	cmp	r3, #1
 801a1bc:	d101      	bne.n	801a1c2 <xQueueGenericSendFromISR+0x6e>
 801a1be:	2301      	movs	r3, #1
 801a1c0:	e000      	b.n	801a1c4 <xQueueGenericSendFromISR+0x70>
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d10a      	bne.n	801a1de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1cc:	f383 8811 	msr	BASEPRI, r3
 801a1d0:	f3bf 8f6f 	isb	sy
 801a1d4:	f3bf 8f4f 	dsb	sy
 801a1d8:	623b      	str	r3, [r7, #32]
}
 801a1da:	bf00      	nop
 801a1dc:	e7fe      	b.n	801a1dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a1de:	f002 f99b 	bl	801c518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a1e2:	f3ef 8211 	mrs	r2, BASEPRI
 801a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ea:	f383 8811 	msr	BASEPRI, r3
 801a1ee:	f3bf 8f6f 	isb	sy
 801a1f2:	f3bf 8f4f 	dsb	sy
 801a1f6:	61fa      	str	r2, [r7, #28]
 801a1f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a1fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a1fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a206:	429a      	cmp	r2, r3
 801a208:	d302      	bcc.n	801a210 <xQueueGenericSendFromISR+0xbc>
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	2b02      	cmp	r3, #2
 801a20e:	d12f      	bne.n	801a270 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a220:	683a      	ldr	r2, [r7, #0]
 801a222:	68b9      	ldr	r1, [r7, #8]
 801a224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a226:	f000 facc 	bl	801a7c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a22a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a232:	d112      	bne.n	801a25a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d016      	beq.n	801a26a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a23e:	3324      	adds	r3, #36	; 0x24
 801a240:	4618      	mov	r0, r3
 801a242:	f001 f875 	bl	801b330 <xTaskRemoveFromEventList>
 801a246:	4603      	mov	r3, r0
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d00e      	beq.n	801a26a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d00b      	beq.n	801a26a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	2201      	movs	r2, #1
 801a256:	601a      	str	r2, [r3, #0]
 801a258:	e007      	b.n	801a26a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a25a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a25e:	3301      	adds	r3, #1
 801a260:	b2db      	uxtb	r3, r3
 801a262:	b25a      	sxtb	r2, r3
 801a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a26a:	2301      	movs	r3, #1
 801a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a26e:	e001      	b.n	801a274 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a270:	2300      	movs	r3, #0
 801a272:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a276:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a278:	697b      	ldr	r3, [r7, #20]
 801a27a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a27e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a282:	4618      	mov	r0, r3
 801a284:	3740      	adds	r7, #64	; 0x40
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}

0801a28a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a28a:	b580      	push	{r7, lr}
 801a28c:	b08e      	sub	sp, #56	; 0x38
 801a28e:	af00      	add	r7, sp, #0
 801a290:	6078      	str	r0, [r7, #4]
 801a292:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d10a      	bne.n	801a2b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2a2:	f383 8811 	msr	BASEPRI, r3
 801a2a6:	f3bf 8f6f 	isb	sy
 801a2aa:	f3bf 8f4f 	dsb	sy
 801a2ae:	623b      	str	r3, [r7, #32]
}
 801a2b0:	bf00      	nop
 801a2b2:	e7fe      	b.n	801a2b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d00a      	beq.n	801a2d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 801a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2c0:	f383 8811 	msr	BASEPRI, r3
 801a2c4:	f3bf 8f6f 	isb	sy
 801a2c8:	f3bf 8f4f 	dsb	sy
 801a2cc:	61fb      	str	r3, [r7, #28]
}
 801a2ce:	bf00      	nop
 801a2d0:	e7fe      	b.n	801a2d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d103      	bne.n	801a2e2 <xQueueGiveFromISR+0x58>
 801a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2dc:	689b      	ldr	r3, [r3, #8]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d101      	bne.n	801a2e6 <xQueueGiveFromISR+0x5c>
 801a2e2:	2301      	movs	r3, #1
 801a2e4:	e000      	b.n	801a2e8 <xQueueGiveFromISR+0x5e>
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d10a      	bne.n	801a302 <xQueueGiveFromISR+0x78>
	__asm volatile
 801a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2f0:	f383 8811 	msr	BASEPRI, r3
 801a2f4:	f3bf 8f6f 	isb	sy
 801a2f8:	f3bf 8f4f 	dsb	sy
 801a2fc:	61bb      	str	r3, [r7, #24]
}
 801a2fe:	bf00      	nop
 801a300:	e7fe      	b.n	801a300 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a302:	f002 f909 	bl	801c518 <vPortValidateInterruptPriority>
	__asm volatile
 801a306:	f3ef 8211 	mrs	r2, BASEPRI
 801a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a30e:	f383 8811 	msr	BASEPRI, r3
 801a312:	f3bf 8f6f 	isb	sy
 801a316:	f3bf 8f4f 	dsb	sy
 801a31a:	617a      	str	r2, [r7, #20]
 801a31c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a31e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a320:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a326:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a32e:	429a      	cmp	r2, r3
 801a330:	d22b      	bcs.n	801a38a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a33e:	1c5a      	adds	r2, r3, #1
 801a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a342:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a34c:	d112      	bne.n	801a374 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a352:	2b00      	cmp	r3, #0
 801a354:	d016      	beq.n	801a384 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a358:	3324      	adds	r3, #36	; 0x24
 801a35a:	4618      	mov	r0, r3
 801a35c:	f000 ffe8 	bl	801b330 <xTaskRemoveFromEventList>
 801a360:	4603      	mov	r3, r0
 801a362:	2b00      	cmp	r3, #0
 801a364:	d00e      	beq.n	801a384 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d00b      	beq.n	801a384 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	2201      	movs	r2, #1
 801a370:	601a      	str	r2, [r3, #0]
 801a372:	e007      	b.n	801a384 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a378:	3301      	adds	r3, #1
 801a37a:	b2db      	uxtb	r3, r3
 801a37c:	b25a      	sxtb	r2, r3
 801a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a384:	2301      	movs	r3, #1
 801a386:	637b      	str	r3, [r7, #52]	; 0x34
 801a388:	e001      	b.n	801a38e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a38a:	2300      	movs	r3, #0
 801a38c:	637b      	str	r3, [r7, #52]	; 0x34
 801a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a390:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a392:	68fb      	ldr	r3, [r7, #12]
 801a394:	f383 8811 	msr	BASEPRI, r3
}
 801a398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a39c:	4618      	mov	r0, r3
 801a39e:	3738      	adds	r7, #56	; 0x38
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}

0801a3a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b08c      	sub	sp, #48	; 0x30
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	60f8      	str	r0, [r7, #12]
 801a3ac:	60b9      	str	r1, [r7, #8]
 801a3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d10a      	bne.n	801a3d4 <xQueueReceive+0x30>
	__asm volatile
 801a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3c2:	f383 8811 	msr	BASEPRI, r3
 801a3c6:	f3bf 8f6f 	isb	sy
 801a3ca:	f3bf 8f4f 	dsb	sy
 801a3ce:	623b      	str	r3, [r7, #32]
}
 801a3d0:	bf00      	nop
 801a3d2:	e7fe      	b.n	801a3d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d103      	bne.n	801a3e2 <xQueueReceive+0x3e>
 801a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d101      	bne.n	801a3e6 <xQueueReceive+0x42>
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	e000      	b.n	801a3e8 <xQueueReceive+0x44>
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d10a      	bne.n	801a402 <xQueueReceive+0x5e>
	__asm volatile
 801a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3f0:	f383 8811 	msr	BASEPRI, r3
 801a3f4:	f3bf 8f6f 	isb	sy
 801a3f8:	f3bf 8f4f 	dsb	sy
 801a3fc:	61fb      	str	r3, [r7, #28]
}
 801a3fe:	bf00      	nop
 801a400:	e7fe      	b.n	801a400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a402:	f001 f94d 	bl	801b6a0 <xTaskGetSchedulerState>
 801a406:	4603      	mov	r3, r0
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d102      	bne.n	801a412 <xQueueReceive+0x6e>
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d101      	bne.n	801a416 <xQueueReceive+0x72>
 801a412:	2301      	movs	r3, #1
 801a414:	e000      	b.n	801a418 <xQueueReceive+0x74>
 801a416:	2300      	movs	r3, #0
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d10a      	bne.n	801a432 <xQueueReceive+0x8e>
	__asm volatile
 801a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a420:	f383 8811 	msr	BASEPRI, r3
 801a424:	f3bf 8f6f 	isb	sy
 801a428:	f3bf 8f4f 	dsb	sy
 801a42c:	61bb      	str	r3, [r7, #24]
}
 801a42e:	bf00      	nop
 801a430:	e7fe      	b.n	801a430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a432:	f001 ff8f 	bl	801c354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a43a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d014      	beq.n	801a46c <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a442:	68b9      	ldr	r1, [r7, #8]
 801a444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a446:	f000 fa26 	bl	801a896 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44c:	1e5a      	subs	r2, r3, #1
 801a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a454:	691b      	ldr	r3, [r3, #16]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d004      	beq.n	801a464 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a45c:	3310      	adds	r3, #16
 801a45e:	4618      	mov	r0, r3
 801a460:	f000 ff66 	bl	801b330 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a464:	f001 ffa6 	bl	801c3b4 <vPortExitCritical>
				return pdPASS;
 801a468:	2301      	movs	r3, #1
 801a46a:	e069      	b.n	801a540 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d103      	bne.n	801a47a <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a472:	f001 ff9f 	bl	801c3b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a476:	2300      	movs	r3, #0
 801a478:	e062      	b.n	801a540 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d106      	bne.n	801a48e <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a480:	f107 0310 	add.w	r3, r7, #16
 801a484:	4618      	mov	r0, r3
 801a486:	f000 ffb7 	bl	801b3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a48a:	2301      	movs	r3, #1
 801a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a48e:	f001 ff91 	bl	801c3b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a492:	f000 fd5b 	bl	801af4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a496:	f001 ff5d 	bl	801c354 <vPortEnterCritical>
 801a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a49c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a4a0:	b25b      	sxtb	r3, r3
 801a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4a6:	d103      	bne.n	801a4b0 <xQueueReceive+0x10c>
 801a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a4b6:	b25b      	sxtb	r3, r3
 801a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4bc:	d103      	bne.n	801a4c6 <xQueueReceive+0x122>
 801a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a4c6:	f001 ff75 	bl	801c3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a4ca:	1d3a      	adds	r2, r7, #4
 801a4cc:	f107 0310 	add.w	r3, r7, #16
 801a4d0:	4611      	mov	r1, r2
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	f000 ffa6 	bl	801b424 <xTaskCheckForTimeOut>
 801a4d8:	4603      	mov	r3, r0
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d123      	bne.n	801a526 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a4de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a4e0:	f000 fa51 	bl	801a986 <prvIsQueueEmpty>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d017      	beq.n	801a51a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ec:	3324      	adds	r3, #36	; 0x24
 801a4ee:	687a      	ldr	r2, [r7, #4]
 801a4f0:	4611      	mov	r1, r2
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f000 fecc 	bl	801b290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a4f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a4fa:	f000 f9f2 	bl	801a8e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a4fe:	f000 fd33 	bl	801af68 <xTaskResumeAll>
 801a502:	4603      	mov	r3, r0
 801a504:	2b00      	cmp	r3, #0
 801a506:	d194      	bne.n	801a432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a508:	4b0f      	ldr	r3, [pc, #60]	; (801a548 <xQueueReceive+0x1a4>)
 801a50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a50e:	601a      	str	r2, [r3, #0]
 801a510:	f3bf 8f4f 	dsb	sy
 801a514:	f3bf 8f6f 	isb	sy
 801a518:	e78b      	b.n	801a432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a51c:	f000 f9e1 	bl	801a8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a520:	f000 fd22 	bl	801af68 <xTaskResumeAll>
 801a524:	e785      	b.n	801a432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a528:	f000 f9db 	bl	801a8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a52c:	f000 fd1c 	bl	801af68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a532:	f000 fa28 	bl	801a986 <prvIsQueueEmpty>
 801a536:	4603      	mov	r3, r0
 801a538:	2b00      	cmp	r3, #0
 801a53a:	f43f af7a 	beq.w	801a432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a53e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a540:	4618      	mov	r0, r3
 801a542:	3730      	adds	r7, #48	; 0x30
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	e000ed04 	.word	0xe000ed04

0801a54c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b08e      	sub	sp, #56	; 0x38
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
 801a554:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a556:	2300      	movs	r3, #0
 801a558:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a55e:	2300      	movs	r3, #0
 801a560:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a564:	2b00      	cmp	r3, #0
 801a566:	d10a      	bne.n	801a57e <xQueueSemaphoreTake+0x32>
	__asm volatile
 801a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a56c:	f383 8811 	msr	BASEPRI, r3
 801a570:	f3bf 8f6f 	isb	sy
 801a574:	f3bf 8f4f 	dsb	sy
 801a578:	623b      	str	r3, [r7, #32]
}
 801a57a:	bf00      	nop
 801a57c:	e7fe      	b.n	801a57c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a582:	2b00      	cmp	r3, #0
 801a584:	d00a      	beq.n	801a59c <xQueueSemaphoreTake+0x50>
	__asm volatile
 801a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a58a:	f383 8811 	msr	BASEPRI, r3
 801a58e:	f3bf 8f6f 	isb	sy
 801a592:	f3bf 8f4f 	dsb	sy
 801a596:	61fb      	str	r3, [r7, #28]
}
 801a598:	bf00      	nop
 801a59a:	e7fe      	b.n	801a59a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a59c:	f001 f880 	bl	801b6a0 <xTaskGetSchedulerState>
 801a5a0:	4603      	mov	r3, r0
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d102      	bne.n	801a5ac <xQueueSemaphoreTake+0x60>
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d101      	bne.n	801a5b0 <xQueueSemaphoreTake+0x64>
 801a5ac:	2301      	movs	r3, #1
 801a5ae:	e000      	b.n	801a5b2 <xQueueSemaphoreTake+0x66>
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d10a      	bne.n	801a5cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 801a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5ba:	f383 8811 	msr	BASEPRI, r3
 801a5be:	f3bf 8f6f 	isb	sy
 801a5c2:	f3bf 8f4f 	dsb	sy
 801a5c6:	61bb      	str	r3, [r7, #24]
}
 801a5c8:	bf00      	nop
 801a5ca:	e7fe      	b.n	801a5ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a5cc:	f001 fec2 	bl	801c354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d019      	beq.n	801a610 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5de:	1e5a      	subs	r2, r3, #1
 801a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d104      	bne.n	801a5f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a5ec:	f001 f9ce 	bl	801b98c <pvTaskIncrementMutexHeldCount>
 801a5f0:	4602      	mov	r2, r0
 801a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f8:	691b      	ldr	r3, [r3, #16]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d004      	beq.n	801a608 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a600:	3310      	adds	r3, #16
 801a602:	4618      	mov	r0, r3
 801a604:	f000 fe94 	bl	801b330 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a608:	f001 fed4 	bl	801c3b4 <vPortExitCritical>
				return pdPASS;
 801a60c:	2301      	movs	r3, #1
 801a60e:	e097      	b.n	801a740 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a610:	683b      	ldr	r3, [r7, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d111      	bne.n	801a63a <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d00a      	beq.n	801a632 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 801a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a620:	f383 8811 	msr	BASEPRI, r3
 801a624:	f3bf 8f6f 	isb	sy
 801a628:	f3bf 8f4f 	dsb	sy
 801a62c:	617b      	str	r3, [r7, #20]
}
 801a62e:	bf00      	nop
 801a630:	e7fe      	b.n	801a630 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a632:	f001 febf 	bl	801c3b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a636:	2300      	movs	r3, #0
 801a638:	e082      	b.n	801a740 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d106      	bne.n	801a64e <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a640:	f107 030c 	add.w	r3, r7, #12
 801a644:	4618      	mov	r0, r3
 801a646:	f000 fed7 	bl	801b3f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a64a:	2301      	movs	r3, #1
 801a64c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a64e:	f001 feb1 	bl	801c3b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a652:	f000 fc7b 	bl	801af4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a656:	f001 fe7d 	bl	801c354 <vPortEnterCritical>
 801a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a65c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a660:	b25b      	sxtb	r3, r3
 801a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a666:	d103      	bne.n	801a670 <xQueueSemaphoreTake+0x124>
 801a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a66a:	2200      	movs	r2, #0
 801a66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a676:	b25b      	sxtb	r3, r3
 801a678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a67c:	d103      	bne.n	801a686 <xQueueSemaphoreTake+0x13a>
 801a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a680:	2200      	movs	r2, #0
 801a682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a686:	f001 fe95 	bl	801c3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a68a:	463a      	mov	r2, r7
 801a68c:	f107 030c 	add.w	r3, r7, #12
 801a690:	4611      	mov	r1, r2
 801a692:	4618      	mov	r0, r3
 801a694:	f000 fec6 	bl	801b424 <xTaskCheckForTimeOut>
 801a698:	4603      	mov	r3, r0
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d132      	bne.n	801a704 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a69e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6a0:	f000 f971 	bl	801a986 <prvIsQueueEmpty>
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d026      	beq.n	801a6f8 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d109      	bne.n	801a6c6 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 801a6b2:	f001 fe4f 	bl	801c354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b8:	689b      	ldr	r3, [r3, #8]
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f001 f80e 	bl	801b6dc <xTaskPriorityInherit>
 801a6c0:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a6c2:	f001 fe77 	bl	801c3b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c8:	3324      	adds	r3, #36	; 0x24
 801a6ca:	683a      	ldr	r2, [r7, #0]
 801a6cc:	4611      	mov	r1, r2
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f000 fdde 	bl	801b290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a6d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6d6:	f000 f904 	bl	801a8e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a6da:	f000 fc45 	bl	801af68 <xTaskResumeAll>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	f47f af73 	bne.w	801a5cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a6e6:	4b18      	ldr	r3, [pc, #96]	; (801a748 <xQueueSemaphoreTake+0x1fc>)
 801a6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6ec:	601a      	str	r2, [r3, #0]
 801a6ee:	f3bf 8f4f 	dsb	sy
 801a6f2:	f3bf 8f6f 	isb	sy
 801a6f6:	e769      	b.n	801a5cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a6f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6fa:	f000 f8f2 	bl	801a8e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a6fe:	f000 fc33 	bl	801af68 <xTaskResumeAll>
 801a702:	e763      	b.n	801a5cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a706:	f000 f8ec 	bl	801a8e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a70a:	f000 fc2d 	bl	801af68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a70e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a710:	f000 f939 	bl	801a986 <prvIsQueueEmpty>
 801a714:	4603      	mov	r3, r0
 801a716:	2b00      	cmp	r3, #0
 801a718:	f43f af58 	beq.w	801a5cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d00d      	beq.n	801a73e <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801a722:	f001 fe17 	bl	801c354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a728:	f000 f833 	bl	801a792 <prvGetDisinheritPriorityAfterTimeout>
 801a72c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a730:	689b      	ldr	r3, [r3, #8]
 801a732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a734:	4618      	mov	r0, r3
 801a736:	f001 f8a7 	bl	801b888 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a73a:	f001 fe3b 	bl	801c3b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a73e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a740:	4618      	mov	r0, r3
 801a742:	3738      	adds	r7, #56	; 0x38
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	e000ed04 	.word	0xe000ed04

0801a74c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d10a      	bne.n	801a774 <vQueueDelete+0x28>
	__asm volatile
 801a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a762:	f383 8811 	msr	BASEPRI, r3
 801a766:	f3bf 8f6f 	isb	sy
 801a76a:	f3bf 8f4f 	dsb	sy
 801a76e:	60bb      	str	r3, [r7, #8]
}
 801a770:	bf00      	nop
 801a772:	e7fe      	b.n	801a772 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801a774:	68f8      	ldr	r0, [r7, #12]
 801a776:	f000 f95f 	bl	801aa38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a780:	2b00      	cmp	r3, #0
 801a782:	d102      	bne.n	801a78a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801a784:	68f8      	ldr	r0, [r7, #12]
 801a786:	f001 ffd3 	bl	801c730 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801a78a:	bf00      	nop
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}

0801a792 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a792:	b480      	push	{r7}
 801a794:	b085      	sub	sp, #20
 801a796:	af00      	add	r7, sp, #0
 801a798:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d006      	beq.n	801a7b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a7ac:	60fb      	str	r3, [r7, #12]
 801a7ae:	e001      	b.n	801a7b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a7b4:	68fb      	ldr	r3, [r7, #12]
	}
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	3714      	adds	r7, #20
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c0:	4770      	bx	lr

0801a7c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a7c2:	b580      	push	{r7, lr}
 801a7c4:	b086      	sub	sp, #24
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	60f8      	str	r0, [r7, #12]
 801a7ca:	60b9      	str	r1, [r7, #8]
 801a7cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d10d      	bne.n	801a7fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d14d      	bne.n	801a884 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	689b      	ldr	r3, [r3, #8]
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f000 ffdd 	bl	801b7ac <xTaskPriorityDisinherit>
 801a7f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	609a      	str	r2, [r3, #8]
 801a7fa:	e043      	b.n	801a884 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d119      	bne.n	801a836 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	6858      	ldr	r0, [r3, #4]
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a80a:	461a      	mov	r2, r3
 801a80c:	68b9      	ldr	r1, [r7, #8]
 801a80e:	f003 fd24 	bl	801e25a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	685a      	ldr	r2, [r3, #4]
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a81a:	441a      	add	r2, r3
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	685a      	ldr	r2, [r3, #4]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	689b      	ldr	r3, [r3, #8]
 801a828:	429a      	cmp	r2, r3
 801a82a:	d32b      	bcc.n	801a884 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	681a      	ldr	r2, [r3, #0]
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	605a      	str	r2, [r3, #4]
 801a834:	e026      	b.n	801a884 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	68d8      	ldr	r0, [r3, #12]
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a83e:	461a      	mov	r2, r3
 801a840:	68b9      	ldr	r1, [r7, #8]
 801a842:	f003 fd0a 	bl	801e25a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	68da      	ldr	r2, [r3, #12]
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a84e:	425b      	negs	r3, r3
 801a850:	441a      	add	r2, r3
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	68da      	ldr	r2, [r3, #12]
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d207      	bcs.n	801a872 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	689a      	ldr	r2, [r3, #8]
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a86a:	425b      	negs	r3, r3
 801a86c:	441a      	add	r2, r3
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	2b02      	cmp	r3, #2
 801a876:	d105      	bne.n	801a884 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a878:	693b      	ldr	r3, [r7, #16]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d002      	beq.n	801a884 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a87e:	693b      	ldr	r3, [r7, #16]
 801a880:	3b01      	subs	r3, #1
 801a882:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a884:	693b      	ldr	r3, [r7, #16]
 801a886:	1c5a      	adds	r2, r3, #1
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a88c:	697b      	ldr	r3, [r7, #20]
}
 801a88e:	4618      	mov	r0, r3
 801a890:	3718      	adds	r7, #24
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}

0801a896 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a896:	b580      	push	{r7, lr}
 801a898:	b082      	sub	sp, #8
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	6078      	str	r0, [r7, #4]
 801a89e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d018      	beq.n	801a8da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	68da      	ldr	r2, [r3, #12]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8b0:	441a      	add	r2, r3
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	68da      	ldr	r2, [r3, #12]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	689b      	ldr	r3, [r3, #8]
 801a8be:	429a      	cmp	r2, r3
 801a8c0:	d303      	bcc.n	801a8ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681a      	ldr	r2, [r3, #0]
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	68d9      	ldr	r1, [r3, #12]
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8d2:	461a      	mov	r2, r3
 801a8d4:	6838      	ldr	r0, [r7, #0]
 801a8d6:	f003 fcc0 	bl	801e25a <memcpy>
	}
}
 801a8da:	bf00      	nop
 801a8dc:	3708      	adds	r7, #8
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bd80      	pop	{r7, pc}

0801a8e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a8e2:	b580      	push	{r7, lr}
 801a8e4:	b084      	sub	sp, #16
 801a8e6:	af00      	add	r7, sp, #0
 801a8e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a8ea:	f001 fd33 	bl	801c354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a8f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a8f6:	e011      	b.n	801a91c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d012      	beq.n	801a926 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	3324      	adds	r3, #36	; 0x24
 801a904:	4618      	mov	r0, r3
 801a906:	f000 fd13 	bl	801b330 <xTaskRemoveFromEventList>
 801a90a:	4603      	mov	r3, r0
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d001      	beq.n	801a914 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a910:	f000 fdea 	bl	801b4e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a914:	7bfb      	ldrb	r3, [r7, #15]
 801a916:	3b01      	subs	r3, #1
 801a918:	b2db      	uxtb	r3, r3
 801a91a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a920:	2b00      	cmp	r3, #0
 801a922:	dce9      	bgt.n	801a8f8 <prvUnlockQueue+0x16>
 801a924:	e000      	b.n	801a928 <prvUnlockQueue+0x46>
					break;
 801a926:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	22ff      	movs	r2, #255	; 0xff
 801a92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a930:	f001 fd40 	bl	801c3b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a934:	f001 fd0e 	bl	801c354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a93e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a940:	e011      	b.n	801a966 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	691b      	ldr	r3, [r3, #16]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d012      	beq.n	801a970 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	3310      	adds	r3, #16
 801a94e:	4618      	mov	r0, r3
 801a950:	f000 fcee 	bl	801b330 <xTaskRemoveFromEventList>
 801a954:	4603      	mov	r3, r0
 801a956:	2b00      	cmp	r3, #0
 801a958:	d001      	beq.n	801a95e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a95a:	f000 fdc5 	bl	801b4e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a95e:	7bbb      	ldrb	r3, [r7, #14]
 801a960:	3b01      	subs	r3, #1
 801a962:	b2db      	uxtb	r3, r3
 801a964:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	dce9      	bgt.n	801a942 <prvUnlockQueue+0x60>
 801a96e:	e000      	b.n	801a972 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a970:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	22ff      	movs	r2, #255	; 0xff
 801a976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a97a:	f001 fd1b 	bl	801c3b4 <vPortExitCritical>
}
 801a97e:	bf00      	nop
 801a980:	3710      	adds	r7, #16
 801a982:	46bd      	mov	sp, r7
 801a984:	bd80      	pop	{r7, pc}

0801a986 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a986:	b580      	push	{r7, lr}
 801a988:	b084      	sub	sp, #16
 801a98a:	af00      	add	r7, sp, #0
 801a98c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a98e:	f001 fce1 	bl	801c354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a996:	2b00      	cmp	r3, #0
 801a998:	d102      	bne.n	801a9a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a99a:	2301      	movs	r3, #1
 801a99c:	60fb      	str	r3, [r7, #12]
 801a99e:	e001      	b.n	801a9a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a9a4:	f001 fd06 	bl	801c3b4 <vPortExitCritical>

	return xReturn;
 801a9a8:	68fb      	ldr	r3, [r7, #12]
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	3710      	adds	r7, #16
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}

0801a9b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a9b2:	b580      	push	{r7, lr}
 801a9b4:	b084      	sub	sp, #16
 801a9b6:	af00      	add	r7, sp, #0
 801a9b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a9ba:	f001 fccb 	bl	801c354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d102      	bne.n	801a9d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	60fb      	str	r3, [r7, #12]
 801a9ce:	e001      	b.n	801a9d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a9d4:	f001 fcee 	bl	801c3b4 <vPortExitCritical>

	return xReturn;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
}
 801a9da:	4618      	mov	r0, r3
 801a9dc:	3710      	adds	r7, #16
 801a9de:	46bd      	mov	sp, r7
 801a9e0:	bd80      	pop	{r7, pc}
	...

0801a9e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a9e4:	b480      	push	{r7}
 801a9e6:	b085      	sub	sp, #20
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	60fb      	str	r3, [r7, #12]
 801a9f2:	e014      	b.n	801aa1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a9f4:	4a0f      	ldr	r2, [pc, #60]	; (801aa34 <vQueueAddToRegistry+0x50>)
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d10b      	bne.n	801aa18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801aa00:	490c      	ldr	r1, [pc, #48]	; (801aa34 <vQueueAddToRegistry+0x50>)
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	683a      	ldr	r2, [r7, #0]
 801aa06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801aa0a:	4a0a      	ldr	r2, [pc, #40]	; (801aa34 <vQueueAddToRegistry+0x50>)
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	00db      	lsls	r3, r3, #3
 801aa10:	4413      	add	r3, r2
 801aa12:	687a      	ldr	r2, [r7, #4]
 801aa14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801aa16:	e006      	b.n	801aa26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	60fb      	str	r3, [r7, #12]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	2b07      	cmp	r3, #7
 801aa22:	d9e7      	bls.n	801a9f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801aa24:	bf00      	nop
 801aa26:	bf00      	nop
 801aa28:	3714      	adds	r7, #20
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa30:	4770      	bx	lr
 801aa32:	bf00      	nop
 801aa34:	24009e78 	.word	0x24009e78

0801aa38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801aa38:	b480      	push	{r7}
 801aa3a:	b085      	sub	sp, #20
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801aa40:	2300      	movs	r3, #0
 801aa42:	60fb      	str	r3, [r7, #12]
 801aa44:	e016      	b.n	801aa74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801aa46:	4a10      	ldr	r2, [pc, #64]	; (801aa88 <vQueueUnregisterQueue+0x50>)
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	00db      	lsls	r3, r3, #3
 801aa4c:	4413      	add	r3, r2
 801aa4e:	685b      	ldr	r3, [r3, #4]
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d10b      	bne.n	801aa6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801aa56:	4a0c      	ldr	r2, [pc, #48]	; (801aa88 <vQueueUnregisterQueue+0x50>)
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	2100      	movs	r1, #0
 801aa5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801aa60:	4a09      	ldr	r2, [pc, #36]	; (801aa88 <vQueueUnregisterQueue+0x50>)
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	00db      	lsls	r3, r3, #3
 801aa66:	4413      	add	r3, r2
 801aa68:	2200      	movs	r2, #0
 801aa6a:	605a      	str	r2, [r3, #4]
				break;
 801aa6c:	e006      	b.n	801aa7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	3301      	adds	r3, #1
 801aa72:	60fb      	str	r3, [r7, #12]
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	2b07      	cmp	r3, #7
 801aa78:	d9e5      	bls.n	801aa46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801aa7a:	bf00      	nop
 801aa7c:	bf00      	nop
 801aa7e:	3714      	adds	r7, #20
 801aa80:	46bd      	mov	sp, r7
 801aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa86:	4770      	bx	lr
 801aa88:	24009e78 	.word	0x24009e78

0801aa8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b086      	sub	sp, #24
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801aa98:	68fb      	ldr	r3, [r7, #12]
 801aa9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801aa9c:	f001 fc5a 	bl	801c354 <vPortEnterCritical>
 801aaa0:	697b      	ldr	r3, [r7, #20]
 801aaa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aaa6:	b25b      	sxtb	r3, r3
 801aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaac:	d103      	bne.n	801aab6 <vQueueWaitForMessageRestricted+0x2a>
 801aaae:	697b      	ldr	r3, [r7, #20]
 801aab0:	2200      	movs	r2, #0
 801aab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aabc:	b25b      	sxtb	r3, r3
 801aabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aac2:	d103      	bne.n	801aacc <vQueueWaitForMessageRestricted+0x40>
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	2200      	movs	r2, #0
 801aac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aacc:	f001 fc72 	bl	801c3b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801aad0:	697b      	ldr	r3, [r7, #20]
 801aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d106      	bne.n	801aae6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	3324      	adds	r3, #36	; 0x24
 801aadc:	687a      	ldr	r2, [r7, #4]
 801aade:	68b9      	ldr	r1, [r7, #8]
 801aae0:	4618      	mov	r0, r3
 801aae2:	f000 fbf9 	bl	801b2d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801aae6:	6978      	ldr	r0, [r7, #20]
 801aae8:	f7ff fefb 	bl	801a8e2 <prvUnlockQueue>
	}
 801aaec:	bf00      	nop
 801aaee:	3718      	adds	r7, #24
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	bd80      	pop	{r7, pc}

0801aaf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b08e      	sub	sp, #56	; 0x38
 801aaf8:	af04      	add	r7, sp, #16
 801aafa:	60f8      	str	r0, [r7, #12]
 801aafc:	60b9      	str	r1, [r7, #8]
 801aafe:	607a      	str	r2, [r7, #4]
 801ab00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ab02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d10a      	bne.n	801ab1e <xTaskCreateStatic+0x2a>
	__asm volatile
 801ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab0c:	f383 8811 	msr	BASEPRI, r3
 801ab10:	f3bf 8f6f 	isb	sy
 801ab14:	f3bf 8f4f 	dsb	sy
 801ab18:	623b      	str	r3, [r7, #32]
}
 801ab1a:	bf00      	nop
 801ab1c:	e7fe      	b.n	801ab1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801ab1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d10a      	bne.n	801ab3a <xTaskCreateStatic+0x46>
	__asm volatile
 801ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab28:	f383 8811 	msr	BASEPRI, r3
 801ab2c:	f3bf 8f6f 	isb	sy
 801ab30:	f3bf 8f4f 	dsb	sy
 801ab34:	61fb      	str	r3, [r7, #28]
}
 801ab36:	bf00      	nop
 801ab38:	e7fe      	b.n	801ab38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ab3a:	235c      	movs	r3, #92	; 0x5c
 801ab3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ab3e:	693b      	ldr	r3, [r7, #16]
 801ab40:	2b5c      	cmp	r3, #92	; 0x5c
 801ab42:	d00a      	beq.n	801ab5a <xTaskCreateStatic+0x66>
	__asm volatile
 801ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab48:	f383 8811 	msr	BASEPRI, r3
 801ab4c:	f3bf 8f6f 	isb	sy
 801ab50:	f3bf 8f4f 	dsb	sy
 801ab54:	61bb      	str	r3, [r7, #24]
}
 801ab56:	bf00      	nop
 801ab58:	e7fe      	b.n	801ab58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ab5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d01e      	beq.n	801aba0 <xTaskCreateStatic+0xac>
 801ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d01b      	beq.n	801aba0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ab70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab74:	2202      	movs	r2, #2
 801ab76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	9303      	str	r3, [sp, #12]
 801ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab80:	9302      	str	r3, [sp, #8]
 801ab82:	f107 0314 	add.w	r3, r7, #20
 801ab86:	9301      	str	r3, [sp, #4]
 801ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab8a:	9300      	str	r3, [sp, #0]
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	687a      	ldr	r2, [r7, #4]
 801ab90:	68b9      	ldr	r1, [r7, #8]
 801ab92:	68f8      	ldr	r0, [r7, #12]
 801ab94:	f000 f850 	bl	801ac38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ab98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab9a:	f000 f8dd 	bl	801ad58 <prvAddNewTaskToReadyList>
 801ab9e:	e001      	b.n	801aba4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801aba0:	2300      	movs	r3, #0
 801aba2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801aba4:	697b      	ldr	r3, [r7, #20]
	}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3728      	adds	r7, #40	; 0x28
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}

0801abae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801abae:	b580      	push	{r7, lr}
 801abb0:	b08c      	sub	sp, #48	; 0x30
 801abb2:	af04      	add	r7, sp, #16
 801abb4:	60f8      	str	r0, [r7, #12]
 801abb6:	60b9      	str	r1, [r7, #8]
 801abb8:	603b      	str	r3, [r7, #0]
 801abba:	4613      	mov	r3, r2
 801abbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801abbe:	88fb      	ldrh	r3, [r7, #6]
 801abc0:	009b      	lsls	r3, r3, #2
 801abc2:	4618      	mov	r0, r3
 801abc4:	f001 fce8 	bl	801c598 <pvPortMalloc>
 801abc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d00e      	beq.n	801abee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801abd0:	205c      	movs	r0, #92	; 0x5c
 801abd2:	f001 fce1 	bl	801c598 <pvPortMalloc>
 801abd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801abd8:	69fb      	ldr	r3, [r7, #28]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d003      	beq.n	801abe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801abde:	69fb      	ldr	r3, [r7, #28]
 801abe0:	697a      	ldr	r2, [r7, #20]
 801abe2:	631a      	str	r2, [r3, #48]	; 0x30
 801abe4:	e005      	b.n	801abf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801abe6:	6978      	ldr	r0, [r7, #20]
 801abe8:	f001 fda2 	bl	801c730 <vPortFree>
 801abec:	e001      	b.n	801abf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801abee:	2300      	movs	r3, #0
 801abf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801abf2:	69fb      	ldr	r3, [r7, #28]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d017      	beq.n	801ac28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801abf8:	69fb      	ldr	r3, [r7, #28]
 801abfa:	2200      	movs	r2, #0
 801abfc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ac00:	88fa      	ldrh	r2, [r7, #6]
 801ac02:	2300      	movs	r3, #0
 801ac04:	9303      	str	r3, [sp, #12]
 801ac06:	69fb      	ldr	r3, [r7, #28]
 801ac08:	9302      	str	r3, [sp, #8]
 801ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac0c:	9301      	str	r3, [sp, #4]
 801ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac10:	9300      	str	r3, [sp, #0]
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	68b9      	ldr	r1, [r7, #8]
 801ac16:	68f8      	ldr	r0, [r7, #12]
 801ac18:	f000 f80e 	bl	801ac38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ac1c:	69f8      	ldr	r0, [r7, #28]
 801ac1e:	f000 f89b 	bl	801ad58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ac22:	2301      	movs	r3, #1
 801ac24:	61bb      	str	r3, [r7, #24]
 801ac26:	e002      	b.n	801ac2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ac28:	f04f 33ff 	mov.w	r3, #4294967295
 801ac2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ac2e:	69bb      	ldr	r3, [r7, #24]
	}
 801ac30:	4618      	mov	r0, r3
 801ac32:	3720      	adds	r7, #32
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}

0801ac38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b088      	sub	sp, #32
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	60f8      	str	r0, [r7, #12]
 801ac40:	60b9      	str	r1, [r7, #8]
 801ac42:	607a      	str	r2, [r7, #4]
 801ac44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	009b      	lsls	r3, r3, #2
 801ac4e:	461a      	mov	r2, r3
 801ac50:	21a5      	movs	r1, #165	; 0xa5
 801ac52:	f003 fa82 	bl	801e15a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ac5a:	6879      	ldr	r1, [r7, #4]
 801ac5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801ac60:	440b      	add	r3, r1
 801ac62:	009b      	lsls	r3, r3, #2
 801ac64:	4413      	add	r3, r2
 801ac66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ac68:	69bb      	ldr	r3, [r7, #24]
 801ac6a:	f023 0307 	bic.w	r3, r3, #7
 801ac6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ac70:	69bb      	ldr	r3, [r7, #24]
 801ac72:	f003 0307 	and.w	r3, r3, #7
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d00a      	beq.n	801ac90 <prvInitialiseNewTask+0x58>
	__asm volatile
 801ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac7e:	f383 8811 	msr	BASEPRI, r3
 801ac82:	f3bf 8f6f 	isb	sy
 801ac86:	f3bf 8f4f 	dsb	sy
 801ac8a:	617b      	str	r3, [r7, #20]
}
 801ac8c:	bf00      	nop
 801ac8e:	e7fe      	b.n	801ac8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d01f      	beq.n	801acd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ac96:	2300      	movs	r3, #0
 801ac98:	61fb      	str	r3, [r7, #28]
 801ac9a:	e012      	b.n	801acc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ac9c:	68ba      	ldr	r2, [r7, #8]
 801ac9e:	69fb      	ldr	r3, [r7, #28]
 801aca0:	4413      	add	r3, r2
 801aca2:	7819      	ldrb	r1, [r3, #0]
 801aca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aca6:	69fb      	ldr	r3, [r7, #28]
 801aca8:	4413      	add	r3, r2
 801acaa:	3334      	adds	r3, #52	; 0x34
 801acac:	460a      	mov	r2, r1
 801acae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801acb0:	68ba      	ldr	r2, [r7, #8]
 801acb2:	69fb      	ldr	r3, [r7, #28]
 801acb4:	4413      	add	r3, r2
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d006      	beq.n	801acca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801acbc:	69fb      	ldr	r3, [r7, #28]
 801acbe:	3301      	adds	r3, #1
 801acc0:	61fb      	str	r3, [r7, #28]
 801acc2:	69fb      	ldr	r3, [r7, #28]
 801acc4:	2b0f      	cmp	r3, #15
 801acc6:	d9e9      	bls.n	801ac9c <prvInitialiseNewTask+0x64>
 801acc8:	e000      	b.n	801accc <prvInitialiseNewTask+0x94>
			{
				break;
 801acca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acce:	2200      	movs	r2, #0
 801acd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801acd4:	e003      	b.n	801acde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acd8:	2200      	movs	r2, #0
 801acda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ace0:	2b37      	cmp	r3, #55	; 0x37
 801ace2:	d901      	bls.n	801ace8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ace4:	2337      	movs	r3, #55	; 0x37
 801ace6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801acec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801acf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acf6:	2200      	movs	r2, #0
 801acf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acfc:	3304      	adds	r3, #4
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7fe ff14 	bl	8019b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad06:	3318      	adds	r3, #24
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7fe ff0f 	bl	8019b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad26:	2200      	movs	r2, #0
 801ad28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ad32:	683a      	ldr	r2, [r7, #0]
 801ad34:	68f9      	ldr	r1, [r7, #12]
 801ad36:	69b8      	ldr	r0, [r7, #24]
 801ad38:	f001 f9de 	bl	801c0f8 <pxPortInitialiseStack>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d002      	beq.n	801ad4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ad4e:	bf00      	nop
 801ad50:	3720      	adds	r7, #32
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
	...

0801ad58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ad60:	f001 faf8 	bl	801c354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ad64:	4b26      	ldr	r3, [pc, #152]	; (801ae00 <prvAddNewTaskToReadyList+0xa8>)
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	3301      	adds	r3, #1
 801ad6a:	4a25      	ldr	r2, [pc, #148]	; (801ae00 <prvAddNewTaskToReadyList+0xa8>)
 801ad6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ad6e:	4b25      	ldr	r3, [pc, #148]	; (801ae04 <prvAddNewTaskToReadyList+0xac>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d109      	bne.n	801ad8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ad76:	4a23      	ldr	r2, [pc, #140]	; (801ae04 <prvAddNewTaskToReadyList+0xac>)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ad7c:	4b20      	ldr	r3, [pc, #128]	; (801ae00 <prvAddNewTaskToReadyList+0xa8>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	2b01      	cmp	r3, #1
 801ad82:	d110      	bne.n	801ada6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801ad84:	f000 fbce 	bl	801b524 <prvInitialiseTaskLists>
 801ad88:	e00d      	b.n	801ada6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801ad8a:	4b1f      	ldr	r3, [pc, #124]	; (801ae08 <prvAddNewTaskToReadyList+0xb0>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d109      	bne.n	801ada6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ad92:	4b1c      	ldr	r3, [pc, #112]	; (801ae04 <prvAddNewTaskToReadyList+0xac>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d802      	bhi.n	801ada6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801ada0:	4a18      	ldr	r2, [pc, #96]	; (801ae04 <prvAddNewTaskToReadyList+0xac>)
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801ada6:	4b19      	ldr	r3, [pc, #100]	; (801ae0c <prvAddNewTaskToReadyList+0xb4>)
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	3301      	adds	r3, #1
 801adac:	4a17      	ldr	r2, [pc, #92]	; (801ae0c <prvAddNewTaskToReadyList+0xb4>)
 801adae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801adb0:	4b16      	ldr	r3, [pc, #88]	; (801ae0c <prvAddNewTaskToReadyList+0xb4>)
 801adb2:	681a      	ldr	r2, [r3, #0]
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adbc:	4b14      	ldr	r3, [pc, #80]	; (801ae10 <prvAddNewTaskToReadyList+0xb8>)
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	429a      	cmp	r2, r3
 801adc2:	d903      	bls.n	801adcc <prvAddNewTaskToReadyList+0x74>
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adc8:	4a11      	ldr	r2, [pc, #68]	; (801ae10 <prvAddNewTaskToReadyList+0xb8>)
 801adca:	6013      	str	r3, [r2, #0]
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801add0:	4613      	mov	r3, r2
 801add2:	009b      	lsls	r3, r3, #2
 801add4:	4413      	add	r3, r2
 801add6:	009b      	lsls	r3, r3, #2
 801add8:	4a0e      	ldr	r2, [pc, #56]	; (801ae14 <prvAddNewTaskToReadyList+0xbc>)
 801adda:	441a      	add	r2, r3
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	3304      	adds	r3, #4
 801ade0:	4619      	mov	r1, r3
 801ade2:	4610      	mov	r0, r2
 801ade4:	f7fe feaf 	bl	8019b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801ade8:	f001 fae4 	bl	801c3b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801adec:	4b06      	ldr	r3, [pc, #24]	; (801ae08 <prvAddNewTaskToReadyList+0xb0>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d001      	beq.n	801adf8 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801adf4:	4b03      	ldr	r3, [pc, #12]	; (801ae04 <prvAddNewTaskToReadyList+0xac>)
 801adf6:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801adf8:	bf00      	nop
 801adfa:	3708      	adds	r7, #8
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}
 801ae00:	2400a38c 	.word	0x2400a38c
 801ae04:	24009eb8 	.word	0x24009eb8
 801ae08:	2400a398 	.word	0x2400a398
 801ae0c:	2400a3a8 	.word	0x2400a3a8
 801ae10:	2400a394 	.word	0x2400a394
 801ae14:	24009ebc 	.word	0x24009ebc

0801ae18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b084      	sub	sp, #16
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ae20:	2300      	movs	r3, #0
 801ae22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d017      	beq.n	801ae5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ae2a:	4b13      	ldr	r3, [pc, #76]	; (801ae78 <vTaskDelay+0x60>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d00a      	beq.n	801ae48 <vTaskDelay+0x30>
	__asm volatile
 801ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae36:	f383 8811 	msr	BASEPRI, r3
 801ae3a:	f3bf 8f6f 	isb	sy
 801ae3e:	f3bf 8f4f 	dsb	sy
 801ae42:	60bb      	str	r3, [r7, #8]
}
 801ae44:	bf00      	nop
 801ae46:	e7fe      	b.n	801ae46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ae48:	f000 f880 	bl	801af4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ae4c:	2100      	movs	r1, #0
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f000 fdb0 	bl	801b9b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ae54:	f000 f888 	bl	801af68 <xTaskResumeAll>
 801ae58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d107      	bne.n	801ae70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801ae60:	4b06      	ldr	r3, [pc, #24]	; (801ae7c <vTaskDelay+0x64>)
 801ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ae66:	601a      	str	r2, [r3, #0]
 801ae68:	f3bf 8f4f 	dsb	sy
 801ae6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ae70:	bf00      	nop
 801ae72:	3710      	adds	r7, #16
 801ae74:	46bd      	mov	sp, r7
 801ae76:	bd80      	pop	{r7, pc}
 801ae78:	2400a3b4 	.word	0x2400a3b4
 801ae7c:	e000ed04 	.word	0xe000ed04

0801ae80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b08a      	sub	sp, #40	; 0x28
 801ae84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ae86:	2300      	movs	r3, #0
 801ae88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ae8e:	463a      	mov	r2, r7
 801ae90:	1d39      	adds	r1, r7, #4
 801ae92:	f107 0308 	add.w	r3, r7, #8
 801ae96:	4618      	mov	r0, r3
 801ae98:	f7fe fdf4 	bl	8019a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ae9c:	6839      	ldr	r1, [r7, #0]
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	68ba      	ldr	r2, [r7, #8]
 801aea2:	9202      	str	r2, [sp, #8]
 801aea4:	9301      	str	r3, [sp, #4]
 801aea6:	2300      	movs	r3, #0
 801aea8:	9300      	str	r3, [sp, #0]
 801aeaa:	2300      	movs	r3, #0
 801aeac:	460a      	mov	r2, r1
 801aeae:	4921      	ldr	r1, [pc, #132]	; (801af34 <vTaskStartScheduler+0xb4>)
 801aeb0:	4821      	ldr	r0, [pc, #132]	; (801af38 <vTaskStartScheduler+0xb8>)
 801aeb2:	f7ff fe1f 	bl	801aaf4 <xTaskCreateStatic>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	4a20      	ldr	r2, [pc, #128]	; (801af3c <vTaskStartScheduler+0xbc>)
 801aeba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801aebc:	4b1f      	ldr	r3, [pc, #124]	; (801af3c <vTaskStartScheduler+0xbc>)
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d002      	beq.n	801aeca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801aec4:	2301      	movs	r3, #1
 801aec6:	617b      	str	r3, [r7, #20]
 801aec8:	e001      	b.n	801aece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801aeca:	2300      	movs	r3, #0
 801aecc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	2b01      	cmp	r3, #1
 801aed2:	d102      	bne.n	801aeda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801aed4:	f000 fdc2 	bl	801ba5c <xTimerCreateTimerTask>
 801aed8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801aeda:	697b      	ldr	r3, [r7, #20]
 801aedc:	2b01      	cmp	r3, #1
 801aede:	d116      	bne.n	801af0e <vTaskStartScheduler+0x8e>
	__asm volatile
 801aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aee4:	f383 8811 	msr	BASEPRI, r3
 801aee8:	f3bf 8f6f 	isb	sy
 801aeec:	f3bf 8f4f 	dsb	sy
 801aef0:	613b      	str	r3, [r7, #16]
}
 801aef2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801aef4:	4b12      	ldr	r3, [pc, #72]	; (801af40 <vTaskStartScheduler+0xc0>)
 801aef6:	f04f 32ff 	mov.w	r2, #4294967295
 801aefa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801aefc:	4b11      	ldr	r3, [pc, #68]	; (801af44 <vTaskStartScheduler+0xc4>)
 801aefe:	2201      	movs	r2, #1
 801af00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801af02:	4b11      	ldr	r3, [pc, #68]	; (801af48 <vTaskStartScheduler+0xc8>)
 801af04:	2200      	movs	r2, #0
 801af06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801af08:	f001 f982 	bl	801c210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801af0c:	e00e      	b.n	801af2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801af0e:	697b      	ldr	r3, [r7, #20]
 801af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af14:	d10a      	bne.n	801af2c <vTaskStartScheduler+0xac>
	__asm volatile
 801af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af1a:	f383 8811 	msr	BASEPRI, r3
 801af1e:	f3bf 8f6f 	isb	sy
 801af22:	f3bf 8f4f 	dsb	sy
 801af26:	60fb      	str	r3, [r7, #12]
}
 801af28:	bf00      	nop
 801af2a:	e7fe      	b.n	801af2a <vTaskStartScheduler+0xaa>
}
 801af2c:	bf00      	nop
 801af2e:	3718      	adds	r7, #24
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}
 801af34:	08020354 	.word	0x08020354
 801af38:	0801b501 	.word	0x0801b501
 801af3c:	2400a3b0 	.word	0x2400a3b0
 801af40:	2400a3ac 	.word	0x2400a3ac
 801af44:	2400a398 	.word	0x2400a398
 801af48:	2400a390 	.word	0x2400a390

0801af4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801af4c:	b480      	push	{r7}
 801af4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801af50:	4b04      	ldr	r3, [pc, #16]	; (801af64 <vTaskSuspendAll+0x18>)
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	3301      	adds	r3, #1
 801af56:	4a03      	ldr	r2, [pc, #12]	; (801af64 <vTaskSuspendAll+0x18>)
 801af58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801af5a:	bf00      	nop
 801af5c:	46bd      	mov	sp, r7
 801af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af62:	4770      	bx	lr
 801af64:	2400a3b4 	.word	0x2400a3b4

0801af68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b084      	sub	sp, #16
 801af6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801af6e:	2300      	movs	r3, #0
 801af70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801af72:	2300      	movs	r3, #0
 801af74:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801af76:	4b3c      	ldr	r3, [pc, #240]	; (801b068 <xTaskResumeAll+0x100>)
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d10a      	bne.n	801af94 <xTaskResumeAll+0x2c>
	__asm volatile
 801af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af82:	f383 8811 	msr	BASEPRI, r3
 801af86:	f3bf 8f6f 	isb	sy
 801af8a:	f3bf 8f4f 	dsb	sy
 801af8e:	603b      	str	r3, [r7, #0]
}
 801af90:	bf00      	nop
 801af92:	e7fe      	b.n	801af92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801af94:	f001 f9de 	bl	801c354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801af98:	4b33      	ldr	r3, [pc, #204]	; (801b068 <xTaskResumeAll+0x100>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	3b01      	subs	r3, #1
 801af9e:	4a32      	ldr	r2, [pc, #200]	; (801b068 <xTaskResumeAll+0x100>)
 801afa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801afa2:	4b31      	ldr	r3, [pc, #196]	; (801b068 <xTaskResumeAll+0x100>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d156      	bne.n	801b058 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801afaa:	4b30      	ldr	r3, [pc, #192]	; (801b06c <xTaskResumeAll+0x104>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d052      	beq.n	801b058 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801afb2:	e02f      	b.n	801b014 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801afb4:	4b2e      	ldr	r3, [pc, #184]	; (801b070 <xTaskResumeAll+0x108>)
 801afb6:	68db      	ldr	r3, [r3, #12]
 801afb8:	68db      	ldr	r3, [r3, #12]
 801afba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	3318      	adds	r3, #24
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7fe fe1d 	bl	8019c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	3304      	adds	r3, #4
 801afca:	4618      	mov	r0, r3
 801afcc:	f7fe fe18 	bl	8019c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afd4:	4b27      	ldr	r3, [pc, #156]	; (801b074 <xTaskResumeAll+0x10c>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	429a      	cmp	r2, r3
 801afda:	d903      	bls.n	801afe4 <xTaskResumeAll+0x7c>
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afe0:	4a24      	ldr	r2, [pc, #144]	; (801b074 <xTaskResumeAll+0x10c>)
 801afe2:	6013      	str	r3, [r2, #0]
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afe8:	4613      	mov	r3, r2
 801afea:	009b      	lsls	r3, r3, #2
 801afec:	4413      	add	r3, r2
 801afee:	009b      	lsls	r3, r3, #2
 801aff0:	4a21      	ldr	r2, [pc, #132]	; (801b078 <xTaskResumeAll+0x110>)
 801aff2:	441a      	add	r2, r3
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	3304      	adds	r3, #4
 801aff8:	4619      	mov	r1, r3
 801affa:	4610      	mov	r0, r2
 801affc:	f7fe fda3 	bl	8019b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b004:	4b1d      	ldr	r3, [pc, #116]	; (801b07c <xTaskResumeAll+0x114>)
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d302      	bcc.n	801b014 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b00e:	4b1c      	ldr	r3, [pc, #112]	; (801b080 <xTaskResumeAll+0x118>)
 801b010:	2201      	movs	r2, #1
 801b012:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b014:	4b16      	ldr	r3, [pc, #88]	; (801b070 <xTaskResumeAll+0x108>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d1cb      	bne.n	801afb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d001      	beq.n	801b026 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b022:	f000 fb1d 	bl	801b660 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b026:	4b17      	ldr	r3, [pc, #92]	; (801b084 <xTaskResumeAll+0x11c>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d010      	beq.n	801b054 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b032:	f000 f839 	bl	801b0a8 <xTaskIncrementTick>
 801b036:	4603      	mov	r3, r0
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d002      	beq.n	801b042 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b03c:	4b10      	ldr	r3, [pc, #64]	; (801b080 <xTaskResumeAll+0x118>)
 801b03e:	2201      	movs	r2, #1
 801b040:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b042:	68bb      	ldr	r3, [r7, #8]
 801b044:	3b01      	subs	r3, #1
 801b046:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d1f1      	bne.n	801b032 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b04e:	4b0d      	ldr	r3, [pc, #52]	; (801b084 <xTaskResumeAll+0x11c>)
 801b050:	2200      	movs	r2, #0
 801b052:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b054:	4b0a      	ldr	r3, [pc, #40]	; (801b080 <xTaskResumeAll+0x118>)
 801b056:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b058:	f001 f9ac 	bl	801c3b4 <vPortExitCritical>

	return xAlreadyYielded;
 801b05c:	687b      	ldr	r3, [r7, #4]
}
 801b05e:	4618      	mov	r0, r3
 801b060:	3710      	adds	r7, #16
 801b062:	46bd      	mov	sp, r7
 801b064:	bd80      	pop	{r7, pc}
 801b066:	bf00      	nop
 801b068:	2400a3b4 	.word	0x2400a3b4
 801b06c:	2400a38c 	.word	0x2400a38c
 801b070:	2400a34c 	.word	0x2400a34c
 801b074:	2400a394 	.word	0x2400a394
 801b078:	24009ebc 	.word	0x24009ebc
 801b07c:	24009eb8 	.word	0x24009eb8
 801b080:	2400a3a0 	.word	0x2400a3a0
 801b084:	2400a39c 	.word	0x2400a39c

0801b088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b088:	b480      	push	{r7}
 801b08a:	b083      	sub	sp, #12
 801b08c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b08e:	4b05      	ldr	r3, [pc, #20]	; (801b0a4 <xTaskGetTickCount+0x1c>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b094:	687b      	ldr	r3, [r7, #4]
}
 801b096:	4618      	mov	r0, r3
 801b098:	370c      	adds	r7, #12
 801b09a:	46bd      	mov	sp, r7
 801b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a0:	4770      	bx	lr
 801b0a2:	bf00      	nop
 801b0a4:	2400a390 	.word	0x2400a390

0801b0a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b086      	sub	sp, #24
 801b0ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0b2:	4b3f      	ldr	r3, [pc, #252]	; (801b1b0 <xTaskIncrementTick+0x108>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d170      	bne.n	801b19c <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b0ba:	4b3e      	ldr	r3, [pc, #248]	; (801b1b4 <xTaskIncrementTick+0x10c>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	3301      	adds	r3, #1
 801b0c0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b0c2:	4a3c      	ldr	r2, [pc, #240]	; (801b1b4 <xTaskIncrementTick+0x10c>)
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d120      	bne.n	801b110 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801b0ce:	4b3a      	ldr	r3, [pc, #232]	; (801b1b8 <xTaskIncrementTick+0x110>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d00a      	beq.n	801b0ee <xTaskIncrementTick+0x46>
	__asm volatile
 801b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0dc:	f383 8811 	msr	BASEPRI, r3
 801b0e0:	f3bf 8f6f 	isb	sy
 801b0e4:	f3bf 8f4f 	dsb	sy
 801b0e8:	603b      	str	r3, [r7, #0]
}
 801b0ea:	bf00      	nop
 801b0ec:	e7fe      	b.n	801b0ec <xTaskIncrementTick+0x44>
 801b0ee:	4b32      	ldr	r3, [pc, #200]	; (801b1b8 <xTaskIncrementTick+0x110>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	60fb      	str	r3, [r7, #12]
 801b0f4:	4b31      	ldr	r3, [pc, #196]	; (801b1bc <xTaskIncrementTick+0x114>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	4a2f      	ldr	r2, [pc, #188]	; (801b1b8 <xTaskIncrementTick+0x110>)
 801b0fa:	6013      	str	r3, [r2, #0]
 801b0fc:	4a2f      	ldr	r2, [pc, #188]	; (801b1bc <xTaskIncrementTick+0x114>)
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	6013      	str	r3, [r2, #0]
 801b102:	4b2f      	ldr	r3, [pc, #188]	; (801b1c0 <xTaskIncrementTick+0x118>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	3301      	adds	r3, #1
 801b108:	4a2d      	ldr	r2, [pc, #180]	; (801b1c0 <xTaskIncrementTick+0x118>)
 801b10a:	6013      	str	r3, [r2, #0]
 801b10c:	f000 faa8 	bl	801b660 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b110:	4b2c      	ldr	r3, [pc, #176]	; (801b1c4 <xTaskIncrementTick+0x11c>)
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	693a      	ldr	r2, [r7, #16]
 801b116:	429a      	cmp	r2, r3
 801b118:	d345      	bcc.n	801b1a6 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b11a:	4b27      	ldr	r3, [pc, #156]	; (801b1b8 <xTaskIncrementTick+0x110>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d104      	bne.n	801b12e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b124:	4b27      	ldr	r3, [pc, #156]	; (801b1c4 <xTaskIncrementTick+0x11c>)
 801b126:	f04f 32ff 	mov.w	r2, #4294967295
 801b12a:	601a      	str	r2, [r3, #0]
					break;
 801b12c:	e03b      	b.n	801b1a6 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b12e:	4b22      	ldr	r3, [pc, #136]	; (801b1b8 <xTaskIncrementTick+0x110>)
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	68db      	ldr	r3, [r3, #12]
 801b134:	68db      	ldr	r3, [r3, #12]
 801b136:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	685b      	ldr	r3, [r3, #4]
 801b13c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b13e:	693a      	ldr	r2, [r7, #16]
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	429a      	cmp	r2, r3
 801b144:	d203      	bcs.n	801b14e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b146:	4a1f      	ldr	r2, [pc, #124]	; (801b1c4 <xTaskIncrementTick+0x11c>)
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b14c:	e02b      	b.n	801b1a6 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b14e:	68bb      	ldr	r3, [r7, #8]
 801b150:	3304      	adds	r3, #4
 801b152:	4618      	mov	r0, r3
 801b154:	f7fe fd54 	bl	8019c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d004      	beq.n	801b16a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	3318      	adds	r3, #24
 801b164:	4618      	mov	r0, r3
 801b166:	f7fe fd4b 	bl	8019c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b16a:	68bb      	ldr	r3, [r7, #8]
 801b16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b16e:	4b16      	ldr	r3, [pc, #88]	; (801b1c8 <xTaskIncrementTick+0x120>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	429a      	cmp	r2, r3
 801b174:	d903      	bls.n	801b17e <xTaskIncrementTick+0xd6>
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b17a:	4a13      	ldr	r2, [pc, #76]	; (801b1c8 <xTaskIncrementTick+0x120>)
 801b17c:	6013      	str	r3, [r2, #0]
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b182:	4613      	mov	r3, r2
 801b184:	009b      	lsls	r3, r3, #2
 801b186:	4413      	add	r3, r2
 801b188:	009b      	lsls	r3, r3, #2
 801b18a:	4a10      	ldr	r2, [pc, #64]	; (801b1cc <xTaskIncrementTick+0x124>)
 801b18c:	441a      	add	r2, r3
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	3304      	adds	r3, #4
 801b192:	4619      	mov	r1, r3
 801b194:	4610      	mov	r0, r2
 801b196:	f7fe fcd6 	bl	8019b46 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b19a:	e7be      	b.n	801b11a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b19c:	4b0c      	ldr	r3, [pc, #48]	; (801b1d0 <xTaskIncrementTick+0x128>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	4a0b      	ldr	r2, [pc, #44]	; (801b1d0 <xTaskIncrementTick+0x128>)
 801b1a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b1a6:	697b      	ldr	r3, [r7, #20]
}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	3718      	adds	r7, #24
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}
 801b1b0:	2400a3b4 	.word	0x2400a3b4
 801b1b4:	2400a390 	.word	0x2400a390
 801b1b8:	2400a344 	.word	0x2400a344
 801b1bc:	2400a348 	.word	0x2400a348
 801b1c0:	2400a3a4 	.word	0x2400a3a4
 801b1c4:	2400a3ac 	.word	0x2400a3ac
 801b1c8:	2400a394 	.word	0x2400a394
 801b1cc:	24009ebc 	.word	0x24009ebc
 801b1d0:	2400a39c 	.word	0x2400a39c

0801b1d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b1d4:	b480      	push	{r7}
 801b1d6:	b085      	sub	sp, #20
 801b1d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b1da:	4b28      	ldr	r3, [pc, #160]	; (801b27c <vTaskSwitchContext+0xa8>)
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d003      	beq.n	801b1ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b1e2:	4b27      	ldr	r3, [pc, #156]	; (801b280 <vTaskSwitchContext+0xac>)
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b1e8:	e041      	b.n	801b26e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801b1ea:	4b25      	ldr	r3, [pc, #148]	; (801b280 <vTaskSwitchContext+0xac>)
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1f0:	4b24      	ldr	r3, [pc, #144]	; (801b284 <vTaskSwitchContext+0xb0>)
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	60fb      	str	r3, [r7, #12]
 801b1f6:	e010      	b.n	801b21a <vTaskSwitchContext+0x46>
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d10a      	bne.n	801b214 <vTaskSwitchContext+0x40>
	__asm volatile
 801b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b202:	f383 8811 	msr	BASEPRI, r3
 801b206:	f3bf 8f6f 	isb	sy
 801b20a:	f3bf 8f4f 	dsb	sy
 801b20e:	607b      	str	r3, [r7, #4]
}
 801b210:	bf00      	nop
 801b212:	e7fe      	b.n	801b212 <vTaskSwitchContext+0x3e>
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	3b01      	subs	r3, #1
 801b218:	60fb      	str	r3, [r7, #12]
 801b21a:	491b      	ldr	r1, [pc, #108]	; (801b288 <vTaskSwitchContext+0xb4>)
 801b21c:	68fa      	ldr	r2, [r7, #12]
 801b21e:	4613      	mov	r3, r2
 801b220:	009b      	lsls	r3, r3, #2
 801b222:	4413      	add	r3, r2
 801b224:	009b      	lsls	r3, r3, #2
 801b226:	440b      	add	r3, r1
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d0e4      	beq.n	801b1f8 <vTaskSwitchContext+0x24>
 801b22e:	68fa      	ldr	r2, [r7, #12]
 801b230:	4613      	mov	r3, r2
 801b232:	009b      	lsls	r3, r3, #2
 801b234:	4413      	add	r3, r2
 801b236:	009b      	lsls	r3, r3, #2
 801b238:	4a13      	ldr	r2, [pc, #76]	; (801b288 <vTaskSwitchContext+0xb4>)
 801b23a:	4413      	add	r3, r2
 801b23c:	60bb      	str	r3, [r7, #8]
 801b23e:	68bb      	ldr	r3, [r7, #8]
 801b240:	685b      	ldr	r3, [r3, #4]
 801b242:	685a      	ldr	r2, [r3, #4]
 801b244:	68bb      	ldr	r3, [r7, #8]
 801b246:	605a      	str	r2, [r3, #4]
 801b248:	68bb      	ldr	r3, [r7, #8]
 801b24a:	685a      	ldr	r2, [r3, #4]
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	3308      	adds	r3, #8
 801b250:	429a      	cmp	r2, r3
 801b252:	d104      	bne.n	801b25e <vTaskSwitchContext+0x8a>
 801b254:	68bb      	ldr	r3, [r7, #8]
 801b256:	685b      	ldr	r3, [r3, #4]
 801b258:	685a      	ldr	r2, [r3, #4]
 801b25a:	68bb      	ldr	r3, [r7, #8]
 801b25c:	605a      	str	r2, [r3, #4]
 801b25e:	68bb      	ldr	r3, [r7, #8]
 801b260:	685b      	ldr	r3, [r3, #4]
 801b262:	68db      	ldr	r3, [r3, #12]
 801b264:	4a09      	ldr	r2, [pc, #36]	; (801b28c <vTaskSwitchContext+0xb8>)
 801b266:	6013      	str	r3, [r2, #0]
 801b268:	4a06      	ldr	r2, [pc, #24]	; (801b284 <vTaskSwitchContext+0xb0>)
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	6013      	str	r3, [r2, #0]
}
 801b26e:	bf00      	nop
 801b270:	3714      	adds	r7, #20
 801b272:	46bd      	mov	sp, r7
 801b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b278:	4770      	bx	lr
 801b27a:	bf00      	nop
 801b27c:	2400a3b4 	.word	0x2400a3b4
 801b280:	2400a3a0 	.word	0x2400a3a0
 801b284:	2400a394 	.word	0x2400a394
 801b288:	24009ebc 	.word	0x24009ebc
 801b28c:	24009eb8 	.word	0x24009eb8

0801b290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b084      	sub	sp, #16
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d10a      	bne.n	801b2b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2a4:	f383 8811 	msr	BASEPRI, r3
 801b2a8:	f3bf 8f6f 	isb	sy
 801b2ac:	f3bf 8f4f 	dsb	sy
 801b2b0:	60fb      	str	r3, [r7, #12]
}
 801b2b2:	bf00      	nop
 801b2b4:	e7fe      	b.n	801b2b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b2b6:	4b07      	ldr	r3, [pc, #28]	; (801b2d4 <vTaskPlaceOnEventList+0x44>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	3318      	adds	r3, #24
 801b2bc:	4619      	mov	r1, r3
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	f7fe fc65 	bl	8019b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b2c4:	2101      	movs	r1, #1
 801b2c6:	6838      	ldr	r0, [r7, #0]
 801b2c8:	f000 fb74 	bl	801b9b4 <prvAddCurrentTaskToDelayedList>
}
 801b2cc:	bf00      	nop
 801b2ce:	3710      	adds	r7, #16
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}
 801b2d4:	24009eb8 	.word	0x24009eb8

0801b2d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b086      	sub	sp, #24
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	60f8      	str	r0, [r7, #12]
 801b2e0:	60b9      	str	r1, [r7, #8]
 801b2e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d10a      	bne.n	801b300 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2ee:	f383 8811 	msr	BASEPRI, r3
 801b2f2:	f3bf 8f6f 	isb	sy
 801b2f6:	f3bf 8f4f 	dsb	sy
 801b2fa:	617b      	str	r3, [r7, #20]
}
 801b2fc:	bf00      	nop
 801b2fe:	e7fe      	b.n	801b2fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b300:	4b0a      	ldr	r3, [pc, #40]	; (801b32c <vTaskPlaceOnEventListRestricted+0x54>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	3318      	adds	r3, #24
 801b306:	4619      	mov	r1, r3
 801b308:	68f8      	ldr	r0, [r7, #12]
 801b30a:	f7fe fc1c 	bl	8019b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d002      	beq.n	801b31a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b314:	f04f 33ff 	mov.w	r3, #4294967295
 801b318:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b31a:	6879      	ldr	r1, [r7, #4]
 801b31c:	68b8      	ldr	r0, [r7, #8]
 801b31e:	f000 fb49 	bl	801b9b4 <prvAddCurrentTaskToDelayedList>
	}
 801b322:	bf00      	nop
 801b324:	3718      	adds	r7, #24
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}
 801b32a:	bf00      	nop
 801b32c:	24009eb8 	.word	0x24009eb8

0801b330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b086      	sub	sp, #24
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	68db      	ldr	r3, [r3, #12]
 801b33c:	68db      	ldr	r3, [r3, #12]
 801b33e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b340:	693b      	ldr	r3, [r7, #16]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d10a      	bne.n	801b35c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b34a:	f383 8811 	msr	BASEPRI, r3
 801b34e:	f3bf 8f6f 	isb	sy
 801b352:	f3bf 8f4f 	dsb	sy
 801b356:	60fb      	str	r3, [r7, #12]
}
 801b358:	bf00      	nop
 801b35a:	e7fe      	b.n	801b35a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b35c:	693b      	ldr	r3, [r7, #16]
 801b35e:	3318      	adds	r3, #24
 801b360:	4618      	mov	r0, r3
 801b362:	f7fe fc4d 	bl	8019c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b366:	4b1e      	ldr	r3, [pc, #120]	; (801b3e0 <xTaskRemoveFromEventList+0xb0>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d11d      	bne.n	801b3aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	3304      	adds	r3, #4
 801b372:	4618      	mov	r0, r3
 801b374:	f7fe fc44 	bl	8019c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b378:	693b      	ldr	r3, [r7, #16]
 801b37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b37c:	4b19      	ldr	r3, [pc, #100]	; (801b3e4 <xTaskRemoveFromEventList+0xb4>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	429a      	cmp	r2, r3
 801b382:	d903      	bls.n	801b38c <xTaskRemoveFromEventList+0x5c>
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b388:	4a16      	ldr	r2, [pc, #88]	; (801b3e4 <xTaskRemoveFromEventList+0xb4>)
 801b38a:	6013      	str	r3, [r2, #0]
 801b38c:	693b      	ldr	r3, [r7, #16]
 801b38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b390:	4613      	mov	r3, r2
 801b392:	009b      	lsls	r3, r3, #2
 801b394:	4413      	add	r3, r2
 801b396:	009b      	lsls	r3, r3, #2
 801b398:	4a13      	ldr	r2, [pc, #76]	; (801b3e8 <xTaskRemoveFromEventList+0xb8>)
 801b39a:	441a      	add	r2, r3
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	3304      	adds	r3, #4
 801b3a0:	4619      	mov	r1, r3
 801b3a2:	4610      	mov	r0, r2
 801b3a4:	f7fe fbcf 	bl	8019b46 <vListInsertEnd>
 801b3a8:	e005      	b.n	801b3b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b3aa:	693b      	ldr	r3, [r7, #16]
 801b3ac:	3318      	adds	r3, #24
 801b3ae:	4619      	mov	r1, r3
 801b3b0:	480e      	ldr	r0, [pc, #56]	; (801b3ec <xTaskRemoveFromEventList+0xbc>)
 801b3b2:	f7fe fbc8 	bl	8019b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b3b6:	693b      	ldr	r3, [r7, #16]
 801b3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b3ba:	4b0d      	ldr	r3, [pc, #52]	; (801b3f0 <xTaskRemoveFromEventList+0xc0>)
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	d905      	bls.n	801b3d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b3c4:	2301      	movs	r3, #1
 801b3c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b3c8:	4b0a      	ldr	r3, [pc, #40]	; (801b3f4 <xTaskRemoveFromEventList+0xc4>)
 801b3ca:	2201      	movs	r2, #1
 801b3cc:	601a      	str	r2, [r3, #0]
 801b3ce:	e001      	b.n	801b3d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b3d4:	697b      	ldr	r3, [r7, #20]
}
 801b3d6:	4618      	mov	r0, r3
 801b3d8:	3718      	adds	r7, #24
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	bd80      	pop	{r7, pc}
 801b3de:	bf00      	nop
 801b3e0:	2400a3b4 	.word	0x2400a3b4
 801b3e4:	2400a394 	.word	0x2400a394
 801b3e8:	24009ebc 	.word	0x24009ebc
 801b3ec:	2400a34c 	.word	0x2400a34c
 801b3f0:	24009eb8 	.word	0x24009eb8
 801b3f4:	2400a3a0 	.word	0x2400a3a0

0801b3f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b3f8:	b480      	push	{r7}
 801b3fa:	b083      	sub	sp, #12
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b400:	4b06      	ldr	r3, [pc, #24]	; (801b41c <vTaskInternalSetTimeOutState+0x24>)
 801b402:	681a      	ldr	r2, [r3, #0]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b408:	4b05      	ldr	r3, [pc, #20]	; (801b420 <vTaskInternalSetTimeOutState+0x28>)
 801b40a:	681a      	ldr	r2, [r3, #0]
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	605a      	str	r2, [r3, #4]
}
 801b410:	bf00      	nop
 801b412:	370c      	adds	r7, #12
 801b414:	46bd      	mov	sp, r7
 801b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41a:	4770      	bx	lr
 801b41c:	2400a3a4 	.word	0x2400a3a4
 801b420:	2400a390 	.word	0x2400a390

0801b424 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b088      	sub	sp, #32
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
 801b42c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d10a      	bne.n	801b44a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b438:	f383 8811 	msr	BASEPRI, r3
 801b43c:	f3bf 8f6f 	isb	sy
 801b440:	f3bf 8f4f 	dsb	sy
 801b444:	613b      	str	r3, [r7, #16]
}
 801b446:	bf00      	nop
 801b448:	e7fe      	b.n	801b448 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b44a:	683b      	ldr	r3, [r7, #0]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d10a      	bne.n	801b466 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b454:	f383 8811 	msr	BASEPRI, r3
 801b458:	f3bf 8f6f 	isb	sy
 801b45c:	f3bf 8f4f 	dsb	sy
 801b460:	60fb      	str	r3, [r7, #12]
}
 801b462:	bf00      	nop
 801b464:	e7fe      	b.n	801b464 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b466:	f000 ff75 	bl	801c354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b46a:	4b1d      	ldr	r3, [pc, #116]	; (801b4e0 <xTaskCheckForTimeOut+0xbc>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	685b      	ldr	r3, [r3, #4]
 801b474:	69ba      	ldr	r2, [r7, #24]
 801b476:	1ad3      	subs	r3, r2, r3
 801b478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b482:	d102      	bne.n	801b48a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b484:	2300      	movs	r3, #0
 801b486:	61fb      	str	r3, [r7, #28]
 801b488:	e023      	b.n	801b4d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681a      	ldr	r2, [r3, #0]
 801b48e:	4b15      	ldr	r3, [pc, #84]	; (801b4e4 <xTaskCheckForTimeOut+0xc0>)
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	429a      	cmp	r2, r3
 801b494:	d007      	beq.n	801b4a6 <xTaskCheckForTimeOut+0x82>
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	685b      	ldr	r3, [r3, #4]
 801b49a:	69ba      	ldr	r2, [r7, #24]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d302      	bcc.n	801b4a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	61fb      	str	r3, [r7, #28]
 801b4a4:	e015      	b.n	801b4d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	697a      	ldr	r2, [r7, #20]
 801b4ac:	429a      	cmp	r2, r3
 801b4ae:	d20b      	bcs.n	801b4c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	681a      	ldr	r2, [r3, #0]
 801b4b4:	697b      	ldr	r3, [r7, #20]
 801b4b6:	1ad2      	subs	r2, r2, r3
 801b4b8:	683b      	ldr	r3, [r7, #0]
 801b4ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b4bc:	6878      	ldr	r0, [r7, #4]
 801b4be:	f7ff ff9b 	bl	801b3f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	61fb      	str	r3, [r7, #28]
 801b4c6:	e004      	b.n	801b4d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b4ce:	2301      	movs	r3, #1
 801b4d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b4d2:	f000 ff6f 	bl	801c3b4 <vPortExitCritical>

	return xReturn;
 801b4d6:	69fb      	ldr	r3, [r7, #28]
}
 801b4d8:	4618      	mov	r0, r3
 801b4da:	3720      	adds	r7, #32
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	bd80      	pop	{r7, pc}
 801b4e0:	2400a390 	.word	0x2400a390
 801b4e4:	2400a3a4 	.word	0x2400a3a4

0801b4e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b4ec:	4b03      	ldr	r3, [pc, #12]	; (801b4fc <vTaskMissedYield+0x14>)
 801b4ee:	2201      	movs	r2, #1
 801b4f0:	601a      	str	r2, [r3, #0]
}
 801b4f2:	bf00      	nop
 801b4f4:	46bd      	mov	sp, r7
 801b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fa:	4770      	bx	lr
 801b4fc:	2400a3a0 	.word	0x2400a3a0

0801b500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b082      	sub	sp, #8
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b508:	f000 f84c 	bl	801b5a4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 801b50c:	4b04      	ldr	r3, [pc, #16]	; (801b520 <prvIdleTask+0x20>)
 801b50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b512:	601a      	str	r2, [r3, #0]
 801b514:	f3bf 8f4f 	dsb	sy
 801b518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b51c:	e7f4      	b.n	801b508 <prvIdleTask+0x8>
 801b51e:	bf00      	nop
 801b520:	e000ed04 	.word	0xe000ed04

0801b524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b52a:	2300      	movs	r3, #0
 801b52c:	607b      	str	r3, [r7, #4]
 801b52e:	e00c      	b.n	801b54a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b530:	687a      	ldr	r2, [r7, #4]
 801b532:	4613      	mov	r3, r2
 801b534:	009b      	lsls	r3, r3, #2
 801b536:	4413      	add	r3, r2
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	4a12      	ldr	r2, [pc, #72]	; (801b584 <prvInitialiseTaskLists+0x60>)
 801b53c:	4413      	add	r3, r2
 801b53e:	4618      	mov	r0, r3
 801b540:	f7fe fad4 	bl	8019aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	3301      	adds	r3, #1
 801b548:	607b      	str	r3, [r7, #4]
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	2b37      	cmp	r3, #55	; 0x37
 801b54e:	d9ef      	bls.n	801b530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b550:	480d      	ldr	r0, [pc, #52]	; (801b588 <prvInitialiseTaskLists+0x64>)
 801b552:	f7fe facb 	bl	8019aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b556:	480d      	ldr	r0, [pc, #52]	; (801b58c <prvInitialiseTaskLists+0x68>)
 801b558:	f7fe fac8 	bl	8019aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b55c:	480c      	ldr	r0, [pc, #48]	; (801b590 <prvInitialiseTaskLists+0x6c>)
 801b55e:	f7fe fac5 	bl	8019aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b562:	480c      	ldr	r0, [pc, #48]	; (801b594 <prvInitialiseTaskLists+0x70>)
 801b564:	f7fe fac2 	bl	8019aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b568:	480b      	ldr	r0, [pc, #44]	; (801b598 <prvInitialiseTaskLists+0x74>)
 801b56a:	f7fe fabf 	bl	8019aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b56e:	4b0b      	ldr	r3, [pc, #44]	; (801b59c <prvInitialiseTaskLists+0x78>)
 801b570:	4a05      	ldr	r2, [pc, #20]	; (801b588 <prvInitialiseTaskLists+0x64>)
 801b572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b574:	4b0a      	ldr	r3, [pc, #40]	; (801b5a0 <prvInitialiseTaskLists+0x7c>)
 801b576:	4a05      	ldr	r2, [pc, #20]	; (801b58c <prvInitialiseTaskLists+0x68>)
 801b578:	601a      	str	r2, [r3, #0]
}
 801b57a:	bf00      	nop
 801b57c:	3708      	adds	r7, #8
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}
 801b582:	bf00      	nop
 801b584:	24009ebc 	.word	0x24009ebc
 801b588:	2400a31c 	.word	0x2400a31c
 801b58c:	2400a330 	.word	0x2400a330
 801b590:	2400a34c 	.word	0x2400a34c
 801b594:	2400a360 	.word	0x2400a360
 801b598:	2400a378 	.word	0x2400a378
 801b59c:	2400a344 	.word	0x2400a344
 801b5a0:	2400a348 	.word	0x2400a348

0801b5a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b082      	sub	sp, #8
 801b5a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b5aa:	e019      	b.n	801b5e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b5ac:	f000 fed2 	bl	801c354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5b0:	4b10      	ldr	r3, [pc, #64]	; (801b5f4 <prvCheckTasksWaitingTermination+0x50>)
 801b5b2:	68db      	ldr	r3, [r3, #12]
 801b5b4:	68db      	ldr	r3, [r3, #12]
 801b5b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	3304      	adds	r3, #4
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7fe fb1f 	bl	8019c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b5c2:	4b0d      	ldr	r3, [pc, #52]	; (801b5f8 <prvCheckTasksWaitingTermination+0x54>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	3b01      	subs	r3, #1
 801b5c8:	4a0b      	ldr	r2, [pc, #44]	; (801b5f8 <prvCheckTasksWaitingTermination+0x54>)
 801b5ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b5cc:	4b0b      	ldr	r3, [pc, #44]	; (801b5fc <prvCheckTasksWaitingTermination+0x58>)
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	3b01      	subs	r3, #1
 801b5d2:	4a0a      	ldr	r2, [pc, #40]	; (801b5fc <prvCheckTasksWaitingTermination+0x58>)
 801b5d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b5d6:	f000 feed 	bl	801c3b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b5da:	6878      	ldr	r0, [r7, #4]
 801b5dc:	f000 f810 	bl	801b600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b5e0:	4b06      	ldr	r3, [pc, #24]	; (801b5fc <prvCheckTasksWaitingTermination+0x58>)
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d1e1      	bne.n	801b5ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b5e8:	bf00      	nop
 801b5ea:	bf00      	nop
 801b5ec:	3708      	adds	r7, #8
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bd80      	pop	{r7, pc}
 801b5f2:	bf00      	nop
 801b5f4:	2400a360 	.word	0x2400a360
 801b5f8:	2400a38c 	.word	0x2400a38c
 801b5fc:	2400a374 	.word	0x2400a374

0801b600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b600:	b580      	push	{r7, lr}
 801b602:	b084      	sub	sp, #16
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d108      	bne.n	801b624 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b616:	4618      	mov	r0, r3
 801b618:	f001 f88a 	bl	801c730 <vPortFree>
				vPortFree( pxTCB );
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f001 f887 	bl	801c730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b622:	e018      	b.n	801b656 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b62a:	2b01      	cmp	r3, #1
 801b62c:	d103      	bne.n	801b636 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b62e:	6878      	ldr	r0, [r7, #4]
 801b630:	f001 f87e 	bl	801c730 <vPortFree>
	}
 801b634:	e00f      	b.n	801b656 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b63c:	2b02      	cmp	r3, #2
 801b63e:	d00a      	beq.n	801b656 <prvDeleteTCB+0x56>
	__asm volatile
 801b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b644:	f383 8811 	msr	BASEPRI, r3
 801b648:	f3bf 8f6f 	isb	sy
 801b64c:	f3bf 8f4f 	dsb	sy
 801b650:	60fb      	str	r3, [r7, #12]
}
 801b652:	bf00      	nop
 801b654:	e7fe      	b.n	801b654 <prvDeleteTCB+0x54>
	}
 801b656:	bf00      	nop
 801b658:	3710      	adds	r7, #16
 801b65a:	46bd      	mov	sp, r7
 801b65c:	bd80      	pop	{r7, pc}
	...

0801b660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b660:	b480      	push	{r7}
 801b662:	b083      	sub	sp, #12
 801b664:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b666:	4b0c      	ldr	r3, [pc, #48]	; (801b698 <prvResetNextTaskUnblockTime+0x38>)
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d104      	bne.n	801b67a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b670:	4b0a      	ldr	r3, [pc, #40]	; (801b69c <prvResetNextTaskUnblockTime+0x3c>)
 801b672:	f04f 32ff 	mov.w	r2, #4294967295
 801b676:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b678:	e008      	b.n	801b68c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b67a:	4b07      	ldr	r3, [pc, #28]	; (801b698 <prvResetNextTaskUnblockTime+0x38>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	68db      	ldr	r3, [r3, #12]
 801b680:	68db      	ldr	r3, [r3, #12]
 801b682:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	685b      	ldr	r3, [r3, #4]
 801b688:	4a04      	ldr	r2, [pc, #16]	; (801b69c <prvResetNextTaskUnblockTime+0x3c>)
 801b68a:	6013      	str	r3, [r2, #0]
}
 801b68c:	bf00      	nop
 801b68e:	370c      	adds	r7, #12
 801b690:	46bd      	mov	sp, r7
 801b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b696:	4770      	bx	lr
 801b698:	2400a344 	.word	0x2400a344
 801b69c:	2400a3ac 	.word	0x2400a3ac

0801b6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b083      	sub	sp, #12
 801b6a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b6a6:	4b0b      	ldr	r3, [pc, #44]	; (801b6d4 <xTaskGetSchedulerState+0x34>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d102      	bne.n	801b6b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	607b      	str	r3, [r7, #4]
 801b6b2:	e008      	b.n	801b6c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b6b4:	4b08      	ldr	r3, [pc, #32]	; (801b6d8 <xTaskGetSchedulerState+0x38>)
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d102      	bne.n	801b6c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b6bc:	2302      	movs	r3, #2
 801b6be:	607b      	str	r3, [r7, #4]
 801b6c0:	e001      	b.n	801b6c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b6c6:	687b      	ldr	r3, [r7, #4]
	}
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	370c      	adds	r7, #12
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d2:	4770      	bx	lr
 801b6d4:	2400a398 	.word	0x2400a398
 801b6d8:	2400a3b4 	.word	0x2400a3b4

0801b6dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b084      	sub	sp, #16
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d051      	beq.n	801b796 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6f6:	4b2a      	ldr	r3, [pc, #168]	; (801b7a0 <xTaskPriorityInherit+0xc4>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6fc:	429a      	cmp	r2, r3
 801b6fe:	d241      	bcs.n	801b784 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	699b      	ldr	r3, [r3, #24]
 801b704:	2b00      	cmp	r3, #0
 801b706:	db06      	blt.n	801b716 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b708:	4b25      	ldr	r3, [pc, #148]	; (801b7a0 <xTaskPriorityInherit+0xc4>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b70e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	6959      	ldr	r1, [r3, #20]
 801b71a:	68bb      	ldr	r3, [r7, #8]
 801b71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b71e:	4613      	mov	r3, r2
 801b720:	009b      	lsls	r3, r3, #2
 801b722:	4413      	add	r3, r2
 801b724:	009b      	lsls	r3, r3, #2
 801b726:	4a1f      	ldr	r2, [pc, #124]	; (801b7a4 <xTaskPriorityInherit+0xc8>)
 801b728:	4413      	add	r3, r2
 801b72a:	4299      	cmp	r1, r3
 801b72c:	d122      	bne.n	801b774 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	3304      	adds	r3, #4
 801b732:	4618      	mov	r0, r3
 801b734:	f7fe fa64 	bl	8019c00 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b738:	4b19      	ldr	r3, [pc, #100]	; (801b7a0 <xTaskPriorityInherit+0xc4>)
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b746:	4b18      	ldr	r3, [pc, #96]	; (801b7a8 <xTaskPriorityInherit+0xcc>)
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d903      	bls.n	801b756 <xTaskPriorityInherit+0x7a>
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b752:	4a15      	ldr	r2, [pc, #84]	; (801b7a8 <xTaskPriorityInherit+0xcc>)
 801b754:	6013      	str	r3, [r2, #0]
 801b756:	68bb      	ldr	r3, [r7, #8]
 801b758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b75a:	4613      	mov	r3, r2
 801b75c:	009b      	lsls	r3, r3, #2
 801b75e:	4413      	add	r3, r2
 801b760:	009b      	lsls	r3, r3, #2
 801b762:	4a10      	ldr	r2, [pc, #64]	; (801b7a4 <xTaskPriorityInherit+0xc8>)
 801b764:	441a      	add	r2, r3
 801b766:	68bb      	ldr	r3, [r7, #8]
 801b768:	3304      	adds	r3, #4
 801b76a:	4619      	mov	r1, r3
 801b76c:	4610      	mov	r0, r2
 801b76e:	f7fe f9ea 	bl	8019b46 <vListInsertEnd>
 801b772:	e004      	b.n	801b77e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b774:	4b0a      	ldr	r3, [pc, #40]	; (801b7a0 <xTaskPriorityInherit+0xc4>)
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b77a:	68bb      	ldr	r3, [r7, #8]
 801b77c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b77e:	2301      	movs	r3, #1
 801b780:	60fb      	str	r3, [r7, #12]
 801b782:	e008      	b.n	801b796 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b788:	4b05      	ldr	r3, [pc, #20]	; (801b7a0 <xTaskPriorityInherit+0xc4>)
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b78e:	429a      	cmp	r2, r3
 801b790:	d201      	bcs.n	801b796 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b792:	2301      	movs	r3, #1
 801b794:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b796:	68fb      	ldr	r3, [r7, #12]
	}
 801b798:	4618      	mov	r0, r3
 801b79a:	3710      	adds	r7, #16
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	24009eb8 	.word	0x24009eb8
 801b7a4:	24009ebc 	.word	0x24009ebc
 801b7a8:	2400a394 	.word	0x2400a394

0801b7ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b086      	sub	sp, #24
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d056      	beq.n	801b870 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b7c2:	4b2e      	ldr	r3, [pc, #184]	; (801b87c <xTaskPriorityDisinherit+0xd0>)
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	693a      	ldr	r2, [r7, #16]
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	d00a      	beq.n	801b7e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7d0:	f383 8811 	msr	BASEPRI, r3
 801b7d4:	f3bf 8f6f 	isb	sy
 801b7d8:	f3bf 8f4f 	dsb	sy
 801b7dc:	60fb      	str	r3, [r7, #12]
}
 801b7de:	bf00      	nop
 801b7e0:	e7fe      	b.n	801b7e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b7e2:	693b      	ldr	r3, [r7, #16]
 801b7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d10a      	bne.n	801b800 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7ee:	f383 8811 	msr	BASEPRI, r3
 801b7f2:	f3bf 8f6f 	isb	sy
 801b7f6:	f3bf 8f4f 	dsb	sy
 801b7fa:	60bb      	str	r3, [r7, #8]
}
 801b7fc:	bf00      	nop
 801b7fe:	e7fe      	b.n	801b7fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b804:	1e5a      	subs	r2, r3, #1
 801b806:	693b      	ldr	r3, [r7, #16]
 801b808:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b80a:	693b      	ldr	r3, [r7, #16]
 801b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b80e:	693b      	ldr	r3, [r7, #16]
 801b810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b812:	429a      	cmp	r2, r3
 801b814:	d02c      	beq.n	801b870 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d128      	bne.n	801b870 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	3304      	adds	r3, #4
 801b822:	4618      	mov	r0, r3
 801b824:	f7fe f9ec 	bl	8019c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b828:	693b      	ldr	r3, [r7, #16]
 801b82a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b82c:	693b      	ldr	r3, [r7, #16]
 801b82e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b830:	693b      	ldr	r3, [r7, #16]
 801b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b834:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b840:	4b0f      	ldr	r3, [pc, #60]	; (801b880 <xTaskPriorityDisinherit+0xd4>)
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	429a      	cmp	r2, r3
 801b846:	d903      	bls.n	801b850 <xTaskPriorityDisinherit+0xa4>
 801b848:	693b      	ldr	r3, [r7, #16]
 801b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b84c:	4a0c      	ldr	r2, [pc, #48]	; (801b880 <xTaskPriorityDisinherit+0xd4>)
 801b84e:	6013      	str	r3, [r2, #0]
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b854:	4613      	mov	r3, r2
 801b856:	009b      	lsls	r3, r3, #2
 801b858:	4413      	add	r3, r2
 801b85a:	009b      	lsls	r3, r3, #2
 801b85c:	4a09      	ldr	r2, [pc, #36]	; (801b884 <xTaskPriorityDisinherit+0xd8>)
 801b85e:	441a      	add	r2, r3
 801b860:	693b      	ldr	r3, [r7, #16]
 801b862:	3304      	adds	r3, #4
 801b864:	4619      	mov	r1, r3
 801b866:	4610      	mov	r0, r2
 801b868:	f7fe f96d 	bl	8019b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b86c:	2301      	movs	r3, #1
 801b86e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b870:	697b      	ldr	r3, [r7, #20]
	}
 801b872:	4618      	mov	r0, r3
 801b874:	3718      	adds	r7, #24
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	24009eb8 	.word	0x24009eb8
 801b880:	2400a394 	.word	0x2400a394
 801b884:	24009ebc 	.word	0x24009ebc

0801b888 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b088      	sub	sp, #32
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
 801b890:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b896:	2301      	movs	r3, #1
 801b898:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d06a      	beq.n	801b976 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b8a0:	69bb      	ldr	r3, [r7, #24]
 801b8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d10a      	bne.n	801b8be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8ac:	f383 8811 	msr	BASEPRI, r3
 801b8b0:	f3bf 8f6f 	isb	sy
 801b8b4:	f3bf 8f4f 	dsb	sy
 801b8b8:	60fb      	str	r3, [r7, #12]
}
 801b8ba:	bf00      	nop
 801b8bc:	e7fe      	b.n	801b8bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b8be:	69bb      	ldr	r3, [r7, #24]
 801b8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8c2:	683a      	ldr	r2, [r7, #0]
 801b8c4:	429a      	cmp	r2, r3
 801b8c6:	d902      	bls.n	801b8ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b8c8:	683b      	ldr	r3, [r7, #0]
 801b8ca:	61fb      	str	r3, [r7, #28]
 801b8cc:	e002      	b.n	801b8d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b8ce:	69bb      	ldr	r3, [r7, #24]
 801b8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b8d4:	69bb      	ldr	r3, [r7, #24]
 801b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8d8:	69fa      	ldr	r2, [r7, #28]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d04b      	beq.n	801b976 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b8de:	69bb      	ldr	r3, [r7, #24]
 801b8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b8e2:	697a      	ldr	r2, [r7, #20]
 801b8e4:	429a      	cmp	r2, r3
 801b8e6:	d146      	bne.n	801b976 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b8e8:	4b25      	ldr	r3, [pc, #148]	; (801b980 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	69ba      	ldr	r2, [r7, #24]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d10a      	bne.n	801b908 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8f6:	f383 8811 	msr	BASEPRI, r3
 801b8fa:	f3bf 8f6f 	isb	sy
 801b8fe:	f3bf 8f4f 	dsb	sy
 801b902:	60bb      	str	r3, [r7, #8]
}
 801b904:	bf00      	nop
 801b906:	e7fe      	b.n	801b906 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b908:	69bb      	ldr	r3, [r7, #24]
 801b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b90c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b90e:	69bb      	ldr	r3, [r7, #24]
 801b910:	69fa      	ldr	r2, [r7, #28]
 801b912:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b914:	69bb      	ldr	r3, [r7, #24]
 801b916:	699b      	ldr	r3, [r3, #24]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	db04      	blt.n	801b926 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b91c:	69fb      	ldr	r3, [r7, #28]
 801b91e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b922:	69bb      	ldr	r3, [r7, #24]
 801b924:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	6959      	ldr	r1, [r3, #20]
 801b92a:	693a      	ldr	r2, [r7, #16]
 801b92c:	4613      	mov	r3, r2
 801b92e:	009b      	lsls	r3, r3, #2
 801b930:	4413      	add	r3, r2
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	4a13      	ldr	r2, [pc, #76]	; (801b984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b936:	4413      	add	r3, r2
 801b938:	4299      	cmp	r1, r3
 801b93a:	d11c      	bne.n	801b976 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b93c:	69bb      	ldr	r3, [r7, #24]
 801b93e:	3304      	adds	r3, #4
 801b940:	4618      	mov	r0, r3
 801b942:	f7fe f95d 	bl	8019c00 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b946:	69bb      	ldr	r3, [r7, #24]
 801b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b94a:	4b0f      	ldr	r3, [pc, #60]	; (801b988 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d903      	bls.n	801b95a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b956:	4a0c      	ldr	r2, [pc, #48]	; (801b988 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b958:	6013      	str	r3, [r2, #0]
 801b95a:	69bb      	ldr	r3, [r7, #24]
 801b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b95e:	4613      	mov	r3, r2
 801b960:	009b      	lsls	r3, r3, #2
 801b962:	4413      	add	r3, r2
 801b964:	009b      	lsls	r3, r3, #2
 801b966:	4a07      	ldr	r2, [pc, #28]	; (801b984 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b968:	441a      	add	r2, r3
 801b96a:	69bb      	ldr	r3, [r7, #24]
 801b96c:	3304      	adds	r3, #4
 801b96e:	4619      	mov	r1, r3
 801b970:	4610      	mov	r0, r2
 801b972:	f7fe f8e8 	bl	8019b46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b976:	bf00      	nop
 801b978:	3720      	adds	r7, #32
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	24009eb8 	.word	0x24009eb8
 801b984:	24009ebc 	.word	0x24009ebc
 801b988:	2400a394 	.word	0x2400a394

0801b98c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b98c:	b480      	push	{r7}
 801b98e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b990:	4b07      	ldr	r3, [pc, #28]	; (801b9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d004      	beq.n	801b9a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b998:	4b05      	ldr	r3, [pc, #20]	; (801b9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b99e:	3201      	adds	r2, #1
 801b9a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801b9a2:	4b03      	ldr	r3, [pc, #12]	; (801b9b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
	}
 801b9a6:	4618      	mov	r0, r3
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ae:	4770      	bx	lr
 801b9b0:	24009eb8 	.word	0x24009eb8

0801b9b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b084      	sub	sp, #16
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
 801b9bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b9be:	4b21      	ldr	r3, [pc, #132]	; (801ba44 <prvAddCurrentTaskToDelayedList+0x90>)
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b9c4:	4b20      	ldr	r3, [pc, #128]	; (801ba48 <prvAddCurrentTaskToDelayedList+0x94>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	3304      	adds	r3, #4
 801b9ca:	4618      	mov	r0, r3
 801b9cc:	f7fe f918 	bl	8019c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9d6:	d10a      	bne.n	801b9ee <prvAddCurrentTaskToDelayedList+0x3a>
 801b9d8:	683b      	ldr	r3, [r7, #0]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d007      	beq.n	801b9ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b9de:	4b1a      	ldr	r3, [pc, #104]	; (801ba48 <prvAddCurrentTaskToDelayedList+0x94>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	3304      	adds	r3, #4
 801b9e4:	4619      	mov	r1, r3
 801b9e6:	4819      	ldr	r0, [pc, #100]	; (801ba4c <prvAddCurrentTaskToDelayedList+0x98>)
 801b9e8:	f7fe f8ad 	bl	8019b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b9ec:	e026      	b.n	801ba3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b9ee:	68fa      	ldr	r2, [r7, #12]
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	4413      	add	r3, r2
 801b9f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b9f6:	4b14      	ldr	r3, [pc, #80]	; (801ba48 <prvAddCurrentTaskToDelayedList+0x94>)
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	68ba      	ldr	r2, [r7, #8]
 801b9fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b9fe:	68ba      	ldr	r2, [r7, #8]
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d209      	bcs.n	801ba1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba06:	4b12      	ldr	r3, [pc, #72]	; (801ba50 <prvAddCurrentTaskToDelayedList+0x9c>)
 801ba08:	681a      	ldr	r2, [r3, #0]
 801ba0a:	4b0f      	ldr	r3, [pc, #60]	; (801ba48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	3304      	adds	r3, #4
 801ba10:	4619      	mov	r1, r3
 801ba12:	4610      	mov	r0, r2
 801ba14:	f7fe f8bb 	bl	8019b8e <vListInsert>
}
 801ba18:	e010      	b.n	801ba3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ba1a:	4b0e      	ldr	r3, [pc, #56]	; (801ba54 <prvAddCurrentTaskToDelayedList+0xa0>)
 801ba1c:	681a      	ldr	r2, [r3, #0]
 801ba1e:	4b0a      	ldr	r3, [pc, #40]	; (801ba48 <prvAddCurrentTaskToDelayedList+0x94>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	3304      	adds	r3, #4
 801ba24:	4619      	mov	r1, r3
 801ba26:	4610      	mov	r0, r2
 801ba28:	f7fe f8b1 	bl	8019b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ba2c:	4b0a      	ldr	r3, [pc, #40]	; (801ba58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	68ba      	ldr	r2, [r7, #8]
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d202      	bcs.n	801ba3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801ba36:	4a08      	ldr	r2, [pc, #32]	; (801ba58 <prvAddCurrentTaskToDelayedList+0xa4>)
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	6013      	str	r3, [r2, #0]
}
 801ba3c:	bf00      	nop
 801ba3e:	3710      	adds	r7, #16
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}
 801ba44:	2400a390 	.word	0x2400a390
 801ba48:	24009eb8 	.word	0x24009eb8
 801ba4c:	2400a378 	.word	0x2400a378
 801ba50:	2400a348 	.word	0x2400a348
 801ba54:	2400a344 	.word	0x2400a344
 801ba58:	2400a3ac 	.word	0x2400a3ac

0801ba5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b08a      	sub	sp, #40	; 0x28
 801ba60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ba62:	2300      	movs	r3, #0
 801ba64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ba66:	f000 fb07 	bl	801c078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ba6a:	4b1c      	ldr	r3, [pc, #112]	; (801badc <xTimerCreateTimerTask+0x80>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d021      	beq.n	801bab6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ba72:	2300      	movs	r3, #0
 801ba74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ba76:	2300      	movs	r3, #0
 801ba78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ba7a:	1d3a      	adds	r2, r7, #4
 801ba7c:	f107 0108 	add.w	r1, r7, #8
 801ba80:	f107 030c 	add.w	r3, r7, #12
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7fe f817 	bl	8019ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ba8a:	6879      	ldr	r1, [r7, #4]
 801ba8c:	68bb      	ldr	r3, [r7, #8]
 801ba8e:	68fa      	ldr	r2, [r7, #12]
 801ba90:	9202      	str	r2, [sp, #8]
 801ba92:	9301      	str	r3, [sp, #4]
 801ba94:	2302      	movs	r3, #2
 801ba96:	9300      	str	r3, [sp, #0]
 801ba98:	2300      	movs	r3, #0
 801ba9a:	460a      	mov	r2, r1
 801ba9c:	4910      	ldr	r1, [pc, #64]	; (801bae0 <xTimerCreateTimerTask+0x84>)
 801ba9e:	4811      	ldr	r0, [pc, #68]	; (801bae4 <xTimerCreateTimerTask+0x88>)
 801baa0:	f7ff f828 	bl	801aaf4 <xTaskCreateStatic>
 801baa4:	4603      	mov	r3, r0
 801baa6:	4a10      	ldr	r2, [pc, #64]	; (801bae8 <xTimerCreateTimerTask+0x8c>)
 801baa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801baaa:	4b0f      	ldr	r3, [pc, #60]	; (801bae8 <xTimerCreateTimerTask+0x8c>)
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d001      	beq.n	801bab6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bab2:	2301      	movs	r3, #1
 801bab4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d10a      	bne.n	801bad2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bac0:	f383 8811 	msr	BASEPRI, r3
 801bac4:	f3bf 8f6f 	isb	sy
 801bac8:	f3bf 8f4f 	dsb	sy
 801bacc:	613b      	str	r3, [r7, #16]
}
 801bace:	bf00      	nop
 801bad0:	e7fe      	b.n	801bad0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bad2:	697b      	ldr	r3, [r7, #20]
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	3718      	adds	r7, #24
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}
 801badc:	2400a3e8 	.word	0x2400a3e8
 801bae0:	0802035c 	.word	0x0802035c
 801bae4:	0801bc21 	.word	0x0801bc21
 801bae8:	2400a3ec 	.word	0x2400a3ec

0801baec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801baec:	b580      	push	{r7, lr}
 801baee:	b08a      	sub	sp, #40	; 0x28
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	60f8      	str	r0, [r7, #12]
 801baf4:	60b9      	str	r1, [r7, #8]
 801baf6:	607a      	str	r2, [r7, #4]
 801baf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bafa:	2300      	movs	r3, #0
 801bafc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d10a      	bne.n	801bb1a <xTimerGenericCommand+0x2e>
	__asm volatile
 801bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb08:	f383 8811 	msr	BASEPRI, r3
 801bb0c:	f3bf 8f6f 	isb	sy
 801bb10:	f3bf 8f4f 	dsb	sy
 801bb14:	623b      	str	r3, [r7, #32]
}
 801bb16:	bf00      	nop
 801bb18:	e7fe      	b.n	801bb18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bb1a:	4b1a      	ldr	r3, [pc, #104]	; (801bb84 <xTimerGenericCommand+0x98>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d02a      	beq.n	801bb78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bb22:	68bb      	ldr	r3, [r7, #8]
 801bb24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	2b05      	cmp	r3, #5
 801bb32:	dc18      	bgt.n	801bb66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bb34:	f7ff fdb4 	bl	801b6a0 <xTaskGetSchedulerState>
 801bb38:	4603      	mov	r3, r0
 801bb3a:	2b02      	cmp	r3, #2
 801bb3c:	d109      	bne.n	801bb52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bb3e:	4b11      	ldr	r3, [pc, #68]	; (801bb84 <xTimerGenericCommand+0x98>)
 801bb40:	6818      	ldr	r0, [r3, #0]
 801bb42:	f107 0110 	add.w	r1, r7, #16
 801bb46:	2300      	movs	r3, #0
 801bb48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb4a:	f7fe fa1d 	bl	8019f88 <xQueueGenericSend>
 801bb4e:	6278      	str	r0, [r7, #36]	; 0x24
 801bb50:	e012      	b.n	801bb78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bb52:	4b0c      	ldr	r3, [pc, #48]	; (801bb84 <xTimerGenericCommand+0x98>)
 801bb54:	6818      	ldr	r0, [r3, #0]
 801bb56:	f107 0110 	add.w	r1, r7, #16
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	2200      	movs	r2, #0
 801bb5e:	f7fe fa13 	bl	8019f88 <xQueueGenericSend>
 801bb62:	6278      	str	r0, [r7, #36]	; 0x24
 801bb64:	e008      	b.n	801bb78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bb66:	4b07      	ldr	r3, [pc, #28]	; (801bb84 <xTimerGenericCommand+0x98>)
 801bb68:	6818      	ldr	r0, [r3, #0]
 801bb6a:	f107 0110 	add.w	r1, r7, #16
 801bb6e:	2300      	movs	r3, #0
 801bb70:	683a      	ldr	r2, [r7, #0]
 801bb72:	f7fe faef 	bl	801a154 <xQueueGenericSendFromISR>
 801bb76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	3728      	adds	r7, #40	; 0x28
 801bb7e:	46bd      	mov	sp, r7
 801bb80:	bd80      	pop	{r7, pc}
 801bb82:	bf00      	nop
 801bb84:	2400a3e8 	.word	0x2400a3e8

0801bb88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b088      	sub	sp, #32
 801bb8c:	af02      	add	r7, sp, #8
 801bb8e:	6078      	str	r0, [r7, #4]
 801bb90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb92:	4b22      	ldr	r3, [pc, #136]	; (801bc1c <prvProcessExpiredTimer+0x94>)
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	68db      	ldr	r3, [r3, #12]
 801bb98:	68db      	ldr	r3, [r3, #12]
 801bb9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	3304      	adds	r3, #4
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7fe f82d 	bl	8019c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bbac:	f003 0304 	and.w	r3, r3, #4
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d022      	beq.n	801bbfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	699a      	ldr	r2, [r3, #24]
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	18d1      	adds	r1, r2, r3
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	683a      	ldr	r2, [r7, #0]
 801bbc0:	6978      	ldr	r0, [r7, #20]
 801bbc2:	f000 f8d1 	bl	801bd68 <prvInsertTimerInActiveList>
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d01f      	beq.n	801bc0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bbcc:	2300      	movs	r3, #0
 801bbce:	9300      	str	r3, [sp, #0]
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	687a      	ldr	r2, [r7, #4]
 801bbd4:	2100      	movs	r1, #0
 801bbd6:	6978      	ldr	r0, [r7, #20]
 801bbd8:	f7ff ff88 	bl	801baec <xTimerGenericCommand>
 801bbdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d113      	bne.n	801bc0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbe8:	f383 8811 	msr	BASEPRI, r3
 801bbec:	f3bf 8f6f 	isb	sy
 801bbf0:	f3bf 8f4f 	dsb	sy
 801bbf4:	60fb      	str	r3, [r7, #12]
}
 801bbf6:	bf00      	nop
 801bbf8:	e7fe      	b.n	801bbf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bbfa:	697b      	ldr	r3, [r7, #20]
 801bbfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bc00:	f023 0301 	bic.w	r3, r3, #1
 801bc04:	b2da      	uxtb	r2, r3
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	6a1b      	ldr	r3, [r3, #32]
 801bc10:	6978      	ldr	r0, [r7, #20]
 801bc12:	4798      	blx	r3
}
 801bc14:	bf00      	nop
 801bc16:	3718      	adds	r7, #24
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	bd80      	pop	{r7, pc}
 801bc1c:	2400a3e0 	.word	0x2400a3e0

0801bc20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b084      	sub	sp, #16
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bc28:	f107 0308 	add.w	r3, r7, #8
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	f000 f857 	bl	801bce0 <prvGetNextExpireTime>
 801bc32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	4619      	mov	r1, r3
 801bc38:	68f8      	ldr	r0, [r7, #12]
 801bc3a:	f000 f803 	bl	801bc44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bc3e:	f000 f8d5 	bl	801bdec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bc42:	e7f1      	b.n	801bc28 <prvTimerTask+0x8>

0801bc44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bc44:	b580      	push	{r7, lr}
 801bc46:	b084      	sub	sp, #16
 801bc48:	af00      	add	r7, sp, #0
 801bc4a:	6078      	str	r0, [r7, #4]
 801bc4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bc4e:	f7ff f97d 	bl	801af4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bc52:	f107 0308 	add.w	r3, r7, #8
 801bc56:	4618      	mov	r0, r3
 801bc58:	f000 f866 	bl	801bd28 <prvSampleTimeNow>
 801bc5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bc5e:	68bb      	ldr	r3, [r7, #8]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d130      	bne.n	801bcc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bc64:	683b      	ldr	r3, [r7, #0]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d10a      	bne.n	801bc80 <prvProcessTimerOrBlockTask+0x3c>
 801bc6a:	687a      	ldr	r2, [r7, #4]
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	429a      	cmp	r2, r3
 801bc70:	d806      	bhi.n	801bc80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bc72:	f7ff f979 	bl	801af68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bc76:	68f9      	ldr	r1, [r7, #12]
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	f7ff ff85 	bl	801bb88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bc7e:	e024      	b.n	801bcca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d008      	beq.n	801bc98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bc86:	4b13      	ldr	r3, [pc, #76]	; (801bcd4 <prvProcessTimerOrBlockTask+0x90>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d101      	bne.n	801bc94 <prvProcessTimerOrBlockTask+0x50>
 801bc90:	2301      	movs	r3, #1
 801bc92:	e000      	b.n	801bc96 <prvProcessTimerOrBlockTask+0x52>
 801bc94:	2300      	movs	r3, #0
 801bc96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bc98:	4b0f      	ldr	r3, [pc, #60]	; (801bcd8 <prvProcessTimerOrBlockTask+0x94>)
 801bc9a:	6818      	ldr	r0, [r3, #0]
 801bc9c:	687a      	ldr	r2, [r7, #4]
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	1ad3      	subs	r3, r2, r3
 801bca2:	683a      	ldr	r2, [r7, #0]
 801bca4:	4619      	mov	r1, r3
 801bca6:	f7fe fef1 	bl	801aa8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bcaa:	f7ff f95d 	bl	801af68 <xTaskResumeAll>
 801bcae:	4603      	mov	r3, r0
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d10a      	bne.n	801bcca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bcb4:	4b09      	ldr	r3, [pc, #36]	; (801bcdc <prvProcessTimerOrBlockTask+0x98>)
 801bcb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bcba:	601a      	str	r2, [r3, #0]
 801bcbc:	f3bf 8f4f 	dsb	sy
 801bcc0:	f3bf 8f6f 	isb	sy
}
 801bcc4:	e001      	b.n	801bcca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bcc6:	f7ff f94f 	bl	801af68 <xTaskResumeAll>
}
 801bcca:	bf00      	nop
 801bccc:	3710      	adds	r7, #16
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bd80      	pop	{r7, pc}
 801bcd2:	bf00      	nop
 801bcd4:	2400a3e4 	.word	0x2400a3e4
 801bcd8:	2400a3e8 	.word	0x2400a3e8
 801bcdc:	e000ed04 	.word	0xe000ed04

0801bce0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bce0:	b480      	push	{r7}
 801bce2:	b085      	sub	sp, #20
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bce8:	4b0e      	ldr	r3, [pc, #56]	; (801bd24 <prvGetNextExpireTime+0x44>)
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d101      	bne.n	801bcf6 <prvGetNextExpireTime+0x16>
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	e000      	b.n	801bcf8 <prvGetNextExpireTime+0x18>
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d105      	bne.n	801bd10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bd04:	4b07      	ldr	r3, [pc, #28]	; (801bd24 <prvGetNextExpireTime+0x44>)
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	68db      	ldr	r3, [r3, #12]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	60fb      	str	r3, [r7, #12]
 801bd0e:	e001      	b.n	801bd14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bd10:	2300      	movs	r3, #0
 801bd12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bd14:	68fb      	ldr	r3, [r7, #12]
}
 801bd16:	4618      	mov	r0, r3
 801bd18:	3714      	adds	r7, #20
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd20:	4770      	bx	lr
 801bd22:	bf00      	nop
 801bd24:	2400a3e0 	.word	0x2400a3e0

0801bd28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b084      	sub	sp, #16
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bd30:	f7ff f9aa 	bl	801b088 <xTaskGetTickCount>
 801bd34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bd36:	4b0b      	ldr	r3, [pc, #44]	; (801bd64 <prvSampleTimeNow+0x3c>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	68fa      	ldr	r2, [r7, #12]
 801bd3c:	429a      	cmp	r2, r3
 801bd3e:	d205      	bcs.n	801bd4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bd40:	f000 f936 	bl	801bfb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	2201      	movs	r2, #1
 801bd48:	601a      	str	r2, [r3, #0]
 801bd4a:	e002      	b.n	801bd52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	2200      	movs	r2, #0
 801bd50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bd52:	4a04      	ldr	r2, [pc, #16]	; (801bd64 <prvSampleTimeNow+0x3c>)
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bd58:	68fb      	ldr	r3, [r7, #12]
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	3710      	adds	r7, #16
 801bd5e:	46bd      	mov	sp, r7
 801bd60:	bd80      	pop	{r7, pc}
 801bd62:	bf00      	nop
 801bd64:	2400a3f0 	.word	0x2400a3f0

0801bd68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b086      	sub	sp, #24
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	60f8      	str	r0, [r7, #12]
 801bd70:	60b9      	str	r1, [r7, #8]
 801bd72:	607a      	str	r2, [r7, #4]
 801bd74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bd76:	2300      	movs	r3, #0
 801bd78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	68ba      	ldr	r2, [r7, #8]
 801bd7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	68fa      	ldr	r2, [r7, #12]
 801bd84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bd86:	68ba      	ldr	r2, [r7, #8]
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	429a      	cmp	r2, r3
 801bd8c:	d812      	bhi.n	801bdb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bd8e:	687a      	ldr	r2, [r7, #4]
 801bd90:	683b      	ldr	r3, [r7, #0]
 801bd92:	1ad2      	subs	r2, r2, r3
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	699b      	ldr	r3, [r3, #24]
 801bd98:	429a      	cmp	r2, r3
 801bd9a:	d302      	bcc.n	801bda2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	617b      	str	r3, [r7, #20]
 801bda0:	e01b      	b.n	801bdda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801bda2:	4b10      	ldr	r3, [pc, #64]	; (801bde4 <prvInsertTimerInActiveList+0x7c>)
 801bda4:	681a      	ldr	r2, [r3, #0]
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	3304      	adds	r3, #4
 801bdaa:	4619      	mov	r1, r3
 801bdac:	4610      	mov	r0, r2
 801bdae:	f7fd feee 	bl	8019b8e <vListInsert>
 801bdb2:	e012      	b.n	801bdda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801bdb4:	687a      	ldr	r2, [r7, #4]
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d206      	bcs.n	801bdca <prvInsertTimerInActiveList+0x62>
 801bdbc:	68ba      	ldr	r2, [r7, #8]
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d302      	bcc.n	801bdca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	617b      	str	r3, [r7, #20]
 801bdc8:	e007      	b.n	801bdda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bdca:	4b07      	ldr	r3, [pc, #28]	; (801bde8 <prvInsertTimerInActiveList+0x80>)
 801bdcc:	681a      	ldr	r2, [r3, #0]
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	3304      	adds	r3, #4
 801bdd2:	4619      	mov	r1, r3
 801bdd4:	4610      	mov	r0, r2
 801bdd6:	f7fd feda 	bl	8019b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bdda:	697b      	ldr	r3, [r7, #20]
}
 801bddc:	4618      	mov	r0, r3
 801bdde:	3718      	adds	r7, #24
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}
 801bde4:	2400a3e4 	.word	0x2400a3e4
 801bde8:	2400a3e0 	.word	0x2400a3e0

0801bdec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b08e      	sub	sp, #56	; 0x38
 801bdf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bdf2:	e0ca      	b.n	801bf8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	da18      	bge.n	801be2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801bdfa:	1d3b      	adds	r3, r7, #4
 801bdfc:	3304      	adds	r3, #4
 801bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be02:	2b00      	cmp	r3, #0
 801be04:	d10a      	bne.n	801be1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 801be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be0a:	f383 8811 	msr	BASEPRI, r3
 801be0e:	f3bf 8f6f 	isb	sy
 801be12:	f3bf 8f4f 	dsb	sy
 801be16:	61fb      	str	r3, [r7, #28]
}
 801be18:	bf00      	nop
 801be1a:	e7fe      	b.n	801be1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be22:	6850      	ldr	r0, [r2, #4]
 801be24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be26:	6892      	ldr	r2, [r2, #8]
 801be28:	4611      	mov	r1, r2
 801be2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	f2c0 80ab 	blt.w	801bf8a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be3a:	695b      	ldr	r3, [r3, #20]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d004      	beq.n	801be4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be42:	3304      	adds	r3, #4
 801be44:	4618      	mov	r0, r3
 801be46:	f7fd fedb 	bl	8019c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801be4a:	463b      	mov	r3, r7
 801be4c:	4618      	mov	r0, r3
 801be4e:	f7ff ff6b 	bl	801bd28 <prvSampleTimeNow>
 801be52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	2b09      	cmp	r3, #9
 801be58:	f200 8096 	bhi.w	801bf88 <prvProcessReceivedCommands+0x19c>
 801be5c:	a201      	add	r2, pc, #4	; (adr r2, 801be64 <prvProcessReceivedCommands+0x78>)
 801be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be62:	bf00      	nop
 801be64:	0801be8d 	.word	0x0801be8d
 801be68:	0801be8d 	.word	0x0801be8d
 801be6c:	0801be8d 	.word	0x0801be8d
 801be70:	0801bf01 	.word	0x0801bf01
 801be74:	0801bf15 	.word	0x0801bf15
 801be78:	0801bf5f 	.word	0x0801bf5f
 801be7c:	0801be8d 	.word	0x0801be8d
 801be80:	0801be8d 	.word	0x0801be8d
 801be84:	0801bf01 	.word	0x0801bf01
 801be88:	0801bf15 	.word	0x0801bf15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be92:	f043 0301 	orr.w	r3, r3, #1
 801be96:	b2da      	uxtb	r2, r3
 801be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801be9e:	68ba      	ldr	r2, [r7, #8]
 801bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bea2:	699b      	ldr	r3, [r3, #24]
 801bea4:	18d1      	adds	r1, r2, r3
 801bea6:	68bb      	ldr	r3, [r7, #8]
 801bea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801beaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801beac:	f7ff ff5c 	bl	801bd68 <prvInsertTimerInActiveList>
 801beb0:	4603      	mov	r3, r0
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d069      	beq.n	801bf8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801beb8:	6a1b      	ldr	r3, [r3, #32]
 801beba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bec4:	f003 0304 	and.w	r3, r3, #4
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d05e      	beq.n	801bf8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801becc:	68ba      	ldr	r2, [r7, #8]
 801bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bed0:	699b      	ldr	r3, [r3, #24]
 801bed2:	441a      	add	r2, r3
 801bed4:	2300      	movs	r3, #0
 801bed6:	9300      	str	r3, [sp, #0]
 801bed8:	2300      	movs	r3, #0
 801beda:	2100      	movs	r1, #0
 801bedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bede:	f7ff fe05 	bl	801baec <xTimerGenericCommand>
 801bee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bee4:	6a3b      	ldr	r3, [r7, #32]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d14f      	bne.n	801bf8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beee:	f383 8811 	msr	BASEPRI, r3
 801bef2:	f3bf 8f6f 	isb	sy
 801bef6:	f3bf 8f4f 	dsb	sy
 801befa:	61bb      	str	r3, [r7, #24]
}
 801befc:	bf00      	nop
 801befe:	e7fe      	b.n	801befe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf06:	f023 0301 	bic.w	r3, r3, #1
 801bf0a:	b2da      	uxtb	r2, r3
 801bf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801bf12:	e03a      	b.n	801bf8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf1a:	f043 0301 	orr.w	r3, r3, #1
 801bf1e:	b2da      	uxtb	r2, r3
 801bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bf26:	68ba      	ldr	r2, [r7, #8]
 801bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf2e:	699b      	ldr	r3, [r3, #24]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d10a      	bne.n	801bf4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf38:	f383 8811 	msr	BASEPRI, r3
 801bf3c:	f3bf 8f6f 	isb	sy
 801bf40:	f3bf 8f4f 	dsb	sy
 801bf44:	617b      	str	r3, [r7, #20]
}
 801bf46:	bf00      	nop
 801bf48:	e7fe      	b.n	801bf48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf4c:	699a      	ldr	r2, [r3, #24]
 801bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf50:	18d1      	adds	r1, r2, r3
 801bf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf58:	f7ff ff06 	bl	801bd68 <prvInsertTimerInActiveList>
					break;
 801bf5c:	e015      	b.n	801bf8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf64:	f003 0302 	and.w	r3, r3, #2
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d103      	bne.n	801bf74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801bf6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf6e:	f000 fbdf 	bl	801c730 <vPortFree>
 801bf72:	e00a      	b.n	801bf8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf7a:	f023 0301 	bic.w	r3, r3, #1
 801bf7e:	b2da      	uxtb	r2, r3
 801bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801bf86:	e000      	b.n	801bf8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801bf88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bf8a:	4b08      	ldr	r3, [pc, #32]	; (801bfac <prvProcessReceivedCommands+0x1c0>)
 801bf8c:	681b      	ldr	r3, [r3, #0]
 801bf8e:	1d39      	adds	r1, r7, #4
 801bf90:	2200      	movs	r2, #0
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7fe fa06 	bl	801a3a4 <xQueueReceive>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	f47f af2a 	bne.w	801bdf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801bfa0:	bf00      	nop
 801bfa2:	bf00      	nop
 801bfa4:	3730      	adds	r7, #48	; 0x30
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	bd80      	pop	{r7, pc}
 801bfaa:	bf00      	nop
 801bfac:	2400a3e8 	.word	0x2400a3e8

0801bfb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801bfb0:	b580      	push	{r7, lr}
 801bfb2:	b088      	sub	sp, #32
 801bfb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bfb6:	e048      	b.n	801c04a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bfb8:	4b2d      	ldr	r3, [pc, #180]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	68db      	ldr	r3, [r3, #12]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bfc2:	4b2b      	ldr	r3, [pc, #172]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	68db      	ldr	r3, [r3, #12]
 801bfc8:	68db      	ldr	r3, [r3, #12]
 801bfca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	3304      	adds	r3, #4
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	f7fd fe15 	bl	8019c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	6a1b      	ldr	r3, [r3, #32]
 801bfda:	68f8      	ldr	r0, [r7, #12]
 801bfdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bfe4:	f003 0304 	and.w	r3, r3, #4
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d02e      	beq.n	801c04a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	699b      	ldr	r3, [r3, #24]
 801bff0:	693a      	ldr	r2, [r7, #16]
 801bff2:	4413      	add	r3, r2
 801bff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801bff6:	68ba      	ldr	r2, [r7, #8]
 801bff8:	693b      	ldr	r3, [r7, #16]
 801bffa:	429a      	cmp	r2, r3
 801bffc:	d90e      	bls.n	801c01c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	68ba      	ldr	r2, [r7, #8]
 801c002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	68fa      	ldr	r2, [r7, #12]
 801c008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c00a:	4b19      	ldr	r3, [pc, #100]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801c00c:	681a      	ldr	r2, [r3, #0]
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	3304      	adds	r3, #4
 801c012:	4619      	mov	r1, r3
 801c014:	4610      	mov	r0, r2
 801c016:	f7fd fdba 	bl	8019b8e <vListInsert>
 801c01a:	e016      	b.n	801c04a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c01c:	2300      	movs	r3, #0
 801c01e:	9300      	str	r3, [sp, #0]
 801c020:	2300      	movs	r3, #0
 801c022:	693a      	ldr	r2, [r7, #16]
 801c024:	2100      	movs	r1, #0
 801c026:	68f8      	ldr	r0, [r7, #12]
 801c028:	f7ff fd60 	bl	801baec <xTimerGenericCommand>
 801c02c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d10a      	bne.n	801c04a <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c038:	f383 8811 	msr	BASEPRI, r3
 801c03c:	f3bf 8f6f 	isb	sy
 801c040:	f3bf 8f4f 	dsb	sy
 801c044:	603b      	str	r3, [r7, #0]
}
 801c046:	bf00      	nop
 801c048:	e7fe      	b.n	801c048 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c04a:	4b09      	ldr	r3, [pc, #36]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d1b1      	bne.n	801bfb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c054:	4b06      	ldr	r3, [pc, #24]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c05a:	4b06      	ldr	r3, [pc, #24]	; (801c074 <prvSwitchTimerLists+0xc4>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	4a04      	ldr	r2, [pc, #16]	; (801c070 <prvSwitchTimerLists+0xc0>)
 801c060:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c062:	4a04      	ldr	r2, [pc, #16]	; (801c074 <prvSwitchTimerLists+0xc4>)
 801c064:	697b      	ldr	r3, [r7, #20]
 801c066:	6013      	str	r3, [r2, #0]
}
 801c068:	bf00      	nop
 801c06a:	3718      	adds	r7, #24
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}
 801c070:	2400a3e0 	.word	0x2400a3e0
 801c074:	2400a3e4 	.word	0x2400a3e4

0801c078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b082      	sub	sp, #8
 801c07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c07e:	f000 f969 	bl	801c354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c082:	4b15      	ldr	r3, [pc, #84]	; (801c0d8 <prvCheckForValidListAndQueue+0x60>)
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d120      	bne.n	801c0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c08a:	4814      	ldr	r0, [pc, #80]	; (801c0dc <prvCheckForValidListAndQueue+0x64>)
 801c08c:	f7fd fd2e 	bl	8019aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c090:	4813      	ldr	r0, [pc, #76]	; (801c0e0 <prvCheckForValidListAndQueue+0x68>)
 801c092:	f7fd fd2b 	bl	8019aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c096:	4b13      	ldr	r3, [pc, #76]	; (801c0e4 <prvCheckForValidListAndQueue+0x6c>)
 801c098:	4a10      	ldr	r2, [pc, #64]	; (801c0dc <prvCheckForValidListAndQueue+0x64>)
 801c09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c09c:	4b12      	ldr	r3, [pc, #72]	; (801c0e8 <prvCheckForValidListAndQueue+0x70>)
 801c09e:	4a10      	ldr	r2, [pc, #64]	; (801c0e0 <prvCheckForValidListAndQueue+0x68>)
 801c0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	9300      	str	r3, [sp, #0]
 801c0a6:	4b11      	ldr	r3, [pc, #68]	; (801c0ec <prvCheckForValidListAndQueue+0x74>)
 801c0a8:	4a11      	ldr	r2, [pc, #68]	; (801c0f0 <prvCheckForValidListAndQueue+0x78>)
 801c0aa:	2110      	movs	r1, #16
 801c0ac:	200a      	movs	r0, #10
 801c0ae:	f7fd fe2c 	bl	8019d0a <xQueueGenericCreateStatic>
 801c0b2:	4603      	mov	r3, r0
 801c0b4:	4a08      	ldr	r2, [pc, #32]	; (801c0d8 <prvCheckForValidListAndQueue+0x60>)
 801c0b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c0b8:	4b07      	ldr	r3, [pc, #28]	; (801c0d8 <prvCheckForValidListAndQueue+0x60>)
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d005      	beq.n	801c0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c0c0:	4b05      	ldr	r3, [pc, #20]	; (801c0d8 <prvCheckForValidListAndQueue+0x60>)
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	490b      	ldr	r1, [pc, #44]	; (801c0f4 <prvCheckForValidListAndQueue+0x7c>)
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f7fe fc8c 	bl	801a9e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c0cc:	f000 f972 	bl	801c3b4 <vPortExitCritical>
}
 801c0d0:	bf00      	nop
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	bd80      	pop	{r7, pc}
 801c0d6:	bf00      	nop
 801c0d8:	2400a3e8 	.word	0x2400a3e8
 801c0dc:	2400a3b8 	.word	0x2400a3b8
 801c0e0:	2400a3cc 	.word	0x2400a3cc
 801c0e4:	2400a3e0 	.word	0x2400a3e0
 801c0e8:	2400a3e4 	.word	0x2400a3e4
 801c0ec:	2400a494 	.word	0x2400a494
 801c0f0:	2400a3f4 	.word	0x2400a3f4
 801c0f4:	08020364 	.word	0x08020364

0801c0f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c0f8:	b480      	push	{r7}
 801c0fa:	b085      	sub	sp, #20
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	60f8      	str	r0, [r7, #12]
 801c100:	60b9      	str	r1, [r7, #8]
 801c102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	3b04      	subs	r3, #4
 801c108:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	3b04      	subs	r3, #4
 801c116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	f023 0201 	bic.w	r2, r3, #1
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	3b04      	subs	r3, #4
 801c126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c128:	4a0c      	ldr	r2, [pc, #48]	; (801c15c <pxPortInitialiseStack+0x64>)
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	3b14      	subs	r3, #20
 801c132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c134:	687a      	ldr	r2, [r7, #4]
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	3b04      	subs	r3, #4
 801c13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	f06f 0202 	mvn.w	r2, #2
 801c146:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	3b20      	subs	r3, #32
 801c14c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c14e:	68fb      	ldr	r3, [r7, #12]
}
 801c150:	4618      	mov	r0, r3
 801c152:	3714      	adds	r7, #20
 801c154:	46bd      	mov	sp, r7
 801c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15a:	4770      	bx	lr
 801c15c:	0801c161 	.word	0x0801c161

0801c160 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c160:	b480      	push	{r7}
 801c162:	b085      	sub	sp, #20
 801c164:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c166:	2300      	movs	r3, #0
 801c168:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c16a:	4b12      	ldr	r3, [pc, #72]	; (801c1b4 <prvTaskExitError+0x54>)
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c172:	d00a      	beq.n	801c18a <prvTaskExitError+0x2a>
	__asm volatile
 801c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c178:	f383 8811 	msr	BASEPRI, r3
 801c17c:	f3bf 8f6f 	isb	sy
 801c180:	f3bf 8f4f 	dsb	sy
 801c184:	60fb      	str	r3, [r7, #12]
}
 801c186:	bf00      	nop
 801c188:	e7fe      	b.n	801c188 <prvTaskExitError+0x28>
	__asm volatile
 801c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c18e:	f383 8811 	msr	BASEPRI, r3
 801c192:	f3bf 8f6f 	isb	sy
 801c196:	f3bf 8f4f 	dsb	sy
 801c19a:	60bb      	str	r3, [r7, #8]
}
 801c19c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c19e:	bf00      	nop
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d0fc      	beq.n	801c1a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c1a6:	bf00      	nop
 801c1a8:	bf00      	nop
 801c1aa:	3714      	adds	r7, #20
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b2:	4770      	bx	lr
 801c1b4:	24000010 	.word	0x24000010
	...

0801c1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c1c0:	4b07      	ldr	r3, [pc, #28]	; (801c1e0 <pxCurrentTCBConst2>)
 801c1c2:	6819      	ldr	r1, [r3, #0]
 801c1c4:	6808      	ldr	r0, [r1, #0]
 801c1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1ca:	f380 8809 	msr	PSP, r0
 801c1ce:	f3bf 8f6f 	isb	sy
 801c1d2:	f04f 0000 	mov.w	r0, #0
 801c1d6:	f380 8811 	msr	BASEPRI, r0
 801c1da:	4770      	bx	lr
 801c1dc:	f3af 8000 	nop.w

0801c1e0 <pxCurrentTCBConst2>:
 801c1e0:	24009eb8 	.word	0x24009eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c1e4:	bf00      	nop
 801c1e6:	bf00      	nop

0801c1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c1e8:	4808      	ldr	r0, [pc, #32]	; (801c20c <prvPortStartFirstTask+0x24>)
 801c1ea:	6800      	ldr	r0, [r0, #0]
 801c1ec:	6800      	ldr	r0, [r0, #0]
 801c1ee:	f380 8808 	msr	MSP, r0
 801c1f2:	f04f 0000 	mov.w	r0, #0
 801c1f6:	f380 8814 	msr	CONTROL, r0
 801c1fa:	b662      	cpsie	i
 801c1fc:	b661      	cpsie	f
 801c1fe:	f3bf 8f4f 	dsb	sy
 801c202:	f3bf 8f6f 	isb	sy
 801c206:	df00      	svc	0
 801c208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c20a:	bf00      	nop
 801c20c:	e000ed08 	.word	0xe000ed08

0801c210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b086      	sub	sp, #24
 801c214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c216:	4b46      	ldr	r3, [pc, #280]	; (801c330 <xPortStartScheduler+0x120>)
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	4a46      	ldr	r2, [pc, #280]	; (801c334 <xPortStartScheduler+0x124>)
 801c21c:	4293      	cmp	r3, r2
 801c21e:	d10a      	bne.n	801c236 <xPortStartScheduler+0x26>
	__asm volatile
 801c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c224:	f383 8811 	msr	BASEPRI, r3
 801c228:	f3bf 8f6f 	isb	sy
 801c22c:	f3bf 8f4f 	dsb	sy
 801c230:	613b      	str	r3, [r7, #16]
}
 801c232:	bf00      	nop
 801c234:	e7fe      	b.n	801c234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c236:	4b3e      	ldr	r3, [pc, #248]	; (801c330 <xPortStartScheduler+0x120>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	4a3f      	ldr	r2, [pc, #252]	; (801c338 <xPortStartScheduler+0x128>)
 801c23c:	4293      	cmp	r3, r2
 801c23e:	d10a      	bne.n	801c256 <xPortStartScheduler+0x46>
	__asm volatile
 801c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c244:	f383 8811 	msr	BASEPRI, r3
 801c248:	f3bf 8f6f 	isb	sy
 801c24c:	f3bf 8f4f 	dsb	sy
 801c250:	60fb      	str	r3, [r7, #12]
}
 801c252:	bf00      	nop
 801c254:	e7fe      	b.n	801c254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c256:	4b39      	ldr	r3, [pc, #228]	; (801c33c <xPortStartScheduler+0x12c>)
 801c258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	b2db      	uxtb	r3, r3
 801c260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c262:	697b      	ldr	r3, [r7, #20]
 801c264:	22ff      	movs	r2, #255	; 0xff
 801c266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c268:	697b      	ldr	r3, [r7, #20]
 801c26a:	781b      	ldrb	r3, [r3, #0]
 801c26c:	b2db      	uxtb	r3, r3
 801c26e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c270:	78fb      	ldrb	r3, [r7, #3]
 801c272:	b2db      	uxtb	r3, r3
 801c274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c278:	b2da      	uxtb	r2, r3
 801c27a:	4b31      	ldr	r3, [pc, #196]	; (801c340 <xPortStartScheduler+0x130>)
 801c27c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c27e:	4b31      	ldr	r3, [pc, #196]	; (801c344 <xPortStartScheduler+0x134>)
 801c280:	2207      	movs	r2, #7
 801c282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c284:	e009      	b.n	801c29a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c286:	4b2f      	ldr	r3, [pc, #188]	; (801c344 <xPortStartScheduler+0x134>)
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	3b01      	subs	r3, #1
 801c28c:	4a2d      	ldr	r2, [pc, #180]	; (801c344 <xPortStartScheduler+0x134>)
 801c28e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c290:	78fb      	ldrb	r3, [r7, #3]
 801c292:	b2db      	uxtb	r3, r3
 801c294:	005b      	lsls	r3, r3, #1
 801c296:	b2db      	uxtb	r3, r3
 801c298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c29a:	78fb      	ldrb	r3, [r7, #3]
 801c29c:	b2db      	uxtb	r3, r3
 801c29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c2a2:	2b80      	cmp	r3, #128	; 0x80
 801c2a4:	d0ef      	beq.n	801c286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c2a6:	4b27      	ldr	r3, [pc, #156]	; (801c344 <xPortStartScheduler+0x134>)
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	f1c3 0307 	rsb	r3, r3, #7
 801c2ae:	2b04      	cmp	r3, #4
 801c2b0:	d00a      	beq.n	801c2c8 <xPortStartScheduler+0xb8>
	__asm volatile
 801c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2b6:	f383 8811 	msr	BASEPRI, r3
 801c2ba:	f3bf 8f6f 	isb	sy
 801c2be:	f3bf 8f4f 	dsb	sy
 801c2c2:	60bb      	str	r3, [r7, #8]
}
 801c2c4:	bf00      	nop
 801c2c6:	e7fe      	b.n	801c2c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c2c8:	4b1e      	ldr	r3, [pc, #120]	; (801c344 <xPortStartScheduler+0x134>)
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	021b      	lsls	r3, r3, #8
 801c2ce:	4a1d      	ldr	r2, [pc, #116]	; (801c344 <xPortStartScheduler+0x134>)
 801c2d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c2d2:	4b1c      	ldr	r3, [pc, #112]	; (801c344 <xPortStartScheduler+0x134>)
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c2da:	4a1a      	ldr	r2, [pc, #104]	; (801c344 <xPortStartScheduler+0x134>)
 801c2dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	b2da      	uxtb	r2, r3
 801c2e2:	697b      	ldr	r3, [r7, #20]
 801c2e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c2e6:	4b18      	ldr	r3, [pc, #96]	; (801c348 <xPortStartScheduler+0x138>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	4a17      	ldr	r2, [pc, #92]	; (801c348 <xPortStartScheduler+0x138>)
 801c2ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c2f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c2f2:	4b15      	ldr	r3, [pc, #84]	; (801c348 <xPortStartScheduler+0x138>)
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	4a14      	ldr	r2, [pc, #80]	; (801c348 <xPortStartScheduler+0x138>)
 801c2f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c2fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c2fe:	f000 f8dd 	bl	801c4bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c302:	4b12      	ldr	r3, [pc, #72]	; (801c34c <xPortStartScheduler+0x13c>)
 801c304:	2200      	movs	r2, #0
 801c306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c308:	f000 f8fc 	bl	801c504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c30c:	4b10      	ldr	r3, [pc, #64]	; (801c350 <xPortStartScheduler+0x140>)
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	4a0f      	ldr	r2, [pc, #60]	; (801c350 <xPortStartScheduler+0x140>)
 801c312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c318:	f7ff ff66 	bl	801c1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c31c:	f7fe ff5a 	bl	801b1d4 <vTaskSwitchContext>
	prvTaskExitError();
 801c320:	f7ff ff1e 	bl	801c160 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c324:	2300      	movs	r3, #0
}
 801c326:	4618      	mov	r0, r3
 801c328:	3718      	adds	r7, #24
 801c32a:	46bd      	mov	sp, r7
 801c32c:	bd80      	pop	{r7, pc}
 801c32e:	bf00      	nop
 801c330:	e000ed00 	.word	0xe000ed00
 801c334:	410fc271 	.word	0x410fc271
 801c338:	410fc270 	.word	0x410fc270
 801c33c:	e000e400 	.word	0xe000e400
 801c340:	2400a4e4 	.word	0x2400a4e4
 801c344:	2400a4e8 	.word	0x2400a4e8
 801c348:	e000ed20 	.word	0xe000ed20
 801c34c:	24000010 	.word	0x24000010
 801c350:	e000ef34 	.word	0xe000ef34

0801c354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c354:	b480      	push	{r7}
 801c356:	b083      	sub	sp, #12
 801c358:	af00      	add	r7, sp, #0
	__asm volatile
 801c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c35e:	f383 8811 	msr	BASEPRI, r3
 801c362:	f3bf 8f6f 	isb	sy
 801c366:	f3bf 8f4f 	dsb	sy
 801c36a:	607b      	str	r3, [r7, #4]
}
 801c36c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c36e:	4b0f      	ldr	r3, [pc, #60]	; (801c3ac <vPortEnterCritical+0x58>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	3301      	adds	r3, #1
 801c374:	4a0d      	ldr	r2, [pc, #52]	; (801c3ac <vPortEnterCritical+0x58>)
 801c376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c378:	4b0c      	ldr	r3, [pc, #48]	; (801c3ac <vPortEnterCritical+0x58>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	2b01      	cmp	r3, #1
 801c37e:	d10f      	bne.n	801c3a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c380:	4b0b      	ldr	r3, [pc, #44]	; (801c3b0 <vPortEnterCritical+0x5c>)
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	b2db      	uxtb	r3, r3
 801c386:	2b00      	cmp	r3, #0
 801c388:	d00a      	beq.n	801c3a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c38e:	f383 8811 	msr	BASEPRI, r3
 801c392:	f3bf 8f6f 	isb	sy
 801c396:	f3bf 8f4f 	dsb	sy
 801c39a:	603b      	str	r3, [r7, #0]
}
 801c39c:	bf00      	nop
 801c39e:	e7fe      	b.n	801c39e <vPortEnterCritical+0x4a>
	}
}
 801c3a0:	bf00      	nop
 801c3a2:	370c      	adds	r7, #12
 801c3a4:	46bd      	mov	sp, r7
 801c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3aa:	4770      	bx	lr
 801c3ac:	24000010 	.word	0x24000010
 801c3b0:	e000ed04 	.word	0xe000ed04

0801c3b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b083      	sub	sp, #12
 801c3b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c3ba:	4b12      	ldr	r3, [pc, #72]	; (801c404 <vPortExitCritical+0x50>)
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d10a      	bne.n	801c3d8 <vPortExitCritical+0x24>
	__asm volatile
 801c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3c6:	f383 8811 	msr	BASEPRI, r3
 801c3ca:	f3bf 8f6f 	isb	sy
 801c3ce:	f3bf 8f4f 	dsb	sy
 801c3d2:	607b      	str	r3, [r7, #4]
}
 801c3d4:	bf00      	nop
 801c3d6:	e7fe      	b.n	801c3d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c3d8:	4b0a      	ldr	r3, [pc, #40]	; (801c404 <vPortExitCritical+0x50>)
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	3b01      	subs	r3, #1
 801c3de:	4a09      	ldr	r2, [pc, #36]	; (801c404 <vPortExitCritical+0x50>)
 801c3e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c3e2:	4b08      	ldr	r3, [pc, #32]	; (801c404 <vPortExitCritical+0x50>)
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d105      	bne.n	801c3f6 <vPortExitCritical+0x42>
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	f383 8811 	msr	BASEPRI, r3
}
 801c3f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c3f6:	bf00      	nop
 801c3f8:	370c      	adds	r7, #12
 801c3fa:	46bd      	mov	sp, r7
 801c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c400:	4770      	bx	lr
 801c402:	bf00      	nop
 801c404:	24000010 	.word	0x24000010
	...

0801c410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c410:	f3ef 8009 	mrs	r0, PSP
 801c414:	f3bf 8f6f 	isb	sy
 801c418:	4b15      	ldr	r3, [pc, #84]	; (801c470 <pxCurrentTCBConst>)
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	f01e 0f10 	tst.w	lr, #16
 801c420:	bf08      	it	eq
 801c422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c42a:	6010      	str	r0, [r2, #0]
 801c42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c430:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c434:	f380 8811 	msr	BASEPRI, r0
 801c438:	f3bf 8f4f 	dsb	sy
 801c43c:	f3bf 8f6f 	isb	sy
 801c440:	f7fe fec8 	bl	801b1d4 <vTaskSwitchContext>
 801c444:	f04f 0000 	mov.w	r0, #0
 801c448:	f380 8811 	msr	BASEPRI, r0
 801c44c:	bc09      	pop	{r0, r3}
 801c44e:	6819      	ldr	r1, [r3, #0]
 801c450:	6808      	ldr	r0, [r1, #0]
 801c452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c456:	f01e 0f10 	tst.w	lr, #16
 801c45a:	bf08      	it	eq
 801c45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c460:	f380 8809 	msr	PSP, r0
 801c464:	f3bf 8f6f 	isb	sy
 801c468:	4770      	bx	lr
 801c46a:	bf00      	nop
 801c46c:	f3af 8000 	nop.w

0801c470 <pxCurrentTCBConst>:
 801c470:	24009eb8 	.word	0x24009eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c474:	bf00      	nop
 801c476:	bf00      	nop

0801c478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b082      	sub	sp, #8
 801c47c:	af00      	add	r7, sp, #0
	__asm volatile
 801c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c482:	f383 8811 	msr	BASEPRI, r3
 801c486:	f3bf 8f6f 	isb	sy
 801c48a:	f3bf 8f4f 	dsb	sy
 801c48e:	607b      	str	r3, [r7, #4]
}
 801c490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c492:	f7fe fe09 	bl	801b0a8 <xTaskIncrementTick>
 801c496:	4603      	mov	r3, r0
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d003      	beq.n	801c4a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c49c:	4b06      	ldr	r3, [pc, #24]	; (801c4b8 <xPortSysTickHandler+0x40>)
 801c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c4a2:	601a      	str	r2, [r3, #0]
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	f383 8811 	msr	BASEPRI, r3
}
 801c4ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c4b0:	bf00      	nop
 801c4b2:	3708      	adds	r7, #8
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	e000ed04 	.word	0xe000ed04

0801c4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c4bc:	b480      	push	{r7}
 801c4be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c4c0:	4b0b      	ldr	r3, [pc, #44]	; (801c4f0 <vPortSetupTimerInterrupt+0x34>)
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c4c6:	4b0b      	ldr	r3, [pc, #44]	; (801c4f4 <vPortSetupTimerInterrupt+0x38>)
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c4cc:	4b0a      	ldr	r3, [pc, #40]	; (801c4f8 <vPortSetupTimerInterrupt+0x3c>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	4a0a      	ldr	r2, [pc, #40]	; (801c4fc <vPortSetupTimerInterrupt+0x40>)
 801c4d2:	fba2 2303 	umull	r2, r3, r2, r3
 801c4d6:	099b      	lsrs	r3, r3, #6
 801c4d8:	4a09      	ldr	r2, [pc, #36]	; (801c500 <vPortSetupTimerInterrupt+0x44>)
 801c4da:	3b01      	subs	r3, #1
 801c4dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c4de:	4b04      	ldr	r3, [pc, #16]	; (801c4f0 <vPortSetupTimerInterrupt+0x34>)
 801c4e0:	2207      	movs	r2, #7
 801c4e2:	601a      	str	r2, [r3, #0]
}
 801c4e4:	bf00      	nop
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	e000e010 	.word	0xe000e010
 801c4f4:	e000e018 	.word	0xe000e018
 801c4f8:	24000000 	.word	0x24000000
 801c4fc:	10624dd3 	.word	0x10624dd3
 801c500:	e000e014 	.word	0xe000e014

0801c504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c514 <vPortEnableVFP+0x10>
 801c508:	6801      	ldr	r1, [r0, #0]
 801c50a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c50e:	6001      	str	r1, [r0, #0]
 801c510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c512:	bf00      	nop
 801c514:	e000ed88 	.word	0xe000ed88

0801c518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c518:	b480      	push	{r7}
 801c51a:	b085      	sub	sp, #20
 801c51c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c51e:	f3ef 8305 	mrs	r3, IPSR
 801c522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	2b0f      	cmp	r3, #15
 801c528:	d914      	bls.n	801c554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c52a:	4a17      	ldr	r2, [pc, #92]	; (801c588 <vPortValidateInterruptPriority+0x70>)
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	4413      	add	r3, r2
 801c530:	781b      	ldrb	r3, [r3, #0]
 801c532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c534:	4b15      	ldr	r3, [pc, #84]	; (801c58c <vPortValidateInterruptPriority+0x74>)
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	7afa      	ldrb	r2, [r7, #11]
 801c53a:	429a      	cmp	r2, r3
 801c53c:	d20a      	bcs.n	801c554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c542:	f383 8811 	msr	BASEPRI, r3
 801c546:	f3bf 8f6f 	isb	sy
 801c54a:	f3bf 8f4f 	dsb	sy
 801c54e:	607b      	str	r3, [r7, #4]
}
 801c550:	bf00      	nop
 801c552:	e7fe      	b.n	801c552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c554:	4b0e      	ldr	r3, [pc, #56]	; (801c590 <vPortValidateInterruptPriority+0x78>)
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c55c:	4b0d      	ldr	r3, [pc, #52]	; (801c594 <vPortValidateInterruptPriority+0x7c>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	429a      	cmp	r2, r3
 801c562:	d90a      	bls.n	801c57a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c564:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c568:	f383 8811 	msr	BASEPRI, r3
 801c56c:	f3bf 8f6f 	isb	sy
 801c570:	f3bf 8f4f 	dsb	sy
 801c574:	603b      	str	r3, [r7, #0]
}
 801c576:	bf00      	nop
 801c578:	e7fe      	b.n	801c578 <vPortValidateInterruptPriority+0x60>
	}
 801c57a:	bf00      	nop
 801c57c:	3714      	adds	r7, #20
 801c57e:	46bd      	mov	sp, r7
 801c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c584:	4770      	bx	lr
 801c586:	bf00      	nop
 801c588:	e000e3f0 	.word	0xe000e3f0
 801c58c:	2400a4e4 	.word	0x2400a4e4
 801c590:	e000ed0c 	.word	0xe000ed0c
 801c594:	2400a4e8 	.word	0x2400a4e8

0801c598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b08a      	sub	sp, #40	; 0x28
 801c59c:	af00      	add	r7, sp, #0
 801c59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c5a4:	f7fe fcd2 	bl	801af4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c5a8:	4b5b      	ldr	r3, [pc, #364]	; (801c718 <pvPortMalloc+0x180>)
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d101      	bne.n	801c5b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c5b0:	f000 f920 	bl	801c7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c5b4:	4b59      	ldr	r3, [pc, #356]	; (801c71c <pvPortMalloc+0x184>)
 801c5b6:	681a      	ldr	r2, [r3, #0]
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	4013      	ands	r3, r2
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	f040 8093 	bne.w	801c6e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d01d      	beq.n	801c604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c5c8:	2208      	movs	r2, #8
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	4413      	add	r3, r2
 801c5ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	f003 0307 	and.w	r3, r3, #7
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d014      	beq.n	801c604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	f023 0307 	bic.w	r3, r3, #7
 801c5e0:	3308      	adds	r3, #8
 801c5e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f003 0307 	and.w	r3, r3, #7
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d00a      	beq.n	801c604 <pvPortMalloc+0x6c>
	__asm volatile
 801c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5f2:	f383 8811 	msr	BASEPRI, r3
 801c5f6:	f3bf 8f6f 	isb	sy
 801c5fa:	f3bf 8f4f 	dsb	sy
 801c5fe:	617b      	str	r3, [r7, #20]
}
 801c600:	bf00      	nop
 801c602:	e7fe      	b.n	801c602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d06e      	beq.n	801c6e8 <pvPortMalloc+0x150>
 801c60a:	4b45      	ldr	r3, [pc, #276]	; (801c720 <pvPortMalloc+0x188>)
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	429a      	cmp	r2, r3
 801c612:	d869      	bhi.n	801c6e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c614:	4b43      	ldr	r3, [pc, #268]	; (801c724 <pvPortMalloc+0x18c>)
 801c616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c618:	4b42      	ldr	r3, [pc, #264]	; (801c724 <pvPortMalloc+0x18c>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c61e:	e004      	b.n	801c62a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c62c:	685b      	ldr	r3, [r3, #4]
 801c62e:	687a      	ldr	r2, [r7, #4]
 801c630:	429a      	cmp	r2, r3
 801c632:	d903      	bls.n	801c63c <pvPortMalloc+0xa4>
 801c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d1f1      	bne.n	801c620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c63c:	4b36      	ldr	r3, [pc, #216]	; (801c718 <pvPortMalloc+0x180>)
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c642:	429a      	cmp	r2, r3
 801c644:	d050      	beq.n	801c6e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c646:	6a3b      	ldr	r3, [r7, #32]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	2208      	movs	r2, #8
 801c64c:	4413      	add	r3, r2
 801c64e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c652:	681a      	ldr	r2, [r3, #0]
 801c654:	6a3b      	ldr	r3, [r7, #32]
 801c656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c65a:	685a      	ldr	r2, [r3, #4]
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	1ad2      	subs	r2, r2, r3
 801c660:	2308      	movs	r3, #8
 801c662:	005b      	lsls	r3, r3, #1
 801c664:	429a      	cmp	r2, r3
 801c666:	d91f      	bls.n	801c6a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	4413      	add	r3, r2
 801c66e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c670:	69bb      	ldr	r3, [r7, #24]
 801c672:	f003 0307 	and.w	r3, r3, #7
 801c676:	2b00      	cmp	r3, #0
 801c678:	d00a      	beq.n	801c690 <pvPortMalloc+0xf8>
	__asm volatile
 801c67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c67e:	f383 8811 	msr	BASEPRI, r3
 801c682:	f3bf 8f6f 	isb	sy
 801c686:	f3bf 8f4f 	dsb	sy
 801c68a:	613b      	str	r3, [r7, #16]
}
 801c68c:	bf00      	nop
 801c68e:	e7fe      	b.n	801c68e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c692:	685a      	ldr	r2, [r3, #4]
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	1ad2      	subs	r2, r2, r3
 801c698:	69bb      	ldr	r3, [r7, #24]
 801c69a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c69e:	687a      	ldr	r2, [r7, #4]
 801c6a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c6a2:	69b8      	ldr	r0, [r7, #24]
 801c6a4:	f000 f908 	bl	801c8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c6a8:	4b1d      	ldr	r3, [pc, #116]	; (801c720 <pvPortMalloc+0x188>)
 801c6aa:	681a      	ldr	r2, [r3, #0]
 801c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ae:	685b      	ldr	r3, [r3, #4]
 801c6b0:	1ad3      	subs	r3, r2, r3
 801c6b2:	4a1b      	ldr	r2, [pc, #108]	; (801c720 <pvPortMalloc+0x188>)
 801c6b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c6b6:	4b1a      	ldr	r3, [pc, #104]	; (801c720 <pvPortMalloc+0x188>)
 801c6b8:	681a      	ldr	r2, [r3, #0]
 801c6ba:	4b1b      	ldr	r3, [pc, #108]	; (801c728 <pvPortMalloc+0x190>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	429a      	cmp	r2, r3
 801c6c0:	d203      	bcs.n	801c6ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c6c2:	4b17      	ldr	r3, [pc, #92]	; (801c720 <pvPortMalloc+0x188>)
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	4a18      	ldr	r2, [pc, #96]	; (801c728 <pvPortMalloc+0x190>)
 801c6c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6cc:	685a      	ldr	r2, [r3, #4]
 801c6ce:	4b13      	ldr	r3, [pc, #76]	; (801c71c <pvPortMalloc+0x184>)
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	431a      	orrs	r2, r3
 801c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6da:	2200      	movs	r2, #0
 801c6dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c6de:	4b13      	ldr	r3, [pc, #76]	; (801c72c <pvPortMalloc+0x194>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	3301      	adds	r3, #1
 801c6e4:	4a11      	ldr	r2, [pc, #68]	; (801c72c <pvPortMalloc+0x194>)
 801c6e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c6e8:	f7fe fc3e 	bl	801af68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c6ec:	69fb      	ldr	r3, [r7, #28]
 801c6ee:	f003 0307 	and.w	r3, r3, #7
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d00a      	beq.n	801c70c <pvPortMalloc+0x174>
	__asm volatile
 801c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6fa:	f383 8811 	msr	BASEPRI, r3
 801c6fe:	f3bf 8f6f 	isb	sy
 801c702:	f3bf 8f4f 	dsb	sy
 801c706:	60fb      	str	r3, [r7, #12]
}
 801c708:	bf00      	nop
 801c70a:	e7fe      	b.n	801c70a <pvPortMalloc+0x172>
	return pvReturn;
 801c70c:	69fb      	ldr	r3, [r7, #28]
}
 801c70e:	4618      	mov	r0, r3
 801c710:	3728      	adds	r7, #40	; 0x28
 801c712:	46bd      	mov	sp, r7
 801c714:	bd80      	pop	{r7, pc}
 801c716:	bf00      	nop
 801c718:	2400e0f4 	.word	0x2400e0f4
 801c71c:	2400e108 	.word	0x2400e108
 801c720:	2400e0f8 	.word	0x2400e0f8
 801c724:	2400e0ec 	.word	0x2400e0ec
 801c728:	2400e0fc 	.word	0x2400e0fc
 801c72c:	2400e100 	.word	0x2400e100

0801c730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b086      	sub	sp, #24
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d04d      	beq.n	801c7de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c742:	2308      	movs	r3, #8
 801c744:	425b      	negs	r3, r3
 801c746:	697a      	ldr	r2, [r7, #20]
 801c748:	4413      	add	r3, r2
 801c74a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c750:	693b      	ldr	r3, [r7, #16]
 801c752:	685a      	ldr	r2, [r3, #4]
 801c754:	4b24      	ldr	r3, [pc, #144]	; (801c7e8 <vPortFree+0xb8>)
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	4013      	ands	r3, r2
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d10a      	bne.n	801c774 <vPortFree+0x44>
	__asm volatile
 801c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c762:	f383 8811 	msr	BASEPRI, r3
 801c766:	f3bf 8f6f 	isb	sy
 801c76a:	f3bf 8f4f 	dsb	sy
 801c76e:	60fb      	str	r3, [r7, #12]
}
 801c770:	bf00      	nop
 801c772:	e7fe      	b.n	801c772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c774:	693b      	ldr	r3, [r7, #16]
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d00a      	beq.n	801c792 <vPortFree+0x62>
	__asm volatile
 801c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c780:	f383 8811 	msr	BASEPRI, r3
 801c784:	f3bf 8f6f 	isb	sy
 801c788:	f3bf 8f4f 	dsb	sy
 801c78c:	60bb      	str	r3, [r7, #8]
}
 801c78e:	bf00      	nop
 801c790:	e7fe      	b.n	801c790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c792:	693b      	ldr	r3, [r7, #16]
 801c794:	685a      	ldr	r2, [r3, #4]
 801c796:	4b14      	ldr	r3, [pc, #80]	; (801c7e8 <vPortFree+0xb8>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	4013      	ands	r3, r2
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d01e      	beq.n	801c7de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d11a      	bne.n	801c7de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c7a8:	693b      	ldr	r3, [r7, #16]
 801c7aa:	685a      	ldr	r2, [r3, #4]
 801c7ac:	4b0e      	ldr	r3, [pc, #56]	; (801c7e8 <vPortFree+0xb8>)
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	43db      	mvns	r3, r3
 801c7b2:	401a      	ands	r2, r3
 801c7b4:	693b      	ldr	r3, [r7, #16]
 801c7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c7b8:	f7fe fbc8 	bl	801af4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c7bc:	693b      	ldr	r3, [r7, #16]
 801c7be:	685a      	ldr	r2, [r3, #4]
 801c7c0:	4b0a      	ldr	r3, [pc, #40]	; (801c7ec <vPortFree+0xbc>)
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	4413      	add	r3, r2
 801c7c6:	4a09      	ldr	r2, [pc, #36]	; (801c7ec <vPortFree+0xbc>)
 801c7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c7ca:	6938      	ldr	r0, [r7, #16]
 801c7cc:	f000 f874 	bl	801c8b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c7d0:	4b07      	ldr	r3, [pc, #28]	; (801c7f0 <vPortFree+0xc0>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	4a06      	ldr	r2, [pc, #24]	; (801c7f0 <vPortFree+0xc0>)
 801c7d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c7da:	f7fe fbc5 	bl	801af68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c7de:	bf00      	nop
 801c7e0:	3718      	adds	r7, #24
 801c7e2:	46bd      	mov	sp, r7
 801c7e4:	bd80      	pop	{r7, pc}
 801c7e6:	bf00      	nop
 801c7e8:	2400e108 	.word	0x2400e108
 801c7ec:	2400e0f8 	.word	0x2400e0f8
 801c7f0:	2400e104 	.word	0x2400e104

0801c7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c7f4:	b480      	push	{r7}
 801c7f6:	b085      	sub	sp, #20
 801c7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c7fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801c7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c800:	4b27      	ldr	r3, [pc, #156]	; (801c8a0 <prvHeapInit+0xac>)
 801c802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	f003 0307 	and.w	r3, r3, #7
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d00c      	beq.n	801c828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	3307      	adds	r3, #7
 801c812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	f023 0307 	bic.w	r3, r3, #7
 801c81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c81c:	68ba      	ldr	r2, [r7, #8]
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	1ad3      	subs	r3, r2, r3
 801c822:	4a1f      	ldr	r2, [pc, #124]	; (801c8a0 <prvHeapInit+0xac>)
 801c824:	4413      	add	r3, r2
 801c826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c82c:	4a1d      	ldr	r2, [pc, #116]	; (801c8a4 <prvHeapInit+0xb0>)
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c832:	4b1c      	ldr	r3, [pc, #112]	; (801c8a4 <prvHeapInit+0xb0>)
 801c834:	2200      	movs	r2, #0
 801c836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	68ba      	ldr	r2, [r7, #8]
 801c83c:	4413      	add	r3, r2
 801c83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c840:	2208      	movs	r2, #8
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	1a9b      	subs	r3, r3, r2
 801c846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	f023 0307 	bic.w	r3, r3, #7
 801c84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	4a15      	ldr	r2, [pc, #84]	; (801c8a8 <prvHeapInit+0xb4>)
 801c854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c856:	4b14      	ldr	r3, [pc, #80]	; (801c8a8 <prvHeapInit+0xb4>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	2200      	movs	r2, #0
 801c85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c85e:	4b12      	ldr	r3, [pc, #72]	; (801c8a8 <prvHeapInit+0xb4>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	2200      	movs	r2, #0
 801c864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c86a:	683b      	ldr	r3, [r7, #0]
 801c86c:	68fa      	ldr	r2, [r7, #12]
 801c86e:	1ad2      	subs	r2, r2, r3
 801c870:	683b      	ldr	r3, [r7, #0]
 801c872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c874:	4b0c      	ldr	r3, [pc, #48]	; (801c8a8 <prvHeapInit+0xb4>)
 801c876:	681a      	ldr	r2, [r3, #0]
 801c878:	683b      	ldr	r3, [r7, #0]
 801c87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c87c:	683b      	ldr	r3, [r7, #0]
 801c87e:	685b      	ldr	r3, [r3, #4]
 801c880:	4a0a      	ldr	r2, [pc, #40]	; (801c8ac <prvHeapInit+0xb8>)
 801c882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	685b      	ldr	r3, [r3, #4]
 801c888:	4a09      	ldr	r2, [pc, #36]	; (801c8b0 <prvHeapInit+0xbc>)
 801c88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c88c:	4b09      	ldr	r3, [pc, #36]	; (801c8b4 <prvHeapInit+0xc0>)
 801c88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c892:	601a      	str	r2, [r3, #0]
}
 801c894:	bf00      	nop
 801c896:	3714      	adds	r7, #20
 801c898:	46bd      	mov	sp, r7
 801c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c89e:	4770      	bx	lr
 801c8a0:	2400a4ec 	.word	0x2400a4ec
 801c8a4:	2400e0ec 	.word	0x2400e0ec
 801c8a8:	2400e0f4 	.word	0x2400e0f4
 801c8ac:	2400e0fc 	.word	0x2400e0fc
 801c8b0:	2400e0f8 	.word	0x2400e0f8
 801c8b4:	2400e108 	.word	0x2400e108

0801c8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c8b8:	b480      	push	{r7}
 801c8ba:	b085      	sub	sp, #20
 801c8bc:	af00      	add	r7, sp, #0
 801c8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c8c0:	4b28      	ldr	r3, [pc, #160]	; (801c964 <prvInsertBlockIntoFreeList+0xac>)
 801c8c2:	60fb      	str	r3, [r7, #12]
 801c8c4:	e002      	b.n	801c8cc <prvInsertBlockIntoFreeList+0x14>
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	60fb      	str	r3, [r7, #12]
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	687a      	ldr	r2, [r7, #4]
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d8f7      	bhi.n	801c8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	68ba      	ldr	r2, [r7, #8]
 801c8e0:	4413      	add	r3, r2
 801c8e2:	687a      	ldr	r2, [r7, #4]
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d108      	bne.n	801c8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	685a      	ldr	r2, [r3, #4]
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	685b      	ldr	r3, [r3, #4]
 801c8f0:	441a      	add	r2, r3
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	685b      	ldr	r3, [r3, #4]
 801c902:	68ba      	ldr	r2, [r7, #8]
 801c904:	441a      	add	r2, r3
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	429a      	cmp	r2, r3
 801c90c:	d118      	bne.n	801c940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	681a      	ldr	r2, [r3, #0]
 801c912:	4b15      	ldr	r3, [pc, #84]	; (801c968 <prvInsertBlockIntoFreeList+0xb0>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	429a      	cmp	r2, r3
 801c918:	d00d      	beq.n	801c936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	685a      	ldr	r2, [r3, #4]
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	441a      	add	r2, r3
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	681a      	ldr	r2, [r3, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	601a      	str	r2, [r3, #0]
 801c934:	e008      	b.n	801c948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c936:	4b0c      	ldr	r3, [pc, #48]	; (801c968 <prvInsertBlockIntoFreeList+0xb0>)
 801c938:	681a      	ldr	r2, [r3, #0]
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	601a      	str	r2, [r3, #0]
 801c93e:	e003      	b.n	801c948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681a      	ldr	r2, [r3, #0]
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c948:	68fa      	ldr	r2, [r7, #12]
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	429a      	cmp	r2, r3
 801c94e:	d002      	beq.n	801c956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c956:	bf00      	nop
 801c958:	3714      	adds	r7, #20
 801c95a:	46bd      	mov	sp, r7
 801c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c960:	4770      	bx	lr
 801c962:	bf00      	nop
 801c964:	2400e0ec 	.word	0x2400e0ec
 801c968:	2400e0f4 	.word	0x2400e0f4

0801c96c <Bmx160_init>:
const float gyroRange = Bmx160_GYRO_SENSITIVITY_250DPS;

sBmx160Dev_t Obmx160;

void Bmx160_init()
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	af00      	add	r7, sp, #0
    Obmx160.delayMs = HAL_Delay;
 801c970:	4b04      	ldr	r3, [pc, #16]	; (801c984 <Bmx160_init+0x18>)
 801c972:	4a05      	ldr	r2, [pc, #20]	; (801c988 <Bmx160_init+0x1c>)
 801c974:	621a      	str	r2, [r3, #32]
    Bmx160_begin();
 801c976:	f000 f809 	bl	801c98c <Bmx160_begin>
    DelayUs(100);
 801c97a:	2064      	movs	r0, #100	; 0x64
 801c97c:	f000 fa6a 	bl	801ce54 <DelayUs>
}
 801c980:	bf00      	nop
 801c982:	bd80      	pop	{r7, pc}
 801c984:	2400e10c 	.word	0x2400e10c
 801c988:	08002289 	.word	0x08002289

0801c98c <Bmx160_begin>:

uint8_t Bmx160_begin()
{
 801c98c:	b580      	push	{r7, lr}
 801c98e:	af00      	add	r7, sp, #0
    if (Bmx160_scan() == TRUE){
 801c990:	f000 fa57 	bl	801ce42 <Bmx160_scan>
 801c994:	4603      	mov	r3, r0
 801c996:	2b01      	cmp	r3, #1
 801c998:	d11d      	bne.n	801c9d6 <Bmx160_begin+0x4a>
        Bmx160_softReset_();
 801c99a:	f000 f821 	bl	801c9e0 <Bmx160_softReset_>
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x11);
 801c99e:	2111      	movs	r1, #17
 801c9a0:	207e      	movs	r0, #126	; 0x7e
 801c9a2:	f000 fa15 	bl	801cdd0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(50);
 801c9a6:	4b0d      	ldr	r3, [pc, #52]	; (801c9dc <Bmx160_begin+0x50>)
 801c9a8:	6a1b      	ldr	r3, [r3, #32]
 801c9aa:	2032      	movs	r0, #50	; 0x32
 801c9ac:	4798      	blx	r3
        /* Set gyro to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x15);
 801c9ae:	2115      	movs	r1, #21
 801c9b0:	207e      	movs	r0, #126	; 0x7e
 801c9b2:	f000 fa0d 	bl	801cdd0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(100);
 801c9b6:	4b09      	ldr	r3, [pc, #36]	; (801c9dc <Bmx160_begin+0x50>)
 801c9b8:	6a1b      	ldr	r3, [r3, #32]
 801c9ba:	2064      	movs	r0, #100	; 0x64
 801c9bc:	4798      	blx	r3
        /* Set mag to normal mode */
        Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
 801c9be:	2119      	movs	r1, #25
 801c9c0:	207e      	movs	r0, #126	; 0x7e
 801c9c2:	f000 fa05 	bl	801cdd0 <Bmx160_writeBmxReg>
        Obmx160.delayMs(10);
 801c9c6:	4b05      	ldr	r3, [pc, #20]	; (801c9dc <Bmx160_begin+0x50>)
 801c9c8:	6a1b      	ldr	r3, [r3, #32]
 801c9ca:	200a      	movs	r0, #10
 801c9cc:	4798      	blx	r3
        Bmx160_setMagnConf();
 801c9ce:	f000 f873 	bl	801cab8 <Bmx160_setMagnConf>
        return TRUE;
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	e000      	b.n	801c9d8 <Bmx160_begin+0x4c>
    }
    else
        return FALSE;
 801c9d6:	2300      	movs	r3, #0
}
 801c9d8:	4618      	mov	r0, r3
 801c9da:	bd80      	pop	{r7, pc}
 801c9dc:	2400e10c 	.word	0x2400e10c

0801c9e0 <Bmx160_softReset_>:
    Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, 0x19);
    Obmx160.delayMs(100);
}

uint8_t Bmx160_softReset_()
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	af00      	add	r7, sp, #0
  int8_t rslt=Bmx160_OK;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	71fb      	strb	r3, [r7, #7]
  rslt = Bmx160_softReset(&Obmx160);
 801c9ea:	4808      	ldr	r0, [pc, #32]	; (801ca0c <Bmx160_softReset_+0x2c>)
 801c9ec:	f000 f810 	bl	801ca10 <Bmx160_softReset>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	71fb      	strb	r3, [r7, #7]
  if (rslt == 0)
 801c9f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d101      	bne.n	801ca00 <Bmx160_softReset_+0x20>
    return TRUE;
 801c9fc:	2301      	movs	r3, #1
 801c9fe:	e000      	b.n	801ca02 <Bmx160_softReset_+0x22>
  else
    return FALSE;
 801ca00:	2300      	movs	r3, #0
}
 801ca02:	4618      	mov	r0, r3
 801ca04:	3708      	adds	r7, #8
 801ca06:	46bd      	mov	sp, r7
 801ca08:	bd80      	pop	{r7, pc}
 801ca0a:	bf00      	nop
 801ca0c:	2400e10c 	.word	0x2400e10c

0801ca10 <Bmx160_softReset>:

int8_t Bmx160_softReset(sBmx160Dev_t *dev)
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b084      	sub	sp, #16
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
  int8_t rslt=Bmx160_OK;
 801ca18:	2300      	movs	r3, #0
 801ca1a:	73fb      	strb	r3, [r7, #15]
  uint8_t data = Bmx160_SOFT_RESET_CMD;
 801ca1c:	23b6      	movs	r3, #182	; 0xb6
 801ca1e:	73bb      	strb	r3, [r7, #14]
  if (dev==NULL){
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d101      	bne.n	801ca2a <Bmx160_softReset+0x1a>
    rslt = Bmx160_E_NULL_PTR;
 801ca26:	23ff      	movs	r3, #255	; 0xff
 801ca28:	73fb      	strb	r3, [r7, #15]
  }
  Bmx160_writeBmxReg(Bmx160_COMMAND_REG_ADDR, data);
 801ca2a:	7bbb      	ldrb	r3, [r7, #14]
 801ca2c:	4619      	mov	r1, r3
 801ca2e:	207e      	movs	r0, #126	; 0x7e
 801ca30:	f000 f9ce 	bl	801cdd0 <Bmx160_writeBmxReg>
  Obmx160.delayMs(Bmx160_SOFT_RESET_DELAY_MS);
 801ca34:	4b08      	ldr	r3, [pc, #32]	; (801ca58 <Bmx160_softReset+0x48>)
 801ca36:	6a1b      	ldr	r3, [r3, #32]
 801ca38:	200f      	movs	r0, #15
 801ca3a:	4798      	blx	r3
  if (rslt == Bmx160_OK){
 801ca3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d102      	bne.n	801ca4a <Bmx160_softReset+0x3a>
    Bmx160_defaultParamSettg(dev);
 801ca44:	6878      	ldr	r0, [r7, #4]
 801ca46:	f000 f809 	bl	801ca5c <Bmx160_defaultParamSettg>
  }
  return rslt;
 801ca4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ca4e:	4618      	mov	r0, r3
 801ca50:	3710      	adds	r7, #16
 801ca52:	46bd      	mov	sp, r7
 801ca54:	bd80      	pop	{r7, pc}
 801ca56:	bf00      	nop
 801ca58:	2400e10c 	.word	0x2400e10c

0801ca5c <Bmx160_defaultParamSettg>:

void Bmx160_defaultParamSettg(sBmx160Dev_t *dev)
{
 801ca5c:	b480      	push	{r7}
 801ca5e:	b083      	sub	sp, #12
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
  // Initializing accel and gyro params with
  dev->gyroCfg.bw = Bmx160_GYRO_BW_NORMAL_MODE;
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	2202      	movs	r2, #2
 801ca68:	75da      	strb	r2, [r3, #23]
  dev->gyroCfg.odr = Bmx160_GYRO_ODR_100HZ;
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	2208      	movs	r2, #8
 801ca6e:	755a      	strb	r2, [r3, #21]
  dev->gyroCfg.power = Bmx160_GYRO_SUSPEND_MODE;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	2214      	movs	r2, #20
 801ca74:	751a      	strb	r2, [r3, #20]
  dev->gyroCfg.range = Bmx160_GYRO_RANGE_250_DPS;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	2203      	movs	r2, #3
 801ca7a:	759a      	strb	r2, [r3, #22]
  dev->accelCfg.bw = Bmx160_ACCEL_BW_NORMAL_AVG4;
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2202      	movs	r2, #2
 801ca80:	73da      	strb	r2, [r3, #15]
  dev->accelCfg.odr = Bmx160_ACCEL_ODR_100HZ;
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	2208      	movs	r2, #8
 801ca86:	735a      	strb	r2, [r3, #13]
  dev->accelCfg.power = Bmx160_ACCEL_SUSPEND_MODE;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	2210      	movs	r2, #16
 801ca8c:	731a      	strb	r2, [r3, #12]
  dev->accelCfg.range = Bmx160_ACCEL_RANGE_2G;
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	2203      	movs	r2, #3
 801ca92:	739a      	strb	r2, [r3, #14]


  dev->prevMagnCfg = dev->magnCfg;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	687a      	ldr	r2, [r7, #4]
 801ca98:	6852      	ldr	r2, [r2, #4]
 801ca9a:	609a      	str	r2, [r3, #8]
  dev->prevGyroCfg = dev->gyroCfg;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	687a      	ldr	r2, [r7, #4]
 801caa0:	6952      	ldr	r2, [r2, #20]
 801caa2:	619a      	str	r2, [r3, #24]
  dev->prevAccelCfg = dev->accelCfg;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	687a      	ldr	r2, [r7, #4]
 801caa8:	68d2      	ldr	r2, [r2, #12]
 801caaa:	611a      	str	r2, [r3, #16]
}
 801caac:	bf00      	nop
 801caae:	370c      	adds	r7, #12
 801cab0:	46bd      	mov	sp, r7
 801cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab6:	4770      	bx	lr

0801cab8 <Bmx160_setMagnConf>:

void Bmx160_setMagnConf()
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	af00      	add	r7, sp, #0
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x80);
 801cabc:	2180      	movs	r1, #128	; 0x80
 801cabe:	204c      	movs	r0, #76	; 0x4c
 801cac0:	f000 f986 	bl	801cdd0 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 801cac4:	4b1a      	ldr	r3, [pc, #104]	; (801cb30 <Bmx160_setMagnConf+0x78>)
 801cac6:	6a1b      	ldr	r3, [r3, #32]
 801cac8:	2096      	movs	r0, #150	; 0x96
 801caca:	4798      	blx	r3
    // Sleep mode
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x01);
 801cacc:	2101      	movs	r1, #1
 801cace:	204f      	movs	r0, #79	; 0x4f
 801cad0:	f000 f97e 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4B);
 801cad4:	214b      	movs	r1, #75	; 0x4b
 801cad6:	204e      	movs	r0, #78	; 0x4e
 801cad8:	f000 f97a 	bl	801cdd0 <Bmx160_writeBmxReg>
    // REPXY regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x04);
 801cadc:	2104      	movs	r1, #4
 801cade:	204f      	movs	r0, #79	; 0x4f
 801cae0:	f000 f976 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x51);
 801cae4:	2151      	movs	r1, #81	; 0x51
 801cae6:	204e      	movs	r0, #78	; 0x4e
 801cae8:	f000 f972 	bl	801cdd0 <Bmx160_writeBmxReg>
    // REPZ regular preset
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x0E);
 801caec:	210e      	movs	r1, #14
 801caee:	204f      	movs	r0, #79	; 0x4f
 801caf0:	f000 f96e 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x52);
 801caf4:	2152      	movs	r1, #82	; 0x52
 801caf6:	204e      	movs	r0, #78	; 0x4e
 801caf8:	f000 f96a 	bl	801cdd0 <Bmx160_writeBmxReg>

    Bmx160_writeBmxReg(Bmx160_MAGN_IF_3_ADDR, 0x02);
 801cafc:	2102      	movs	r1, #2
 801cafe:	204f      	movs	r0, #79	; 0x4f
 801cb00:	f000 f966 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_2_ADDR, 0x4C);
 801cb04:	214c      	movs	r1, #76	; 0x4c
 801cb06:	204e      	movs	r0, #78	; 0x4e
 801cb08:	f000 f962 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_1_ADDR, 0x42);
 801cb0c:	2142      	movs	r1, #66	; 0x42
 801cb0e:	204d      	movs	r0, #77	; 0x4d
 801cb10:	f000 f95e 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_CONFIG_ADDR, Bmx160_MAGN_ODR_100HZ);
 801cb14:	2108      	movs	r1, #8
 801cb16:	2044      	movs	r0, #68	; 0x44
 801cb18:	f000 f95a 	bl	801cdd0 <Bmx160_writeBmxReg>
    Bmx160_writeBmxReg(Bmx160_MAGN_IF_0_ADDR, 0x03);
 801cb1c:	2103      	movs	r1, #3
 801cb1e:	204c      	movs	r0, #76	; 0x4c
 801cb20:	f000 f956 	bl	801cdd0 <Bmx160_writeBmxReg>
    Obmx160.delayMs(150);
 801cb24:	4b02      	ldr	r3, [pc, #8]	; (801cb30 <Bmx160_setMagnConf+0x78>)
 801cb26:	6a1b      	ldr	r3, [r3, #32]
 801cb28:	2096      	movs	r0, #150	; 0x96
 801cb2a:	4798      	blx	r3
}
 801cb2c:	bf00      	nop
 801cb2e:	bd80      	pop	{r7, pc}
 801cb30:	2400e10c 	.word	0x2400e10c

0801cb34 <Bmx160_getAllData>:

void Bmx160_getAllData(sBmx160SensorData_t *magn, sBmx160SensorData_t *gyro, sBmx160SensorData_t *accel){
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b08e      	sub	sp, #56	; 0x38
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	60f8      	str	r0, [r7, #12]
 801cb3c:	60b9      	str	r1, [r7, #8]
 801cb3e:	607a      	str	r2, [r7, #4]

    uint8_t data[23] = {0};
 801cb40:	2300      	movs	r3, #0
 801cb42:	613b      	str	r3, [r7, #16]
 801cb44:	f107 0314 	add.w	r3, r7, #20
 801cb48:	2200      	movs	r2, #0
 801cb4a:	601a      	str	r2, [r3, #0]
 801cb4c:	605a      	str	r2, [r3, #4]
 801cb4e:	609a      	str	r2, [r3, #8]
 801cb50:	60da      	str	r2, [r3, #12]
 801cb52:	f8c3 200f 	str.w	r2, [r3, #15]
    int16_t x=0,y=0,z=0;
 801cb56:	2300      	movs	r3, #0
 801cb58:	86fb      	strh	r3, [r7, #54]	; 0x36
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801cb5e:	2300      	movs	r3, #0
 801cb60:	867b      	strh	r3, [r7, #50]	; 0x32
    static int16_t old_x=0, old_y=0, old_z=0;
    uint32_t time = 0;
 801cb62:	2300      	movs	r3, #0
 801cb64:	62fb      	str	r3, [r7, #44]	; 0x2c
    float time_f;
    Bmx160_readReg(Bmx160_MAG_DATA_ADDR, data, 23);
 801cb66:	f107 0310 	add.w	r3, r7, #16
 801cb6a:	2217      	movs	r2, #23
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	2004      	movs	r0, #4
 801cb70:	f000 f955 	bl	801ce1e <Bmx160_readReg>
    time = (uint32_t) ((uint32_t)(((uint16_t)data[22] << 8) | data[21]) << 8 | data[20]);
 801cb74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cb78:	021b      	lsls	r3, r3, #8
 801cb7a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801cb7e:	4313      	orrs	r3, r2
 801cb80:	021b      	lsls	r3, r3, #8
 801cb82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801cb86:	4313      	orrs	r3, r2
 801cb88:	62fb      	str	r3, [r7, #44]	; 0x2c
    time_f = ((float)(time)) * 0.039f;
 801cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb8c:	ee07 3a90 	vmov	s15, r3
 801cb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cb94:	ed9f 7a82 	vldr	s14, [pc, #520]	; 801cda0 <Bmx160_getAllData+0x26c>
 801cb98:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cb9c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    if(magn){
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d070      	beq.n	801cc88 <Bmx160_getAllData+0x154>
    	x = (int16_t) (((uint16_t)data[1] << 8) | data[0]);
 801cba6:	7c7b      	ldrb	r3, [r7, #17]
 801cba8:	021b      	lsls	r3, r3, #8
 801cbaa:	b21a      	sxth	r2, r3
 801cbac:	7c3b      	ldrb	r3, [r7, #16]
 801cbae:	b21b      	sxth	r3, r3
 801cbb0:	4313      	orrs	r3, r2
 801cbb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[3] << 8) | data[2]);
 801cbb4:	7cfb      	ldrb	r3, [r7, #19]
 801cbb6:	021b      	lsls	r3, r3, #8
 801cbb8:	b21a      	sxth	r2, r3
 801cbba:	7cbb      	ldrb	r3, [r7, #18]
 801cbbc:	b21b      	sxth	r3, r3
 801cbbe:	4313      	orrs	r3, r2
 801cbc0:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[5] << 8) | data[4]);
 801cbc2:	7d7b      	ldrb	r3, [r7, #21]
 801cbc4:	021b      	lsls	r3, r3, #8
 801cbc6:	b21a      	sxth	r2, r3
 801cbc8:	7d3b      	ldrb	r3, [r7, #20]
 801cbca:	b21b      	sxth	r3, r3
 801cbcc:	4313      	orrs	r3, r2
 801cbce:	867b      	strh	r3, [r7, #50]	; 0x32
        if(x == old_x && y == old_y && z == old_z)
 801cbd0:	4b74      	ldr	r3, [pc, #464]	; (801cda4 <Bmx160_getAllData+0x270>)
 801cbd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cbd6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d121      	bne.n	801cc22 <Bmx160_getAllData+0xee>
 801cbde:	4b72      	ldr	r3, [pc, #456]	; (801cda8 <Bmx160_getAllData+0x274>)
 801cbe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cbe4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801cbe8:	429a      	cmp	r2, r3
 801cbea:	d11a      	bne.n	801cc22 <Bmx160_getAllData+0xee>
 801cbec:	4b6f      	ldr	r3, [pc, #444]	; (801cdac <Bmx160_getAllData+0x278>)
 801cbee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cbf2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801cbf6:	429a      	cmp	r2, r3
 801cbf8:	d113      	bne.n	801cc22 <Bmx160_getAllData+0xee>
        	LOG("ERROR: X: %d, Y: %d, Z: %d", x, y, z);
 801cbfa:	f7e5 fb39 	bl	8002270 <HAL_GetTick>
 801cbfe:	4601      	mov	r1, r0
 801cc00:	23a0      	movs	r3, #160	; 0xa0
 801cc02:	4a6b      	ldr	r2, [pc, #428]	; (801cdb0 <Bmx160_getAllData+0x27c>)
 801cc04:	486b      	ldr	r0, [pc, #428]	; (801cdb4 <Bmx160_getAllData+0x280>)
 801cc06:	f001 fa53 	bl	801e0b0 <iprintf>
 801cc0a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 801cc0e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801cc12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cc16:	4868      	ldr	r0, [pc, #416]	; (801cdb8 <Bmx160_getAllData+0x284>)
 801cc18:	f001 fa4a 	bl	801e0b0 <iprintf>
 801cc1c:	4867      	ldr	r0, [pc, #412]	; (801cdbc <Bmx160_getAllData+0x288>)
 801cc1e:	f001 fa47 	bl	801e0b0 <iprintf>
        old_x = x; old_y = y; old_z = z;
 801cc22:	4a60      	ldr	r2, [pc, #384]	; (801cda4 <Bmx160_getAllData+0x270>)
 801cc24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cc26:	8013      	strh	r3, [r2, #0]
 801cc28:	4a5f      	ldr	r2, [pc, #380]	; (801cda8 <Bmx160_getAllData+0x274>)
 801cc2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801cc2c:	8013      	strh	r3, [r2, #0]
 801cc2e:	4a5f      	ldr	r2, [pc, #380]	; (801cdac <Bmx160_getAllData+0x278>)
 801cc30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801cc32:	8013      	strh	r3, [r2, #0]
        //printf("Raw:%d,%d,%d,%d,%d,%d,%d,%d,%d\n\r", 0, 0, 0, 0, 0, 0, x, y, z);
        magn->x = x * Bmx160_MAGN_UT_LSB_XY;
 801cc34:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cc38:	ee07 3a90 	vmov	s15, r3
 801cc3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc40:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 801cdc0 <Bmx160_getAllData+0x28c>
 801cc44:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	edc3 7a00 	vstr	s15, [r3]
        magn->y = y * Bmx160_MAGN_UT_LSB_XY;
 801cc4e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cc52:	ee07 3a90 	vmov	s15, r3
 801cc56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc5a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801cdc0 <Bmx160_getAllData+0x28c>
 801cc5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	edc3 7a01 	vstr	s15, [r3, #4]
        magn->z = z * Bmx160_MAGN_UT_LSB_Z;
 801cc68:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cc6c:	ee07 3a90 	vmov	s15, r3
 801cc70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc74:	ed9f 7a53 	vldr	s14, [pc, #332]	; 801cdc4 <Bmx160_getAllData+0x290>
 801cc78:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	edc3 7a02 	vstr	s15, [r3, #8]
//        magn->x = x;
//		magn->y = y;
//		magn->z = z;
        magn->sensortime = time_f;
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc86:	60da      	str	r2, [r3, #12]
    }
    if(gyro){
 801cc88:	68bb      	ldr	r3, [r7, #8]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d03e      	beq.n	801cd0c <Bmx160_getAllData+0x1d8>
        x = (int16_t) (((uint16_t)data[9] << 8) | data[8]);
 801cc8e:	7e7b      	ldrb	r3, [r7, #25]
 801cc90:	021b      	lsls	r3, r3, #8
 801cc92:	b21a      	sxth	r2, r3
 801cc94:	7e3b      	ldrb	r3, [r7, #24]
 801cc96:	b21b      	sxth	r3, r3
 801cc98:	4313      	orrs	r3, r2
 801cc9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[11] << 8) | data[10]);
 801cc9c:	7efb      	ldrb	r3, [r7, #27]
 801cc9e:	021b      	lsls	r3, r3, #8
 801cca0:	b21a      	sxth	r2, r3
 801cca2:	7ebb      	ldrb	r3, [r7, #26]
 801cca4:	b21b      	sxth	r3, r3
 801cca6:	4313      	orrs	r3, r2
 801cca8:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[13] << 8) | data[12]);
 801ccaa:	7f7b      	ldrb	r3, [r7, #29]
 801ccac:	021b      	lsls	r3, r3, #8
 801ccae:	b21a      	sxth	r2, r3
 801ccb0:	7f3b      	ldrb	r3, [r7, #28]
 801ccb2:	b21b      	sxth	r3, r3
 801ccb4:	4313      	orrs	r3, r2
 801ccb6:	867b      	strh	r3, [r7, #50]	; 0x32
        gyro->x = x * gyroRange;
 801ccb8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ccbc:	ee07 3a90 	vmov	s15, r3
 801ccc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccc4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801cdc8 <Bmx160_getAllData+0x294>
 801ccc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	edc3 7a00 	vstr	s15, [r3]
        gyro->y = y * gyroRange;
 801ccd2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ccd6:	ee07 3a90 	vmov	s15, r3
 801ccda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccde:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801cdc8 <Bmx160_getAllData+0x294>
 801cce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cce6:	68bb      	ldr	r3, [r7, #8]
 801cce8:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro->z = z * gyroRange;
 801ccec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801ccf0:	ee07 3a90 	vmov	s15, r3
 801ccf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ccf8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801cdc8 <Bmx160_getAllData+0x294>
 801ccfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cd00:	68bb      	ldr	r3, [r7, #8]
 801cd02:	edc3 7a02 	vstr	s15, [r3, #8]
        gyro->sensortime = time_f;
 801cd06:	68bb      	ldr	r3, [r7, #8]
 801cd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd0a:	60da      	str	r2, [r3, #12]
    }
    if(accel){
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d042      	beq.n	801cd98 <Bmx160_getAllData+0x264>
        x = (int16_t) (((uint16_t)data[15] << 8) | data[14]);
 801cd12:	7ffb      	ldrb	r3, [r7, #31]
 801cd14:	021b      	lsls	r3, r3, #8
 801cd16:	b21a      	sxth	r2, r3
 801cd18:	7fbb      	ldrb	r3, [r7, #30]
 801cd1a:	b21b      	sxth	r3, r3
 801cd1c:	4313      	orrs	r3, r2
 801cd1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        y = (int16_t) (((uint16_t)data[17] << 8) | data[16]);
 801cd20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801cd24:	021b      	lsls	r3, r3, #8
 801cd26:	b21a      	sxth	r2, r3
 801cd28:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cd2c:	b21b      	sxth	r3, r3
 801cd2e:	4313      	orrs	r3, r2
 801cd30:	86bb      	strh	r3, [r7, #52]	; 0x34
        z = (int16_t) (((uint16_t)data[19] << 8) | data[18]);
 801cd32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cd36:	021b      	lsls	r3, r3, #8
 801cd38:	b21a      	sxth	r2, r3
 801cd3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cd3e:	b21b      	sxth	r3, r3
 801cd40:	4313      	orrs	r3, r2
 801cd42:	867b      	strh	r3, [r7, #50]	; 0x32
        accel->x = x * accelRange;
 801cd44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801cd48:	ee07 3a90 	vmov	s15, r3
 801cd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd50:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801cdcc <Bmx160_getAllData+0x298>
 801cd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	edc3 7a00 	vstr	s15, [r3]
        accel->y = y * accelRange;
 801cd5e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801cd62:	ee07 3a90 	vmov	s15, r3
 801cd66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd6a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801cdcc <Bmx160_getAllData+0x298>
 801cd6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	edc3 7a01 	vstr	s15, [r3, #4]
        accel->z = z * accelRange;
 801cd78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801cd7c:	ee07 3a90 	vmov	s15, r3
 801cd80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cd84:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801cdcc <Bmx160_getAllData+0x298>
 801cd88:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	edc3 7a02 	vstr	s15, [r3, #8]
        accel->sensortime = time_f;
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cd96:	60da      	str	r2, [r3, #12]
    }
}
 801cd98:	bf00      	nop
 801cd9a:	3738      	adds	r7, #56	; 0x38
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	bd80      	pop	{r7, pc}
 801cda0:	3d1fbe77 	.word	0x3d1fbe77
 801cda4:	2400e130 	.word	0x2400e130
 801cda8:	2400e132 	.word	0x2400e132
 801cdac:	2400e134 	.word	0x2400e134
 801cdb0:	08020594 	.word	0x08020594
 801cdb4:	0802036c 	.word	0x0802036c
 801cdb8:	0802037c 	.word	0x0802037c
 801cdbc:	08020398 	.word	0x08020398
 801cdc0:	3eb3b107 	.word	0x3eb3b107
 801cdc4:	3fa2c3ca 	.word	0x3fa2c3ca
 801cdc8:	3bf9c1f8 	.word	0x3bf9c1f8
 801cdcc:	3a1ce7f0 	.word	0x3a1ce7f0

0801cdd0 <Bmx160_writeBmxReg>:

void Bmx160_writeBmxReg(uint8_t reg, uint8_t value)
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b084      	sub	sp, #16
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	460a      	mov	r2, r1
 801cdda:	71fb      	strb	r3, [r7, #7]
 801cddc:	4613      	mov	r3, r2
 801cdde:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[1] = {value};
 801cde0:	79bb      	ldrb	r3, [r7, #6]
 801cde2:	733b      	strb	r3, [r7, #12]
    Bmx160_writeReg(reg, buffer, 1);
 801cde4:	f107 010c 	add.w	r1, r7, #12
 801cde8:	79fb      	ldrb	r3, [r7, #7]
 801cdea:	2201      	movs	r2, #1
 801cdec:	4618      	mov	r0, r3
 801cdee:	f000 f804 	bl	801cdfa <Bmx160_writeReg>
}
 801cdf2:	bf00      	nop
 801cdf4:	3710      	adds	r7, #16
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	bd80      	pop	{r7, pc}

0801cdfa <Bmx160_writeReg>:

void Bmx160_writeReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801cdfa:	b580      	push	{r7, lr}
 801cdfc:	b082      	sub	sp, #8
 801cdfe:	af00      	add	r7, sp, #0
 801ce00:	4603      	mov	r3, r0
 801ce02:	6039      	str	r1, [r7, #0]
 801ce04:	71fb      	strb	r3, [r7, #7]
 801ce06:	4613      	mov	r3, r2
 801ce08:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Write(0, reg, pBuf, len);
 801ce0a:	88bb      	ldrh	r3, [r7, #4]
 801ce0c:	79f9      	ldrb	r1, [r7, #7]
 801ce0e:	683a      	ldr	r2, [r7, #0]
 801ce10:	2000      	movs	r0, #0
 801ce12:	f000 f85f 	bl	801ced4 <SensorAPI_I2Cx_Write>
}
 801ce16:	bf00      	nop
 801ce18:	3708      	adds	r7, #8
 801ce1a:	46bd      	mov	sp, r7
 801ce1c:	bd80      	pop	{r7, pc}

0801ce1e <Bmx160_readReg>:

void Bmx160_readReg(uint8_t reg, uint8_t *pBuf, uint16_t len)
{
 801ce1e:	b580      	push	{r7, lr}
 801ce20:	b082      	sub	sp, #8
 801ce22:	af00      	add	r7, sp, #0
 801ce24:	4603      	mov	r3, r0
 801ce26:	6039      	str	r1, [r7, #0]
 801ce28:	71fb      	strb	r3, [r7, #7]
 801ce2a:	4613      	mov	r3, r2
 801ce2c:	80bb      	strh	r3, [r7, #4]
    SensorAPI_I2Cx_Read(0, reg, pBuf, len);
 801ce2e:	88bb      	ldrh	r3, [r7, #4]
 801ce30:	79f9      	ldrb	r1, [r7, #7]
 801ce32:	683a      	ldr	r2, [r7, #0]
 801ce34:	2000      	movs	r0, #0
 801ce36:	f000 f82b 	bl	801ce90 <SensorAPI_I2Cx_Read>
}
 801ce3a:	bf00      	nop
 801ce3c:	3708      	adds	r7, #8
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	bd80      	pop	{r7, pc}

0801ce42 <Bmx160_scan>:

uint8_t Bmx160_scan()
{
 801ce42:	b480      	push	{r7}
 801ce44:	af00      	add	r7, sp, #0
    return TRUE;
 801ce46:	2301      	movs	r3, #1
}
 801ce48:	4618      	mov	r0, r3
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce50:	4770      	bx	lr
	...

0801ce54 <DelayUs>:

uint8_t GTXBuffer[512], GRXBuffer[2048];


void DelayUs(uint32_t Delay)
{
 801ce54:	b480      	push	{r7}
 801ce56:	b085      	sub	sp, #20
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	while(--Delay)
 801ce5c:	e009      	b.n	801ce72 <DelayUs+0x1e>
	{
		for(i = 0; i < 84000; i++)
 801ce5e:	2300      	movs	r3, #0
 801ce60:	60fb      	str	r3, [r7, #12]
 801ce62:	e002      	b.n	801ce6a <DelayUs+0x16>
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	3301      	adds	r3, #1
 801ce68:	60fb      	str	r3, [r7, #12]
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	4a07      	ldr	r2, [pc, #28]	; (801ce8c <DelayUs+0x38>)
 801ce6e:	4293      	cmp	r3, r2
 801ce70:	d9f8      	bls.n	801ce64 <DelayUs+0x10>
	while(--Delay)
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	3b01      	subs	r3, #1
 801ce76:	607b      	str	r3, [r7, #4]
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d1ef      	bne.n	801ce5e <DelayUs+0xa>
		{
			;
		}
	}
}
 801ce7e:	bf00      	nop
 801ce80:	bf00      	nop
 801ce82:	3714      	adds	r7, #20
 801ce84:	46bd      	mov	sp, r7
 801ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce8a:	4770      	bx	lr
 801ce8c:	0001481f 	.word	0x0001481f

0801ce90 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b084      	sub	sp, #16
 801ce94:	af02      	add	r7, sp, #8
 801ce96:	603a      	str	r2, [r7, #0]
 801ce98:	461a      	mov	r2, r3
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	71fb      	strb	r3, [r7, #7]
 801ce9e:	460b      	mov	r3, r1
 801cea0:	71bb      	strb	r3, [r7, #6]
 801cea2:	4613      	mov	r3, r2
 801cea4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 801cea6:	1dba      	adds	r2, r7, #6
 801cea8:	2364      	movs	r3, #100	; 0x64
 801ceaa:	9300      	str	r3, [sp, #0]
 801ceac:	2301      	movs	r3, #1
 801ceae:	21d0      	movs	r1, #208	; 0xd0
 801ceb0:	4807      	ldr	r0, [pc, #28]	; (801ced0 <SensorAPI_I2Cx_Read+0x40>)
 801ceb2:	f7e8 ffdf 	bl	8005e74 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 801ceb6:	88bb      	ldrh	r3, [r7, #4]
 801ceb8:	2264      	movs	r2, #100	; 0x64
 801ceba:	9200      	str	r2, [sp, #0]
 801cebc:	683a      	ldr	r2, [r7, #0]
 801cebe:	21d0      	movs	r1, #208	; 0xd0
 801cec0:	4803      	ldr	r0, [pc, #12]	; (801ced0 <SensorAPI_I2Cx_Read+0x40>)
 801cec2:	f7e9 f8cb 	bl	800605c <HAL_I2C_Master_Receive>
	return 0;
 801cec6:	2300      	movs	r3, #0
}
 801cec8:	4618      	mov	r0, r3
 801ceca:	3708      	adds	r7, #8
 801cecc:	46bd      	mov	sp, r7
 801cece:	bd80      	pop	{r7, pc}
 801ced0:	24008528 	.word	0x24008528

0801ced4 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af02      	add	r7, sp, #8
 801ceda:	603a      	str	r2, [r7, #0]
 801cedc:	461a      	mov	r2, r3
 801cede:	4603      	mov	r3, r0
 801cee0:	71fb      	strb	r3, [r7, #7]
 801cee2:	460b      	mov	r3, r1
 801cee4:	71bb      	strb	r3, [r7, #6]
 801cee6:	4613      	mov	r3, r2
 801cee8:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 801ceea:	4a0c      	ldr	r2, [pc, #48]	; (801cf1c <SensorAPI_I2Cx_Write+0x48>)
 801ceec:	79bb      	ldrb	r3, [r7, #6]
 801ceee:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 801cef0:	88bb      	ldrh	r3, [r7, #4]
 801cef2:	461a      	mov	r2, r3
 801cef4:	6839      	ldr	r1, [r7, #0]
 801cef6:	480a      	ldr	r0, [pc, #40]	; (801cf20 <SensorAPI_I2Cx_Write+0x4c>)
 801cef8:	f001 f9af 	bl	801e25a <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 801cefc:	88bb      	ldrh	r3, [r7, #4]
 801cefe:	3301      	adds	r3, #1
 801cf00:	b29b      	uxth	r3, r3
 801cf02:	2264      	movs	r2, #100	; 0x64
 801cf04:	9200      	str	r2, [sp, #0]
 801cf06:	4a05      	ldr	r2, [pc, #20]	; (801cf1c <SensorAPI_I2Cx_Write+0x48>)
 801cf08:	21d0      	movs	r1, #208	; 0xd0
 801cf0a:	4806      	ldr	r0, [pc, #24]	; (801cf24 <SensorAPI_I2Cx_Write+0x50>)
 801cf0c:	f7e8 ffb2 	bl	8005e74 <HAL_I2C_Master_Transmit>
	return 0;
 801cf10:	2300      	movs	r3, #0
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	3708      	adds	r7, #8
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	bf00      	nop
 801cf1c:	2400e138 	.word	0x2400e138
 801cf20:	2400e139 	.word	0x2400e139
 801cf24:	24008528 	.word	0x24008528

0801cf28 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart, DelayFunc delayFunc) {
 801cf28:	b480      	push	{r7}
 801cf2a:	b085      	sub	sp, #20
 801cf2c:	af00      	add	r7, sp, #0
 801cf2e:	60f8      	str	r0, [r7, #12]
 801cf30:	60b9      	str	r1, [r7, #8]
 801cf32:	607a      	str	r2, [r7, #4]
	GNSS->huart = huart;
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	68ba      	ldr	r2, [r7, #8]
 801cf38:	601a      	str	r2, [r3, #0]
	GNSS->delayFunc = delayFunc;
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	687a      	ldr	r2, [r7, #4]
 801cf3e:	605a      	str	r2, [r3, #4]
	GNSS->year = 0;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	2200      	movs	r2, #0
 801cf44:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
	GNSS->month = 0;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	2200      	movs	r2, #0
 801cf4c:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
	GNSS->day = 0;
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	2200      	movs	r2, #0
 801cf54:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
	GNSS->hour = 0;
 801cf58:	68fb      	ldr	r3, [r7, #12]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
	GNSS->min = 0;
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	2200      	movs	r2, #0
 801cf64:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
	GNSS->sec = 0;
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	GNSS->fixType = 0;
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	2200      	movs	r2, #0
 801cf74:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
	GNSS->lon = 0;
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->lat = 0;
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	2200      	movs	r2, #0
 801cf84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->height = 0;
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
	GNSS->hMSL = 0;
 801cf90:	68fb      	ldr	r3, [r7, #12]
 801cf92:	2200      	movs	r2, #0
 801cf94:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	GNSS->hAcc = 0;
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
	GNSS->vAcc = 0;
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	GNSS->gSpeed = 0;
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	2200      	movs	r2, #0
 801cfac:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	GNSS->headMot = 0;
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	2200      	movs	r2, #0
 801cfb4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}
 801cfb8:	bf00      	nop
 801cfba:	3714      	adds	r7, #20
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc2:	4770      	bx	lr
 801cfc4:	0000      	movs	r0, r0
	...

0801cfc8 <GNSS_ParsePVTDataPTR>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTDataPTR(GNSS_StateHandle *GNSS) {
 801cfc8:	b480      	push	{r7}
 801cfca:	b091      	sub	sp, #68	; 0x44
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
	uint8_t* bufferPtr = GNSS_Handle.uartWorkingBuffer + UBX_MESSAGE_OFFSET;
 801cfd0:	4ba1      	ldr	r3, [pc, #644]	; (801d258 <GNSS_ParsePVTDataPTR+0x290>)
 801cfd2:	60fb      	str	r3, [r7, #12]

	for (int var = 0; var < 4; ++var) {
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cfd8:	e018      	b.n	801d00c <GNSS_ParsePVTDataPTR+0x44>
		iLong.bytes[var] = bufferPtr[var + 24];
 801cfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cfdc:	3318      	adds	r3, #24
 801cfde:	68fa      	ldr	r2, [r7, #12]
 801cfe0:	4413      	add	r3, r2
 801cfe2:	7819      	ldrb	r1, [r3, #0]
 801cfe4:	4a9d      	ldr	r2, [pc, #628]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801cfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cfe8:	4413      	add	r3, r2
 801cfea:	460a      	mov	r2, r1
 801cfec:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= bufferPtr[var + 24];
 801cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cff0:	3318      	adds	r3, #24
 801cff2:	68fa      	ldr	r2, [r7, #12]
 801cff4:	4413      	add	r3, r2
 801cff6:	7819      	ldrb	r1, [r3, #0]
 801cff8:	687a      	ldr	r2, [r7, #4]
 801cffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cffc:	4413      	add	r3, r2
 801cffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801d002:	460a      	mov	r2, r1
 801d004:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d008:	3301      	adds	r3, #1
 801d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d00e:	2b03      	cmp	r3, #3
 801d010:	dde3      	ble.n	801cfda <GNSS_ParsePVTDataPTR+0x12>
	}
	GNSS->lon = iLong.iLong;
 801d012:	4b92      	ldr	r3, [pc, #584]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d014:	681a      	ldr	r2, [r3, #0]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	GNSS->fLon=((float)iLong.iLong)/10000000.0;
 801d01c:	4b8f      	ldr	r3, [pc, #572]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	ee07 3a90 	vmov	s15, r3
 801d024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d028:	eddf 6a8d 	vldr	s13, [pc, #564]	; 801d260 <GNSS_ParsePVTDataPTR+0x298>
 801d02c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801d036:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 801d03a:	2300      	movs	r3, #0
 801d03c:	63bb      	str	r3, [r7, #56]	; 0x38
 801d03e:	e018      	b.n	801d072 <GNSS_ParsePVTDataPTR+0xaa>
		iLong.bytes[var] = bufferPtr[var + 28];
 801d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d042:	331c      	adds	r3, #28
 801d044:	68fa      	ldr	r2, [r7, #12]
 801d046:	4413      	add	r3, r2
 801d048:	7819      	ldrb	r1, [r3, #0]
 801d04a:	4a84      	ldr	r2, [pc, #528]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d04e:	4413      	add	r3, r2
 801d050:	460a      	mov	r2, r1
 801d052:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]= bufferPtr[var + 28];
 801d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d056:	331c      	adds	r3, #28
 801d058:	68fa      	ldr	r2, [r7, #12]
 801d05a:	4413      	add	r3, r2
 801d05c:	7819      	ldrb	r1, [r3, #0]
 801d05e:	687a      	ldr	r2, [r7, #4]
 801d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d062:	4413      	add	r3, r2
 801d064:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801d068:	460a      	mov	r2, r1
 801d06a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d06e:	3301      	adds	r3, #1
 801d070:	63bb      	str	r3, [r7, #56]	; 0x38
 801d072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d074:	2b03      	cmp	r3, #3
 801d076:	dde3      	ble.n	801d040 <GNSS_ParsePVTDataPTR+0x78>
	}
	GNSS->lat = iLong.iLong;
 801d078:	4b78      	ldr	r3, [pc, #480]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d07a:	681a      	ldr	r2, [r3, #0]
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
	GNSS->fLat=((float)iLong.iLong)/10000000.0;
 801d082:	4b76      	ldr	r3, [pc, #472]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	ee07 3a90 	vmov	s15, r3
 801d08a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d08e:	eddf 6a74 	vldr	s13, [pc, #464]	; 801d260 <GNSS_ParsePVTDataPTR+0x298>
 801d092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801d09c:	edc3 7a00 	vstr	s15, [r3]
	for (int var = 0; var < 4; ++var) {
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	637b      	str	r3, [r7, #52]	; 0x34
 801d0a4:	e00c      	b.n	801d0c0 <GNSS_ParsePVTDataPTR+0xf8>
		iLong.bytes[var] = bufferPtr[var + 32];
 801d0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0a8:	3320      	adds	r3, #32
 801d0aa:	68fa      	ldr	r2, [r7, #12]
 801d0ac:	4413      	add	r3, r2
 801d0ae:	7819      	ldrb	r1, [r3, #0]
 801d0b0:	4a6a      	ldr	r2, [pc, #424]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0b4:	4413      	add	r3, r2
 801d0b6:	460a      	mov	r2, r1
 801d0b8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0bc:	3301      	adds	r3, #1
 801d0be:	637b      	str	r3, [r7, #52]	; 0x34
 801d0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0c2:	2b03      	cmp	r3, #3
 801d0c4:	ddef      	ble.n	801d0a6 <GNSS_ParsePVTDataPTR+0xde>
	}
	GNSS->height = iLong.iLong;
 801d0c6:	4b65      	ldr	r3, [pc, #404]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d0c8:	681a      	ldr	r2, [r3, #0]
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	for (int var = 0; var < 4; ++var) {
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	633b      	str	r3, [r7, #48]	; 0x30
 801d0d4:	e018      	b.n	801d108 <GNSS_ParsePVTDataPTR+0x140>
		iLong.bytes[var] = bufferPtr[var + 36];
 801d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0d8:	3324      	adds	r3, #36	; 0x24
 801d0da:	68fa      	ldr	r2, [r7, #12]
 801d0dc:	4413      	add	r3, r2
 801d0de:	7819      	ldrb	r1, [r3, #0]
 801d0e0:	4a5e      	ldr	r2, [pc, #376]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0e4:	4413      	add	r3, r2
 801d0e6:	460a      	mov	r2, r1
 801d0e8:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = bufferPtr[var + 36];
 801d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ec:	3324      	adds	r3, #36	; 0x24
 801d0ee:	68fa      	ldr	r2, [r7, #12]
 801d0f0:	4413      	add	r3, r2
 801d0f2:	7819      	ldrb	r1, [r3, #0]
 801d0f4:	687a      	ldr	r2, [r7, #4]
 801d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0f8:	4413      	add	r3, r2
 801d0fa:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801d0fe:	460a      	mov	r2, r1
 801d100:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d104:	3301      	adds	r3, #1
 801d106:	633b      	str	r3, [r7, #48]	; 0x30
 801d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d10a:	2b03      	cmp	r3, #3
 801d10c:	dde3      	ble.n	801d0d6 <GNSS_ParsePVTDataPTR+0x10e>
	}
	GNSS->hMSL = iLong.iLong;
 801d10e:	4b53      	ldr	r3, [pc, #332]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d110:	681a      	ldr	r2, [r3, #0]
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	for (int var = 0; var < 4; ++var) {
 801d118:	2300      	movs	r3, #0
 801d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d11c:	e00c      	b.n	801d138 <GNSS_ParsePVTDataPTR+0x170>
		uLong.bytes[var] = bufferPtr[var + 40];
 801d11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d120:	3328      	adds	r3, #40	; 0x28
 801d122:	68fa      	ldr	r2, [r7, #12]
 801d124:	4413      	add	r3, r2
 801d126:	7819      	ldrb	r1, [r3, #0]
 801d128:	4a4e      	ldr	r2, [pc, #312]	; (801d264 <GNSS_ParsePVTDataPTR+0x29c>)
 801d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d12c:	4413      	add	r3, r2
 801d12e:	460a      	mov	r2, r1
 801d130:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d134:	3301      	adds	r3, #1
 801d136:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13a:	2b03      	cmp	r3, #3
 801d13c:	ddef      	ble.n	801d11e <GNSS_ParsePVTDataPTR+0x156>
	}
	GNSS->hAcc = uLong.uLong;
 801d13e:	4b49      	ldr	r3, [pc, #292]	; (801d264 <GNSS_ParsePVTDataPTR+0x29c>)
 801d140:	681a      	ldr	r2, [r3, #0]
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424

	for (int var = 0; var < 4; ++var) {
 801d148:	2300      	movs	r3, #0
 801d14a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d14c:	e00c      	b.n	801d168 <GNSS_ParsePVTDataPTR+0x1a0>
		uLong.bytes[var] = bufferPtr[var + 44];
 801d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d150:	332c      	adds	r3, #44	; 0x2c
 801d152:	68fa      	ldr	r2, [r7, #12]
 801d154:	4413      	add	r3, r2
 801d156:	7819      	ldrb	r1, [r3, #0]
 801d158:	4a42      	ldr	r2, [pc, #264]	; (801d264 <GNSS_ParsePVTDataPTR+0x29c>)
 801d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d15c:	4413      	add	r3, r2
 801d15e:	460a      	mov	r2, r1
 801d160:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d164:	3301      	adds	r3, #1
 801d166:	62bb      	str	r3, [r7, #40]	; 0x28
 801d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d16a:	2b03      	cmp	r3, #3
 801d16c:	ddef      	ble.n	801d14e <GNSS_ParsePVTDataPTR+0x186>
	}
	GNSS->vAcc = uLong.uLong;
 801d16e:	4b3d      	ldr	r3, [pc, #244]	; (801d264 <GNSS_ParsePVTDataPTR+0x29c>)
 801d170:	681a      	ldr	r2, [r3, #0]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

	for (int var = 0; var < 4; ++var) {
 801d178:	2300      	movs	r3, #0
 801d17a:	627b      	str	r3, [r7, #36]	; 0x24
 801d17c:	e00c      	b.n	801d198 <GNSS_ParsePVTDataPTR+0x1d0>
		iLong.bytes[var] = bufferPtr[var + 48];
 801d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d180:	3330      	adds	r3, #48	; 0x30
 801d182:	68fa      	ldr	r2, [r7, #12]
 801d184:	4413      	add	r3, r2
 801d186:	7819      	ldrb	r1, [r3, #0]
 801d188:	4a34      	ldr	r2, [pc, #208]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18c:	4413      	add	r3, r2
 801d18e:	460a      	mov	r2, r1
 801d190:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d194:	3301      	adds	r3, #1
 801d196:	627b      	str	r3, [r7, #36]	; 0x24
 801d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19a:	2b03      	cmp	r3, #3
 801d19c:	ddef      	ble.n	801d17e <GNSS_ParsePVTDataPTR+0x1b6>
	}
	GNSS->velN = iLong.iLong;
 801d19e:	4b2f      	ldr	r3, [pc, #188]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d1a0:	681a      	ldr	r2, [r3, #0]
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c

	for (int var = 0; var < 4; ++var) {
 801d1a8:	2300      	movs	r3, #0
 801d1aa:	623b      	str	r3, [r7, #32]
 801d1ac:	e00c      	b.n	801d1c8 <GNSS_ParsePVTDataPTR+0x200>
		iLong.bytes[var] = bufferPtr[var + 52];
 801d1ae:	6a3b      	ldr	r3, [r7, #32]
 801d1b0:	3334      	adds	r3, #52	; 0x34
 801d1b2:	68fa      	ldr	r2, [r7, #12]
 801d1b4:	4413      	add	r3, r2
 801d1b6:	7819      	ldrb	r1, [r3, #0]
 801d1b8:	4a28      	ldr	r2, [pc, #160]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d1ba:	6a3b      	ldr	r3, [r7, #32]
 801d1bc:	4413      	add	r3, r2
 801d1be:	460a      	mov	r2, r1
 801d1c0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d1c2:	6a3b      	ldr	r3, [r7, #32]
 801d1c4:	3301      	adds	r3, #1
 801d1c6:	623b      	str	r3, [r7, #32]
 801d1c8:	6a3b      	ldr	r3, [r7, #32]
 801d1ca:	2b03      	cmp	r3, #3
 801d1cc:	ddef      	ble.n	801d1ae <GNSS_ParsePVTDataPTR+0x1e6>
	}
	GNSS->velE = iLong.iLong;
 801d1ce:	4b23      	ldr	r3, [pc, #140]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d1d0:	681a      	ldr	r2, [r3, #0]
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

	for (int var = 0; var < 4; ++var) {
 801d1d8:	2300      	movs	r3, #0
 801d1da:	61fb      	str	r3, [r7, #28]
 801d1dc:	e00c      	b.n	801d1f8 <GNSS_ParsePVTDataPTR+0x230>
		iLong.bytes[var] = bufferPtr[var + 56];
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	3338      	adds	r3, #56	; 0x38
 801d1e2:	68fa      	ldr	r2, [r7, #12]
 801d1e4:	4413      	add	r3, r2
 801d1e6:	7819      	ldrb	r1, [r3, #0]
 801d1e8:	4a1c      	ldr	r2, [pc, #112]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d1ea:	69fb      	ldr	r3, [r7, #28]
 801d1ec:	4413      	add	r3, r2
 801d1ee:	460a      	mov	r2, r1
 801d1f0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	3301      	adds	r3, #1
 801d1f6:	61fb      	str	r3, [r7, #28]
 801d1f8:	69fb      	ldr	r3, [r7, #28]
 801d1fa:	2b03      	cmp	r3, #3
 801d1fc:	ddef      	ble.n	801d1de <GNSS_ParsePVTDataPTR+0x216>
	}
	GNSS->velD = iLong.iLong;
 801d1fe:	4b17      	ldr	r3, [pc, #92]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d200:	681a      	ldr	r2, [r3, #0]
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434


	for (int var = 0; var < 4; ++var) {
 801d208:	2300      	movs	r3, #0
 801d20a:	61bb      	str	r3, [r7, #24]
 801d20c:	e018      	b.n	801d240 <GNSS_ParsePVTDataPTR+0x278>
		iLong.bytes[var] = bufferPtr[var + 60];
 801d20e:	69bb      	ldr	r3, [r7, #24]
 801d210:	333c      	adds	r3, #60	; 0x3c
 801d212:	68fa      	ldr	r2, [r7, #12]
 801d214:	4413      	add	r3, r2
 801d216:	7819      	ldrb	r1, [r3, #0]
 801d218:	4a10      	ldr	r2, [pc, #64]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d21a:	69bb      	ldr	r3, [r7, #24]
 801d21c:	4413      	add	r3, r2
 801d21e:	460a      	mov	r2, r1
 801d220:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = bufferPtr[var + 60];
 801d222:	69bb      	ldr	r3, [r7, #24]
 801d224:	333c      	adds	r3, #60	; 0x3c
 801d226:	68fa      	ldr	r2, [r7, #12]
 801d228:	4413      	add	r3, r2
 801d22a:	7819      	ldrb	r1, [r3, #0]
 801d22c:	687a      	ldr	r2, [r7, #4]
 801d22e:	69bb      	ldr	r3, [r7, #24]
 801d230:	4413      	add	r3, r2
 801d232:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801d236:	460a      	mov	r2, r1
 801d238:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d23a:	69bb      	ldr	r3, [r7, #24]
 801d23c:	3301      	adds	r3, #1
 801d23e:	61bb      	str	r3, [r7, #24]
 801d240:	69bb      	ldr	r3, [r7, #24]
 801d242:	2b03      	cmp	r3, #3
 801d244:	dde3      	ble.n	801d20e <GNSS_ParsePVTDataPTR+0x246>
	}
	GNSS->gSpeed = iLong.iLong;
 801d246:	4b05      	ldr	r3, [pc, #20]	; (801d25c <GNSS_ParsePVTDataPTR+0x294>)
 801d248:	681a      	ldr	r2, [r3, #0]
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

	for (int var = 0; var < 4; ++var) {
 801d250:	2300      	movs	r3, #0
 801d252:	617b      	str	r3, [r7, #20]
 801d254:	e015      	b.n	801d282 <GNSS_ParsePVTDataPTR+0x2ba>
 801d256:	bf00      	nop
 801d258:	2400e352 	.word	0x2400e352
 801d25c:	2400e33c 	.word	0x2400e33c
 801d260:	4b189680 	.word	0x4b189680
 801d264:	2400e338 	.word	0x2400e338
		iLong.bytes[var] = bufferPtr[var + 64];
 801d268:	697b      	ldr	r3, [r7, #20]
 801d26a:	3340      	adds	r3, #64	; 0x40
 801d26c:	68fa      	ldr	r2, [r7, #12]
 801d26e:	4413      	add	r3, r2
 801d270:	7819      	ldrb	r1, [r3, #0]
 801d272:	4a1f      	ldr	r2, [pc, #124]	; (801d2f0 <GNSS_ParsePVTDataPTR+0x328>)
 801d274:	697b      	ldr	r3, [r7, #20]
 801d276:	4413      	add	r3, r2
 801d278:	460a      	mov	r2, r1
 801d27a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d27c:	697b      	ldr	r3, [r7, #20]
 801d27e:	3301      	adds	r3, #1
 801d280:	617b      	str	r3, [r7, #20]
 801d282:	697b      	ldr	r3, [r7, #20]
 801d284:	2b03      	cmp	r3, #3
 801d286:	ddef      	ble.n	801d268 <GNSS_ParsePVTDataPTR+0x2a0>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 801d288:	4b19      	ldr	r3, [pc, #100]	; (801d2f0 <GNSS_ParsePVTDataPTR+0x328>)
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	ee07 3a90 	vmov	s15, r3
 801d290:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d294:	ed9f 6b14 	vldr	d6, [pc, #80]	; 801d2e8 <GNSS_ParsePVTDataPTR+0x320>
 801d298:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d29c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d2a0:	ee17 2a90 	vmov	r2, s15
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

	for (int var = 0; var < 4; ++var) {
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	613b      	str	r3, [r7, #16]
 801d2ae:	e00c      	b.n	801d2ca <GNSS_ParsePVTDataPTR+0x302>
		uLong.bytes[var] = bufferPtr[var + 68];
 801d2b0:	693b      	ldr	r3, [r7, #16]
 801d2b2:	3344      	adds	r3, #68	; 0x44
 801d2b4:	68fa      	ldr	r2, [r7, #12]
 801d2b6:	4413      	add	r3, r2
 801d2b8:	7819      	ldrb	r1, [r3, #0]
 801d2ba:	4a0e      	ldr	r2, [pc, #56]	; (801d2f4 <GNSS_ParsePVTDataPTR+0x32c>)
 801d2bc:	693b      	ldr	r3, [r7, #16]
 801d2be:	4413      	add	r3, r2
 801d2c0:	460a      	mov	r2, r1
 801d2c2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801d2c4:	693b      	ldr	r3, [r7, #16]
 801d2c6:	3301      	adds	r3, #1
 801d2c8:	613b      	str	r3, [r7, #16]
 801d2ca:	693b      	ldr	r3, [r7, #16]
 801d2cc:	2b03      	cmp	r3, #3
 801d2ce:	ddef      	ble.n	801d2b0 <GNSS_ParsePVTDataPTR+0x2e8>
	}
	GNSS->sAcc = uLong.uLong;
 801d2d0:	4b08      	ldr	r3, [pc, #32]	; (801d2f4 <GNSS_ParsePVTDataPTR+0x32c>)
 801d2d2:	681a      	ldr	r2, [r3, #0]
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
}
 801d2da:	bf00      	nop
 801d2dc:	3744      	adds	r7, #68	; 0x44
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e4:	4770      	bx	lr
 801d2e6:	bf00      	nop
 801d2e8:	88e368f1 	.word	0x88e368f1
 801d2ec:	3ee4f8b5 	.word	0x3ee4f8b5
 801d2f0:	2400e33c 	.word	0x2400e33c
 801d2f4:	2400e338 	.word	0x2400e338

0801d2f8 <__cxa_guard_acquire>:
 801d2f8:	6803      	ldr	r3, [r0, #0]
 801d2fa:	07db      	lsls	r3, r3, #31
 801d2fc:	d406      	bmi.n	801d30c <__cxa_guard_acquire+0x14>
 801d2fe:	7843      	ldrb	r3, [r0, #1]
 801d300:	b103      	cbz	r3, 801d304 <__cxa_guard_acquire+0xc>
 801d302:	deff      	udf	#255	; 0xff
 801d304:	2301      	movs	r3, #1
 801d306:	7043      	strb	r3, [r0, #1]
 801d308:	4618      	mov	r0, r3
 801d30a:	4770      	bx	lr
 801d30c:	2000      	movs	r0, #0
 801d30e:	4770      	bx	lr

0801d310 <__cxa_guard_release>:
 801d310:	2301      	movs	r3, #1
 801d312:	6003      	str	r3, [r0, #0]
 801d314:	4770      	bx	lr
	...

0801d318 <sqrtf>:
 801d318:	b508      	push	{r3, lr}
 801d31a:	ed2d 8b02 	vpush	{d8}
 801d31e:	eeb0 8a40 	vmov.f32	s16, s0
 801d322:	f000 f9c3 	bl	801d6ac <__ieee754_sqrtf>
 801d326:	eeb4 8a48 	vcmp.f32	s16, s16
 801d32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d32e:	d60c      	bvs.n	801d34a <sqrtf+0x32>
 801d330:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d350 <sqrtf+0x38>
 801d334:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d33c:	d505      	bpl.n	801d34a <sqrtf+0x32>
 801d33e:	f000 ff5f 	bl	801e200 <__errno>
 801d342:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d346:	2321      	movs	r3, #33	; 0x21
 801d348:	6003      	str	r3, [r0, #0]
 801d34a:	ecbd 8b02 	vpop	{d8}
 801d34e:	bd08      	pop	{r3, pc}
 801d350:	00000000 	.word	0x00000000

0801d354 <sinf_poly>:
 801d354:	07cb      	lsls	r3, r1, #31
 801d356:	d412      	bmi.n	801d37e <sinf_poly+0x2a>
 801d358:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d35c:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801d360:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801d364:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d368:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801d36c:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d370:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d374:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d378:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d37c:	4770      	bx	lr
 801d37e:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801d382:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d386:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801d38a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801d38e:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d392:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801d396:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d39a:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801d39e:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d3a2:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d3a6:	e7e5      	b.n	801d374 <sinf_poly+0x20>

0801d3a8 <sinf>:
 801d3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3aa:	ee10 4a10 	vmov	r4, s0
 801d3ae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d3b2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801d3b6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d3ba:	eef0 7a40 	vmov.f32	s15, s0
 801d3be:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801d3c2:	d218      	bcs.n	801d3f6 <sinf+0x4e>
 801d3c4:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d3c8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801d3cc:	d20a      	bcs.n	801d3e4 <sinf+0x3c>
 801d3ce:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801d3d2:	d103      	bne.n	801d3dc <sinf+0x34>
 801d3d4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801d3d8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801d3dc:	eeb0 0a67 	vmov.f32	s0, s15
 801d3e0:	b003      	add	sp, #12
 801d3e2:	bd30      	pop	{r4, r5, pc}
 801d3e4:	483a      	ldr	r0, [pc, #232]	; (801d4d0 <sinf+0x128>)
 801d3e6:	eeb0 0b46 	vmov.f64	d0, d6
 801d3ea:	2100      	movs	r1, #0
 801d3ec:	b003      	add	sp, #12
 801d3ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d3f2:	f7ff bfaf 	b.w	801d354 <sinf_poly>
 801d3f6:	f240 422e 	movw	r2, #1070	; 0x42e
 801d3fa:	4293      	cmp	r3, r2
 801d3fc:	d824      	bhi.n	801d448 <sinf+0xa0>
 801d3fe:	4b34      	ldr	r3, [pc, #208]	; (801d4d0 <sinf+0x128>)
 801d400:	ed93 7b08 	vldr	d7, [r3, #32]
 801d404:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d408:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d40c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d410:	ee17 1a90 	vmov	r1, s15
 801d414:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801d418:	1609      	asrs	r1, r1, #24
 801d41a:	ee07 1a90 	vmov	s15, r1
 801d41e:	f001 0203 	and.w	r2, r1, #3
 801d422:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d426:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d42a:	ed92 0b00 	vldr	d0, [r2]
 801d42e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801d432:	f011 0f02 	tst.w	r1, #2
 801d436:	eea5 6b47 	vfms.f64	d6, d5, d7
 801d43a:	bf08      	it	eq
 801d43c:	4618      	moveq	r0, r3
 801d43e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d442:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d446:	e7d1      	b.n	801d3ec <sinf+0x44>
 801d448:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d44c:	d237      	bcs.n	801d4be <sinf+0x116>
 801d44e:	4a21      	ldr	r2, [pc, #132]	; (801d4d4 <sinf+0x12c>)
 801d450:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801d454:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801d458:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d45c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801d460:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d464:	6a2a      	ldr	r2, [r5, #32]
 801d466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d46a:	4083      	lsls	r3, r0
 801d46c:	fba3 2002 	umull	r2, r0, r3, r2
 801d470:	692a      	ldr	r2, [r5, #16]
 801d472:	4359      	muls	r1, r3
 801d474:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d478:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801d47c:	0f9d      	lsrs	r5, r3, #30
 801d47e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d482:	1ac9      	subs	r1, r1, r3
 801d484:	f7e3 f912 	bl	80006ac <__aeabi_l2d>
 801d488:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d48c:	4b10      	ldr	r3, [pc, #64]	; (801d4d0 <sinf+0x128>)
 801d48e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801d4c8 <sinf+0x120>
 801d492:	ec41 0b17 	vmov	d7, r0, r1
 801d496:	f004 0203 	and.w	r2, r4, #3
 801d49a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d49e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d4a2:	ed92 7b00 	vldr	d7, [r2]
 801d4a6:	ee20 1b00 	vmul.f64	d1, d0, d0
 801d4aa:	f014 0f02 	tst.w	r4, #2
 801d4ae:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d4b2:	4629      	mov	r1, r5
 801d4b4:	bf08      	it	eq
 801d4b6:	4618      	moveq	r0, r3
 801d4b8:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d4bc:	e796      	b.n	801d3ec <sinf+0x44>
 801d4be:	b003      	add	sp, #12
 801d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d4c4:	f000 b8e3 	b.w	801d68e <__math_invalidf>
 801d4c8:	54442d18 	.word	0x54442d18
 801d4cc:	3c1921fb 	.word	0x3c1921fb
 801d4d0:	08020608 	.word	0x08020608
 801d4d4:	080205a8 	.word	0x080205a8

0801d4d8 <sinf_poly>:
 801d4d8:	07cb      	lsls	r3, r1, #31
 801d4da:	d412      	bmi.n	801d502 <sinf_poly+0x2a>
 801d4dc:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d4e0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801d4e4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801d4e8:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d4ec:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801d4f0:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d4f4:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d4f8:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d4fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d500:	4770      	bx	lr
 801d502:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801d506:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d50a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801d50e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801d512:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d516:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801d51a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d51e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801d522:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d526:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d52a:	e7e5      	b.n	801d4f8 <sinf_poly+0x20>
 801d52c:	0000      	movs	r0, r0
	...

0801d530 <cosf>:
 801d530:	b538      	push	{r3, r4, r5, lr}
 801d532:	ee10 4a10 	vmov	r4, s0
 801d536:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d53a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801d53e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801d542:	d21f      	bcs.n	801d584 <cosf+0x54>
 801d544:	ee27 7b07 	vmul.f64	d7, d7, d7
 801d548:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801d54c:	f0c0 8086 	bcc.w	801d65c <cosf+0x12c>
 801d550:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d554:	4b46      	ldr	r3, [pc, #280]	; (801d670 <cosf+0x140>)
 801d556:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801d55a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801d55e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 801d562:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d566:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801d56a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801d56e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801d572:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d576:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d57a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d57e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d582:	bd38      	pop	{r3, r4, r5, pc}
 801d584:	f240 422e 	movw	r2, #1070	; 0x42e
 801d588:	4293      	cmp	r3, r2
 801d58a:	d829      	bhi.n	801d5e0 <cosf+0xb0>
 801d58c:	4b38      	ldr	r3, [pc, #224]	; (801d670 <cosf+0x140>)
 801d58e:	ed93 6b08 	vldr	d6, [r3, #32]
 801d592:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d596:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801d59a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d59e:	ee16 1a90 	vmov	r1, s13
 801d5a2:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801d5a6:	1609      	asrs	r1, r1, #24
 801d5a8:	ee06 1a90 	vmov	s13, r1
 801d5ac:	f001 0203 	and.w	r2, r1, #3
 801d5b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d5b4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801d5b8:	ed92 0b00 	vldr	d0, [r2]
 801d5bc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 801d5c0:	f011 0f02 	tst.w	r1, #2
 801d5c4:	bf08      	it	eq
 801d5c6:	4618      	moveq	r0, r3
 801d5c8:	f081 0101 	eor.w	r1, r1, #1
 801d5cc:	eea5 7b46 	vfms.f64	d7, d5, d6
 801d5d0:	ee27 1b07 	vmul.f64	d1, d7, d7
 801d5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5d8:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d5dc:	f7ff bf7c 	b.w	801d4d8 <sinf_poly>
 801d5e0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d5e4:	d236      	bcs.n	801d654 <cosf+0x124>
 801d5e6:	4a23      	ldr	r2, [pc, #140]	; (801d674 <cosf+0x144>)
 801d5e8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801d5ec:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801d5f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d5f4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801d5f8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d5fc:	6a2a      	ldr	r2, [r5, #32]
 801d5fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d602:	4083      	lsls	r3, r0
 801d604:	fba3 2002 	umull	r2, r0, r3, r2
 801d608:	692a      	ldr	r2, [r5, #16]
 801d60a:	4359      	muls	r1, r3
 801d60c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d610:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801d614:	0f9d      	lsrs	r5, r3, #30
 801d616:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d61a:	1ac9      	subs	r1, r1, r3
 801d61c:	f7e3 f846 	bl	80006ac <__aeabi_l2d>
 801d620:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d624:	4b12      	ldr	r3, [pc, #72]	; (801d670 <cosf+0x140>)
 801d626:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801d668 <cosf+0x138>
 801d62a:	ec41 0b17 	vmov	d7, r0, r1
 801d62e:	f004 0203 	and.w	r2, r4, #3
 801d632:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d636:	f014 0f02 	tst.w	r4, #2
 801d63a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d63e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d642:	ed92 7b00 	vldr	d7, [r2]
 801d646:	ee20 1b00 	vmul.f64	d1, d0, d0
 801d64a:	f085 0101 	eor.w	r1, r5, #1
 801d64e:	bf08      	it	eq
 801d650:	4618      	moveq	r0, r3
 801d652:	e7bf      	b.n	801d5d4 <cosf+0xa4>
 801d654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d658:	f000 b819 	b.w	801d68e <__math_invalidf>
 801d65c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d660:	e78f      	b.n	801d582 <cosf+0x52>
 801d662:	bf00      	nop
 801d664:	f3af 8000 	nop.w
 801d668:	54442d18 	.word	0x54442d18
 801d66c:	3c1921fb 	.word	0x3c1921fb
 801d670:	08020608 	.word	0x08020608
 801d674:	080205a8 	.word	0x080205a8

0801d678 <with_errnof>:
 801d678:	b513      	push	{r0, r1, r4, lr}
 801d67a:	4604      	mov	r4, r0
 801d67c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d680:	f000 fdbe 	bl	801e200 <__errno>
 801d684:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d688:	6004      	str	r4, [r0, #0]
 801d68a:	b002      	add	sp, #8
 801d68c:	bd10      	pop	{r4, pc}

0801d68e <__math_invalidf>:
 801d68e:	eef0 7a40 	vmov.f32	s15, s0
 801d692:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d696:	eef4 7a67 	vcmp.f32	s15, s15
 801d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d69e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d6a2:	d602      	bvs.n	801d6aa <__math_invalidf+0x1c>
 801d6a4:	2021      	movs	r0, #33	; 0x21
 801d6a6:	f7ff bfe7 	b.w	801d678 <with_errnof>
 801d6aa:	4770      	bx	lr

0801d6ac <__ieee754_sqrtf>:
 801d6ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d6b0:	4770      	bx	lr

0801d6b2 <__cvt>:
 801d6b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6b4:	ed2d 8b02 	vpush	{d8}
 801d6b8:	eeb0 8b40 	vmov.f64	d8, d0
 801d6bc:	b085      	sub	sp, #20
 801d6be:	4617      	mov	r7, r2
 801d6c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d6c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d6c4:	ee18 2a90 	vmov	r2, s17
 801d6c8:	f025 0520 	bic.w	r5, r5, #32
 801d6cc:	2a00      	cmp	r2, #0
 801d6ce:	bfb6      	itet	lt
 801d6d0:	222d      	movlt	r2, #45	; 0x2d
 801d6d2:	2200      	movge	r2, #0
 801d6d4:	eeb1 8b40 	vneglt.f64	d8, d0
 801d6d8:	2d46      	cmp	r5, #70	; 0x46
 801d6da:	460c      	mov	r4, r1
 801d6dc:	701a      	strb	r2, [r3, #0]
 801d6de:	d004      	beq.n	801d6ea <__cvt+0x38>
 801d6e0:	2d45      	cmp	r5, #69	; 0x45
 801d6e2:	d100      	bne.n	801d6e6 <__cvt+0x34>
 801d6e4:	3401      	adds	r4, #1
 801d6e6:	2102      	movs	r1, #2
 801d6e8:	e000      	b.n	801d6ec <__cvt+0x3a>
 801d6ea:	2103      	movs	r1, #3
 801d6ec:	ab03      	add	r3, sp, #12
 801d6ee:	9301      	str	r3, [sp, #4]
 801d6f0:	ab02      	add	r3, sp, #8
 801d6f2:	9300      	str	r3, [sp, #0]
 801d6f4:	4622      	mov	r2, r4
 801d6f6:	4633      	mov	r3, r6
 801d6f8:	eeb0 0b48 	vmov.f64	d0, d8
 801d6fc:	f000 fe44 	bl	801e388 <_dtoa_r>
 801d700:	2d47      	cmp	r5, #71	; 0x47
 801d702:	d101      	bne.n	801d708 <__cvt+0x56>
 801d704:	07fb      	lsls	r3, r7, #31
 801d706:	d51a      	bpl.n	801d73e <__cvt+0x8c>
 801d708:	2d46      	cmp	r5, #70	; 0x46
 801d70a:	eb00 0204 	add.w	r2, r0, r4
 801d70e:	d10c      	bne.n	801d72a <__cvt+0x78>
 801d710:	7803      	ldrb	r3, [r0, #0]
 801d712:	2b30      	cmp	r3, #48	; 0x30
 801d714:	d107      	bne.n	801d726 <__cvt+0x74>
 801d716:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d71e:	bf1c      	itt	ne
 801d720:	f1c4 0401 	rsbne	r4, r4, #1
 801d724:	6034      	strne	r4, [r6, #0]
 801d726:	6833      	ldr	r3, [r6, #0]
 801d728:	441a      	add	r2, r3
 801d72a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d732:	bf08      	it	eq
 801d734:	9203      	streq	r2, [sp, #12]
 801d736:	2130      	movs	r1, #48	; 0x30
 801d738:	9b03      	ldr	r3, [sp, #12]
 801d73a:	4293      	cmp	r3, r2
 801d73c:	d307      	bcc.n	801d74e <__cvt+0x9c>
 801d73e:	9b03      	ldr	r3, [sp, #12]
 801d740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d742:	1a1b      	subs	r3, r3, r0
 801d744:	6013      	str	r3, [r2, #0]
 801d746:	b005      	add	sp, #20
 801d748:	ecbd 8b02 	vpop	{d8}
 801d74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d74e:	1c5c      	adds	r4, r3, #1
 801d750:	9403      	str	r4, [sp, #12]
 801d752:	7019      	strb	r1, [r3, #0]
 801d754:	e7f0      	b.n	801d738 <__cvt+0x86>

0801d756 <__exponent>:
 801d756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d758:	4603      	mov	r3, r0
 801d75a:	2900      	cmp	r1, #0
 801d75c:	bfb8      	it	lt
 801d75e:	4249      	neglt	r1, r1
 801d760:	f803 2b02 	strb.w	r2, [r3], #2
 801d764:	bfb4      	ite	lt
 801d766:	222d      	movlt	r2, #45	; 0x2d
 801d768:	222b      	movge	r2, #43	; 0x2b
 801d76a:	2909      	cmp	r1, #9
 801d76c:	7042      	strb	r2, [r0, #1]
 801d76e:	dd2a      	ble.n	801d7c6 <__exponent+0x70>
 801d770:	f10d 0207 	add.w	r2, sp, #7
 801d774:	4617      	mov	r7, r2
 801d776:	260a      	movs	r6, #10
 801d778:	4694      	mov	ip, r2
 801d77a:	fb91 f5f6 	sdiv	r5, r1, r6
 801d77e:	fb06 1415 	mls	r4, r6, r5, r1
 801d782:	3430      	adds	r4, #48	; 0x30
 801d784:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801d788:	460c      	mov	r4, r1
 801d78a:	2c63      	cmp	r4, #99	; 0x63
 801d78c:	f102 32ff 	add.w	r2, r2, #4294967295
 801d790:	4629      	mov	r1, r5
 801d792:	dcf1      	bgt.n	801d778 <__exponent+0x22>
 801d794:	3130      	adds	r1, #48	; 0x30
 801d796:	f1ac 0402 	sub.w	r4, ip, #2
 801d79a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801d79e:	1c41      	adds	r1, r0, #1
 801d7a0:	4622      	mov	r2, r4
 801d7a2:	42ba      	cmp	r2, r7
 801d7a4:	d30a      	bcc.n	801d7bc <__exponent+0x66>
 801d7a6:	f10d 0209 	add.w	r2, sp, #9
 801d7aa:	eba2 020c 	sub.w	r2, r2, ip
 801d7ae:	42bc      	cmp	r4, r7
 801d7b0:	bf88      	it	hi
 801d7b2:	2200      	movhi	r2, #0
 801d7b4:	4413      	add	r3, r2
 801d7b6:	1a18      	subs	r0, r3, r0
 801d7b8:	b003      	add	sp, #12
 801d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d7c0:	f801 5f01 	strb.w	r5, [r1, #1]!
 801d7c4:	e7ed      	b.n	801d7a2 <__exponent+0x4c>
 801d7c6:	2330      	movs	r3, #48	; 0x30
 801d7c8:	3130      	adds	r1, #48	; 0x30
 801d7ca:	7083      	strb	r3, [r0, #2]
 801d7cc:	70c1      	strb	r1, [r0, #3]
 801d7ce:	1d03      	adds	r3, r0, #4
 801d7d0:	e7f1      	b.n	801d7b6 <__exponent+0x60>
 801d7d2:	0000      	movs	r0, r0
 801d7d4:	0000      	movs	r0, r0
	...

0801d7d8 <_printf_float>:
 801d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7dc:	b08b      	sub	sp, #44	; 0x2c
 801d7de:	460c      	mov	r4, r1
 801d7e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801d7e4:	4616      	mov	r6, r2
 801d7e6:	461f      	mov	r7, r3
 801d7e8:	4605      	mov	r5, r0
 801d7ea:	f000 fcbf 	bl	801e16c <_localeconv_r>
 801d7ee:	f8d0 b000 	ldr.w	fp, [r0]
 801d7f2:	4658      	mov	r0, fp
 801d7f4:	f7e2 fdc4 	bl	8000380 <strlen>
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	9308      	str	r3, [sp, #32]
 801d7fc:	f8d8 3000 	ldr.w	r3, [r8]
 801d800:	f894 9018 	ldrb.w	r9, [r4, #24]
 801d804:	6822      	ldr	r2, [r4, #0]
 801d806:	3307      	adds	r3, #7
 801d808:	f023 0307 	bic.w	r3, r3, #7
 801d80c:	f103 0108 	add.w	r1, r3, #8
 801d810:	f8c8 1000 	str.w	r1, [r8]
 801d814:	ed93 0b00 	vldr	d0, [r3]
 801d818:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801da78 <_printf_float+0x2a0>
 801d81c:	eeb0 7bc0 	vabs.f64	d7, d0
 801d820:	eeb4 7b46 	vcmp.f64	d7, d6
 801d824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d828:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801d82c:	4682      	mov	sl, r0
 801d82e:	dd24      	ble.n	801d87a <_printf_float+0xa2>
 801d830:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d838:	d502      	bpl.n	801d840 <_printf_float+0x68>
 801d83a:	232d      	movs	r3, #45	; 0x2d
 801d83c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d840:	498f      	ldr	r1, [pc, #572]	; (801da80 <_printf_float+0x2a8>)
 801d842:	4b90      	ldr	r3, [pc, #576]	; (801da84 <_printf_float+0x2ac>)
 801d844:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801d848:	bf94      	ite	ls
 801d84a:	4688      	movls	r8, r1
 801d84c:	4698      	movhi	r8, r3
 801d84e:	2303      	movs	r3, #3
 801d850:	6123      	str	r3, [r4, #16]
 801d852:	f022 0204 	bic.w	r2, r2, #4
 801d856:	2300      	movs	r3, #0
 801d858:	6022      	str	r2, [r4, #0]
 801d85a:	9304      	str	r3, [sp, #16]
 801d85c:	9700      	str	r7, [sp, #0]
 801d85e:	4633      	mov	r3, r6
 801d860:	aa09      	add	r2, sp, #36	; 0x24
 801d862:	4621      	mov	r1, r4
 801d864:	4628      	mov	r0, r5
 801d866:	f000 f9d1 	bl	801dc0c <_printf_common>
 801d86a:	3001      	adds	r0, #1
 801d86c:	f040 808a 	bne.w	801d984 <_printf_float+0x1ac>
 801d870:	f04f 30ff 	mov.w	r0, #4294967295
 801d874:	b00b      	add	sp, #44	; 0x2c
 801d876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d87a:	eeb4 0b40 	vcmp.f64	d0, d0
 801d87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d882:	d709      	bvc.n	801d898 <_printf_float+0xc0>
 801d884:	ee10 3a90 	vmov	r3, s1
 801d888:	2b00      	cmp	r3, #0
 801d88a:	bfbc      	itt	lt
 801d88c:	232d      	movlt	r3, #45	; 0x2d
 801d88e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801d892:	497d      	ldr	r1, [pc, #500]	; (801da88 <_printf_float+0x2b0>)
 801d894:	4b7d      	ldr	r3, [pc, #500]	; (801da8c <_printf_float+0x2b4>)
 801d896:	e7d5      	b.n	801d844 <_printf_float+0x6c>
 801d898:	6863      	ldr	r3, [r4, #4]
 801d89a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801d89e:	9104      	str	r1, [sp, #16]
 801d8a0:	1c59      	adds	r1, r3, #1
 801d8a2:	d13c      	bne.n	801d91e <_printf_float+0x146>
 801d8a4:	2306      	movs	r3, #6
 801d8a6:	6063      	str	r3, [r4, #4]
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	9303      	str	r3, [sp, #12]
 801d8ac:	ab08      	add	r3, sp, #32
 801d8ae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801d8b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801d8b6:	ab07      	add	r3, sp, #28
 801d8b8:	6861      	ldr	r1, [r4, #4]
 801d8ba:	9300      	str	r3, [sp, #0]
 801d8bc:	6022      	str	r2, [r4, #0]
 801d8be:	f10d 031b 	add.w	r3, sp, #27
 801d8c2:	4628      	mov	r0, r5
 801d8c4:	f7ff fef5 	bl	801d6b2 <__cvt>
 801d8c8:	9b04      	ldr	r3, [sp, #16]
 801d8ca:	9907      	ldr	r1, [sp, #28]
 801d8cc:	2b47      	cmp	r3, #71	; 0x47
 801d8ce:	4680      	mov	r8, r0
 801d8d0:	d108      	bne.n	801d8e4 <_printf_float+0x10c>
 801d8d2:	1cc8      	adds	r0, r1, #3
 801d8d4:	db02      	blt.n	801d8dc <_printf_float+0x104>
 801d8d6:	6863      	ldr	r3, [r4, #4]
 801d8d8:	4299      	cmp	r1, r3
 801d8da:	dd41      	ble.n	801d960 <_printf_float+0x188>
 801d8dc:	f1a9 0902 	sub.w	r9, r9, #2
 801d8e0:	fa5f f989 	uxtb.w	r9, r9
 801d8e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d8e8:	d820      	bhi.n	801d92c <_printf_float+0x154>
 801d8ea:	3901      	subs	r1, #1
 801d8ec:	464a      	mov	r2, r9
 801d8ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d8f2:	9107      	str	r1, [sp, #28]
 801d8f4:	f7ff ff2f 	bl	801d756 <__exponent>
 801d8f8:	9a08      	ldr	r2, [sp, #32]
 801d8fa:	9004      	str	r0, [sp, #16]
 801d8fc:	1813      	adds	r3, r2, r0
 801d8fe:	2a01      	cmp	r2, #1
 801d900:	6123      	str	r3, [r4, #16]
 801d902:	dc02      	bgt.n	801d90a <_printf_float+0x132>
 801d904:	6822      	ldr	r2, [r4, #0]
 801d906:	07d2      	lsls	r2, r2, #31
 801d908:	d501      	bpl.n	801d90e <_printf_float+0x136>
 801d90a:	3301      	adds	r3, #1
 801d90c:	6123      	str	r3, [r4, #16]
 801d90e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801d912:	2b00      	cmp	r3, #0
 801d914:	d0a2      	beq.n	801d85c <_printf_float+0x84>
 801d916:	232d      	movs	r3, #45	; 0x2d
 801d918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d91c:	e79e      	b.n	801d85c <_printf_float+0x84>
 801d91e:	9904      	ldr	r1, [sp, #16]
 801d920:	2947      	cmp	r1, #71	; 0x47
 801d922:	d1c1      	bne.n	801d8a8 <_printf_float+0xd0>
 801d924:	2b00      	cmp	r3, #0
 801d926:	d1bf      	bne.n	801d8a8 <_printf_float+0xd0>
 801d928:	2301      	movs	r3, #1
 801d92a:	e7bc      	b.n	801d8a6 <_printf_float+0xce>
 801d92c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801d930:	d118      	bne.n	801d964 <_printf_float+0x18c>
 801d932:	2900      	cmp	r1, #0
 801d934:	6863      	ldr	r3, [r4, #4]
 801d936:	dd0b      	ble.n	801d950 <_printf_float+0x178>
 801d938:	6121      	str	r1, [r4, #16]
 801d93a:	b913      	cbnz	r3, 801d942 <_printf_float+0x16a>
 801d93c:	6822      	ldr	r2, [r4, #0]
 801d93e:	07d0      	lsls	r0, r2, #31
 801d940:	d502      	bpl.n	801d948 <_printf_float+0x170>
 801d942:	3301      	adds	r3, #1
 801d944:	440b      	add	r3, r1
 801d946:	6123      	str	r3, [r4, #16]
 801d948:	2300      	movs	r3, #0
 801d94a:	65a1      	str	r1, [r4, #88]	; 0x58
 801d94c:	9304      	str	r3, [sp, #16]
 801d94e:	e7de      	b.n	801d90e <_printf_float+0x136>
 801d950:	b913      	cbnz	r3, 801d958 <_printf_float+0x180>
 801d952:	6822      	ldr	r2, [r4, #0]
 801d954:	07d2      	lsls	r2, r2, #31
 801d956:	d501      	bpl.n	801d95c <_printf_float+0x184>
 801d958:	3302      	adds	r3, #2
 801d95a:	e7f4      	b.n	801d946 <_printf_float+0x16e>
 801d95c:	2301      	movs	r3, #1
 801d95e:	e7f2      	b.n	801d946 <_printf_float+0x16e>
 801d960:	f04f 0967 	mov.w	r9, #103	; 0x67
 801d964:	9b08      	ldr	r3, [sp, #32]
 801d966:	4299      	cmp	r1, r3
 801d968:	db05      	blt.n	801d976 <_printf_float+0x19e>
 801d96a:	6823      	ldr	r3, [r4, #0]
 801d96c:	6121      	str	r1, [r4, #16]
 801d96e:	07d8      	lsls	r0, r3, #31
 801d970:	d5ea      	bpl.n	801d948 <_printf_float+0x170>
 801d972:	1c4b      	adds	r3, r1, #1
 801d974:	e7e7      	b.n	801d946 <_printf_float+0x16e>
 801d976:	2900      	cmp	r1, #0
 801d978:	bfd4      	ite	le
 801d97a:	f1c1 0202 	rsble	r2, r1, #2
 801d97e:	2201      	movgt	r2, #1
 801d980:	4413      	add	r3, r2
 801d982:	e7e0      	b.n	801d946 <_printf_float+0x16e>
 801d984:	6823      	ldr	r3, [r4, #0]
 801d986:	055a      	lsls	r2, r3, #21
 801d988:	d407      	bmi.n	801d99a <_printf_float+0x1c2>
 801d98a:	6923      	ldr	r3, [r4, #16]
 801d98c:	4642      	mov	r2, r8
 801d98e:	4631      	mov	r1, r6
 801d990:	4628      	mov	r0, r5
 801d992:	47b8      	blx	r7
 801d994:	3001      	adds	r0, #1
 801d996:	d12a      	bne.n	801d9ee <_printf_float+0x216>
 801d998:	e76a      	b.n	801d870 <_printf_float+0x98>
 801d99a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801d99e:	f240 80e0 	bls.w	801db62 <_printf_float+0x38a>
 801d9a2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801d9a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9ae:	d133      	bne.n	801da18 <_printf_float+0x240>
 801d9b0:	4a37      	ldr	r2, [pc, #220]	; (801da90 <_printf_float+0x2b8>)
 801d9b2:	2301      	movs	r3, #1
 801d9b4:	4631      	mov	r1, r6
 801d9b6:	4628      	mov	r0, r5
 801d9b8:	47b8      	blx	r7
 801d9ba:	3001      	adds	r0, #1
 801d9bc:	f43f af58 	beq.w	801d870 <_printf_float+0x98>
 801d9c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801d9c4:	429a      	cmp	r2, r3
 801d9c6:	db02      	blt.n	801d9ce <_printf_float+0x1f6>
 801d9c8:	6823      	ldr	r3, [r4, #0]
 801d9ca:	07d8      	lsls	r0, r3, #31
 801d9cc:	d50f      	bpl.n	801d9ee <_printf_float+0x216>
 801d9ce:	4653      	mov	r3, sl
 801d9d0:	465a      	mov	r2, fp
 801d9d2:	4631      	mov	r1, r6
 801d9d4:	4628      	mov	r0, r5
 801d9d6:	47b8      	blx	r7
 801d9d8:	3001      	adds	r0, #1
 801d9da:	f43f af49 	beq.w	801d870 <_printf_float+0x98>
 801d9de:	f04f 0800 	mov.w	r8, #0
 801d9e2:	f104 091a 	add.w	r9, r4, #26
 801d9e6:	9b08      	ldr	r3, [sp, #32]
 801d9e8:	3b01      	subs	r3, #1
 801d9ea:	4543      	cmp	r3, r8
 801d9ec:	dc09      	bgt.n	801da02 <_printf_float+0x22a>
 801d9ee:	6823      	ldr	r3, [r4, #0]
 801d9f0:	079b      	lsls	r3, r3, #30
 801d9f2:	f100 8106 	bmi.w	801dc02 <_printf_float+0x42a>
 801d9f6:	68e0      	ldr	r0, [r4, #12]
 801d9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9fa:	4298      	cmp	r0, r3
 801d9fc:	bfb8      	it	lt
 801d9fe:	4618      	movlt	r0, r3
 801da00:	e738      	b.n	801d874 <_printf_float+0x9c>
 801da02:	2301      	movs	r3, #1
 801da04:	464a      	mov	r2, r9
 801da06:	4631      	mov	r1, r6
 801da08:	4628      	mov	r0, r5
 801da0a:	47b8      	blx	r7
 801da0c:	3001      	adds	r0, #1
 801da0e:	f43f af2f 	beq.w	801d870 <_printf_float+0x98>
 801da12:	f108 0801 	add.w	r8, r8, #1
 801da16:	e7e6      	b.n	801d9e6 <_printf_float+0x20e>
 801da18:	9b07      	ldr	r3, [sp, #28]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	dc3a      	bgt.n	801da94 <_printf_float+0x2bc>
 801da1e:	4a1c      	ldr	r2, [pc, #112]	; (801da90 <_printf_float+0x2b8>)
 801da20:	2301      	movs	r3, #1
 801da22:	4631      	mov	r1, r6
 801da24:	4628      	mov	r0, r5
 801da26:	47b8      	blx	r7
 801da28:	3001      	adds	r0, #1
 801da2a:	f43f af21 	beq.w	801d870 <_printf_float+0x98>
 801da2e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801da32:	4313      	orrs	r3, r2
 801da34:	d102      	bne.n	801da3c <_printf_float+0x264>
 801da36:	6823      	ldr	r3, [r4, #0]
 801da38:	07d9      	lsls	r1, r3, #31
 801da3a:	d5d8      	bpl.n	801d9ee <_printf_float+0x216>
 801da3c:	4653      	mov	r3, sl
 801da3e:	465a      	mov	r2, fp
 801da40:	4631      	mov	r1, r6
 801da42:	4628      	mov	r0, r5
 801da44:	47b8      	blx	r7
 801da46:	3001      	adds	r0, #1
 801da48:	f43f af12 	beq.w	801d870 <_printf_float+0x98>
 801da4c:	f04f 0900 	mov.w	r9, #0
 801da50:	f104 0a1a 	add.w	sl, r4, #26
 801da54:	9b07      	ldr	r3, [sp, #28]
 801da56:	425b      	negs	r3, r3
 801da58:	454b      	cmp	r3, r9
 801da5a:	dc01      	bgt.n	801da60 <_printf_float+0x288>
 801da5c:	9b08      	ldr	r3, [sp, #32]
 801da5e:	e795      	b.n	801d98c <_printf_float+0x1b4>
 801da60:	2301      	movs	r3, #1
 801da62:	4652      	mov	r2, sl
 801da64:	4631      	mov	r1, r6
 801da66:	4628      	mov	r0, r5
 801da68:	47b8      	blx	r7
 801da6a:	3001      	adds	r0, #1
 801da6c:	f43f af00 	beq.w	801d870 <_printf_float+0x98>
 801da70:	f109 0901 	add.w	r9, r9, #1
 801da74:	e7ee      	b.n	801da54 <_printf_float+0x27c>
 801da76:	bf00      	nop
 801da78:	ffffffff 	.word	0xffffffff
 801da7c:	7fefffff 	.word	0x7fefffff
 801da80:	080206e8 	.word	0x080206e8
 801da84:	080206ec 	.word	0x080206ec
 801da88:	080206f0 	.word	0x080206f0
 801da8c:	080206f4 	.word	0x080206f4
 801da90:	080206f8 	.word	0x080206f8
 801da94:	9a08      	ldr	r2, [sp, #32]
 801da96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801da98:	429a      	cmp	r2, r3
 801da9a:	bfa8      	it	ge
 801da9c:	461a      	movge	r2, r3
 801da9e:	2a00      	cmp	r2, #0
 801daa0:	4691      	mov	r9, r2
 801daa2:	dc38      	bgt.n	801db16 <_printf_float+0x33e>
 801daa4:	2300      	movs	r3, #0
 801daa6:	9305      	str	r3, [sp, #20]
 801daa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801daac:	f104 021a 	add.w	r2, r4, #26
 801dab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801dab2:	9905      	ldr	r1, [sp, #20]
 801dab4:	9304      	str	r3, [sp, #16]
 801dab6:	eba3 0309 	sub.w	r3, r3, r9
 801daba:	428b      	cmp	r3, r1
 801dabc:	dc33      	bgt.n	801db26 <_printf_float+0x34e>
 801dabe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801dac2:	429a      	cmp	r2, r3
 801dac4:	db3c      	blt.n	801db40 <_printf_float+0x368>
 801dac6:	6823      	ldr	r3, [r4, #0]
 801dac8:	07da      	lsls	r2, r3, #31
 801daca:	d439      	bmi.n	801db40 <_printf_float+0x368>
 801dacc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801dad0:	eba2 0903 	sub.w	r9, r2, r3
 801dad4:	9b04      	ldr	r3, [sp, #16]
 801dad6:	1ad2      	subs	r2, r2, r3
 801dad8:	4591      	cmp	r9, r2
 801dada:	bfa8      	it	ge
 801dadc:	4691      	movge	r9, r2
 801dade:	f1b9 0f00 	cmp.w	r9, #0
 801dae2:	dc35      	bgt.n	801db50 <_printf_float+0x378>
 801dae4:	f04f 0800 	mov.w	r8, #0
 801dae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801daec:	f104 0a1a 	add.w	sl, r4, #26
 801daf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801daf4:	1a9b      	subs	r3, r3, r2
 801daf6:	eba3 0309 	sub.w	r3, r3, r9
 801dafa:	4543      	cmp	r3, r8
 801dafc:	f77f af77 	ble.w	801d9ee <_printf_float+0x216>
 801db00:	2301      	movs	r3, #1
 801db02:	4652      	mov	r2, sl
 801db04:	4631      	mov	r1, r6
 801db06:	4628      	mov	r0, r5
 801db08:	47b8      	blx	r7
 801db0a:	3001      	adds	r0, #1
 801db0c:	f43f aeb0 	beq.w	801d870 <_printf_float+0x98>
 801db10:	f108 0801 	add.w	r8, r8, #1
 801db14:	e7ec      	b.n	801daf0 <_printf_float+0x318>
 801db16:	4613      	mov	r3, r2
 801db18:	4631      	mov	r1, r6
 801db1a:	4642      	mov	r2, r8
 801db1c:	4628      	mov	r0, r5
 801db1e:	47b8      	blx	r7
 801db20:	3001      	adds	r0, #1
 801db22:	d1bf      	bne.n	801daa4 <_printf_float+0x2cc>
 801db24:	e6a4      	b.n	801d870 <_printf_float+0x98>
 801db26:	2301      	movs	r3, #1
 801db28:	4631      	mov	r1, r6
 801db2a:	4628      	mov	r0, r5
 801db2c:	9204      	str	r2, [sp, #16]
 801db2e:	47b8      	blx	r7
 801db30:	3001      	adds	r0, #1
 801db32:	f43f ae9d 	beq.w	801d870 <_printf_float+0x98>
 801db36:	9b05      	ldr	r3, [sp, #20]
 801db38:	9a04      	ldr	r2, [sp, #16]
 801db3a:	3301      	adds	r3, #1
 801db3c:	9305      	str	r3, [sp, #20]
 801db3e:	e7b7      	b.n	801dab0 <_printf_float+0x2d8>
 801db40:	4653      	mov	r3, sl
 801db42:	465a      	mov	r2, fp
 801db44:	4631      	mov	r1, r6
 801db46:	4628      	mov	r0, r5
 801db48:	47b8      	blx	r7
 801db4a:	3001      	adds	r0, #1
 801db4c:	d1be      	bne.n	801dacc <_printf_float+0x2f4>
 801db4e:	e68f      	b.n	801d870 <_printf_float+0x98>
 801db50:	9a04      	ldr	r2, [sp, #16]
 801db52:	464b      	mov	r3, r9
 801db54:	4442      	add	r2, r8
 801db56:	4631      	mov	r1, r6
 801db58:	4628      	mov	r0, r5
 801db5a:	47b8      	blx	r7
 801db5c:	3001      	adds	r0, #1
 801db5e:	d1c1      	bne.n	801dae4 <_printf_float+0x30c>
 801db60:	e686      	b.n	801d870 <_printf_float+0x98>
 801db62:	9a08      	ldr	r2, [sp, #32]
 801db64:	2a01      	cmp	r2, #1
 801db66:	dc01      	bgt.n	801db6c <_printf_float+0x394>
 801db68:	07db      	lsls	r3, r3, #31
 801db6a:	d537      	bpl.n	801dbdc <_printf_float+0x404>
 801db6c:	2301      	movs	r3, #1
 801db6e:	4642      	mov	r2, r8
 801db70:	4631      	mov	r1, r6
 801db72:	4628      	mov	r0, r5
 801db74:	47b8      	blx	r7
 801db76:	3001      	adds	r0, #1
 801db78:	f43f ae7a 	beq.w	801d870 <_printf_float+0x98>
 801db7c:	4653      	mov	r3, sl
 801db7e:	465a      	mov	r2, fp
 801db80:	4631      	mov	r1, r6
 801db82:	4628      	mov	r0, r5
 801db84:	47b8      	blx	r7
 801db86:	3001      	adds	r0, #1
 801db88:	f43f ae72 	beq.w	801d870 <_printf_float+0x98>
 801db8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801db90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db98:	9b08      	ldr	r3, [sp, #32]
 801db9a:	d01a      	beq.n	801dbd2 <_printf_float+0x3fa>
 801db9c:	3b01      	subs	r3, #1
 801db9e:	f108 0201 	add.w	r2, r8, #1
 801dba2:	4631      	mov	r1, r6
 801dba4:	4628      	mov	r0, r5
 801dba6:	47b8      	blx	r7
 801dba8:	3001      	adds	r0, #1
 801dbaa:	d10e      	bne.n	801dbca <_printf_float+0x3f2>
 801dbac:	e660      	b.n	801d870 <_printf_float+0x98>
 801dbae:	2301      	movs	r3, #1
 801dbb0:	464a      	mov	r2, r9
 801dbb2:	4631      	mov	r1, r6
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	47b8      	blx	r7
 801dbb8:	3001      	adds	r0, #1
 801dbba:	f43f ae59 	beq.w	801d870 <_printf_float+0x98>
 801dbbe:	f108 0801 	add.w	r8, r8, #1
 801dbc2:	9b08      	ldr	r3, [sp, #32]
 801dbc4:	3b01      	subs	r3, #1
 801dbc6:	4543      	cmp	r3, r8
 801dbc8:	dcf1      	bgt.n	801dbae <_printf_float+0x3d6>
 801dbca:	9b04      	ldr	r3, [sp, #16]
 801dbcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801dbd0:	e6dd      	b.n	801d98e <_printf_float+0x1b6>
 801dbd2:	f04f 0800 	mov.w	r8, #0
 801dbd6:	f104 091a 	add.w	r9, r4, #26
 801dbda:	e7f2      	b.n	801dbc2 <_printf_float+0x3ea>
 801dbdc:	2301      	movs	r3, #1
 801dbde:	4642      	mov	r2, r8
 801dbe0:	e7df      	b.n	801dba2 <_printf_float+0x3ca>
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	464a      	mov	r2, r9
 801dbe6:	4631      	mov	r1, r6
 801dbe8:	4628      	mov	r0, r5
 801dbea:	47b8      	blx	r7
 801dbec:	3001      	adds	r0, #1
 801dbee:	f43f ae3f 	beq.w	801d870 <_printf_float+0x98>
 801dbf2:	f108 0801 	add.w	r8, r8, #1
 801dbf6:	68e3      	ldr	r3, [r4, #12]
 801dbf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dbfa:	1a5b      	subs	r3, r3, r1
 801dbfc:	4543      	cmp	r3, r8
 801dbfe:	dcf0      	bgt.n	801dbe2 <_printf_float+0x40a>
 801dc00:	e6f9      	b.n	801d9f6 <_printf_float+0x21e>
 801dc02:	f04f 0800 	mov.w	r8, #0
 801dc06:	f104 0919 	add.w	r9, r4, #25
 801dc0a:	e7f4      	b.n	801dbf6 <_printf_float+0x41e>

0801dc0c <_printf_common>:
 801dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dc10:	4616      	mov	r6, r2
 801dc12:	4699      	mov	r9, r3
 801dc14:	688a      	ldr	r2, [r1, #8]
 801dc16:	690b      	ldr	r3, [r1, #16]
 801dc18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dc1c:	4293      	cmp	r3, r2
 801dc1e:	bfb8      	it	lt
 801dc20:	4613      	movlt	r3, r2
 801dc22:	6033      	str	r3, [r6, #0]
 801dc24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dc28:	4607      	mov	r7, r0
 801dc2a:	460c      	mov	r4, r1
 801dc2c:	b10a      	cbz	r2, 801dc32 <_printf_common+0x26>
 801dc2e:	3301      	adds	r3, #1
 801dc30:	6033      	str	r3, [r6, #0]
 801dc32:	6823      	ldr	r3, [r4, #0]
 801dc34:	0699      	lsls	r1, r3, #26
 801dc36:	bf42      	ittt	mi
 801dc38:	6833      	ldrmi	r3, [r6, #0]
 801dc3a:	3302      	addmi	r3, #2
 801dc3c:	6033      	strmi	r3, [r6, #0]
 801dc3e:	6825      	ldr	r5, [r4, #0]
 801dc40:	f015 0506 	ands.w	r5, r5, #6
 801dc44:	d106      	bne.n	801dc54 <_printf_common+0x48>
 801dc46:	f104 0a19 	add.w	sl, r4, #25
 801dc4a:	68e3      	ldr	r3, [r4, #12]
 801dc4c:	6832      	ldr	r2, [r6, #0]
 801dc4e:	1a9b      	subs	r3, r3, r2
 801dc50:	42ab      	cmp	r3, r5
 801dc52:	dc26      	bgt.n	801dca2 <_printf_common+0x96>
 801dc54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dc58:	1e13      	subs	r3, r2, #0
 801dc5a:	6822      	ldr	r2, [r4, #0]
 801dc5c:	bf18      	it	ne
 801dc5e:	2301      	movne	r3, #1
 801dc60:	0692      	lsls	r2, r2, #26
 801dc62:	d42b      	bmi.n	801dcbc <_printf_common+0xb0>
 801dc64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dc68:	4649      	mov	r1, r9
 801dc6a:	4638      	mov	r0, r7
 801dc6c:	47c0      	blx	r8
 801dc6e:	3001      	adds	r0, #1
 801dc70:	d01e      	beq.n	801dcb0 <_printf_common+0xa4>
 801dc72:	6823      	ldr	r3, [r4, #0]
 801dc74:	6922      	ldr	r2, [r4, #16]
 801dc76:	f003 0306 	and.w	r3, r3, #6
 801dc7a:	2b04      	cmp	r3, #4
 801dc7c:	bf02      	ittt	eq
 801dc7e:	68e5      	ldreq	r5, [r4, #12]
 801dc80:	6833      	ldreq	r3, [r6, #0]
 801dc82:	1aed      	subeq	r5, r5, r3
 801dc84:	68a3      	ldr	r3, [r4, #8]
 801dc86:	bf0c      	ite	eq
 801dc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc8c:	2500      	movne	r5, #0
 801dc8e:	4293      	cmp	r3, r2
 801dc90:	bfc4      	itt	gt
 801dc92:	1a9b      	subgt	r3, r3, r2
 801dc94:	18ed      	addgt	r5, r5, r3
 801dc96:	2600      	movs	r6, #0
 801dc98:	341a      	adds	r4, #26
 801dc9a:	42b5      	cmp	r5, r6
 801dc9c:	d11a      	bne.n	801dcd4 <_printf_common+0xc8>
 801dc9e:	2000      	movs	r0, #0
 801dca0:	e008      	b.n	801dcb4 <_printf_common+0xa8>
 801dca2:	2301      	movs	r3, #1
 801dca4:	4652      	mov	r2, sl
 801dca6:	4649      	mov	r1, r9
 801dca8:	4638      	mov	r0, r7
 801dcaa:	47c0      	blx	r8
 801dcac:	3001      	adds	r0, #1
 801dcae:	d103      	bne.n	801dcb8 <_printf_common+0xac>
 801dcb0:	f04f 30ff 	mov.w	r0, #4294967295
 801dcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dcb8:	3501      	adds	r5, #1
 801dcba:	e7c6      	b.n	801dc4a <_printf_common+0x3e>
 801dcbc:	18e1      	adds	r1, r4, r3
 801dcbe:	1c5a      	adds	r2, r3, #1
 801dcc0:	2030      	movs	r0, #48	; 0x30
 801dcc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dcc6:	4422      	add	r2, r4
 801dcc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dcd0:	3302      	adds	r3, #2
 801dcd2:	e7c7      	b.n	801dc64 <_printf_common+0x58>
 801dcd4:	2301      	movs	r3, #1
 801dcd6:	4622      	mov	r2, r4
 801dcd8:	4649      	mov	r1, r9
 801dcda:	4638      	mov	r0, r7
 801dcdc:	47c0      	blx	r8
 801dcde:	3001      	adds	r0, #1
 801dce0:	d0e6      	beq.n	801dcb0 <_printf_common+0xa4>
 801dce2:	3601      	adds	r6, #1
 801dce4:	e7d9      	b.n	801dc9a <_printf_common+0x8e>
	...

0801dce8 <_printf_i>:
 801dce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dcec:	7e0f      	ldrb	r7, [r1, #24]
 801dcee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dcf0:	2f78      	cmp	r7, #120	; 0x78
 801dcf2:	4691      	mov	r9, r2
 801dcf4:	4680      	mov	r8, r0
 801dcf6:	460c      	mov	r4, r1
 801dcf8:	469a      	mov	sl, r3
 801dcfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dcfe:	d807      	bhi.n	801dd10 <_printf_i+0x28>
 801dd00:	2f62      	cmp	r7, #98	; 0x62
 801dd02:	d80a      	bhi.n	801dd1a <_printf_i+0x32>
 801dd04:	2f00      	cmp	r7, #0
 801dd06:	f000 80d4 	beq.w	801deb2 <_printf_i+0x1ca>
 801dd0a:	2f58      	cmp	r7, #88	; 0x58
 801dd0c:	f000 80c0 	beq.w	801de90 <_printf_i+0x1a8>
 801dd10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dd14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dd18:	e03a      	b.n	801dd90 <_printf_i+0xa8>
 801dd1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dd1e:	2b15      	cmp	r3, #21
 801dd20:	d8f6      	bhi.n	801dd10 <_printf_i+0x28>
 801dd22:	a101      	add	r1, pc, #4	; (adr r1, 801dd28 <_printf_i+0x40>)
 801dd24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dd28:	0801dd81 	.word	0x0801dd81
 801dd2c:	0801dd95 	.word	0x0801dd95
 801dd30:	0801dd11 	.word	0x0801dd11
 801dd34:	0801dd11 	.word	0x0801dd11
 801dd38:	0801dd11 	.word	0x0801dd11
 801dd3c:	0801dd11 	.word	0x0801dd11
 801dd40:	0801dd95 	.word	0x0801dd95
 801dd44:	0801dd11 	.word	0x0801dd11
 801dd48:	0801dd11 	.word	0x0801dd11
 801dd4c:	0801dd11 	.word	0x0801dd11
 801dd50:	0801dd11 	.word	0x0801dd11
 801dd54:	0801de99 	.word	0x0801de99
 801dd58:	0801ddc1 	.word	0x0801ddc1
 801dd5c:	0801de53 	.word	0x0801de53
 801dd60:	0801dd11 	.word	0x0801dd11
 801dd64:	0801dd11 	.word	0x0801dd11
 801dd68:	0801debb 	.word	0x0801debb
 801dd6c:	0801dd11 	.word	0x0801dd11
 801dd70:	0801ddc1 	.word	0x0801ddc1
 801dd74:	0801dd11 	.word	0x0801dd11
 801dd78:	0801dd11 	.word	0x0801dd11
 801dd7c:	0801de5b 	.word	0x0801de5b
 801dd80:	682b      	ldr	r3, [r5, #0]
 801dd82:	1d1a      	adds	r2, r3, #4
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	602a      	str	r2, [r5, #0]
 801dd88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dd8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dd90:	2301      	movs	r3, #1
 801dd92:	e09f      	b.n	801ded4 <_printf_i+0x1ec>
 801dd94:	6820      	ldr	r0, [r4, #0]
 801dd96:	682b      	ldr	r3, [r5, #0]
 801dd98:	0607      	lsls	r7, r0, #24
 801dd9a:	f103 0104 	add.w	r1, r3, #4
 801dd9e:	6029      	str	r1, [r5, #0]
 801dda0:	d501      	bpl.n	801dda6 <_printf_i+0xbe>
 801dda2:	681e      	ldr	r6, [r3, #0]
 801dda4:	e003      	b.n	801ddae <_printf_i+0xc6>
 801dda6:	0646      	lsls	r6, r0, #25
 801dda8:	d5fb      	bpl.n	801dda2 <_printf_i+0xba>
 801ddaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ddae:	2e00      	cmp	r6, #0
 801ddb0:	da03      	bge.n	801ddba <_printf_i+0xd2>
 801ddb2:	232d      	movs	r3, #45	; 0x2d
 801ddb4:	4276      	negs	r6, r6
 801ddb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddba:	485a      	ldr	r0, [pc, #360]	; (801df24 <_printf_i+0x23c>)
 801ddbc:	230a      	movs	r3, #10
 801ddbe:	e012      	b.n	801dde6 <_printf_i+0xfe>
 801ddc0:	682b      	ldr	r3, [r5, #0]
 801ddc2:	6820      	ldr	r0, [r4, #0]
 801ddc4:	1d19      	adds	r1, r3, #4
 801ddc6:	6029      	str	r1, [r5, #0]
 801ddc8:	0605      	lsls	r5, r0, #24
 801ddca:	d501      	bpl.n	801ddd0 <_printf_i+0xe8>
 801ddcc:	681e      	ldr	r6, [r3, #0]
 801ddce:	e002      	b.n	801ddd6 <_printf_i+0xee>
 801ddd0:	0641      	lsls	r1, r0, #25
 801ddd2:	d5fb      	bpl.n	801ddcc <_printf_i+0xe4>
 801ddd4:	881e      	ldrh	r6, [r3, #0]
 801ddd6:	4853      	ldr	r0, [pc, #332]	; (801df24 <_printf_i+0x23c>)
 801ddd8:	2f6f      	cmp	r7, #111	; 0x6f
 801ddda:	bf0c      	ite	eq
 801dddc:	2308      	moveq	r3, #8
 801ddde:	230a      	movne	r3, #10
 801dde0:	2100      	movs	r1, #0
 801dde2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dde6:	6865      	ldr	r5, [r4, #4]
 801dde8:	60a5      	str	r5, [r4, #8]
 801ddea:	2d00      	cmp	r5, #0
 801ddec:	bfa2      	ittt	ge
 801ddee:	6821      	ldrge	r1, [r4, #0]
 801ddf0:	f021 0104 	bicge.w	r1, r1, #4
 801ddf4:	6021      	strge	r1, [r4, #0]
 801ddf6:	b90e      	cbnz	r6, 801ddfc <_printf_i+0x114>
 801ddf8:	2d00      	cmp	r5, #0
 801ddfa:	d04b      	beq.n	801de94 <_printf_i+0x1ac>
 801ddfc:	4615      	mov	r5, r2
 801ddfe:	fbb6 f1f3 	udiv	r1, r6, r3
 801de02:	fb03 6711 	mls	r7, r3, r1, r6
 801de06:	5dc7      	ldrb	r7, [r0, r7]
 801de08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801de0c:	4637      	mov	r7, r6
 801de0e:	42bb      	cmp	r3, r7
 801de10:	460e      	mov	r6, r1
 801de12:	d9f4      	bls.n	801ddfe <_printf_i+0x116>
 801de14:	2b08      	cmp	r3, #8
 801de16:	d10b      	bne.n	801de30 <_printf_i+0x148>
 801de18:	6823      	ldr	r3, [r4, #0]
 801de1a:	07de      	lsls	r6, r3, #31
 801de1c:	d508      	bpl.n	801de30 <_printf_i+0x148>
 801de1e:	6923      	ldr	r3, [r4, #16]
 801de20:	6861      	ldr	r1, [r4, #4]
 801de22:	4299      	cmp	r1, r3
 801de24:	bfde      	ittt	le
 801de26:	2330      	movle	r3, #48	; 0x30
 801de28:	f805 3c01 	strble.w	r3, [r5, #-1]
 801de2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801de30:	1b52      	subs	r2, r2, r5
 801de32:	6122      	str	r2, [r4, #16]
 801de34:	f8cd a000 	str.w	sl, [sp]
 801de38:	464b      	mov	r3, r9
 801de3a:	aa03      	add	r2, sp, #12
 801de3c:	4621      	mov	r1, r4
 801de3e:	4640      	mov	r0, r8
 801de40:	f7ff fee4 	bl	801dc0c <_printf_common>
 801de44:	3001      	adds	r0, #1
 801de46:	d14a      	bne.n	801dede <_printf_i+0x1f6>
 801de48:	f04f 30ff 	mov.w	r0, #4294967295
 801de4c:	b004      	add	sp, #16
 801de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de52:	6823      	ldr	r3, [r4, #0]
 801de54:	f043 0320 	orr.w	r3, r3, #32
 801de58:	6023      	str	r3, [r4, #0]
 801de5a:	4833      	ldr	r0, [pc, #204]	; (801df28 <_printf_i+0x240>)
 801de5c:	2778      	movs	r7, #120	; 0x78
 801de5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801de62:	6823      	ldr	r3, [r4, #0]
 801de64:	6829      	ldr	r1, [r5, #0]
 801de66:	061f      	lsls	r7, r3, #24
 801de68:	f851 6b04 	ldr.w	r6, [r1], #4
 801de6c:	d402      	bmi.n	801de74 <_printf_i+0x18c>
 801de6e:	065f      	lsls	r7, r3, #25
 801de70:	bf48      	it	mi
 801de72:	b2b6      	uxthmi	r6, r6
 801de74:	07df      	lsls	r7, r3, #31
 801de76:	bf48      	it	mi
 801de78:	f043 0320 	orrmi.w	r3, r3, #32
 801de7c:	6029      	str	r1, [r5, #0]
 801de7e:	bf48      	it	mi
 801de80:	6023      	strmi	r3, [r4, #0]
 801de82:	b91e      	cbnz	r6, 801de8c <_printf_i+0x1a4>
 801de84:	6823      	ldr	r3, [r4, #0]
 801de86:	f023 0320 	bic.w	r3, r3, #32
 801de8a:	6023      	str	r3, [r4, #0]
 801de8c:	2310      	movs	r3, #16
 801de8e:	e7a7      	b.n	801dde0 <_printf_i+0xf8>
 801de90:	4824      	ldr	r0, [pc, #144]	; (801df24 <_printf_i+0x23c>)
 801de92:	e7e4      	b.n	801de5e <_printf_i+0x176>
 801de94:	4615      	mov	r5, r2
 801de96:	e7bd      	b.n	801de14 <_printf_i+0x12c>
 801de98:	682b      	ldr	r3, [r5, #0]
 801de9a:	6826      	ldr	r6, [r4, #0]
 801de9c:	6961      	ldr	r1, [r4, #20]
 801de9e:	1d18      	adds	r0, r3, #4
 801dea0:	6028      	str	r0, [r5, #0]
 801dea2:	0635      	lsls	r5, r6, #24
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	d501      	bpl.n	801deac <_printf_i+0x1c4>
 801dea8:	6019      	str	r1, [r3, #0]
 801deaa:	e002      	b.n	801deb2 <_printf_i+0x1ca>
 801deac:	0670      	lsls	r0, r6, #25
 801deae:	d5fb      	bpl.n	801dea8 <_printf_i+0x1c0>
 801deb0:	8019      	strh	r1, [r3, #0]
 801deb2:	2300      	movs	r3, #0
 801deb4:	6123      	str	r3, [r4, #16]
 801deb6:	4615      	mov	r5, r2
 801deb8:	e7bc      	b.n	801de34 <_printf_i+0x14c>
 801deba:	682b      	ldr	r3, [r5, #0]
 801debc:	1d1a      	adds	r2, r3, #4
 801debe:	602a      	str	r2, [r5, #0]
 801dec0:	681d      	ldr	r5, [r3, #0]
 801dec2:	6862      	ldr	r2, [r4, #4]
 801dec4:	2100      	movs	r1, #0
 801dec6:	4628      	mov	r0, r5
 801dec8:	f7e2 fa0a 	bl	80002e0 <memchr>
 801decc:	b108      	cbz	r0, 801ded2 <_printf_i+0x1ea>
 801dece:	1b40      	subs	r0, r0, r5
 801ded0:	6060      	str	r0, [r4, #4]
 801ded2:	6863      	ldr	r3, [r4, #4]
 801ded4:	6123      	str	r3, [r4, #16]
 801ded6:	2300      	movs	r3, #0
 801ded8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dedc:	e7aa      	b.n	801de34 <_printf_i+0x14c>
 801dede:	6923      	ldr	r3, [r4, #16]
 801dee0:	462a      	mov	r2, r5
 801dee2:	4649      	mov	r1, r9
 801dee4:	4640      	mov	r0, r8
 801dee6:	47d0      	blx	sl
 801dee8:	3001      	adds	r0, #1
 801deea:	d0ad      	beq.n	801de48 <_printf_i+0x160>
 801deec:	6823      	ldr	r3, [r4, #0]
 801deee:	079b      	lsls	r3, r3, #30
 801def0:	d413      	bmi.n	801df1a <_printf_i+0x232>
 801def2:	68e0      	ldr	r0, [r4, #12]
 801def4:	9b03      	ldr	r3, [sp, #12]
 801def6:	4298      	cmp	r0, r3
 801def8:	bfb8      	it	lt
 801defa:	4618      	movlt	r0, r3
 801defc:	e7a6      	b.n	801de4c <_printf_i+0x164>
 801defe:	2301      	movs	r3, #1
 801df00:	4632      	mov	r2, r6
 801df02:	4649      	mov	r1, r9
 801df04:	4640      	mov	r0, r8
 801df06:	47d0      	blx	sl
 801df08:	3001      	adds	r0, #1
 801df0a:	d09d      	beq.n	801de48 <_printf_i+0x160>
 801df0c:	3501      	adds	r5, #1
 801df0e:	68e3      	ldr	r3, [r4, #12]
 801df10:	9903      	ldr	r1, [sp, #12]
 801df12:	1a5b      	subs	r3, r3, r1
 801df14:	42ab      	cmp	r3, r5
 801df16:	dcf2      	bgt.n	801defe <_printf_i+0x216>
 801df18:	e7eb      	b.n	801def2 <_printf_i+0x20a>
 801df1a:	2500      	movs	r5, #0
 801df1c:	f104 0619 	add.w	r6, r4, #25
 801df20:	e7f5      	b.n	801df0e <_printf_i+0x226>
 801df22:	bf00      	nop
 801df24:	080206fa 	.word	0x080206fa
 801df28:	0802070b 	.word	0x0802070b

0801df2c <std>:
 801df2c:	2300      	movs	r3, #0
 801df2e:	b510      	push	{r4, lr}
 801df30:	4604      	mov	r4, r0
 801df32:	e9c0 3300 	strd	r3, r3, [r0]
 801df36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801df3a:	6083      	str	r3, [r0, #8]
 801df3c:	8181      	strh	r1, [r0, #12]
 801df3e:	6643      	str	r3, [r0, #100]	; 0x64
 801df40:	81c2      	strh	r2, [r0, #14]
 801df42:	6183      	str	r3, [r0, #24]
 801df44:	4619      	mov	r1, r3
 801df46:	2208      	movs	r2, #8
 801df48:	305c      	adds	r0, #92	; 0x5c
 801df4a:	f000 f906 	bl	801e15a <memset>
 801df4e:	4b0d      	ldr	r3, [pc, #52]	; (801df84 <std+0x58>)
 801df50:	6263      	str	r3, [r4, #36]	; 0x24
 801df52:	4b0d      	ldr	r3, [pc, #52]	; (801df88 <std+0x5c>)
 801df54:	62a3      	str	r3, [r4, #40]	; 0x28
 801df56:	4b0d      	ldr	r3, [pc, #52]	; (801df8c <std+0x60>)
 801df58:	62e3      	str	r3, [r4, #44]	; 0x2c
 801df5a:	4b0d      	ldr	r3, [pc, #52]	; (801df90 <std+0x64>)
 801df5c:	6323      	str	r3, [r4, #48]	; 0x30
 801df5e:	4b0d      	ldr	r3, [pc, #52]	; (801df94 <std+0x68>)
 801df60:	6224      	str	r4, [r4, #32]
 801df62:	429c      	cmp	r4, r3
 801df64:	d006      	beq.n	801df74 <std+0x48>
 801df66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801df6a:	4294      	cmp	r4, r2
 801df6c:	d002      	beq.n	801df74 <std+0x48>
 801df6e:	33d0      	adds	r3, #208	; 0xd0
 801df70:	429c      	cmp	r4, r3
 801df72:	d105      	bne.n	801df80 <std+0x54>
 801df74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df7c:	f000 b96a 	b.w	801e254 <__retarget_lock_init_recursive>
 801df80:	bd10      	pop	{r4, pc}
 801df82:	bf00      	nop
 801df84:	0801e0d5 	.word	0x0801e0d5
 801df88:	0801e0f7 	.word	0x0801e0f7
 801df8c:	0801e12f 	.word	0x0801e12f
 801df90:	0801e153 	.word	0x0801e153
 801df94:	2400e788 	.word	0x2400e788

0801df98 <stdio_exit_handler>:
 801df98:	4a02      	ldr	r2, [pc, #8]	; (801dfa4 <stdio_exit_handler+0xc>)
 801df9a:	4903      	ldr	r1, [pc, #12]	; (801dfa8 <stdio_exit_handler+0x10>)
 801df9c:	4803      	ldr	r0, [pc, #12]	; (801dfac <stdio_exit_handler+0x14>)
 801df9e:	f000 b869 	b.w	801e074 <_fwalk_sglue>
 801dfa2:	bf00      	nop
 801dfa4:	24000014 	.word	0x24000014
 801dfa8:	0801faed 	.word	0x0801faed
 801dfac:	24000020 	.word	0x24000020

0801dfb0 <cleanup_stdio>:
 801dfb0:	6841      	ldr	r1, [r0, #4]
 801dfb2:	4b0c      	ldr	r3, [pc, #48]	; (801dfe4 <cleanup_stdio+0x34>)
 801dfb4:	4299      	cmp	r1, r3
 801dfb6:	b510      	push	{r4, lr}
 801dfb8:	4604      	mov	r4, r0
 801dfba:	d001      	beq.n	801dfc0 <cleanup_stdio+0x10>
 801dfbc:	f001 fd96 	bl	801faec <_fflush_r>
 801dfc0:	68a1      	ldr	r1, [r4, #8]
 801dfc2:	4b09      	ldr	r3, [pc, #36]	; (801dfe8 <cleanup_stdio+0x38>)
 801dfc4:	4299      	cmp	r1, r3
 801dfc6:	d002      	beq.n	801dfce <cleanup_stdio+0x1e>
 801dfc8:	4620      	mov	r0, r4
 801dfca:	f001 fd8f 	bl	801faec <_fflush_r>
 801dfce:	68e1      	ldr	r1, [r4, #12]
 801dfd0:	4b06      	ldr	r3, [pc, #24]	; (801dfec <cleanup_stdio+0x3c>)
 801dfd2:	4299      	cmp	r1, r3
 801dfd4:	d004      	beq.n	801dfe0 <cleanup_stdio+0x30>
 801dfd6:	4620      	mov	r0, r4
 801dfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfdc:	f001 bd86 	b.w	801faec <_fflush_r>
 801dfe0:	bd10      	pop	{r4, pc}
 801dfe2:	bf00      	nop
 801dfe4:	2400e788 	.word	0x2400e788
 801dfe8:	2400e7f0 	.word	0x2400e7f0
 801dfec:	2400e858 	.word	0x2400e858

0801dff0 <global_stdio_init.part.0>:
 801dff0:	b510      	push	{r4, lr}
 801dff2:	4b0b      	ldr	r3, [pc, #44]	; (801e020 <global_stdio_init.part.0+0x30>)
 801dff4:	4c0b      	ldr	r4, [pc, #44]	; (801e024 <global_stdio_init.part.0+0x34>)
 801dff6:	4a0c      	ldr	r2, [pc, #48]	; (801e028 <global_stdio_init.part.0+0x38>)
 801dff8:	601a      	str	r2, [r3, #0]
 801dffa:	4620      	mov	r0, r4
 801dffc:	2200      	movs	r2, #0
 801dffe:	2104      	movs	r1, #4
 801e000:	f7ff ff94 	bl	801df2c <std>
 801e004:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e008:	2201      	movs	r2, #1
 801e00a:	2109      	movs	r1, #9
 801e00c:	f7ff ff8e 	bl	801df2c <std>
 801e010:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e014:	2202      	movs	r2, #2
 801e016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e01a:	2112      	movs	r1, #18
 801e01c:	f7ff bf86 	b.w	801df2c <std>
 801e020:	2400e8c0 	.word	0x2400e8c0
 801e024:	2400e788 	.word	0x2400e788
 801e028:	0801df99 	.word	0x0801df99

0801e02c <__sfp_lock_acquire>:
 801e02c:	4801      	ldr	r0, [pc, #4]	; (801e034 <__sfp_lock_acquire+0x8>)
 801e02e:	f000 b912 	b.w	801e256 <__retarget_lock_acquire_recursive>
 801e032:	bf00      	nop
 801e034:	2400e8c9 	.word	0x2400e8c9

0801e038 <__sfp_lock_release>:
 801e038:	4801      	ldr	r0, [pc, #4]	; (801e040 <__sfp_lock_release+0x8>)
 801e03a:	f000 b90d 	b.w	801e258 <__retarget_lock_release_recursive>
 801e03e:	bf00      	nop
 801e040:	2400e8c9 	.word	0x2400e8c9

0801e044 <__sinit>:
 801e044:	b510      	push	{r4, lr}
 801e046:	4604      	mov	r4, r0
 801e048:	f7ff fff0 	bl	801e02c <__sfp_lock_acquire>
 801e04c:	6a23      	ldr	r3, [r4, #32]
 801e04e:	b11b      	cbz	r3, 801e058 <__sinit+0x14>
 801e050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e054:	f7ff bff0 	b.w	801e038 <__sfp_lock_release>
 801e058:	4b04      	ldr	r3, [pc, #16]	; (801e06c <__sinit+0x28>)
 801e05a:	6223      	str	r3, [r4, #32]
 801e05c:	4b04      	ldr	r3, [pc, #16]	; (801e070 <__sinit+0x2c>)
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d1f5      	bne.n	801e050 <__sinit+0xc>
 801e064:	f7ff ffc4 	bl	801dff0 <global_stdio_init.part.0>
 801e068:	e7f2      	b.n	801e050 <__sinit+0xc>
 801e06a:	bf00      	nop
 801e06c:	0801dfb1 	.word	0x0801dfb1
 801e070:	2400e8c0 	.word	0x2400e8c0

0801e074 <_fwalk_sglue>:
 801e074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e078:	4607      	mov	r7, r0
 801e07a:	4688      	mov	r8, r1
 801e07c:	4614      	mov	r4, r2
 801e07e:	2600      	movs	r6, #0
 801e080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e084:	f1b9 0901 	subs.w	r9, r9, #1
 801e088:	d505      	bpl.n	801e096 <_fwalk_sglue+0x22>
 801e08a:	6824      	ldr	r4, [r4, #0]
 801e08c:	2c00      	cmp	r4, #0
 801e08e:	d1f7      	bne.n	801e080 <_fwalk_sglue+0xc>
 801e090:	4630      	mov	r0, r6
 801e092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e096:	89ab      	ldrh	r3, [r5, #12]
 801e098:	2b01      	cmp	r3, #1
 801e09a:	d907      	bls.n	801e0ac <_fwalk_sglue+0x38>
 801e09c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	d003      	beq.n	801e0ac <_fwalk_sglue+0x38>
 801e0a4:	4629      	mov	r1, r5
 801e0a6:	4638      	mov	r0, r7
 801e0a8:	47c0      	blx	r8
 801e0aa:	4306      	orrs	r6, r0
 801e0ac:	3568      	adds	r5, #104	; 0x68
 801e0ae:	e7e9      	b.n	801e084 <_fwalk_sglue+0x10>

0801e0b0 <iprintf>:
 801e0b0:	b40f      	push	{r0, r1, r2, r3}
 801e0b2:	b507      	push	{r0, r1, r2, lr}
 801e0b4:	4906      	ldr	r1, [pc, #24]	; (801e0d0 <iprintf+0x20>)
 801e0b6:	ab04      	add	r3, sp, #16
 801e0b8:	6808      	ldr	r0, [r1, #0]
 801e0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0be:	6881      	ldr	r1, [r0, #8]
 801e0c0:	9301      	str	r3, [sp, #4]
 801e0c2:	f001 fb73 	bl	801f7ac <_vfiprintf_r>
 801e0c6:	b003      	add	sp, #12
 801e0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0cc:	b004      	add	sp, #16
 801e0ce:	4770      	bx	lr
 801e0d0:	2400006c 	.word	0x2400006c

0801e0d4 <__sread>:
 801e0d4:	b510      	push	{r4, lr}
 801e0d6:	460c      	mov	r4, r1
 801e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e0dc:	f000 f86c 	bl	801e1b8 <_read_r>
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	bfab      	itete	ge
 801e0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e0e6:	89a3      	ldrhlt	r3, [r4, #12]
 801e0e8:	181b      	addge	r3, r3, r0
 801e0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e0ee:	bfac      	ite	ge
 801e0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 801e0f2:	81a3      	strhlt	r3, [r4, #12]
 801e0f4:	bd10      	pop	{r4, pc}

0801e0f6 <__swrite>:
 801e0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0fa:	461f      	mov	r7, r3
 801e0fc:	898b      	ldrh	r3, [r1, #12]
 801e0fe:	05db      	lsls	r3, r3, #23
 801e100:	4605      	mov	r5, r0
 801e102:	460c      	mov	r4, r1
 801e104:	4616      	mov	r6, r2
 801e106:	d505      	bpl.n	801e114 <__swrite+0x1e>
 801e108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e10c:	2302      	movs	r3, #2
 801e10e:	2200      	movs	r2, #0
 801e110:	f000 f840 	bl	801e194 <_lseek_r>
 801e114:	89a3      	ldrh	r3, [r4, #12]
 801e116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e11e:	81a3      	strh	r3, [r4, #12]
 801e120:	4632      	mov	r2, r6
 801e122:	463b      	mov	r3, r7
 801e124:	4628      	mov	r0, r5
 801e126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e12a:	f000 b857 	b.w	801e1dc <_write_r>

0801e12e <__sseek>:
 801e12e:	b510      	push	{r4, lr}
 801e130:	460c      	mov	r4, r1
 801e132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e136:	f000 f82d 	bl	801e194 <_lseek_r>
 801e13a:	1c43      	adds	r3, r0, #1
 801e13c:	89a3      	ldrh	r3, [r4, #12]
 801e13e:	bf15      	itete	ne
 801e140:	6560      	strne	r0, [r4, #84]	; 0x54
 801e142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e14a:	81a3      	strheq	r3, [r4, #12]
 801e14c:	bf18      	it	ne
 801e14e:	81a3      	strhne	r3, [r4, #12]
 801e150:	bd10      	pop	{r4, pc}

0801e152 <__sclose>:
 801e152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e156:	f000 b80d 	b.w	801e174 <_close_r>

0801e15a <memset>:
 801e15a:	4402      	add	r2, r0
 801e15c:	4603      	mov	r3, r0
 801e15e:	4293      	cmp	r3, r2
 801e160:	d100      	bne.n	801e164 <memset+0xa>
 801e162:	4770      	bx	lr
 801e164:	f803 1b01 	strb.w	r1, [r3], #1
 801e168:	e7f9      	b.n	801e15e <memset+0x4>
	...

0801e16c <_localeconv_r>:
 801e16c:	4800      	ldr	r0, [pc, #0]	; (801e170 <_localeconv_r+0x4>)
 801e16e:	4770      	bx	lr
 801e170:	24000160 	.word	0x24000160

0801e174 <_close_r>:
 801e174:	b538      	push	{r3, r4, r5, lr}
 801e176:	4d06      	ldr	r5, [pc, #24]	; (801e190 <_close_r+0x1c>)
 801e178:	2300      	movs	r3, #0
 801e17a:	4604      	mov	r4, r0
 801e17c:	4608      	mov	r0, r1
 801e17e:	602b      	str	r3, [r5, #0]
 801e180:	f7e3 fc9d 	bl	8001abe <_close>
 801e184:	1c43      	adds	r3, r0, #1
 801e186:	d102      	bne.n	801e18e <_close_r+0x1a>
 801e188:	682b      	ldr	r3, [r5, #0]
 801e18a:	b103      	cbz	r3, 801e18e <_close_r+0x1a>
 801e18c:	6023      	str	r3, [r4, #0]
 801e18e:	bd38      	pop	{r3, r4, r5, pc}
 801e190:	2400e8c4 	.word	0x2400e8c4

0801e194 <_lseek_r>:
 801e194:	b538      	push	{r3, r4, r5, lr}
 801e196:	4d07      	ldr	r5, [pc, #28]	; (801e1b4 <_lseek_r+0x20>)
 801e198:	4604      	mov	r4, r0
 801e19a:	4608      	mov	r0, r1
 801e19c:	4611      	mov	r1, r2
 801e19e:	2200      	movs	r2, #0
 801e1a0:	602a      	str	r2, [r5, #0]
 801e1a2:	461a      	mov	r2, r3
 801e1a4:	f7e3 fcb2 	bl	8001b0c <_lseek>
 801e1a8:	1c43      	adds	r3, r0, #1
 801e1aa:	d102      	bne.n	801e1b2 <_lseek_r+0x1e>
 801e1ac:	682b      	ldr	r3, [r5, #0]
 801e1ae:	b103      	cbz	r3, 801e1b2 <_lseek_r+0x1e>
 801e1b0:	6023      	str	r3, [r4, #0]
 801e1b2:	bd38      	pop	{r3, r4, r5, pc}
 801e1b4:	2400e8c4 	.word	0x2400e8c4

0801e1b8 <_read_r>:
 801e1b8:	b538      	push	{r3, r4, r5, lr}
 801e1ba:	4d07      	ldr	r5, [pc, #28]	; (801e1d8 <_read_r+0x20>)
 801e1bc:	4604      	mov	r4, r0
 801e1be:	4608      	mov	r0, r1
 801e1c0:	4611      	mov	r1, r2
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	602a      	str	r2, [r5, #0]
 801e1c6:	461a      	mov	r2, r3
 801e1c8:	f7e3 fc40 	bl	8001a4c <_read>
 801e1cc:	1c43      	adds	r3, r0, #1
 801e1ce:	d102      	bne.n	801e1d6 <_read_r+0x1e>
 801e1d0:	682b      	ldr	r3, [r5, #0]
 801e1d2:	b103      	cbz	r3, 801e1d6 <_read_r+0x1e>
 801e1d4:	6023      	str	r3, [r4, #0]
 801e1d6:	bd38      	pop	{r3, r4, r5, pc}
 801e1d8:	2400e8c4 	.word	0x2400e8c4

0801e1dc <_write_r>:
 801e1dc:	b538      	push	{r3, r4, r5, lr}
 801e1de:	4d07      	ldr	r5, [pc, #28]	; (801e1fc <_write_r+0x20>)
 801e1e0:	4604      	mov	r4, r0
 801e1e2:	4608      	mov	r0, r1
 801e1e4:	4611      	mov	r1, r2
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	602a      	str	r2, [r5, #0]
 801e1ea:	461a      	mov	r2, r3
 801e1ec:	f7e3 fc4b 	bl	8001a86 <_write>
 801e1f0:	1c43      	adds	r3, r0, #1
 801e1f2:	d102      	bne.n	801e1fa <_write_r+0x1e>
 801e1f4:	682b      	ldr	r3, [r5, #0]
 801e1f6:	b103      	cbz	r3, 801e1fa <_write_r+0x1e>
 801e1f8:	6023      	str	r3, [r4, #0]
 801e1fa:	bd38      	pop	{r3, r4, r5, pc}
 801e1fc:	2400e8c4 	.word	0x2400e8c4

0801e200 <__errno>:
 801e200:	4b01      	ldr	r3, [pc, #4]	; (801e208 <__errno+0x8>)
 801e202:	6818      	ldr	r0, [r3, #0]
 801e204:	4770      	bx	lr
 801e206:	bf00      	nop
 801e208:	2400006c 	.word	0x2400006c

0801e20c <__libc_init_array>:
 801e20c:	b570      	push	{r4, r5, r6, lr}
 801e20e:	4d0d      	ldr	r5, [pc, #52]	; (801e244 <__libc_init_array+0x38>)
 801e210:	4c0d      	ldr	r4, [pc, #52]	; (801e248 <__libc_init_array+0x3c>)
 801e212:	1b64      	subs	r4, r4, r5
 801e214:	10a4      	asrs	r4, r4, #2
 801e216:	2600      	movs	r6, #0
 801e218:	42a6      	cmp	r6, r4
 801e21a:	d109      	bne.n	801e230 <__libc_init_array+0x24>
 801e21c:	4d0b      	ldr	r5, [pc, #44]	; (801e24c <__libc_init_array+0x40>)
 801e21e:	4c0c      	ldr	r4, [pc, #48]	; (801e250 <__libc_init_array+0x44>)
 801e220:	f001 fe68 	bl	801fef4 <_init>
 801e224:	1b64      	subs	r4, r4, r5
 801e226:	10a4      	asrs	r4, r4, #2
 801e228:	2600      	movs	r6, #0
 801e22a:	42a6      	cmp	r6, r4
 801e22c:	d105      	bne.n	801e23a <__libc_init_array+0x2e>
 801e22e:	bd70      	pop	{r4, r5, r6, pc}
 801e230:	f855 3b04 	ldr.w	r3, [r5], #4
 801e234:	4798      	blx	r3
 801e236:	3601      	adds	r6, #1
 801e238:	e7ee      	b.n	801e218 <__libc_init_array+0xc>
 801e23a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e23e:	4798      	blx	r3
 801e240:	3601      	adds	r6, #1
 801e242:	e7f2      	b.n	801e22a <__libc_init_array+0x1e>
 801e244:	08020a64 	.word	0x08020a64
 801e248:	08020a64 	.word	0x08020a64
 801e24c:	08020a64 	.word	0x08020a64
 801e250:	08020a74 	.word	0x08020a74

0801e254 <__retarget_lock_init_recursive>:
 801e254:	4770      	bx	lr

0801e256 <__retarget_lock_acquire_recursive>:
 801e256:	4770      	bx	lr

0801e258 <__retarget_lock_release_recursive>:
 801e258:	4770      	bx	lr

0801e25a <memcpy>:
 801e25a:	440a      	add	r2, r1
 801e25c:	4291      	cmp	r1, r2
 801e25e:	f100 33ff 	add.w	r3, r0, #4294967295
 801e262:	d100      	bne.n	801e266 <memcpy+0xc>
 801e264:	4770      	bx	lr
 801e266:	b510      	push	{r4, lr}
 801e268:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e270:	4291      	cmp	r1, r2
 801e272:	d1f9      	bne.n	801e268 <memcpy+0xe>
 801e274:	bd10      	pop	{r4, pc}

0801e276 <quorem>:
 801e276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e27a:	6903      	ldr	r3, [r0, #16]
 801e27c:	690c      	ldr	r4, [r1, #16]
 801e27e:	42a3      	cmp	r3, r4
 801e280:	4607      	mov	r7, r0
 801e282:	db7e      	blt.n	801e382 <quorem+0x10c>
 801e284:	3c01      	subs	r4, #1
 801e286:	f101 0814 	add.w	r8, r1, #20
 801e28a:	f100 0514 	add.w	r5, r0, #20
 801e28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e292:	9301      	str	r3, [sp, #4]
 801e294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e29c:	3301      	adds	r3, #1
 801e29e:	429a      	cmp	r2, r3
 801e2a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e2a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e2a8:	fbb2 f6f3 	udiv	r6, r2, r3
 801e2ac:	d331      	bcc.n	801e312 <quorem+0x9c>
 801e2ae:	f04f 0e00 	mov.w	lr, #0
 801e2b2:	4640      	mov	r0, r8
 801e2b4:	46ac      	mov	ip, r5
 801e2b6:	46f2      	mov	sl, lr
 801e2b8:	f850 2b04 	ldr.w	r2, [r0], #4
 801e2bc:	b293      	uxth	r3, r2
 801e2be:	fb06 e303 	mla	r3, r6, r3, lr
 801e2c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e2c6:	0c1a      	lsrs	r2, r3, #16
 801e2c8:	b29b      	uxth	r3, r3
 801e2ca:	ebaa 0303 	sub.w	r3, sl, r3
 801e2ce:	f8dc a000 	ldr.w	sl, [ip]
 801e2d2:	fa13 f38a 	uxtah	r3, r3, sl
 801e2d6:	fb06 220e 	mla	r2, r6, lr, r2
 801e2da:	9300      	str	r3, [sp, #0]
 801e2dc:	9b00      	ldr	r3, [sp, #0]
 801e2de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e2e2:	b292      	uxth	r2, r2
 801e2e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e2ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801e2f0:	4581      	cmp	r9, r0
 801e2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2f6:	f84c 3b04 	str.w	r3, [ip], #4
 801e2fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e2fe:	d2db      	bcs.n	801e2b8 <quorem+0x42>
 801e300:	f855 300b 	ldr.w	r3, [r5, fp]
 801e304:	b92b      	cbnz	r3, 801e312 <quorem+0x9c>
 801e306:	9b01      	ldr	r3, [sp, #4]
 801e308:	3b04      	subs	r3, #4
 801e30a:	429d      	cmp	r5, r3
 801e30c:	461a      	mov	r2, r3
 801e30e:	d32c      	bcc.n	801e36a <quorem+0xf4>
 801e310:	613c      	str	r4, [r7, #16]
 801e312:	4638      	mov	r0, r7
 801e314:	f001 f920 	bl	801f558 <__mcmp>
 801e318:	2800      	cmp	r0, #0
 801e31a:	db22      	blt.n	801e362 <quorem+0xec>
 801e31c:	3601      	adds	r6, #1
 801e31e:	4629      	mov	r1, r5
 801e320:	2000      	movs	r0, #0
 801e322:	f858 2b04 	ldr.w	r2, [r8], #4
 801e326:	f8d1 c000 	ldr.w	ip, [r1]
 801e32a:	b293      	uxth	r3, r2
 801e32c:	1ac3      	subs	r3, r0, r3
 801e32e:	0c12      	lsrs	r2, r2, #16
 801e330:	fa13 f38c 	uxtah	r3, r3, ip
 801e334:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801e338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e33c:	b29b      	uxth	r3, r3
 801e33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e342:	45c1      	cmp	r9, r8
 801e344:	f841 3b04 	str.w	r3, [r1], #4
 801e348:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e34c:	d2e9      	bcs.n	801e322 <quorem+0xac>
 801e34e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e356:	b922      	cbnz	r2, 801e362 <quorem+0xec>
 801e358:	3b04      	subs	r3, #4
 801e35a:	429d      	cmp	r5, r3
 801e35c:	461a      	mov	r2, r3
 801e35e:	d30a      	bcc.n	801e376 <quorem+0x100>
 801e360:	613c      	str	r4, [r7, #16]
 801e362:	4630      	mov	r0, r6
 801e364:	b003      	add	sp, #12
 801e366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e36a:	6812      	ldr	r2, [r2, #0]
 801e36c:	3b04      	subs	r3, #4
 801e36e:	2a00      	cmp	r2, #0
 801e370:	d1ce      	bne.n	801e310 <quorem+0x9a>
 801e372:	3c01      	subs	r4, #1
 801e374:	e7c9      	b.n	801e30a <quorem+0x94>
 801e376:	6812      	ldr	r2, [r2, #0]
 801e378:	3b04      	subs	r3, #4
 801e37a:	2a00      	cmp	r2, #0
 801e37c:	d1f0      	bne.n	801e360 <quorem+0xea>
 801e37e:	3c01      	subs	r4, #1
 801e380:	e7eb      	b.n	801e35a <quorem+0xe4>
 801e382:	2000      	movs	r0, #0
 801e384:	e7ee      	b.n	801e364 <quorem+0xee>
	...

0801e388 <_dtoa_r>:
 801e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e38c:	ed2d 8b02 	vpush	{d8}
 801e390:	69c5      	ldr	r5, [r0, #28]
 801e392:	b091      	sub	sp, #68	; 0x44
 801e394:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e398:	ec59 8b10 	vmov	r8, r9, d0
 801e39c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e39e:	9106      	str	r1, [sp, #24]
 801e3a0:	4606      	mov	r6, r0
 801e3a2:	9208      	str	r2, [sp, #32]
 801e3a4:	930c      	str	r3, [sp, #48]	; 0x30
 801e3a6:	b975      	cbnz	r5, 801e3c6 <_dtoa_r+0x3e>
 801e3a8:	2010      	movs	r0, #16
 801e3aa:	f000 fda5 	bl	801eef8 <malloc>
 801e3ae:	4602      	mov	r2, r0
 801e3b0:	61f0      	str	r0, [r6, #28]
 801e3b2:	b920      	cbnz	r0, 801e3be <_dtoa_r+0x36>
 801e3b4:	4ba6      	ldr	r3, [pc, #664]	; (801e650 <_dtoa_r+0x2c8>)
 801e3b6:	21ef      	movs	r1, #239	; 0xef
 801e3b8:	48a6      	ldr	r0, [pc, #664]	; (801e654 <_dtoa_r+0x2cc>)
 801e3ba:	f001 fc65 	bl	801fc88 <__assert_func>
 801e3be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e3c2:	6005      	str	r5, [r0, #0]
 801e3c4:	60c5      	str	r5, [r0, #12]
 801e3c6:	69f3      	ldr	r3, [r6, #28]
 801e3c8:	6819      	ldr	r1, [r3, #0]
 801e3ca:	b151      	cbz	r1, 801e3e2 <_dtoa_r+0x5a>
 801e3cc:	685a      	ldr	r2, [r3, #4]
 801e3ce:	604a      	str	r2, [r1, #4]
 801e3d0:	2301      	movs	r3, #1
 801e3d2:	4093      	lsls	r3, r2
 801e3d4:	608b      	str	r3, [r1, #8]
 801e3d6:	4630      	mov	r0, r6
 801e3d8:	f000 fe82 	bl	801f0e0 <_Bfree>
 801e3dc:	69f3      	ldr	r3, [r6, #28]
 801e3de:	2200      	movs	r2, #0
 801e3e0:	601a      	str	r2, [r3, #0]
 801e3e2:	f1b9 0300 	subs.w	r3, r9, #0
 801e3e6:	bfbb      	ittet	lt
 801e3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e3ec:	9303      	strlt	r3, [sp, #12]
 801e3ee:	2300      	movge	r3, #0
 801e3f0:	2201      	movlt	r2, #1
 801e3f2:	bfac      	ite	ge
 801e3f4:	6023      	strge	r3, [r4, #0]
 801e3f6:	6022      	strlt	r2, [r4, #0]
 801e3f8:	4b97      	ldr	r3, [pc, #604]	; (801e658 <_dtoa_r+0x2d0>)
 801e3fa:	9c03      	ldr	r4, [sp, #12]
 801e3fc:	43a3      	bics	r3, r4
 801e3fe:	d11c      	bne.n	801e43a <_dtoa_r+0xb2>
 801e400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e402:	f242 730f 	movw	r3, #9999	; 0x270f
 801e406:	6013      	str	r3, [r2, #0]
 801e408:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801e40c:	ea53 0308 	orrs.w	r3, r3, r8
 801e410:	f000 84fb 	beq.w	801ee0a <_dtoa_r+0xa82>
 801e414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e416:	b963      	cbnz	r3, 801e432 <_dtoa_r+0xaa>
 801e418:	4b90      	ldr	r3, [pc, #576]	; (801e65c <_dtoa_r+0x2d4>)
 801e41a:	e020      	b.n	801e45e <_dtoa_r+0xd6>
 801e41c:	4b90      	ldr	r3, [pc, #576]	; (801e660 <_dtoa_r+0x2d8>)
 801e41e:	9301      	str	r3, [sp, #4]
 801e420:	3308      	adds	r3, #8
 801e422:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e424:	6013      	str	r3, [r2, #0]
 801e426:	9801      	ldr	r0, [sp, #4]
 801e428:	b011      	add	sp, #68	; 0x44
 801e42a:	ecbd 8b02 	vpop	{d8}
 801e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e432:	4b8a      	ldr	r3, [pc, #552]	; (801e65c <_dtoa_r+0x2d4>)
 801e434:	9301      	str	r3, [sp, #4]
 801e436:	3303      	adds	r3, #3
 801e438:	e7f3      	b.n	801e422 <_dtoa_r+0x9a>
 801e43a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801e43e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e446:	d10c      	bne.n	801e462 <_dtoa_r+0xda>
 801e448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e44a:	2301      	movs	r3, #1
 801e44c:	6013      	str	r3, [r2, #0]
 801e44e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e450:	2b00      	cmp	r3, #0
 801e452:	f000 84d7 	beq.w	801ee04 <_dtoa_r+0xa7c>
 801e456:	4b83      	ldr	r3, [pc, #524]	; (801e664 <_dtoa_r+0x2dc>)
 801e458:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e45a:	6013      	str	r3, [r2, #0]
 801e45c:	3b01      	subs	r3, #1
 801e45e:	9301      	str	r3, [sp, #4]
 801e460:	e7e1      	b.n	801e426 <_dtoa_r+0x9e>
 801e462:	aa0e      	add	r2, sp, #56	; 0x38
 801e464:	a90f      	add	r1, sp, #60	; 0x3c
 801e466:	4630      	mov	r0, r6
 801e468:	eeb0 0b48 	vmov.f64	d0, d8
 801e46c:	f001 f91a 	bl	801f6a4 <__d2b>
 801e470:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801e474:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e476:	4605      	mov	r5, r0
 801e478:	2b00      	cmp	r3, #0
 801e47a:	d046      	beq.n	801e50a <_dtoa_r+0x182>
 801e47c:	eeb0 7b48 	vmov.f64	d7, d8
 801e480:	ee18 1a90 	vmov	r1, s17
 801e484:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e488:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801e48c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801e490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e494:	2000      	movs	r0, #0
 801e496:	ee07 1a90 	vmov	s15, r1
 801e49a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801e49e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801e638 <_dtoa_r+0x2b0>
 801e4a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4a6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801e640 <_dtoa_r+0x2b8>
 801e4aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801e4ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801e648 <_dtoa_r+0x2c0>
 801e4b2:	ee07 3a90 	vmov	s15, r3
 801e4b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801e4ba:	eeb0 7b46 	vmov.f64	d7, d6
 801e4be:	eea4 7b05 	vfma.f64	d7, d4, d5
 801e4c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801e4c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ce:	ee16 ba90 	vmov	fp, s13
 801e4d2:	9009      	str	r0, [sp, #36]	; 0x24
 801e4d4:	d508      	bpl.n	801e4e8 <_dtoa_r+0x160>
 801e4d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801e4da:	eeb4 6b47 	vcmp.f64	d6, d7
 801e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e2:	bf18      	it	ne
 801e4e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801e4e8:	f1bb 0f16 	cmp.w	fp, #22
 801e4ec:	d82b      	bhi.n	801e546 <_dtoa_r+0x1be>
 801e4ee:	495e      	ldr	r1, [pc, #376]	; (801e668 <_dtoa_r+0x2e0>)
 801e4f0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801e4f4:	ed91 7b00 	vldr	d7, [r1]
 801e4f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e500:	d501      	bpl.n	801e506 <_dtoa_r+0x17e>
 801e502:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e506:	2100      	movs	r1, #0
 801e508:	e01e      	b.n	801e548 <_dtoa_r+0x1c0>
 801e50a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e50c:	4413      	add	r3, r2
 801e50e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801e512:	2920      	cmp	r1, #32
 801e514:	bfc1      	itttt	gt
 801e516:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801e51a:	408c      	lslgt	r4, r1
 801e51c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801e520:	fa28 f101 	lsrgt.w	r1, r8, r1
 801e524:	bfd6      	itet	le
 801e526:	f1c1 0120 	rsble	r1, r1, #32
 801e52a:	4321      	orrgt	r1, r4
 801e52c:	fa08 f101 	lslle.w	r1, r8, r1
 801e530:	ee07 1a90 	vmov	s15, r1
 801e534:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801e538:	3b01      	subs	r3, #1
 801e53a:	ee17 1a90 	vmov	r1, s15
 801e53e:	2001      	movs	r0, #1
 801e540:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801e544:	e7a7      	b.n	801e496 <_dtoa_r+0x10e>
 801e546:	2101      	movs	r1, #1
 801e548:	1ad2      	subs	r2, r2, r3
 801e54a:	1e53      	subs	r3, r2, #1
 801e54c:	9305      	str	r3, [sp, #20]
 801e54e:	bf45      	ittet	mi
 801e550:	f1c2 0301 	rsbmi	r3, r2, #1
 801e554:	9304      	strmi	r3, [sp, #16]
 801e556:	2300      	movpl	r3, #0
 801e558:	2300      	movmi	r3, #0
 801e55a:	bf4c      	ite	mi
 801e55c:	9305      	strmi	r3, [sp, #20]
 801e55e:	9304      	strpl	r3, [sp, #16]
 801e560:	f1bb 0f00 	cmp.w	fp, #0
 801e564:	910b      	str	r1, [sp, #44]	; 0x2c
 801e566:	db18      	blt.n	801e59a <_dtoa_r+0x212>
 801e568:	9b05      	ldr	r3, [sp, #20]
 801e56a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801e56e:	445b      	add	r3, fp
 801e570:	9305      	str	r3, [sp, #20]
 801e572:	2300      	movs	r3, #0
 801e574:	9a06      	ldr	r2, [sp, #24]
 801e576:	2a09      	cmp	r2, #9
 801e578:	d848      	bhi.n	801e60c <_dtoa_r+0x284>
 801e57a:	2a05      	cmp	r2, #5
 801e57c:	bfc4      	itt	gt
 801e57e:	3a04      	subgt	r2, #4
 801e580:	9206      	strgt	r2, [sp, #24]
 801e582:	9a06      	ldr	r2, [sp, #24]
 801e584:	f1a2 0202 	sub.w	r2, r2, #2
 801e588:	bfcc      	ite	gt
 801e58a:	2400      	movgt	r4, #0
 801e58c:	2401      	movle	r4, #1
 801e58e:	2a03      	cmp	r2, #3
 801e590:	d847      	bhi.n	801e622 <_dtoa_r+0x29a>
 801e592:	e8df f002 	tbb	[pc, r2]
 801e596:	2d0b      	.short	0x2d0b
 801e598:	392b      	.short	0x392b
 801e59a:	9b04      	ldr	r3, [sp, #16]
 801e59c:	2200      	movs	r2, #0
 801e59e:	eba3 030b 	sub.w	r3, r3, fp
 801e5a2:	9304      	str	r3, [sp, #16]
 801e5a4:	920a      	str	r2, [sp, #40]	; 0x28
 801e5a6:	f1cb 0300 	rsb	r3, fp, #0
 801e5aa:	e7e3      	b.n	801e574 <_dtoa_r+0x1ec>
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	9207      	str	r2, [sp, #28]
 801e5b0:	9a08      	ldr	r2, [sp, #32]
 801e5b2:	2a00      	cmp	r2, #0
 801e5b4:	dc38      	bgt.n	801e628 <_dtoa_r+0x2a0>
 801e5b6:	f04f 0a01 	mov.w	sl, #1
 801e5ba:	46d1      	mov	r9, sl
 801e5bc:	4652      	mov	r2, sl
 801e5be:	f8cd a020 	str.w	sl, [sp, #32]
 801e5c2:	69f7      	ldr	r7, [r6, #28]
 801e5c4:	2100      	movs	r1, #0
 801e5c6:	2004      	movs	r0, #4
 801e5c8:	f100 0c14 	add.w	ip, r0, #20
 801e5cc:	4594      	cmp	ip, r2
 801e5ce:	d930      	bls.n	801e632 <_dtoa_r+0x2aa>
 801e5d0:	6079      	str	r1, [r7, #4]
 801e5d2:	4630      	mov	r0, r6
 801e5d4:	930d      	str	r3, [sp, #52]	; 0x34
 801e5d6:	f000 fd43 	bl	801f060 <_Balloc>
 801e5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5dc:	9001      	str	r0, [sp, #4]
 801e5de:	4602      	mov	r2, r0
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	d145      	bne.n	801e670 <_dtoa_r+0x2e8>
 801e5e4:	4b21      	ldr	r3, [pc, #132]	; (801e66c <_dtoa_r+0x2e4>)
 801e5e6:	f240 11af 	movw	r1, #431	; 0x1af
 801e5ea:	e6e5      	b.n	801e3b8 <_dtoa_r+0x30>
 801e5ec:	2201      	movs	r2, #1
 801e5ee:	e7de      	b.n	801e5ae <_dtoa_r+0x226>
 801e5f0:	2200      	movs	r2, #0
 801e5f2:	9207      	str	r2, [sp, #28]
 801e5f4:	9a08      	ldr	r2, [sp, #32]
 801e5f6:	eb0b 0a02 	add.w	sl, fp, r2
 801e5fa:	f10a 0901 	add.w	r9, sl, #1
 801e5fe:	464a      	mov	r2, r9
 801e600:	2a01      	cmp	r2, #1
 801e602:	bfb8      	it	lt
 801e604:	2201      	movlt	r2, #1
 801e606:	e7dc      	b.n	801e5c2 <_dtoa_r+0x23a>
 801e608:	2201      	movs	r2, #1
 801e60a:	e7f2      	b.n	801e5f2 <_dtoa_r+0x26a>
 801e60c:	2401      	movs	r4, #1
 801e60e:	2200      	movs	r2, #0
 801e610:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801e614:	f04f 3aff 	mov.w	sl, #4294967295
 801e618:	2100      	movs	r1, #0
 801e61a:	46d1      	mov	r9, sl
 801e61c:	2212      	movs	r2, #18
 801e61e:	9108      	str	r1, [sp, #32]
 801e620:	e7cf      	b.n	801e5c2 <_dtoa_r+0x23a>
 801e622:	2201      	movs	r2, #1
 801e624:	9207      	str	r2, [sp, #28]
 801e626:	e7f5      	b.n	801e614 <_dtoa_r+0x28c>
 801e628:	f8dd a020 	ldr.w	sl, [sp, #32]
 801e62c:	46d1      	mov	r9, sl
 801e62e:	4652      	mov	r2, sl
 801e630:	e7c7      	b.n	801e5c2 <_dtoa_r+0x23a>
 801e632:	3101      	adds	r1, #1
 801e634:	0040      	lsls	r0, r0, #1
 801e636:	e7c7      	b.n	801e5c8 <_dtoa_r+0x240>
 801e638:	636f4361 	.word	0x636f4361
 801e63c:	3fd287a7 	.word	0x3fd287a7
 801e640:	8b60c8b3 	.word	0x8b60c8b3
 801e644:	3fc68a28 	.word	0x3fc68a28
 801e648:	509f79fb 	.word	0x509f79fb
 801e64c:	3fd34413 	.word	0x3fd34413
 801e650:	08020729 	.word	0x08020729
 801e654:	08020740 	.word	0x08020740
 801e658:	7ff00000 	.word	0x7ff00000
 801e65c:	08020725 	.word	0x08020725
 801e660:	0802071c 	.word	0x0802071c
 801e664:	080206f9 	.word	0x080206f9
 801e668:	08020830 	.word	0x08020830
 801e66c:	08020798 	.word	0x08020798
 801e670:	69f2      	ldr	r2, [r6, #28]
 801e672:	9901      	ldr	r1, [sp, #4]
 801e674:	6011      	str	r1, [r2, #0]
 801e676:	f1b9 0f0e 	cmp.w	r9, #14
 801e67a:	d86c      	bhi.n	801e756 <_dtoa_r+0x3ce>
 801e67c:	2c00      	cmp	r4, #0
 801e67e:	d06a      	beq.n	801e756 <_dtoa_r+0x3ce>
 801e680:	f1bb 0f00 	cmp.w	fp, #0
 801e684:	f340 80a0 	ble.w	801e7c8 <_dtoa_r+0x440>
 801e688:	4ac1      	ldr	r2, [pc, #772]	; (801e990 <_dtoa_r+0x608>)
 801e68a:	f00b 010f 	and.w	r1, fp, #15
 801e68e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801e692:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801e696:	ed92 7b00 	vldr	d7, [r2]
 801e69a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801e69e:	f000 8087 	beq.w	801e7b0 <_dtoa_r+0x428>
 801e6a2:	49bc      	ldr	r1, [pc, #752]	; (801e994 <_dtoa_r+0x60c>)
 801e6a4:	ed91 6b08 	vldr	d6, [r1, #32]
 801e6a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801e6ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e6b0:	f002 020f 	and.w	r2, r2, #15
 801e6b4:	2103      	movs	r1, #3
 801e6b6:	48b7      	ldr	r0, [pc, #732]	; (801e994 <_dtoa_r+0x60c>)
 801e6b8:	2a00      	cmp	r2, #0
 801e6ba:	d17b      	bne.n	801e7b4 <_dtoa_r+0x42c>
 801e6bc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e6c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801e6c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e6c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e6ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e6ce:	2a00      	cmp	r2, #0
 801e6d0:	f000 80a0 	beq.w	801e814 <_dtoa_r+0x48c>
 801e6d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e6d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6e0:	f140 8098 	bpl.w	801e814 <_dtoa_r+0x48c>
 801e6e4:	f1b9 0f00 	cmp.w	r9, #0
 801e6e8:	f000 8094 	beq.w	801e814 <_dtoa_r+0x48c>
 801e6ec:	f1ba 0f00 	cmp.w	sl, #0
 801e6f0:	dd2f      	ble.n	801e752 <_dtoa_r+0x3ca>
 801e6f2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801e6f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e6fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e6fe:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e702:	3101      	adds	r1, #1
 801e704:	4654      	mov	r4, sl
 801e706:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e70a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801e70e:	ee07 1a90 	vmov	s15, r1
 801e712:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e716:	eea7 5b06 	vfma.f64	d5, d7, d6
 801e71a:	ee15 7a90 	vmov	r7, s11
 801e71e:	ec51 0b15 	vmov	r0, r1, d5
 801e722:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801e726:	2c00      	cmp	r4, #0
 801e728:	d177      	bne.n	801e81a <_dtoa_r+0x492>
 801e72a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801e72e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e732:	ec41 0b17 	vmov	d7, r0, r1
 801e736:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e73e:	f300 826a 	bgt.w	801ec16 <_dtoa_r+0x88e>
 801e742:	eeb1 7b47 	vneg.f64	d7, d7
 801e746:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e74e:	f100 8260 	bmi.w	801ec12 <_dtoa_r+0x88a>
 801e752:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e758:	2a00      	cmp	r2, #0
 801e75a:	f2c0 811d 	blt.w	801e998 <_dtoa_r+0x610>
 801e75e:	f1bb 0f0e 	cmp.w	fp, #14
 801e762:	f300 8119 	bgt.w	801e998 <_dtoa_r+0x610>
 801e766:	4b8a      	ldr	r3, [pc, #552]	; (801e990 <_dtoa_r+0x608>)
 801e768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e76c:	ed93 6b00 	vldr	d6, [r3]
 801e770:	9b08      	ldr	r3, [sp, #32]
 801e772:	2b00      	cmp	r3, #0
 801e774:	f280 80b7 	bge.w	801e8e6 <_dtoa_r+0x55e>
 801e778:	f1b9 0f00 	cmp.w	r9, #0
 801e77c:	f300 80b3 	bgt.w	801e8e6 <_dtoa_r+0x55e>
 801e780:	f040 8246 	bne.w	801ec10 <_dtoa_r+0x888>
 801e784:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801e788:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e78c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e798:	464c      	mov	r4, r9
 801e79a:	464f      	mov	r7, r9
 801e79c:	f280 821c 	bge.w	801ebd8 <_dtoa_r+0x850>
 801e7a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801e7a4:	2331      	movs	r3, #49	; 0x31
 801e7a6:	f808 3b01 	strb.w	r3, [r8], #1
 801e7aa:	f10b 0b01 	add.w	fp, fp, #1
 801e7ae:	e218      	b.n	801ebe2 <_dtoa_r+0x85a>
 801e7b0:	2102      	movs	r1, #2
 801e7b2:	e780      	b.n	801e6b6 <_dtoa_r+0x32e>
 801e7b4:	07d4      	lsls	r4, r2, #31
 801e7b6:	d504      	bpl.n	801e7c2 <_dtoa_r+0x43a>
 801e7b8:	ed90 6b00 	vldr	d6, [r0]
 801e7bc:	3101      	adds	r1, #1
 801e7be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e7c2:	1052      	asrs	r2, r2, #1
 801e7c4:	3008      	adds	r0, #8
 801e7c6:	e777      	b.n	801e6b8 <_dtoa_r+0x330>
 801e7c8:	d022      	beq.n	801e810 <_dtoa_r+0x488>
 801e7ca:	f1cb 0200 	rsb	r2, fp, #0
 801e7ce:	4970      	ldr	r1, [pc, #448]	; (801e990 <_dtoa_r+0x608>)
 801e7d0:	f002 000f 	and.w	r0, r2, #15
 801e7d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801e7d8:	ed91 7b00 	vldr	d7, [r1]
 801e7dc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801e7e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e7e4:	486b      	ldr	r0, [pc, #428]	; (801e994 <_dtoa_r+0x60c>)
 801e7e6:	1112      	asrs	r2, r2, #4
 801e7e8:	2400      	movs	r4, #0
 801e7ea:	2102      	movs	r1, #2
 801e7ec:	b92a      	cbnz	r2, 801e7fa <_dtoa_r+0x472>
 801e7ee:	2c00      	cmp	r4, #0
 801e7f0:	f43f af6a 	beq.w	801e6c8 <_dtoa_r+0x340>
 801e7f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e7f8:	e766      	b.n	801e6c8 <_dtoa_r+0x340>
 801e7fa:	07d7      	lsls	r7, r2, #31
 801e7fc:	d505      	bpl.n	801e80a <_dtoa_r+0x482>
 801e7fe:	ed90 6b00 	vldr	d6, [r0]
 801e802:	3101      	adds	r1, #1
 801e804:	2401      	movs	r4, #1
 801e806:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e80a:	1052      	asrs	r2, r2, #1
 801e80c:	3008      	adds	r0, #8
 801e80e:	e7ed      	b.n	801e7ec <_dtoa_r+0x464>
 801e810:	2102      	movs	r1, #2
 801e812:	e759      	b.n	801e6c8 <_dtoa_r+0x340>
 801e814:	465a      	mov	r2, fp
 801e816:	464c      	mov	r4, r9
 801e818:	e775      	b.n	801e706 <_dtoa_r+0x37e>
 801e81a:	ec41 0b17 	vmov	d7, r0, r1
 801e81e:	495c      	ldr	r1, [pc, #368]	; (801e990 <_dtoa_r+0x608>)
 801e820:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801e824:	ed11 4b02 	vldr	d4, [r1, #-8]
 801e828:	9901      	ldr	r1, [sp, #4]
 801e82a:	440c      	add	r4, r1
 801e82c:	9907      	ldr	r1, [sp, #28]
 801e82e:	b351      	cbz	r1, 801e886 <_dtoa_r+0x4fe>
 801e830:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801e834:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801e838:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801e83c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801e840:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801e844:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e848:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e84c:	ee14 1a90 	vmov	r1, s9
 801e850:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e854:	3130      	adds	r1, #48	; 0x30
 801e856:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e85a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e862:	f808 1b01 	strb.w	r1, [r8], #1
 801e866:	d439      	bmi.n	801e8dc <_dtoa_r+0x554>
 801e868:	ee32 5b46 	vsub.f64	d5, d2, d6
 801e86c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801e870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e874:	d472      	bmi.n	801e95c <_dtoa_r+0x5d4>
 801e876:	45a0      	cmp	r8, r4
 801e878:	f43f af6b 	beq.w	801e752 <_dtoa_r+0x3ca>
 801e87c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801e880:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e884:	e7e0      	b.n	801e848 <_dtoa_r+0x4c0>
 801e886:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801e88a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e88e:	4620      	mov	r0, r4
 801e890:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801e894:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801e898:	ee14 1a90 	vmov	r1, s9
 801e89c:	3130      	adds	r1, #48	; 0x30
 801e89e:	f808 1b01 	strb.w	r1, [r8], #1
 801e8a2:	45a0      	cmp	r8, r4
 801e8a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801e8a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e8ac:	d118      	bne.n	801e8e0 <_dtoa_r+0x558>
 801e8ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801e8b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801e8b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801e8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8be:	dc4d      	bgt.n	801e95c <_dtoa_r+0x5d4>
 801e8c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e8c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8cc:	f57f af41 	bpl.w	801e752 <_dtoa_r+0x3ca>
 801e8d0:	4680      	mov	r8, r0
 801e8d2:	3801      	subs	r0, #1
 801e8d4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801e8d8:	2b30      	cmp	r3, #48	; 0x30
 801e8da:	d0f9      	beq.n	801e8d0 <_dtoa_r+0x548>
 801e8dc:	4693      	mov	fp, r2
 801e8de:	e02a      	b.n	801e936 <_dtoa_r+0x5ae>
 801e8e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801e8e4:	e7d6      	b.n	801e894 <_dtoa_r+0x50c>
 801e8e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e8ea:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801e8ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801e8f2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801e8f6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801e8fa:	ee15 3a10 	vmov	r3, s10
 801e8fe:	3330      	adds	r3, #48	; 0x30
 801e900:	f808 3b01 	strb.w	r3, [r8], #1
 801e904:	9b01      	ldr	r3, [sp, #4]
 801e906:	eba8 0303 	sub.w	r3, r8, r3
 801e90a:	4599      	cmp	r9, r3
 801e90c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801e910:	eea3 7b46 	vfms.f64	d7, d3, d6
 801e914:	d133      	bne.n	801e97e <_dtoa_r+0x5f6>
 801e916:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e91a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e922:	dc1a      	bgt.n	801e95a <_dtoa_r+0x5d2>
 801e924:	eeb4 7b46 	vcmp.f64	d7, d6
 801e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e92c:	d103      	bne.n	801e936 <_dtoa_r+0x5ae>
 801e92e:	ee15 3a10 	vmov	r3, s10
 801e932:	07d9      	lsls	r1, r3, #31
 801e934:	d411      	bmi.n	801e95a <_dtoa_r+0x5d2>
 801e936:	4629      	mov	r1, r5
 801e938:	4630      	mov	r0, r6
 801e93a:	f000 fbd1 	bl	801f0e0 <_Bfree>
 801e93e:	2300      	movs	r3, #0
 801e940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e942:	f888 3000 	strb.w	r3, [r8]
 801e946:	f10b 0301 	add.w	r3, fp, #1
 801e94a:	6013      	str	r3, [r2, #0]
 801e94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e94e:	2b00      	cmp	r3, #0
 801e950:	f43f ad69 	beq.w	801e426 <_dtoa_r+0x9e>
 801e954:	f8c3 8000 	str.w	r8, [r3]
 801e958:	e565      	b.n	801e426 <_dtoa_r+0x9e>
 801e95a:	465a      	mov	r2, fp
 801e95c:	4643      	mov	r3, r8
 801e95e:	4698      	mov	r8, r3
 801e960:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801e964:	2939      	cmp	r1, #57	; 0x39
 801e966:	d106      	bne.n	801e976 <_dtoa_r+0x5ee>
 801e968:	9901      	ldr	r1, [sp, #4]
 801e96a:	4299      	cmp	r1, r3
 801e96c:	d1f7      	bne.n	801e95e <_dtoa_r+0x5d6>
 801e96e:	9801      	ldr	r0, [sp, #4]
 801e970:	2130      	movs	r1, #48	; 0x30
 801e972:	3201      	adds	r2, #1
 801e974:	7001      	strb	r1, [r0, #0]
 801e976:	7819      	ldrb	r1, [r3, #0]
 801e978:	3101      	adds	r1, #1
 801e97a:	7019      	strb	r1, [r3, #0]
 801e97c:	e7ae      	b.n	801e8dc <_dtoa_r+0x554>
 801e97e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801e982:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e98a:	d1b2      	bne.n	801e8f2 <_dtoa_r+0x56a>
 801e98c:	e7d3      	b.n	801e936 <_dtoa_r+0x5ae>
 801e98e:	bf00      	nop
 801e990:	08020830 	.word	0x08020830
 801e994:	08020808 	.word	0x08020808
 801e998:	9907      	ldr	r1, [sp, #28]
 801e99a:	2900      	cmp	r1, #0
 801e99c:	f000 80d0 	beq.w	801eb40 <_dtoa_r+0x7b8>
 801e9a0:	9906      	ldr	r1, [sp, #24]
 801e9a2:	2901      	cmp	r1, #1
 801e9a4:	f300 80b4 	bgt.w	801eb10 <_dtoa_r+0x788>
 801e9a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e9aa:	2900      	cmp	r1, #0
 801e9ac:	f000 80ac 	beq.w	801eb08 <_dtoa_r+0x780>
 801e9b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801e9b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801e9b8:	461c      	mov	r4, r3
 801e9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801e9bc:	9b04      	ldr	r3, [sp, #16]
 801e9be:	4413      	add	r3, r2
 801e9c0:	9304      	str	r3, [sp, #16]
 801e9c2:	9b05      	ldr	r3, [sp, #20]
 801e9c4:	2101      	movs	r1, #1
 801e9c6:	4413      	add	r3, r2
 801e9c8:	4630      	mov	r0, r6
 801e9ca:	9305      	str	r3, [sp, #20]
 801e9cc:	f000 fc3e 	bl	801f24c <__i2b>
 801e9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9d2:	4607      	mov	r7, r0
 801e9d4:	f1b8 0f00 	cmp.w	r8, #0
 801e9d8:	d00d      	beq.n	801e9f6 <_dtoa_r+0x66e>
 801e9da:	9a05      	ldr	r2, [sp, #20]
 801e9dc:	2a00      	cmp	r2, #0
 801e9de:	dd0a      	ble.n	801e9f6 <_dtoa_r+0x66e>
 801e9e0:	4542      	cmp	r2, r8
 801e9e2:	9904      	ldr	r1, [sp, #16]
 801e9e4:	bfa8      	it	ge
 801e9e6:	4642      	movge	r2, r8
 801e9e8:	1a89      	subs	r1, r1, r2
 801e9ea:	9104      	str	r1, [sp, #16]
 801e9ec:	9905      	ldr	r1, [sp, #20]
 801e9ee:	eba8 0802 	sub.w	r8, r8, r2
 801e9f2:	1a8a      	subs	r2, r1, r2
 801e9f4:	9205      	str	r2, [sp, #20]
 801e9f6:	b303      	cbz	r3, 801ea3a <_dtoa_r+0x6b2>
 801e9f8:	9a07      	ldr	r2, [sp, #28]
 801e9fa:	2a00      	cmp	r2, #0
 801e9fc:	f000 80a5 	beq.w	801eb4a <_dtoa_r+0x7c2>
 801ea00:	2c00      	cmp	r4, #0
 801ea02:	dd13      	ble.n	801ea2c <_dtoa_r+0x6a4>
 801ea04:	4639      	mov	r1, r7
 801ea06:	4622      	mov	r2, r4
 801ea08:	4630      	mov	r0, r6
 801ea0a:	930d      	str	r3, [sp, #52]	; 0x34
 801ea0c:	f000 fcde 	bl	801f3cc <__pow5mult>
 801ea10:	462a      	mov	r2, r5
 801ea12:	4601      	mov	r1, r0
 801ea14:	4607      	mov	r7, r0
 801ea16:	4630      	mov	r0, r6
 801ea18:	f000 fc2e 	bl	801f278 <__multiply>
 801ea1c:	4629      	mov	r1, r5
 801ea1e:	9009      	str	r0, [sp, #36]	; 0x24
 801ea20:	4630      	mov	r0, r6
 801ea22:	f000 fb5d 	bl	801f0e0 <_Bfree>
 801ea26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea2a:	4615      	mov	r5, r2
 801ea2c:	1b1a      	subs	r2, r3, r4
 801ea2e:	d004      	beq.n	801ea3a <_dtoa_r+0x6b2>
 801ea30:	4629      	mov	r1, r5
 801ea32:	4630      	mov	r0, r6
 801ea34:	f000 fcca 	bl	801f3cc <__pow5mult>
 801ea38:	4605      	mov	r5, r0
 801ea3a:	2101      	movs	r1, #1
 801ea3c:	4630      	mov	r0, r6
 801ea3e:	f000 fc05 	bl	801f24c <__i2b>
 801ea42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	4604      	mov	r4, r0
 801ea48:	f340 8081 	ble.w	801eb4e <_dtoa_r+0x7c6>
 801ea4c:	461a      	mov	r2, r3
 801ea4e:	4601      	mov	r1, r0
 801ea50:	4630      	mov	r0, r6
 801ea52:	f000 fcbb 	bl	801f3cc <__pow5mult>
 801ea56:	9b06      	ldr	r3, [sp, #24]
 801ea58:	2b01      	cmp	r3, #1
 801ea5a:	4604      	mov	r4, r0
 801ea5c:	dd7a      	ble.n	801eb54 <_dtoa_r+0x7cc>
 801ea5e:	2300      	movs	r3, #0
 801ea60:	9309      	str	r3, [sp, #36]	; 0x24
 801ea62:	6922      	ldr	r2, [r4, #16]
 801ea64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ea68:	6910      	ldr	r0, [r2, #16]
 801ea6a:	f000 fba1 	bl	801f1b0 <__hi0bits>
 801ea6e:	f1c0 0020 	rsb	r0, r0, #32
 801ea72:	9b05      	ldr	r3, [sp, #20]
 801ea74:	4418      	add	r0, r3
 801ea76:	f010 001f 	ands.w	r0, r0, #31
 801ea7a:	f000 8093 	beq.w	801eba4 <_dtoa_r+0x81c>
 801ea7e:	f1c0 0220 	rsb	r2, r0, #32
 801ea82:	2a04      	cmp	r2, #4
 801ea84:	f340 8085 	ble.w	801eb92 <_dtoa_r+0x80a>
 801ea88:	9b04      	ldr	r3, [sp, #16]
 801ea8a:	f1c0 001c 	rsb	r0, r0, #28
 801ea8e:	4403      	add	r3, r0
 801ea90:	9304      	str	r3, [sp, #16]
 801ea92:	9b05      	ldr	r3, [sp, #20]
 801ea94:	4480      	add	r8, r0
 801ea96:	4403      	add	r3, r0
 801ea98:	9305      	str	r3, [sp, #20]
 801ea9a:	9b04      	ldr	r3, [sp, #16]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	dd05      	ble.n	801eaac <_dtoa_r+0x724>
 801eaa0:	4629      	mov	r1, r5
 801eaa2:	461a      	mov	r2, r3
 801eaa4:	4630      	mov	r0, r6
 801eaa6:	f000 fceb 	bl	801f480 <__lshift>
 801eaaa:	4605      	mov	r5, r0
 801eaac:	9b05      	ldr	r3, [sp, #20]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	dd05      	ble.n	801eabe <_dtoa_r+0x736>
 801eab2:	4621      	mov	r1, r4
 801eab4:	461a      	mov	r2, r3
 801eab6:	4630      	mov	r0, r6
 801eab8:	f000 fce2 	bl	801f480 <__lshift>
 801eabc:	4604      	mov	r4, r0
 801eabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d071      	beq.n	801eba8 <_dtoa_r+0x820>
 801eac4:	4621      	mov	r1, r4
 801eac6:	4628      	mov	r0, r5
 801eac8:	f000 fd46 	bl	801f558 <__mcmp>
 801eacc:	2800      	cmp	r0, #0
 801eace:	da6b      	bge.n	801eba8 <_dtoa_r+0x820>
 801ead0:	2300      	movs	r3, #0
 801ead2:	4629      	mov	r1, r5
 801ead4:	220a      	movs	r2, #10
 801ead6:	4630      	mov	r0, r6
 801ead8:	f000 fb24 	bl	801f124 <__multadd>
 801eadc:	9b07      	ldr	r3, [sp, #28]
 801eade:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eae2:	4605      	mov	r5, r0
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	f000 8197 	beq.w	801ee18 <_dtoa_r+0xa90>
 801eaea:	4639      	mov	r1, r7
 801eaec:	2300      	movs	r3, #0
 801eaee:	220a      	movs	r2, #10
 801eaf0:	4630      	mov	r0, r6
 801eaf2:	f000 fb17 	bl	801f124 <__multadd>
 801eaf6:	f1ba 0f00 	cmp.w	sl, #0
 801eafa:	4607      	mov	r7, r0
 801eafc:	f300 8093 	bgt.w	801ec26 <_dtoa_r+0x89e>
 801eb00:	9b06      	ldr	r3, [sp, #24]
 801eb02:	2b02      	cmp	r3, #2
 801eb04:	dc57      	bgt.n	801ebb6 <_dtoa_r+0x82e>
 801eb06:	e08e      	b.n	801ec26 <_dtoa_r+0x89e>
 801eb08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801eb0e:	e751      	b.n	801e9b4 <_dtoa_r+0x62c>
 801eb10:	f109 34ff 	add.w	r4, r9, #4294967295
 801eb14:	42a3      	cmp	r3, r4
 801eb16:	bfbf      	itttt	lt
 801eb18:	1ae2      	sublt	r2, r4, r3
 801eb1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801eb1c:	189b      	addlt	r3, r3, r2
 801eb1e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801eb20:	bfae      	itee	ge
 801eb22:	1b1c      	subge	r4, r3, r4
 801eb24:	4623      	movlt	r3, r4
 801eb26:	2400      	movlt	r4, #0
 801eb28:	f1b9 0f00 	cmp.w	r9, #0
 801eb2c:	bfb5      	itete	lt
 801eb2e:	9a04      	ldrlt	r2, [sp, #16]
 801eb30:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801eb34:	eba2 0809 	sublt.w	r8, r2, r9
 801eb38:	464a      	movge	r2, r9
 801eb3a:	bfb8      	it	lt
 801eb3c:	2200      	movlt	r2, #0
 801eb3e:	e73c      	b.n	801e9ba <_dtoa_r+0x632>
 801eb40:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801eb44:	9f07      	ldr	r7, [sp, #28]
 801eb46:	461c      	mov	r4, r3
 801eb48:	e744      	b.n	801e9d4 <_dtoa_r+0x64c>
 801eb4a:	461a      	mov	r2, r3
 801eb4c:	e770      	b.n	801ea30 <_dtoa_r+0x6a8>
 801eb4e:	9b06      	ldr	r3, [sp, #24]
 801eb50:	2b01      	cmp	r3, #1
 801eb52:	dc18      	bgt.n	801eb86 <_dtoa_r+0x7fe>
 801eb54:	9b02      	ldr	r3, [sp, #8]
 801eb56:	b9b3      	cbnz	r3, 801eb86 <_dtoa_r+0x7fe>
 801eb58:	9b03      	ldr	r3, [sp, #12]
 801eb5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801eb5e:	b9a2      	cbnz	r2, 801eb8a <_dtoa_r+0x802>
 801eb60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801eb64:	0d12      	lsrs	r2, r2, #20
 801eb66:	0512      	lsls	r2, r2, #20
 801eb68:	b18a      	cbz	r2, 801eb8e <_dtoa_r+0x806>
 801eb6a:	9b04      	ldr	r3, [sp, #16]
 801eb6c:	3301      	adds	r3, #1
 801eb6e:	9304      	str	r3, [sp, #16]
 801eb70:	9b05      	ldr	r3, [sp, #20]
 801eb72:	3301      	adds	r3, #1
 801eb74:	9305      	str	r3, [sp, #20]
 801eb76:	2301      	movs	r3, #1
 801eb78:	9309      	str	r3, [sp, #36]	; 0x24
 801eb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	f47f af70 	bne.w	801ea62 <_dtoa_r+0x6da>
 801eb82:	2001      	movs	r0, #1
 801eb84:	e775      	b.n	801ea72 <_dtoa_r+0x6ea>
 801eb86:	2300      	movs	r3, #0
 801eb88:	e7f6      	b.n	801eb78 <_dtoa_r+0x7f0>
 801eb8a:	9b02      	ldr	r3, [sp, #8]
 801eb8c:	e7f4      	b.n	801eb78 <_dtoa_r+0x7f0>
 801eb8e:	9209      	str	r2, [sp, #36]	; 0x24
 801eb90:	e7f3      	b.n	801eb7a <_dtoa_r+0x7f2>
 801eb92:	d082      	beq.n	801ea9a <_dtoa_r+0x712>
 801eb94:	9b04      	ldr	r3, [sp, #16]
 801eb96:	321c      	adds	r2, #28
 801eb98:	4413      	add	r3, r2
 801eb9a:	9304      	str	r3, [sp, #16]
 801eb9c:	9b05      	ldr	r3, [sp, #20]
 801eb9e:	4490      	add	r8, r2
 801eba0:	4413      	add	r3, r2
 801eba2:	e779      	b.n	801ea98 <_dtoa_r+0x710>
 801eba4:	4602      	mov	r2, r0
 801eba6:	e7f5      	b.n	801eb94 <_dtoa_r+0x80c>
 801eba8:	f1b9 0f00 	cmp.w	r9, #0
 801ebac:	dc36      	bgt.n	801ec1c <_dtoa_r+0x894>
 801ebae:	9b06      	ldr	r3, [sp, #24]
 801ebb0:	2b02      	cmp	r3, #2
 801ebb2:	dd33      	ble.n	801ec1c <_dtoa_r+0x894>
 801ebb4:	46ca      	mov	sl, r9
 801ebb6:	f1ba 0f00 	cmp.w	sl, #0
 801ebba:	d10d      	bne.n	801ebd8 <_dtoa_r+0x850>
 801ebbc:	4621      	mov	r1, r4
 801ebbe:	4653      	mov	r3, sl
 801ebc0:	2205      	movs	r2, #5
 801ebc2:	4630      	mov	r0, r6
 801ebc4:	f000 faae 	bl	801f124 <__multadd>
 801ebc8:	4601      	mov	r1, r0
 801ebca:	4604      	mov	r4, r0
 801ebcc:	4628      	mov	r0, r5
 801ebce:	f000 fcc3 	bl	801f558 <__mcmp>
 801ebd2:	2800      	cmp	r0, #0
 801ebd4:	f73f ade4 	bgt.w	801e7a0 <_dtoa_r+0x418>
 801ebd8:	9b08      	ldr	r3, [sp, #32]
 801ebda:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ebde:	ea6f 0b03 	mvn.w	fp, r3
 801ebe2:	f04f 0900 	mov.w	r9, #0
 801ebe6:	4621      	mov	r1, r4
 801ebe8:	4630      	mov	r0, r6
 801ebea:	f000 fa79 	bl	801f0e0 <_Bfree>
 801ebee:	2f00      	cmp	r7, #0
 801ebf0:	f43f aea1 	beq.w	801e936 <_dtoa_r+0x5ae>
 801ebf4:	f1b9 0f00 	cmp.w	r9, #0
 801ebf8:	d005      	beq.n	801ec06 <_dtoa_r+0x87e>
 801ebfa:	45b9      	cmp	r9, r7
 801ebfc:	d003      	beq.n	801ec06 <_dtoa_r+0x87e>
 801ebfe:	4649      	mov	r1, r9
 801ec00:	4630      	mov	r0, r6
 801ec02:	f000 fa6d 	bl	801f0e0 <_Bfree>
 801ec06:	4639      	mov	r1, r7
 801ec08:	4630      	mov	r0, r6
 801ec0a:	f000 fa69 	bl	801f0e0 <_Bfree>
 801ec0e:	e692      	b.n	801e936 <_dtoa_r+0x5ae>
 801ec10:	2400      	movs	r4, #0
 801ec12:	4627      	mov	r7, r4
 801ec14:	e7e0      	b.n	801ebd8 <_dtoa_r+0x850>
 801ec16:	4693      	mov	fp, r2
 801ec18:	4627      	mov	r7, r4
 801ec1a:	e5c1      	b.n	801e7a0 <_dtoa_r+0x418>
 801ec1c:	9b07      	ldr	r3, [sp, #28]
 801ec1e:	46ca      	mov	sl, r9
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	f000 8100 	beq.w	801ee26 <_dtoa_r+0xa9e>
 801ec26:	f1b8 0f00 	cmp.w	r8, #0
 801ec2a:	dd05      	ble.n	801ec38 <_dtoa_r+0x8b0>
 801ec2c:	4639      	mov	r1, r7
 801ec2e:	4642      	mov	r2, r8
 801ec30:	4630      	mov	r0, r6
 801ec32:	f000 fc25 	bl	801f480 <__lshift>
 801ec36:	4607      	mov	r7, r0
 801ec38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d05d      	beq.n	801ecfa <_dtoa_r+0x972>
 801ec3e:	6879      	ldr	r1, [r7, #4]
 801ec40:	4630      	mov	r0, r6
 801ec42:	f000 fa0d 	bl	801f060 <_Balloc>
 801ec46:	4680      	mov	r8, r0
 801ec48:	b928      	cbnz	r0, 801ec56 <_dtoa_r+0x8ce>
 801ec4a:	4b82      	ldr	r3, [pc, #520]	; (801ee54 <_dtoa_r+0xacc>)
 801ec4c:	4602      	mov	r2, r0
 801ec4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801ec52:	f7ff bbb1 	b.w	801e3b8 <_dtoa_r+0x30>
 801ec56:	693a      	ldr	r2, [r7, #16]
 801ec58:	3202      	adds	r2, #2
 801ec5a:	0092      	lsls	r2, r2, #2
 801ec5c:	f107 010c 	add.w	r1, r7, #12
 801ec60:	300c      	adds	r0, #12
 801ec62:	f7ff fafa 	bl	801e25a <memcpy>
 801ec66:	2201      	movs	r2, #1
 801ec68:	4641      	mov	r1, r8
 801ec6a:	4630      	mov	r0, r6
 801ec6c:	f000 fc08 	bl	801f480 <__lshift>
 801ec70:	9b01      	ldr	r3, [sp, #4]
 801ec72:	3301      	adds	r3, #1
 801ec74:	9304      	str	r3, [sp, #16]
 801ec76:	9b01      	ldr	r3, [sp, #4]
 801ec78:	4453      	add	r3, sl
 801ec7a:	9308      	str	r3, [sp, #32]
 801ec7c:	9b02      	ldr	r3, [sp, #8]
 801ec7e:	f003 0301 	and.w	r3, r3, #1
 801ec82:	46b9      	mov	r9, r7
 801ec84:	9307      	str	r3, [sp, #28]
 801ec86:	4607      	mov	r7, r0
 801ec88:	9b04      	ldr	r3, [sp, #16]
 801ec8a:	4621      	mov	r1, r4
 801ec8c:	3b01      	subs	r3, #1
 801ec8e:	4628      	mov	r0, r5
 801ec90:	9302      	str	r3, [sp, #8]
 801ec92:	f7ff faf0 	bl	801e276 <quorem>
 801ec96:	4603      	mov	r3, r0
 801ec98:	3330      	adds	r3, #48	; 0x30
 801ec9a:	9005      	str	r0, [sp, #20]
 801ec9c:	4649      	mov	r1, r9
 801ec9e:	4628      	mov	r0, r5
 801eca0:	9309      	str	r3, [sp, #36]	; 0x24
 801eca2:	f000 fc59 	bl	801f558 <__mcmp>
 801eca6:	463a      	mov	r2, r7
 801eca8:	4682      	mov	sl, r0
 801ecaa:	4621      	mov	r1, r4
 801ecac:	4630      	mov	r0, r6
 801ecae:	f000 fc6f 	bl	801f590 <__mdiff>
 801ecb2:	68c2      	ldr	r2, [r0, #12]
 801ecb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecb6:	4680      	mov	r8, r0
 801ecb8:	bb0a      	cbnz	r2, 801ecfe <_dtoa_r+0x976>
 801ecba:	4601      	mov	r1, r0
 801ecbc:	4628      	mov	r0, r5
 801ecbe:	f000 fc4b 	bl	801f558 <__mcmp>
 801ecc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecc4:	4602      	mov	r2, r0
 801ecc6:	4641      	mov	r1, r8
 801ecc8:	4630      	mov	r0, r6
 801ecca:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801ecce:	f000 fa07 	bl	801f0e0 <_Bfree>
 801ecd2:	9b06      	ldr	r3, [sp, #24]
 801ecd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ecda:	ea43 0102 	orr.w	r1, r3, r2
 801ecde:	9b07      	ldr	r3, [sp, #28]
 801ece0:	4319      	orrs	r1, r3
 801ece2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ece4:	d10d      	bne.n	801ed02 <_dtoa_r+0x97a>
 801ece6:	2b39      	cmp	r3, #57	; 0x39
 801ece8:	d029      	beq.n	801ed3e <_dtoa_r+0x9b6>
 801ecea:	f1ba 0f00 	cmp.w	sl, #0
 801ecee:	dd01      	ble.n	801ecf4 <_dtoa_r+0x96c>
 801ecf0:	9b05      	ldr	r3, [sp, #20]
 801ecf2:	3331      	adds	r3, #49	; 0x31
 801ecf4:	9a02      	ldr	r2, [sp, #8]
 801ecf6:	7013      	strb	r3, [r2, #0]
 801ecf8:	e775      	b.n	801ebe6 <_dtoa_r+0x85e>
 801ecfa:	4638      	mov	r0, r7
 801ecfc:	e7b8      	b.n	801ec70 <_dtoa_r+0x8e8>
 801ecfe:	2201      	movs	r2, #1
 801ed00:	e7e1      	b.n	801ecc6 <_dtoa_r+0x93e>
 801ed02:	f1ba 0f00 	cmp.w	sl, #0
 801ed06:	db06      	blt.n	801ed16 <_dtoa_r+0x98e>
 801ed08:	9906      	ldr	r1, [sp, #24]
 801ed0a:	ea41 0a0a 	orr.w	sl, r1, sl
 801ed0e:	9907      	ldr	r1, [sp, #28]
 801ed10:	ea5a 0a01 	orrs.w	sl, sl, r1
 801ed14:	d120      	bne.n	801ed58 <_dtoa_r+0x9d0>
 801ed16:	2a00      	cmp	r2, #0
 801ed18:	ddec      	ble.n	801ecf4 <_dtoa_r+0x96c>
 801ed1a:	4629      	mov	r1, r5
 801ed1c:	2201      	movs	r2, #1
 801ed1e:	4630      	mov	r0, r6
 801ed20:	9304      	str	r3, [sp, #16]
 801ed22:	f000 fbad 	bl	801f480 <__lshift>
 801ed26:	4621      	mov	r1, r4
 801ed28:	4605      	mov	r5, r0
 801ed2a:	f000 fc15 	bl	801f558 <__mcmp>
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	9b04      	ldr	r3, [sp, #16]
 801ed32:	dc02      	bgt.n	801ed3a <_dtoa_r+0x9b2>
 801ed34:	d1de      	bne.n	801ecf4 <_dtoa_r+0x96c>
 801ed36:	07da      	lsls	r2, r3, #31
 801ed38:	d5dc      	bpl.n	801ecf4 <_dtoa_r+0x96c>
 801ed3a:	2b39      	cmp	r3, #57	; 0x39
 801ed3c:	d1d8      	bne.n	801ecf0 <_dtoa_r+0x968>
 801ed3e:	9a02      	ldr	r2, [sp, #8]
 801ed40:	2339      	movs	r3, #57	; 0x39
 801ed42:	7013      	strb	r3, [r2, #0]
 801ed44:	4643      	mov	r3, r8
 801ed46:	4698      	mov	r8, r3
 801ed48:	3b01      	subs	r3, #1
 801ed4a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ed4e:	2a39      	cmp	r2, #57	; 0x39
 801ed50:	d051      	beq.n	801edf6 <_dtoa_r+0xa6e>
 801ed52:	3201      	adds	r2, #1
 801ed54:	701a      	strb	r2, [r3, #0]
 801ed56:	e746      	b.n	801ebe6 <_dtoa_r+0x85e>
 801ed58:	2a00      	cmp	r2, #0
 801ed5a:	dd03      	ble.n	801ed64 <_dtoa_r+0x9dc>
 801ed5c:	2b39      	cmp	r3, #57	; 0x39
 801ed5e:	d0ee      	beq.n	801ed3e <_dtoa_r+0x9b6>
 801ed60:	3301      	adds	r3, #1
 801ed62:	e7c7      	b.n	801ecf4 <_dtoa_r+0x96c>
 801ed64:	9a04      	ldr	r2, [sp, #16]
 801ed66:	9908      	ldr	r1, [sp, #32]
 801ed68:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ed6c:	428a      	cmp	r2, r1
 801ed6e:	d02b      	beq.n	801edc8 <_dtoa_r+0xa40>
 801ed70:	4629      	mov	r1, r5
 801ed72:	2300      	movs	r3, #0
 801ed74:	220a      	movs	r2, #10
 801ed76:	4630      	mov	r0, r6
 801ed78:	f000 f9d4 	bl	801f124 <__multadd>
 801ed7c:	45b9      	cmp	r9, r7
 801ed7e:	4605      	mov	r5, r0
 801ed80:	f04f 0300 	mov.w	r3, #0
 801ed84:	f04f 020a 	mov.w	r2, #10
 801ed88:	4649      	mov	r1, r9
 801ed8a:	4630      	mov	r0, r6
 801ed8c:	d107      	bne.n	801ed9e <_dtoa_r+0xa16>
 801ed8e:	f000 f9c9 	bl	801f124 <__multadd>
 801ed92:	4681      	mov	r9, r0
 801ed94:	4607      	mov	r7, r0
 801ed96:	9b04      	ldr	r3, [sp, #16]
 801ed98:	3301      	adds	r3, #1
 801ed9a:	9304      	str	r3, [sp, #16]
 801ed9c:	e774      	b.n	801ec88 <_dtoa_r+0x900>
 801ed9e:	f000 f9c1 	bl	801f124 <__multadd>
 801eda2:	4639      	mov	r1, r7
 801eda4:	4681      	mov	r9, r0
 801eda6:	2300      	movs	r3, #0
 801eda8:	220a      	movs	r2, #10
 801edaa:	4630      	mov	r0, r6
 801edac:	f000 f9ba 	bl	801f124 <__multadd>
 801edb0:	4607      	mov	r7, r0
 801edb2:	e7f0      	b.n	801ed96 <_dtoa_r+0xa0e>
 801edb4:	f1ba 0f00 	cmp.w	sl, #0
 801edb8:	9a01      	ldr	r2, [sp, #4]
 801edba:	bfcc      	ite	gt
 801edbc:	46d0      	movgt	r8, sl
 801edbe:	f04f 0801 	movle.w	r8, #1
 801edc2:	4490      	add	r8, r2
 801edc4:	f04f 0900 	mov.w	r9, #0
 801edc8:	4629      	mov	r1, r5
 801edca:	2201      	movs	r2, #1
 801edcc:	4630      	mov	r0, r6
 801edce:	9302      	str	r3, [sp, #8]
 801edd0:	f000 fb56 	bl	801f480 <__lshift>
 801edd4:	4621      	mov	r1, r4
 801edd6:	4605      	mov	r5, r0
 801edd8:	f000 fbbe 	bl	801f558 <__mcmp>
 801eddc:	2800      	cmp	r0, #0
 801edde:	dcb1      	bgt.n	801ed44 <_dtoa_r+0x9bc>
 801ede0:	d102      	bne.n	801ede8 <_dtoa_r+0xa60>
 801ede2:	9b02      	ldr	r3, [sp, #8]
 801ede4:	07db      	lsls	r3, r3, #31
 801ede6:	d4ad      	bmi.n	801ed44 <_dtoa_r+0x9bc>
 801ede8:	4643      	mov	r3, r8
 801edea:	4698      	mov	r8, r3
 801edec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801edf0:	2a30      	cmp	r2, #48	; 0x30
 801edf2:	d0fa      	beq.n	801edea <_dtoa_r+0xa62>
 801edf4:	e6f7      	b.n	801ebe6 <_dtoa_r+0x85e>
 801edf6:	9a01      	ldr	r2, [sp, #4]
 801edf8:	429a      	cmp	r2, r3
 801edfa:	d1a4      	bne.n	801ed46 <_dtoa_r+0x9be>
 801edfc:	f10b 0b01 	add.w	fp, fp, #1
 801ee00:	2331      	movs	r3, #49	; 0x31
 801ee02:	e778      	b.n	801ecf6 <_dtoa_r+0x96e>
 801ee04:	4b14      	ldr	r3, [pc, #80]	; (801ee58 <_dtoa_r+0xad0>)
 801ee06:	f7ff bb2a 	b.w	801e45e <_dtoa_r+0xd6>
 801ee0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	f47f ab05 	bne.w	801e41c <_dtoa_r+0x94>
 801ee12:	4b12      	ldr	r3, [pc, #72]	; (801ee5c <_dtoa_r+0xad4>)
 801ee14:	f7ff bb23 	b.w	801e45e <_dtoa_r+0xd6>
 801ee18:	f1ba 0f00 	cmp.w	sl, #0
 801ee1c:	dc03      	bgt.n	801ee26 <_dtoa_r+0xa9e>
 801ee1e:	9b06      	ldr	r3, [sp, #24]
 801ee20:	2b02      	cmp	r3, #2
 801ee22:	f73f aec8 	bgt.w	801ebb6 <_dtoa_r+0x82e>
 801ee26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ee2a:	4621      	mov	r1, r4
 801ee2c:	4628      	mov	r0, r5
 801ee2e:	f7ff fa22 	bl	801e276 <quorem>
 801ee32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ee36:	f808 3b01 	strb.w	r3, [r8], #1
 801ee3a:	9a01      	ldr	r2, [sp, #4]
 801ee3c:	eba8 0202 	sub.w	r2, r8, r2
 801ee40:	4592      	cmp	sl, r2
 801ee42:	ddb7      	ble.n	801edb4 <_dtoa_r+0xa2c>
 801ee44:	4629      	mov	r1, r5
 801ee46:	2300      	movs	r3, #0
 801ee48:	220a      	movs	r2, #10
 801ee4a:	4630      	mov	r0, r6
 801ee4c:	f000 f96a 	bl	801f124 <__multadd>
 801ee50:	4605      	mov	r5, r0
 801ee52:	e7ea      	b.n	801ee2a <_dtoa_r+0xaa2>
 801ee54:	08020798 	.word	0x08020798
 801ee58:	080206f8 	.word	0x080206f8
 801ee5c:	0802071c 	.word	0x0802071c

0801ee60 <_free_r>:
 801ee60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee62:	2900      	cmp	r1, #0
 801ee64:	d044      	beq.n	801eef0 <_free_r+0x90>
 801ee66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee6a:	9001      	str	r0, [sp, #4]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	f1a1 0404 	sub.w	r4, r1, #4
 801ee72:	bfb8      	it	lt
 801ee74:	18e4      	addlt	r4, r4, r3
 801ee76:	f000 f8e7 	bl	801f048 <__malloc_lock>
 801ee7a:	4a1e      	ldr	r2, [pc, #120]	; (801eef4 <_free_r+0x94>)
 801ee7c:	9801      	ldr	r0, [sp, #4]
 801ee7e:	6813      	ldr	r3, [r2, #0]
 801ee80:	b933      	cbnz	r3, 801ee90 <_free_r+0x30>
 801ee82:	6063      	str	r3, [r4, #4]
 801ee84:	6014      	str	r4, [r2, #0]
 801ee86:	b003      	add	sp, #12
 801ee88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee8c:	f000 b8e2 	b.w	801f054 <__malloc_unlock>
 801ee90:	42a3      	cmp	r3, r4
 801ee92:	d908      	bls.n	801eea6 <_free_r+0x46>
 801ee94:	6825      	ldr	r5, [r4, #0]
 801ee96:	1961      	adds	r1, r4, r5
 801ee98:	428b      	cmp	r3, r1
 801ee9a:	bf01      	itttt	eq
 801ee9c:	6819      	ldreq	r1, [r3, #0]
 801ee9e:	685b      	ldreq	r3, [r3, #4]
 801eea0:	1949      	addeq	r1, r1, r5
 801eea2:	6021      	streq	r1, [r4, #0]
 801eea4:	e7ed      	b.n	801ee82 <_free_r+0x22>
 801eea6:	461a      	mov	r2, r3
 801eea8:	685b      	ldr	r3, [r3, #4]
 801eeaa:	b10b      	cbz	r3, 801eeb0 <_free_r+0x50>
 801eeac:	42a3      	cmp	r3, r4
 801eeae:	d9fa      	bls.n	801eea6 <_free_r+0x46>
 801eeb0:	6811      	ldr	r1, [r2, #0]
 801eeb2:	1855      	adds	r5, r2, r1
 801eeb4:	42a5      	cmp	r5, r4
 801eeb6:	d10b      	bne.n	801eed0 <_free_r+0x70>
 801eeb8:	6824      	ldr	r4, [r4, #0]
 801eeba:	4421      	add	r1, r4
 801eebc:	1854      	adds	r4, r2, r1
 801eebe:	42a3      	cmp	r3, r4
 801eec0:	6011      	str	r1, [r2, #0]
 801eec2:	d1e0      	bne.n	801ee86 <_free_r+0x26>
 801eec4:	681c      	ldr	r4, [r3, #0]
 801eec6:	685b      	ldr	r3, [r3, #4]
 801eec8:	6053      	str	r3, [r2, #4]
 801eeca:	440c      	add	r4, r1
 801eecc:	6014      	str	r4, [r2, #0]
 801eece:	e7da      	b.n	801ee86 <_free_r+0x26>
 801eed0:	d902      	bls.n	801eed8 <_free_r+0x78>
 801eed2:	230c      	movs	r3, #12
 801eed4:	6003      	str	r3, [r0, #0]
 801eed6:	e7d6      	b.n	801ee86 <_free_r+0x26>
 801eed8:	6825      	ldr	r5, [r4, #0]
 801eeda:	1961      	adds	r1, r4, r5
 801eedc:	428b      	cmp	r3, r1
 801eede:	bf04      	itt	eq
 801eee0:	6819      	ldreq	r1, [r3, #0]
 801eee2:	685b      	ldreq	r3, [r3, #4]
 801eee4:	6063      	str	r3, [r4, #4]
 801eee6:	bf04      	itt	eq
 801eee8:	1949      	addeq	r1, r1, r5
 801eeea:	6021      	streq	r1, [r4, #0]
 801eeec:	6054      	str	r4, [r2, #4]
 801eeee:	e7ca      	b.n	801ee86 <_free_r+0x26>
 801eef0:	b003      	add	sp, #12
 801eef2:	bd30      	pop	{r4, r5, pc}
 801eef4:	2400e8cc 	.word	0x2400e8cc

0801eef8 <malloc>:
 801eef8:	4b02      	ldr	r3, [pc, #8]	; (801ef04 <malloc+0xc>)
 801eefa:	4601      	mov	r1, r0
 801eefc:	6818      	ldr	r0, [r3, #0]
 801eefe:	f000 b823 	b.w	801ef48 <_malloc_r>
 801ef02:	bf00      	nop
 801ef04:	2400006c 	.word	0x2400006c

0801ef08 <sbrk_aligned>:
 801ef08:	b570      	push	{r4, r5, r6, lr}
 801ef0a:	4e0e      	ldr	r6, [pc, #56]	; (801ef44 <sbrk_aligned+0x3c>)
 801ef0c:	460c      	mov	r4, r1
 801ef0e:	6831      	ldr	r1, [r6, #0]
 801ef10:	4605      	mov	r5, r0
 801ef12:	b911      	cbnz	r1, 801ef1a <sbrk_aligned+0x12>
 801ef14:	f000 fea8 	bl	801fc68 <_sbrk_r>
 801ef18:	6030      	str	r0, [r6, #0]
 801ef1a:	4621      	mov	r1, r4
 801ef1c:	4628      	mov	r0, r5
 801ef1e:	f000 fea3 	bl	801fc68 <_sbrk_r>
 801ef22:	1c43      	adds	r3, r0, #1
 801ef24:	d00a      	beq.n	801ef3c <sbrk_aligned+0x34>
 801ef26:	1cc4      	adds	r4, r0, #3
 801ef28:	f024 0403 	bic.w	r4, r4, #3
 801ef2c:	42a0      	cmp	r0, r4
 801ef2e:	d007      	beq.n	801ef40 <sbrk_aligned+0x38>
 801ef30:	1a21      	subs	r1, r4, r0
 801ef32:	4628      	mov	r0, r5
 801ef34:	f000 fe98 	bl	801fc68 <_sbrk_r>
 801ef38:	3001      	adds	r0, #1
 801ef3a:	d101      	bne.n	801ef40 <sbrk_aligned+0x38>
 801ef3c:	f04f 34ff 	mov.w	r4, #4294967295
 801ef40:	4620      	mov	r0, r4
 801ef42:	bd70      	pop	{r4, r5, r6, pc}
 801ef44:	2400e8d0 	.word	0x2400e8d0

0801ef48 <_malloc_r>:
 801ef48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef4c:	1ccd      	adds	r5, r1, #3
 801ef4e:	f025 0503 	bic.w	r5, r5, #3
 801ef52:	3508      	adds	r5, #8
 801ef54:	2d0c      	cmp	r5, #12
 801ef56:	bf38      	it	cc
 801ef58:	250c      	movcc	r5, #12
 801ef5a:	2d00      	cmp	r5, #0
 801ef5c:	4607      	mov	r7, r0
 801ef5e:	db01      	blt.n	801ef64 <_malloc_r+0x1c>
 801ef60:	42a9      	cmp	r1, r5
 801ef62:	d905      	bls.n	801ef70 <_malloc_r+0x28>
 801ef64:	230c      	movs	r3, #12
 801ef66:	603b      	str	r3, [r7, #0]
 801ef68:	2600      	movs	r6, #0
 801ef6a:	4630      	mov	r0, r6
 801ef6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f044 <_malloc_r+0xfc>
 801ef74:	f000 f868 	bl	801f048 <__malloc_lock>
 801ef78:	f8d8 3000 	ldr.w	r3, [r8]
 801ef7c:	461c      	mov	r4, r3
 801ef7e:	bb5c      	cbnz	r4, 801efd8 <_malloc_r+0x90>
 801ef80:	4629      	mov	r1, r5
 801ef82:	4638      	mov	r0, r7
 801ef84:	f7ff ffc0 	bl	801ef08 <sbrk_aligned>
 801ef88:	1c43      	adds	r3, r0, #1
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	d155      	bne.n	801f03a <_malloc_r+0xf2>
 801ef8e:	f8d8 4000 	ldr.w	r4, [r8]
 801ef92:	4626      	mov	r6, r4
 801ef94:	2e00      	cmp	r6, #0
 801ef96:	d145      	bne.n	801f024 <_malloc_r+0xdc>
 801ef98:	2c00      	cmp	r4, #0
 801ef9a:	d048      	beq.n	801f02e <_malloc_r+0xe6>
 801ef9c:	6823      	ldr	r3, [r4, #0]
 801ef9e:	4631      	mov	r1, r6
 801efa0:	4638      	mov	r0, r7
 801efa2:	eb04 0903 	add.w	r9, r4, r3
 801efa6:	f000 fe5f 	bl	801fc68 <_sbrk_r>
 801efaa:	4581      	cmp	r9, r0
 801efac:	d13f      	bne.n	801f02e <_malloc_r+0xe6>
 801efae:	6821      	ldr	r1, [r4, #0]
 801efb0:	1a6d      	subs	r5, r5, r1
 801efb2:	4629      	mov	r1, r5
 801efb4:	4638      	mov	r0, r7
 801efb6:	f7ff ffa7 	bl	801ef08 <sbrk_aligned>
 801efba:	3001      	adds	r0, #1
 801efbc:	d037      	beq.n	801f02e <_malloc_r+0xe6>
 801efbe:	6823      	ldr	r3, [r4, #0]
 801efc0:	442b      	add	r3, r5
 801efc2:	6023      	str	r3, [r4, #0]
 801efc4:	f8d8 3000 	ldr.w	r3, [r8]
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d038      	beq.n	801f03e <_malloc_r+0xf6>
 801efcc:	685a      	ldr	r2, [r3, #4]
 801efce:	42a2      	cmp	r2, r4
 801efd0:	d12b      	bne.n	801f02a <_malloc_r+0xe2>
 801efd2:	2200      	movs	r2, #0
 801efd4:	605a      	str	r2, [r3, #4]
 801efd6:	e00f      	b.n	801eff8 <_malloc_r+0xb0>
 801efd8:	6822      	ldr	r2, [r4, #0]
 801efda:	1b52      	subs	r2, r2, r5
 801efdc:	d41f      	bmi.n	801f01e <_malloc_r+0xd6>
 801efde:	2a0b      	cmp	r2, #11
 801efe0:	d917      	bls.n	801f012 <_malloc_r+0xca>
 801efe2:	1961      	adds	r1, r4, r5
 801efe4:	42a3      	cmp	r3, r4
 801efe6:	6025      	str	r5, [r4, #0]
 801efe8:	bf18      	it	ne
 801efea:	6059      	strne	r1, [r3, #4]
 801efec:	6863      	ldr	r3, [r4, #4]
 801efee:	bf08      	it	eq
 801eff0:	f8c8 1000 	streq.w	r1, [r8]
 801eff4:	5162      	str	r2, [r4, r5]
 801eff6:	604b      	str	r3, [r1, #4]
 801eff8:	4638      	mov	r0, r7
 801effa:	f104 060b 	add.w	r6, r4, #11
 801effe:	f000 f829 	bl	801f054 <__malloc_unlock>
 801f002:	f026 0607 	bic.w	r6, r6, #7
 801f006:	1d23      	adds	r3, r4, #4
 801f008:	1af2      	subs	r2, r6, r3
 801f00a:	d0ae      	beq.n	801ef6a <_malloc_r+0x22>
 801f00c:	1b9b      	subs	r3, r3, r6
 801f00e:	50a3      	str	r3, [r4, r2]
 801f010:	e7ab      	b.n	801ef6a <_malloc_r+0x22>
 801f012:	42a3      	cmp	r3, r4
 801f014:	6862      	ldr	r2, [r4, #4]
 801f016:	d1dd      	bne.n	801efd4 <_malloc_r+0x8c>
 801f018:	f8c8 2000 	str.w	r2, [r8]
 801f01c:	e7ec      	b.n	801eff8 <_malloc_r+0xb0>
 801f01e:	4623      	mov	r3, r4
 801f020:	6864      	ldr	r4, [r4, #4]
 801f022:	e7ac      	b.n	801ef7e <_malloc_r+0x36>
 801f024:	4634      	mov	r4, r6
 801f026:	6876      	ldr	r6, [r6, #4]
 801f028:	e7b4      	b.n	801ef94 <_malloc_r+0x4c>
 801f02a:	4613      	mov	r3, r2
 801f02c:	e7cc      	b.n	801efc8 <_malloc_r+0x80>
 801f02e:	230c      	movs	r3, #12
 801f030:	603b      	str	r3, [r7, #0]
 801f032:	4638      	mov	r0, r7
 801f034:	f000 f80e 	bl	801f054 <__malloc_unlock>
 801f038:	e797      	b.n	801ef6a <_malloc_r+0x22>
 801f03a:	6025      	str	r5, [r4, #0]
 801f03c:	e7dc      	b.n	801eff8 <_malloc_r+0xb0>
 801f03e:	605b      	str	r3, [r3, #4]
 801f040:	deff      	udf	#255	; 0xff
 801f042:	bf00      	nop
 801f044:	2400e8cc 	.word	0x2400e8cc

0801f048 <__malloc_lock>:
 801f048:	4801      	ldr	r0, [pc, #4]	; (801f050 <__malloc_lock+0x8>)
 801f04a:	f7ff b904 	b.w	801e256 <__retarget_lock_acquire_recursive>
 801f04e:	bf00      	nop
 801f050:	2400e8c8 	.word	0x2400e8c8

0801f054 <__malloc_unlock>:
 801f054:	4801      	ldr	r0, [pc, #4]	; (801f05c <__malloc_unlock+0x8>)
 801f056:	f7ff b8ff 	b.w	801e258 <__retarget_lock_release_recursive>
 801f05a:	bf00      	nop
 801f05c:	2400e8c8 	.word	0x2400e8c8

0801f060 <_Balloc>:
 801f060:	b570      	push	{r4, r5, r6, lr}
 801f062:	69c6      	ldr	r6, [r0, #28]
 801f064:	4604      	mov	r4, r0
 801f066:	460d      	mov	r5, r1
 801f068:	b976      	cbnz	r6, 801f088 <_Balloc+0x28>
 801f06a:	2010      	movs	r0, #16
 801f06c:	f7ff ff44 	bl	801eef8 <malloc>
 801f070:	4602      	mov	r2, r0
 801f072:	61e0      	str	r0, [r4, #28]
 801f074:	b920      	cbnz	r0, 801f080 <_Balloc+0x20>
 801f076:	4b18      	ldr	r3, [pc, #96]	; (801f0d8 <_Balloc+0x78>)
 801f078:	4818      	ldr	r0, [pc, #96]	; (801f0dc <_Balloc+0x7c>)
 801f07a:	216b      	movs	r1, #107	; 0x6b
 801f07c:	f000 fe04 	bl	801fc88 <__assert_func>
 801f080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f084:	6006      	str	r6, [r0, #0]
 801f086:	60c6      	str	r6, [r0, #12]
 801f088:	69e6      	ldr	r6, [r4, #28]
 801f08a:	68f3      	ldr	r3, [r6, #12]
 801f08c:	b183      	cbz	r3, 801f0b0 <_Balloc+0x50>
 801f08e:	69e3      	ldr	r3, [r4, #28]
 801f090:	68db      	ldr	r3, [r3, #12]
 801f092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f096:	b9b8      	cbnz	r0, 801f0c8 <_Balloc+0x68>
 801f098:	2101      	movs	r1, #1
 801f09a:	fa01 f605 	lsl.w	r6, r1, r5
 801f09e:	1d72      	adds	r2, r6, #5
 801f0a0:	0092      	lsls	r2, r2, #2
 801f0a2:	4620      	mov	r0, r4
 801f0a4:	f000 fe0e 	bl	801fcc4 <_calloc_r>
 801f0a8:	b160      	cbz	r0, 801f0c4 <_Balloc+0x64>
 801f0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f0ae:	e00e      	b.n	801f0ce <_Balloc+0x6e>
 801f0b0:	2221      	movs	r2, #33	; 0x21
 801f0b2:	2104      	movs	r1, #4
 801f0b4:	4620      	mov	r0, r4
 801f0b6:	f000 fe05 	bl	801fcc4 <_calloc_r>
 801f0ba:	69e3      	ldr	r3, [r4, #28]
 801f0bc:	60f0      	str	r0, [r6, #12]
 801f0be:	68db      	ldr	r3, [r3, #12]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	d1e4      	bne.n	801f08e <_Balloc+0x2e>
 801f0c4:	2000      	movs	r0, #0
 801f0c6:	bd70      	pop	{r4, r5, r6, pc}
 801f0c8:	6802      	ldr	r2, [r0, #0]
 801f0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f0ce:	2300      	movs	r3, #0
 801f0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f0d4:	e7f7      	b.n	801f0c6 <_Balloc+0x66>
 801f0d6:	bf00      	nop
 801f0d8:	08020729 	.word	0x08020729
 801f0dc:	080207a9 	.word	0x080207a9

0801f0e0 <_Bfree>:
 801f0e0:	b570      	push	{r4, r5, r6, lr}
 801f0e2:	69c6      	ldr	r6, [r0, #28]
 801f0e4:	4605      	mov	r5, r0
 801f0e6:	460c      	mov	r4, r1
 801f0e8:	b976      	cbnz	r6, 801f108 <_Bfree+0x28>
 801f0ea:	2010      	movs	r0, #16
 801f0ec:	f7ff ff04 	bl	801eef8 <malloc>
 801f0f0:	4602      	mov	r2, r0
 801f0f2:	61e8      	str	r0, [r5, #28]
 801f0f4:	b920      	cbnz	r0, 801f100 <_Bfree+0x20>
 801f0f6:	4b09      	ldr	r3, [pc, #36]	; (801f11c <_Bfree+0x3c>)
 801f0f8:	4809      	ldr	r0, [pc, #36]	; (801f120 <_Bfree+0x40>)
 801f0fa:	218f      	movs	r1, #143	; 0x8f
 801f0fc:	f000 fdc4 	bl	801fc88 <__assert_func>
 801f100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f104:	6006      	str	r6, [r0, #0]
 801f106:	60c6      	str	r6, [r0, #12]
 801f108:	b13c      	cbz	r4, 801f11a <_Bfree+0x3a>
 801f10a:	69eb      	ldr	r3, [r5, #28]
 801f10c:	6862      	ldr	r2, [r4, #4]
 801f10e:	68db      	ldr	r3, [r3, #12]
 801f110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f114:	6021      	str	r1, [r4, #0]
 801f116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f11a:	bd70      	pop	{r4, r5, r6, pc}
 801f11c:	08020729 	.word	0x08020729
 801f120:	080207a9 	.word	0x080207a9

0801f124 <__multadd>:
 801f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f128:	690d      	ldr	r5, [r1, #16]
 801f12a:	4607      	mov	r7, r0
 801f12c:	460c      	mov	r4, r1
 801f12e:	461e      	mov	r6, r3
 801f130:	f101 0c14 	add.w	ip, r1, #20
 801f134:	2000      	movs	r0, #0
 801f136:	f8dc 3000 	ldr.w	r3, [ip]
 801f13a:	b299      	uxth	r1, r3
 801f13c:	fb02 6101 	mla	r1, r2, r1, r6
 801f140:	0c1e      	lsrs	r6, r3, #16
 801f142:	0c0b      	lsrs	r3, r1, #16
 801f144:	fb02 3306 	mla	r3, r2, r6, r3
 801f148:	b289      	uxth	r1, r1
 801f14a:	3001      	adds	r0, #1
 801f14c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f150:	4285      	cmp	r5, r0
 801f152:	f84c 1b04 	str.w	r1, [ip], #4
 801f156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f15a:	dcec      	bgt.n	801f136 <__multadd+0x12>
 801f15c:	b30e      	cbz	r6, 801f1a2 <__multadd+0x7e>
 801f15e:	68a3      	ldr	r3, [r4, #8]
 801f160:	42ab      	cmp	r3, r5
 801f162:	dc19      	bgt.n	801f198 <__multadd+0x74>
 801f164:	6861      	ldr	r1, [r4, #4]
 801f166:	4638      	mov	r0, r7
 801f168:	3101      	adds	r1, #1
 801f16a:	f7ff ff79 	bl	801f060 <_Balloc>
 801f16e:	4680      	mov	r8, r0
 801f170:	b928      	cbnz	r0, 801f17e <__multadd+0x5a>
 801f172:	4602      	mov	r2, r0
 801f174:	4b0c      	ldr	r3, [pc, #48]	; (801f1a8 <__multadd+0x84>)
 801f176:	480d      	ldr	r0, [pc, #52]	; (801f1ac <__multadd+0x88>)
 801f178:	21ba      	movs	r1, #186	; 0xba
 801f17a:	f000 fd85 	bl	801fc88 <__assert_func>
 801f17e:	6922      	ldr	r2, [r4, #16]
 801f180:	3202      	adds	r2, #2
 801f182:	f104 010c 	add.w	r1, r4, #12
 801f186:	0092      	lsls	r2, r2, #2
 801f188:	300c      	adds	r0, #12
 801f18a:	f7ff f866 	bl	801e25a <memcpy>
 801f18e:	4621      	mov	r1, r4
 801f190:	4638      	mov	r0, r7
 801f192:	f7ff ffa5 	bl	801f0e0 <_Bfree>
 801f196:	4644      	mov	r4, r8
 801f198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f19c:	3501      	adds	r5, #1
 801f19e:	615e      	str	r6, [r3, #20]
 801f1a0:	6125      	str	r5, [r4, #16]
 801f1a2:	4620      	mov	r0, r4
 801f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1a8:	08020798 	.word	0x08020798
 801f1ac:	080207a9 	.word	0x080207a9

0801f1b0 <__hi0bits>:
 801f1b0:	0c03      	lsrs	r3, r0, #16
 801f1b2:	041b      	lsls	r3, r3, #16
 801f1b4:	b9d3      	cbnz	r3, 801f1ec <__hi0bits+0x3c>
 801f1b6:	0400      	lsls	r0, r0, #16
 801f1b8:	2310      	movs	r3, #16
 801f1ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f1be:	bf04      	itt	eq
 801f1c0:	0200      	lsleq	r0, r0, #8
 801f1c2:	3308      	addeq	r3, #8
 801f1c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f1c8:	bf04      	itt	eq
 801f1ca:	0100      	lsleq	r0, r0, #4
 801f1cc:	3304      	addeq	r3, #4
 801f1ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f1d2:	bf04      	itt	eq
 801f1d4:	0080      	lsleq	r0, r0, #2
 801f1d6:	3302      	addeq	r3, #2
 801f1d8:	2800      	cmp	r0, #0
 801f1da:	db05      	blt.n	801f1e8 <__hi0bits+0x38>
 801f1dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f1e0:	f103 0301 	add.w	r3, r3, #1
 801f1e4:	bf08      	it	eq
 801f1e6:	2320      	moveq	r3, #32
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	4770      	bx	lr
 801f1ec:	2300      	movs	r3, #0
 801f1ee:	e7e4      	b.n	801f1ba <__hi0bits+0xa>

0801f1f0 <__lo0bits>:
 801f1f0:	6803      	ldr	r3, [r0, #0]
 801f1f2:	f013 0207 	ands.w	r2, r3, #7
 801f1f6:	d00c      	beq.n	801f212 <__lo0bits+0x22>
 801f1f8:	07d9      	lsls	r1, r3, #31
 801f1fa:	d422      	bmi.n	801f242 <__lo0bits+0x52>
 801f1fc:	079a      	lsls	r2, r3, #30
 801f1fe:	bf49      	itett	mi
 801f200:	085b      	lsrmi	r3, r3, #1
 801f202:	089b      	lsrpl	r3, r3, #2
 801f204:	6003      	strmi	r3, [r0, #0]
 801f206:	2201      	movmi	r2, #1
 801f208:	bf5c      	itt	pl
 801f20a:	6003      	strpl	r3, [r0, #0]
 801f20c:	2202      	movpl	r2, #2
 801f20e:	4610      	mov	r0, r2
 801f210:	4770      	bx	lr
 801f212:	b299      	uxth	r1, r3
 801f214:	b909      	cbnz	r1, 801f21a <__lo0bits+0x2a>
 801f216:	0c1b      	lsrs	r3, r3, #16
 801f218:	2210      	movs	r2, #16
 801f21a:	b2d9      	uxtb	r1, r3
 801f21c:	b909      	cbnz	r1, 801f222 <__lo0bits+0x32>
 801f21e:	3208      	adds	r2, #8
 801f220:	0a1b      	lsrs	r3, r3, #8
 801f222:	0719      	lsls	r1, r3, #28
 801f224:	bf04      	itt	eq
 801f226:	091b      	lsreq	r3, r3, #4
 801f228:	3204      	addeq	r2, #4
 801f22a:	0799      	lsls	r1, r3, #30
 801f22c:	bf04      	itt	eq
 801f22e:	089b      	lsreq	r3, r3, #2
 801f230:	3202      	addeq	r2, #2
 801f232:	07d9      	lsls	r1, r3, #31
 801f234:	d403      	bmi.n	801f23e <__lo0bits+0x4e>
 801f236:	085b      	lsrs	r3, r3, #1
 801f238:	f102 0201 	add.w	r2, r2, #1
 801f23c:	d003      	beq.n	801f246 <__lo0bits+0x56>
 801f23e:	6003      	str	r3, [r0, #0]
 801f240:	e7e5      	b.n	801f20e <__lo0bits+0x1e>
 801f242:	2200      	movs	r2, #0
 801f244:	e7e3      	b.n	801f20e <__lo0bits+0x1e>
 801f246:	2220      	movs	r2, #32
 801f248:	e7e1      	b.n	801f20e <__lo0bits+0x1e>
	...

0801f24c <__i2b>:
 801f24c:	b510      	push	{r4, lr}
 801f24e:	460c      	mov	r4, r1
 801f250:	2101      	movs	r1, #1
 801f252:	f7ff ff05 	bl	801f060 <_Balloc>
 801f256:	4602      	mov	r2, r0
 801f258:	b928      	cbnz	r0, 801f266 <__i2b+0x1a>
 801f25a:	4b05      	ldr	r3, [pc, #20]	; (801f270 <__i2b+0x24>)
 801f25c:	4805      	ldr	r0, [pc, #20]	; (801f274 <__i2b+0x28>)
 801f25e:	f240 1145 	movw	r1, #325	; 0x145
 801f262:	f000 fd11 	bl	801fc88 <__assert_func>
 801f266:	2301      	movs	r3, #1
 801f268:	6144      	str	r4, [r0, #20]
 801f26a:	6103      	str	r3, [r0, #16]
 801f26c:	bd10      	pop	{r4, pc}
 801f26e:	bf00      	nop
 801f270:	08020798 	.word	0x08020798
 801f274:	080207a9 	.word	0x080207a9

0801f278 <__multiply>:
 801f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f27c:	4691      	mov	r9, r2
 801f27e:	690a      	ldr	r2, [r1, #16]
 801f280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f284:	429a      	cmp	r2, r3
 801f286:	bfb8      	it	lt
 801f288:	460b      	movlt	r3, r1
 801f28a:	460c      	mov	r4, r1
 801f28c:	bfbc      	itt	lt
 801f28e:	464c      	movlt	r4, r9
 801f290:	4699      	movlt	r9, r3
 801f292:	6927      	ldr	r7, [r4, #16]
 801f294:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f298:	68a3      	ldr	r3, [r4, #8]
 801f29a:	6861      	ldr	r1, [r4, #4]
 801f29c:	eb07 060a 	add.w	r6, r7, sl
 801f2a0:	42b3      	cmp	r3, r6
 801f2a2:	b085      	sub	sp, #20
 801f2a4:	bfb8      	it	lt
 801f2a6:	3101      	addlt	r1, #1
 801f2a8:	f7ff feda 	bl	801f060 <_Balloc>
 801f2ac:	b930      	cbnz	r0, 801f2bc <__multiply+0x44>
 801f2ae:	4602      	mov	r2, r0
 801f2b0:	4b44      	ldr	r3, [pc, #272]	; (801f3c4 <__multiply+0x14c>)
 801f2b2:	4845      	ldr	r0, [pc, #276]	; (801f3c8 <__multiply+0x150>)
 801f2b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801f2b8:	f000 fce6 	bl	801fc88 <__assert_func>
 801f2bc:	f100 0514 	add.w	r5, r0, #20
 801f2c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f2c4:	462b      	mov	r3, r5
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	4543      	cmp	r3, r8
 801f2ca:	d321      	bcc.n	801f310 <__multiply+0x98>
 801f2cc:	f104 0314 	add.w	r3, r4, #20
 801f2d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f2d4:	f109 0314 	add.w	r3, r9, #20
 801f2d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f2dc:	9202      	str	r2, [sp, #8]
 801f2de:	1b3a      	subs	r2, r7, r4
 801f2e0:	3a15      	subs	r2, #21
 801f2e2:	f022 0203 	bic.w	r2, r2, #3
 801f2e6:	3204      	adds	r2, #4
 801f2e8:	f104 0115 	add.w	r1, r4, #21
 801f2ec:	428f      	cmp	r7, r1
 801f2ee:	bf38      	it	cc
 801f2f0:	2204      	movcc	r2, #4
 801f2f2:	9201      	str	r2, [sp, #4]
 801f2f4:	9a02      	ldr	r2, [sp, #8]
 801f2f6:	9303      	str	r3, [sp, #12]
 801f2f8:	429a      	cmp	r2, r3
 801f2fa:	d80c      	bhi.n	801f316 <__multiply+0x9e>
 801f2fc:	2e00      	cmp	r6, #0
 801f2fe:	dd03      	ble.n	801f308 <__multiply+0x90>
 801f300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f304:	2b00      	cmp	r3, #0
 801f306:	d05b      	beq.n	801f3c0 <__multiply+0x148>
 801f308:	6106      	str	r6, [r0, #16]
 801f30a:	b005      	add	sp, #20
 801f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f310:	f843 2b04 	str.w	r2, [r3], #4
 801f314:	e7d8      	b.n	801f2c8 <__multiply+0x50>
 801f316:	f8b3 a000 	ldrh.w	sl, [r3]
 801f31a:	f1ba 0f00 	cmp.w	sl, #0
 801f31e:	d024      	beq.n	801f36a <__multiply+0xf2>
 801f320:	f104 0e14 	add.w	lr, r4, #20
 801f324:	46a9      	mov	r9, r5
 801f326:	f04f 0c00 	mov.w	ip, #0
 801f32a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f32e:	f8d9 1000 	ldr.w	r1, [r9]
 801f332:	fa1f fb82 	uxth.w	fp, r2
 801f336:	b289      	uxth	r1, r1
 801f338:	fb0a 110b 	mla	r1, sl, fp, r1
 801f33c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f340:	f8d9 2000 	ldr.w	r2, [r9]
 801f344:	4461      	add	r1, ip
 801f346:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f34a:	fb0a c20b 	mla	r2, sl, fp, ip
 801f34e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f352:	b289      	uxth	r1, r1
 801f354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f358:	4577      	cmp	r7, lr
 801f35a:	f849 1b04 	str.w	r1, [r9], #4
 801f35e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f362:	d8e2      	bhi.n	801f32a <__multiply+0xb2>
 801f364:	9a01      	ldr	r2, [sp, #4]
 801f366:	f845 c002 	str.w	ip, [r5, r2]
 801f36a:	9a03      	ldr	r2, [sp, #12]
 801f36c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f370:	3304      	adds	r3, #4
 801f372:	f1b9 0f00 	cmp.w	r9, #0
 801f376:	d021      	beq.n	801f3bc <__multiply+0x144>
 801f378:	6829      	ldr	r1, [r5, #0]
 801f37a:	f104 0c14 	add.w	ip, r4, #20
 801f37e:	46ae      	mov	lr, r5
 801f380:	f04f 0a00 	mov.w	sl, #0
 801f384:	f8bc b000 	ldrh.w	fp, [ip]
 801f388:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f38c:	fb09 220b 	mla	r2, r9, fp, r2
 801f390:	4452      	add	r2, sl
 801f392:	b289      	uxth	r1, r1
 801f394:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f398:	f84e 1b04 	str.w	r1, [lr], #4
 801f39c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f3a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f3a4:	f8be 1000 	ldrh.w	r1, [lr]
 801f3a8:	fb09 110a 	mla	r1, r9, sl, r1
 801f3ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801f3b0:	4567      	cmp	r7, ip
 801f3b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f3b6:	d8e5      	bhi.n	801f384 <__multiply+0x10c>
 801f3b8:	9a01      	ldr	r2, [sp, #4]
 801f3ba:	50a9      	str	r1, [r5, r2]
 801f3bc:	3504      	adds	r5, #4
 801f3be:	e799      	b.n	801f2f4 <__multiply+0x7c>
 801f3c0:	3e01      	subs	r6, #1
 801f3c2:	e79b      	b.n	801f2fc <__multiply+0x84>
 801f3c4:	08020798 	.word	0x08020798
 801f3c8:	080207a9 	.word	0x080207a9

0801f3cc <__pow5mult>:
 801f3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3d0:	4615      	mov	r5, r2
 801f3d2:	f012 0203 	ands.w	r2, r2, #3
 801f3d6:	4606      	mov	r6, r0
 801f3d8:	460f      	mov	r7, r1
 801f3da:	d007      	beq.n	801f3ec <__pow5mult+0x20>
 801f3dc:	4c25      	ldr	r4, [pc, #148]	; (801f474 <__pow5mult+0xa8>)
 801f3de:	3a01      	subs	r2, #1
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f3e6:	f7ff fe9d 	bl	801f124 <__multadd>
 801f3ea:	4607      	mov	r7, r0
 801f3ec:	10ad      	asrs	r5, r5, #2
 801f3ee:	d03d      	beq.n	801f46c <__pow5mult+0xa0>
 801f3f0:	69f4      	ldr	r4, [r6, #28]
 801f3f2:	b97c      	cbnz	r4, 801f414 <__pow5mult+0x48>
 801f3f4:	2010      	movs	r0, #16
 801f3f6:	f7ff fd7f 	bl	801eef8 <malloc>
 801f3fa:	4602      	mov	r2, r0
 801f3fc:	61f0      	str	r0, [r6, #28]
 801f3fe:	b928      	cbnz	r0, 801f40c <__pow5mult+0x40>
 801f400:	4b1d      	ldr	r3, [pc, #116]	; (801f478 <__pow5mult+0xac>)
 801f402:	481e      	ldr	r0, [pc, #120]	; (801f47c <__pow5mult+0xb0>)
 801f404:	f240 11b3 	movw	r1, #435	; 0x1b3
 801f408:	f000 fc3e 	bl	801fc88 <__assert_func>
 801f40c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f410:	6004      	str	r4, [r0, #0]
 801f412:	60c4      	str	r4, [r0, #12]
 801f414:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801f418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f41c:	b94c      	cbnz	r4, 801f432 <__pow5mult+0x66>
 801f41e:	f240 2171 	movw	r1, #625	; 0x271
 801f422:	4630      	mov	r0, r6
 801f424:	f7ff ff12 	bl	801f24c <__i2b>
 801f428:	2300      	movs	r3, #0
 801f42a:	f8c8 0008 	str.w	r0, [r8, #8]
 801f42e:	4604      	mov	r4, r0
 801f430:	6003      	str	r3, [r0, #0]
 801f432:	f04f 0900 	mov.w	r9, #0
 801f436:	07eb      	lsls	r3, r5, #31
 801f438:	d50a      	bpl.n	801f450 <__pow5mult+0x84>
 801f43a:	4639      	mov	r1, r7
 801f43c:	4622      	mov	r2, r4
 801f43e:	4630      	mov	r0, r6
 801f440:	f7ff ff1a 	bl	801f278 <__multiply>
 801f444:	4639      	mov	r1, r7
 801f446:	4680      	mov	r8, r0
 801f448:	4630      	mov	r0, r6
 801f44a:	f7ff fe49 	bl	801f0e0 <_Bfree>
 801f44e:	4647      	mov	r7, r8
 801f450:	106d      	asrs	r5, r5, #1
 801f452:	d00b      	beq.n	801f46c <__pow5mult+0xa0>
 801f454:	6820      	ldr	r0, [r4, #0]
 801f456:	b938      	cbnz	r0, 801f468 <__pow5mult+0x9c>
 801f458:	4622      	mov	r2, r4
 801f45a:	4621      	mov	r1, r4
 801f45c:	4630      	mov	r0, r6
 801f45e:	f7ff ff0b 	bl	801f278 <__multiply>
 801f462:	6020      	str	r0, [r4, #0]
 801f464:	f8c0 9000 	str.w	r9, [r0]
 801f468:	4604      	mov	r4, r0
 801f46a:	e7e4      	b.n	801f436 <__pow5mult+0x6a>
 801f46c:	4638      	mov	r0, r7
 801f46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f472:	bf00      	nop
 801f474:	080208f8 	.word	0x080208f8
 801f478:	08020729 	.word	0x08020729
 801f47c:	080207a9 	.word	0x080207a9

0801f480 <__lshift>:
 801f480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f484:	460c      	mov	r4, r1
 801f486:	6849      	ldr	r1, [r1, #4]
 801f488:	6923      	ldr	r3, [r4, #16]
 801f48a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f48e:	68a3      	ldr	r3, [r4, #8]
 801f490:	4607      	mov	r7, r0
 801f492:	4691      	mov	r9, r2
 801f494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f498:	f108 0601 	add.w	r6, r8, #1
 801f49c:	42b3      	cmp	r3, r6
 801f49e:	db0b      	blt.n	801f4b8 <__lshift+0x38>
 801f4a0:	4638      	mov	r0, r7
 801f4a2:	f7ff fddd 	bl	801f060 <_Balloc>
 801f4a6:	4605      	mov	r5, r0
 801f4a8:	b948      	cbnz	r0, 801f4be <__lshift+0x3e>
 801f4aa:	4602      	mov	r2, r0
 801f4ac:	4b28      	ldr	r3, [pc, #160]	; (801f550 <__lshift+0xd0>)
 801f4ae:	4829      	ldr	r0, [pc, #164]	; (801f554 <__lshift+0xd4>)
 801f4b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801f4b4:	f000 fbe8 	bl	801fc88 <__assert_func>
 801f4b8:	3101      	adds	r1, #1
 801f4ba:	005b      	lsls	r3, r3, #1
 801f4bc:	e7ee      	b.n	801f49c <__lshift+0x1c>
 801f4be:	2300      	movs	r3, #0
 801f4c0:	f100 0114 	add.w	r1, r0, #20
 801f4c4:	f100 0210 	add.w	r2, r0, #16
 801f4c8:	4618      	mov	r0, r3
 801f4ca:	4553      	cmp	r3, sl
 801f4cc:	db33      	blt.n	801f536 <__lshift+0xb6>
 801f4ce:	6920      	ldr	r0, [r4, #16]
 801f4d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f4d4:	f104 0314 	add.w	r3, r4, #20
 801f4d8:	f019 091f 	ands.w	r9, r9, #31
 801f4dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f4e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f4e4:	d02b      	beq.n	801f53e <__lshift+0xbe>
 801f4e6:	f1c9 0e20 	rsb	lr, r9, #32
 801f4ea:	468a      	mov	sl, r1
 801f4ec:	2200      	movs	r2, #0
 801f4ee:	6818      	ldr	r0, [r3, #0]
 801f4f0:	fa00 f009 	lsl.w	r0, r0, r9
 801f4f4:	4310      	orrs	r0, r2
 801f4f6:	f84a 0b04 	str.w	r0, [sl], #4
 801f4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4fe:	459c      	cmp	ip, r3
 801f500:	fa22 f20e 	lsr.w	r2, r2, lr
 801f504:	d8f3      	bhi.n	801f4ee <__lshift+0x6e>
 801f506:	ebac 0304 	sub.w	r3, ip, r4
 801f50a:	3b15      	subs	r3, #21
 801f50c:	f023 0303 	bic.w	r3, r3, #3
 801f510:	3304      	adds	r3, #4
 801f512:	f104 0015 	add.w	r0, r4, #21
 801f516:	4584      	cmp	ip, r0
 801f518:	bf38      	it	cc
 801f51a:	2304      	movcc	r3, #4
 801f51c:	50ca      	str	r2, [r1, r3]
 801f51e:	b10a      	cbz	r2, 801f524 <__lshift+0xa4>
 801f520:	f108 0602 	add.w	r6, r8, #2
 801f524:	3e01      	subs	r6, #1
 801f526:	4638      	mov	r0, r7
 801f528:	612e      	str	r6, [r5, #16]
 801f52a:	4621      	mov	r1, r4
 801f52c:	f7ff fdd8 	bl	801f0e0 <_Bfree>
 801f530:	4628      	mov	r0, r5
 801f532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f536:	f842 0f04 	str.w	r0, [r2, #4]!
 801f53a:	3301      	adds	r3, #1
 801f53c:	e7c5      	b.n	801f4ca <__lshift+0x4a>
 801f53e:	3904      	subs	r1, #4
 801f540:	f853 2b04 	ldr.w	r2, [r3], #4
 801f544:	f841 2f04 	str.w	r2, [r1, #4]!
 801f548:	459c      	cmp	ip, r3
 801f54a:	d8f9      	bhi.n	801f540 <__lshift+0xc0>
 801f54c:	e7ea      	b.n	801f524 <__lshift+0xa4>
 801f54e:	bf00      	nop
 801f550:	08020798 	.word	0x08020798
 801f554:	080207a9 	.word	0x080207a9

0801f558 <__mcmp>:
 801f558:	b530      	push	{r4, r5, lr}
 801f55a:	6902      	ldr	r2, [r0, #16]
 801f55c:	690c      	ldr	r4, [r1, #16]
 801f55e:	1b12      	subs	r2, r2, r4
 801f560:	d10e      	bne.n	801f580 <__mcmp+0x28>
 801f562:	f100 0314 	add.w	r3, r0, #20
 801f566:	3114      	adds	r1, #20
 801f568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f56c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f570:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f574:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f578:	42a5      	cmp	r5, r4
 801f57a:	d003      	beq.n	801f584 <__mcmp+0x2c>
 801f57c:	d305      	bcc.n	801f58a <__mcmp+0x32>
 801f57e:	2201      	movs	r2, #1
 801f580:	4610      	mov	r0, r2
 801f582:	bd30      	pop	{r4, r5, pc}
 801f584:	4283      	cmp	r3, r0
 801f586:	d3f3      	bcc.n	801f570 <__mcmp+0x18>
 801f588:	e7fa      	b.n	801f580 <__mcmp+0x28>
 801f58a:	f04f 32ff 	mov.w	r2, #4294967295
 801f58e:	e7f7      	b.n	801f580 <__mcmp+0x28>

0801f590 <__mdiff>:
 801f590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f594:	460c      	mov	r4, r1
 801f596:	4606      	mov	r6, r0
 801f598:	4611      	mov	r1, r2
 801f59a:	4620      	mov	r0, r4
 801f59c:	4690      	mov	r8, r2
 801f59e:	f7ff ffdb 	bl	801f558 <__mcmp>
 801f5a2:	1e05      	subs	r5, r0, #0
 801f5a4:	d110      	bne.n	801f5c8 <__mdiff+0x38>
 801f5a6:	4629      	mov	r1, r5
 801f5a8:	4630      	mov	r0, r6
 801f5aa:	f7ff fd59 	bl	801f060 <_Balloc>
 801f5ae:	b930      	cbnz	r0, 801f5be <__mdiff+0x2e>
 801f5b0:	4b3a      	ldr	r3, [pc, #232]	; (801f69c <__mdiff+0x10c>)
 801f5b2:	4602      	mov	r2, r0
 801f5b4:	f240 2137 	movw	r1, #567	; 0x237
 801f5b8:	4839      	ldr	r0, [pc, #228]	; (801f6a0 <__mdiff+0x110>)
 801f5ba:	f000 fb65 	bl	801fc88 <__assert_func>
 801f5be:	2301      	movs	r3, #1
 801f5c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5c8:	bfa4      	itt	ge
 801f5ca:	4643      	movge	r3, r8
 801f5cc:	46a0      	movge	r8, r4
 801f5ce:	4630      	mov	r0, r6
 801f5d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f5d4:	bfa6      	itte	ge
 801f5d6:	461c      	movge	r4, r3
 801f5d8:	2500      	movge	r5, #0
 801f5da:	2501      	movlt	r5, #1
 801f5dc:	f7ff fd40 	bl	801f060 <_Balloc>
 801f5e0:	b920      	cbnz	r0, 801f5ec <__mdiff+0x5c>
 801f5e2:	4b2e      	ldr	r3, [pc, #184]	; (801f69c <__mdiff+0x10c>)
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	f240 2145 	movw	r1, #581	; 0x245
 801f5ea:	e7e5      	b.n	801f5b8 <__mdiff+0x28>
 801f5ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f5f0:	6926      	ldr	r6, [r4, #16]
 801f5f2:	60c5      	str	r5, [r0, #12]
 801f5f4:	f104 0914 	add.w	r9, r4, #20
 801f5f8:	f108 0514 	add.w	r5, r8, #20
 801f5fc:	f100 0e14 	add.w	lr, r0, #20
 801f600:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f604:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f608:	f108 0210 	add.w	r2, r8, #16
 801f60c:	46f2      	mov	sl, lr
 801f60e:	2100      	movs	r1, #0
 801f610:	f859 3b04 	ldr.w	r3, [r9], #4
 801f614:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f618:	fa11 f88b 	uxtah	r8, r1, fp
 801f61c:	b299      	uxth	r1, r3
 801f61e:	0c1b      	lsrs	r3, r3, #16
 801f620:	eba8 0801 	sub.w	r8, r8, r1
 801f624:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f628:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f62c:	fa1f f888 	uxth.w	r8, r8
 801f630:	1419      	asrs	r1, r3, #16
 801f632:	454e      	cmp	r6, r9
 801f634:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f638:	f84a 3b04 	str.w	r3, [sl], #4
 801f63c:	d8e8      	bhi.n	801f610 <__mdiff+0x80>
 801f63e:	1b33      	subs	r3, r6, r4
 801f640:	3b15      	subs	r3, #21
 801f642:	f023 0303 	bic.w	r3, r3, #3
 801f646:	3304      	adds	r3, #4
 801f648:	3415      	adds	r4, #21
 801f64a:	42a6      	cmp	r6, r4
 801f64c:	bf38      	it	cc
 801f64e:	2304      	movcc	r3, #4
 801f650:	441d      	add	r5, r3
 801f652:	4473      	add	r3, lr
 801f654:	469e      	mov	lr, r3
 801f656:	462e      	mov	r6, r5
 801f658:	4566      	cmp	r6, ip
 801f65a:	d30e      	bcc.n	801f67a <__mdiff+0xea>
 801f65c:	f10c 0203 	add.w	r2, ip, #3
 801f660:	1b52      	subs	r2, r2, r5
 801f662:	f022 0203 	bic.w	r2, r2, #3
 801f666:	3d03      	subs	r5, #3
 801f668:	45ac      	cmp	ip, r5
 801f66a:	bf38      	it	cc
 801f66c:	2200      	movcc	r2, #0
 801f66e:	4413      	add	r3, r2
 801f670:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f674:	b17a      	cbz	r2, 801f696 <__mdiff+0x106>
 801f676:	6107      	str	r7, [r0, #16]
 801f678:	e7a4      	b.n	801f5c4 <__mdiff+0x34>
 801f67a:	f856 8b04 	ldr.w	r8, [r6], #4
 801f67e:	fa11 f288 	uxtah	r2, r1, r8
 801f682:	1414      	asrs	r4, r2, #16
 801f684:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f688:	b292      	uxth	r2, r2
 801f68a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f68e:	f84e 2b04 	str.w	r2, [lr], #4
 801f692:	1421      	asrs	r1, r4, #16
 801f694:	e7e0      	b.n	801f658 <__mdiff+0xc8>
 801f696:	3f01      	subs	r7, #1
 801f698:	e7ea      	b.n	801f670 <__mdiff+0xe0>
 801f69a:	bf00      	nop
 801f69c:	08020798 	.word	0x08020798
 801f6a0:	080207a9 	.word	0x080207a9

0801f6a4 <__d2b>:
 801f6a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f6a8:	460f      	mov	r7, r1
 801f6aa:	2101      	movs	r1, #1
 801f6ac:	ec59 8b10 	vmov	r8, r9, d0
 801f6b0:	4616      	mov	r6, r2
 801f6b2:	f7ff fcd5 	bl	801f060 <_Balloc>
 801f6b6:	4604      	mov	r4, r0
 801f6b8:	b930      	cbnz	r0, 801f6c8 <__d2b+0x24>
 801f6ba:	4602      	mov	r2, r0
 801f6bc:	4b24      	ldr	r3, [pc, #144]	; (801f750 <__d2b+0xac>)
 801f6be:	4825      	ldr	r0, [pc, #148]	; (801f754 <__d2b+0xb0>)
 801f6c0:	f240 310f 	movw	r1, #783	; 0x30f
 801f6c4:	f000 fae0 	bl	801fc88 <__assert_func>
 801f6c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f6cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f6d0:	bb2d      	cbnz	r5, 801f71e <__d2b+0x7a>
 801f6d2:	9301      	str	r3, [sp, #4]
 801f6d4:	f1b8 0300 	subs.w	r3, r8, #0
 801f6d8:	d026      	beq.n	801f728 <__d2b+0x84>
 801f6da:	4668      	mov	r0, sp
 801f6dc:	9300      	str	r3, [sp, #0]
 801f6de:	f7ff fd87 	bl	801f1f0 <__lo0bits>
 801f6e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f6e6:	b1e8      	cbz	r0, 801f724 <__d2b+0x80>
 801f6e8:	f1c0 0320 	rsb	r3, r0, #32
 801f6ec:	fa02 f303 	lsl.w	r3, r2, r3
 801f6f0:	430b      	orrs	r3, r1
 801f6f2:	40c2      	lsrs	r2, r0
 801f6f4:	6163      	str	r3, [r4, #20]
 801f6f6:	9201      	str	r2, [sp, #4]
 801f6f8:	9b01      	ldr	r3, [sp, #4]
 801f6fa:	61a3      	str	r3, [r4, #24]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	bf14      	ite	ne
 801f700:	2202      	movne	r2, #2
 801f702:	2201      	moveq	r2, #1
 801f704:	6122      	str	r2, [r4, #16]
 801f706:	b1bd      	cbz	r5, 801f738 <__d2b+0x94>
 801f708:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f70c:	4405      	add	r5, r0
 801f70e:	603d      	str	r5, [r7, #0]
 801f710:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f714:	6030      	str	r0, [r6, #0]
 801f716:	4620      	mov	r0, r4
 801f718:	b003      	add	sp, #12
 801f71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f71e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f722:	e7d6      	b.n	801f6d2 <__d2b+0x2e>
 801f724:	6161      	str	r1, [r4, #20]
 801f726:	e7e7      	b.n	801f6f8 <__d2b+0x54>
 801f728:	a801      	add	r0, sp, #4
 801f72a:	f7ff fd61 	bl	801f1f0 <__lo0bits>
 801f72e:	9b01      	ldr	r3, [sp, #4]
 801f730:	6163      	str	r3, [r4, #20]
 801f732:	3020      	adds	r0, #32
 801f734:	2201      	movs	r2, #1
 801f736:	e7e5      	b.n	801f704 <__d2b+0x60>
 801f738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f73c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f740:	6038      	str	r0, [r7, #0]
 801f742:	6918      	ldr	r0, [r3, #16]
 801f744:	f7ff fd34 	bl	801f1b0 <__hi0bits>
 801f748:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f74c:	e7e2      	b.n	801f714 <__d2b+0x70>
 801f74e:	bf00      	nop
 801f750:	08020798 	.word	0x08020798
 801f754:	080207a9 	.word	0x080207a9

0801f758 <__sfputc_r>:
 801f758:	6893      	ldr	r3, [r2, #8]
 801f75a:	3b01      	subs	r3, #1
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	b410      	push	{r4}
 801f760:	6093      	str	r3, [r2, #8]
 801f762:	da08      	bge.n	801f776 <__sfputc_r+0x1e>
 801f764:	6994      	ldr	r4, [r2, #24]
 801f766:	42a3      	cmp	r3, r4
 801f768:	db01      	blt.n	801f76e <__sfputc_r+0x16>
 801f76a:	290a      	cmp	r1, #10
 801f76c:	d103      	bne.n	801f776 <__sfputc_r+0x1e>
 801f76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f772:	f000 b9e3 	b.w	801fb3c <__swbuf_r>
 801f776:	6813      	ldr	r3, [r2, #0]
 801f778:	1c58      	adds	r0, r3, #1
 801f77a:	6010      	str	r0, [r2, #0]
 801f77c:	7019      	strb	r1, [r3, #0]
 801f77e:	4608      	mov	r0, r1
 801f780:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f784:	4770      	bx	lr

0801f786 <__sfputs_r>:
 801f786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f788:	4606      	mov	r6, r0
 801f78a:	460f      	mov	r7, r1
 801f78c:	4614      	mov	r4, r2
 801f78e:	18d5      	adds	r5, r2, r3
 801f790:	42ac      	cmp	r4, r5
 801f792:	d101      	bne.n	801f798 <__sfputs_r+0x12>
 801f794:	2000      	movs	r0, #0
 801f796:	e007      	b.n	801f7a8 <__sfputs_r+0x22>
 801f798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f79c:	463a      	mov	r2, r7
 801f79e:	4630      	mov	r0, r6
 801f7a0:	f7ff ffda 	bl	801f758 <__sfputc_r>
 801f7a4:	1c43      	adds	r3, r0, #1
 801f7a6:	d1f3      	bne.n	801f790 <__sfputs_r+0xa>
 801f7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f7ac <_vfiprintf_r>:
 801f7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b0:	460d      	mov	r5, r1
 801f7b2:	b09d      	sub	sp, #116	; 0x74
 801f7b4:	4614      	mov	r4, r2
 801f7b6:	4698      	mov	r8, r3
 801f7b8:	4606      	mov	r6, r0
 801f7ba:	b118      	cbz	r0, 801f7c4 <_vfiprintf_r+0x18>
 801f7bc:	6a03      	ldr	r3, [r0, #32]
 801f7be:	b90b      	cbnz	r3, 801f7c4 <_vfiprintf_r+0x18>
 801f7c0:	f7fe fc40 	bl	801e044 <__sinit>
 801f7c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7c6:	07d9      	lsls	r1, r3, #31
 801f7c8:	d405      	bmi.n	801f7d6 <_vfiprintf_r+0x2a>
 801f7ca:	89ab      	ldrh	r3, [r5, #12]
 801f7cc:	059a      	lsls	r2, r3, #22
 801f7ce:	d402      	bmi.n	801f7d6 <_vfiprintf_r+0x2a>
 801f7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7d2:	f7fe fd40 	bl	801e256 <__retarget_lock_acquire_recursive>
 801f7d6:	89ab      	ldrh	r3, [r5, #12]
 801f7d8:	071b      	lsls	r3, r3, #28
 801f7da:	d501      	bpl.n	801f7e0 <_vfiprintf_r+0x34>
 801f7dc:	692b      	ldr	r3, [r5, #16]
 801f7de:	b99b      	cbnz	r3, 801f808 <_vfiprintf_r+0x5c>
 801f7e0:	4629      	mov	r1, r5
 801f7e2:	4630      	mov	r0, r6
 801f7e4:	f000 f9e8 	bl	801fbb8 <__swsetup_r>
 801f7e8:	b170      	cbz	r0, 801f808 <_vfiprintf_r+0x5c>
 801f7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f7ec:	07dc      	lsls	r4, r3, #31
 801f7ee:	d504      	bpl.n	801f7fa <_vfiprintf_r+0x4e>
 801f7f0:	f04f 30ff 	mov.w	r0, #4294967295
 801f7f4:	b01d      	add	sp, #116	; 0x74
 801f7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7fa:	89ab      	ldrh	r3, [r5, #12]
 801f7fc:	0598      	lsls	r0, r3, #22
 801f7fe:	d4f7      	bmi.n	801f7f0 <_vfiprintf_r+0x44>
 801f800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f802:	f7fe fd29 	bl	801e258 <__retarget_lock_release_recursive>
 801f806:	e7f3      	b.n	801f7f0 <_vfiprintf_r+0x44>
 801f808:	2300      	movs	r3, #0
 801f80a:	9309      	str	r3, [sp, #36]	; 0x24
 801f80c:	2320      	movs	r3, #32
 801f80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f812:	f8cd 800c 	str.w	r8, [sp, #12]
 801f816:	2330      	movs	r3, #48	; 0x30
 801f818:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f9cc <_vfiprintf_r+0x220>
 801f81c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f820:	f04f 0901 	mov.w	r9, #1
 801f824:	4623      	mov	r3, r4
 801f826:	469a      	mov	sl, r3
 801f828:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f82c:	b10a      	cbz	r2, 801f832 <_vfiprintf_r+0x86>
 801f82e:	2a25      	cmp	r2, #37	; 0x25
 801f830:	d1f9      	bne.n	801f826 <_vfiprintf_r+0x7a>
 801f832:	ebba 0b04 	subs.w	fp, sl, r4
 801f836:	d00b      	beq.n	801f850 <_vfiprintf_r+0xa4>
 801f838:	465b      	mov	r3, fp
 801f83a:	4622      	mov	r2, r4
 801f83c:	4629      	mov	r1, r5
 801f83e:	4630      	mov	r0, r6
 801f840:	f7ff ffa1 	bl	801f786 <__sfputs_r>
 801f844:	3001      	adds	r0, #1
 801f846:	f000 80a9 	beq.w	801f99c <_vfiprintf_r+0x1f0>
 801f84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f84c:	445a      	add	r2, fp
 801f84e:	9209      	str	r2, [sp, #36]	; 0x24
 801f850:	f89a 3000 	ldrb.w	r3, [sl]
 801f854:	2b00      	cmp	r3, #0
 801f856:	f000 80a1 	beq.w	801f99c <_vfiprintf_r+0x1f0>
 801f85a:	2300      	movs	r3, #0
 801f85c:	f04f 32ff 	mov.w	r2, #4294967295
 801f860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f864:	f10a 0a01 	add.w	sl, sl, #1
 801f868:	9304      	str	r3, [sp, #16]
 801f86a:	9307      	str	r3, [sp, #28]
 801f86c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f870:	931a      	str	r3, [sp, #104]	; 0x68
 801f872:	4654      	mov	r4, sl
 801f874:	2205      	movs	r2, #5
 801f876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f87a:	4854      	ldr	r0, [pc, #336]	; (801f9cc <_vfiprintf_r+0x220>)
 801f87c:	f7e0 fd30 	bl	80002e0 <memchr>
 801f880:	9a04      	ldr	r2, [sp, #16]
 801f882:	b9d8      	cbnz	r0, 801f8bc <_vfiprintf_r+0x110>
 801f884:	06d1      	lsls	r1, r2, #27
 801f886:	bf44      	itt	mi
 801f888:	2320      	movmi	r3, #32
 801f88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f88e:	0713      	lsls	r3, r2, #28
 801f890:	bf44      	itt	mi
 801f892:	232b      	movmi	r3, #43	; 0x2b
 801f894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f898:	f89a 3000 	ldrb.w	r3, [sl]
 801f89c:	2b2a      	cmp	r3, #42	; 0x2a
 801f89e:	d015      	beq.n	801f8cc <_vfiprintf_r+0x120>
 801f8a0:	9a07      	ldr	r2, [sp, #28]
 801f8a2:	4654      	mov	r4, sl
 801f8a4:	2000      	movs	r0, #0
 801f8a6:	f04f 0c0a 	mov.w	ip, #10
 801f8aa:	4621      	mov	r1, r4
 801f8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8b0:	3b30      	subs	r3, #48	; 0x30
 801f8b2:	2b09      	cmp	r3, #9
 801f8b4:	d94d      	bls.n	801f952 <_vfiprintf_r+0x1a6>
 801f8b6:	b1b0      	cbz	r0, 801f8e6 <_vfiprintf_r+0x13a>
 801f8b8:	9207      	str	r2, [sp, #28]
 801f8ba:	e014      	b.n	801f8e6 <_vfiprintf_r+0x13a>
 801f8bc:	eba0 0308 	sub.w	r3, r0, r8
 801f8c0:	fa09 f303 	lsl.w	r3, r9, r3
 801f8c4:	4313      	orrs	r3, r2
 801f8c6:	9304      	str	r3, [sp, #16]
 801f8c8:	46a2      	mov	sl, r4
 801f8ca:	e7d2      	b.n	801f872 <_vfiprintf_r+0xc6>
 801f8cc:	9b03      	ldr	r3, [sp, #12]
 801f8ce:	1d19      	adds	r1, r3, #4
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	9103      	str	r1, [sp, #12]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	bfbb      	ittet	lt
 801f8d8:	425b      	neglt	r3, r3
 801f8da:	f042 0202 	orrlt.w	r2, r2, #2
 801f8de:	9307      	strge	r3, [sp, #28]
 801f8e0:	9307      	strlt	r3, [sp, #28]
 801f8e2:	bfb8      	it	lt
 801f8e4:	9204      	strlt	r2, [sp, #16]
 801f8e6:	7823      	ldrb	r3, [r4, #0]
 801f8e8:	2b2e      	cmp	r3, #46	; 0x2e
 801f8ea:	d10c      	bne.n	801f906 <_vfiprintf_r+0x15a>
 801f8ec:	7863      	ldrb	r3, [r4, #1]
 801f8ee:	2b2a      	cmp	r3, #42	; 0x2a
 801f8f0:	d134      	bne.n	801f95c <_vfiprintf_r+0x1b0>
 801f8f2:	9b03      	ldr	r3, [sp, #12]
 801f8f4:	1d1a      	adds	r2, r3, #4
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	9203      	str	r2, [sp, #12]
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	bfb8      	it	lt
 801f8fe:	f04f 33ff 	movlt.w	r3, #4294967295
 801f902:	3402      	adds	r4, #2
 801f904:	9305      	str	r3, [sp, #20]
 801f906:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f9dc <_vfiprintf_r+0x230>
 801f90a:	7821      	ldrb	r1, [r4, #0]
 801f90c:	2203      	movs	r2, #3
 801f90e:	4650      	mov	r0, sl
 801f910:	f7e0 fce6 	bl	80002e0 <memchr>
 801f914:	b138      	cbz	r0, 801f926 <_vfiprintf_r+0x17a>
 801f916:	9b04      	ldr	r3, [sp, #16]
 801f918:	eba0 000a 	sub.w	r0, r0, sl
 801f91c:	2240      	movs	r2, #64	; 0x40
 801f91e:	4082      	lsls	r2, r0
 801f920:	4313      	orrs	r3, r2
 801f922:	3401      	adds	r4, #1
 801f924:	9304      	str	r3, [sp, #16]
 801f926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f92a:	4829      	ldr	r0, [pc, #164]	; (801f9d0 <_vfiprintf_r+0x224>)
 801f92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f930:	2206      	movs	r2, #6
 801f932:	f7e0 fcd5 	bl	80002e0 <memchr>
 801f936:	2800      	cmp	r0, #0
 801f938:	d03f      	beq.n	801f9ba <_vfiprintf_r+0x20e>
 801f93a:	4b26      	ldr	r3, [pc, #152]	; (801f9d4 <_vfiprintf_r+0x228>)
 801f93c:	bb1b      	cbnz	r3, 801f986 <_vfiprintf_r+0x1da>
 801f93e:	9b03      	ldr	r3, [sp, #12]
 801f940:	3307      	adds	r3, #7
 801f942:	f023 0307 	bic.w	r3, r3, #7
 801f946:	3308      	adds	r3, #8
 801f948:	9303      	str	r3, [sp, #12]
 801f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f94c:	443b      	add	r3, r7
 801f94e:	9309      	str	r3, [sp, #36]	; 0x24
 801f950:	e768      	b.n	801f824 <_vfiprintf_r+0x78>
 801f952:	fb0c 3202 	mla	r2, ip, r2, r3
 801f956:	460c      	mov	r4, r1
 801f958:	2001      	movs	r0, #1
 801f95a:	e7a6      	b.n	801f8aa <_vfiprintf_r+0xfe>
 801f95c:	2300      	movs	r3, #0
 801f95e:	3401      	adds	r4, #1
 801f960:	9305      	str	r3, [sp, #20]
 801f962:	4619      	mov	r1, r3
 801f964:	f04f 0c0a 	mov.w	ip, #10
 801f968:	4620      	mov	r0, r4
 801f96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f96e:	3a30      	subs	r2, #48	; 0x30
 801f970:	2a09      	cmp	r2, #9
 801f972:	d903      	bls.n	801f97c <_vfiprintf_r+0x1d0>
 801f974:	2b00      	cmp	r3, #0
 801f976:	d0c6      	beq.n	801f906 <_vfiprintf_r+0x15a>
 801f978:	9105      	str	r1, [sp, #20]
 801f97a:	e7c4      	b.n	801f906 <_vfiprintf_r+0x15a>
 801f97c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f980:	4604      	mov	r4, r0
 801f982:	2301      	movs	r3, #1
 801f984:	e7f0      	b.n	801f968 <_vfiprintf_r+0x1bc>
 801f986:	ab03      	add	r3, sp, #12
 801f988:	9300      	str	r3, [sp, #0]
 801f98a:	462a      	mov	r2, r5
 801f98c:	4b12      	ldr	r3, [pc, #72]	; (801f9d8 <_vfiprintf_r+0x22c>)
 801f98e:	a904      	add	r1, sp, #16
 801f990:	4630      	mov	r0, r6
 801f992:	f7fd ff21 	bl	801d7d8 <_printf_float>
 801f996:	4607      	mov	r7, r0
 801f998:	1c78      	adds	r0, r7, #1
 801f99a:	d1d6      	bne.n	801f94a <_vfiprintf_r+0x19e>
 801f99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f99e:	07d9      	lsls	r1, r3, #31
 801f9a0:	d405      	bmi.n	801f9ae <_vfiprintf_r+0x202>
 801f9a2:	89ab      	ldrh	r3, [r5, #12]
 801f9a4:	059a      	lsls	r2, r3, #22
 801f9a6:	d402      	bmi.n	801f9ae <_vfiprintf_r+0x202>
 801f9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9aa:	f7fe fc55 	bl	801e258 <__retarget_lock_release_recursive>
 801f9ae:	89ab      	ldrh	r3, [r5, #12]
 801f9b0:	065b      	lsls	r3, r3, #25
 801f9b2:	f53f af1d 	bmi.w	801f7f0 <_vfiprintf_r+0x44>
 801f9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9b8:	e71c      	b.n	801f7f4 <_vfiprintf_r+0x48>
 801f9ba:	ab03      	add	r3, sp, #12
 801f9bc:	9300      	str	r3, [sp, #0]
 801f9be:	462a      	mov	r2, r5
 801f9c0:	4b05      	ldr	r3, [pc, #20]	; (801f9d8 <_vfiprintf_r+0x22c>)
 801f9c2:	a904      	add	r1, sp, #16
 801f9c4:	4630      	mov	r0, r6
 801f9c6:	f7fe f98f 	bl	801dce8 <_printf_i>
 801f9ca:	e7e4      	b.n	801f996 <_vfiprintf_r+0x1ea>
 801f9cc:	08020904 	.word	0x08020904
 801f9d0:	0802090e 	.word	0x0802090e
 801f9d4:	0801d7d9 	.word	0x0801d7d9
 801f9d8:	0801f787 	.word	0x0801f787
 801f9dc:	0802090a 	.word	0x0802090a

0801f9e0 <__sflush_r>:
 801f9e0:	898a      	ldrh	r2, [r1, #12]
 801f9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9e6:	4605      	mov	r5, r0
 801f9e8:	0710      	lsls	r0, r2, #28
 801f9ea:	460c      	mov	r4, r1
 801f9ec:	d458      	bmi.n	801faa0 <__sflush_r+0xc0>
 801f9ee:	684b      	ldr	r3, [r1, #4]
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	dc05      	bgt.n	801fa00 <__sflush_r+0x20>
 801f9f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	dc02      	bgt.n	801fa00 <__sflush_r+0x20>
 801f9fa:	2000      	movs	r0, #0
 801f9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa02:	2e00      	cmp	r6, #0
 801fa04:	d0f9      	beq.n	801f9fa <__sflush_r+0x1a>
 801fa06:	2300      	movs	r3, #0
 801fa08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa0c:	682f      	ldr	r7, [r5, #0]
 801fa0e:	6a21      	ldr	r1, [r4, #32]
 801fa10:	602b      	str	r3, [r5, #0]
 801fa12:	d032      	beq.n	801fa7a <__sflush_r+0x9a>
 801fa14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fa16:	89a3      	ldrh	r3, [r4, #12]
 801fa18:	075a      	lsls	r2, r3, #29
 801fa1a:	d505      	bpl.n	801fa28 <__sflush_r+0x48>
 801fa1c:	6863      	ldr	r3, [r4, #4]
 801fa1e:	1ac0      	subs	r0, r0, r3
 801fa20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fa22:	b10b      	cbz	r3, 801fa28 <__sflush_r+0x48>
 801fa24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fa26:	1ac0      	subs	r0, r0, r3
 801fa28:	2300      	movs	r3, #0
 801fa2a:	4602      	mov	r2, r0
 801fa2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa2e:	6a21      	ldr	r1, [r4, #32]
 801fa30:	4628      	mov	r0, r5
 801fa32:	47b0      	blx	r6
 801fa34:	1c43      	adds	r3, r0, #1
 801fa36:	89a3      	ldrh	r3, [r4, #12]
 801fa38:	d106      	bne.n	801fa48 <__sflush_r+0x68>
 801fa3a:	6829      	ldr	r1, [r5, #0]
 801fa3c:	291d      	cmp	r1, #29
 801fa3e:	d82b      	bhi.n	801fa98 <__sflush_r+0xb8>
 801fa40:	4a29      	ldr	r2, [pc, #164]	; (801fae8 <__sflush_r+0x108>)
 801fa42:	410a      	asrs	r2, r1
 801fa44:	07d6      	lsls	r6, r2, #31
 801fa46:	d427      	bmi.n	801fa98 <__sflush_r+0xb8>
 801fa48:	2200      	movs	r2, #0
 801fa4a:	6062      	str	r2, [r4, #4]
 801fa4c:	04d9      	lsls	r1, r3, #19
 801fa4e:	6922      	ldr	r2, [r4, #16]
 801fa50:	6022      	str	r2, [r4, #0]
 801fa52:	d504      	bpl.n	801fa5e <__sflush_r+0x7e>
 801fa54:	1c42      	adds	r2, r0, #1
 801fa56:	d101      	bne.n	801fa5c <__sflush_r+0x7c>
 801fa58:	682b      	ldr	r3, [r5, #0]
 801fa5a:	b903      	cbnz	r3, 801fa5e <__sflush_r+0x7e>
 801fa5c:	6560      	str	r0, [r4, #84]	; 0x54
 801fa5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa60:	602f      	str	r7, [r5, #0]
 801fa62:	2900      	cmp	r1, #0
 801fa64:	d0c9      	beq.n	801f9fa <__sflush_r+0x1a>
 801fa66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa6a:	4299      	cmp	r1, r3
 801fa6c:	d002      	beq.n	801fa74 <__sflush_r+0x94>
 801fa6e:	4628      	mov	r0, r5
 801fa70:	f7ff f9f6 	bl	801ee60 <_free_r>
 801fa74:	2000      	movs	r0, #0
 801fa76:	6360      	str	r0, [r4, #52]	; 0x34
 801fa78:	e7c0      	b.n	801f9fc <__sflush_r+0x1c>
 801fa7a:	2301      	movs	r3, #1
 801fa7c:	4628      	mov	r0, r5
 801fa7e:	47b0      	blx	r6
 801fa80:	1c41      	adds	r1, r0, #1
 801fa82:	d1c8      	bne.n	801fa16 <__sflush_r+0x36>
 801fa84:	682b      	ldr	r3, [r5, #0]
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d0c5      	beq.n	801fa16 <__sflush_r+0x36>
 801fa8a:	2b1d      	cmp	r3, #29
 801fa8c:	d001      	beq.n	801fa92 <__sflush_r+0xb2>
 801fa8e:	2b16      	cmp	r3, #22
 801fa90:	d101      	bne.n	801fa96 <__sflush_r+0xb6>
 801fa92:	602f      	str	r7, [r5, #0]
 801fa94:	e7b1      	b.n	801f9fa <__sflush_r+0x1a>
 801fa96:	89a3      	ldrh	r3, [r4, #12]
 801fa98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa9c:	81a3      	strh	r3, [r4, #12]
 801fa9e:	e7ad      	b.n	801f9fc <__sflush_r+0x1c>
 801faa0:	690f      	ldr	r7, [r1, #16]
 801faa2:	2f00      	cmp	r7, #0
 801faa4:	d0a9      	beq.n	801f9fa <__sflush_r+0x1a>
 801faa6:	0793      	lsls	r3, r2, #30
 801faa8:	680e      	ldr	r6, [r1, #0]
 801faaa:	bf08      	it	eq
 801faac:	694b      	ldreq	r3, [r1, #20]
 801faae:	600f      	str	r7, [r1, #0]
 801fab0:	bf18      	it	ne
 801fab2:	2300      	movne	r3, #0
 801fab4:	eba6 0807 	sub.w	r8, r6, r7
 801fab8:	608b      	str	r3, [r1, #8]
 801faba:	f1b8 0f00 	cmp.w	r8, #0
 801fabe:	dd9c      	ble.n	801f9fa <__sflush_r+0x1a>
 801fac0:	6a21      	ldr	r1, [r4, #32]
 801fac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fac4:	4643      	mov	r3, r8
 801fac6:	463a      	mov	r2, r7
 801fac8:	4628      	mov	r0, r5
 801faca:	47b0      	blx	r6
 801facc:	2800      	cmp	r0, #0
 801face:	dc06      	bgt.n	801fade <__sflush_r+0xfe>
 801fad0:	89a3      	ldrh	r3, [r4, #12]
 801fad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fad6:	81a3      	strh	r3, [r4, #12]
 801fad8:	f04f 30ff 	mov.w	r0, #4294967295
 801fadc:	e78e      	b.n	801f9fc <__sflush_r+0x1c>
 801fade:	4407      	add	r7, r0
 801fae0:	eba8 0800 	sub.w	r8, r8, r0
 801fae4:	e7e9      	b.n	801faba <__sflush_r+0xda>
 801fae6:	bf00      	nop
 801fae8:	dfbffffe 	.word	0xdfbffffe

0801faec <_fflush_r>:
 801faec:	b538      	push	{r3, r4, r5, lr}
 801faee:	690b      	ldr	r3, [r1, #16]
 801faf0:	4605      	mov	r5, r0
 801faf2:	460c      	mov	r4, r1
 801faf4:	b913      	cbnz	r3, 801fafc <_fflush_r+0x10>
 801faf6:	2500      	movs	r5, #0
 801faf8:	4628      	mov	r0, r5
 801fafa:	bd38      	pop	{r3, r4, r5, pc}
 801fafc:	b118      	cbz	r0, 801fb06 <_fflush_r+0x1a>
 801fafe:	6a03      	ldr	r3, [r0, #32]
 801fb00:	b90b      	cbnz	r3, 801fb06 <_fflush_r+0x1a>
 801fb02:	f7fe fa9f 	bl	801e044 <__sinit>
 801fb06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d0f3      	beq.n	801faf6 <_fflush_r+0xa>
 801fb0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fb10:	07d0      	lsls	r0, r2, #31
 801fb12:	d404      	bmi.n	801fb1e <_fflush_r+0x32>
 801fb14:	0599      	lsls	r1, r3, #22
 801fb16:	d402      	bmi.n	801fb1e <_fflush_r+0x32>
 801fb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb1a:	f7fe fb9c 	bl	801e256 <__retarget_lock_acquire_recursive>
 801fb1e:	4628      	mov	r0, r5
 801fb20:	4621      	mov	r1, r4
 801fb22:	f7ff ff5d 	bl	801f9e0 <__sflush_r>
 801fb26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb28:	07da      	lsls	r2, r3, #31
 801fb2a:	4605      	mov	r5, r0
 801fb2c:	d4e4      	bmi.n	801faf8 <_fflush_r+0xc>
 801fb2e:	89a3      	ldrh	r3, [r4, #12]
 801fb30:	059b      	lsls	r3, r3, #22
 801fb32:	d4e1      	bmi.n	801faf8 <_fflush_r+0xc>
 801fb34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb36:	f7fe fb8f 	bl	801e258 <__retarget_lock_release_recursive>
 801fb3a:	e7dd      	b.n	801faf8 <_fflush_r+0xc>

0801fb3c <__swbuf_r>:
 801fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb3e:	460e      	mov	r6, r1
 801fb40:	4614      	mov	r4, r2
 801fb42:	4605      	mov	r5, r0
 801fb44:	b118      	cbz	r0, 801fb4e <__swbuf_r+0x12>
 801fb46:	6a03      	ldr	r3, [r0, #32]
 801fb48:	b90b      	cbnz	r3, 801fb4e <__swbuf_r+0x12>
 801fb4a:	f7fe fa7b 	bl	801e044 <__sinit>
 801fb4e:	69a3      	ldr	r3, [r4, #24]
 801fb50:	60a3      	str	r3, [r4, #8]
 801fb52:	89a3      	ldrh	r3, [r4, #12]
 801fb54:	071a      	lsls	r2, r3, #28
 801fb56:	d525      	bpl.n	801fba4 <__swbuf_r+0x68>
 801fb58:	6923      	ldr	r3, [r4, #16]
 801fb5a:	b31b      	cbz	r3, 801fba4 <__swbuf_r+0x68>
 801fb5c:	6823      	ldr	r3, [r4, #0]
 801fb5e:	6922      	ldr	r2, [r4, #16]
 801fb60:	1a98      	subs	r0, r3, r2
 801fb62:	6963      	ldr	r3, [r4, #20]
 801fb64:	b2f6      	uxtb	r6, r6
 801fb66:	4283      	cmp	r3, r0
 801fb68:	4637      	mov	r7, r6
 801fb6a:	dc04      	bgt.n	801fb76 <__swbuf_r+0x3a>
 801fb6c:	4621      	mov	r1, r4
 801fb6e:	4628      	mov	r0, r5
 801fb70:	f7ff ffbc 	bl	801faec <_fflush_r>
 801fb74:	b9e0      	cbnz	r0, 801fbb0 <__swbuf_r+0x74>
 801fb76:	68a3      	ldr	r3, [r4, #8]
 801fb78:	3b01      	subs	r3, #1
 801fb7a:	60a3      	str	r3, [r4, #8]
 801fb7c:	6823      	ldr	r3, [r4, #0]
 801fb7e:	1c5a      	adds	r2, r3, #1
 801fb80:	6022      	str	r2, [r4, #0]
 801fb82:	701e      	strb	r6, [r3, #0]
 801fb84:	6962      	ldr	r2, [r4, #20]
 801fb86:	1c43      	adds	r3, r0, #1
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	d004      	beq.n	801fb96 <__swbuf_r+0x5a>
 801fb8c:	89a3      	ldrh	r3, [r4, #12]
 801fb8e:	07db      	lsls	r3, r3, #31
 801fb90:	d506      	bpl.n	801fba0 <__swbuf_r+0x64>
 801fb92:	2e0a      	cmp	r6, #10
 801fb94:	d104      	bne.n	801fba0 <__swbuf_r+0x64>
 801fb96:	4621      	mov	r1, r4
 801fb98:	4628      	mov	r0, r5
 801fb9a:	f7ff ffa7 	bl	801faec <_fflush_r>
 801fb9e:	b938      	cbnz	r0, 801fbb0 <__swbuf_r+0x74>
 801fba0:	4638      	mov	r0, r7
 801fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fba4:	4621      	mov	r1, r4
 801fba6:	4628      	mov	r0, r5
 801fba8:	f000 f806 	bl	801fbb8 <__swsetup_r>
 801fbac:	2800      	cmp	r0, #0
 801fbae:	d0d5      	beq.n	801fb5c <__swbuf_r+0x20>
 801fbb0:	f04f 37ff 	mov.w	r7, #4294967295
 801fbb4:	e7f4      	b.n	801fba0 <__swbuf_r+0x64>
	...

0801fbb8 <__swsetup_r>:
 801fbb8:	b538      	push	{r3, r4, r5, lr}
 801fbba:	4b2a      	ldr	r3, [pc, #168]	; (801fc64 <__swsetup_r+0xac>)
 801fbbc:	4605      	mov	r5, r0
 801fbbe:	6818      	ldr	r0, [r3, #0]
 801fbc0:	460c      	mov	r4, r1
 801fbc2:	b118      	cbz	r0, 801fbcc <__swsetup_r+0x14>
 801fbc4:	6a03      	ldr	r3, [r0, #32]
 801fbc6:	b90b      	cbnz	r3, 801fbcc <__swsetup_r+0x14>
 801fbc8:	f7fe fa3c 	bl	801e044 <__sinit>
 801fbcc:	89a3      	ldrh	r3, [r4, #12]
 801fbce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbd2:	0718      	lsls	r0, r3, #28
 801fbd4:	d422      	bmi.n	801fc1c <__swsetup_r+0x64>
 801fbd6:	06d9      	lsls	r1, r3, #27
 801fbd8:	d407      	bmi.n	801fbea <__swsetup_r+0x32>
 801fbda:	2309      	movs	r3, #9
 801fbdc:	602b      	str	r3, [r5, #0]
 801fbde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fbe2:	81a3      	strh	r3, [r4, #12]
 801fbe4:	f04f 30ff 	mov.w	r0, #4294967295
 801fbe8:	e034      	b.n	801fc54 <__swsetup_r+0x9c>
 801fbea:	0758      	lsls	r0, r3, #29
 801fbec:	d512      	bpl.n	801fc14 <__swsetup_r+0x5c>
 801fbee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fbf0:	b141      	cbz	r1, 801fc04 <__swsetup_r+0x4c>
 801fbf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbf6:	4299      	cmp	r1, r3
 801fbf8:	d002      	beq.n	801fc00 <__swsetup_r+0x48>
 801fbfa:	4628      	mov	r0, r5
 801fbfc:	f7ff f930 	bl	801ee60 <_free_r>
 801fc00:	2300      	movs	r3, #0
 801fc02:	6363      	str	r3, [r4, #52]	; 0x34
 801fc04:	89a3      	ldrh	r3, [r4, #12]
 801fc06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fc0a:	81a3      	strh	r3, [r4, #12]
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	6063      	str	r3, [r4, #4]
 801fc10:	6923      	ldr	r3, [r4, #16]
 801fc12:	6023      	str	r3, [r4, #0]
 801fc14:	89a3      	ldrh	r3, [r4, #12]
 801fc16:	f043 0308 	orr.w	r3, r3, #8
 801fc1a:	81a3      	strh	r3, [r4, #12]
 801fc1c:	6923      	ldr	r3, [r4, #16]
 801fc1e:	b94b      	cbnz	r3, 801fc34 <__swsetup_r+0x7c>
 801fc20:	89a3      	ldrh	r3, [r4, #12]
 801fc22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc2a:	d003      	beq.n	801fc34 <__swsetup_r+0x7c>
 801fc2c:	4621      	mov	r1, r4
 801fc2e:	4628      	mov	r0, r5
 801fc30:	f000 f8b6 	bl	801fda0 <__smakebuf_r>
 801fc34:	89a0      	ldrh	r0, [r4, #12]
 801fc36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fc3a:	f010 0301 	ands.w	r3, r0, #1
 801fc3e:	d00a      	beq.n	801fc56 <__swsetup_r+0x9e>
 801fc40:	2300      	movs	r3, #0
 801fc42:	60a3      	str	r3, [r4, #8]
 801fc44:	6963      	ldr	r3, [r4, #20]
 801fc46:	425b      	negs	r3, r3
 801fc48:	61a3      	str	r3, [r4, #24]
 801fc4a:	6923      	ldr	r3, [r4, #16]
 801fc4c:	b943      	cbnz	r3, 801fc60 <__swsetup_r+0xa8>
 801fc4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc52:	d1c4      	bne.n	801fbde <__swsetup_r+0x26>
 801fc54:	bd38      	pop	{r3, r4, r5, pc}
 801fc56:	0781      	lsls	r1, r0, #30
 801fc58:	bf58      	it	pl
 801fc5a:	6963      	ldrpl	r3, [r4, #20]
 801fc5c:	60a3      	str	r3, [r4, #8]
 801fc5e:	e7f4      	b.n	801fc4a <__swsetup_r+0x92>
 801fc60:	2000      	movs	r0, #0
 801fc62:	e7f7      	b.n	801fc54 <__swsetup_r+0x9c>
 801fc64:	2400006c 	.word	0x2400006c

0801fc68 <_sbrk_r>:
 801fc68:	b538      	push	{r3, r4, r5, lr}
 801fc6a:	4d06      	ldr	r5, [pc, #24]	; (801fc84 <_sbrk_r+0x1c>)
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	4604      	mov	r4, r0
 801fc70:	4608      	mov	r0, r1
 801fc72:	602b      	str	r3, [r5, #0]
 801fc74:	f7e1 ff58 	bl	8001b28 <_sbrk>
 801fc78:	1c43      	adds	r3, r0, #1
 801fc7a:	d102      	bne.n	801fc82 <_sbrk_r+0x1a>
 801fc7c:	682b      	ldr	r3, [r5, #0]
 801fc7e:	b103      	cbz	r3, 801fc82 <_sbrk_r+0x1a>
 801fc80:	6023      	str	r3, [r4, #0]
 801fc82:	bd38      	pop	{r3, r4, r5, pc}
 801fc84:	2400e8c4 	.word	0x2400e8c4

0801fc88 <__assert_func>:
 801fc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fc8a:	4614      	mov	r4, r2
 801fc8c:	461a      	mov	r2, r3
 801fc8e:	4b09      	ldr	r3, [pc, #36]	; (801fcb4 <__assert_func+0x2c>)
 801fc90:	681b      	ldr	r3, [r3, #0]
 801fc92:	4605      	mov	r5, r0
 801fc94:	68d8      	ldr	r0, [r3, #12]
 801fc96:	b14c      	cbz	r4, 801fcac <__assert_func+0x24>
 801fc98:	4b07      	ldr	r3, [pc, #28]	; (801fcb8 <__assert_func+0x30>)
 801fc9a:	9100      	str	r1, [sp, #0]
 801fc9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fca0:	4906      	ldr	r1, [pc, #24]	; (801fcbc <__assert_func+0x34>)
 801fca2:	462b      	mov	r3, r5
 801fca4:	f000 f844 	bl	801fd30 <fiprintf>
 801fca8:	f000 f8d8 	bl	801fe5c <abort>
 801fcac:	4b04      	ldr	r3, [pc, #16]	; (801fcc0 <__assert_func+0x38>)
 801fcae:	461c      	mov	r4, r3
 801fcb0:	e7f3      	b.n	801fc9a <__assert_func+0x12>
 801fcb2:	bf00      	nop
 801fcb4:	2400006c 	.word	0x2400006c
 801fcb8:	0802091f 	.word	0x0802091f
 801fcbc:	0802092c 	.word	0x0802092c
 801fcc0:	0802095a 	.word	0x0802095a

0801fcc4 <_calloc_r>:
 801fcc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fcc6:	fba1 2402 	umull	r2, r4, r1, r2
 801fcca:	b94c      	cbnz	r4, 801fce0 <_calloc_r+0x1c>
 801fccc:	4611      	mov	r1, r2
 801fcce:	9201      	str	r2, [sp, #4]
 801fcd0:	f7ff f93a 	bl	801ef48 <_malloc_r>
 801fcd4:	9a01      	ldr	r2, [sp, #4]
 801fcd6:	4605      	mov	r5, r0
 801fcd8:	b930      	cbnz	r0, 801fce8 <_calloc_r+0x24>
 801fcda:	4628      	mov	r0, r5
 801fcdc:	b003      	add	sp, #12
 801fcde:	bd30      	pop	{r4, r5, pc}
 801fce0:	220c      	movs	r2, #12
 801fce2:	6002      	str	r2, [r0, #0]
 801fce4:	2500      	movs	r5, #0
 801fce6:	e7f8      	b.n	801fcda <_calloc_r+0x16>
 801fce8:	4621      	mov	r1, r4
 801fcea:	f7fe fa36 	bl	801e15a <memset>
 801fcee:	e7f4      	b.n	801fcda <_calloc_r+0x16>

0801fcf0 <__ascii_mbtowc>:
 801fcf0:	b082      	sub	sp, #8
 801fcf2:	b901      	cbnz	r1, 801fcf6 <__ascii_mbtowc+0x6>
 801fcf4:	a901      	add	r1, sp, #4
 801fcf6:	b142      	cbz	r2, 801fd0a <__ascii_mbtowc+0x1a>
 801fcf8:	b14b      	cbz	r3, 801fd0e <__ascii_mbtowc+0x1e>
 801fcfa:	7813      	ldrb	r3, [r2, #0]
 801fcfc:	600b      	str	r3, [r1, #0]
 801fcfe:	7812      	ldrb	r2, [r2, #0]
 801fd00:	1e10      	subs	r0, r2, #0
 801fd02:	bf18      	it	ne
 801fd04:	2001      	movne	r0, #1
 801fd06:	b002      	add	sp, #8
 801fd08:	4770      	bx	lr
 801fd0a:	4610      	mov	r0, r2
 801fd0c:	e7fb      	b.n	801fd06 <__ascii_mbtowc+0x16>
 801fd0e:	f06f 0001 	mvn.w	r0, #1
 801fd12:	e7f8      	b.n	801fd06 <__ascii_mbtowc+0x16>

0801fd14 <__ascii_wctomb>:
 801fd14:	b149      	cbz	r1, 801fd2a <__ascii_wctomb+0x16>
 801fd16:	2aff      	cmp	r2, #255	; 0xff
 801fd18:	bf85      	ittet	hi
 801fd1a:	238a      	movhi	r3, #138	; 0x8a
 801fd1c:	6003      	strhi	r3, [r0, #0]
 801fd1e:	700a      	strbls	r2, [r1, #0]
 801fd20:	f04f 30ff 	movhi.w	r0, #4294967295
 801fd24:	bf98      	it	ls
 801fd26:	2001      	movls	r0, #1
 801fd28:	4770      	bx	lr
 801fd2a:	4608      	mov	r0, r1
 801fd2c:	4770      	bx	lr
	...

0801fd30 <fiprintf>:
 801fd30:	b40e      	push	{r1, r2, r3}
 801fd32:	b503      	push	{r0, r1, lr}
 801fd34:	4601      	mov	r1, r0
 801fd36:	ab03      	add	r3, sp, #12
 801fd38:	4805      	ldr	r0, [pc, #20]	; (801fd50 <fiprintf+0x20>)
 801fd3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd3e:	6800      	ldr	r0, [r0, #0]
 801fd40:	9301      	str	r3, [sp, #4]
 801fd42:	f7ff fd33 	bl	801f7ac <_vfiprintf_r>
 801fd46:	b002      	add	sp, #8
 801fd48:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd4c:	b003      	add	sp, #12
 801fd4e:	4770      	bx	lr
 801fd50:	2400006c 	.word	0x2400006c

0801fd54 <__swhatbuf_r>:
 801fd54:	b570      	push	{r4, r5, r6, lr}
 801fd56:	460c      	mov	r4, r1
 801fd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd5c:	2900      	cmp	r1, #0
 801fd5e:	b096      	sub	sp, #88	; 0x58
 801fd60:	4615      	mov	r5, r2
 801fd62:	461e      	mov	r6, r3
 801fd64:	da0d      	bge.n	801fd82 <__swhatbuf_r+0x2e>
 801fd66:	89a3      	ldrh	r3, [r4, #12]
 801fd68:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fd6c:	f04f 0100 	mov.w	r1, #0
 801fd70:	bf0c      	ite	eq
 801fd72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fd76:	2340      	movne	r3, #64	; 0x40
 801fd78:	2000      	movs	r0, #0
 801fd7a:	6031      	str	r1, [r6, #0]
 801fd7c:	602b      	str	r3, [r5, #0]
 801fd7e:	b016      	add	sp, #88	; 0x58
 801fd80:	bd70      	pop	{r4, r5, r6, pc}
 801fd82:	466a      	mov	r2, sp
 801fd84:	f000 f848 	bl	801fe18 <_fstat_r>
 801fd88:	2800      	cmp	r0, #0
 801fd8a:	dbec      	blt.n	801fd66 <__swhatbuf_r+0x12>
 801fd8c:	9901      	ldr	r1, [sp, #4]
 801fd8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fd92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fd96:	4259      	negs	r1, r3
 801fd98:	4159      	adcs	r1, r3
 801fd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd9e:	e7eb      	b.n	801fd78 <__swhatbuf_r+0x24>

0801fda0 <__smakebuf_r>:
 801fda0:	898b      	ldrh	r3, [r1, #12]
 801fda2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fda4:	079d      	lsls	r5, r3, #30
 801fda6:	4606      	mov	r6, r0
 801fda8:	460c      	mov	r4, r1
 801fdaa:	d507      	bpl.n	801fdbc <__smakebuf_r+0x1c>
 801fdac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fdb0:	6023      	str	r3, [r4, #0]
 801fdb2:	6123      	str	r3, [r4, #16]
 801fdb4:	2301      	movs	r3, #1
 801fdb6:	6163      	str	r3, [r4, #20]
 801fdb8:	b002      	add	sp, #8
 801fdba:	bd70      	pop	{r4, r5, r6, pc}
 801fdbc:	ab01      	add	r3, sp, #4
 801fdbe:	466a      	mov	r2, sp
 801fdc0:	f7ff ffc8 	bl	801fd54 <__swhatbuf_r>
 801fdc4:	9900      	ldr	r1, [sp, #0]
 801fdc6:	4605      	mov	r5, r0
 801fdc8:	4630      	mov	r0, r6
 801fdca:	f7ff f8bd 	bl	801ef48 <_malloc_r>
 801fdce:	b948      	cbnz	r0, 801fde4 <__smakebuf_r+0x44>
 801fdd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdd4:	059a      	lsls	r2, r3, #22
 801fdd6:	d4ef      	bmi.n	801fdb8 <__smakebuf_r+0x18>
 801fdd8:	f023 0303 	bic.w	r3, r3, #3
 801fddc:	f043 0302 	orr.w	r3, r3, #2
 801fde0:	81a3      	strh	r3, [r4, #12]
 801fde2:	e7e3      	b.n	801fdac <__smakebuf_r+0xc>
 801fde4:	89a3      	ldrh	r3, [r4, #12]
 801fde6:	6020      	str	r0, [r4, #0]
 801fde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdec:	81a3      	strh	r3, [r4, #12]
 801fdee:	9b00      	ldr	r3, [sp, #0]
 801fdf0:	6163      	str	r3, [r4, #20]
 801fdf2:	9b01      	ldr	r3, [sp, #4]
 801fdf4:	6120      	str	r0, [r4, #16]
 801fdf6:	b15b      	cbz	r3, 801fe10 <__smakebuf_r+0x70>
 801fdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	f000 f81d 	bl	801fe3c <_isatty_r>
 801fe02:	b128      	cbz	r0, 801fe10 <__smakebuf_r+0x70>
 801fe04:	89a3      	ldrh	r3, [r4, #12]
 801fe06:	f023 0303 	bic.w	r3, r3, #3
 801fe0a:	f043 0301 	orr.w	r3, r3, #1
 801fe0e:	81a3      	strh	r3, [r4, #12]
 801fe10:	89a3      	ldrh	r3, [r4, #12]
 801fe12:	431d      	orrs	r5, r3
 801fe14:	81a5      	strh	r5, [r4, #12]
 801fe16:	e7cf      	b.n	801fdb8 <__smakebuf_r+0x18>

0801fe18 <_fstat_r>:
 801fe18:	b538      	push	{r3, r4, r5, lr}
 801fe1a:	4d07      	ldr	r5, [pc, #28]	; (801fe38 <_fstat_r+0x20>)
 801fe1c:	2300      	movs	r3, #0
 801fe1e:	4604      	mov	r4, r0
 801fe20:	4608      	mov	r0, r1
 801fe22:	4611      	mov	r1, r2
 801fe24:	602b      	str	r3, [r5, #0]
 801fe26:	f7e1 fe56 	bl	8001ad6 <_fstat>
 801fe2a:	1c43      	adds	r3, r0, #1
 801fe2c:	d102      	bne.n	801fe34 <_fstat_r+0x1c>
 801fe2e:	682b      	ldr	r3, [r5, #0]
 801fe30:	b103      	cbz	r3, 801fe34 <_fstat_r+0x1c>
 801fe32:	6023      	str	r3, [r4, #0]
 801fe34:	bd38      	pop	{r3, r4, r5, pc}
 801fe36:	bf00      	nop
 801fe38:	2400e8c4 	.word	0x2400e8c4

0801fe3c <_isatty_r>:
 801fe3c:	b538      	push	{r3, r4, r5, lr}
 801fe3e:	4d06      	ldr	r5, [pc, #24]	; (801fe58 <_isatty_r+0x1c>)
 801fe40:	2300      	movs	r3, #0
 801fe42:	4604      	mov	r4, r0
 801fe44:	4608      	mov	r0, r1
 801fe46:	602b      	str	r3, [r5, #0]
 801fe48:	f7e1 fe55 	bl	8001af6 <_isatty>
 801fe4c:	1c43      	adds	r3, r0, #1
 801fe4e:	d102      	bne.n	801fe56 <_isatty_r+0x1a>
 801fe50:	682b      	ldr	r3, [r5, #0]
 801fe52:	b103      	cbz	r3, 801fe56 <_isatty_r+0x1a>
 801fe54:	6023      	str	r3, [r4, #0]
 801fe56:	bd38      	pop	{r3, r4, r5, pc}
 801fe58:	2400e8c4 	.word	0x2400e8c4

0801fe5c <abort>:
 801fe5c:	b508      	push	{r3, lr}
 801fe5e:	2006      	movs	r0, #6
 801fe60:	f000 f82c 	bl	801febc <raise>
 801fe64:	2001      	movs	r0, #1
 801fe66:	f7e1 fde7 	bl	8001a38 <_exit>

0801fe6a <_raise_r>:
 801fe6a:	291f      	cmp	r1, #31
 801fe6c:	b538      	push	{r3, r4, r5, lr}
 801fe6e:	4604      	mov	r4, r0
 801fe70:	460d      	mov	r5, r1
 801fe72:	d904      	bls.n	801fe7e <_raise_r+0x14>
 801fe74:	2316      	movs	r3, #22
 801fe76:	6003      	str	r3, [r0, #0]
 801fe78:	f04f 30ff 	mov.w	r0, #4294967295
 801fe7c:	bd38      	pop	{r3, r4, r5, pc}
 801fe7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fe80:	b112      	cbz	r2, 801fe88 <_raise_r+0x1e>
 801fe82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fe86:	b94b      	cbnz	r3, 801fe9c <_raise_r+0x32>
 801fe88:	4620      	mov	r0, r4
 801fe8a:	f000 f831 	bl	801fef0 <_getpid_r>
 801fe8e:	462a      	mov	r2, r5
 801fe90:	4601      	mov	r1, r0
 801fe92:	4620      	mov	r0, r4
 801fe94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe98:	f000 b818 	b.w	801fecc <_kill_r>
 801fe9c:	2b01      	cmp	r3, #1
 801fe9e:	d00a      	beq.n	801feb6 <_raise_r+0x4c>
 801fea0:	1c59      	adds	r1, r3, #1
 801fea2:	d103      	bne.n	801feac <_raise_r+0x42>
 801fea4:	2316      	movs	r3, #22
 801fea6:	6003      	str	r3, [r0, #0]
 801fea8:	2001      	movs	r0, #1
 801feaa:	e7e7      	b.n	801fe7c <_raise_r+0x12>
 801feac:	2400      	movs	r4, #0
 801feae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801feb2:	4628      	mov	r0, r5
 801feb4:	4798      	blx	r3
 801feb6:	2000      	movs	r0, #0
 801feb8:	e7e0      	b.n	801fe7c <_raise_r+0x12>
	...

0801febc <raise>:
 801febc:	4b02      	ldr	r3, [pc, #8]	; (801fec8 <raise+0xc>)
 801febe:	4601      	mov	r1, r0
 801fec0:	6818      	ldr	r0, [r3, #0]
 801fec2:	f7ff bfd2 	b.w	801fe6a <_raise_r>
 801fec6:	bf00      	nop
 801fec8:	2400006c 	.word	0x2400006c

0801fecc <_kill_r>:
 801fecc:	b538      	push	{r3, r4, r5, lr}
 801fece:	4d07      	ldr	r5, [pc, #28]	; (801feec <_kill_r+0x20>)
 801fed0:	2300      	movs	r3, #0
 801fed2:	4604      	mov	r4, r0
 801fed4:	4608      	mov	r0, r1
 801fed6:	4611      	mov	r1, r2
 801fed8:	602b      	str	r3, [r5, #0]
 801feda:	f7e1 fd9d 	bl	8001a18 <_kill>
 801fede:	1c43      	adds	r3, r0, #1
 801fee0:	d102      	bne.n	801fee8 <_kill_r+0x1c>
 801fee2:	682b      	ldr	r3, [r5, #0]
 801fee4:	b103      	cbz	r3, 801fee8 <_kill_r+0x1c>
 801fee6:	6023      	str	r3, [r4, #0]
 801fee8:	bd38      	pop	{r3, r4, r5, pc}
 801feea:	bf00      	nop
 801feec:	2400e8c4 	.word	0x2400e8c4

0801fef0 <_getpid_r>:
 801fef0:	f7e1 bd8a 	b.w	8001a08 <_getpid>

0801fef4 <_init>:
 801fef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fef6:	bf00      	nop
 801fef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fefa:	bc08      	pop	{r3}
 801fefc:	469e      	mov	lr, r3
 801fefe:	4770      	bx	lr

0801ff00 <_fini>:
 801ff00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff02:	bf00      	nop
 801ff04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff06:	bc08      	pop	{r3}
 801ff08:	469e      	mov	lr, r3
 801ff0a:	4770      	bx	lr
